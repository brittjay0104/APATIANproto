novoda/spikes -- ataulm -- Ataul Munim
https://github.com/novoda/spikes.git
git clone https://github.com/novoda/spikes.git
.\/spikes\
.\/spikes\.git
0
Project cloned!
Ataul Munim is responsible for commit 222fef231538d54cccaf96e3c15880c10c058798
Ataul Munim is responsible for commit 74796d65b8cc2f998b1fcd1e8266a795d8e3c481
Ataul Munim is responsible for commit 3ef6e6319ec6a9ead9746e5083e4e65b9a260179
Ataul Munim is responsible for commit 58e22d72bde07e31a20380cf2d0c12b6670a13a2
Ataul Munim is responsible for commit 01b5fc9d1e174cde689437f0b0d215e538090aff
Ataul Munim is responsible for commit 707790a4ed408793f33d03655d52576c4bce19d9
Ataul Munim is responsible for commit deb4daabbd91e7242248f463517d8c1f0e295671
Ataul Munim is responsible for commit 996df319625e8a5305ec12bed8affc6e2e2f17d8
Ataul Munim is responsible for commit b5c949f8ebcedd476407ca61d954845ace866e6b
Ataul Munim is responsible for commit 63f61d2cb76626f854bb540bc684a5b34fb438e2
Ataul Munim is responsible for commit 55a78bda12eca1ca01441ee75048f7d6c72d1fa0
Ataul Munim is responsible for commit 9c33cb3589818f91a368bb66d218b9c708b193e2
Ataul Munim is responsible for commit cce4558502c05e9bc1e7b832f73a1de734117c1e
Ataul Munim is responsible for commit cb93ffb8454cf99359dff578ff73dfad63321d89
Ataul Munim is responsible for commit 2c8b0159c542dc63216edac7d2cc1e434f87425f
Ataul Munim is responsible for commit dc0b498077be7a79d8cf6a45d4e89991ed34803a
Ataul Munim is responsible for commit fa423ea387abb6e92b48170109ad2c21b0dd36b5
Ataul Munim is responsible for commit 5a97731ea690ea41160fbec872088c81787100c3
Ataul Munim is responsible for commit 6f6ce1906b77583c35a5b6abf97f313d261eb388
Ataul Munim is responsible for commit 2e965426ea77fbd23e4c938cdc11f7f93cebc1ba
Ataul Munim is responsible for commit af3fca5c41e14e407380cf128331688866e13a36
Ataul Munim is responsible for commit 3e3e3a099c23045fe3ffe840c3e080815c4023ba
Ataul Munim is responsible for commit ac112617bfdd907c33ff148c9f89a05eda04beac
Ataul Munim is responsible for commit f5d17332f4329c509a9435d1a45ba39020e645c4
Ataul Munim is responsible for commit acf80ecab6a74ef04ab8a5fcc607968c6c48574f
Ataul Munim is responsible for commit a2e75f9efa72c8f3e3a18ff08102736f04bc6a49
Ataul Munim is responsible for commit 254259c6eeba5dc51bfa0753e5f670f797bc00d8
Ataul Munim is responsible for commit 08c3fdd5c648ea9bbbb1438ec7b11670f555dc9c
Ataul Munim is responsible for commit f4cfba2ebd9e1b1c72b90f723ea32493af78ae48
Ataul Munim is responsible for commit 43448a01947c8a8733fb3812a946ae27c7fb2c8f
Ataul Munim is responsible for commit 6d9706b9c60269c9d428d64ef987e9a800f87d74
Ataul Munim is responsible for commit a76c42b912d02373d031c7f8cce82a13957c68c9
Ataul Munim is responsible for commit 6722fa6e1ba728ee56d25047683b46bf3976afbe
Ataul Munim is responsible for commit a4dd36af4682d330d683879244b7fc8075d26ec1
Ataul Munim is responsible for commit f8ada24723a674bda778a165c0dd4b185b568761
Ataul Munim is responsible for commit c4a31c81f82f157d9e9e2ec2fe7f64caf853aa49
Ataul Munim is responsible for commit ac2ff40e72c4380c82c525432a45d5c24bc8b7d5
Ataul Munim is responsible for commit 5a781f8f85e93ca37a87a8d381adfbfcb0e477a3
Ataul Munim is responsible for commit 46f721e4d3d549e0a3b622b0e598f8cf1c455502
Ataul Munim is responsible for commit 5bcd750e8580deaa5c97989bda7521216707d8be
Ataul Munim is responsible for commit f837285078026f80e3e3b81b060ec27c9def6bbe
Ataul Munim is responsible for commit 5a63ebc3b9650a8d9855fcda5ea156f68a738e0c
Ataul Munim is responsible for commit 41182657790d60fdd6ae32f23ec247fd508372cd
Ataul Munim is responsible for commit d8b360e892f731015e2d35fd721f2f56727a4723
Ataul Munim is responsible for commit b999e8935be03c0e0d71bcfc118e6c9f2b9e16c9
Added AccessibilityServices.java to .\/spikes\ repository source files.
Added Action.java to .\/spikes\ repository source files.
Added Actions.java to .\/spikes\ repository source files.
Added ActionsAccessibilityDelegate.java to .\/spikes\ repository source files.
Added ActionsAlertDialogCreator.java to .\/spikes\ repository source files.
Added AccessibilityServicesActivity.java to .\/spikes\ repository source files.
Added Demo.java to .\/spikes\ repository source files.
Added DemoAdapter.java to .\/spikes\ repository source files.
Added CustomActionsActivity.java to .\/spikes\ repository source files.
Added TweetView.java to .\/spikes\ repository source files.
Added DemosActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added DrawerActivity.java to .\/spikes\ repository source files.
Added EarthActivity.java to .\/spikes\ repository source files.
Added ProHaxDrawerActivity.java to .\/spikes\ repository source files.
Added SaturnActivity.java to .\/spikes\ repository source files.
Added LocalPlayerActivity.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added CastApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ComposeSmsActivity.java to .\/spikes\ repository source files.
Added HeadlessSmsSendService.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MmsReceiver.java to .\/spikes\ repository source files.
Added SmsReceiver.java to .\/spikes\ repository source files.
Added ExtendedDemoActivity.java to .\/spikes\ repository source files.
Added ExtendedDemoApplication.java to .\/spikes\ repository source files.
Added SimpleDemoActivity.java to .\/spikes\ repository source files.
Added SimpleDemoApplication.java to .\/spikes\ repository source files.
Added Binder.java to .\/spikes\ repository source files.
Added ConnectedClient.java to .\/spikes\ repository source files.
Added Connection.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnection.java to .\/spikes\ repository source files.
Added ServiceConnectionCallback.java to .\/spikes\ repository source files.
Added EasyCustomTabs.java to .\/spikes\ repository source files.
Added ActionButtonComposer.java to .\/spikes\ repository source files.
Added CloseButtonIconComposer.java to .\/spikes\ repository source files.
Added Composer.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilder.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigator.java to .\/spikes\ repository source files.
Added EasyCustomTabsWebNavigator.java to .\/spikes\ repository source files.
Added ExitAnimationsComposer.java to .\/spikes\ repository source files.
Added IntentCustomizer.java to .\/spikes\ repository source files.
Added MenuItemComposer.java to .\/spikes\ repository source files.
Added NavigationFallback.java to .\/spikes\ repository source files.
Added Navigator.java to .\/spikes\ repository source files.
Added ShowTitleComposer.java to .\/spikes\ repository source files.
Added StartAnimationsComposer.java to .\/spikes\ repository source files.
Added ToolbarColorComposer.java to .\/spikes\ repository source files.
Added UrlBarHidingComposer.java to .\/spikes\ repository source files.
Added WebNavigator.java to .\/spikes\ repository source files.
Added AvailableAppProvider.java to .\/spikes\ repository source files.
Added BestPackageFinder.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProvider.java to .\/spikes\ repository source files.
Added BinderTest.java to .\/spikes\ repository source files.
Added ConnectedClientTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnectionTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigatorTest.java to .\/spikes\ repository source files.
Added BestPackageFinderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProviderTest.java to .\/spikes\ repository source files.
Added ApiPagedChannelHistory.java to .\/spikes\ repository source files.
Added ApiPagedResponse.java to .\/spikes\ repository source files.
Added ChannelHistory.java to .\/spikes\ repository source files.
Added HistoryConverter.java to .\/spikes\ repository source files.
Added Runner.java to .\/spikes\ repository source files.
Added SlackHistoryFetcher.java to .\/spikes\ repository source files.
Added SlackWebService.java to .\/spikes\ repository source files.
Added ApiPagedResponseTest.java to .\/spikes\ repository source files.
Added MainActivityTest.java to .\/spikes\ repository source files.
Added LoremAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added BetterAccountManager.java to .\/spikes\ repository source files.
Added BetterAuthenticator.java to .\/spikes\ repository source files.
Added BetterAuthenticatorActivity.java to .\/spikes\ repository source files.
Added GertHerbAuthenticator.java to .\/spikes\ repository source files.
Added GertHerbAuthenticatorService.java to .\/spikes\ repository source files.
Added NoAccountException.java to .\/spikes\ repository source files.
Added ReactiveAuthenticatorActivity.java to .\/spikes\ repository source files.
Added Token.java to .\/spikes\ repository source files.
Added GertHerbActivity.java to .\/spikes\ repository source files.
Added GertHerbApplication.java to .\/spikes\ repository source files.
Added GertHerbAuthenticationActivity.java to .\/spikes\ repository source files.
Added TypefaceFactory.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added ViewServer.java to .\/spikes\ repository source files.
Added ViewServerManager.java to .\/spikes\ repository source files.
Added DeveloperError.java to .\/spikes\ repository source files.
Added HomeActivity.java to .\/spikes\ repository source files.
Added LoginActivity.java to .\/spikes\ repository source files.
Added LoginView.java to .\/spikes\ repository source files.
Added UserCredentials.java to .\/spikes\ repository source files.
Added FontButton.java to .\/spikes\ repository source files.
Added FontEditText.java to .\/spikes\ repository source files.
Added FontTextView.java to .\/spikes\ repository source files.
Added GithubApi.java to .\/spikes\ repository source files.
Added GithubApiFactory.java to .\/spikes\ repository source files.
Added TokenRequest.java to .\/spikes\ repository source files.
Added TokenResponse.java to .\/spikes\ repository source files.
Added Dummy.java to .\/spikes\ repository source files.
Added DummyTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MainFragment.java to .\/spikes\ repository source files.
Added Attributes.java to .\/spikes\ repository source files.
Added Coordinates.java to .\/spikes\ repository source files.
Added IndicatorCoordinatesCalculator.java to .\/spikes\ repository source files.
Added LandingStrip.java to .\/spikes\ repository source files.
Added MutableCoordinates.java to .\/spikes\ repository source files.
Added OnPagerAdapterChangedListener.java to .\/spikes\ repository source files.
Added PagerAdapterObserver.java to .\/spikes\ repository source files.
Added Scrollable.java to .\/spikes\ repository source files.
Added ScrollingPageChangeListener.java to .\/spikes\ repository source files.
Added State.java to .\/spikes\ repository source files.
Added TabsContainer.java to .\/spikes\ repository source files.
Added CustomLandingStrip.java to .\/spikes\ repository source files.
Added CustomTabActivity.java to .\/spikes\ repository source files.
Added ExampleRainbowLandingStrip.java to .\/spikes\ repository source files.
Added FixedWidthTabActivity.java to .\/spikes\ repository source files.
Added NoFragmentsSimpleTextTabActivity.java to .\/spikes\ repository source files.
Added Data.java to .\/spikes\ repository source files.
Added DemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added SmallDemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerFragment.java to .\/spikes\ repository source files.
Added DemoViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapterState.java to .\/spikes\ repository source files.
Added SimpleTextTabActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AbTestingParamsLoadedCallback.java to .\/spikes\ repository source files.
Added AyBe.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added WeakStartCallback.java to .\/spikes\ repository source files.
Added LeakActivity.java to .\/spikes\ repository source files.
Added NoLeakActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added Bar.java to .\/spikes\ repository source files.
Added Foo.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added FooTest.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added ColorScheme.java to .\/spikes\ repository source files.
Added ColorUtils.java to .\/spikes\ repository source files.
Added DominantColorCalculator.java to .\/spikes\ repository source files.
Added FloatUtils.java to .\/spikes\ repository source files.
Added MedianCutQuantizer.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added PayPalFragment.java to .\/spikes\ repository source files.
Added PayPalHelper.java to .\/spikes\ repository source files.
Added MaxLengthMessageComposer.java to .\/spikes\ repository source files.
Added MessageComposer.java to .\/spikes\ repository source files.
Added TwitterMessageComposer.java to .\/spikes\ repository source files.
Added DisabledMruPersister.java to .\/spikes\ repository source files.
Added MruPersister.java to .\/spikes\ repository source files.
Added SharedPreferencesMruPersister.java to .\/spikes\ repository source files.
Added OnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added PriorityShareDialog.java to .\/spikes\ repository source files.
Added PrioritySharer.java to .\/spikes\ repository source files.
Added ShareTargetsAdapter.java to .\/spikes\ repository source files.
Added SimpleOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added TargetApps.java to .\/spikes\ repository source files.
Added TwitterOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AdvancedActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SimpleActivity.java to .\/spikes\ repository source files.
Added LockingActivity.java to .\/spikes\ repository source files.
Added PostLockingActivity.java to .\/spikes\ repository source files.
Added PreLockingActivity.java to .\/spikes\ repository source files.
Added DummyAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added NovoStaggeredGridView.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SpikeApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SwipeableView.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MyClass.java to .\/spikes\ repository source files.
Added MyClassTest.java to .\/spikes\ repository source files.
Added MyAndroidClassTest.java to .\/spikes\ repository source files.
Added RobolectricGradleTestRunner.java to .\/spikes\ repository source files.
Added Mapper.java to .\/spikes\ repository source files.
Added Query.java to .\/spikes\ repository source files.
Added TypedResolver.java to .\/spikes\ repository source files.
Added CursorList.java to .\/spikes\ repository source files.
Added CursorListIterator.java to .\/spikes\ repository source files.
Added CursorMarshaller.java to .\/spikes\ repository source files.
Added EmptyListIterator.java to .\/spikes\ repository source files.
Added ReflectionCursorMarshaller.java to .\/spikes\ repository source files.
Added RichClass.java to .\/spikes\ repository source files.
Added Setter.java to .\/spikes\ repository source files.
Added Function.java to .\/spikes\ repository source files.
Added TypedElementLoader.java to .\/spikes\ repository source files.
Added TypedLoader.java to .\/spikes\ repository source files.
Added Marshaller.java to .\/spikes\ repository source files.
Added ObjectMapper.java to .\/spikes\ repository source files.
Added TypedActivity.java to .\/spikes\ repository source files.
Added StringUtil.java to .\/spikes\ repository source files.
Added MyObject.java to .\/spikes\ repository source files.
Added MediaPlayerSwitcherActivity.java to .\/spikes\ repository source files.
Added VideoPlayerService.java to .\/spikes\ repository source files.
Added RelativeLayoutWithForeground.java to .\/spikes\ repository source files.
Added DemoActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added RecognitionService.java to .\/spikes\ repository source files.
Added SessionService.java to .\/spikes\ repository source files.
Added SettingsActivity.java to .\/spikes\ repository source files.
Added SmartContextInteractionService.java to .\/spikes\ repository source files.

 ************ ANALYZING FOR USAGE PATTERN ADDITION ************


****Parsing for addition at revision 222fef231538d54cccaf96e3c15880c10c058798****

Added AccessibilityServices.java to .\/spikes\ repository source files.
Added Action.java to .\/spikes\ repository source files.
Added Actions.java to .\/spikes\ repository source files.
Added ActionsAccessibilityDelegate.java to .\/spikes\ repository source files.
Added ActionsAlertDialogCreator.java to .\/spikes\ repository source files.
Added AccessibilityServicesActivity.java to .\/spikes\ repository source files.
Added Demo.java to .\/spikes\ repository source files.
Added DemoAdapter.java to .\/spikes\ repository source files.
Added CustomActionsActivity.java to .\/spikes\ repository source files.
Added TweetView.java to .\/spikes\ repository source files.
Added DemosActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added DrawerActivity.java to .\/spikes\ repository source files.
Added EarthActivity.java to .\/spikes\ repository source files.
Added ProHaxDrawerActivity.java to .\/spikes\ repository source files.
Added SaturnActivity.java to .\/spikes\ repository source files.
Added LocalPlayerActivity.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added CastApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ComposeSmsActivity.java to .\/spikes\ repository source files.
Added HeadlessSmsSendService.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MmsReceiver.java to .\/spikes\ repository source files.
Added SmsReceiver.java to .\/spikes\ repository source files.
Added ExtendedDemoActivity.java to .\/spikes\ repository source files.
Added ExtendedDemoApplication.java to .\/spikes\ repository source files.
Added SimpleDemoActivity.java to .\/spikes\ repository source files.
Added SimpleDemoApplication.java to .\/spikes\ repository source files.
Added Binder.java to .\/spikes\ repository source files.
Added ConnectedClient.java to .\/spikes\ repository source files.
Added Connection.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnection.java to .\/spikes\ repository source files.
Added ServiceConnectionCallback.java to .\/spikes\ repository source files.
Added EasyCustomTabs.java to .\/spikes\ repository source files.
Added ActionButtonComposer.java to .\/spikes\ repository source files.
Added CloseButtonIconComposer.java to .\/spikes\ repository source files.
Added Composer.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilder.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigator.java to .\/spikes\ repository source files.
Added EasyCustomTabsWebNavigator.java to .\/spikes\ repository source files.
Added ExitAnimationsComposer.java to .\/spikes\ repository source files.
Added IntentCustomizer.java to .\/spikes\ repository source files.
Added MenuItemComposer.java to .\/spikes\ repository source files.
Added NavigationFallback.java to .\/spikes\ repository source files.
Added Navigator.java to .\/spikes\ repository source files.
Added ShowTitleComposer.java to .\/spikes\ repository source files.
Added StartAnimationsComposer.java to .\/spikes\ repository source files.
Added ToolbarColorComposer.java to .\/spikes\ repository source files.
Added UrlBarHidingComposer.java to .\/spikes\ repository source files.
Added WebNavigator.java to .\/spikes\ repository source files.
Added AvailableAppProvider.java to .\/spikes\ repository source files.
Added BestPackageFinder.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProvider.java to .\/spikes\ repository source files.
Added BinderTest.java to .\/spikes\ repository source files.
Added ConnectedClientTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnectionTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigatorTest.java to .\/spikes\ repository source files.
Added BestPackageFinderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProviderTest.java to .\/spikes\ repository source files.
Added ApiPagedChannelHistory.java to .\/spikes\ repository source files.
Added ApiPagedResponse.java to .\/spikes\ repository source files.
Added ChannelHistory.java to .\/spikes\ repository source files.
Added HistoryConverter.java to .\/spikes\ repository source files.
Added Runner.java to .\/spikes\ repository source files.
Added SlackHistoryFetcher.java to .\/spikes\ repository source files.
Added SlackWebService.java to .\/spikes\ repository source files.
Added ApiPagedResponseTest.java to .\/spikes\ repository source files.
Added MainActivityTest.java to .\/spikes\ repository source files.
Added LoremAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added BetterAccountManager.java to .\/spikes\ repository source files.
Added BetterAuthenticator.java to .\/spikes\ repository source files.
Added BetterAuthenticatorActivity.java to .\/spikes\ repository source files.
Added GertHerbAuthenticator.java to .\/spikes\ repository source files.
Added GertHerbAuthenticatorService.java to .\/spikes\ repository source files.
Added NoAccountException.java to .\/spikes\ repository source files.
Added ReactiveAuthenticatorActivity.java to .\/spikes\ repository source files.
Added Token.java to .\/spikes\ repository source files.
Added GertHerbActivity.java to .\/spikes\ repository source files.
Added GertHerbApplication.java to .\/spikes\ repository source files.
Added GertHerbAuthenticationActivity.java to .\/spikes\ repository source files.
Added TypefaceFactory.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added ViewServer.java to .\/spikes\ repository source files.
Added ViewServerManager.java to .\/spikes\ repository source files.
Added DeveloperError.java to .\/spikes\ repository source files.
Added HomeActivity.java to .\/spikes\ repository source files.
Added LoginActivity.java to .\/spikes\ repository source files.
Added LoginView.java to .\/spikes\ repository source files.
Added UserCredentials.java to .\/spikes\ repository source files.
Added FontButton.java to .\/spikes\ repository source files.
Added FontEditText.java to .\/spikes\ repository source files.
Added FontTextView.java to .\/spikes\ repository source files.
Added GithubApi.java to .\/spikes\ repository source files.
Added GithubApiFactory.java to .\/spikes\ repository source files.
Added TokenRequest.java to .\/spikes\ repository source files.
Added TokenResponse.java to .\/spikes\ repository source files.
Added Dummy.java to .\/spikes\ repository source files.
Added DummyTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MainFragment.java to .\/spikes\ repository source files.
Added Attributes.java to .\/spikes\ repository source files.
Added Coordinates.java to .\/spikes\ repository source files.
Added IndicatorCoordinatesCalculator.java to .\/spikes\ repository source files.
Added LandingStrip.java to .\/spikes\ repository source files.
Added MutableCoordinates.java to .\/spikes\ repository source files.
Added OnPagerAdapterChangedListener.java to .\/spikes\ repository source files.
Added PagerAdapterObserver.java to .\/spikes\ repository source files.
Added Scrollable.java to .\/spikes\ repository source files.
Added ScrollingPageChangeListener.java to .\/spikes\ repository source files.
Added State.java to .\/spikes\ repository source files.
Added TabsContainer.java to .\/spikes\ repository source files.
Added CustomLandingStrip.java to .\/spikes\ repository source files.
Added CustomTabActivity.java to .\/spikes\ repository source files.
Added ExampleRainbowLandingStrip.java to .\/spikes\ repository source files.
Added FixedWidthTabActivity.java to .\/spikes\ repository source files.
Added NoFragmentsSimpleTextTabActivity.java to .\/spikes\ repository source files.
Added Data.java to .\/spikes\ repository source files.
Added DemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added SmallDemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerFragment.java to .\/spikes\ repository source files.
Added DemoViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapterState.java to .\/spikes\ repository source files.
Added SimpleTextTabActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AbTestingParamsLoadedCallback.java to .\/spikes\ repository source files.
Added AyBe.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added WeakStartCallback.java to .\/spikes\ repository source files.
Added LeakActivity.java to .\/spikes\ repository source files.
Added NoLeakActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added Bar.java to .\/spikes\ repository source files.
Added Foo.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added FooTest.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added ColorScheme.java to .\/spikes\ repository source files.
Added ColorUtils.java to .\/spikes\ repository source files.
Added DominantColorCalculator.java to .\/spikes\ repository source files.
Added FloatUtils.java to .\/spikes\ repository source files.
Added MedianCutQuantizer.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added PayPalFragment.java to .\/spikes\ repository source files.
Added PayPalHelper.java to .\/spikes\ repository source files.
Added MaxLengthMessageComposer.java to .\/spikes\ repository source files.
Added MessageComposer.java to .\/spikes\ repository source files.
Added TwitterMessageComposer.java to .\/spikes\ repository source files.
Added DisabledMruPersister.java to .\/spikes\ repository source files.
Added MruPersister.java to .\/spikes\ repository source files.
Added SharedPreferencesMruPersister.java to .\/spikes\ repository source files.
Added OnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added PriorityShareDialog.java to .\/spikes\ repository source files.
Added PrioritySharer.java to .\/spikes\ repository source files.
Added ShareTargetsAdapter.java to .\/spikes\ repository source files.
Added SimpleOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added TargetApps.java to .\/spikes\ repository source files.
Added TwitterOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AdvancedActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SimpleActivity.java to .\/spikes\ repository source files.
Added LockingActivity.java to .\/spikes\ repository source files.
Added PostLockingActivity.java to .\/spikes\ repository source files.
Added PreLockingActivity.java to .\/spikes\ repository source files.
Added DummyAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added NovoStaggeredGridView.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SpikeApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SwipeableView.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MyClass.java to .\/spikes\ repository source files.
Added MyClassTest.java to .\/spikes\ repository source files.
Added MyAndroidClassTest.java to .\/spikes\ repository source files.
Added RobolectricGradleTestRunner.java to .\/spikes\ repository source files.
Added Mapper.java to .\/spikes\ repository source files.
Added Query.java to .\/spikes\ repository source files.
Added TypedResolver.java to .\/spikes\ repository source files.
Added CursorList.java to .\/spikes\ repository source files.
Added CursorListIterator.java to .\/spikes\ repository source files.
Added CursorMarshaller.java to .\/spikes\ repository source files.
Added EmptyListIterator.java to .\/spikes\ repository source files.
Added ReflectionCursorMarshaller.java to .\/spikes\ repository source files.
Added RichClass.java to .\/spikes\ repository source files.
Added Setter.java to .\/spikes\ repository source files.
Added Function.java to .\/spikes\ repository source files.
Added TypedElementLoader.java to .\/spikes\ repository source files.
Added TypedLoader.java to .\/spikes\ repository source files.
Added Marshaller.java to .\/spikes\ repository source files.
Added ObjectMapper.java to .\/spikes\ repository source files.
Added TypedActivity.java to .\/spikes\ repository source files.
Added StringUtil.java to .\/spikes\ repository source files.
Added MyObject.java to .\/spikes\ repository source files.
Added MediaPlayerSwitcherActivity.java to .\/spikes\ repository source files.
Added VideoPlayerService.java to .\/spikes\ repository source files.
Added RelativeLayoutWithForeground.java to .\/spikes\ repository source files.
Added DemoActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added RecognitionService.java to .\/spikes\ repository source files.
Added SessionService.java to .\/spikes\ repository source files.
Added SettingsActivity.java to .\/spikes\ repository source files.
Added SmartContextInteractionService.java to .\/spikes\ repository source files.
AccessibilityManager accessibilityManager = (AccessibilityManager) context.getSystemService(Context.ACCESSIBILITY_SERVICE);
enabledServices=getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN)
List<AccessibilityServiceInfo> enabledServices = getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN);
List<AccessibilityServiceInfo> enabledServices = getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN);
Action otherAction = (Action) o;
int result = id;
Actions otherActions = (Actions) o;
label=resources.getString(action.getLabel())
String label = resources.getString(action.getLabel());
action=actions.findActionById(actionId)
Action action = actions.findActionById(actionId);
action=actions.getAction(which)
Action action = actions.getAction(which);
CharSequence[] itemLabels = new CharSequence[actions.getCount()];
View view = convertView;
demo=getItem(position)
Demo demo = getItem(position);
Intent intent = new Intent(context, demo.activityClass);
layoutInflater=LayoutInflater.from(parent.getContext())
LayoutInflater layoutInflater = LayoutInflater.from(parent.getContext());
TweetView tweetView = (TweetView) findViewById(R.id.tweet);
actions=createActions(tweet,listener)
final Actions actions = createActions(tweet, listener);
ListView listView = ((ListView) findViewById(R.id.list));
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
final DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close) {

            @Override
            public void onDrawerClosed(View drawerView) {
                super.onDrawerClosed(drawerView);
                // waiting for the drawer to close, then navigating seems to cause issue.
                // why wait for the drawer to close? jankiness.
                if (pendingNavigationClick != null) {
                    startActivity(pendingNavigationClick);
                    pendingNavigationClick = null;
                }
            }

        };
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close);
Intent intent;
b=getIntent().getExtras()
Bundle b = getIntent().getExtras();
mShouldStartPlayback=b.getBoolean("shouldStart")
boolean mShouldStartPlayback = b.getBoolean("shouldStart");
startPosition=b.getInt("startPosition",0)
int startPosition = b.getInt("startPosition", 0);
currentPos=mVideoView.getCurrentPosition()
int currentPos = mVideoView.getCurrentPosition();
String msg;
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, mDisplaySize.y + getActionBar().getHeight());
mm=mSelectedMedia.getMetadata()
MediaMetadata mm = mSelectedMedia.getMetadata();
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, (int) (mDisplaySize.x * ASPECT_RATIO));
WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
width=display.getWidth()
int width = display.getWidth();
height=display.getHeight()
int height = display.getHeight();
int resourceId = 0;
String videoUrl = "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4#sthash.rJ5rPZy8.dpuf";
String title = "Jahre Philharmonie";
String description = "Awesome film you must watch!";
String author = "Blundell";
String thumbUrl = "http://www.ustream.tv/blog/wp-content/uploads/2013/10/simply-go-live.png";
MediaMetadata metadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE);
mediaInfo=new MediaInfo.Builder(videoUrl).setMetadata(metadata).setStreamType(MediaInfo.STREAM_TYPE_BUFFERED).setContentType("video/mp4").build()
MediaInfo mediaInfo = new MediaInfo.Builder(videoUrl)
                        .setMetadata(metadata)
                        .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)
                        .setContentType("video/mp4")
                        .build();
Intent intent = new Intent(MainActivity.this, LocalPlayerActivity.class);
preferences=getPreferences(MODE_PRIVATE)
SharedPreferences preferences = getPreferences(MODE_PRIVATE);
defaultSmsPackage=Telephony.Sms.getDefaultSmsPackage(this)
String defaultSmsPackage = Telephony.Sms.getDefaultSmsPackage(this);
Intent intent = new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
availableAppProvider=EasyCustomTabs.getInstance()
AvailableAppProvider availableAppProvider = EasyCustomTabs.getInstance();
ConnectedClient connectedClient = new ConnectedClient(client);
binder=Binder.newInstance()
Binder binder = Binder.newInstance();
List<Composer> composerList = new ArrayList<>();
customTabsSession=connection.newSession()
CustomTabsSession customTabsSession = connection.newSession();
CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(customTabsSession);
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
context=EasyCustomTabs.getInstance().getContext()
Context context = EasyCustomTabs.getInstance().getContext();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
packagesSupportingCustomTabs=getPackagesSupportingCustomTabs()
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
defaultPackage=getDefaultPackage()
String defaultPackage = getDefaultPackage();
defaultActivityInfo=packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK,0)
ResolveInfo defaultActivityInfo = packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK, 0);
String packageName = defaultActivityInfo.activityInfo.packageName;
resolvedInfoList=packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK,0)
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<String> packagesSupportingCustomTabs = new ArrayList<>();
Intent serviceIntent = new Intent();
bestPackageFinder=BestPackageFinder.newInstance()
BestPackageFinder bestPackageFinder = BestPackageFinder.newInstance();
packageName=bestPackageFinder.findBestPackage()
String packageName = bestPackageFinder.findBestPackage();
resolveInfo=createResolveInfoFor(packageName)
ResolveInfo resolveInfo = createResolveInfoFor(packageName);
ResolveInfo resolveInfo = new ResolveInfo();
List<ResolveInfo> resolveInfoList = new ArrayList<>();
defaultPackageResolveInfo=createResolveInfoFor(packageName)
ResolveInfo defaultPackageResolveInfo = createResolveInfoFor(packageName);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
oldestApiMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage oldestApiMessage = apiMessages.get(apiMessages.size() - 1);
String lastResponseEpochTime = oldestApiMessage.timeStamp;
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
latestMessage=latestMessages.get(latestMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage latestMessage = latestMessages.get(latestMessages.size() - 1);
latestMessageDateTime=convertToLocalDateTime(latestMessage.timeStamp)
LocalDateTime latestMessageDateTime = convertToLocalDateTime(latestMessage.timeStamp);
List<ChannelHistory.Message> messages = new ArrayList<>();
historyFrom=getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1))
LocalDateTime historyFrom = getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1));
historyTo=getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0))
LocalDateTime historyTo = getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0));
String text = apiMessage.text;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
lastMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage lastMessage = apiMessages.get(apiMessages.size() - 1);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
firstMessage=apiMessages.get(0)
ApiPagedChannelHistory.ApiMessage firstMessage = apiMessages.get(0);
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
String slackToken = args[0];
retrofit=new Retrofit.Builder().baseUrl("https://slack.com/api/").addConverterFactory(GsonConverterFactory.create()).build()
Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://slack.com/api/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();
slackWebService=retrofit.create(SlackWebService.class)
SlackWebService slackWebService = retrofit.create(SlackWebService.class);
slackHistoryFetcher=SlackHistoryFetcher.from(slackWebService,slackToken)
SlackHistoryFetcher slackHistoryFetcher = SlackHistoryFetcher.from(slackWebService, slackToken);
start=LocalDateTime.now()
LocalDateTime start = LocalDateTime.now();
end=LocalDateTime.now().minusDays(7)
LocalDateTime end = LocalDateTime.now().minusDays(7);
channelHistory=slackHistoryFetcher.getChannelHistory(start,end)
ChannelHistory channelHistory = slackHistoryFetcher.getChannelHistory(start, end);
HistoryConverter historyConverter = new HistoryConverter();
ApiPagedResponse apiPagedResponse = new ApiPagedResponse(start);
response=fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime())
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
apiPagedChannelHistory=response.body()
ApiPagedChannelHistory apiPagedChannelHistory = response.body();
channelHistory=slackWebService.getChannelHistory(slackToken,channel,lastResponseEpochTime,NUMBER_OF_RESULTS)
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
ApiPagedChannelHistory apiPagedChannelHistory = new ApiPagedChannelHistory();
ApiPagedChannelHistory.ApiMessage apiMessage = new ApiPagedChannelHistory.ApiMessage();
final TextView textView = new TextView(context);
emptyView=findViewById(R.id.empty_view)
View emptyView = findViewById(R.id.empty_view);
final Integer action = values[0];
LoremAdapter loremAdapter = new LoremAdapter();
accounts=accountManager.getAccountsByType(accountType)
Account[] accounts = accountManager.getAccountsByType(accountType);
Bundle result;
Bundle result;
Bundle result = new Bundle();
activity=createLoginIntent(context,accountType,authTokenType,requiredFeatures,options)
Intent activity = createLoginIntent(context, accountType, authTokenType, requiredFeatures, options);
Bundle bundle = new Bundle();
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
accounts=accountManager.getAccountsByType(authTokenType)
Account[] accounts = accountManager.getAccountsByType(authTokenType);
bundle=createResponseBundle(token)
Bundle bundle = createResponseBundle(token);
accountManager=AccountManager.get(this.getApplicationContext())
AccountManager accountManager = AccountManager.get(this.getApplicationContext());
Account account = new Account(token.getUserName(), getAccountName());
Bundle bundle = new Bundle();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
GertHerbAuthenticator authenticator = new GertHerbAuthenticator(this);
fontId=getFontId(context,attrs)
int fontId = getFontId(context, attrs);
fontType=getFontType(fontId)
FontType fontType = getFontType(fontId);
typedArray=context.obtainStyledAttributes(attrs,R.styleable.CustomTextAppearance)
TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CustomTextAppearance);
typeface=createTypeFace(context,fontType)
Typeface typeface = createTypeFace(context, fontType);
info=context.getApplicationInfo()
ApplicationInfo info = context.getApplicationInfo();
name=activity.getTitle().toString()
String name = activity.getTitle().toString();
client=mServer.accept()
Socket client = mServer.accept();
boolean result;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
BufferedReader in = null;
request=in.readLine()
final String request = in.readLine();
String command;
String parameters;
index=request.indexOf(' ')
int index = request.indexOf(' ');
boolean result;
boolean success = true;
BufferedWriter out = null;
index=parameters.indexOf(' ')
int index = parameters.indexOf(' ');
code=parameters.substring(0,index)
final String code = parameters.substring(0, index);
int hashCode = (int) Long.parseLong(code, 16);
window=findWindow(hashCode)
final View window = findWindow(hashCode);
dispatch=ViewDebug.class.getDeclaredMethod("dispatchCommand",View.class,String.class,String.class,OutputStream.class)
final Method dispatch = ViewDebug.class.getDeclaredMethod("dispatchCommand",
                        View.class, String.class, String.class, OutputStream.class);
View window = null;
boolean result = true;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
boolean result = true;
String focusName = null;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
View focusedWindow = null;
BufferedWriter out = null;
boolean needWindowListUpdate = false;
boolean needFocusedWindowUpdate = false;
BetterAccountManager accountManager = new BetterAccountManager(this, getString(R.string.account_type), getString(R.string.token_type), null);
loginView=Views.findById(this,R.id.login_view)
LoginView loginView = Views.findById(this, R.id.login_view);
authorizationApi=new GithubApiFactory().createAuthorizationApi(credentials.username,credentials.password)
GithubApi authorizationApi = new GithubApiFactory().createAuthorizationApi(credentials.username, credentials.password);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
Endpoint endpoint = new Endpoint() {
            @Override
            public String getUrl() {
                return GITHUB_API_URL;
            }

            @Override
            public String getName() {
                return "Live";
            }
        };
interceptor=createAuthorizationRequestInterceptor(username,password)
RequestInterceptor interceptor = createAuthorizationRequestInterceptor(username, password);
restAdapter=createRestAdapter(endpoint,interceptor)
RestAdapter restAdapter = createRestAdapter(endpoint, interceptor);
Dummy dummy = new Dummy();
result=dummy.explodes()
boolean result = dummy.explodes();
String base64EncodedPublicKey = "CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE";
premiumPurchase=inventory.getPurchase(SKU_PREMIUM)
Purchase premiumPurchase = inventory.getPurchase(SKU_PREMIUM);
infiniteGasPurchase=inventory.getPurchase(SKU_INFINITE_GAS)
Purchase infiniteGasPurchase = inventory.getPurchase(SKU_INFINITE_GAS);
gasPurchase=inventory.getPurchase(SKU_GAS)
Purchase gasPurchase = inventory.getPurchase(SKU_GAS);
String payload = "";
String payload = "";
String payload = "";
payload=p.getDeveloperPayload()
String payload = p.getDeveloperPayload();
int index = mTank >= TANK_RES_IDS.length ? TANK_RES_IDS.length - 1 : mTank;
AlertDialog.Builder bld = new AlertDialog.Builder(this);
spe=getPreferences(MODE_PRIVATE).edit()
SharedPreferences.Editor spe = getPreferences(MODE_PRIVATE).edit();
sp=getPreferences(MODE_PRIVATE)
SharedPreferences sp = getPreferences(MODE_PRIVATE);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                                  + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                    | ((source[d + 1 + off] << 24) >>> 16)
                    | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                    | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                                   "-1002:Bad response received/" +
                                   "-1003:Purchase signature verification failed/" +
                                   "-1004:Send intent failed/" +
                                   "-1005:User cancelled/" +
                                   "-1006:Unknown purchase response/" +
                                   "-1007:Missing token/" +
                                   "-1008:Unknown error/" +
                                   "-1009:Subscriptions not available/" +
                                   "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(),
                    itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                        | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                        | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                            | ((source[d + 1 + off] << 24) >>> 16)
                            | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                            | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                "-1002:Bad response received/" +
                "-1003:Purchase signature verification failed/" +
                "-1004:Send intent failed/" +
                "-1005:User cancelled/" +
                "-1006:Unknown purchase response/" +
                "-1007:Missing token/" +
                "-1008:Unknown error/" +
                "-1009:Subscriptions not available/" +
                "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(), itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
responseCode=result.getResponse()
int responseCode = result.getResponse();
sku=purchase.getSku()
String sku = purchase.getSku();
skuDetails=inv.getSkuDetails(sku)
SkuDetails skuDetails = inv.getSkuDetails(sku);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
Button purchaseFiveButton = (Button) rootView.findViewById(R.id.fragment_main_button_purchase_five_coins);
xml=context.obtainStyledAttributes(attrs,R.styleable.LandingStrip)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.LandingStrip);
tabLayoutId=xml.getResourceId(R.styleable.LandingStrip_tabLayoutId,MISSING_TAB_LAYOUT_ID)
int tabLayoutId = xml.getResourceId(R.styleable.LandingStrip_tabLayoutId, MISSING_TAB_LAYOUT_ID);
indicatorColour=xml.getResourceId(R.styleable.LandingStrip_indicatorColor,DEFAULT_INDICATOR_COLOUR)
int indicatorColour = xml.getResourceId(R.styleable.LandingStrip_indicatorColor, DEFAULT_INDICATOR_COLOUR);
indicatorHeight=getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight,DEFAULT_INDICATOR_HEIGHT,xml)
int indicatorHeight = getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight, DEFAULT_INDICATOR_HEIGHT, xml);
tabsPaddingLeft=getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingLeft = getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding, DEFAULT_TABS_PADDING, xml);
tabsPaddingRight=getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingRight = getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding, DEFAULT_TABS_PADDING, xml);
MutableCoordinates drawCurrentTabCoordinates = new MutableCoordinates();
MutableCoordinates drawNextTabCoordinates = new MutableCoordinates();
MutableCoordinates drawMovingIndicatorCoordinates = new MutableCoordinates();
currentTab=tabsContainer.getTabAt(currentPosition)
View currentTab = tabsContainer.getTabAt(currentPosition);
currentTabStart=currentTab.getLeft()
float currentTabStart = currentTab.getLeft();
currentTabEnd=currentTab.getRight()
float currentTabEnd = currentTab.getRight();
nextTab=tabsContainer.getTabAt(currentPosition + 1)
View nextTab = tabsContainer.getTabAt(currentPosition + 1);
nextTabPositionOffset=getFractionFrom(pagePositionOffset)
float nextTabPositionOffset = getFractionFrom(pagePositionOffset);
indicatorStart=getIndicatorPosition(nextTab.getStart(),pagePositionOffset,currentTab.getStart(),nextTabPositionOffset)
float indicatorStart = getIndicatorPosition(nextTab.getStart(), pagePositionOffset, currentTab.getStart(), nextTabPositionOffset);
indicatorEnd=getIndicatorPosition(nextTab.getEnd(),pagePositionOffset,currentTab.getEnd(),nextTabPositionOffset)
float indicatorEnd = getIndicatorPosition(nextTab.getEnd(), pagePositionOffset, currentTab.getEnd(), nextTabPositionOffset);
height=getHeight()
int height = getHeight();
tabCount=pagerAdapter.getCount()
int tabCount = pagerAdapter.getCount();
title=pagerAdapter.getPageTitle(position)
CharSequence title = pagerAdapter.getPageTitle(position);
inflatedTabView=tabsContainer.inflateTab(layoutInflater,attributes.getTabLayoutId())
View inflatedTabView = tabsContainer.inflateTab(layoutInflater, attributes.getTabLayoutId());
int position = (int) view.getTag(TAG_KEY_POSITION);
scrollOffset=getHorizontalScrollOffset(position,positionOffset)
int scrollOffset = getHorizontalScrollOffset(position, positionOffset);
newScrollX=calculateScrollOffset(position,scrollOffset,positionOffset)
float newScrollX = calculateScrollOffset(position, scrollOffset, positionOffset);
tabWidth=tabsContainer.getTabAt(position).getWidth()
int tabWidth = tabsContainer.getTabAt(position).getWidth();
tabForPosition=tabsContainer.getTabAt(position)
View tabForPosition = tabsContainer.getTabAt(position);
float tabStartX = tabForPosition.getLeft() + scrollOffset;
int viewMiddleOffset = getTabParentWidth() / 2;
float tabCenterOffset = (tabForPosition.getRight() - tabForPosition.getLeft()) * 0.5F;
nextTabDelta=getNextTabDelta(position,pagerOffset,tabForPosition)
float nextTabDelta = getNextTabDelta(position, pagerOffset, tabForPosition);
LinearLayout tabsContainerView = new LinearLayout(context);
tab=getTabAt(index)
View tab = getTabAt(index);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
position=indicatorCoordinates.getStart()
float position = indicatorCoordinates.getStart();
lastTabOffset=((ViewGroup)getChildAt(0)).getChildAt(getChildCount() - 1).getWidth()
float lastTabOffset = ((ViewGroup) getChildAt(0)).getChildAt(getChildCount() - 1).getWidth();
frequency=getOneCycle(lastTabOffset)
float frequency = getOneCycle(lastTabOffset);
r=toHex(calculateColour(position,frequency,PHASE_RED,AMPLITUDE,CENTER_FREQUENCY))
String r = toHex(calculateColour(position, frequency, PHASE_RED, AMPLITUDE, CENTER_FREQUENCY));
g=toHex(calculateColour(position,frequency,PHASE_GREEN,AMPLITUDE,CENTER_FREQUENCY))
String g = toHex(calculateColour(position, frequency, PHASE_GREEN, AMPLITUDE, CENTER_FREQUENCY));
b=toHex(calculateColour(position,frequency,PHASE_BLUE,AMPLITUDE,CENTER_FREQUENCY))
String b = toHex(calculateColour(position, frequency, PHASE_BLUE, AMPLITUDE, CENTER_FREQUENCY));
height=getHeight()
int height = getHeight();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPagerFragment viewPagerFragment = new ViewPagerFragment();
Bundle bundle = new Bundle();
TextView view = (TextView) layoutInflater.inflate(R.layout.view_demo, container, false);
currentPosition=viewPagerAdapterState.getCurrentPosition()
int currentPosition = viewPagerAdapterState.getCurrentPosition();
view=getView(container,position)
View view = getView(container, position);
parcelableSparseArray=viewPagerAdapterState.get(position)
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
View view = (View) object;
SparseArray<Parcelable> viewState = new SparseArray<>();
position=entry.getValue()
int position = entry.getValue();
view=entry.getKey()
View view = entry.getKey();
bundle=in.readBundle()
Bundle bundle = in.readBundle();
Map<Integer, SparseArray<Parcelable>> viewStates = new HashMap<>(bundle.keySet().size());
sparseParcelableArray=bundle.getSparseParcelableArray(key)
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
primaryItemPosition=in.readInt()
int primaryItemPosition = in.readInt();
Bundle bundle = new Bundle();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
final TextView abText = (TextView) findViewById(R.id.ab_text);
final AyBe ayBe = new AyBe();
id=item.getItemId()
int id = item.getItemId();
callback=weakCallback.get()
AbTestingParamsLoadedCallback callback = weakCallback.get();
WeakReference<NoLeakActivity> weakNoLeakActivity = new WeakReference<NoLeakActivity>(noLeakActivity);
noLeakActivity=weakNoLeakActivity.get()
NoLeakActivity noLeakActivity = weakNoLeakActivity.get();
RecyclerView recyclerView = (RecyclerView) layoutInflater.inflate(R.layout.view_page, viewGroup, false);
itemView=layoutInflater.inflate(R.layout.view_item,parent,false)
View itemView = layoutInflater.inflate(R.layout.view_item, parent, false);
actual=foo.twice(HALF)
int actual = foo.twice(HALF);
int expected = WHOLE;
final float inverseRatio = 1f - ratio;
float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRatio);
float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRatio);
float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRatio);
hsv=node.getHsv()
float[] hsv = node.getHsv();
width=bitmap.getWidth()
final int width = bitmap.getWidth();
height=bitmap.getHeight()
final int height = bitmap.getHeight();
final int[] rgbPixels = new int[width * height];
final MedianCutQuantizer mcq = new MedianCutQuantizer(rgbPixels, NUM_COLORS);
primaryAccentColor=findPrimaryAccentColor()
final ColorNode primaryAccentColor = findPrimaryAccentColor();
secondaryAccentColor=findSecondaryAccentColor(primaryAccentColor)
final ColorNode secondaryAccentColor = findSecondaryAccentColor(primaryAccentColor);
tertiaryAccentColor=findTertiaryAccentColor(primaryAccentColor,secondaryAccentColor)
final int tertiaryAccentColor = findTertiaryAccentColor(
                primaryAccentColor, secondaryAccentColor);
primaryTextColor=findPrimaryTextColor(primaryAccentColor)
final int primaryTextColor = findPrimaryTextColor(primaryAccentColor);
secondaryTextColor=findSecondaryTextColor(primaryAccentColor)
final int secondaryTextColor = findSecondaryTextColor(primaryAccentColor);
final float primaryHue = primary.getHsv()[0];
final float candidateHue = candidate.getHsv()[0];
copy=Arrays.copyOf(palette,palette.length)
final MedianCutQuantizer.ColorNode[] copy = Arrays.copyOf(palette, palette.length);
maxCount=palette[0].getCount()
final float maxCount = palette[0].getCount();
lhsWeight=calculateWeight(lhs,maxCount)
final float lhsWeight = calculateWeight(lhs, maxCount);
rhsWeight=calculateWeight(rhs,maxCount)
final float rhsWeight = calculateWeight(rhs, maxCount);
float sum = 0;
float sumWeight = 0;
float value = values[i];
float weight = values[i + 1];
ColorHistogram colorHist = new ColorHistogram(pixels);
K=colorHist.getNumberOfColors()
int K = colorHist.getNumberOfColors();
ColorNode[] rCols = null;
rgb=colorHist.getColor(i)
int rgb = colorHist.getColor(i);
cnt=colorHist.getCount(i)
int cnt = colorHist.getCount(i);
ColorBox initialBox = new ColorBox(0, K - 1, 0);
List<ColorBox> colorSet = new ArrayList<ColorBox>();
int k = 1;
boolean done = false;
nextBox=findBoxToSplit(colorSet)
ColorBox nextBox = findBoxToSplit(colorSet);
newBox=nextBox.splitBox()
ColorBox newBox = nextBox.splitBox();
color=findClosestColor(pixels[i])
ColorNode color = findClosestColor(pixels[i]);
idx=findClosestColorIndex(rgb)
int idx = findClosestColorIndex(rgb);
red=Color.red(rgb)
int red = Color.red(rgb);
grn=Color.green(rgb)
int grn = Color.green(rgb);
blu=Color.blue(rgb)
int blu = Color.blue(rgb);
int minIdx = 0;
int minDistance = Integer.MAX_VALUE;
ColorNode color = quantColors[i];
d2=color.distance2(red,grn,blu)
int d2 = color.distance2(red, grn, blu);
ColorBox boxToSplit = null;
int minLevel = Integer.MAX_VALUE;
n=colorBoxes.size()
int n = colorBoxes.size();
ColorNode[] avgColors = new ColorNode[n];
int i = 0;
int dr = this.red - red;
int dg = this.grn - grn;
int db = this.blu - blu;
ColorNode color = imageColors[i];
int r = color.red;
int g = color.grn;
int b = color.blu;
dim=getLongestColorDimension()
ColorDimension dim = getLongestColorDimension();
med=findMedian(dim)
int med = findMedian(dim);
int nextLevel = level + 1;
ColorBox newBox = new ColorBox(med + 1, upper, nextLevel);
int rLength = rmax - rmin;
int gLength = gmax - gmin;
int bLength = bmax - bmin;
int half = count / 2;
int nPixels, median;
int rSum = 0;
int gSum = 0;
int bSum = 0;
int n = 0;
ColorNode ci = imageColors[i];
int cnt = ci.cnt;
double nd = n;
int avgRed = (int) (0.5 + rSum / nd);
int avgGrn = (int) (0.5 + gSum / nd);
int avgBlu = (int) (0.5 + bSum / nd);
s=this.getClass().getSimpleName()
String s = this.getClass().getSimpleName();
int i = 0;
int N = pixelsOrig.length;
int[] pixelsCpy = new int[N];
int k = -1;
int curColor = -1;
int nColors = k + 1;
id=item.getItemId()
int id = item.getItemId();
Intent intent = new Intent();
bitmap=((BitmapDrawable)imageView.getDrawable()).getBitmap()
Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap();
DominantColorCalculator dominantColorCalculator = new DominantColorCalculator(bitmap);
selectedImageUri=data.getData()
Uri selectedImageUri = data.getData();
selectedImagePath=getPath(selectedImageUri)
String selectedImagePath = getPath(selectedImageUri);
String[] projection = {MediaStore.Images.Media.DATA};
cursor=managedQuery(uri,projection,null,null,null)
Cursor cursor = managedQuery(uri, projection, null, null, null);
column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)
int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
LinearLayout rootView = (LinearLayout) inflater.inflate(R.layout.fragment_main, container, false);
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
preapprovalButton=payPal.getCheckoutButton(getActivity(),PayPal.BUTTON_194x37,CheckoutButton.TEXT_PAY)
CheckoutButton preapprovalButton = payPal.getCheckoutButton(getActivity(), PayPal.BUTTON_194x37, CheckoutButton.TEXT_PAY);
preapprovalIntent=payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY)
Intent preapprovalIntent = payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY);
String resultTitle = "";
String resultInfo = "";
String resultExtra = "";
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
PayPalPreapproval preapproval = new PayPalPreapproval();
preapproval=createPreapproval(preapprovalKey)
PayPalPreapproval preapproval = createPreapproval(preapprovalKey);
Bundle bundle = new Bundle();
int availableLength = maxLength;
StringBuilder stringBuilder = new StringBuilder(maxLength);
prefixAndSuffixLength=computeAppendedLengthIncludingSeparatorSpaces(prefix,suffix)
int prefixAndSuffixLength = computeAppendedLengthIncludingSeparatorSpaces(prefix, suffix);
urlLength=computeUrlLengthIncludingSeparatorSpace(url)
int urlLength = computeUrlLengthIncludingSeparatorSpace(url);
trimmedSubject=ellipsizeTextIfExceedsMaxLength(subject,availableLength)
String trimmedSubject = ellipsizeTextIfExceedsMaxLength(subject, availableLength);
int length = 0;
preferences=context.getSharedPreferences(MRU_PREFERENCES,Context.MODE_PRIVATE)
SharedPreferences preferences = context.getSharedPreferences(MRU_PREFERENCES, Context.MODE_PRIVATE);
args=getArguments()
Bundle args = getArguments();
themeResId=getThemeResIdIfProvidedIn(args)
int themeResId = getThemeResIdIfProvidedIn(args);
title=getTitleIfProvidedIn(args)
CharSequence title = getTitleIfProvidedIn(args);
builder=createDialogBuilder(themeResId).setCancelable(true).setView(dialogView)
AlertDialog.Builder builder = createDialogBuilder(themeResId)
                .setCancelable(true)
                .setView(dialogView);
inflater=getActivity().getLayoutInflater()
LayoutInflater inflater = getActivity().getLayoutInflater();
GridView gridView = (GridView) rootView.findViewById(R.id.ps__dialog_grid);
targetApps=extractTargetAppsFrom(args)
TargetApps targetApps = extractTargetAppsFrom(args);
allShareTargets=getAvailableShareTargets(sharingIntent)
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
priorityAppInfos=createPriorityResolveInfoList(targetApps,allShareTargets)
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
otherAppInfos=createOtherAppsResolveInfoList(priorityAppInfos,allShareTargets)
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
resolveInfos=targetApps.extractTargetResolveInfosFrom(allShareTargets)
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
mruResolveInfo=findMruResolveInfoIn(allShareTargets)
ResolveInfo mruResolveInfo = findMruResolveInfoIn(allShareTargets);
List<ResolveInfo> otherAppsInfos = new ArrayList<ResolveInfo>(allAppInfos);
mruPackageName=persister.getLastUsedTarget()
String mruPackageName = persister.getLastUsedTarget();
String packageName = resolveInfo.activityInfo.packageName;
packageManager=getActivity().getPackageManager()
PackageManager packageManager = getActivity().getPackageManager();
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
View buttonStrip = (View) showMoreButton.getParent();
gridView=getGridView()
GridView gridView = getGridView();
intent=wrapIntentWithExplicitTargetComponentForItem(position,sharingIntent)
Intent intent = wrapIntentWithExplicitTargetComponentForItem(position, sharingIntent);
Intent intent = new Intent(sharingIntent);
ActivityInfo activity = adapter.getItem(position).activityInfo;
ComponentName name = new ComponentName(activity.applicationInfo.packageName, activity.name);
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
PriorityShareDialog dialog = new PriorityShareDialog();
Bundle args = new Bundle();
sharingIntent=createSharingIntent()
Intent sharingIntent = createSharingIntent();
fragmentManager=activity.getFragmentManager()
FragmentManager fragmentManager = activity.getFragmentManager();
Intent intent = new Intent(Intent.ACTION_SEND);
dialog=new PriorityShareDialog.Builder().setTitle(title).setTargetApps(targetApps).setSharingIntent(sharingIntent).setOnPrepareSharingIntentListener(listener).setShowMostRecentlyUsed(showMostRecentlyUsed).build()
PriorityShareDialog dialog = new PriorityShareDialog.Builder()
                .setTitle(title)
                .setTargetApps(targetApps)
                .setSharingIntent(sharingIntent)
                .setOnPrepareSharingIntentListener(listener)
                .setShowMostRecentlyUsed(showMostRecentlyUsed)
                .build();
PrioritySharer prioritySharer = new PrioritySharer();
prioritySharer=build()
PrioritySharer prioritySharer = build();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
layoutInflater=LayoutInflater.from(context)
LayoutInflater layoutInflater = LayoutInflater.from(context);
iconSizePx=getIconSizePx(context.getResources())
int iconSizePx = getIconSizePx(context.getResources());
ArrayList<ResolveInfo> sortedList = new ArrayList<ResolveInfo>(resolveInfoList);
int otherAppsCountMaybe = showAllApps ? otherAppInfos.size() : 0;
firstOtherAppsItemPosition=priorityAppInfos.size()
int firstOtherAppsItemPosition = priorityAppInfos.size();
int offsetPosition = position - firstOtherAppsItemPosition;
TextView textView;
textView=initializeItemViewIfNecessary(convertView,R.layout.ps__grid_item_share,parent)
TextView textView = initializeItemViewIfNecessary(convertView, R.layout.ps__grid_item_share, parent);
info=getItem(position)
ResolveInfo info = getItem(position);
icon=info.loadIcon(packageManager)
Drawable icon = info.loadIcon(packageManager);
arraySize=in.readInt()
int arraySize = in.readInt();
String[] packageNames = new String[arraySize];
arraySize=targetPackages.size()
int arraySize = targetPackages.size();
String[] packagesArray = new String[arraySize];
SparseArray<ResolveInfo> matchedResolveInfos = new SparseArray<ResolveInfo>(targetPackages.size());
String packageName = info.activityInfo.packageName;
index=indexOfItemInto(packageName,targetPackages)
int index = indexOfItemInto(packageName, targetPackages);
sparseArraySize=sparseArray.size()
int sparseArraySize = sparseArray.size();
ArrayList<T> list = new ArrayList<T>(sparseArraySize);
int i = 0;
originalSubject=intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT)
CharSequence originalSubject = intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT);
String subject = originalSubject != null ? originalSubject.toString() : null;
composer=createComposer()
MessageComposer composer = createComposer();
component=intent.getComponent()
ComponentName component = intent.getComponent();
targetPackageName=component.getPackageName()
String targetPackageName = component.getPackageName();
adapter=ArrayAdapter.createFromResource(this,R.array.target_apps,android.R.layout.simple_spinner_item)
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
EditText text = (EditText) findViewById(R.id.text);
EditText title = (EditText) findViewById(R.id.title);
EditText mimeType = (EditText) findViewById(R.id.mime_type);
EditText dataUri = (EditText) findViewById(R.id.data_uri);
Switch showMostRecentlyUsed = (Switch) findViewById(R.id.show_most_recently_used);
uriString=dataUri.getText().toString()
String uriString = dataUri.getText().toString();
EditText text = (EditText) findViewById(R.id.text);
TextView textView = (TextView) convertView.findViewById(R.id.positionView);
colorView=convertView.findViewById(R.id.colorView)
View colorView = convertView.findViewById(R.id.colorView);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
offset=headerPlaceholder.getTop()
int offset = headerPlaceholder.getTop();
Integer item = COLORS[position];
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
firstVisiblePosition=grid.getFirstVisiblePosition()
int firstVisiblePosition = grid.getFirstVisiblePosition();
inflate=getViewForPosition(container,position)
View inflate = getViewForPosition(container, position);
id=item.getItemId()
int id = item.getItemId();
MyActivity activity = new MyActivity();
String manifestProperty = "../app/src/main/AndroidManifest.xml";
String resProperty = "../app/src/main/res";
cursor=resolver.query(uri,projection,selection,selectionArgs,null)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, null);
cursor=resolver.query(uri,projection,selection,selectionArgs,sortOrder)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, sortOrder);
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=richClass.setter(name)
Method setter = richClass.setter(name);
T obj;
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=methodsByName.get(name)
Method setter = methodsByName.get(name);
int type = TYPE_INT;
Class<?> t = setter.getParameterTypes()[0];
Class<?> t = setter.getParameterTypes()[0];
cursorType=cursor.getType(index)
final int cursorType = cursor.getType(index);
final Object obj;
s=f.getAnnotation(Mapper.class)
Mapper s = f.getAnnotation(Mapper.class);
mm=m.getAnnotation(Mapper.class)
Mapper mm = m.getAnnotation(Mapper.class);
methodName=StringUtil.asCamelifySetMethod(what)
String methodName = StringUtil.asCamelifySetMethod(what);
cursor=getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,null,null,null,null)
Cursor cursor = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
now=System.currentTimeMillis()
long now = System.currentTimeMillis();
List<Contact2> typedCursor = new CursorList<Contact2>(cursor, Contact2.class);
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[a-zA-Z0-9]+")
Pattern p = Pattern.compile("[a-zA-Z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[A-Z][a-z0-9]+")
Pattern p = Pattern.compile("[A-Z][a-z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
SurfaceView first = (SurfaceView) findViewById(R.id.firstSurface);
SurfaceView second = (SurfaceView) findViewById(R.id.secondSurface);
Intent pickVideo = new Intent(Intent.ACTION_PICK);
xml=context.obtainStyledAttributes(attrs,R.styleable.RelativeLayoutWithForeground)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.RelativeLayoutWithForeground);
int foregroundResId = INVALID_FOREGROUND_ID;
drawable=getDrawable(getResources(),foregroundResId)
Drawable drawable = getDrawable(getResources(), foregroundResId);
Bundle args = new Bundle();
enroll=mHotwordDetector.createEnrollIntent()
Intent enroll = mHotwordDetector.createEnrollIntent();

Diff of 222fef231538d54cccaf96e3c15880c10c058798 and be9d9d363fc73b01c99f426b618dac993cf31fcb:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 222fef231538d54cccaf96e3c15880c10c058798 to be9d9d363fc73b01c99f426b618dac993cf31fcb

************Analysis complete************
Added generics to repository novoda/spikes = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 0

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 0
	--> recency = null
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null

****Parsing for addition at revision 74796d65b8cc2f998b1fcd1e8266a795d8e3c481****

Added AccessibilityServices.java to .\/spikes\ repository source files.
Added Action.java to .\/spikes\ repository source files.
Added Actions.java to .\/spikes\ repository source files.
Added ActionsAccessibilityDelegate.java to .\/spikes\ repository source files.
Added ActionsAlertDialogCreator.java to .\/spikes\ repository source files.
Added AccessibilityServicesActivity.java to .\/spikes\ repository source files.
Added Demo.java to .\/spikes\ repository source files.
Added DemoAdapter.java to .\/spikes\ repository source files.
Added CustomActionsActivity.java to .\/spikes\ repository source files.
Added TweetView.java to .\/spikes\ repository source files.
Added DemosActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added DrawerActivity.java to .\/spikes\ repository source files.
Added EarthActivity.java to .\/spikes\ repository source files.
Added ProHaxDrawerActivity.java to .\/spikes\ repository source files.
Added SaturnActivity.java to .\/spikes\ repository source files.
Added LocalPlayerActivity.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added CastApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ComposeSmsActivity.java to .\/spikes\ repository source files.
Added HeadlessSmsSendService.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MmsReceiver.java to .\/spikes\ repository source files.
Added SmsReceiver.java to .\/spikes\ repository source files.
Added ExtendedDemoActivity.java to .\/spikes\ repository source files.
Added ExtendedDemoApplication.java to .\/spikes\ repository source files.
Added SimpleDemoActivity.java to .\/spikes\ repository source files.
Added SimpleDemoApplication.java to .\/spikes\ repository source files.
Added Binder.java to .\/spikes\ repository source files.
Added ConnectedClient.java to .\/spikes\ repository source files.
Added Connection.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnection.java to .\/spikes\ repository source files.
Added ServiceConnectionCallback.java to .\/spikes\ repository source files.
Added EasyCustomTabs.java to .\/spikes\ repository source files.
Added ActionButtonComposer.java to .\/spikes\ repository source files.
Added CloseButtonIconComposer.java to .\/spikes\ repository source files.
Added Composer.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilder.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigator.java to .\/spikes\ repository source files.
Added EasyCustomTabsWebNavigator.java to .\/spikes\ repository source files.
Added ExitAnimationsComposer.java to .\/spikes\ repository source files.
Added IntentCustomizer.java to .\/spikes\ repository source files.
Added MenuItemComposer.java to .\/spikes\ repository source files.
Added NavigationFallback.java to .\/spikes\ repository source files.
Added Navigator.java to .\/spikes\ repository source files.
Added ShowTitleComposer.java to .\/spikes\ repository source files.
Added StartAnimationsComposer.java to .\/spikes\ repository source files.
Added ToolbarColorComposer.java to .\/spikes\ repository source files.
Added UrlBarHidingComposer.java to .\/spikes\ repository source files.
Added WebNavigator.java to .\/spikes\ repository source files.
Added AvailableAppProvider.java to .\/spikes\ repository source files.
Added BestPackageFinder.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProvider.java to .\/spikes\ repository source files.
Added BinderTest.java to .\/spikes\ repository source files.
Added ConnectedClientTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnectionTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigatorTest.java to .\/spikes\ repository source files.
Added BestPackageFinderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProviderTest.java to .\/spikes\ repository source files.
Added ApiPagedChannelHistory.java to .\/spikes\ repository source files.
Added ApiPagedResponse.java to .\/spikes\ repository source files.
Added ChannelHistory.java to .\/spikes\ repository source files.
Added HistoryConverter.java to .\/spikes\ repository source files.
Added Runner.java to .\/spikes\ repository source files.
Added SlackHistoryFetcher.java to .\/spikes\ repository source files.
Added SlackWebService.java to .\/spikes\ repository source files.
Added ApiPagedResponseTest.java to .\/spikes\ repository source files.
Added MainActivityTest.java to .\/spikes\ repository source files.
Added LoremAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added BetterAccountManager.java to .\/spikes\ repository source files.
Added BetterAuthenticator.java to .\/spikes\ repository source files.
Added BetterAuthenticatorActivity.java to .\/spikes\ repository source files.
Added GertHerbAuthenticator.java to .\/spikes\ repository source files.
Added GertHerbAuthenticatorService.java to .\/spikes\ repository source files.
Added NoAccountException.java to .\/spikes\ repository source files.
Added ReactiveAuthenticatorActivity.java to .\/spikes\ repository source files.
Added Token.java to .\/spikes\ repository source files.
Added GertHerbActivity.java to .\/spikes\ repository source files.
Added GertHerbApplication.java to .\/spikes\ repository source files.
Added GertHerbAuthenticationActivity.java to .\/spikes\ repository source files.
Added TypefaceFactory.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added ViewServer.java to .\/spikes\ repository source files.
Added ViewServerManager.java to .\/spikes\ repository source files.
Added DeveloperError.java to .\/spikes\ repository source files.
Added HomeActivity.java to .\/spikes\ repository source files.
Added LoginActivity.java to .\/spikes\ repository source files.
Added LoginView.java to .\/spikes\ repository source files.
Added UserCredentials.java to .\/spikes\ repository source files.
Added FontButton.java to .\/spikes\ repository source files.
Added FontEditText.java to .\/spikes\ repository source files.
Added FontTextView.java to .\/spikes\ repository source files.
Added GithubApi.java to .\/spikes\ repository source files.
Added GithubApiFactory.java to .\/spikes\ repository source files.
Added TokenRequest.java to .\/spikes\ repository source files.
Added TokenResponse.java to .\/spikes\ repository source files.
Added Dummy.java to .\/spikes\ repository source files.
Added DummyTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MainFragment.java to .\/spikes\ repository source files.
Added Attributes.java to .\/spikes\ repository source files.
Added Coordinates.java to .\/spikes\ repository source files.
Added IndicatorCoordinatesCalculator.java to .\/spikes\ repository source files.
Added LandingStrip.java to .\/spikes\ repository source files.
Added MutableCoordinates.java to .\/spikes\ repository source files.
Added OnPagerAdapterChangedListener.java to .\/spikes\ repository source files.
Added PagerAdapterObserver.java to .\/spikes\ repository source files.
Added Scrollable.java to .\/spikes\ repository source files.
Added ScrollingPageChangeListener.java to .\/spikes\ repository source files.
Added State.java to .\/spikes\ repository source files.
Added TabsContainer.java to .\/spikes\ repository source files.
Added CustomLandingStrip.java to .\/spikes\ repository source files.
Added CustomTabActivity.java to .\/spikes\ repository source files.
Added ExampleRainbowLandingStrip.java to .\/spikes\ repository source files.
Added FixedWidthTabActivity.java to .\/spikes\ repository source files.
Added NoFragmentsSimpleTextTabActivity.java to .\/spikes\ repository source files.
Added Data.java to .\/spikes\ repository source files.
Added DemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added SmallDemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerFragment.java to .\/spikes\ repository source files.
Added DemoViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapterState.java to .\/spikes\ repository source files.
Added SimpleTextTabActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AbTestingParamsLoadedCallback.java to .\/spikes\ repository source files.
Added AyBe.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added WeakStartCallback.java to .\/spikes\ repository source files.
Added LeakActivity.java to .\/spikes\ repository source files.
Added NoLeakActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added Bar.java to .\/spikes\ repository source files.
Added Foo.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added FooTest.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added ColorScheme.java to .\/spikes\ repository source files.
Added ColorUtils.java to .\/spikes\ repository source files.
Added DominantColorCalculator.java to .\/spikes\ repository source files.
Added FloatUtils.java to .\/spikes\ repository source files.
Added MedianCutQuantizer.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added PayPalFragment.java to .\/spikes\ repository source files.
Added PayPalHelper.java to .\/spikes\ repository source files.
Added MaxLengthMessageComposer.java to .\/spikes\ repository source files.
Added MessageComposer.java to .\/spikes\ repository source files.
Added TwitterMessageComposer.java to .\/spikes\ repository source files.
Added DisabledMruPersister.java to .\/spikes\ repository source files.
Added MruPersister.java to .\/spikes\ repository source files.
Added SharedPreferencesMruPersister.java to .\/spikes\ repository source files.
Added OnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added PriorityShareDialog.java to .\/spikes\ repository source files.
Added PrioritySharer.java to .\/spikes\ repository source files.
Added ShareTargetsAdapter.java to .\/spikes\ repository source files.
Added SimpleOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added TargetApps.java to .\/spikes\ repository source files.
Added TwitterOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AdvancedActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SimpleActivity.java to .\/spikes\ repository source files.
Added LockingActivity.java to .\/spikes\ repository source files.
Added PostLockingActivity.java to .\/spikes\ repository source files.
Added PreLockingActivity.java to .\/spikes\ repository source files.
Added DummyAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added NovoStaggeredGridView.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SpikeApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SwipeableView.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MyClass.java to .\/spikes\ repository source files.
Added MyClassTest.java to .\/spikes\ repository source files.
Added MyAndroidClassTest.java to .\/spikes\ repository source files.
Added RobolectricGradleTestRunner.java to .\/spikes\ repository source files.
Added Mapper.java to .\/spikes\ repository source files.
Added Query.java to .\/spikes\ repository source files.
Added TypedResolver.java to .\/spikes\ repository source files.
Added CursorList.java to .\/spikes\ repository source files.
Added CursorListIterator.java to .\/spikes\ repository source files.
Added CursorMarshaller.java to .\/spikes\ repository source files.
Added EmptyListIterator.java to .\/spikes\ repository source files.
Added ReflectionCursorMarshaller.java to .\/spikes\ repository source files.
Added RichClass.java to .\/spikes\ repository source files.
Added Setter.java to .\/spikes\ repository source files.
Added Function.java to .\/spikes\ repository source files.
Added TypedElementLoader.java to .\/spikes\ repository source files.
Added TypedLoader.java to .\/spikes\ repository source files.
Added Marshaller.java to .\/spikes\ repository source files.
Added ObjectMapper.java to .\/spikes\ repository source files.
Added TypedActivity.java to .\/spikes\ repository source files.
Added StringUtil.java to .\/spikes\ repository source files.
Added MyObject.java to .\/spikes\ repository source files.
Added MediaPlayerSwitcherActivity.java to .\/spikes\ repository source files.
Added VideoPlayerService.java to .\/spikes\ repository source files.
Added RelativeLayoutWithForeground.java to .\/spikes\ repository source files.
Added DemoActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added RecognitionService.java to .\/spikes\ repository source files.
Added SessionService.java to .\/spikes\ repository source files.
Added SettingsActivity.java to .\/spikes\ repository source files.
Added SmartContextInteractionService.java to .\/spikes\ repository source files.
AccessibilityManager accessibilityManager = (AccessibilityManager) context.getSystemService(Context.ACCESSIBILITY_SERVICE);
enabledServices=getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN)
List<AccessibilityServiceInfo> enabledServices = getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN);
List<AccessibilityServiceInfo> enabledServices = getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN);
Action otherAction = (Action) o;
int result = id;
Actions otherActions = (Actions) o;
label=resources.getString(action.getLabel())
String label = resources.getString(action.getLabel());
action=actions.findActionById(actionId)
Action action = actions.findActionById(actionId);
action=actions.getAction(which)
Action action = actions.getAction(which);
CharSequence[] itemLabels = new CharSequence[actions.getCount()];
View view = convertView;
demo=getItem(position)
Demo demo = getItem(position);
Intent intent = new Intent(context, demo.activityClass);
layoutInflater=LayoutInflater.from(parent.getContext())
LayoutInflater layoutInflater = LayoutInflater.from(parent.getContext());
TweetView tweetView = (TweetView) findViewById(R.id.tweet);
actions=createActions(tweet,listener)
final Actions actions = createActions(tweet, listener);
ListView listView = ((ListView) findViewById(R.id.list));
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
final DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close) {

            @Override
            public void onDrawerClosed(View drawerView) {
                super.onDrawerClosed(drawerView);
                // waiting for the drawer to close, then navigating seems to cause issue.
                // why wait for the drawer to close? jankiness.
                if (pendingNavigationClick != null) {
                    startActivity(pendingNavigationClick);
                    pendingNavigationClick = null;
                }
            }

        };
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close);
Intent intent;
b=getIntent().getExtras()
Bundle b = getIntent().getExtras();
mShouldStartPlayback=b.getBoolean("shouldStart")
boolean mShouldStartPlayback = b.getBoolean("shouldStart");
startPosition=b.getInt("startPosition",0)
int startPosition = b.getInt("startPosition", 0);
currentPos=mVideoView.getCurrentPosition()
int currentPos = mVideoView.getCurrentPosition();
String msg;
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, mDisplaySize.y + getActionBar().getHeight());
mm=mSelectedMedia.getMetadata()
MediaMetadata mm = mSelectedMedia.getMetadata();
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, (int) (mDisplaySize.x * ASPECT_RATIO));
WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
width=display.getWidth()
int width = display.getWidth();
height=display.getHeight()
int height = display.getHeight();
int resourceId = 0;
String videoUrl = "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4#sthash.rJ5rPZy8.dpuf";
String title = "Jahre Philharmonie";
String description = "Awesome film you must watch!";
String author = "Blundell";
String thumbUrl = "http://www.ustream.tv/blog/wp-content/uploads/2013/10/simply-go-live.png";
MediaMetadata metadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE);
mediaInfo=new MediaInfo.Builder(videoUrl).setMetadata(metadata).setStreamType(MediaInfo.STREAM_TYPE_BUFFERED).setContentType("video/mp4").build()
MediaInfo mediaInfo = new MediaInfo.Builder(videoUrl)
                        .setMetadata(metadata)
                        .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)
                        .setContentType("video/mp4")
                        .build();
Intent intent = new Intent(MainActivity.this, LocalPlayerActivity.class);
preferences=getPreferences(MODE_PRIVATE)
SharedPreferences preferences = getPreferences(MODE_PRIVATE);
defaultSmsPackage=Telephony.Sms.getDefaultSmsPackage(this)
String defaultSmsPackage = Telephony.Sms.getDefaultSmsPackage(this);
Intent intent = new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
availableAppProvider=EasyCustomTabs.getInstance()
AvailableAppProvider availableAppProvider = EasyCustomTabs.getInstance();
ConnectedClient connectedClient = new ConnectedClient(client);
binder=Binder.newInstance()
Binder binder = Binder.newInstance();
List<Composer> composerList = new ArrayList<>();
customTabsSession=connection.newSession()
CustomTabsSession customTabsSession = connection.newSession();
CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(customTabsSession);
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
context=EasyCustomTabs.getInstance().getContext()
Context context = EasyCustomTabs.getInstance().getContext();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
packagesSupportingCustomTabs=getPackagesSupportingCustomTabs()
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
defaultPackage=getDefaultPackage()
String defaultPackage = getDefaultPackage();
defaultActivityInfo=packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK,0)
ResolveInfo defaultActivityInfo = packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK, 0);
String packageName = defaultActivityInfo.activityInfo.packageName;
resolvedInfoList=packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK,0)
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<String> packagesSupportingCustomTabs = new ArrayList<>();
Intent serviceIntent = new Intent();
bestPackageFinder=BestPackageFinder.newInstance()
BestPackageFinder bestPackageFinder = BestPackageFinder.newInstance();
packageName=bestPackageFinder.findBestPackage()
String packageName = bestPackageFinder.findBestPackage();
resolveInfo=createResolveInfoFor(packageName)
ResolveInfo resolveInfo = createResolveInfoFor(packageName);
ResolveInfo resolveInfo = new ResolveInfo();
List<ResolveInfo> resolveInfoList = new ArrayList<>();
defaultPackageResolveInfo=createResolveInfoFor(packageName)
ResolveInfo defaultPackageResolveInfo = createResolveInfoFor(packageName);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
oldestApiMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage oldestApiMessage = apiMessages.get(apiMessages.size() - 1);
String lastResponseEpochTime = oldestApiMessage.timeStamp;
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
latestMessage=latestMessages.get(latestMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage latestMessage = latestMessages.get(latestMessages.size() - 1);
latestMessageDateTime=convertToLocalDateTime(latestMessage.timeStamp)
LocalDateTime latestMessageDateTime = convertToLocalDateTime(latestMessage.timeStamp);
List<ChannelHistory.Message> messages = new ArrayList<>();
historyFrom=getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1))
LocalDateTime historyFrom = getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1));
historyTo=getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0))
LocalDateTime historyTo = getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0));
String text = apiMessage.text;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
lastMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage lastMessage = apiMessages.get(apiMessages.size() - 1);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
firstMessage=apiMessages.get(0)
ApiPagedChannelHistory.ApiMessage firstMessage = apiMessages.get(0);
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
String slackToken = args[0];
retrofit=new Retrofit.Builder().baseUrl("https://slack.com/api/").addConverterFactory(GsonConverterFactory.create()).build()
Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://slack.com/api/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();
slackWebService=retrofit.create(SlackWebService.class)
SlackWebService slackWebService = retrofit.create(SlackWebService.class);
slackHistoryFetcher=SlackHistoryFetcher.from(slackWebService,slackToken)
SlackHistoryFetcher slackHistoryFetcher = SlackHistoryFetcher.from(slackWebService, slackToken);
start=LocalDateTime.now()
LocalDateTime start = LocalDateTime.now();
end=LocalDateTime.now().minusDays(7)
LocalDateTime end = LocalDateTime.now().minusDays(7);
channelHistory=slackHistoryFetcher.getChannelHistory(start,end)
ChannelHistory channelHistory = slackHistoryFetcher.getChannelHistory(start, end);
HistoryConverter historyConverter = new HistoryConverter();
ApiPagedResponse apiPagedResponse = new ApiPagedResponse(start);
response=fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime())
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
apiPagedChannelHistory=response.body()
ApiPagedChannelHistory apiPagedChannelHistory = response.body();
channelHistory=slackWebService.getChannelHistory(slackToken,channel,lastResponseEpochTime,NUMBER_OF_RESULTS)
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
ApiPagedChannelHistory apiPagedChannelHistory = new ApiPagedChannelHistory();
ApiPagedChannelHistory.ApiMessage apiMessage = new ApiPagedChannelHistory.ApiMessage();
final TextView textView = new TextView(context);
emptyView=findViewById(R.id.empty_view)
View emptyView = findViewById(R.id.empty_view);
final Integer action = values[0];
LoremAdapter loremAdapter = new LoremAdapter();
accounts=accountManager.getAccountsByType(accountType)
Account[] accounts = accountManager.getAccountsByType(accountType);
Bundle result;
Bundle result;
Bundle result = new Bundle();
activity=createLoginIntent(context,accountType,authTokenType,requiredFeatures,options)
Intent activity = createLoginIntent(context, accountType, authTokenType, requiredFeatures, options);
Bundle bundle = new Bundle();
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
accounts=accountManager.getAccountsByType(authTokenType)
Account[] accounts = accountManager.getAccountsByType(authTokenType);
bundle=createResponseBundle(token)
Bundle bundle = createResponseBundle(token);
accountManager=AccountManager.get(this.getApplicationContext())
AccountManager accountManager = AccountManager.get(this.getApplicationContext());
Account account = new Account(token.getUserName(), getAccountName());
Bundle bundle = new Bundle();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
GertHerbAuthenticator authenticator = new GertHerbAuthenticator(this);
fontId=getFontId(context,attrs)
int fontId = getFontId(context, attrs);
fontType=getFontType(fontId)
FontType fontType = getFontType(fontId);
typedArray=context.obtainStyledAttributes(attrs,R.styleable.CustomTextAppearance)
TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CustomTextAppearance);
typeface=createTypeFace(context,fontType)
Typeface typeface = createTypeFace(context, fontType);
info=context.getApplicationInfo()
ApplicationInfo info = context.getApplicationInfo();
name=activity.getTitle().toString()
String name = activity.getTitle().toString();
client=mServer.accept()
Socket client = mServer.accept();
boolean result;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
BufferedReader in = null;
request=in.readLine()
final String request = in.readLine();
String command;
String parameters;
index=request.indexOf(' ')
int index = request.indexOf(' ');
boolean result;
boolean success = true;
BufferedWriter out = null;
index=parameters.indexOf(' ')
int index = parameters.indexOf(' ');
code=parameters.substring(0,index)
final String code = parameters.substring(0, index);
int hashCode = (int) Long.parseLong(code, 16);
window=findWindow(hashCode)
final View window = findWindow(hashCode);
dispatch=ViewDebug.class.getDeclaredMethod("dispatchCommand",View.class,String.class,String.class,OutputStream.class)
final Method dispatch = ViewDebug.class.getDeclaredMethod("dispatchCommand",
                        View.class, String.class, String.class, OutputStream.class);
View window = null;
boolean result = true;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
boolean result = true;
String focusName = null;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
View focusedWindow = null;
BufferedWriter out = null;
boolean needWindowListUpdate = false;
boolean needFocusedWindowUpdate = false;
BetterAccountManager accountManager = new BetterAccountManager(this, getString(R.string.account_type), getString(R.string.token_type), null);
loginView=Views.findById(this,R.id.login_view)
LoginView loginView = Views.findById(this, R.id.login_view);
authorizationApi=new GithubApiFactory().createAuthorizationApi(credentials.username,credentials.password)
GithubApi authorizationApi = new GithubApiFactory().createAuthorizationApi(credentials.username, credentials.password);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
Endpoint endpoint = new Endpoint() {
            @Override
            public String getUrl() {
                return GITHUB_API_URL;
            }

            @Override
            public String getName() {
                return "Live";
            }
        };
interceptor=createAuthorizationRequestInterceptor(username,password)
RequestInterceptor interceptor = createAuthorizationRequestInterceptor(username, password);
restAdapter=createRestAdapter(endpoint,interceptor)
RestAdapter restAdapter = createRestAdapter(endpoint, interceptor);
Dummy dummy = new Dummy();
result=dummy.explodes()
boolean result = dummy.explodes();
String base64EncodedPublicKey = "CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE";
premiumPurchase=inventory.getPurchase(SKU_PREMIUM)
Purchase premiumPurchase = inventory.getPurchase(SKU_PREMIUM);
infiniteGasPurchase=inventory.getPurchase(SKU_INFINITE_GAS)
Purchase infiniteGasPurchase = inventory.getPurchase(SKU_INFINITE_GAS);
gasPurchase=inventory.getPurchase(SKU_GAS)
Purchase gasPurchase = inventory.getPurchase(SKU_GAS);
String payload = "";
String payload = "";
String payload = "";
payload=p.getDeveloperPayload()
String payload = p.getDeveloperPayload();
int index = mTank >= TANK_RES_IDS.length ? TANK_RES_IDS.length - 1 : mTank;
AlertDialog.Builder bld = new AlertDialog.Builder(this);
spe=getPreferences(MODE_PRIVATE).edit()
SharedPreferences.Editor spe = getPreferences(MODE_PRIVATE).edit();
sp=getPreferences(MODE_PRIVATE)
SharedPreferences sp = getPreferences(MODE_PRIVATE);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                                  + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                    | ((source[d + 1 + off] << 24) >>> 16)
                    | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                    | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                                   "-1002:Bad response received/" +
                                   "-1003:Purchase signature verification failed/" +
                                   "-1004:Send intent failed/" +
                                   "-1005:User cancelled/" +
                                   "-1006:Unknown purchase response/" +
                                   "-1007:Missing token/" +
                                   "-1008:Unknown error/" +
                                   "-1009:Subscriptions not available/" +
                                   "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(),
                    itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                        | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                        | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                            | ((source[d + 1 + off] << 24) >>> 16)
                            | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                            | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                "-1002:Bad response received/" +
                "-1003:Purchase signature verification failed/" +
                "-1004:Send intent failed/" +
                "-1005:User cancelled/" +
                "-1006:Unknown purchase response/" +
                "-1007:Missing token/" +
                "-1008:Unknown error/" +
                "-1009:Subscriptions not available/" +
                "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(), itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
responseCode=result.getResponse()
int responseCode = result.getResponse();
sku=purchase.getSku()
String sku = purchase.getSku();
skuDetails=inv.getSkuDetails(sku)
SkuDetails skuDetails = inv.getSkuDetails(sku);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
Button purchaseFiveButton = (Button) rootView.findViewById(R.id.fragment_main_button_purchase_five_coins);
xml=context.obtainStyledAttributes(attrs,R.styleable.LandingStrip)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.LandingStrip);
tabLayoutId=xml.getResourceId(R.styleable.LandingStrip_tabLayoutId,MISSING_TAB_LAYOUT_ID)
int tabLayoutId = xml.getResourceId(R.styleable.LandingStrip_tabLayoutId, MISSING_TAB_LAYOUT_ID);
indicatorColour=xml.getResourceId(R.styleable.LandingStrip_indicatorColor,DEFAULT_INDICATOR_COLOUR)
int indicatorColour = xml.getResourceId(R.styleable.LandingStrip_indicatorColor, DEFAULT_INDICATOR_COLOUR);
indicatorHeight=getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight,DEFAULT_INDICATOR_HEIGHT,xml)
int indicatorHeight = getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight, DEFAULT_INDICATOR_HEIGHT, xml);
tabsPaddingLeft=getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingLeft = getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding, DEFAULT_TABS_PADDING, xml);
tabsPaddingRight=getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingRight = getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding, DEFAULT_TABS_PADDING, xml);
MutableCoordinates drawCurrentTabCoordinates = new MutableCoordinates();
MutableCoordinates drawNextTabCoordinates = new MutableCoordinates();
MutableCoordinates drawMovingIndicatorCoordinates = new MutableCoordinates();
currentTab=tabsContainer.getTabAt(currentPosition)
View currentTab = tabsContainer.getTabAt(currentPosition);
currentTabStart=currentTab.getLeft()
float currentTabStart = currentTab.getLeft();
currentTabEnd=currentTab.getRight()
float currentTabEnd = currentTab.getRight();
nextTab=tabsContainer.getTabAt(currentPosition + 1)
View nextTab = tabsContainer.getTabAt(currentPosition + 1);
nextTabPositionOffset=getFractionFrom(pagePositionOffset)
float nextTabPositionOffset = getFractionFrom(pagePositionOffset);
indicatorStart=getIndicatorPosition(nextTab.getStart(),pagePositionOffset,currentTab.getStart(),nextTabPositionOffset)
float indicatorStart = getIndicatorPosition(nextTab.getStart(), pagePositionOffset, currentTab.getStart(), nextTabPositionOffset);
indicatorEnd=getIndicatorPosition(nextTab.getEnd(),pagePositionOffset,currentTab.getEnd(),nextTabPositionOffset)
float indicatorEnd = getIndicatorPosition(nextTab.getEnd(), pagePositionOffset, currentTab.getEnd(), nextTabPositionOffset);
height=getHeight()
int height = getHeight();
tabCount=pagerAdapter.getCount()
int tabCount = pagerAdapter.getCount();
title=pagerAdapter.getPageTitle(position)
CharSequence title = pagerAdapter.getPageTitle(position);
inflatedTabView=tabsContainer.inflateTab(layoutInflater,attributes.getTabLayoutId())
View inflatedTabView = tabsContainer.inflateTab(layoutInflater, attributes.getTabLayoutId());
int position = (int) view.getTag(TAG_KEY_POSITION);
scrollOffset=getHorizontalScrollOffset(position,positionOffset)
int scrollOffset = getHorizontalScrollOffset(position, positionOffset);
newScrollX=calculateScrollOffset(position,scrollOffset,positionOffset)
float newScrollX = calculateScrollOffset(position, scrollOffset, positionOffset);
tabWidth=tabsContainer.getTabAt(position).getWidth()
int tabWidth = tabsContainer.getTabAt(position).getWidth();
tabForPosition=tabsContainer.getTabAt(position)
View tabForPosition = tabsContainer.getTabAt(position);
float tabStartX = tabForPosition.getLeft() + scrollOffset;
int viewMiddleOffset = getTabParentWidth() / 2;
float tabCenterOffset = (tabForPosition.getRight() - tabForPosition.getLeft()) * 0.5F;
nextTabDelta=getNextTabDelta(position,pagerOffset,tabForPosition)
float nextTabDelta = getNextTabDelta(position, pagerOffset, tabForPosition);
LinearLayout tabsContainerView = new LinearLayout(context);
tab=getTabAt(index)
View tab = getTabAt(index);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
position=indicatorCoordinates.getStart()
float position = indicatorCoordinates.getStart();
lastTabOffset=((ViewGroup)getChildAt(0)).getChildAt(getChildCount() - 1).getWidth()
float lastTabOffset = ((ViewGroup) getChildAt(0)).getChildAt(getChildCount() - 1).getWidth();
frequency=getOneCycle(lastTabOffset)
float frequency = getOneCycle(lastTabOffset);
r=toHex(calculateColour(position,frequency,PHASE_RED,AMPLITUDE,CENTER_FREQUENCY))
String r = toHex(calculateColour(position, frequency, PHASE_RED, AMPLITUDE, CENTER_FREQUENCY));
g=toHex(calculateColour(position,frequency,PHASE_GREEN,AMPLITUDE,CENTER_FREQUENCY))
String g = toHex(calculateColour(position, frequency, PHASE_GREEN, AMPLITUDE, CENTER_FREQUENCY));
b=toHex(calculateColour(position,frequency,PHASE_BLUE,AMPLITUDE,CENTER_FREQUENCY))
String b = toHex(calculateColour(position, frequency, PHASE_BLUE, AMPLITUDE, CENTER_FREQUENCY));
height=getHeight()
int height = getHeight();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPagerFragment viewPagerFragment = new ViewPagerFragment();
Bundle bundle = new Bundle();
TextView view = (TextView) layoutInflater.inflate(R.layout.view_demo, container, false);
currentPosition=viewPagerAdapterState.getCurrentPosition()
int currentPosition = viewPagerAdapterState.getCurrentPosition();
view=getView(container,position)
View view = getView(container, position);
parcelableSparseArray=viewPagerAdapterState.get(position)
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
View view = (View) object;
SparseArray<Parcelable> viewState = new SparseArray<>();
position=entry.getValue()
int position = entry.getValue();
view=entry.getKey()
View view = entry.getKey();
bundle=in.readBundle()
Bundle bundle = in.readBundle();
Map<Integer, SparseArray<Parcelable>> viewStates = new HashMap<>(bundle.keySet().size());
sparseParcelableArray=bundle.getSparseParcelableArray(key)
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
primaryItemPosition=in.readInt()
int primaryItemPosition = in.readInt();
Bundle bundle = new Bundle();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
final TextView abText = (TextView) findViewById(R.id.ab_text);
final AyBe ayBe = new AyBe();
id=item.getItemId()
int id = item.getItemId();
callback=weakCallback.get()
AbTestingParamsLoadedCallback callback = weakCallback.get();
WeakReference<NoLeakActivity> weakNoLeakActivity = new WeakReference<NoLeakActivity>(noLeakActivity);
noLeakActivity=weakNoLeakActivity.get()
NoLeakActivity noLeakActivity = weakNoLeakActivity.get();
RecyclerView recyclerView = (RecyclerView) layoutInflater.inflate(R.layout.view_page, viewGroup, false);
itemView=layoutInflater.inflate(R.layout.view_item,parent,false)
View itemView = layoutInflater.inflate(R.layout.view_item, parent, false);
actual=foo.twice(HALF)
int actual = foo.twice(HALF);
int expected = WHOLE;
final float inverseRatio = 1f - ratio;
float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRatio);
float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRatio);
float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRatio);
hsv=node.getHsv()
float[] hsv = node.getHsv();
width=bitmap.getWidth()
final int width = bitmap.getWidth();
height=bitmap.getHeight()
final int height = bitmap.getHeight();
final int[] rgbPixels = new int[width * height];
final MedianCutQuantizer mcq = new MedianCutQuantizer(rgbPixels, NUM_COLORS);
primaryAccentColor=findPrimaryAccentColor()
final ColorNode primaryAccentColor = findPrimaryAccentColor();
secondaryAccentColor=findSecondaryAccentColor(primaryAccentColor)
final ColorNode secondaryAccentColor = findSecondaryAccentColor(primaryAccentColor);
tertiaryAccentColor=findTertiaryAccentColor(primaryAccentColor,secondaryAccentColor)
final int tertiaryAccentColor = findTertiaryAccentColor(
                primaryAccentColor, secondaryAccentColor);
primaryTextColor=findPrimaryTextColor(primaryAccentColor)
final int primaryTextColor = findPrimaryTextColor(primaryAccentColor);
secondaryTextColor=findSecondaryTextColor(primaryAccentColor)
final int secondaryTextColor = findSecondaryTextColor(primaryAccentColor);
final float primaryHue = primary.getHsv()[0];
final float candidateHue = candidate.getHsv()[0];
copy=Arrays.copyOf(palette,palette.length)
final MedianCutQuantizer.ColorNode[] copy = Arrays.copyOf(palette, palette.length);
maxCount=palette[0].getCount()
final float maxCount = palette[0].getCount();
lhsWeight=calculateWeight(lhs,maxCount)
final float lhsWeight = calculateWeight(lhs, maxCount);
rhsWeight=calculateWeight(rhs,maxCount)
final float rhsWeight = calculateWeight(rhs, maxCount);
float sum = 0;
float sumWeight = 0;
float value = values[i];
float weight = values[i + 1];
ColorHistogram colorHist = new ColorHistogram(pixels);
K=colorHist.getNumberOfColors()
int K = colorHist.getNumberOfColors();
ColorNode[] rCols = null;
rgb=colorHist.getColor(i)
int rgb = colorHist.getColor(i);
cnt=colorHist.getCount(i)
int cnt = colorHist.getCount(i);
ColorBox initialBox = new ColorBox(0, K - 1, 0);
List<ColorBox> colorSet = new ArrayList<ColorBox>();
int k = 1;
boolean done = false;
nextBox=findBoxToSplit(colorSet)
ColorBox nextBox = findBoxToSplit(colorSet);
newBox=nextBox.splitBox()
ColorBox newBox = nextBox.splitBox();
color=findClosestColor(pixels[i])
ColorNode color = findClosestColor(pixels[i]);
idx=findClosestColorIndex(rgb)
int idx = findClosestColorIndex(rgb);
red=Color.red(rgb)
int red = Color.red(rgb);
grn=Color.green(rgb)
int grn = Color.green(rgb);
blu=Color.blue(rgb)
int blu = Color.blue(rgb);
int minIdx = 0;
int minDistance = Integer.MAX_VALUE;
ColorNode color = quantColors[i];
d2=color.distance2(red,grn,blu)
int d2 = color.distance2(red, grn, blu);
ColorBox boxToSplit = null;
int minLevel = Integer.MAX_VALUE;
n=colorBoxes.size()
int n = colorBoxes.size();
ColorNode[] avgColors = new ColorNode[n];
int i = 0;
int dr = this.red - red;
int dg = this.grn - grn;
int db = this.blu - blu;
ColorNode color = imageColors[i];
int r = color.red;
int g = color.grn;
int b = color.blu;
dim=getLongestColorDimension()
ColorDimension dim = getLongestColorDimension();
med=findMedian(dim)
int med = findMedian(dim);
int nextLevel = level + 1;
ColorBox newBox = new ColorBox(med + 1, upper, nextLevel);
int rLength = rmax - rmin;
int gLength = gmax - gmin;
int bLength = bmax - bmin;
int half = count / 2;
int nPixels, median;
int rSum = 0;
int gSum = 0;
int bSum = 0;
int n = 0;
ColorNode ci = imageColors[i];
int cnt = ci.cnt;
double nd = n;
int avgRed = (int) (0.5 + rSum / nd);
int avgGrn = (int) (0.5 + gSum / nd);
int avgBlu = (int) (0.5 + bSum / nd);
s=this.getClass().getSimpleName()
String s = this.getClass().getSimpleName();
int i = 0;
int N = pixelsOrig.length;
int[] pixelsCpy = new int[N];
int k = -1;
int curColor = -1;
int nColors = k + 1;
id=item.getItemId()
int id = item.getItemId();
Intent intent = new Intent();
bitmap=((BitmapDrawable)imageView.getDrawable()).getBitmap()
Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap();
DominantColorCalculator dominantColorCalculator = new DominantColorCalculator(bitmap);
selectedImageUri=data.getData()
Uri selectedImageUri = data.getData();
selectedImagePath=getPath(selectedImageUri)
String selectedImagePath = getPath(selectedImageUri);
String[] projection = {MediaStore.Images.Media.DATA};
cursor=managedQuery(uri,projection,null,null,null)
Cursor cursor = managedQuery(uri, projection, null, null, null);
column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)
int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
LinearLayout rootView = (LinearLayout) inflater.inflate(R.layout.fragment_main, container, false);
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
preapprovalButton=payPal.getCheckoutButton(getActivity(),PayPal.BUTTON_194x37,CheckoutButton.TEXT_PAY)
CheckoutButton preapprovalButton = payPal.getCheckoutButton(getActivity(), PayPal.BUTTON_194x37, CheckoutButton.TEXT_PAY);
preapprovalIntent=payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY)
Intent preapprovalIntent = payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY);
String resultTitle = "";
String resultInfo = "";
String resultExtra = "";
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
PayPalPreapproval preapproval = new PayPalPreapproval();
preapproval=createPreapproval(preapprovalKey)
PayPalPreapproval preapproval = createPreapproval(preapprovalKey);
Bundle bundle = new Bundle();
int availableLength = maxLength;
StringBuilder stringBuilder = new StringBuilder(maxLength);
prefixAndSuffixLength=computeAppendedLengthIncludingSeparatorSpaces(prefix,suffix)
int prefixAndSuffixLength = computeAppendedLengthIncludingSeparatorSpaces(prefix, suffix);
urlLength=computeUrlLengthIncludingSeparatorSpace(url)
int urlLength = computeUrlLengthIncludingSeparatorSpace(url);
trimmedSubject=ellipsizeTextIfExceedsMaxLength(subject,availableLength)
String trimmedSubject = ellipsizeTextIfExceedsMaxLength(subject, availableLength);
int length = 0;
preferences=context.getSharedPreferences(MRU_PREFERENCES,Context.MODE_PRIVATE)
SharedPreferences preferences = context.getSharedPreferences(MRU_PREFERENCES, Context.MODE_PRIVATE);
args=getArguments()
Bundle args = getArguments();
themeResId=getThemeResIdIfProvidedIn(args)
int themeResId = getThemeResIdIfProvidedIn(args);
title=getTitleIfProvidedIn(args)
CharSequence title = getTitleIfProvidedIn(args);
builder=createDialogBuilder(themeResId).setCancelable(true).setView(dialogView)
AlertDialog.Builder builder = createDialogBuilder(themeResId)
                .setCancelable(true)
                .setView(dialogView);
inflater=getActivity().getLayoutInflater()
LayoutInflater inflater = getActivity().getLayoutInflater();
GridView gridView = (GridView) rootView.findViewById(R.id.ps__dialog_grid);
targetApps=extractTargetAppsFrom(args)
TargetApps targetApps = extractTargetAppsFrom(args);
allShareTargets=getAvailableShareTargets(sharingIntent)
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
priorityAppInfos=createPriorityResolveInfoList(targetApps,allShareTargets)
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
otherAppInfos=createOtherAppsResolveInfoList(priorityAppInfos,allShareTargets)
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
resolveInfos=targetApps.extractTargetResolveInfosFrom(allShareTargets)
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
mruResolveInfo=findMruResolveInfoIn(allShareTargets)
ResolveInfo mruResolveInfo = findMruResolveInfoIn(allShareTargets);
List<ResolveInfo> otherAppsInfos = new ArrayList<ResolveInfo>(allAppInfos);
mruPackageName=persister.getLastUsedTarget()
String mruPackageName = persister.getLastUsedTarget();
String packageName = resolveInfo.activityInfo.packageName;
packageManager=getActivity().getPackageManager()
PackageManager packageManager = getActivity().getPackageManager();
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
View buttonStrip = (View) showMoreButton.getParent();
gridView=getGridView()
GridView gridView = getGridView();
intent=wrapIntentWithExplicitTargetComponentForItem(position,sharingIntent)
Intent intent = wrapIntentWithExplicitTargetComponentForItem(position, sharingIntent);
Intent intent = new Intent(sharingIntent);
ActivityInfo activity = adapter.getItem(position).activityInfo;
ComponentName name = new ComponentName(activity.applicationInfo.packageName, activity.name);
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
PriorityShareDialog dialog = new PriorityShareDialog();
Bundle args = new Bundle();
sharingIntent=createSharingIntent()
Intent sharingIntent = createSharingIntent();
fragmentManager=activity.getFragmentManager()
FragmentManager fragmentManager = activity.getFragmentManager();
Intent intent = new Intent(Intent.ACTION_SEND);
dialog=new PriorityShareDialog.Builder().setTitle(title).setTargetApps(targetApps).setSharingIntent(sharingIntent).setOnPrepareSharingIntentListener(listener).setShowMostRecentlyUsed(showMostRecentlyUsed).build()
PriorityShareDialog dialog = new PriorityShareDialog.Builder()
                .setTitle(title)
                .setTargetApps(targetApps)
                .setSharingIntent(sharingIntent)
                .setOnPrepareSharingIntentListener(listener)
                .setShowMostRecentlyUsed(showMostRecentlyUsed)
                .build();
PrioritySharer prioritySharer = new PrioritySharer();
prioritySharer=build()
PrioritySharer prioritySharer = build();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
layoutInflater=LayoutInflater.from(context)
LayoutInflater layoutInflater = LayoutInflater.from(context);
iconSizePx=getIconSizePx(context.getResources())
int iconSizePx = getIconSizePx(context.getResources());
ArrayList<ResolveInfo> sortedList = new ArrayList<ResolveInfo>(resolveInfoList);
int otherAppsCountMaybe = showAllApps ? otherAppInfos.size() : 0;
firstOtherAppsItemPosition=priorityAppInfos.size()
int firstOtherAppsItemPosition = priorityAppInfos.size();
int offsetPosition = position - firstOtherAppsItemPosition;
TextView textView;
textView=initializeItemViewIfNecessary(convertView,R.layout.ps__grid_item_share,parent)
TextView textView = initializeItemViewIfNecessary(convertView, R.layout.ps__grid_item_share, parent);
info=getItem(position)
ResolveInfo info = getItem(position);
icon=info.loadIcon(packageManager)
Drawable icon = info.loadIcon(packageManager);
arraySize=in.readInt()
int arraySize = in.readInt();
String[] packageNames = new String[arraySize];
arraySize=targetPackages.size()
int arraySize = targetPackages.size();
String[] packagesArray = new String[arraySize];
SparseArray<ResolveInfo> matchedResolveInfos = new SparseArray<ResolveInfo>(targetPackages.size());
String packageName = info.activityInfo.packageName;
index=indexOfItemInto(packageName,targetPackages)
int index = indexOfItemInto(packageName, targetPackages);
sparseArraySize=sparseArray.size()
int sparseArraySize = sparseArray.size();
ArrayList<T> list = new ArrayList<T>(sparseArraySize);
int i = 0;
originalSubject=intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT)
CharSequence originalSubject = intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT);
String subject = originalSubject != null ? originalSubject.toString() : null;
composer=createComposer()
MessageComposer composer = createComposer();
component=intent.getComponent()
ComponentName component = intent.getComponent();
targetPackageName=component.getPackageName()
String targetPackageName = component.getPackageName();
adapter=ArrayAdapter.createFromResource(this,R.array.target_apps,android.R.layout.simple_spinner_item)
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
EditText text = (EditText) findViewById(R.id.text);
EditText title = (EditText) findViewById(R.id.title);
EditText mimeType = (EditText) findViewById(R.id.mime_type);
EditText dataUri = (EditText) findViewById(R.id.data_uri);
Switch showMostRecentlyUsed = (Switch) findViewById(R.id.show_most_recently_used);
uriString=dataUri.getText().toString()
String uriString = dataUri.getText().toString();
EditText text = (EditText) findViewById(R.id.text);
TextView textView = (TextView) convertView.findViewById(R.id.positionView);
colorView=convertView.findViewById(R.id.colorView)
View colorView = convertView.findViewById(R.id.colorView);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
offset=headerPlaceholder.getTop()
int offset = headerPlaceholder.getTop();
Integer item = COLORS[position];
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
firstVisiblePosition=grid.getFirstVisiblePosition()
int firstVisiblePosition = grid.getFirstVisiblePosition();
inflate=getViewForPosition(container,position)
View inflate = getViewForPosition(container, position);
id=item.getItemId()
int id = item.getItemId();
MyActivity activity = new MyActivity();
String manifestProperty = "../app/src/main/AndroidManifest.xml";
String resProperty = "../app/src/main/res";
cursor=resolver.query(uri,projection,selection,selectionArgs,null)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, null);
cursor=resolver.query(uri,projection,selection,selectionArgs,sortOrder)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, sortOrder);
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=richClass.setter(name)
Method setter = richClass.setter(name);
T obj;
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=methodsByName.get(name)
Method setter = methodsByName.get(name);
int type = TYPE_INT;
Class<?> t = setter.getParameterTypes()[0];
Class<?> t = setter.getParameterTypes()[0];
cursorType=cursor.getType(index)
final int cursorType = cursor.getType(index);
final Object obj;
s=f.getAnnotation(Mapper.class)
Mapper s = f.getAnnotation(Mapper.class);
mm=m.getAnnotation(Mapper.class)
Mapper mm = m.getAnnotation(Mapper.class);
methodName=StringUtil.asCamelifySetMethod(what)
String methodName = StringUtil.asCamelifySetMethod(what);
cursor=getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,null,null,null,null)
Cursor cursor = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
now=System.currentTimeMillis()
long now = System.currentTimeMillis();
List<Contact2> typedCursor = new CursorList<Contact2>(cursor, Contact2.class);
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[a-zA-Z0-9]+")
Pattern p = Pattern.compile("[a-zA-Z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[A-Z][a-z0-9]+")
Pattern p = Pattern.compile("[A-Z][a-z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
SurfaceView first = (SurfaceView) findViewById(R.id.firstSurface);
SurfaceView second = (SurfaceView) findViewById(R.id.secondSurface);
Intent pickVideo = new Intent(Intent.ACTION_PICK);
xml=context.obtainStyledAttributes(attrs,R.styleable.RelativeLayoutWithForeground)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.RelativeLayoutWithForeground);
int foregroundResId = INVALID_FOREGROUND_ID;
drawable=getDrawable(getResources(),foregroundResId)
Drawable drawable = getDrawable(getResources(), foregroundResId);
Bundle args = new Bundle();
enroll=mHotwordDetector.createEnrollIntent()
Intent enroll = mHotwordDetector.createEnrollIntent();

Diff of 74796d65b8cc2f998b1fcd1e8266a795d8e3c481 and 3ef6e6319ec6a9ead9746e5083e4e65b9a260179:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 74796d65b8cc2f998b1fcd1e8266a795d8e3c481 to 3ef6e6319ec6a9ead9746e5083e4e65b9a260179


****Parsing for addition at revision 3ef6e6319ec6a9ead9746e5083e4e65b9a260179****

Added AccessibilityServices.java to .\/spikes\ repository source files.
Added Action.java to .\/spikes\ repository source files.
Added Actions.java to .\/spikes\ repository source files.
Added ActionsAccessibilityDelegate.java to .\/spikes\ repository source files.
Added ActionsAlertDialogCreator.java to .\/spikes\ repository source files.
Added AccessibilityServicesActivity.java to .\/spikes\ repository source files.
Added Demo.java to .\/spikes\ repository source files.
Added DemoAdapter.java to .\/spikes\ repository source files.
Added CustomActionsActivity.java to .\/spikes\ repository source files.
Added TweetView.java to .\/spikes\ repository source files.
Added DemosActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added DrawerActivity.java to .\/spikes\ repository source files.
Added EarthActivity.java to .\/spikes\ repository source files.
Added ProHaxDrawerActivity.java to .\/spikes\ repository source files.
Added SaturnActivity.java to .\/spikes\ repository source files.
Added LocalPlayerActivity.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added CastApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ComposeSmsActivity.java to .\/spikes\ repository source files.
Added HeadlessSmsSendService.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MmsReceiver.java to .\/spikes\ repository source files.
Added SmsReceiver.java to .\/spikes\ repository source files.
Added ExtendedDemoActivity.java to .\/spikes\ repository source files.
Added ExtendedDemoApplication.java to .\/spikes\ repository source files.
Added SimpleDemoActivity.java to .\/spikes\ repository source files.
Added SimpleDemoApplication.java to .\/spikes\ repository source files.
Added Binder.java to .\/spikes\ repository source files.
Added ConnectedClient.java to .\/spikes\ repository source files.
Added Connection.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnection.java to .\/spikes\ repository source files.
Added ServiceConnectionCallback.java to .\/spikes\ repository source files.
Added EasyCustomTabs.java to .\/spikes\ repository source files.
Added ActionButtonComposer.java to .\/spikes\ repository source files.
Added CloseButtonIconComposer.java to .\/spikes\ repository source files.
Added Composer.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilder.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigator.java to .\/spikes\ repository source files.
Added EasyCustomTabsWebNavigator.java to .\/spikes\ repository source files.
Added ExitAnimationsComposer.java to .\/spikes\ repository source files.
Added IntentCustomizer.java to .\/spikes\ repository source files.
Added MenuItemComposer.java to .\/spikes\ repository source files.
Added NavigationFallback.java to .\/spikes\ repository source files.
Added Navigator.java to .\/spikes\ repository source files.
Added ShowTitleComposer.java to .\/spikes\ repository source files.
Added StartAnimationsComposer.java to .\/spikes\ repository source files.
Added ToolbarColorComposer.java to .\/spikes\ repository source files.
Added UrlBarHidingComposer.java to .\/spikes\ repository source files.
Added WebNavigator.java to .\/spikes\ repository source files.
Added AvailableAppProvider.java to .\/spikes\ repository source files.
Added BestPackageFinder.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProvider.java to .\/spikes\ repository source files.
Added BinderTest.java to .\/spikes\ repository source files.
Added ConnectedClientTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnectionTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigatorTest.java to .\/spikes\ repository source files.
Added BestPackageFinderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProviderTest.java to .\/spikes\ repository source files.
Added ApiPagedChannelHistory.java to .\/spikes\ repository source files.
Added ApiPagedResponse.java to .\/spikes\ repository source files.
Added ChannelHistory.java to .\/spikes\ repository source files.
Added HistoryConverter.java to .\/spikes\ repository source files.
Added Runner.java to .\/spikes\ repository source files.
Added SlackHistoryFetcher.java to .\/spikes\ repository source files.
Added SlackWebService.java to .\/spikes\ repository source files.
Added ApiPagedResponseTest.java to .\/spikes\ repository source files.
Added MainActivityTest.java to .\/spikes\ repository source files.
Added LoremAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added BetterAccountManager.java to .\/spikes\ repository source files.
Added BetterAuthenticator.java to .\/spikes\ repository source files.
Added BetterAuthenticatorActivity.java to .\/spikes\ repository source files.
Added GertHerbAuthenticator.java to .\/spikes\ repository source files.
Added GertHerbAuthenticatorService.java to .\/spikes\ repository source files.
Added NoAccountException.java to .\/spikes\ repository source files.
Added ReactiveAuthenticatorActivity.java to .\/spikes\ repository source files.
Added Token.java to .\/spikes\ repository source files.
Added GertHerbActivity.java to .\/spikes\ repository source files.
Added GertHerbApplication.java to .\/spikes\ repository source files.
Added GertHerbAuthenticationActivity.java to .\/spikes\ repository source files.
Added TypefaceFactory.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added ViewServer.java to .\/spikes\ repository source files.
Added ViewServerManager.java to .\/spikes\ repository source files.
Added DeveloperError.java to .\/spikes\ repository source files.
Added HomeActivity.java to .\/spikes\ repository source files.
Added LoginActivity.java to .\/spikes\ repository source files.
Added LoginView.java to .\/spikes\ repository source files.
Added UserCredentials.java to .\/spikes\ repository source files.
Added FontButton.java to .\/spikes\ repository source files.
Added FontEditText.java to .\/spikes\ repository source files.
Added FontTextView.java to .\/spikes\ repository source files.
Added GithubApi.java to .\/spikes\ repository source files.
Added GithubApiFactory.java to .\/spikes\ repository source files.
Added TokenRequest.java to .\/spikes\ repository source files.
Added TokenResponse.java to .\/spikes\ repository source files.
Added Dummy.java to .\/spikes\ repository source files.
Added DummyTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MainFragment.java to .\/spikes\ repository source files.
Added Attributes.java to .\/spikes\ repository source files.
Added Coordinates.java to .\/spikes\ repository source files.
Added IndicatorCoordinatesCalculator.java to .\/spikes\ repository source files.
Added LandingStrip.java to .\/spikes\ repository source files.
Added MutableCoordinates.java to .\/spikes\ repository source files.
Added OnPagerAdapterChangedListener.java to .\/spikes\ repository source files.
Added PagerAdapterObserver.java to .\/spikes\ repository source files.
Added Scrollable.java to .\/spikes\ repository source files.
Added ScrollingPageChangeListener.java to .\/spikes\ repository source files.
Added State.java to .\/spikes\ repository source files.
Added TabsContainer.java to .\/spikes\ repository source files.
Added CustomLandingStrip.java to .\/spikes\ repository source files.
Added CustomTabActivity.java to .\/spikes\ repository source files.
Added ExampleRainbowLandingStrip.java to .\/spikes\ repository source files.
Added FixedWidthTabActivity.java to .\/spikes\ repository source files.
Added NoFragmentsSimpleTextTabActivity.java to .\/spikes\ repository source files.
Added Data.java to .\/spikes\ repository source files.
Added DemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added SmallDemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerFragment.java to .\/spikes\ repository source files.
Added DemoViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapterState.java to .\/spikes\ repository source files.
Added SimpleTextTabActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AbTestingParamsLoadedCallback.java to .\/spikes\ repository source files.
Added AyBe.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added WeakStartCallback.java to .\/spikes\ repository source files.
Added LeakActivity.java to .\/spikes\ repository source files.
Added NoLeakActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added Bar.java to .\/spikes\ repository source files.
Added Foo.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added FooTest.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added ColorScheme.java to .\/spikes\ repository source files.
Added ColorUtils.java to .\/spikes\ repository source files.
Added DominantColorCalculator.java to .\/spikes\ repository source files.
Added FloatUtils.java to .\/spikes\ repository source files.
Added MedianCutQuantizer.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added PayPalFragment.java to .\/spikes\ repository source files.
Added PayPalHelper.java to .\/spikes\ repository source files.
Added MaxLengthMessageComposer.java to .\/spikes\ repository source files.
Added MessageComposer.java to .\/spikes\ repository source files.
Added TwitterMessageComposer.java to .\/spikes\ repository source files.
Added DisabledMruPersister.java to .\/spikes\ repository source files.
Added MruPersister.java to .\/spikes\ repository source files.
Added SharedPreferencesMruPersister.java to .\/spikes\ repository source files.
Added OnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added PriorityShareDialog.java to .\/spikes\ repository source files.
Added PrioritySharer.java to .\/spikes\ repository source files.
Added ShareTargetsAdapter.java to .\/spikes\ repository source files.
Added SimpleOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added TargetApps.java to .\/spikes\ repository source files.
Added TwitterOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AdvancedActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SimpleActivity.java to .\/spikes\ repository source files.
Added LockingActivity.java to .\/spikes\ repository source files.
Added PostLockingActivity.java to .\/spikes\ repository source files.
Added PreLockingActivity.java to .\/spikes\ repository source files.
Added DummyAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added NovoStaggeredGridView.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SpikeApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SwipeableView.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MyClass.java to .\/spikes\ repository source files.
Added MyClassTest.java to .\/spikes\ repository source files.
Added MyAndroidClassTest.java to .\/spikes\ repository source files.
Added RobolectricGradleTestRunner.java to .\/spikes\ repository source files.
Added Mapper.java to .\/spikes\ repository source files.
Added Query.java to .\/spikes\ repository source files.
Added TypedResolver.java to .\/spikes\ repository source files.
Added CursorList.java to .\/spikes\ repository source files.
Added CursorListIterator.java to .\/spikes\ repository source files.
Added CursorMarshaller.java to .\/spikes\ repository source files.
Added EmptyListIterator.java to .\/spikes\ repository source files.
Added ReflectionCursorMarshaller.java to .\/spikes\ repository source files.
Added RichClass.java to .\/spikes\ repository source files.
Added Setter.java to .\/spikes\ repository source files.
Added Function.java to .\/spikes\ repository source files.
Added TypedElementLoader.java to .\/spikes\ repository source files.
Added TypedLoader.java to .\/spikes\ repository source files.
Added Marshaller.java to .\/spikes\ repository source files.
Added ObjectMapper.java to .\/spikes\ repository source files.
Added TypedActivity.java to .\/spikes\ repository source files.
Added StringUtil.java to .\/spikes\ repository source files.
Added MyObject.java to .\/spikes\ repository source files.
Added MediaPlayerSwitcherActivity.java to .\/spikes\ repository source files.
Added VideoPlayerService.java to .\/spikes\ repository source files.
Added RelativeLayoutWithForeground.java to .\/spikes\ repository source files.
Added DemoActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added RecognitionService.java to .\/spikes\ repository source files.
Added SessionService.java to .\/spikes\ repository source files.
Added SettingsActivity.java to .\/spikes\ repository source files.
Added SmartContextInteractionService.java to .\/spikes\ repository source files.
AccessibilityManager accessibilityManager = (AccessibilityManager) context.getSystemService(Context.ACCESSIBILITY_SERVICE);
enabledServices=getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN)
List<AccessibilityServiceInfo> enabledServices = getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN);
List<AccessibilityServiceInfo> enabledServices = getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN);
Action otherAction = (Action) o;
int result = id;
Actions otherActions = (Actions) o;
label=resources.getString(action.getLabel())
String label = resources.getString(action.getLabel());
action=actions.findActionById(actionId)
Action action = actions.findActionById(actionId);
action=actions.getAction(which)
Action action = actions.getAction(which);
CharSequence[] itemLabels = new CharSequence[actions.getCount()];
View view = convertView;
demo=getItem(position)
Demo demo = getItem(position);
Intent intent = new Intent(context, demo.activityClass);
layoutInflater=LayoutInflater.from(parent.getContext())
LayoutInflater layoutInflater = LayoutInflater.from(parent.getContext());
TweetView tweetView = (TweetView) findViewById(R.id.tweet);
actions=createActions(tweet,listener)
final Actions actions = createActions(tweet, listener);
ListView listView = ((ListView) findViewById(R.id.list));
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
final DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close) {

            @Override
            public void onDrawerClosed(View drawerView) {
                super.onDrawerClosed(drawerView);
                // waiting for the drawer to close, then navigating seems to cause issue.
                // why wait for the drawer to close? jankiness.
                if (pendingNavigationClick != null) {
                    startActivity(pendingNavigationClick);
                    pendingNavigationClick = null;
                }
            }

        };
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close);
Intent intent;
b=getIntent().getExtras()
Bundle b = getIntent().getExtras();
mShouldStartPlayback=b.getBoolean("shouldStart")
boolean mShouldStartPlayback = b.getBoolean("shouldStart");
startPosition=b.getInt("startPosition",0)
int startPosition = b.getInt("startPosition", 0);
currentPos=mVideoView.getCurrentPosition()
int currentPos = mVideoView.getCurrentPosition();
String msg;
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, mDisplaySize.y + getActionBar().getHeight());
mm=mSelectedMedia.getMetadata()
MediaMetadata mm = mSelectedMedia.getMetadata();
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, (int) (mDisplaySize.x * ASPECT_RATIO));
WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
width=display.getWidth()
int width = display.getWidth();
height=display.getHeight()
int height = display.getHeight();
int resourceId = 0;
String videoUrl = "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4#sthash.rJ5rPZy8.dpuf";
String title = "Jahre Philharmonie";
String description = "Awesome film you must watch!";
String author = "Blundell";
String thumbUrl = "http://www.ustream.tv/blog/wp-content/uploads/2013/10/simply-go-live.png";
MediaMetadata metadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE);
mediaInfo=new MediaInfo.Builder(videoUrl).setMetadata(metadata).setStreamType(MediaInfo.STREAM_TYPE_BUFFERED).setContentType("video/mp4").build()
MediaInfo mediaInfo = new MediaInfo.Builder(videoUrl)
                        .setMetadata(metadata)
                        .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)
                        .setContentType("video/mp4")
                        .build();
Intent intent = new Intent(MainActivity.this, LocalPlayerActivity.class);
preferences=getPreferences(MODE_PRIVATE)
SharedPreferences preferences = getPreferences(MODE_PRIVATE);
defaultSmsPackage=Telephony.Sms.getDefaultSmsPackage(this)
String defaultSmsPackage = Telephony.Sms.getDefaultSmsPackage(this);
Intent intent = new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
availableAppProvider=EasyCustomTabs.getInstance()
AvailableAppProvider availableAppProvider = EasyCustomTabs.getInstance();
ConnectedClient connectedClient = new ConnectedClient(client);
binder=Binder.newInstance()
Binder binder = Binder.newInstance();
List<Composer> composerList = new ArrayList<>();
customTabsSession=connection.newSession()
CustomTabsSession customTabsSession = connection.newSession();
CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(customTabsSession);
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
context=EasyCustomTabs.getInstance().getContext()
Context context = EasyCustomTabs.getInstance().getContext();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
packagesSupportingCustomTabs=getPackagesSupportingCustomTabs()
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
defaultPackage=getDefaultPackage()
String defaultPackage = getDefaultPackage();
defaultActivityInfo=packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK,0)
ResolveInfo defaultActivityInfo = packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK, 0);
String packageName = defaultActivityInfo.activityInfo.packageName;
resolvedInfoList=packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK,0)
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<String> packagesSupportingCustomTabs = new ArrayList<>();
Intent serviceIntent = new Intent();
bestPackageFinder=BestPackageFinder.newInstance()
BestPackageFinder bestPackageFinder = BestPackageFinder.newInstance();
packageName=bestPackageFinder.findBestPackage()
String packageName = bestPackageFinder.findBestPackage();
resolveInfo=createResolveInfoFor(packageName)
ResolveInfo resolveInfo = createResolveInfoFor(packageName);
ResolveInfo resolveInfo = new ResolveInfo();
List<ResolveInfo> resolveInfoList = new ArrayList<>();
defaultPackageResolveInfo=createResolveInfoFor(packageName)
ResolveInfo defaultPackageResolveInfo = createResolveInfoFor(packageName);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
oldestApiMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage oldestApiMessage = apiMessages.get(apiMessages.size() - 1);
String lastResponseEpochTime = oldestApiMessage.timeStamp;
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
latestMessage=latestMessages.get(latestMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage latestMessage = latestMessages.get(latestMessages.size() - 1);
latestMessageDateTime=convertToLocalDateTime(latestMessage.timeStamp)
LocalDateTime latestMessageDateTime = convertToLocalDateTime(latestMessage.timeStamp);
List<ChannelHistory.Message> messages = new ArrayList<>();
historyFrom=getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1))
LocalDateTime historyFrom = getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1));
historyTo=getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0))
LocalDateTime historyTo = getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0));
String text = apiMessage.text;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
lastMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage lastMessage = apiMessages.get(apiMessages.size() - 1);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
firstMessage=apiMessages.get(0)
ApiPagedChannelHistory.ApiMessage firstMessage = apiMessages.get(0);
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
String slackToken = args[0];
retrofit=new Retrofit.Builder().baseUrl("https://slack.com/api/").addConverterFactory(GsonConverterFactory.create()).build()
Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://slack.com/api/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();
slackWebService=retrofit.create(SlackWebService.class)
SlackWebService slackWebService = retrofit.create(SlackWebService.class);
slackHistoryFetcher=SlackHistoryFetcher.from(slackWebService,slackToken)
SlackHistoryFetcher slackHistoryFetcher = SlackHistoryFetcher.from(slackWebService, slackToken);
start=LocalDateTime.now()
LocalDateTime start = LocalDateTime.now();
end=LocalDateTime.now().minusDays(7)
LocalDateTime end = LocalDateTime.now().minusDays(7);
channelHistory=slackHistoryFetcher.getChannelHistory(start,end)
ChannelHistory channelHistory = slackHistoryFetcher.getChannelHistory(start, end);
HistoryConverter historyConverter = new HistoryConverter();
ApiPagedResponse apiPagedResponse = new ApiPagedResponse(start);
response=fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime())
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
apiPagedChannelHistory=response.body()
ApiPagedChannelHistory apiPagedChannelHistory = response.body();
channelHistory=slackWebService.getChannelHistory(slackToken,channel,lastResponseEpochTime,NUMBER_OF_RESULTS)
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
ApiPagedChannelHistory apiPagedChannelHistory = new ApiPagedChannelHistory();
ApiPagedChannelHistory.ApiMessage apiMessage = new ApiPagedChannelHistory.ApiMessage();
final TextView textView = new TextView(context);
emptyView=findViewById(R.id.empty_view)
View emptyView = findViewById(R.id.empty_view);
final Integer action = values[0];
LoremAdapter loremAdapter = new LoremAdapter();
accounts=accountManager.getAccountsByType(accountType)
Account[] accounts = accountManager.getAccountsByType(accountType);
Bundle result;
Bundle result;
Bundle result = new Bundle();
activity=createLoginIntent(context,accountType,authTokenType,requiredFeatures,options)
Intent activity = createLoginIntent(context, accountType, authTokenType, requiredFeatures, options);
Bundle bundle = new Bundle();
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
accounts=accountManager.getAccountsByType(authTokenType)
Account[] accounts = accountManager.getAccountsByType(authTokenType);
bundle=createResponseBundle(token)
Bundle bundle = createResponseBundle(token);
accountManager=AccountManager.get(this.getApplicationContext())
AccountManager accountManager = AccountManager.get(this.getApplicationContext());
Account account = new Account(token.getUserName(), getAccountName());
Bundle bundle = new Bundle();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
GertHerbAuthenticator authenticator = new GertHerbAuthenticator(this);
fontId=getFontId(context,attrs)
int fontId = getFontId(context, attrs);
fontType=getFontType(fontId)
FontType fontType = getFontType(fontId);
typedArray=context.obtainStyledAttributes(attrs,R.styleable.CustomTextAppearance)
TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CustomTextAppearance);
typeface=createTypeFace(context,fontType)
Typeface typeface = createTypeFace(context, fontType);
info=context.getApplicationInfo()
ApplicationInfo info = context.getApplicationInfo();
name=activity.getTitle().toString()
String name = activity.getTitle().toString();
client=mServer.accept()
Socket client = mServer.accept();
boolean result;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
BufferedReader in = null;
request=in.readLine()
final String request = in.readLine();
String command;
String parameters;
index=request.indexOf(' ')
int index = request.indexOf(' ');
boolean result;
boolean success = true;
BufferedWriter out = null;
index=parameters.indexOf(' ')
int index = parameters.indexOf(' ');
code=parameters.substring(0,index)
final String code = parameters.substring(0, index);
int hashCode = (int) Long.parseLong(code, 16);
window=findWindow(hashCode)
final View window = findWindow(hashCode);
dispatch=ViewDebug.class.getDeclaredMethod("dispatchCommand",View.class,String.class,String.class,OutputStream.class)
final Method dispatch = ViewDebug.class.getDeclaredMethod("dispatchCommand",
                        View.class, String.class, String.class, OutputStream.class);
View window = null;
boolean result = true;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
boolean result = true;
String focusName = null;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
View focusedWindow = null;
BufferedWriter out = null;
boolean needWindowListUpdate = false;
boolean needFocusedWindowUpdate = false;
BetterAccountManager accountManager = new BetterAccountManager(this, getString(R.string.account_type), getString(R.string.token_type), null);
loginView=Views.findById(this,R.id.login_view)
LoginView loginView = Views.findById(this, R.id.login_view);
authorizationApi=new GithubApiFactory().createAuthorizationApi(credentials.username,credentials.password)
GithubApi authorizationApi = new GithubApiFactory().createAuthorizationApi(credentials.username, credentials.password);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
Endpoint endpoint = new Endpoint() {
            @Override
            public String getUrl() {
                return GITHUB_API_URL;
            }

            @Override
            public String getName() {
                return "Live";
            }
        };
interceptor=createAuthorizationRequestInterceptor(username,password)
RequestInterceptor interceptor = createAuthorizationRequestInterceptor(username, password);
restAdapter=createRestAdapter(endpoint,interceptor)
RestAdapter restAdapter = createRestAdapter(endpoint, interceptor);
Dummy dummy = new Dummy();
result=dummy.explodes()
boolean result = dummy.explodes();
String base64EncodedPublicKey = "CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE";
premiumPurchase=inventory.getPurchase(SKU_PREMIUM)
Purchase premiumPurchase = inventory.getPurchase(SKU_PREMIUM);
infiniteGasPurchase=inventory.getPurchase(SKU_INFINITE_GAS)
Purchase infiniteGasPurchase = inventory.getPurchase(SKU_INFINITE_GAS);
gasPurchase=inventory.getPurchase(SKU_GAS)
Purchase gasPurchase = inventory.getPurchase(SKU_GAS);
String payload = "";
String payload = "";
String payload = "";
payload=p.getDeveloperPayload()
String payload = p.getDeveloperPayload();
int index = mTank >= TANK_RES_IDS.length ? TANK_RES_IDS.length - 1 : mTank;
AlertDialog.Builder bld = new AlertDialog.Builder(this);
spe=getPreferences(MODE_PRIVATE).edit()
SharedPreferences.Editor spe = getPreferences(MODE_PRIVATE).edit();
sp=getPreferences(MODE_PRIVATE)
SharedPreferences sp = getPreferences(MODE_PRIVATE);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                                  + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                    | ((source[d + 1 + off] << 24) >>> 16)
                    | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                    | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                                   "-1002:Bad response received/" +
                                   "-1003:Purchase signature verification failed/" +
                                   "-1004:Send intent failed/" +
                                   "-1005:User cancelled/" +
                                   "-1006:Unknown purchase response/" +
                                   "-1007:Missing token/" +
                                   "-1008:Unknown error/" +
                                   "-1009:Subscriptions not available/" +
                                   "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(),
                    itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                        | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                        | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                            | ((source[d + 1 + off] << 24) >>> 16)
                            | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                            | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                "-1002:Bad response received/" +
                "-1003:Purchase signature verification failed/" +
                "-1004:Send intent failed/" +
                "-1005:User cancelled/" +
                "-1006:Unknown purchase response/" +
                "-1007:Missing token/" +
                "-1008:Unknown error/" +
                "-1009:Subscriptions not available/" +
                "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(), itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
responseCode=result.getResponse()
int responseCode = result.getResponse();
sku=purchase.getSku()
String sku = purchase.getSku();
skuDetails=inv.getSkuDetails(sku)
SkuDetails skuDetails = inv.getSkuDetails(sku);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
Button purchaseFiveButton = (Button) rootView.findViewById(R.id.fragment_main_button_purchase_five_coins);
xml=context.obtainStyledAttributes(attrs,R.styleable.LandingStrip)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.LandingStrip);
tabLayoutId=xml.getResourceId(R.styleable.LandingStrip_tabLayoutId,MISSING_TAB_LAYOUT_ID)
int tabLayoutId = xml.getResourceId(R.styleable.LandingStrip_tabLayoutId, MISSING_TAB_LAYOUT_ID);
indicatorColour=xml.getResourceId(R.styleable.LandingStrip_indicatorColor,DEFAULT_INDICATOR_COLOUR)
int indicatorColour = xml.getResourceId(R.styleable.LandingStrip_indicatorColor, DEFAULT_INDICATOR_COLOUR);
indicatorHeight=getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight,DEFAULT_INDICATOR_HEIGHT,xml)
int indicatorHeight = getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight, DEFAULT_INDICATOR_HEIGHT, xml);
tabsPaddingLeft=getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingLeft = getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding, DEFAULT_TABS_PADDING, xml);
tabsPaddingRight=getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingRight = getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding, DEFAULT_TABS_PADDING, xml);
MutableCoordinates drawCurrentTabCoordinates = new MutableCoordinates();
MutableCoordinates drawNextTabCoordinates = new MutableCoordinates();
MutableCoordinates drawMovingIndicatorCoordinates = new MutableCoordinates();
currentTab=tabsContainer.getTabAt(currentPosition)
View currentTab = tabsContainer.getTabAt(currentPosition);
currentTabStart=currentTab.getLeft()
float currentTabStart = currentTab.getLeft();
currentTabEnd=currentTab.getRight()
float currentTabEnd = currentTab.getRight();
nextTab=tabsContainer.getTabAt(currentPosition + 1)
View nextTab = tabsContainer.getTabAt(currentPosition + 1);
nextTabPositionOffset=getFractionFrom(pagePositionOffset)
float nextTabPositionOffset = getFractionFrom(pagePositionOffset);
indicatorStart=getIndicatorPosition(nextTab.getStart(),pagePositionOffset,currentTab.getStart(),nextTabPositionOffset)
float indicatorStart = getIndicatorPosition(nextTab.getStart(), pagePositionOffset, currentTab.getStart(), nextTabPositionOffset);
indicatorEnd=getIndicatorPosition(nextTab.getEnd(),pagePositionOffset,currentTab.getEnd(),nextTabPositionOffset)
float indicatorEnd = getIndicatorPosition(nextTab.getEnd(), pagePositionOffset, currentTab.getEnd(), nextTabPositionOffset);
height=getHeight()
int height = getHeight();
tabCount=pagerAdapter.getCount()
int tabCount = pagerAdapter.getCount();
title=pagerAdapter.getPageTitle(position)
CharSequence title = pagerAdapter.getPageTitle(position);
inflatedTabView=tabsContainer.inflateTab(layoutInflater,attributes.getTabLayoutId())
View inflatedTabView = tabsContainer.inflateTab(layoutInflater, attributes.getTabLayoutId());
int position = (int) view.getTag(TAG_KEY_POSITION);
scrollOffset=getHorizontalScrollOffset(position,positionOffset)
int scrollOffset = getHorizontalScrollOffset(position, positionOffset);
newScrollX=calculateScrollOffset(position,scrollOffset,positionOffset)
float newScrollX = calculateScrollOffset(position, scrollOffset, positionOffset);
tabWidth=tabsContainer.getTabAt(position).getWidth()
int tabWidth = tabsContainer.getTabAt(position).getWidth();
tabForPosition=tabsContainer.getTabAt(position)
View tabForPosition = tabsContainer.getTabAt(position);
float tabStartX = tabForPosition.getLeft() + scrollOffset;
int viewMiddleOffset = getTabParentWidth() / 2;
float tabCenterOffset = (tabForPosition.getRight() - tabForPosition.getLeft()) * 0.5F;
nextTabDelta=getNextTabDelta(position,pagerOffset,tabForPosition)
float nextTabDelta = getNextTabDelta(position, pagerOffset, tabForPosition);
LinearLayout tabsContainerView = new LinearLayout(context);
tab=getTabAt(index)
View tab = getTabAt(index);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
position=indicatorCoordinates.getStart()
float position = indicatorCoordinates.getStart();
lastTabOffset=((ViewGroup)getChildAt(0)).getChildAt(getChildCount() - 1).getWidth()
float lastTabOffset = ((ViewGroup) getChildAt(0)).getChildAt(getChildCount() - 1).getWidth();
frequency=getOneCycle(lastTabOffset)
float frequency = getOneCycle(lastTabOffset);
r=toHex(calculateColour(position,frequency,PHASE_RED,AMPLITUDE,CENTER_FREQUENCY))
String r = toHex(calculateColour(position, frequency, PHASE_RED, AMPLITUDE, CENTER_FREQUENCY));
g=toHex(calculateColour(position,frequency,PHASE_GREEN,AMPLITUDE,CENTER_FREQUENCY))
String g = toHex(calculateColour(position, frequency, PHASE_GREEN, AMPLITUDE, CENTER_FREQUENCY));
b=toHex(calculateColour(position,frequency,PHASE_BLUE,AMPLITUDE,CENTER_FREQUENCY))
String b = toHex(calculateColour(position, frequency, PHASE_BLUE, AMPLITUDE, CENTER_FREQUENCY));
height=getHeight()
int height = getHeight();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPagerFragment viewPagerFragment = new ViewPagerFragment();
Bundle bundle = new Bundle();
TextView view = (TextView) layoutInflater.inflate(R.layout.view_demo, container, false);
currentPosition=viewPagerAdapterState.getCurrentPosition()
int currentPosition = viewPagerAdapterState.getCurrentPosition();
view=getView(container,position)
View view = getView(container, position);
parcelableSparseArray=viewPagerAdapterState.get(position)
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
View view = (View) object;
SparseArray<Parcelable> viewState = new SparseArray<>();
position=entry.getValue()
int position = entry.getValue();
view=entry.getKey()
View view = entry.getKey();
bundle=in.readBundle()
Bundle bundle = in.readBundle();
Map<Integer, SparseArray<Parcelable>> viewStates = new HashMap<>(bundle.keySet().size());
sparseParcelableArray=bundle.getSparseParcelableArray(key)
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
primaryItemPosition=in.readInt()
int primaryItemPosition = in.readInt();
Bundle bundle = new Bundle();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
final TextView abText = (TextView) findViewById(R.id.ab_text);
final AyBe ayBe = new AyBe();
id=item.getItemId()
int id = item.getItemId();
callback=weakCallback.get()
AbTestingParamsLoadedCallback callback = weakCallback.get();
WeakReference<NoLeakActivity> weakNoLeakActivity = new WeakReference<NoLeakActivity>(noLeakActivity);
noLeakActivity=weakNoLeakActivity.get()
NoLeakActivity noLeakActivity = weakNoLeakActivity.get();
RecyclerView recyclerView = (RecyclerView) layoutInflater.inflate(R.layout.view_page, viewGroup, false);
itemView=layoutInflater.inflate(R.layout.view_item,parent,false)
View itemView = layoutInflater.inflate(R.layout.view_item, parent, false);
actual=foo.twice(HALF)
int actual = foo.twice(HALF);
int expected = WHOLE;
final float inverseRatio = 1f - ratio;
float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRatio);
float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRatio);
float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRatio);
hsv=node.getHsv()
float[] hsv = node.getHsv();
width=bitmap.getWidth()
final int width = bitmap.getWidth();
height=bitmap.getHeight()
final int height = bitmap.getHeight();
final int[] rgbPixels = new int[width * height];
final MedianCutQuantizer mcq = new MedianCutQuantizer(rgbPixels, NUM_COLORS);
primaryAccentColor=findPrimaryAccentColor()
final ColorNode primaryAccentColor = findPrimaryAccentColor();
secondaryAccentColor=findSecondaryAccentColor(primaryAccentColor)
final ColorNode secondaryAccentColor = findSecondaryAccentColor(primaryAccentColor);
tertiaryAccentColor=findTertiaryAccentColor(primaryAccentColor,secondaryAccentColor)
final int tertiaryAccentColor = findTertiaryAccentColor(
                primaryAccentColor, secondaryAccentColor);
primaryTextColor=findPrimaryTextColor(primaryAccentColor)
final int primaryTextColor = findPrimaryTextColor(primaryAccentColor);
secondaryTextColor=findSecondaryTextColor(primaryAccentColor)
final int secondaryTextColor = findSecondaryTextColor(primaryAccentColor);
final float primaryHue = primary.getHsv()[0];
final float candidateHue = candidate.getHsv()[0];
copy=Arrays.copyOf(palette,palette.length)
final MedianCutQuantizer.ColorNode[] copy = Arrays.copyOf(palette, palette.length);
maxCount=palette[0].getCount()
final float maxCount = palette[0].getCount();
lhsWeight=calculateWeight(lhs,maxCount)
final float lhsWeight = calculateWeight(lhs, maxCount);
rhsWeight=calculateWeight(rhs,maxCount)
final float rhsWeight = calculateWeight(rhs, maxCount);
float sum = 0;
float sumWeight = 0;
float value = values[i];
float weight = values[i + 1];
ColorHistogram colorHist = new ColorHistogram(pixels);
K=colorHist.getNumberOfColors()
int K = colorHist.getNumberOfColors();
ColorNode[] rCols = null;
rgb=colorHist.getColor(i)
int rgb = colorHist.getColor(i);
cnt=colorHist.getCount(i)
int cnt = colorHist.getCount(i);
ColorBox initialBox = new ColorBox(0, K - 1, 0);
List<ColorBox> colorSet = new ArrayList<ColorBox>();
int k = 1;
boolean done = false;
nextBox=findBoxToSplit(colorSet)
ColorBox nextBox = findBoxToSplit(colorSet);
newBox=nextBox.splitBox()
ColorBox newBox = nextBox.splitBox();
color=findClosestColor(pixels[i])
ColorNode color = findClosestColor(pixels[i]);
idx=findClosestColorIndex(rgb)
int idx = findClosestColorIndex(rgb);
red=Color.red(rgb)
int red = Color.red(rgb);
grn=Color.green(rgb)
int grn = Color.green(rgb);
blu=Color.blue(rgb)
int blu = Color.blue(rgb);
int minIdx = 0;
int minDistance = Integer.MAX_VALUE;
ColorNode color = quantColors[i];
d2=color.distance2(red,grn,blu)
int d2 = color.distance2(red, grn, blu);
ColorBox boxToSplit = null;
int minLevel = Integer.MAX_VALUE;
n=colorBoxes.size()
int n = colorBoxes.size();
ColorNode[] avgColors = new ColorNode[n];
int i = 0;
int dr = this.red - red;
int dg = this.grn - grn;
int db = this.blu - blu;
ColorNode color = imageColors[i];
int r = color.red;
int g = color.grn;
int b = color.blu;
dim=getLongestColorDimension()
ColorDimension dim = getLongestColorDimension();
med=findMedian(dim)
int med = findMedian(dim);
int nextLevel = level + 1;
ColorBox newBox = new ColorBox(med + 1, upper, nextLevel);
int rLength = rmax - rmin;
int gLength = gmax - gmin;
int bLength = bmax - bmin;
int half = count / 2;
int nPixels, median;
int rSum = 0;
int gSum = 0;
int bSum = 0;
int n = 0;
ColorNode ci = imageColors[i];
int cnt = ci.cnt;
double nd = n;
int avgRed = (int) (0.5 + rSum / nd);
int avgGrn = (int) (0.5 + gSum / nd);
int avgBlu = (int) (0.5 + bSum / nd);
s=this.getClass().getSimpleName()
String s = this.getClass().getSimpleName();
int i = 0;
int N = pixelsOrig.length;
int[] pixelsCpy = new int[N];
int k = -1;
int curColor = -1;
int nColors = k + 1;
id=item.getItemId()
int id = item.getItemId();
Intent intent = new Intent();
bitmap=((BitmapDrawable)imageView.getDrawable()).getBitmap()
Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap();
DominantColorCalculator dominantColorCalculator = new DominantColorCalculator(bitmap);
selectedImageUri=data.getData()
Uri selectedImageUri = data.getData();
selectedImagePath=getPath(selectedImageUri)
String selectedImagePath = getPath(selectedImageUri);
String[] projection = {MediaStore.Images.Media.DATA};
cursor=managedQuery(uri,projection,null,null,null)
Cursor cursor = managedQuery(uri, projection, null, null, null);
column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)
int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
LinearLayout rootView = (LinearLayout) inflater.inflate(R.layout.fragment_main, container, false);
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
preapprovalButton=payPal.getCheckoutButton(getActivity(),PayPal.BUTTON_194x37,CheckoutButton.TEXT_PAY)
CheckoutButton preapprovalButton = payPal.getCheckoutButton(getActivity(), PayPal.BUTTON_194x37, CheckoutButton.TEXT_PAY);
preapprovalIntent=payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY)
Intent preapprovalIntent = payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY);
String resultTitle = "";
String resultInfo = "";
String resultExtra = "";
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
PayPalPreapproval preapproval = new PayPalPreapproval();
preapproval=createPreapproval(preapprovalKey)
PayPalPreapproval preapproval = createPreapproval(preapprovalKey);
Bundle bundle = new Bundle();
int availableLength = maxLength;
StringBuilder stringBuilder = new StringBuilder(maxLength);
prefixAndSuffixLength=computeAppendedLengthIncludingSeparatorSpaces(prefix,suffix)
int prefixAndSuffixLength = computeAppendedLengthIncludingSeparatorSpaces(prefix, suffix);
urlLength=computeUrlLengthIncludingSeparatorSpace(url)
int urlLength = computeUrlLengthIncludingSeparatorSpace(url);
trimmedSubject=ellipsizeTextIfExceedsMaxLength(subject,availableLength)
String trimmedSubject = ellipsizeTextIfExceedsMaxLength(subject, availableLength);
int length = 0;
preferences=context.getSharedPreferences(MRU_PREFERENCES,Context.MODE_PRIVATE)
SharedPreferences preferences = context.getSharedPreferences(MRU_PREFERENCES, Context.MODE_PRIVATE);
args=getArguments()
Bundle args = getArguments();
themeResId=getThemeResIdIfProvidedIn(args)
int themeResId = getThemeResIdIfProvidedIn(args);
title=getTitleIfProvidedIn(args)
CharSequence title = getTitleIfProvidedIn(args);
builder=createDialogBuilder(themeResId).setCancelable(true).setView(dialogView)
AlertDialog.Builder builder = createDialogBuilder(themeResId)
                .setCancelable(true)
                .setView(dialogView);
inflater=getActivity().getLayoutInflater()
LayoutInflater inflater = getActivity().getLayoutInflater();
GridView gridView = (GridView) rootView.findViewById(R.id.ps__dialog_grid);
targetApps=extractTargetAppsFrom(args)
TargetApps targetApps = extractTargetAppsFrom(args);
allShareTargets=getAvailableShareTargets(sharingIntent)
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
priorityAppInfos=createPriorityResolveInfoList(targetApps,allShareTargets)
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
otherAppInfos=createOtherAppsResolveInfoList(priorityAppInfos,allShareTargets)
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
resolveInfos=targetApps.extractTargetResolveInfosFrom(allShareTargets)
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
mruResolveInfo=findMruResolveInfoIn(allShareTargets)
ResolveInfo mruResolveInfo = findMruResolveInfoIn(allShareTargets);
List<ResolveInfo> otherAppsInfos = new ArrayList<ResolveInfo>(allAppInfos);
mruPackageName=persister.getLastUsedTarget()
String mruPackageName = persister.getLastUsedTarget();
String packageName = resolveInfo.activityInfo.packageName;
packageManager=getActivity().getPackageManager()
PackageManager packageManager = getActivity().getPackageManager();
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
View buttonStrip = (View) showMoreButton.getParent();
gridView=getGridView()
GridView gridView = getGridView();
intent=wrapIntentWithExplicitTargetComponentForItem(position,sharingIntent)
Intent intent = wrapIntentWithExplicitTargetComponentForItem(position, sharingIntent);
Intent intent = new Intent(sharingIntent);
ActivityInfo activity = adapter.getItem(position).activityInfo;
ComponentName name = new ComponentName(activity.applicationInfo.packageName, activity.name);
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
PriorityShareDialog dialog = new PriorityShareDialog();
Bundle args = new Bundle();
sharingIntent=createSharingIntent()
Intent sharingIntent = createSharingIntent();
fragmentManager=activity.getFragmentManager()
FragmentManager fragmentManager = activity.getFragmentManager();
Intent intent = new Intent(Intent.ACTION_SEND);
dialog=new PriorityShareDialog.Builder().setTitle(title).setTargetApps(targetApps).setSharingIntent(sharingIntent).setOnPrepareSharingIntentListener(listener).setShowMostRecentlyUsed(showMostRecentlyUsed).build()
PriorityShareDialog dialog = new PriorityShareDialog.Builder()
                .setTitle(title)
                .setTargetApps(targetApps)
                .setSharingIntent(sharingIntent)
                .setOnPrepareSharingIntentListener(listener)
                .setShowMostRecentlyUsed(showMostRecentlyUsed)
                .build();
PrioritySharer prioritySharer = new PrioritySharer();
prioritySharer=build()
PrioritySharer prioritySharer = build();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
layoutInflater=LayoutInflater.from(context)
LayoutInflater layoutInflater = LayoutInflater.from(context);
iconSizePx=getIconSizePx(context.getResources())
int iconSizePx = getIconSizePx(context.getResources());
ArrayList<ResolveInfo> sortedList = new ArrayList<ResolveInfo>(resolveInfoList);
int otherAppsCountMaybe = showAllApps ? otherAppInfos.size() : 0;
firstOtherAppsItemPosition=priorityAppInfos.size()
int firstOtherAppsItemPosition = priorityAppInfos.size();
int offsetPosition = position - firstOtherAppsItemPosition;
TextView textView;
textView=initializeItemViewIfNecessary(convertView,R.layout.ps__grid_item_share,parent)
TextView textView = initializeItemViewIfNecessary(convertView, R.layout.ps__grid_item_share, parent);
info=getItem(position)
ResolveInfo info = getItem(position);
icon=info.loadIcon(packageManager)
Drawable icon = info.loadIcon(packageManager);
arraySize=in.readInt()
int arraySize = in.readInt();
String[] packageNames = new String[arraySize];
arraySize=targetPackages.size()
int arraySize = targetPackages.size();
String[] packagesArray = new String[arraySize];
SparseArray<ResolveInfo> matchedResolveInfos = new SparseArray<ResolveInfo>(targetPackages.size());
String packageName = info.activityInfo.packageName;
index=indexOfItemInto(packageName,targetPackages)
int index = indexOfItemInto(packageName, targetPackages);
sparseArraySize=sparseArray.size()
int sparseArraySize = sparseArray.size();
ArrayList<T> list = new ArrayList<T>(sparseArraySize);
int i = 0;
originalSubject=intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT)
CharSequence originalSubject = intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT);
String subject = originalSubject != null ? originalSubject.toString() : null;
composer=createComposer()
MessageComposer composer = createComposer();
component=intent.getComponent()
ComponentName component = intent.getComponent();
targetPackageName=component.getPackageName()
String targetPackageName = component.getPackageName();
adapter=ArrayAdapter.createFromResource(this,R.array.target_apps,android.R.layout.simple_spinner_item)
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
EditText text = (EditText) findViewById(R.id.text);
EditText title = (EditText) findViewById(R.id.title);
EditText mimeType = (EditText) findViewById(R.id.mime_type);
EditText dataUri = (EditText) findViewById(R.id.data_uri);
Switch showMostRecentlyUsed = (Switch) findViewById(R.id.show_most_recently_used);
uriString=dataUri.getText().toString()
String uriString = dataUri.getText().toString();
EditText text = (EditText) findViewById(R.id.text);
TextView textView = (TextView) convertView.findViewById(R.id.positionView);
colorView=convertView.findViewById(R.id.colorView)
View colorView = convertView.findViewById(R.id.colorView);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
offset=headerPlaceholder.getTop()
int offset = headerPlaceholder.getTop();
Integer item = COLORS[position];
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
firstVisiblePosition=grid.getFirstVisiblePosition()
int firstVisiblePosition = grid.getFirstVisiblePosition();
inflate=getViewForPosition(container,position)
View inflate = getViewForPosition(container, position);
id=item.getItemId()
int id = item.getItemId();
MyActivity activity = new MyActivity();
String manifestProperty = "../app/src/main/AndroidManifest.xml";
String resProperty = "../app/src/main/res";
cursor=resolver.query(uri,projection,selection,selectionArgs,null)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, null);
cursor=resolver.query(uri,projection,selection,selectionArgs,sortOrder)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, sortOrder);
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=richClass.setter(name)
Method setter = richClass.setter(name);
T obj;
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=methodsByName.get(name)
Method setter = methodsByName.get(name);
int type = TYPE_INT;
Class<?> t = setter.getParameterTypes()[0];
Class<?> t = setter.getParameterTypes()[0];
cursorType=cursor.getType(index)
final int cursorType = cursor.getType(index);
final Object obj;
s=f.getAnnotation(Mapper.class)
Mapper s = f.getAnnotation(Mapper.class);
mm=m.getAnnotation(Mapper.class)
Mapper mm = m.getAnnotation(Mapper.class);
methodName=StringUtil.asCamelifySetMethod(what)
String methodName = StringUtil.asCamelifySetMethod(what);
cursor=getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,null,null,null,null)
Cursor cursor = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
now=System.currentTimeMillis()
long now = System.currentTimeMillis();
List<Contact2> typedCursor = new CursorList<Contact2>(cursor, Contact2.class);
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[a-zA-Z0-9]+")
Pattern p = Pattern.compile("[a-zA-Z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[A-Z][a-z0-9]+")
Pattern p = Pattern.compile("[A-Z][a-z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
SurfaceView first = (SurfaceView) findViewById(R.id.firstSurface);
SurfaceView second = (SurfaceView) findViewById(R.id.secondSurface);
Intent pickVideo = new Intent(Intent.ACTION_PICK);
xml=context.obtainStyledAttributes(attrs,R.styleable.RelativeLayoutWithForeground)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.RelativeLayoutWithForeground);
int foregroundResId = INVALID_FOREGROUND_ID;
drawable=getDrawable(getResources(),foregroundResId)
Drawable drawable = getDrawable(getResources(), foregroundResId);
Bundle args = new Bundle();
enroll=mHotwordDetector.createEnrollIntent()
Intent enroll = mHotwordDetector.createEnrollIntent();

Diff of 3ef6e6319ec6a9ead9746e5083e4e65b9a260179 and 58e22d72bde07e31a20380cf2d0c12b6670a13a2:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 3ef6e6319ec6a9ead9746e5083e4e65b9a260179 to 58e22d72bde07e31a20380cf2d0c12b6670a13a2


****Parsing for addition at revision 58e22d72bde07e31a20380cf2d0c12b6670a13a2****

Added AccessibilityServices.java to .\/spikes\ repository source files.
Added Action.java to .\/spikes\ repository source files.
Added Actions.java to .\/spikes\ repository source files.
Added ActionsAccessibilityDelegate.java to .\/spikes\ repository source files.
Added ActionsAlertDialogCreator.java to .\/spikes\ repository source files.
Added AccessibilityServicesActivity.java to .\/spikes\ repository source files.
Added Demo.java to .\/spikes\ repository source files.
Added DemoAdapter.java to .\/spikes\ repository source files.
Added CustomActionsActivity.java to .\/spikes\ repository source files.
Added TweetView.java to .\/spikes\ repository source files.
Added DemosActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added DrawerActivity.java to .\/spikes\ repository source files.
Added EarthActivity.java to .\/spikes\ repository source files.
Added ProHaxDrawerActivity.java to .\/spikes\ repository source files.
Added SaturnActivity.java to .\/spikes\ repository source files.
Added LocalPlayerActivity.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added CastApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ComposeSmsActivity.java to .\/spikes\ repository source files.
Added HeadlessSmsSendService.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MmsReceiver.java to .\/spikes\ repository source files.
Added SmsReceiver.java to .\/spikes\ repository source files.
Added ExtendedDemoActivity.java to .\/spikes\ repository source files.
Added ExtendedDemoApplication.java to .\/spikes\ repository source files.
Added SimpleDemoActivity.java to .\/spikes\ repository source files.
Added SimpleDemoApplication.java to .\/spikes\ repository source files.
Added Binder.java to .\/spikes\ repository source files.
Added ConnectedClient.java to .\/spikes\ repository source files.
Added Connection.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnection.java to .\/spikes\ repository source files.
Added ServiceConnectionCallback.java to .\/spikes\ repository source files.
Added EasyCustomTabs.java to .\/spikes\ repository source files.
Added ActionButtonComposer.java to .\/spikes\ repository source files.
Added CloseButtonIconComposer.java to .\/spikes\ repository source files.
Added Composer.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilder.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigator.java to .\/spikes\ repository source files.
Added EasyCustomTabsWebNavigator.java to .\/spikes\ repository source files.
Added ExitAnimationsComposer.java to .\/spikes\ repository source files.
Added IntentCustomizer.java to .\/spikes\ repository source files.
Added MenuItemComposer.java to .\/spikes\ repository source files.
Added NavigationFallback.java to .\/spikes\ repository source files.
Added Navigator.java to .\/spikes\ repository source files.
Added ShowTitleComposer.java to .\/spikes\ repository source files.
Added StartAnimationsComposer.java to .\/spikes\ repository source files.
Added ToolbarColorComposer.java to .\/spikes\ repository source files.
Added UrlBarHidingComposer.java to .\/spikes\ repository source files.
Added WebNavigator.java to .\/spikes\ repository source files.
Added AvailableAppProvider.java to .\/spikes\ repository source files.
Added BestPackageFinder.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProvider.java to .\/spikes\ repository source files.
Added BinderTest.java to .\/spikes\ repository source files.
Added ConnectedClientTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnectionTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigatorTest.java to .\/spikes\ repository source files.
Added BestPackageFinderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProviderTest.java to .\/spikes\ repository source files.
Added ApiPagedChannelHistory.java to .\/spikes\ repository source files.
Added ApiPagedResponse.java to .\/spikes\ repository source files.
Added ChannelHistory.java to .\/spikes\ repository source files.
Added HistoryConverter.java to .\/spikes\ repository source files.
Added Runner.java to .\/spikes\ repository source files.
Added SlackHistoryFetcher.java to .\/spikes\ repository source files.
Added SlackWebService.java to .\/spikes\ repository source files.
Added ApiPagedResponseTest.java to .\/spikes\ repository source files.
Added MainActivityTest.java to .\/spikes\ repository source files.
Added LoremAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added BetterAccountManager.java to .\/spikes\ repository source files.
Added BetterAuthenticator.java to .\/spikes\ repository source files.
Added BetterAuthenticatorActivity.java to .\/spikes\ repository source files.
Added GertHerbAuthenticator.java to .\/spikes\ repository source files.
Added GertHerbAuthenticatorService.java to .\/spikes\ repository source files.
Added NoAccountException.java to .\/spikes\ repository source files.
Added ReactiveAuthenticatorActivity.java to .\/spikes\ repository source files.
Added Token.java to .\/spikes\ repository source files.
Added GertHerbActivity.java to .\/spikes\ repository source files.
Added GertHerbApplication.java to .\/spikes\ repository source files.
Added GertHerbAuthenticationActivity.java to .\/spikes\ repository source files.
Added TypefaceFactory.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added ViewServer.java to .\/spikes\ repository source files.
Added ViewServerManager.java to .\/spikes\ repository source files.
Added DeveloperError.java to .\/spikes\ repository source files.
Added HomeActivity.java to .\/spikes\ repository source files.
Added LoginActivity.java to .\/spikes\ repository source files.
Added LoginView.java to .\/spikes\ repository source files.
Added UserCredentials.java to .\/spikes\ repository source files.
Added FontButton.java to .\/spikes\ repository source files.
Added FontEditText.java to .\/spikes\ repository source files.
Added FontTextView.java to .\/spikes\ repository source files.
Added GithubApi.java to .\/spikes\ repository source files.
Added GithubApiFactory.java to .\/spikes\ repository source files.
Added TokenRequest.java to .\/spikes\ repository source files.
Added TokenResponse.java to .\/spikes\ repository source files.
Added Dummy.java to .\/spikes\ repository source files.
Added DummyTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MainFragment.java to .\/spikes\ repository source files.
Added Attributes.java to .\/spikes\ repository source files.
Added Coordinates.java to .\/spikes\ repository source files.
Added IndicatorCoordinatesCalculator.java to .\/spikes\ repository source files.
Added LandingStrip.java to .\/spikes\ repository source files.
Added MutableCoordinates.java to .\/spikes\ repository source files.
Added OnPagerAdapterChangedListener.java to .\/spikes\ repository source files.
Added PagerAdapterObserver.java to .\/spikes\ repository source files.
Added Scrollable.java to .\/spikes\ repository source files.
Added ScrollingPageChangeListener.java to .\/spikes\ repository source files.
Added State.java to .\/spikes\ repository source files.
Added TabsContainer.java to .\/spikes\ repository source files.
Added CustomLandingStrip.java to .\/spikes\ repository source files.
Added CustomTabActivity.java to .\/spikes\ repository source files.
Added ExampleRainbowLandingStrip.java to .\/spikes\ repository source files.
Added FixedWidthTabActivity.java to .\/spikes\ repository source files.
Added NoFragmentsSimpleTextTabActivity.java to .\/spikes\ repository source files.
Added Data.java to .\/spikes\ repository source files.
Added DemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added SmallDemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerFragment.java to .\/spikes\ repository source files.
Added DemoViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapterState.java to .\/spikes\ repository source files.
Added SimpleTextTabActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AbTestingParamsLoadedCallback.java to .\/spikes\ repository source files.
Added AyBe.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added WeakStartCallback.java to .\/spikes\ repository source files.
Added LeakActivity.java to .\/spikes\ repository source files.
Added NoLeakActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added Bar.java to .\/spikes\ repository source files.
Added Foo.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added FooTest.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added ColorScheme.java to .\/spikes\ repository source files.
Added ColorUtils.java to .\/spikes\ repository source files.
Added DominantColorCalculator.java to .\/spikes\ repository source files.
Added FloatUtils.java to .\/spikes\ repository source files.
Added MedianCutQuantizer.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added PayPalFragment.java to .\/spikes\ repository source files.
Added PayPalHelper.java to .\/spikes\ repository source files.
Added MaxLengthMessageComposer.java to .\/spikes\ repository source files.
Added MessageComposer.java to .\/spikes\ repository source files.
Added TwitterMessageComposer.java to .\/spikes\ repository source files.
Added DisabledMruPersister.java to .\/spikes\ repository source files.
Added MruPersister.java to .\/spikes\ repository source files.
Added SharedPreferencesMruPersister.java to .\/spikes\ repository source files.
Added OnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added PriorityShareDialog.java to .\/spikes\ repository source files.
Added PrioritySharer.java to .\/spikes\ repository source files.
Added ShareTargetsAdapter.java to .\/spikes\ repository source files.
Added SimpleOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added TargetApps.java to .\/spikes\ repository source files.
Added TwitterOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AdvancedActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SimpleActivity.java to .\/spikes\ repository source files.
Added LockingActivity.java to .\/spikes\ repository source files.
Added PostLockingActivity.java to .\/spikes\ repository source files.
Added PreLockingActivity.java to .\/spikes\ repository source files.
Added DummyAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added NovoStaggeredGridView.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SpikeApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SwipeableView.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MyClass.java to .\/spikes\ repository source files.
Added MyClassTest.java to .\/spikes\ repository source files.
Added MyAndroidClassTest.java to .\/spikes\ repository source files.
Added RobolectricGradleTestRunner.java to .\/spikes\ repository source files.
Added Mapper.java to .\/spikes\ repository source files.
Added Query.java to .\/spikes\ repository source files.
Added TypedResolver.java to .\/spikes\ repository source files.
Added CursorList.java to .\/spikes\ repository source files.
Added CursorListIterator.java to .\/spikes\ repository source files.
Added CursorMarshaller.java to .\/spikes\ repository source files.
Added EmptyListIterator.java to .\/spikes\ repository source files.
Added ReflectionCursorMarshaller.java to .\/spikes\ repository source files.
Added RichClass.java to .\/spikes\ repository source files.
Added Setter.java to .\/spikes\ repository source files.
Added Function.java to .\/spikes\ repository source files.
Added TypedElementLoader.java to .\/spikes\ repository source files.
Added TypedLoader.java to .\/spikes\ repository source files.
Added Marshaller.java to .\/spikes\ repository source files.
Added ObjectMapper.java to .\/spikes\ repository source files.
Added TypedActivity.java to .\/spikes\ repository source files.
Added StringUtil.java to .\/spikes\ repository source files.
Added MyObject.java to .\/spikes\ repository source files.
Added MediaPlayerSwitcherActivity.java to .\/spikes\ repository source files.
Added VideoPlayerService.java to .\/spikes\ repository source files.
Added RelativeLayoutWithForeground.java to .\/spikes\ repository source files.
Added DemoActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added RecognitionService.java to .\/spikes\ repository source files.
Added SessionService.java to .\/spikes\ repository source files.
Added SettingsActivity.java to .\/spikes\ repository source files.
Added SmartContextInteractionService.java to .\/spikes\ repository source files.
AccessibilityManager accessibilityManager = (AccessibilityManager) context.getSystemService(Context.ACCESSIBILITY_SERVICE);
enabledServices=getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN)
List<AccessibilityServiceInfo> enabledServices = getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN);
List<AccessibilityServiceInfo> enabledServices = getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN);
Action otherAction = (Action) o;
int result = id;
Actions otherActions = (Actions) o;
label=resources.getString(action.getLabel())
String label = resources.getString(action.getLabel());
action=actions.findActionById(actionId)
Action action = actions.findActionById(actionId);
action=actions.getAction(which)
Action action = actions.getAction(which);
CharSequence[] itemLabels = new CharSequence[actions.getCount()];
View view = convertView;
demo=getItem(position)
Demo demo = getItem(position);
Intent intent = new Intent(context, demo.activityClass);
layoutInflater=LayoutInflater.from(parent.getContext())
LayoutInflater layoutInflater = LayoutInflater.from(parent.getContext());
TweetView tweetView = (TweetView) findViewById(R.id.tweet);
actions=createActions(tweet,listener)
final Actions actions = createActions(tweet, listener);
ListView listView = ((ListView) findViewById(R.id.list));
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
final DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close) {

            @Override
            public void onDrawerClosed(View drawerView) {
                super.onDrawerClosed(drawerView);
                // waiting for the drawer to close, then navigating seems to cause issue.
                // why wait for the drawer to close? jankiness.
                if (pendingNavigationClick != null) {
                    startActivity(pendingNavigationClick);
                    pendingNavigationClick = null;
                }
            }

        };
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close);
Intent intent;
b=getIntent().getExtras()
Bundle b = getIntent().getExtras();
mShouldStartPlayback=b.getBoolean("shouldStart")
boolean mShouldStartPlayback = b.getBoolean("shouldStart");
startPosition=b.getInt("startPosition",0)
int startPosition = b.getInt("startPosition", 0);
currentPos=mVideoView.getCurrentPosition()
int currentPos = mVideoView.getCurrentPosition();
String msg;
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, mDisplaySize.y + getActionBar().getHeight());
mm=mSelectedMedia.getMetadata()
MediaMetadata mm = mSelectedMedia.getMetadata();
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, (int) (mDisplaySize.x * ASPECT_RATIO));
WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
width=display.getWidth()
int width = display.getWidth();
height=display.getHeight()
int height = display.getHeight();
int resourceId = 0;
String videoUrl = "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4#sthash.rJ5rPZy8.dpuf";
String title = "Jahre Philharmonie";
String description = "Awesome film you must watch!";
String author = "Blundell";
String thumbUrl = "http://www.ustream.tv/blog/wp-content/uploads/2013/10/simply-go-live.png";
MediaMetadata metadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE);
mediaInfo=new MediaInfo.Builder(videoUrl).setMetadata(metadata).setStreamType(MediaInfo.STREAM_TYPE_BUFFERED).setContentType("video/mp4").build()
MediaInfo mediaInfo = new MediaInfo.Builder(videoUrl)
                        .setMetadata(metadata)
                        .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)
                        .setContentType("video/mp4")
                        .build();
Intent intent = new Intent(MainActivity.this, LocalPlayerActivity.class);
preferences=getPreferences(MODE_PRIVATE)
SharedPreferences preferences = getPreferences(MODE_PRIVATE);
defaultSmsPackage=Telephony.Sms.getDefaultSmsPackage(this)
String defaultSmsPackage = Telephony.Sms.getDefaultSmsPackage(this);
Intent intent = new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
availableAppProvider=EasyCustomTabs.getInstance()
AvailableAppProvider availableAppProvider = EasyCustomTabs.getInstance();
ConnectedClient connectedClient = new ConnectedClient(client);
binder=Binder.newInstance()
Binder binder = Binder.newInstance();
List<Composer> composerList = new ArrayList<>();
customTabsSession=connection.newSession()
CustomTabsSession customTabsSession = connection.newSession();
CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(customTabsSession);
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
context=EasyCustomTabs.getInstance().getContext()
Context context = EasyCustomTabs.getInstance().getContext();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
packagesSupportingCustomTabs=getPackagesSupportingCustomTabs()
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
defaultPackage=getDefaultPackage()
String defaultPackage = getDefaultPackage();
defaultActivityInfo=packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK,0)
ResolveInfo defaultActivityInfo = packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK, 0);
String packageName = defaultActivityInfo.activityInfo.packageName;
resolvedInfoList=packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK,0)
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<String> packagesSupportingCustomTabs = new ArrayList<>();
Intent serviceIntent = new Intent();
bestPackageFinder=BestPackageFinder.newInstance()
BestPackageFinder bestPackageFinder = BestPackageFinder.newInstance();
packageName=bestPackageFinder.findBestPackage()
String packageName = bestPackageFinder.findBestPackage();
resolveInfo=createResolveInfoFor(packageName)
ResolveInfo resolveInfo = createResolveInfoFor(packageName);
ResolveInfo resolveInfo = new ResolveInfo();
List<ResolveInfo> resolveInfoList = new ArrayList<>();
defaultPackageResolveInfo=createResolveInfoFor(packageName)
ResolveInfo defaultPackageResolveInfo = createResolveInfoFor(packageName);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
oldestApiMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage oldestApiMessage = apiMessages.get(apiMessages.size() - 1);
String lastResponseEpochTime = oldestApiMessage.timeStamp;
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
latestMessage=latestMessages.get(latestMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage latestMessage = latestMessages.get(latestMessages.size() - 1);
latestMessageDateTime=convertToLocalDateTime(latestMessage.timeStamp)
LocalDateTime latestMessageDateTime = convertToLocalDateTime(latestMessage.timeStamp);
List<ChannelHistory.Message> messages = new ArrayList<>();
historyFrom=getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1))
LocalDateTime historyFrom = getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1));
historyTo=getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0))
LocalDateTime historyTo = getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0));
String text = apiMessage.text;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
lastMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage lastMessage = apiMessages.get(apiMessages.size() - 1);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
firstMessage=apiMessages.get(0)
ApiPagedChannelHistory.ApiMessage firstMessage = apiMessages.get(0);
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
String slackToken = args[0];
retrofit=new Retrofit.Builder().baseUrl("https://slack.com/api/").addConverterFactory(GsonConverterFactory.create()).build()
Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://slack.com/api/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();
slackWebService=retrofit.create(SlackWebService.class)
SlackWebService slackWebService = retrofit.create(SlackWebService.class);
slackHistoryFetcher=SlackHistoryFetcher.from(slackWebService,slackToken)
SlackHistoryFetcher slackHistoryFetcher = SlackHistoryFetcher.from(slackWebService, slackToken);
start=LocalDateTime.now()
LocalDateTime start = LocalDateTime.now();
end=LocalDateTime.now().minusDays(7)
LocalDateTime end = LocalDateTime.now().minusDays(7);
channelHistory=slackHistoryFetcher.getChannelHistory(start,end)
ChannelHistory channelHistory = slackHistoryFetcher.getChannelHistory(start, end);
HistoryConverter historyConverter = new HistoryConverter();
ApiPagedResponse apiPagedResponse = new ApiPagedResponse(start);
response=fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime())
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
apiPagedChannelHistory=response.body()
ApiPagedChannelHistory apiPagedChannelHistory = response.body();
channelHistory=slackWebService.getChannelHistory(slackToken,channel,lastResponseEpochTime,NUMBER_OF_RESULTS)
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
ApiPagedChannelHistory apiPagedChannelHistory = new ApiPagedChannelHistory();
ApiPagedChannelHistory.ApiMessage apiMessage = new ApiPagedChannelHistory.ApiMessage();
final TextView textView = new TextView(context);
emptyView=findViewById(R.id.empty_view)
View emptyView = findViewById(R.id.empty_view);
final Integer action = values[0];
LoremAdapter loremAdapter = new LoremAdapter();
accounts=accountManager.getAccountsByType(accountType)
Account[] accounts = accountManager.getAccountsByType(accountType);
Bundle result;
Bundle result;
Bundle result = new Bundle();
activity=createLoginIntent(context,accountType,authTokenType,requiredFeatures,options)
Intent activity = createLoginIntent(context, accountType, authTokenType, requiredFeatures, options);
Bundle bundle = new Bundle();
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
accounts=accountManager.getAccountsByType(authTokenType)
Account[] accounts = accountManager.getAccountsByType(authTokenType);
bundle=createResponseBundle(token)
Bundle bundle = createResponseBundle(token);
accountManager=AccountManager.get(this.getApplicationContext())
AccountManager accountManager = AccountManager.get(this.getApplicationContext());
Account account = new Account(token.getUserName(), getAccountName());
Bundle bundle = new Bundle();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
GertHerbAuthenticator authenticator = new GertHerbAuthenticator(this);
fontId=getFontId(context,attrs)
int fontId = getFontId(context, attrs);
fontType=getFontType(fontId)
FontType fontType = getFontType(fontId);
typedArray=context.obtainStyledAttributes(attrs,R.styleable.CustomTextAppearance)
TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CustomTextAppearance);
typeface=createTypeFace(context,fontType)
Typeface typeface = createTypeFace(context, fontType);
info=context.getApplicationInfo()
ApplicationInfo info = context.getApplicationInfo();
name=activity.getTitle().toString()
String name = activity.getTitle().toString();
client=mServer.accept()
Socket client = mServer.accept();
boolean result;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
BufferedReader in = null;
request=in.readLine()
final String request = in.readLine();
String command;
String parameters;
index=request.indexOf(' ')
int index = request.indexOf(' ');
boolean result;
boolean success = true;
BufferedWriter out = null;
index=parameters.indexOf(' ')
int index = parameters.indexOf(' ');
code=parameters.substring(0,index)
final String code = parameters.substring(0, index);
int hashCode = (int) Long.parseLong(code, 16);
window=findWindow(hashCode)
final View window = findWindow(hashCode);
dispatch=ViewDebug.class.getDeclaredMethod("dispatchCommand",View.class,String.class,String.class,OutputStream.class)
final Method dispatch = ViewDebug.class.getDeclaredMethod("dispatchCommand",
                        View.class, String.class, String.class, OutputStream.class);
View window = null;
boolean result = true;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
boolean result = true;
String focusName = null;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
View focusedWindow = null;
BufferedWriter out = null;
boolean needWindowListUpdate = false;
boolean needFocusedWindowUpdate = false;
BetterAccountManager accountManager = new BetterAccountManager(this, getString(R.string.account_type), getString(R.string.token_type), null);
loginView=Views.findById(this,R.id.login_view)
LoginView loginView = Views.findById(this, R.id.login_view);
authorizationApi=new GithubApiFactory().createAuthorizationApi(credentials.username,credentials.password)
GithubApi authorizationApi = new GithubApiFactory().createAuthorizationApi(credentials.username, credentials.password);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
Endpoint endpoint = new Endpoint() {
            @Override
            public String getUrl() {
                return GITHUB_API_URL;
            }

            @Override
            public String getName() {
                return "Live";
            }
        };
interceptor=createAuthorizationRequestInterceptor(username,password)
RequestInterceptor interceptor = createAuthorizationRequestInterceptor(username, password);
restAdapter=createRestAdapter(endpoint,interceptor)
RestAdapter restAdapter = createRestAdapter(endpoint, interceptor);
Dummy dummy = new Dummy();
result=dummy.explodes()
boolean result = dummy.explodes();
String base64EncodedPublicKey = "CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE";
premiumPurchase=inventory.getPurchase(SKU_PREMIUM)
Purchase premiumPurchase = inventory.getPurchase(SKU_PREMIUM);
infiniteGasPurchase=inventory.getPurchase(SKU_INFINITE_GAS)
Purchase infiniteGasPurchase = inventory.getPurchase(SKU_INFINITE_GAS);
gasPurchase=inventory.getPurchase(SKU_GAS)
Purchase gasPurchase = inventory.getPurchase(SKU_GAS);
String payload = "";
String payload = "";
String payload = "";
payload=p.getDeveloperPayload()
String payload = p.getDeveloperPayload();
int index = mTank >= TANK_RES_IDS.length ? TANK_RES_IDS.length - 1 : mTank;
AlertDialog.Builder bld = new AlertDialog.Builder(this);
spe=getPreferences(MODE_PRIVATE).edit()
SharedPreferences.Editor spe = getPreferences(MODE_PRIVATE).edit();
sp=getPreferences(MODE_PRIVATE)
SharedPreferences sp = getPreferences(MODE_PRIVATE);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                                  + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                    | ((source[d + 1 + off] << 24) >>> 16)
                    | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                    | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                                   "-1002:Bad response received/" +
                                   "-1003:Purchase signature verification failed/" +
                                   "-1004:Send intent failed/" +
                                   "-1005:User cancelled/" +
                                   "-1006:Unknown purchase response/" +
                                   "-1007:Missing token/" +
                                   "-1008:Unknown error/" +
                                   "-1009:Subscriptions not available/" +
                                   "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(),
                    itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                        | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                        | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                            | ((source[d + 1 + off] << 24) >>> 16)
                            | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                            | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                "-1002:Bad response received/" +
                "-1003:Purchase signature verification failed/" +
                "-1004:Send intent failed/" +
                "-1005:User cancelled/" +
                "-1006:Unknown purchase response/" +
                "-1007:Missing token/" +
                "-1008:Unknown error/" +
                "-1009:Subscriptions not available/" +
                "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(), itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
responseCode=result.getResponse()
int responseCode = result.getResponse();
sku=purchase.getSku()
String sku = purchase.getSku();
skuDetails=inv.getSkuDetails(sku)
SkuDetails skuDetails = inv.getSkuDetails(sku);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
Button purchaseFiveButton = (Button) rootView.findViewById(R.id.fragment_main_button_purchase_five_coins);
xml=context.obtainStyledAttributes(attrs,R.styleable.LandingStrip)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.LandingStrip);
tabLayoutId=xml.getResourceId(R.styleable.LandingStrip_tabLayoutId,MISSING_TAB_LAYOUT_ID)
int tabLayoutId = xml.getResourceId(R.styleable.LandingStrip_tabLayoutId, MISSING_TAB_LAYOUT_ID);
indicatorColour=xml.getResourceId(R.styleable.LandingStrip_indicatorColor,DEFAULT_INDICATOR_COLOUR)
int indicatorColour = xml.getResourceId(R.styleable.LandingStrip_indicatorColor, DEFAULT_INDICATOR_COLOUR);
indicatorHeight=getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight,DEFAULT_INDICATOR_HEIGHT,xml)
int indicatorHeight = getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight, DEFAULT_INDICATOR_HEIGHT, xml);
tabsPaddingLeft=getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingLeft = getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding, DEFAULT_TABS_PADDING, xml);
tabsPaddingRight=getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingRight = getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding, DEFAULT_TABS_PADDING, xml);
MutableCoordinates drawCurrentTabCoordinates = new MutableCoordinates();
MutableCoordinates drawNextTabCoordinates = new MutableCoordinates();
MutableCoordinates drawMovingIndicatorCoordinates = new MutableCoordinates();
currentTab=tabsContainer.getTabAt(currentPosition)
View currentTab = tabsContainer.getTabAt(currentPosition);
currentTabStart=currentTab.getLeft()
float currentTabStart = currentTab.getLeft();
currentTabEnd=currentTab.getRight()
float currentTabEnd = currentTab.getRight();
nextTab=tabsContainer.getTabAt(currentPosition + 1)
View nextTab = tabsContainer.getTabAt(currentPosition + 1);
nextTabPositionOffset=getFractionFrom(pagePositionOffset)
float nextTabPositionOffset = getFractionFrom(pagePositionOffset);
indicatorStart=getIndicatorPosition(nextTab.getStart(),pagePositionOffset,currentTab.getStart(),nextTabPositionOffset)
float indicatorStart = getIndicatorPosition(nextTab.getStart(), pagePositionOffset, currentTab.getStart(), nextTabPositionOffset);
indicatorEnd=getIndicatorPosition(nextTab.getEnd(),pagePositionOffset,currentTab.getEnd(),nextTabPositionOffset)
float indicatorEnd = getIndicatorPosition(nextTab.getEnd(), pagePositionOffset, currentTab.getEnd(), nextTabPositionOffset);
height=getHeight()
int height = getHeight();
tabCount=pagerAdapter.getCount()
int tabCount = pagerAdapter.getCount();
title=pagerAdapter.getPageTitle(position)
CharSequence title = pagerAdapter.getPageTitle(position);
inflatedTabView=tabsContainer.inflateTab(layoutInflater,attributes.getTabLayoutId())
View inflatedTabView = tabsContainer.inflateTab(layoutInflater, attributes.getTabLayoutId());
int position = (int) view.getTag(TAG_KEY_POSITION);
scrollOffset=getHorizontalScrollOffset(position,positionOffset)
int scrollOffset = getHorizontalScrollOffset(position, positionOffset);
newScrollX=calculateScrollOffset(position,scrollOffset,positionOffset)
float newScrollX = calculateScrollOffset(position, scrollOffset, positionOffset);
tabWidth=tabsContainer.getTabAt(position).getWidth()
int tabWidth = tabsContainer.getTabAt(position).getWidth();
tabForPosition=tabsContainer.getTabAt(position)
View tabForPosition = tabsContainer.getTabAt(position);
float tabStartX = tabForPosition.getLeft() + scrollOffset;
int viewMiddleOffset = getTabParentWidth() / 2;
float tabCenterOffset = (tabForPosition.getRight() - tabForPosition.getLeft()) * 0.5F;
nextTabDelta=getNextTabDelta(position,pagerOffset,tabForPosition)
float nextTabDelta = getNextTabDelta(position, pagerOffset, tabForPosition);
LinearLayout tabsContainerView = new LinearLayout(context);
tab=getTabAt(index)
View tab = getTabAt(index);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
position=indicatorCoordinates.getStart()
float position = indicatorCoordinates.getStart();
lastTabOffset=((ViewGroup)getChildAt(0)).getChildAt(getChildCount() - 1).getWidth()
float lastTabOffset = ((ViewGroup) getChildAt(0)).getChildAt(getChildCount() - 1).getWidth();
frequency=getOneCycle(lastTabOffset)
float frequency = getOneCycle(lastTabOffset);
r=toHex(calculateColour(position,frequency,PHASE_RED,AMPLITUDE,CENTER_FREQUENCY))
String r = toHex(calculateColour(position, frequency, PHASE_RED, AMPLITUDE, CENTER_FREQUENCY));
g=toHex(calculateColour(position,frequency,PHASE_GREEN,AMPLITUDE,CENTER_FREQUENCY))
String g = toHex(calculateColour(position, frequency, PHASE_GREEN, AMPLITUDE, CENTER_FREQUENCY));
b=toHex(calculateColour(position,frequency,PHASE_BLUE,AMPLITUDE,CENTER_FREQUENCY))
String b = toHex(calculateColour(position, frequency, PHASE_BLUE, AMPLITUDE, CENTER_FREQUENCY));
height=getHeight()
int height = getHeight();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPagerFragment viewPagerFragment = new ViewPagerFragment();
Bundle bundle = new Bundle();
TextView view = (TextView) layoutInflater.inflate(R.layout.view_demo, container, false);
currentPosition=viewPagerAdapterState.getCurrentPosition()
int currentPosition = viewPagerAdapterState.getCurrentPosition();
view=getView(container,position)
View view = getView(container, position);
parcelableSparseArray=viewPagerAdapterState.get(position)
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
View view = (View) object;
SparseArray<Parcelable> viewState = new SparseArray<>();
position=entry.getValue()
int position = entry.getValue();
view=entry.getKey()
View view = entry.getKey();
bundle=in.readBundle()
Bundle bundle = in.readBundle();
Map<Integer, SparseArray<Parcelable>> viewStates = new HashMap<>(bundle.keySet().size());
sparseParcelableArray=bundle.getSparseParcelableArray(key)
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
primaryItemPosition=in.readInt()
int primaryItemPosition = in.readInt();
Bundle bundle = new Bundle();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
final TextView abText = (TextView) findViewById(R.id.ab_text);
final AyBe ayBe = new AyBe();
id=item.getItemId()
int id = item.getItemId();
callback=weakCallback.get()
AbTestingParamsLoadedCallback callback = weakCallback.get();
WeakReference<NoLeakActivity> weakNoLeakActivity = new WeakReference<NoLeakActivity>(noLeakActivity);
noLeakActivity=weakNoLeakActivity.get()
NoLeakActivity noLeakActivity = weakNoLeakActivity.get();
RecyclerView recyclerView = (RecyclerView) layoutInflater.inflate(R.layout.view_page, viewGroup, false);
itemView=layoutInflater.inflate(R.layout.view_item,parent,false)
View itemView = layoutInflater.inflate(R.layout.view_item, parent, false);
actual=foo.twice(HALF)
int actual = foo.twice(HALF);
int expected = WHOLE;
final float inverseRatio = 1f - ratio;
float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRatio);
float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRatio);
float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRatio);
hsv=node.getHsv()
float[] hsv = node.getHsv();
width=bitmap.getWidth()
final int width = bitmap.getWidth();
height=bitmap.getHeight()
final int height = bitmap.getHeight();
final int[] rgbPixels = new int[width * height];
final MedianCutQuantizer mcq = new MedianCutQuantizer(rgbPixels, NUM_COLORS);
primaryAccentColor=findPrimaryAccentColor()
final ColorNode primaryAccentColor = findPrimaryAccentColor();
secondaryAccentColor=findSecondaryAccentColor(primaryAccentColor)
final ColorNode secondaryAccentColor = findSecondaryAccentColor(primaryAccentColor);
tertiaryAccentColor=findTertiaryAccentColor(primaryAccentColor,secondaryAccentColor)
final int tertiaryAccentColor = findTertiaryAccentColor(
                primaryAccentColor, secondaryAccentColor);
primaryTextColor=findPrimaryTextColor(primaryAccentColor)
final int primaryTextColor = findPrimaryTextColor(primaryAccentColor);
secondaryTextColor=findSecondaryTextColor(primaryAccentColor)
final int secondaryTextColor = findSecondaryTextColor(primaryAccentColor);
final float primaryHue = primary.getHsv()[0];
final float candidateHue = candidate.getHsv()[0];
copy=Arrays.copyOf(palette,palette.length)
final MedianCutQuantizer.ColorNode[] copy = Arrays.copyOf(palette, palette.length);
maxCount=palette[0].getCount()
final float maxCount = palette[0].getCount();
lhsWeight=calculateWeight(lhs,maxCount)
final float lhsWeight = calculateWeight(lhs, maxCount);
rhsWeight=calculateWeight(rhs,maxCount)
final float rhsWeight = calculateWeight(rhs, maxCount);
float sum = 0;
float sumWeight = 0;
float value = values[i];
float weight = values[i + 1];
ColorHistogram colorHist = new ColorHistogram(pixels);
K=colorHist.getNumberOfColors()
int K = colorHist.getNumberOfColors();
ColorNode[] rCols = null;
rgb=colorHist.getColor(i)
int rgb = colorHist.getColor(i);
cnt=colorHist.getCount(i)
int cnt = colorHist.getCount(i);
ColorBox initialBox = new ColorBox(0, K - 1, 0);
List<ColorBox> colorSet = new ArrayList<ColorBox>();
int k = 1;
boolean done = false;
nextBox=findBoxToSplit(colorSet)
ColorBox nextBox = findBoxToSplit(colorSet);
newBox=nextBox.splitBox()
ColorBox newBox = nextBox.splitBox();
color=findClosestColor(pixels[i])
ColorNode color = findClosestColor(pixels[i]);
idx=findClosestColorIndex(rgb)
int idx = findClosestColorIndex(rgb);
red=Color.red(rgb)
int red = Color.red(rgb);
grn=Color.green(rgb)
int grn = Color.green(rgb);
blu=Color.blue(rgb)
int blu = Color.blue(rgb);
int minIdx = 0;
int minDistance = Integer.MAX_VALUE;
ColorNode color = quantColors[i];
d2=color.distance2(red,grn,blu)
int d2 = color.distance2(red, grn, blu);
ColorBox boxToSplit = null;
int minLevel = Integer.MAX_VALUE;
n=colorBoxes.size()
int n = colorBoxes.size();
ColorNode[] avgColors = new ColorNode[n];
int i = 0;
int dr = this.red - red;
int dg = this.grn - grn;
int db = this.blu - blu;
ColorNode color = imageColors[i];
int r = color.red;
int g = color.grn;
int b = color.blu;
dim=getLongestColorDimension()
ColorDimension dim = getLongestColorDimension();
med=findMedian(dim)
int med = findMedian(dim);
int nextLevel = level + 1;
ColorBox newBox = new ColorBox(med + 1, upper, nextLevel);
int rLength = rmax - rmin;
int gLength = gmax - gmin;
int bLength = bmax - bmin;
int half = count / 2;
int nPixels, median;
int rSum = 0;
int gSum = 0;
int bSum = 0;
int n = 0;
ColorNode ci = imageColors[i];
int cnt = ci.cnt;
double nd = n;
int avgRed = (int) (0.5 + rSum / nd);
int avgGrn = (int) (0.5 + gSum / nd);
int avgBlu = (int) (0.5 + bSum / nd);
s=this.getClass().getSimpleName()
String s = this.getClass().getSimpleName();
int i = 0;
int N = pixelsOrig.length;
int[] pixelsCpy = new int[N];
int k = -1;
int curColor = -1;
int nColors = k + 1;
id=item.getItemId()
int id = item.getItemId();
Intent intent = new Intent();
bitmap=((BitmapDrawable)imageView.getDrawable()).getBitmap()
Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap();
DominantColorCalculator dominantColorCalculator = new DominantColorCalculator(bitmap);
selectedImageUri=data.getData()
Uri selectedImageUri = data.getData();
selectedImagePath=getPath(selectedImageUri)
String selectedImagePath = getPath(selectedImageUri);
String[] projection = {MediaStore.Images.Media.DATA};
cursor=managedQuery(uri,projection,null,null,null)
Cursor cursor = managedQuery(uri, projection, null, null, null);
column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)
int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
LinearLayout rootView = (LinearLayout) inflater.inflate(R.layout.fragment_main, container, false);
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
preapprovalButton=payPal.getCheckoutButton(getActivity(),PayPal.BUTTON_194x37,CheckoutButton.TEXT_PAY)
CheckoutButton preapprovalButton = payPal.getCheckoutButton(getActivity(), PayPal.BUTTON_194x37, CheckoutButton.TEXT_PAY);
preapprovalIntent=payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY)
Intent preapprovalIntent = payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY);
String resultTitle = "";
String resultInfo = "";
String resultExtra = "";
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
PayPalPreapproval preapproval = new PayPalPreapproval();
preapproval=createPreapproval(preapprovalKey)
PayPalPreapproval preapproval = createPreapproval(preapprovalKey);
Bundle bundle = new Bundle();
int availableLength = maxLength;
StringBuilder stringBuilder = new StringBuilder(maxLength);
prefixAndSuffixLength=computeAppendedLengthIncludingSeparatorSpaces(prefix,suffix)
int prefixAndSuffixLength = computeAppendedLengthIncludingSeparatorSpaces(prefix, suffix);
urlLength=computeUrlLengthIncludingSeparatorSpace(url)
int urlLength = computeUrlLengthIncludingSeparatorSpace(url);
trimmedSubject=ellipsizeTextIfExceedsMaxLength(subject,availableLength)
String trimmedSubject = ellipsizeTextIfExceedsMaxLength(subject, availableLength);
int length = 0;
preferences=context.getSharedPreferences(MRU_PREFERENCES,Context.MODE_PRIVATE)
SharedPreferences preferences = context.getSharedPreferences(MRU_PREFERENCES, Context.MODE_PRIVATE);
args=getArguments()
Bundle args = getArguments();
themeResId=getThemeResIdIfProvidedIn(args)
int themeResId = getThemeResIdIfProvidedIn(args);
title=getTitleIfProvidedIn(args)
CharSequence title = getTitleIfProvidedIn(args);
builder=createDialogBuilder(themeResId).setCancelable(true).setView(dialogView)
AlertDialog.Builder builder = createDialogBuilder(themeResId)
                .setCancelable(true)
                .setView(dialogView);
inflater=getActivity().getLayoutInflater()
LayoutInflater inflater = getActivity().getLayoutInflater();
GridView gridView = (GridView) rootView.findViewById(R.id.ps__dialog_grid);
targetApps=extractTargetAppsFrom(args)
TargetApps targetApps = extractTargetAppsFrom(args);
allShareTargets=getAvailableShareTargets(sharingIntent)
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
priorityAppInfos=createPriorityResolveInfoList(targetApps,allShareTargets)
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
otherAppInfos=createOtherAppsResolveInfoList(priorityAppInfos,allShareTargets)
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
resolveInfos=targetApps.extractTargetResolveInfosFrom(allShareTargets)
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
mruResolveInfo=findMruResolveInfoIn(allShareTargets)
ResolveInfo mruResolveInfo = findMruResolveInfoIn(allShareTargets);
List<ResolveInfo> otherAppsInfos = new ArrayList<ResolveInfo>(allAppInfos);
mruPackageName=persister.getLastUsedTarget()
String mruPackageName = persister.getLastUsedTarget();
String packageName = resolveInfo.activityInfo.packageName;
packageManager=getActivity().getPackageManager()
PackageManager packageManager = getActivity().getPackageManager();
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
View buttonStrip = (View) showMoreButton.getParent();
gridView=getGridView()
GridView gridView = getGridView();
intent=wrapIntentWithExplicitTargetComponentForItem(position,sharingIntent)
Intent intent = wrapIntentWithExplicitTargetComponentForItem(position, sharingIntent);
Intent intent = new Intent(sharingIntent);
ActivityInfo activity = adapter.getItem(position).activityInfo;
ComponentName name = new ComponentName(activity.applicationInfo.packageName, activity.name);
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
PriorityShareDialog dialog = new PriorityShareDialog();
Bundle args = new Bundle();
sharingIntent=createSharingIntent()
Intent sharingIntent = createSharingIntent();
fragmentManager=activity.getFragmentManager()
FragmentManager fragmentManager = activity.getFragmentManager();
Intent intent = new Intent(Intent.ACTION_SEND);
dialog=new PriorityShareDialog.Builder().setTitle(title).setTargetApps(targetApps).setSharingIntent(sharingIntent).setOnPrepareSharingIntentListener(listener).setShowMostRecentlyUsed(showMostRecentlyUsed).build()
PriorityShareDialog dialog = new PriorityShareDialog.Builder()
                .setTitle(title)
                .setTargetApps(targetApps)
                .setSharingIntent(sharingIntent)
                .setOnPrepareSharingIntentListener(listener)
                .setShowMostRecentlyUsed(showMostRecentlyUsed)
                .build();
PrioritySharer prioritySharer = new PrioritySharer();
prioritySharer=build()
PrioritySharer prioritySharer = build();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
layoutInflater=LayoutInflater.from(context)
LayoutInflater layoutInflater = LayoutInflater.from(context);
iconSizePx=getIconSizePx(context.getResources())
int iconSizePx = getIconSizePx(context.getResources());
ArrayList<ResolveInfo> sortedList = new ArrayList<ResolveInfo>(resolveInfoList);
int otherAppsCountMaybe = showAllApps ? otherAppInfos.size() : 0;
firstOtherAppsItemPosition=priorityAppInfos.size()
int firstOtherAppsItemPosition = priorityAppInfos.size();
int offsetPosition = position - firstOtherAppsItemPosition;
TextView textView;
textView=initializeItemViewIfNecessary(convertView,R.layout.ps__grid_item_share,parent)
TextView textView = initializeItemViewIfNecessary(convertView, R.layout.ps__grid_item_share, parent);
info=getItem(position)
ResolveInfo info = getItem(position);
icon=info.loadIcon(packageManager)
Drawable icon = info.loadIcon(packageManager);
arraySize=in.readInt()
int arraySize = in.readInt();
String[] packageNames = new String[arraySize];
arraySize=targetPackages.size()
int arraySize = targetPackages.size();
String[] packagesArray = new String[arraySize];
SparseArray<ResolveInfo> matchedResolveInfos = new SparseArray<ResolveInfo>(targetPackages.size());
String packageName = info.activityInfo.packageName;
index=indexOfItemInto(packageName,targetPackages)
int index = indexOfItemInto(packageName, targetPackages);
sparseArraySize=sparseArray.size()
int sparseArraySize = sparseArray.size();
ArrayList<T> list = new ArrayList<T>(sparseArraySize);
int i = 0;
originalSubject=intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT)
CharSequence originalSubject = intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT);
String subject = originalSubject != null ? originalSubject.toString() : null;
composer=createComposer()
MessageComposer composer = createComposer();
component=intent.getComponent()
ComponentName component = intent.getComponent();
targetPackageName=component.getPackageName()
String targetPackageName = component.getPackageName();
adapter=ArrayAdapter.createFromResource(this,R.array.target_apps,android.R.layout.simple_spinner_item)
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
EditText text = (EditText) findViewById(R.id.text);
EditText title = (EditText) findViewById(R.id.title);
EditText mimeType = (EditText) findViewById(R.id.mime_type);
EditText dataUri = (EditText) findViewById(R.id.data_uri);
Switch showMostRecentlyUsed = (Switch) findViewById(R.id.show_most_recently_used);
uriString=dataUri.getText().toString()
String uriString = dataUri.getText().toString();
EditText text = (EditText) findViewById(R.id.text);
TextView textView = (TextView) convertView.findViewById(R.id.positionView);
colorView=convertView.findViewById(R.id.colorView)
View colorView = convertView.findViewById(R.id.colorView);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
offset=headerPlaceholder.getTop()
int offset = headerPlaceholder.getTop();
Integer item = COLORS[position];
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
firstVisiblePosition=grid.getFirstVisiblePosition()
int firstVisiblePosition = grid.getFirstVisiblePosition();
inflate=getViewForPosition(container,position)
View inflate = getViewForPosition(container, position);
id=item.getItemId()
int id = item.getItemId();
MyActivity activity = new MyActivity();
String manifestProperty = "../app/src/main/AndroidManifest.xml";
String resProperty = "../app/src/main/res";
cursor=resolver.query(uri,projection,selection,selectionArgs,null)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, null);
cursor=resolver.query(uri,projection,selection,selectionArgs,sortOrder)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, sortOrder);
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=richClass.setter(name)
Method setter = richClass.setter(name);
T obj;
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=methodsByName.get(name)
Method setter = methodsByName.get(name);
int type = TYPE_INT;
Class<?> t = setter.getParameterTypes()[0];
Class<?> t = setter.getParameterTypes()[0];
cursorType=cursor.getType(index)
final int cursorType = cursor.getType(index);
final Object obj;
s=f.getAnnotation(Mapper.class)
Mapper s = f.getAnnotation(Mapper.class);
mm=m.getAnnotation(Mapper.class)
Mapper mm = m.getAnnotation(Mapper.class);
methodName=StringUtil.asCamelifySetMethod(what)
String methodName = StringUtil.asCamelifySetMethod(what);
cursor=getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,null,null,null,null)
Cursor cursor = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
now=System.currentTimeMillis()
long now = System.currentTimeMillis();
List<Contact2> typedCursor = new CursorList<Contact2>(cursor, Contact2.class);
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[a-zA-Z0-9]+")
Pattern p = Pattern.compile("[a-zA-Z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[A-Z][a-z0-9]+")
Pattern p = Pattern.compile("[A-Z][a-z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
SurfaceView first = (SurfaceView) findViewById(R.id.firstSurface);
SurfaceView second = (SurfaceView) findViewById(R.id.secondSurface);
Intent pickVideo = new Intent(Intent.ACTION_PICK);
xml=context.obtainStyledAttributes(attrs,R.styleable.RelativeLayoutWithForeground)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.RelativeLayoutWithForeground);
int foregroundResId = INVALID_FOREGROUND_ID;
drawable=getDrawable(getResources(),foregroundResId)
Drawable drawable = getDrawable(getResources(), foregroundResId);
Bundle args = new Bundle();
enroll=mHotwordDetector.createEnrollIntent()
Intent enroll = mHotwordDetector.createEnrollIntent();

Diff of 58e22d72bde07e31a20380cf2d0c12b6670a13a2 and 01b5fc9d1e174cde689437f0b0d215e538090aff:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 58e22d72bde07e31a20380cf2d0c12b6670a13a2 to 01b5fc9d1e174cde689437f0b0d215e538090aff


****Parsing for addition at revision 01b5fc9d1e174cde689437f0b0d215e538090aff****

Added AccessibilityServices.java to .\/spikes\ repository source files.
Added Action.java to .\/spikes\ repository source files.
Added Actions.java to .\/spikes\ repository source files.
Added ActionsAccessibilityDelegate.java to .\/spikes\ repository source files.
Added ActionsAlertDialogCreator.java to .\/spikes\ repository source files.
Added AccessibilityServicesActivity.java to .\/spikes\ repository source files.
Added Demo.java to .\/spikes\ repository source files.
Added DemoAdapter.java to .\/spikes\ repository source files.
Added CustomActionsActivity.java to .\/spikes\ repository source files.
Added TweetView.java to .\/spikes\ repository source files.
Added DemosActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added DrawerActivity.java to .\/spikes\ repository source files.
Added EarthActivity.java to .\/spikes\ repository source files.
Added ProHaxDrawerActivity.java to .\/spikes\ repository source files.
Added SaturnActivity.java to .\/spikes\ repository source files.
Added LocalPlayerActivity.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added CastApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ComposeSmsActivity.java to .\/spikes\ repository source files.
Added HeadlessSmsSendService.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MmsReceiver.java to .\/spikes\ repository source files.
Added SmsReceiver.java to .\/spikes\ repository source files.
Added ExtendedDemoActivity.java to .\/spikes\ repository source files.
Added ExtendedDemoApplication.java to .\/spikes\ repository source files.
Added SimpleDemoActivity.java to .\/spikes\ repository source files.
Added SimpleDemoApplication.java to .\/spikes\ repository source files.
Added Binder.java to .\/spikes\ repository source files.
Added ConnectedClient.java to .\/spikes\ repository source files.
Added Connection.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnection.java to .\/spikes\ repository source files.
Added ServiceConnectionCallback.java to .\/spikes\ repository source files.
Added EasyCustomTabs.java to .\/spikes\ repository source files.
Added ActionButtonComposer.java to .\/spikes\ repository source files.
Added CloseButtonIconComposer.java to .\/spikes\ repository source files.
Added Composer.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilder.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigator.java to .\/spikes\ repository source files.
Added EasyCustomTabsWebNavigator.java to .\/spikes\ repository source files.
Added ExitAnimationsComposer.java to .\/spikes\ repository source files.
Added IntentCustomizer.java to .\/spikes\ repository source files.
Added MenuItemComposer.java to .\/spikes\ repository source files.
Added NavigationFallback.java to .\/spikes\ repository source files.
Added Navigator.java to .\/spikes\ repository source files.
Added ShowTitleComposer.java to .\/spikes\ repository source files.
Added StartAnimationsComposer.java to .\/spikes\ repository source files.
Added ToolbarColorComposer.java to .\/spikes\ repository source files.
Added UrlBarHidingComposer.java to .\/spikes\ repository source files.
Added WebNavigator.java to .\/spikes\ repository source files.
Added AvailableAppProvider.java to .\/spikes\ repository source files.
Added BestPackageFinder.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProvider.java to .\/spikes\ repository source files.
Added BinderTest.java to .\/spikes\ repository source files.
Added ConnectedClientTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnectionTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigatorTest.java to .\/spikes\ repository source files.
Added BestPackageFinderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProviderTest.java to .\/spikes\ repository source files.
Added ApiPagedChannelHistory.java to .\/spikes\ repository source files.
Added ApiPagedResponse.java to .\/spikes\ repository source files.
Added ChannelHistory.java to .\/spikes\ repository source files.
Added HistoryConverter.java to .\/spikes\ repository source files.
Added Runner.java to .\/spikes\ repository source files.
Added SlackHistoryFetcher.java to .\/spikes\ repository source files.
Added SlackWebService.java to .\/spikes\ repository source files.
Added ApiPagedResponseTest.java to .\/spikes\ repository source files.
Added MainActivityTest.java to .\/spikes\ repository source files.
Added LoremAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added BetterAccountManager.java to .\/spikes\ repository source files.
Added BetterAuthenticator.java to .\/spikes\ repository source files.
Added BetterAuthenticatorActivity.java to .\/spikes\ repository source files.
Added GertHerbAuthenticator.java to .\/spikes\ repository source files.
Added GertHerbAuthenticatorService.java to .\/spikes\ repository source files.
Added NoAccountException.java to .\/spikes\ repository source files.
Added ReactiveAuthenticatorActivity.java to .\/spikes\ repository source files.
Added Token.java to .\/spikes\ repository source files.
Added GertHerbActivity.java to .\/spikes\ repository source files.
Added GertHerbApplication.java to .\/spikes\ repository source files.
Added GertHerbAuthenticationActivity.java to .\/spikes\ repository source files.
Added TypefaceFactory.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added ViewServer.java to .\/spikes\ repository source files.
Added ViewServerManager.java to .\/spikes\ repository source files.
Added DeveloperError.java to .\/spikes\ repository source files.
Added HomeActivity.java to .\/spikes\ repository source files.
Added LoginActivity.java to .\/spikes\ repository source files.
Added LoginView.java to .\/spikes\ repository source files.
Added UserCredentials.java to .\/spikes\ repository source files.
Added FontButton.java to .\/spikes\ repository source files.
Added FontEditText.java to .\/spikes\ repository source files.
Added FontTextView.java to .\/spikes\ repository source files.
Added GithubApi.java to .\/spikes\ repository source files.
Added GithubApiFactory.java to .\/spikes\ repository source files.
Added TokenRequest.java to .\/spikes\ repository source files.
Added TokenResponse.java to .\/spikes\ repository source files.
Added Dummy.java to .\/spikes\ repository source files.
Added DummyTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MainFragment.java to .\/spikes\ repository source files.
Added Attributes.java to .\/spikes\ repository source files.
Added Coordinates.java to .\/spikes\ repository source files.
Added IndicatorCoordinatesCalculator.java to .\/spikes\ repository source files.
Added LandingStrip.java to .\/spikes\ repository source files.
Added MutableCoordinates.java to .\/spikes\ repository source files.
Added OnPagerAdapterChangedListener.java to .\/spikes\ repository source files.
Added PagerAdapterObserver.java to .\/spikes\ repository source files.
Added Scrollable.java to .\/spikes\ repository source files.
Added ScrollingPageChangeListener.java to .\/spikes\ repository source files.
Added State.java to .\/spikes\ repository source files.
Added TabsContainer.java to .\/spikes\ repository source files.
Added CustomLandingStrip.java to .\/spikes\ repository source files.
Added CustomTabActivity.java to .\/spikes\ repository source files.
Added ExampleRainbowLandingStrip.java to .\/spikes\ repository source files.
Added FixedWidthTabActivity.java to .\/spikes\ repository source files.
Added NoFragmentsSimpleTextTabActivity.java to .\/spikes\ repository source files.
Added Data.java to .\/spikes\ repository source files.
Added DemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added SmallDemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerFragment.java to .\/spikes\ repository source files.
Added DemoViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapterState.java to .\/spikes\ repository source files.
Added SimpleTextTabActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AbTestingParamsLoadedCallback.java to .\/spikes\ repository source files.
Added AyBe.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added WeakStartCallback.java to .\/spikes\ repository source files.
Added LeakActivity.java to .\/spikes\ repository source files.
Added NoLeakActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added Bar.java to .\/spikes\ repository source files.
Added Foo.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added FooTest.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added ColorScheme.java to .\/spikes\ repository source files.
Added ColorUtils.java to .\/spikes\ repository source files.
Added DominantColorCalculator.java to .\/spikes\ repository source files.
Added FloatUtils.java to .\/spikes\ repository source files.
Added MedianCutQuantizer.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added PayPalFragment.java to .\/spikes\ repository source files.
Added PayPalHelper.java to .\/spikes\ repository source files.
Added MaxLengthMessageComposer.java to .\/spikes\ repository source files.
Added MessageComposer.java to .\/spikes\ repository source files.
Added TwitterMessageComposer.java to .\/spikes\ repository source files.
Added DisabledMruPersister.java to .\/spikes\ repository source files.
Added MruPersister.java to .\/spikes\ repository source files.
Added SharedPreferencesMruPersister.java to .\/spikes\ repository source files.
Added OnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added PriorityShareDialog.java to .\/spikes\ repository source files.
Added PrioritySharer.java to .\/spikes\ repository source files.
Added ShareTargetsAdapter.java to .\/spikes\ repository source files.
Added SimpleOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added TargetApps.java to .\/spikes\ repository source files.
Added TwitterOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AdvancedActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SimpleActivity.java to .\/spikes\ repository source files.
Added LockingActivity.java to .\/spikes\ repository source files.
Added PostLockingActivity.java to .\/spikes\ repository source files.
Added PreLockingActivity.java to .\/spikes\ repository source files.
Added DummyAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added NovoStaggeredGridView.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SpikeApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SwipeableView.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MyClass.java to .\/spikes\ repository source files.
Added MyClassTest.java to .\/spikes\ repository source files.
Added MyAndroidClassTest.java to .\/spikes\ repository source files.
Added RobolectricGradleTestRunner.java to .\/spikes\ repository source files.
Added Mapper.java to .\/spikes\ repository source files.
Added Query.java to .\/spikes\ repository source files.
Added TypedResolver.java to .\/spikes\ repository source files.
Added CursorList.java to .\/spikes\ repository source files.
Added CursorListIterator.java to .\/spikes\ repository source files.
Added CursorMarshaller.java to .\/spikes\ repository source files.
Added EmptyListIterator.java to .\/spikes\ repository source files.
Added ReflectionCursorMarshaller.java to .\/spikes\ repository source files.
Added RichClass.java to .\/spikes\ repository source files.
Added Setter.java to .\/spikes\ repository source files.
Added Function.java to .\/spikes\ repository source files.
Added TypedElementLoader.java to .\/spikes\ repository source files.
Added TypedLoader.java to .\/spikes\ repository source files.
Added Marshaller.java to .\/spikes\ repository source files.
Added ObjectMapper.java to .\/spikes\ repository source files.
Added TypedActivity.java to .\/spikes\ repository source files.
Added StringUtil.java to .\/spikes\ repository source files.
Added MyObject.java to .\/spikes\ repository source files.
Added MediaPlayerSwitcherActivity.java to .\/spikes\ repository source files.
Added VideoPlayerService.java to .\/spikes\ repository source files.
Added RelativeLayoutWithForeground.java to .\/spikes\ repository source files.
Added DemoActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added RecognitionService.java to .\/spikes\ repository source files.
Added SessionService.java to .\/spikes\ repository source files.
Added SettingsActivity.java to .\/spikes\ repository source files.
Added SmartContextInteractionService.java to .\/spikes\ repository source files.
AccessibilityManager accessibilityManager = (AccessibilityManager) context.getSystemService(Context.ACCESSIBILITY_SERVICE);
enabledServices=getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN)
List<AccessibilityServiceInfo> enabledServices = getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN);
List<AccessibilityServiceInfo> enabledServices = getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN);
Action otherAction = (Action) o;
int result = id;
Actions otherActions = (Actions) o;
label=resources.getString(action.getLabel())
String label = resources.getString(action.getLabel());
action=actions.findActionById(actionId)
Action action = actions.findActionById(actionId);
action=actions.getAction(which)
Action action = actions.getAction(which);
CharSequence[] itemLabels = new CharSequence[actions.getCount()];
View view = convertView;
demo=getItem(position)
Demo demo = getItem(position);
Intent intent = new Intent(context, demo.activityClass);
layoutInflater=LayoutInflater.from(parent.getContext())
LayoutInflater layoutInflater = LayoutInflater.from(parent.getContext());
TweetView tweetView = (TweetView) findViewById(R.id.tweet);
actions=createActions(tweet,listener)
final Actions actions = createActions(tweet, listener);
ListView listView = ((ListView) findViewById(R.id.list));
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
final DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close) {

            @Override
            public void onDrawerClosed(View drawerView) {
                super.onDrawerClosed(drawerView);
                // waiting for the drawer to close, then navigating seems to cause issue.
                // why wait for the drawer to close? jankiness.
                if (pendingNavigationClick != null) {
                    startActivity(pendingNavigationClick);
                    pendingNavigationClick = null;
                }
            }

        };
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close);
Intent intent;
b=getIntent().getExtras()
Bundle b = getIntent().getExtras();
mShouldStartPlayback=b.getBoolean("shouldStart")
boolean mShouldStartPlayback = b.getBoolean("shouldStart");
startPosition=b.getInt("startPosition",0)
int startPosition = b.getInt("startPosition", 0);
currentPos=mVideoView.getCurrentPosition()
int currentPos = mVideoView.getCurrentPosition();
String msg;
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, mDisplaySize.y + getActionBar().getHeight());
mm=mSelectedMedia.getMetadata()
MediaMetadata mm = mSelectedMedia.getMetadata();
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, (int) (mDisplaySize.x * ASPECT_RATIO));
WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
width=display.getWidth()
int width = display.getWidth();
height=display.getHeight()
int height = display.getHeight();
int resourceId = 0;
String videoUrl = "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4#sthash.rJ5rPZy8.dpuf";
String title = "Jahre Philharmonie";
String description = "Awesome film you must watch!";
String author = "Blundell";
String thumbUrl = "http://www.ustream.tv/blog/wp-content/uploads/2013/10/simply-go-live.png";
MediaMetadata metadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE);
mediaInfo=new MediaInfo.Builder(videoUrl).setMetadata(metadata).setStreamType(MediaInfo.STREAM_TYPE_BUFFERED).setContentType("video/mp4").build()
MediaInfo mediaInfo = new MediaInfo.Builder(videoUrl)
                        .setMetadata(metadata)
                        .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)
                        .setContentType("video/mp4")
                        .build();
Intent intent = new Intent(MainActivity.this, LocalPlayerActivity.class);
preferences=getPreferences(MODE_PRIVATE)
SharedPreferences preferences = getPreferences(MODE_PRIVATE);
defaultSmsPackage=Telephony.Sms.getDefaultSmsPackage(this)
String defaultSmsPackage = Telephony.Sms.getDefaultSmsPackage(this);
Intent intent = new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
availableAppProvider=EasyCustomTabs.getInstance()
AvailableAppProvider availableAppProvider = EasyCustomTabs.getInstance();
ConnectedClient connectedClient = new ConnectedClient(client);
binder=Binder.newInstance()
Binder binder = Binder.newInstance();
List<Composer> composerList = new ArrayList<>();
customTabsSession=connection.newSession()
CustomTabsSession customTabsSession = connection.newSession();
CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(customTabsSession);
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
context=EasyCustomTabs.getInstance().getContext()
Context context = EasyCustomTabs.getInstance().getContext();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
packagesSupportingCustomTabs=getPackagesSupportingCustomTabs()
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
defaultPackage=getDefaultPackage()
String defaultPackage = getDefaultPackage();
defaultActivityInfo=packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK,0)
ResolveInfo defaultActivityInfo = packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK, 0);
String packageName = defaultActivityInfo.activityInfo.packageName;
resolvedInfoList=packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK,0)
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<String> packagesSupportingCustomTabs = new ArrayList<>();
Intent serviceIntent = new Intent();
bestPackageFinder=BestPackageFinder.newInstance()
BestPackageFinder bestPackageFinder = BestPackageFinder.newInstance();
packageName=bestPackageFinder.findBestPackage()
String packageName = bestPackageFinder.findBestPackage();
resolveInfo=createResolveInfoFor(packageName)
ResolveInfo resolveInfo = createResolveInfoFor(packageName);
ResolveInfo resolveInfo = new ResolveInfo();
List<ResolveInfo> resolveInfoList = new ArrayList<>();
defaultPackageResolveInfo=createResolveInfoFor(packageName)
ResolveInfo defaultPackageResolveInfo = createResolveInfoFor(packageName);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
oldestApiMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage oldestApiMessage = apiMessages.get(apiMessages.size() - 1);
String lastResponseEpochTime = oldestApiMessage.timeStamp;
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
latestMessage=latestMessages.get(latestMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage latestMessage = latestMessages.get(latestMessages.size() - 1);
latestMessageDateTime=convertToLocalDateTime(latestMessage.timeStamp)
LocalDateTime latestMessageDateTime = convertToLocalDateTime(latestMessage.timeStamp);
List<ChannelHistory.Message> messages = new ArrayList<>();
historyFrom=getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1))
LocalDateTime historyFrom = getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1));
historyTo=getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0))
LocalDateTime historyTo = getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0));
String text = apiMessage.text;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
lastMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage lastMessage = apiMessages.get(apiMessages.size() - 1);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
firstMessage=apiMessages.get(0)
ApiPagedChannelHistory.ApiMessage firstMessage = apiMessages.get(0);
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
String slackToken = args[0];
retrofit=new Retrofit.Builder().baseUrl("https://slack.com/api/").addConverterFactory(GsonConverterFactory.create()).build()
Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://slack.com/api/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();
slackWebService=retrofit.create(SlackWebService.class)
SlackWebService slackWebService = retrofit.create(SlackWebService.class);
slackHistoryFetcher=SlackHistoryFetcher.from(slackWebService,slackToken)
SlackHistoryFetcher slackHistoryFetcher = SlackHistoryFetcher.from(slackWebService, slackToken);
start=LocalDateTime.now()
LocalDateTime start = LocalDateTime.now();
end=LocalDateTime.now().minusDays(7)
LocalDateTime end = LocalDateTime.now().minusDays(7);
channelHistory=slackHistoryFetcher.getChannelHistory(start,end)
ChannelHistory channelHistory = slackHistoryFetcher.getChannelHistory(start, end);
HistoryConverter historyConverter = new HistoryConverter();
ApiPagedResponse apiPagedResponse = new ApiPagedResponse(start);
response=fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime())
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
apiPagedChannelHistory=response.body()
ApiPagedChannelHistory apiPagedChannelHistory = response.body();
channelHistory=slackWebService.getChannelHistory(slackToken,channel,lastResponseEpochTime,NUMBER_OF_RESULTS)
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
ApiPagedChannelHistory apiPagedChannelHistory = new ApiPagedChannelHistory();
ApiPagedChannelHistory.ApiMessage apiMessage = new ApiPagedChannelHistory.ApiMessage();
final TextView textView = new TextView(context);
emptyView=findViewById(R.id.empty_view)
View emptyView = findViewById(R.id.empty_view);
final Integer action = values[0];
LoremAdapter loremAdapter = new LoremAdapter();
accounts=accountManager.getAccountsByType(accountType)
Account[] accounts = accountManager.getAccountsByType(accountType);
Bundle result;
Bundle result;
Bundle result = new Bundle();
activity=createLoginIntent(context,accountType,authTokenType,requiredFeatures,options)
Intent activity = createLoginIntent(context, accountType, authTokenType, requiredFeatures, options);
Bundle bundle = new Bundle();
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
accounts=accountManager.getAccountsByType(authTokenType)
Account[] accounts = accountManager.getAccountsByType(authTokenType);
bundle=createResponseBundle(token)
Bundle bundle = createResponseBundle(token);
accountManager=AccountManager.get(this.getApplicationContext())
AccountManager accountManager = AccountManager.get(this.getApplicationContext());
Account account = new Account(token.getUserName(), getAccountName());
Bundle bundle = new Bundle();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
GertHerbAuthenticator authenticator = new GertHerbAuthenticator(this);
fontId=getFontId(context,attrs)
int fontId = getFontId(context, attrs);
fontType=getFontType(fontId)
FontType fontType = getFontType(fontId);
typedArray=context.obtainStyledAttributes(attrs,R.styleable.CustomTextAppearance)
TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CustomTextAppearance);
typeface=createTypeFace(context,fontType)
Typeface typeface = createTypeFace(context, fontType);
info=context.getApplicationInfo()
ApplicationInfo info = context.getApplicationInfo();
name=activity.getTitle().toString()
String name = activity.getTitle().toString();
client=mServer.accept()
Socket client = mServer.accept();
boolean result;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
BufferedReader in = null;
request=in.readLine()
final String request = in.readLine();
String command;
String parameters;
index=request.indexOf(' ')
int index = request.indexOf(' ');
boolean result;
boolean success = true;
BufferedWriter out = null;
index=parameters.indexOf(' ')
int index = parameters.indexOf(' ');
code=parameters.substring(0,index)
final String code = parameters.substring(0, index);
int hashCode = (int) Long.parseLong(code, 16);
window=findWindow(hashCode)
final View window = findWindow(hashCode);
dispatch=ViewDebug.class.getDeclaredMethod("dispatchCommand",View.class,String.class,String.class,OutputStream.class)
final Method dispatch = ViewDebug.class.getDeclaredMethod("dispatchCommand",
                        View.class, String.class, String.class, OutputStream.class);
View window = null;
boolean result = true;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
boolean result = true;
String focusName = null;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
View focusedWindow = null;
BufferedWriter out = null;
boolean needWindowListUpdate = false;
boolean needFocusedWindowUpdate = false;
BetterAccountManager accountManager = new BetterAccountManager(this, getString(R.string.account_type), getString(R.string.token_type), null);
loginView=Views.findById(this,R.id.login_view)
LoginView loginView = Views.findById(this, R.id.login_view);
authorizationApi=new GithubApiFactory().createAuthorizationApi(credentials.username,credentials.password)
GithubApi authorizationApi = new GithubApiFactory().createAuthorizationApi(credentials.username, credentials.password);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
Endpoint endpoint = new Endpoint() {
            @Override
            public String getUrl() {
                return GITHUB_API_URL;
            }

            @Override
            public String getName() {
                return "Live";
            }
        };
interceptor=createAuthorizationRequestInterceptor(username,password)
RequestInterceptor interceptor = createAuthorizationRequestInterceptor(username, password);
restAdapter=createRestAdapter(endpoint,interceptor)
RestAdapter restAdapter = createRestAdapter(endpoint, interceptor);
Dummy dummy = new Dummy();
result=dummy.explodes()
boolean result = dummy.explodes();
String base64EncodedPublicKey = "CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE";
premiumPurchase=inventory.getPurchase(SKU_PREMIUM)
Purchase premiumPurchase = inventory.getPurchase(SKU_PREMIUM);
infiniteGasPurchase=inventory.getPurchase(SKU_INFINITE_GAS)
Purchase infiniteGasPurchase = inventory.getPurchase(SKU_INFINITE_GAS);
gasPurchase=inventory.getPurchase(SKU_GAS)
Purchase gasPurchase = inventory.getPurchase(SKU_GAS);
String payload = "";
String payload = "";
String payload = "";
payload=p.getDeveloperPayload()
String payload = p.getDeveloperPayload();
int index = mTank >= TANK_RES_IDS.length ? TANK_RES_IDS.length - 1 : mTank;
AlertDialog.Builder bld = new AlertDialog.Builder(this);
spe=getPreferences(MODE_PRIVATE).edit()
SharedPreferences.Editor spe = getPreferences(MODE_PRIVATE).edit();
sp=getPreferences(MODE_PRIVATE)
SharedPreferences sp = getPreferences(MODE_PRIVATE);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                                  + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                    | ((source[d + 1 + off] << 24) >>> 16)
                    | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                    | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                                   "-1002:Bad response received/" +
                                   "-1003:Purchase signature verification failed/" +
                                   "-1004:Send intent failed/" +
                                   "-1005:User cancelled/" +
                                   "-1006:Unknown purchase response/" +
                                   "-1007:Missing token/" +
                                   "-1008:Unknown error/" +
                                   "-1009:Subscriptions not available/" +
                                   "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(),
                    itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                        | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                        | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                            | ((source[d + 1 + off] << 24) >>> 16)
                            | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                            | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                "-1002:Bad response received/" +
                "-1003:Purchase signature verification failed/" +
                "-1004:Send intent failed/" +
                "-1005:User cancelled/" +
                "-1006:Unknown purchase response/" +
                "-1007:Missing token/" +
                "-1008:Unknown error/" +
                "-1009:Subscriptions not available/" +
                "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(), itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
responseCode=result.getResponse()
int responseCode = result.getResponse();
sku=purchase.getSku()
String sku = purchase.getSku();
skuDetails=inv.getSkuDetails(sku)
SkuDetails skuDetails = inv.getSkuDetails(sku);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
Button purchaseFiveButton = (Button) rootView.findViewById(R.id.fragment_main_button_purchase_five_coins);
xml=context.obtainStyledAttributes(attrs,R.styleable.LandingStrip)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.LandingStrip);
tabLayoutId=xml.getResourceId(R.styleable.LandingStrip_tabLayoutId,MISSING_TAB_LAYOUT_ID)
int tabLayoutId = xml.getResourceId(R.styleable.LandingStrip_tabLayoutId, MISSING_TAB_LAYOUT_ID);
indicatorColour=xml.getResourceId(R.styleable.LandingStrip_indicatorColor,DEFAULT_INDICATOR_COLOUR)
int indicatorColour = xml.getResourceId(R.styleable.LandingStrip_indicatorColor, DEFAULT_INDICATOR_COLOUR);
indicatorHeight=getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight,DEFAULT_INDICATOR_HEIGHT,xml)
int indicatorHeight = getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight, DEFAULT_INDICATOR_HEIGHT, xml);
tabsPaddingLeft=getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingLeft = getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding, DEFAULT_TABS_PADDING, xml);
tabsPaddingRight=getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingRight = getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding, DEFAULT_TABS_PADDING, xml);
MutableCoordinates drawCurrentTabCoordinates = new MutableCoordinates();
MutableCoordinates drawNextTabCoordinates = new MutableCoordinates();
MutableCoordinates drawMovingIndicatorCoordinates = new MutableCoordinates();
currentTab=tabsContainer.getTabAt(currentPosition)
View currentTab = tabsContainer.getTabAt(currentPosition);
currentTabStart=currentTab.getLeft()
float currentTabStart = currentTab.getLeft();
currentTabEnd=currentTab.getRight()
float currentTabEnd = currentTab.getRight();
nextTab=tabsContainer.getTabAt(currentPosition + 1)
View nextTab = tabsContainer.getTabAt(currentPosition + 1);
nextTabPositionOffset=getFractionFrom(pagePositionOffset)
float nextTabPositionOffset = getFractionFrom(pagePositionOffset);
indicatorStart=getIndicatorPosition(nextTab.getStart(),pagePositionOffset,currentTab.getStart(),nextTabPositionOffset)
float indicatorStart = getIndicatorPosition(nextTab.getStart(), pagePositionOffset, currentTab.getStart(), nextTabPositionOffset);
indicatorEnd=getIndicatorPosition(nextTab.getEnd(),pagePositionOffset,currentTab.getEnd(),nextTabPositionOffset)
float indicatorEnd = getIndicatorPosition(nextTab.getEnd(), pagePositionOffset, currentTab.getEnd(), nextTabPositionOffset);
height=getHeight()
int height = getHeight();
tabCount=pagerAdapter.getCount()
int tabCount = pagerAdapter.getCount();
title=pagerAdapter.getPageTitle(position)
CharSequence title = pagerAdapter.getPageTitle(position);
inflatedTabView=tabsContainer.inflateTab(layoutInflater,attributes.getTabLayoutId())
View inflatedTabView = tabsContainer.inflateTab(layoutInflater, attributes.getTabLayoutId());
int position = (int) view.getTag(TAG_KEY_POSITION);
scrollOffset=getHorizontalScrollOffset(position,positionOffset)
int scrollOffset = getHorizontalScrollOffset(position, positionOffset);
newScrollX=calculateScrollOffset(position,scrollOffset,positionOffset)
float newScrollX = calculateScrollOffset(position, scrollOffset, positionOffset);
tabWidth=tabsContainer.getTabAt(position).getWidth()
int tabWidth = tabsContainer.getTabAt(position).getWidth();
tabForPosition=tabsContainer.getTabAt(position)
View tabForPosition = tabsContainer.getTabAt(position);
float tabStartX = tabForPosition.getLeft() + scrollOffset;
int viewMiddleOffset = getTabParentWidth() / 2;
float tabCenterOffset = (tabForPosition.getRight() - tabForPosition.getLeft()) * 0.5F;
nextTabDelta=getNextTabDelta(position,pagerOffset,tabForPosition)
float nextTabDelta = getNextTabDelta(position, pagerOffset, tabForPosition);
LinearLayout tabsContainerView = new LinearLayout(context);
tab=getTabAt(index)
View tab = getTabAt(index);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
position=indicatorCoordinates.getStart()
float position = indicatorCoordinates.getStart();
lastTabOffset=((ViewGroup)getChildAt(0)).getChildAt(getChildCount() - 1).getWidth()
float lastTabOffset = ((ViewGroup) getChildAt(0)).getChildAt(getChildCount() - 1).getWidth();
frequency=getOneCycle(lastTabOffset)
float frequency = getOneCycle(lastTabOffset);
r=toHex(calculateColour(position,frequency,PHASE_RED,AMPLITUDE,CENTER_FREQUENCY))
String r = toHex(calculateColour(position, frequency, PHASE_RED, AMPLITUDE, CENTER_FREQUENCY));
g=toHex(calculateColour(position,frequency,PHASE_GREEN,AMPLITUDE,CENTER_FREQUENCY))
String g = toHex(calculateColour(position, frequency, PHASE_GREEN, AMPLITUDE, CENTER_FREQUENCY));
b=toHex(calculateColour(position,frequency,PHASE_BLUE,AMPLITUDE,CENTER_FREQUENCY))
String b = toHex(calculateColour(position, frequency, PHASE_BLUE, AMPLITUDE, CENTER_FREQUENCY));
height=getHeight()
int height = getHeight();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPagerFragment viewPagerFragment = new ViewPagerFragment();
Bundle bundle = new Bundle();
TextView view = (TextView) layoutInflater.inflate(R.layout.view_demo, container, false);
currentPosition=viewPagerAdapterState.getCurrentPosition()
int currentPosition = viewPagerAdapterState.getCurrentPosition();
view=getView(container,position)
View view = getView(container, position);
parcelableSparseArray=viewPagerAdapterState.get(position)
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
View view = (View) object;
SparseArray<Parcelable> viewState = new SparseArray<>();
position=entry.getValue()
int position = entry.getValue();
view=entry.getKey()
View view = entry.getKey();
bundle=in.readBundle()
Bundle bundle = in.readBundle();
Map<Integer, SparseArray<Parcelable>> viewStates = new HashMap<>(bundle.keySet().size());
sparseParcelableArray=bundle.getSparseParcelableArray(key)
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
primaryItemPosition=in.readInt()
int primaryItemPosition = in.readInt();
Bundle bundle = new Bundle();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
final TextView abText = (TextView) findViewById(R.id.ab_text);
final AyBe ayBe = new AyBe();
id=item.getItemId()
int id = item.getItemId();
callback=weakCallback.get()
AbTestingParamsLoadedCallback callback = weakCallback.get();
WeakReference<NoLeakActivity> weakNoLeakActivity = new WeakReference<NoLeakActivity>(noLeakActivity);
noLeakActivity=weakNoLeakActivity.get()
NoLeakActivity noLeakActivity = weakNoLeakActivity.get();
RecyclerView recyclerView = (RecyclerView) layoutInflater.inflate(R.layout.view_page, viewGroup, false);
itemView=layoutInflater.inflate(R.layout.view_item,parent,false)
View itemView = layoutInflater.inflate(R.layout.view_item, parent, false);
actual=foo.twice(HALF)
int actual = foo.twice(HALF);
int expected = WHOLE;
final float inverseRatio = 1f - ratio;
float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRatio);
float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRatio);
float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRatio);
hsv=node.getHsv()
float[] hsv = node.getHsv();
width=bitmap.getWidth()
final int width = bitmap.getWidth();
height=bitmap.getHeight()
final int height = bitmap.getHeight();
final int[] rgbPixels = new int[width * height];
final MedianCutQuantizer mcq = new MedianCutQuantizer(rgbPixels, NUM_COLORS);
primaryAccentColor=findPrimaryAccentColor()
final ColorNode primaryAccentColor = findPrimaryAccentColor();
secondaryAccentColor=findSecondaryAccentColor(primaryAccentColor)
final ColorNode secondaryAccentColor = findSecondaryAccentColor(primaryAccentColor);
tertiaryAccentColor=findTertiaryAccentColor(primaryAccentColor,secondaryAccentColor)
final int tertiaryAccentColor = findTertiaryAccentColor(
                primaryAccentColor, secondaryAccentColor);
primaryTextColor=findPrimaryTextColor(primaryAccentColor)
final int primaryTextColor = findPrimaryTextColor(primaryAccentColor);
secondaryTextColor=findSecondaryTextColor(primaryAccentColor)
final int secondaryTextColor = findSecondaryTextColor(primaryAccentColor);
final float primaryHue = primary.getHsv()[0];
final float candidateHue = candidate.getHsv()[0];
copy=Arrays.copyOf(palette,palette.length)
final MedianCutQuantizer.ColorNode[] copy = Arrays.copyOf(palette, palette.length);
maxCount=palette[0].getCount()
final float maxCount = palette[0].getCount();
lhsWeight=calculateWeight(lhs,maxCount)
final float lhsWeight = calculateWeight(lhs, maxCount);
rhsWeight=calculateWeight(rhs,maxCount)
final float rhsWeight = calculateWeight(rhs, maxCount);
float sum = 0;
float sumWeight = 0;
float value = values[i];
float weight = values[i + 1];
ColorHistogram colorHist = new ColorHistogram(pixels);
K=colorHist.getNumberOfColors()
int K = colorHist.getNumberOfColors();
ColorNode[] rCols = null;
rgb=colorHist.getColor(i)
int rgb = colorHist.getColor(i);
cnt=colorHist.getCount(i)
int cnt = colorHist.getCount(i);
ColorBox initialBox = new ColorBox(0, K - 1, 0);
List<ColorBox> colorSet = new ArrayList<ColorBox>();
int k = 1;
boolean done = false;
nextBox=findBoxToSplit(colorSet)
ColorBox nextBox = findBoxToSplit(colorSet);
newBox=nextBox.splitBox()
ColorBox newBox = nextBox.splitBox();
color=findClosestColor(pixels[i])
ColorNode color = findClosestColor(pixels[i]);
idx=findClosestColorIndex(rgb)
int idx = findClosestColorIndex(rgb);
red=Color.red(rgb)
int red = Color.red(rgb);
grn=Color.green(rgb)
int grn = Color.green(rgb);
blu=Color.blue(rgb)
int blu = Color.blue(rgb);
int minIdx = 0;
int minDistance = Integer.MAX_VALUE;
ColorNode color = quantColors[i];
d2=color.distance2(red,grn,blu)
int d2 = color.distance2(red, grn, blu);
ColorBox boxToSplit = null;
int minLevel = Integer.MAX_VALUE;
n=colorBoxes.size()
int n = colorBoxes.size();
ColorNode[] avgColors = new ColorNode[n];
int i = 0;
int dr = this.red - red;
int dg = this.grn - grn;
int db = this.blu - blu;
ColorNode color = imageColors[i];
int r = color.red;
int g = color.grn;
int b = color.blu;
dim=getLongestColorDimension()
ColorDimension dim = getLongestColorDimension();
med=findMedian(dim)
int med = findMedian(dim);
int nextLevel = level + 1;
ColorBox newBox = new ColorBox(med + 1, upper, nextLevel);
int rLength = rmax - rmin;
int gLength = gmax - gmin;
int bLength = bmax - bmin;
int half = count / 2;
int nPixels, median;
int rSum = 0;
int gSum = 0;
int bSum = 0;
int n = 0;
ColorNode ci = imageColors[i];
int cnt = ci.cnt;
double nd = n;
int avgRed = (int) (0.5 + rSum / nd);
int avgGrn = (int) (0.5 + gSum / nd);
int avgBlu = (int) (0.5 + bSum / nd);
s=this.getClass().getSimpleName()
String s = this.getClass().getSimpleName();
int i = 0;
int N = pixelsOrig.length;
int[] pixelsCpy = new int[N];
int k = -1;
int curColor = -1;
int nColors = k + 1;
id=item.getItemId()
int id = item.getItemId();
Intent intent = new Intent();
bitmap=((BitmapDrawable)imageView.getDrawable()).getBitmap()
Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap();
DominantColorCalculator dominantColorCalculator = new DominantColorCalculator(bitmap);
selectedImageUri=data.getData()
Uri selectedImageUri = data.getData();
selectedImagePath=getPath(selectedImageUri)
String selectedImagePath = getPath(selectedImageUri);
String[] projection = {MediaStore.Images.Media.DATA};
cursor=managedQuery(uri,projection,null,null,null)
Cursor cursor = managedQuery(uri, projection, null, null, null);
column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)
int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
LinearLayout rootView = (LinearLayout) inflater.inflate(R.layout.fragment_main, container, false);
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
preapprovalButton=payPal.getCheckoutButton(getActivity(),PayPal.BUTTON_194x37,CheckoutButton.TEXT_PAY)
CheckoutButton preapprovalButton = payPal.getCheckoutButton(getActivity(), PayPal.BUTTON_194x37, CheckoutButton.TEXT_PAY);
preapprovalIntent=payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY)
Intent preapprovalIntent = payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY);
String resultTitle = "";
String resultInfo = "";
String resultExtra = "";
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
PayPalPreapproval preapproval = new PayPalPreapproval();
preapproval=createPreapproval(preapprovalKey)
PayPalPreapproval preapproval = createPreapproval(preapprovalKey);
Bundle bundle = new Bundle();
int availableLength = maxLength;
StringBuilder stringBuilder = new StringBuilder(maxLength);
prefixAndSuffixLength=computeAppendedLengthIncludingSeparatorSpaces(prefix,suffix)
int prefixAndSuffixLength = computeAppendedLengthIncludingSeparatorSpaces(prefix, suffix);
urlLength=computeUrlLengthIncludingSeparatorSpace(url)
int urlLength = computeUrlLengthIncludingSeparatorSpace(url);
trimmedSubject=ellipsizeTextIfExceedsMaxLength(subject,availableLength)
String trimmedSubject = ellipsizeTextIfExceedsMaxLength(subject, availableLength);
int length = 0;
preferences=context.getSharedPreferences(MRU_PREFERENCES,Context.MODE_PRIVATE)
SharedPreferences preferences = context.getSharedPreferences(MRU_PREFERENCES, Context.MODE_PRIVATE);
args=getArguments()
Bundle args = getArguments();
themeResId=getThemeResIdIfProvidedIn(args)
int themeResId = getThemeResIdIfProvidedIn(args);
title=getTitleIfProvidedIn(args)
CharSequence title = getTitleIfProvidedIn(args);
builder=createDialogBuilder(themeResId).setCancelable(true).setView(dialogView)
AlertDialog.Builder builder = createDialogBuilder(themeResId)
                .setCancelable(true)
                .setView(dialogView);
inflater=getActivity().getLayoutInflater()
LayoutInflater inflater = getActivity().getLayoutInflater();
GridView gridView = (GridView) rootView.findViewById(R.id.ps__dialog_grid);
targetApps=extractTargetAppsFrom(args)
TargetApps targetApps = extractTargetAppsFrom(args);
allShareTargets=getAvailableShareTargets(sharingIntent)
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
priorityAppInfos=createPriorityResolveInfoList(targetApps,allShareTargets)
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
otherAppInfos=createOtherAppsResolveInfoList(priorityAppInfos,allShareTargets)
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
resolveInfos=targetApps.extractTargetResolveInfosFrom(allShareTargets)
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
mruResolveInfo=findMruResolveInfoIn(allShareTargets)
ResolveInfo mruResolveInfo = findMruResolveInfoIn(allShareTargets);
List<ResolveInfo> otherAppsInfos = new ArrayList<ResolveInfo>(allAppInfos);
mruPackageName=persister.getLastUsedTarget()
String mruPackageName = persister.getLastUsedTarget();
String packageName = resolveInfo.activityInfo.packageName;
packageManager=getActivity().getPackageManager()
PackageManager packageManager = getActivity().getPackageManager();
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
View buttonStrip = (View) showMoreButton.getParent();
gridView=getGridView()
GridView gridView = getGridView();
intent=wrapIntentWithExplicitTargetComponentForItem(position,sharingIntent)
Intent intent = wrapIntentWithExplicitTargetComponentForItem(position, sharingIntent);
Intent intent = new Intent(sharingIntent);
ActivityInfo activity = adapter.getItem(position).activityInfo;
ComponentName name = new ComponentName(activity.applicationInfo.packageName, activity.name);
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
PriorityShareDialog dialog = new PriorityShareDialog();
Bundle args = new Bundle();
sharingIntent=createSharingIntent()
Intent sharingIntent = createSharingIntent();
fragmentManager=activity.getFragmentManager()
FragmentManager fragmentManager = activity.getFragmentManager();
Intent intent = new Intent(Intent.ACTION_SEND);
dialog=new PriorityShareDialog.Builder().setTitle(title).setTargetApps(targetApps).setSharingIntent(sharingIntent).setOnPrepareSharingIntentListener(listener).setShowMostRecentlyUsed(showMostRecentlyUsed).build()
PriorityShareDialog dialog = new PriorityShareDialog.Builder()
                .setTitle(title)
                .setTargetApps(targetApps)
                .setSharingIntent(sharingIntent)
                .setOnPrepareSharingIntentListener(listener)
                .setShowMostRecentlyUsed(showMostRecentlyUsed)
                .build();
PrioritySharer prioritySharer = new PrioritySharer();
prioritySharer=build()
PrioritySharer prioritySharer = build();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
layoutInflater=LayoutInflater.from(context)
LayoutInflater layoutInflater = LayoutInflater.from(context);
iconSizePx=getIconSizePx(context.getResources())
int iconSizePx = getIconSizePx(context.getResources());
ArrayList<ResolveInfo> sortedList = new ArrayList<ResolveInfo>(resolveInfoList);
int otherAppsCountMaybe = showAllApps ? otherAppInfos.size() : 0;
firstOtherAppsItemPosition=priorityAppInfos.size()
int firstOtherAppsItemPosition = priorityAppInfos.size();
int offsetPosition = position - firstOtherAppsItemPosition;
TextView textView;
textView=initializeItemViewIfNecessary(convertView,R.layout.ps__grid_item_share,parent)
TextView textView = initializeItemViewIfNecessary(convertView, R.layout.ps__grid_item_share, parent);
info=getItem(position)
ResolveInfo info = getItem(position);
icon=info.loadIcon(packageManager)
Drawable icon = info.loadIcon(packageManager);
arraySize=in.readInt()
int arraySize = in.readInt();
String[] packageNames = new String[arraySize];
arraySize=targetPackages.size()
int arraySize = targetPackages.size();
String[] packagesArray = new String[arraySize];
SparseArray<ResolveInfo> matchedResolveInfos = new SparseArray<ResolveInfo>(targetPackages.size());
String packageName = info.activityInfo.packageName;
index=indexOfItemInto(packageName,targetPackages)
int index = indexOfItemInto(packageName, targetPackages);
sparseArraySize=sparseArray.size()
int sparseArraySize = sparseArray.size();
ArrayList<T> list = new ArrayList<T>(sparseArraySize);
int i = 0;
originalSubject=intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT)
CharSequence originalSubject = intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT);
String subject = originalSubject != null ? originalSubject.toString() : null;
composer=createComposer()
MessageComposer composer = createComposer();
component=intent.getComponent()
ComponentName component = intent.getComponent();
targetPackageName=component.getPackageName()
String targetPackageName = component.getPackageName();
adapter=ArrayAdapter.createFromResource(this,R.array.target_apps,android.R.layout.simple_spinner_item)
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
EditText text = (EditText) findViewById(R.id.text);
EditText title = (EditText) findViewById(R.id.title);
EditText mimeType = (EditText) findViewById(R.id.mime_type);
EditText dataUri = (EditText) findViewById(R.id.data_uri);
Switch showMostRecentlyUsed = (Switch) findViewById(R.id.show_most_recently_used);
uriString=dataUri.getText().toString()
String uriString = dataUri.getText().toString();
EditText text = (EditText) findViewById(R.id.text);
TextView textView = (TextView) convertView.findViewById(R.id.positionView);
colorView=convertView.findViewById(R.id.colorView)
View colorView = convertView.findViewById(R.id.colorView);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
offset=headerPlaceholder.getTop()
int offset = headerPlaceholder.getTop();
Integer item = COLORS[position];
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
firstVisiblePosition=grid.getFirstVisiblePosition()
int firstVisiblePosition = grid.getFirstVisiblePosition();
inflate=getViewForPosition(container,position)
View inflate = getViewForPosition(container, position);
id=item.getItemId()
int id = item.getItemId();
MyActivity activity = new MyActivity();
String manifestProperty = "../app/src/main/AndroidManifest.xml";
String resProperty = "../app/src/main/res";
cursor=resolver.query(uri,projection,selection,selectionArgs,null)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, null);
cursor=resolver.query(uri,projection,selection,selectionArgs,sortOrder)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, sortOrder);
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=richClass.setter(name)
Method setter = richClass.setter(name);
T obj;
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=methodsByName.get(name)
Method setter = methodsByName.get(name);
int type = TYPE_INT;
Class<?> t = setter.getParameterTypes()[0];
Class<?> t = setter.getParameterTypes()[0];
cursorType=cursor.getType(index)
final int cursorType = cursor.getType(index);
final Object obj;
s=f.getAnnotation(Mapper.class)
Mapper s = f.getAnnotation(Mapper.class);
mm=m.getAnnotation(Mapper.class)
Mapper mm = m.getAnnotation(Mapper.class);
methodName=StringUtil.asCamelifySetMethod(what)
String methodName = StringUtil.asCamelifySetMethod(what);
cursor=getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,null,null,null,null)
Cursor cursor = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
now=System.currentTimeMillis()
long now = System.currentTimeMillis();
List<Contact2> typedCursor = new CursorList<Contact2>(cursor, Contact2.class);
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[a-zA-Z0-9]+")
Pattern p = Pattern.compile("[a-zA-Z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[A-Z][a-z0-9]+")
Pattern p = Pattern.compile("[A-Z][a-z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
SurfaceView first = (SurfaceView) findViewById(R.id.firstSurface);
SurfaceView second = (SurfaceView) findViewById(R.id.secondSurface);
Intent pickVideo = new Intent(Intent.ACTION_PICK);
xml=context.obtainStyledAttributes(attrs,R.styleable.RelativeLayoutWithForeground)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.RelativeLayoutWithForeground);
int foregroundResId = INVALID_FOREGROUND_ID;
drawable=getDrawable(getResources(),foregroundResId)
Drawable drawable = getDrawable(getResources(), foregroundResId);
Bundle args = new Bundle();
enroll=mHotwordDetector.createEnrollIntent()
Intent enroll = mHotwordDetector.createEnrollIntent();

Diff of 01b5fc9d1e174cde689437f0b0d215e538090aff and 707790a4ed408793f33d03655d52576c4bce19d9:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 01b5fc9d1e174cde689437f0b0d215e538090aff to 707790a4ed408793f33d03655d52576c4bce19d9


****Parsing for addition at revision 707790a4ed408793f33d03655d52576c4bce19d9****

Added AccessibilityServices.java to .\/spikes\ repository source files.
Added Action.java to .\/spikes\ repository source files.
Added Actions.java to .\/spikes\ repository source files.
Added ActionsAccessibilityDelegate.java to .\/spikes\ repository source files.
Added ActionsAlertDialogCreator.java to .\/spikes\ repository source files.
Added AccessibilityServicesActivity.java to .\/spikes\ repository source files.
Added Demo.java to .\/spikes\ repository source files.
Added DemoAdapter.java to .\/spikes\ repository source files.
Added CustomActionsActivity.java to .\/spikes\ repository source files.
Added TweetView.java to .\/spikes\ repository source files.
Added DemosActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added DrawerActivity.java to .\/spikes\ repository source files.
Added EarthActivity.java to .\/spikes\ repository source files.
Added ProHaxDrawerActivity.java to .\/spikes\ repository source files.
Added SaturnActivity.java to .\/spikes\ repository source files.
Added LocalPlayerActivity.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added CastApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ComposeSmsActivity.java to .\/spikes\ repository source files.
Added HeadlessSmsSendService.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MmsReceiver.java to .\/spikes\ repository source files.
Added SmsReceiver.java to .\/spikes\ repository source files.
Added ExtendedDemoActivity.java to .\/spikes\ repository source files.
Added ExtendedDemoApplication.java to .\/spikes\ repository source files.
Added SimpleDemoActivity.java to .\/spikes\ repository source files.
Added SimpleDemoApplication.java to .\/spikes\ repository source files.
Added Binder.java to .\/spikes\ repository source files.
Added ConnectedClient.java to .\/spikes\ repository source files.
Added Connection.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnection.java to .\/spikes\ repository source files.
Added ServiceConnectionCallback.java to .\/spikes\ repository source files.
Added EasyCustomTabs.java to .\/spikes\ repository source files.
Added ActionButtonComposer.java to .\/spikes\ repository source files.
Added CloseButtonIconComposer.java to .\/spikes\ repository source files.
Added Composer.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilder.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigator.java to .\/spikes\ repository source files.
Added EasyCustomTabsWebNavigator.java to .\/spikes\ repository source files.
Added ExitAnimationsComposer.java to .\/spikes\ repository source files.
Added IntentCustomizer.java to .\/spikes\ repository source files.
Added MenuItemComposer.java to .\/spikes\ repository source files.
Added NavigationFallback.java to .\/spikes\ repository source files.
Added Navigator.java to .\/spikes\ repository source files.
Added ShowTitleComposer.java to .\/spikes\ repository source files.
Added StartAnimationsComposer.java to .\/spikes\ repository source files.
Added ToolbarColorComposer.java to .\/spikes\ repository source files.
Added UrlBarHidingComposer.java to .\/spikes\ repository source files.
Added WebNavigator.java to .\/spikes\ repository source files.
Added AvailableAppProvider.java to .\/spikes\ repository source files.
Added BestPackageFinder.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProvider.java to .\/spikes\ repository source files.
Added BinderTest.java to .\/spikes\ repository source files.
Added ConnectedClientTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnectionTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigatorTest.java to .\/spikes\ repository source files.
Added BestPackageFinderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProviderTest.java to .\/spikes\ repository source files.
Added ApiPagedChannelHistory.java to .\/spikes\ repository source files.
Added ApiPagedResponse.java to .\/spikes\ repository source files.
Added ChannelHistory.java to .\/spikes\ repository source files.
Added HistoryConverter.java to .\/spikes\ repository source files.
Added Runner.java to .\/spikes\ repository source files.
Added SlackHistoryFetcher.java to .\/spikes\ repository source files.
Added SlackWebService.java to .\/spikes\ repository source files.
Added ApiPagedResponseTest.java to .\/spikes\ repository source files.
Added MainActivityTest.java to .\/spikes\ repository source files.
Added LoremAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added BetterAccountManager.java to .\/spikes\ repository source files.
Added BetterAuthenticator.java to .\/spikes\ repository source files.
Added BetterAuthenticatorActivity.java to .\/spikes\ repository source files.
Added GertHerbAuthenticator.java to .\/spikes\ repository source files.
Added GertHerbAuthenticatorService.java to .\/spikes\ repository source files.
Added NoAccountException.java to .\/spikes\ repository source files.
Added ReactiveAuthenticatorActivity.java to .\/spikes\ repository source files.
Added Token.java to .\/spikes\ repository source files.
Added GertHerbActivity.java to .\/spikes\ repository source files.
Added GertHerbApplication.java to .\/spikes\ repository source files.
Added GertHerbAuthenticationActivity.java to .\/spikes\ repository source files.
Added TypefaceFactory.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added ViewServer.java to .\/spikes\ repository source files.
Added ViewServerManager.java to .\/spikes\ repository source files.
Added DeveloperError.java to .\/spikes\ repository source files.
Added HomeActivity.java to .\/spikes\ repository source files.
Added LoginActivity.java to .\/spikes\ repository source files.
Added LoginView.java to .\/spikes\ repository source files.
Added UserCredentials.java to .\/spikes\ repository source files.
Added FontButton.java to .\/spikes\ repository source files.
Added FontEditText.java to .\/spikes\ repository source files.
Added FontTextView.java to .\/spikes\ repository source files.
Added GithubApi.java to .\/spikes\ repository source files.
Added GithubApiFactory.java to .\/spikes\ repository source files.
Added TokenRequest.java to .\/spikes\ repository source files.
Added TokenResponse.java to .\/spikes\ repository source files.
Added Dummy.java to .\/spikes\ repository source files.
Added DummyTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MainFragment.java to .\/spikes\ repository source files.
Added Attributes.java to .\/spikes\ repository source files.
Added Coordinates.java to .\/spikes\ repository source files.
Added IndicatorCoordinatesCalculator.java to .\/spikes\ repository source files.
Added LandingStrip.java to .\/spikes\ repository source files.
Added MutableCoordinates.java to .\/spikes\ repository source files.
Added OnPagerAdapterChangedListener.java to .\/spikes\ repository source files.
Added PagerAdapterObserver.java to .\/spikes\ repository source files.
Added Scrollable.java to .\/spikes\ repository source files.
Added ScrollingPageChangeListener.java to .\/spikes\ repository source files.
Added State.java to .\/spikes\ repository source files.
Added TabsContainer.java to .\/spikes\ repository source files.
Added CustomLandingStrip.java to .\/spikes\ repository source files.
Added CustomTabActivity.java to .\/spikes\ repository source files.
Added ExampleRainbowLandingStrip.java to .\/spikes\ repository source files.
Added FixedWidthTabActivity.java to .\/spikes\ repository source files.
Added NoFragmentsSimpleTextTabActivity.java to .\/spikes\ repository source files.
Added Data.java to .\/spikes\ repository source files.
Added DemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added SmallDemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerFragment.java to .\/spikes\ repository source files.
Added DemoViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapterState.java to .\/spikes\ repository source files.
Added SimpleTextTabActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AbTestingParamsLoadedCallback.java to .\/spikes\ repository source files.
Added AyBe.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added WeakStartCallback.java to .\/spikes\ repository source files.
Added LeakActivity.java to .\/spikes\ repository source files.
Added NoLeakActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added Bar.java to .\/spikes\ repository source files.
Added Foo.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added FooTest.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added ColorScheme.java to .\/spikes\ repository source files.
Added ColorUtils.java to .\/spikes\ repository source files.
Added DominantColorCalculator.java to .\/spikes\ repository source files.
Added FloatUtils.java to .\/spikes\ repository source files.
Added MedianCutQuantizer.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added PayPalFragment.java to .\/spikes\ repository source files.
Added PayPalHelper.java to .\/spikes\ repository source files.
Added MaxLengthMessageComposer.java to .\/spikes\ repository source files.
Added MessageComposer.java to .\/spikes\ repository source files.
Added TwitterMessageComposer.java to .\/spikes\ repository source files.
Added DisabledMruPersister.java to .\/spikes\ repository source files.
Added MruPersister.java to .\/spikes\ repository source files.
Added SharedPreferencesMruPersister.java to .\/spikes\ repository source files.
Added OnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added PriorityShareDialog.java to .\/spikes\ repository source files.
Added PrioritySharer.java to .\/spikes\ repository source files.
Added ShareTargetsAdapter.java to .\/spikes\ repository source files.
Added SimpleOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added TargetApps.java to .\/spikes\ repository source files.
Added TwitterOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AdvancedActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SimpleActivity.java to .\/spikes\ repository source files.
Added LockingActivity.java to .\/spikes\ repository source files.
Added PostLockingActivity.java to .\/spikes\ repository source files.
Added PreLockingActivity.java to .\/spikes\ repository source files.
Added DummyAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added NovoStaggeredGridView.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SpikeApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SwipeableView.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MyClass.java to .\/spikes\ repository source files.
Added MyClassTest.java to .\/spikes\ repository source files.
Added MyAndroidClassTest.java to .\/spikes\ repository source files.
Added RobolectricGradleTestRunner.java to .\/spikes\ repository source files.
Added Mapper.java to .\/spikes\ repository source files.
Added Query.java to .\/spikes\ repository source files.
Added TypedResolver.java to .\/spikes\ repository source files.
Added CursorList.java to .\/spikes\ repository source files.
Added CursorListIterator.java to .\/spikes\ repository source files.
Added CursorMarshaller.java to .\/spikes\ repository source files.
Added EmptyListIterator.java to .\/spikes\ repository source files.
Added ReflectionCursorMarshaller.java to .\/spikes\ repository source files.
Added RichClass.java to .\/spikes\ repository source files.
Added Setter.java to .\/spikes\ repository source files.
Added Function.java to .\/spikes\ repository source files.
Added TypedElementLoader.java to .\/spikes\ repository source files.
Added TypedLoader.java to .\/spikes\ repository source files.
Added Marshaller.java to .\/spikes\ repository source files.
Added ObjectMapper.java to .\/spikes\ repository source files.
Added TypedActivity.java to .\/spikes\ repository source files.
Added StringUtil.java to .\/spikes\ repository source files.
Added MyObject.java to .\/spikes\ repository source files.
Added MediaPlayerSwitcherActivity.java to .\/spikes\ repository source files.
Added VideoPlayerService.java to .\/spikes\ repository source files.
Added RelativeLayoutWithForeground.java to .\/spikes\ repository source files.
Added DemoActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added RecognitionService.java to .\/spikes\ repository source files.
Added SessionService.java to .\/spikes\ repository source files.
Added SettingsActivity.java to .\/spikes\ repository source files.
Added SmartContextInteractionService.java to .\/spikes\ repository source files.
AccessibilityManager accessibilityManager = (AccessibilityManager) context.getSystemService(Context.ACCESSIBILITY_SERVICE);
enabledServices=getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN)
List<AccessibilityServiceInfo> enabledServices = getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN);
List<AccessibilityServiceInfo> enabledServices = getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN);
Action otherAction = (Action) o;
int result = id;
Actions otherActions = (Actions) o;
label=resources.getString(action.getLabel())
String label = resources.getString(action.getLabel());
action=actions.findActionById(actionId)
Action action = actions.findActionById(actionId);
action=actions.getAction(which)
Action action = actions.getAction(which);
CharSequence[] itemLabels = new CharSequence[actions.getCount()];
View view = convertView;
demo=getItem(position)
Demo demo = getItem(position);
Intent intent = new Intent(context, demo.activityClass);
layoutInflater=LayoutInflater.from(parent.getContext())
LayoutInflater layoutInflater = LayoutInflater.from(parent.getContext());
TweetView tweetView = (TweetView) findViewById(R.id.tweet);
actions=createActions(tweet,listener)
final Actions actions = createActions(tweet, listener);
ListView listView = ((ListView) findViewById(R.id.list));
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
final DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close) {

            @Override
            public void onDrawerClosed(View drawerView) {
                super.onDrawerClosed(drawerView);
                // waiting for the drawer to close, then navigating seems to cause issue.
                // why wait for the drawer to close? jankiness.
                if (pendingNavigationClick != null) {
                    startActivity(pendingNavigationClick);
                    pendingNavigationClick = null;
                }
            }

        };
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close);
Intent intent;
b=getIntent().getExtras()
Bundle b = getIntent().getExtras();
mShouldStartPlayback=b.getBoolean("shouldStart")
boolean mShouldStartPlayback = b.getBoolean("shouldStart");
startPosition=b.getInt("startPosition",0)
int startPosition = b.getInt("startPosition", 0);
currentPos=mVideoView.getCurrentPosition()
int currentPos = mVideoView.getCurrentPosition();
String msg;
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, mDisplaySize.y + getActionBar().getHeight());
mm=mSelectedMedia.getMetadata()
MediaMetadata mm = mSelectedMedia.getMetadata();
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, (int) (mDisplaySize.x * ASPECT_RATIO));
WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
width=display.getWidth()
int width = display.getWidth();
height=display.getHeight()
int height = display.getHeight();
int resourceId = 0;
String videoUrl = "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4#sthash.rJ5rPZy8.dpuf";
String title = "Jahre Philharmonie";
String description = "Awesome film you must watch!";
String author = "Blundell";
String thumbUrl = "http://www.ustream.tv/blog/wp-content/uploads/2013/10/simply-go-live.png";
MediaMetadata metadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE);
mediaInfo=new MediaInfo.Builder(videoUrl).setMetadata(metadata).setStreamType(MediaInfo.STREAM_TYPE_BUFFERED).setContentType("video/mp4").build()
MediaInfo mediaInfo = new MediaInfo.Builder(videoUrl)
                        .setMetadata(metadata)
                        .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)
                        .setContentType("video/mp4")
                        .build();
Intent intent = new Intent(MainActivity.this, LocalPlayerActivity.class);
preferences=getPreferences(MODE_PRIVATE)
SharedPreferences preferences = getPreferences(MODE_PRIVATE);
defaultSmsPackage=Telephony.Sms.getDefaultSmsPackage(this)
String defaultSmsPackage = Telephony.Sms.getDefaultSmsPackage(this);
Intent intent = new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
availableAppProvider=EasyCustomTabs.getInstance()
AvailableAppProvider availableAppProvider = EasyCustomTabs.getInstance();
ConnectedClient connectedClient = new ConnectedClient(client);
binder=Binder.newInstance()
Binder binder = Binder.newInstance();
List<Composer> composerList = new ArrayList<>();
customTabsSession=connection.newSession()
CustomTabsSession customTabsSession = connection.newSession();
CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(customTabsSession);
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
context=EasyCustomTabs.getInstance().getContext()
Context context = EasyCustomTabs.getInstance().getContext();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
packagesSupportingCustomTabs=getPackagesSupportingCustomTabs()
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
defaultPackage=getDefaultPackage()
String defaultPackage = getDefaultPackage();
defaultActivityInfo=packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK,0)
ResolveInfo defaultActivityInfo = packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK, 0);
String packageName = defaultActivityInfo.activityInfo.packageName;
resolvedInfoList=packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK,0)
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<String> packagesSupportingCustomTabs = new ArrayList<>();
Intent serviceIntent = new Intent();
bestPackageFinder=BestPackageFinder.newInstance()
BestPackageFinder bestPackageFinder = BestPackageFinder.newInstance();
packageName=bestPackageFinder.findBestPackage()
String packageName = bestPackageFinder.findBestPackage();
resolveInfo=createResolveInfoFor(packageName)
ResolveInfo resolveInfo = createResolveInfoFor(packageName);
ResolveInfo resolveInfo = new ResolveInfo();
List<ResolveInfo> resolveInfoList = new ArrayList<>();
defaultPackageResolveInfo=createResolveInfoFor(packageName)
ResolveInfo defaultPackageResolveInfo = createResolveInfoFor(packageName);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
oldestApiMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage oldestApiMessage = apiMessages.get(apiMessages.size() - 1);
String lastResponseEpochTime = oldestApiMessage.timeStamp;
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
latestMessage=latestMessages.get(latestMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage latestMessage = latestMessages.get(latestMessages.size() - 1);
latestMessageDateTime=convertToLocalDateTime(latestMessage.timeStamp)
LocalDateTime latestMessageDateTime = convertToLocalDateTime(latestMessage.timeStamp);
List<ChannelHistory.Message> messages = new ArrayList<>();
historyFrom=getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1))
LocalDateTime historyFrom = getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1));
historyTo=getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0))
LocalDateTime historyTo = getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0));
String text = apiMessage.text;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
lastMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage lastMessage = apiMessages.get(apiMessages.size() - 1);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
firstMessage=apiMessages.get(0)
ApiPagedChannelHistory.ApiMessage firstMessage = apiMessages.get(0);
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
String slackToken = args[0];
retrofit=new Retrofit.Builder().baseUrl("https://slack.com/api/").addConverterFactory(GsonConverterFactory.create()).build()
Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://slack.com/api/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();
slackWebService=retrofit.create(SlackWebService.class)
SlackWebService slackWebService = retrofit.create(SlackWebService.class);
slackHistoryFetcher=SlackHistoryFetcher.from(slackWebService,slackToken)
SlackHistoryFetcher slackHistoryFetcher = SlackHistoryFetcher.from(slackWebService, slackToken);
start=LocalDateTime.now()
LocalDateTime start = LocalDateTime.now();
end=LocalDateTime.now().minusDays(7)
LocalDateTime end = LocalDateTime.now().minusDays(7);
channelHistory=slackHistoryFetcher.getChannelHistory(start,end)
ChannelHistory channelHistory = slackHistoryFetcher.getChannelHistory(start, end);
HistoryConverter historyConverter = new HistoryConverter();
ApiPagedResponse apiPagedResponse = new ApiPagedResponse(start);
response=fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime())
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
apiPagedChannelHistory=response.body()
ApiPagedChannelHistory apiPagedChannelHistory = response.body();
channelHistory=slackWebService.getChannelHistory(slackToken,channel,lastResponseEpochTime,NUMBER_OF_RESULTS)
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
ApiPagedChannelHistory apiPagedChannelHistory = new ApiPagedChannelHistory();
ApiPagedChannelHistory.ApiMessage apiMessage = new ApiPagedChannelHistory.ApiMessage();
final TextView textView = new TextView(context);
emptyView=findViewById(R.id.empty_view)
View emptyView = findViewById(R.id.empty_view);
final Integer action = values[0];
LoremAdapter loremAdapter = new LoremAdapter();
accounts=accountManager.getAccountsByType(accountType)
Account[] accounts = accountManager.getAccountsByType(accountType);
Bundle result;
Bundle result;
Bundle result = new Bundle();
activity=createLoginIntent(context,accountType,authTokenType,requiredFeatures,options)
Intent activity = createLoginIntent(context, accountType, authTokenType, requiredFeatures, options);
Bundle bundle = new Bundle();
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
accounts=accountManager.getAccountsByType(authTokenType)
Account[] accounts = accountManager.getAccountsByType(authTokenType);
bundle=createResponseBundle(token)
Bundle bundle = createResponseBundle(token);
accountManager=AccountManager.get(this.getApplicationContext())
AccountManager accountManager = AccountManager.get(this.getApplicationContext());
Account account = new Account(token.getUserName(), getAccountName());
Bundle bundle = new Bundle();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
GertHerbAuthenticator authenticator = new GertHerbAuthenticator(this);
fontId=getFontId(context,attrs)
int fontId = getFontId(context, attrs);
fontType=getFontType(fontId)
FontType fontType = getFontType(fontId);
typedArray=context.obtainStyledAttributes(attrs,R.styleable.CustomTextAppearance)
TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CustomTextAppearance);
typeface=createTypeFace(context,fontType)
Typeface typeface = createTypeFace(context, fontType);
info=context.getApplicationInfo()
ApplicationInfo info = context.getApplicationInfo();
name=activity.getTitle().toString()
String name = activity.getTitle().toString();
client=mServer.accept()
Socket client = mServer.accept();
boolean result;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
BufferedReader in = null;
request=in.readLine()
final String request = in.readLine();
String command;
String parameters;
index=request.indexOf(' ')
int index = request.indexOf(' ');
boolean result;
boolean success = true;
BufferedWriter out = null;
index=parameters.indexOf(' ')
int index = parameters.indexOf(' ');
code=parameters.substring(0,index)
final String code = parameters.substring(0, index);
int hashCode = (int) Long.parseLong(code, 16);
window=findWindow(hashCode)
final View window = findWindow(hashCode);
dispatch=ViewDebug.class.getDeclaredMethod("dispatchCommand",View.class,String.class,String.class,OutputStream.class)
final Method dispatch = ViewDebug.class.getDeclaredMethod("dispatchCommand",
                        View.class, String.class, String.class, OutputStream.class);
View window = null;
boolean result = true;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
boolean result = true;
String focusName = null;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
View focusedWindow = null;
BufferedWriter out = null;
boolean needWindowListUpdate = false;
boolean needFocusedWindowUpdate = false;
BetterAccountManager accountManager = new BetterAccountManager(this, getString(R.string.account_type), getString(R.string.token_type), null);
loginView=Views.findById(this,R.id.login_view)
LoginView loginView = Views.findById(this, R.id.login_view);
authorizationApi=new GithubApiFactory().createAuthorizationApi(credentials.username,credentials.password)
GithubApi authorizationApi = new GithubApiFactory().createAuthorizationApi(credentials.username, credentials.password);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
Endpoint endpoint = new Endpoint() {
            @Override
            public String getUrl() {
                return GITHUB_API_URL;
            }

            @Override
            public String getName() {
                return "Live";
            }
        };
interceptor=createAuthorizationRequestInterceptor(username,password)
RequestInterceptor interceptor = createAuthorizationRequestInterceptor(username, password);
restAdapter=createRestAdapter(endpoint,interceptor)
RestAdapter restAdapter = createRestAdapter(endpoint, interceptor);
Dummy dummy = new Dummy();
result=dummy.explodes()
boolean result = dummy.explodes();
String base64EncodedPublicKey = "CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE";
premiumPurchase=inventory.getPurchase(SKU_PREMIUM)
Purchase premiumPurchase = inventory.getPurchase(SKU_PREMIUM);
infiniteGasPurchase=inventory.getPurchase(SKU_INFINITE_GAS)
Purchase infiniteGasPurchase = inventory.getPurchase(SKU_INFINITE_GAS);
gasPurchase=inventory.getPurchase(SKU_GAS)
Purchase gasPurchase = inventory.getPurchase(SKU_GAS);
String payload = "";
String payload = "";
String payload = "";
payload=p.getDeveloperPayload()
String payload = p.getDeveloperPayload();
int index = mTank >= TANK_RES_IDS.length ? TANK_RES_IDS.length - 1 : mTank;
AlertDialog.Builder bld = new AlertDialog.Builder(this);
spe=getPreferences(MODE_PRIVATE).edit()
SharedPreferences.Editor spe = getPreferences(MODE_PRIVATE).edit();
sp=getPreferences(MODE_PRIVATE)
SharedPreferences sp = getPreferences(MODE_PRIVATE);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                                  + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                    | ((source[d + 1 + off] << 24) >>> 16)
                    | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                    | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                                   "-1002:Bad response received/" +
                                   "-1003:Purchase signature verification failed/" +
                                   "-1004:Send intent failed/" +
                                   "-1005:User cancelled/" +
                                   "-1006:Unknown purchase response/" +
                                   "-1007:Missing token/" +
                                   "-1008:Unknown error/" +
                                   "-1009:Subscriptions not available/" +
                                   "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(),
                    itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                        | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                        | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                            | ((source[d + 1 + off] << 24) >>> 16)
                            | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                            | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                "-1002:Bad response received/" +
                "-1003:Purchase signature verification failed/" +
                "-1004:Send intent failed/" +
                "-1005:User cancelled/" +
                "-1006:Unknown purchase response/" +
                "-1007:Missing token/" +
                "-1008:Unknown error/" +
                "-1009:Subscriptions not available/" +
                "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(), itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
responseCode=result.getResponse()
int responseCode = result.getResponse();
sku=purchase.getSku()
String sku = purchase.getSku();
skuDetails=inv.getSkuDetails(sku)
SkuDetails skuDetails = inv.getSkuDetails(sku);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
Button purchaseFiveButton = (Button) rootView.findViewById(R.id.fragment_main_button_purchase_five_coins);
xml=context.obtainStyledAttributes(attrs,R.styleable.LandingStrip)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.LandingStrip);
tabLayoutId=xml.getResourceId(R.styleable.LandingStrip_tabLayoutId,MISSING_TAB_LAYOUT_ID)
int tabLayoutId = xml.getResourceId(R.styleable.LandingStrip_tabLayoutId, MISSING_TAB_LAYOUT_ID);
indicatorColour=xml.getResourceId(R.styleable.LandingStrip_indicatorColor,DEFAULT_INDICATOR_COLOUR)
int indicatorColour = xml.getResourceId(R.styleable.LandingStrip_indicatorColor, DEFAULT_INDICATOR_COLOUR);
indicatorHeight=getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight,DEFAULT_INDICATOR_HEIGHT,xml)
int indicatorHeight = getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight, DEFAULT_INDICATOR_HEIGHT, xml);
tabsPaddingLeft=getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingLeft = getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding, DEFAULT_TABS_PADDING, xml);
tabsPaddingRight=getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingRight = getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding, DEFAULT_TABS_PADDING, xml);
MutableCoordinates drawCurrentTabCoordinates = new MutableCoordinates();
MutableCoordinates drawNextTabCoordinates = new MutableCoordinates();
MutableCoordinates drawMovingIndicatorCoordinates = new MutableCoordinates();
currentTab=tabsContainer.getTabAt(currentPosition)
View currentTab = tabsContainer.getTabAt(currentPosition);
currentTabStart=currentTab.getLeft()
float currentTabStart = currentTab.getLeft();
currentTabEnd=currentTab.getRight()
float currentTabEnd = currentTab.getRight();
nextTab=tabsContainer.getTabAt(currentPosition + 1)
View nextTab = tabsContainer.getTabAt(currentPosition + 1);
nextTabPositionOffset=getFractionFrom(pagePositionOffset)
float nextTabPositionOffset = getFractionFrom(pagePositionOffset);
indicatorStart=getIndicatorPosition(nextTab.getStart(),pagePositionOffset,currentTab.getStart(),nextTabPositionOffset)
float indicatorStart = getIndicatorPosition(nextTab.getStart(), pagePositionOffset, currentTab.getStart(), nextTabPositionOffset);
indicatorEnd=getIndicatorPosition(nextTab.getEnd(),pagePositionOffset,currentTab.getEnd(),nextTabPositionOffset)
float indicatorEnd = getIndicatorPosition(nextTab.getEnd(), pagePositionOffset, currentTab.getEnd(), nextTabPositionOffset);
height=getHeight()
int height = getHeight();
tabCount=pagerAdapter.getCount()
int tabCount = pagerAdapter.getCount();
title=pagerAdapter.getPageTitle(position)
CharSequence title = pagerAdapter.getPageTitle(position);
inflatedTabView=tabsContainer.inflateTab(layoutInflater,attributes.getTabLayoutId())
View inflatedTabView = tabsContainer.inflateTab(layoutInflater, attributes.getTabLayoutId());
int position = (int) view.getTag(TAG_KEY_POSITION);
scrollOffset=getHorizontalScrollOffset(position,positionOffset)
int scrollOffset = getHorizontalScrollOffset(position, positionOffset);
newScrollX=calculateScrollOffset(position,scrollOffset,positionOffset)
float newScrollX = calculateScrollOffset(position, scrollOffset, positionOffset);
tabWidth=tabsContainer.getTabAt(position).getWidth()
int tabWidth = tabsContainer.getTabAt(position).getWidth();
tabForPosition=tabsContainer.getTabAt(position)
View tabForPosition = tabsContainer.getTabAt(position);
float tabStartX = tabForPosition.getLeft() + scrollOffset;
int viewMiddleOffset = getTabParentWidth() / 2;
float tabCenterOffset = (tabForPosition.getRight() - tabForPosition.getLeft()) * 0.5F;
nextTabDelta=getNextTabDelta(position,pagerOffset,tabForPosition)
float nextTabDelta = getNextTabDelta(position, pagerOffset, tabForPosition);
LinearLayout tabsContainerView = new LinearLayout(context);
tab=getTabAt(index)
View tab = getTabAt(index);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
position=indicatorCoordinates.getStart()
float position = indicatorCoordinates.getStart();
lastTabOffset=((ViewGroup)getChildAt(0)).getChildAt(getChildCount() - 1).getWidth()
float lastTabOffset = ((ViewGroup) getChildAt(0)).getChildAt(getChildCount() - 1).getWidth();
frequency=getOneCycle(lastTabOffset)
float frequency = getOneCycle(lastTabOffset);
r=toHex(calculateColour(position,frequency,PHASE_RED,AMPLITUDE,CENTER_FREQUENCY))
String r = toHex(calculateColour(position, frequency, PHASE_RED, AMPLITUDE, CENTER_FREQUENCY));
g=toHex(calculateColour(position,frequency,PHASE_GREEN,AMPLITUDE,CENTER_FREQUENCY))
String g = toHex(calculateColour(position, frequency, PHASE_GREEN, AMPLITUDE, CENTER_FREQUENCY));
b=toHex(calculateColour(position,frequency,PHASE_BLUE,AMPLITUDE,CENTER_FREQUENCY))
String b = toHex(calculateColour(position, frequency, PHASE_BLUE, AMPLITUDE, CENTER_FREQUENCY));
height=getHeight()
int height = getHeight();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPagerFragment viewPagerFragment = new ViewPagerFragment();
Bundle bundle = new Bundle();
TextView view = (TextView) layoutInflater.inflate(R.layout.view_demo, container, false);
currentPosition=viewPagerAdapterState.getCurrentPosition()
int currentPosition = viewPagerAdapterState.getCurrentPosition();
view=getView(container,position)
View view = getView(container, position);
parcelableSparseArray=viewPagerAdapterState.get(position)
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
View view = (View) object;
SparseArray<Parcelable> viewState = new SparseArray<>();
position=entry.getValue()
int position = entry.getValue();
view=entry.getKey()
View view = entry.getKey();
bundle=in.readBundle()
Bundle bundle = in.readBundle();
Map<Integer, SparseArray<Parcelable>> viewStates = new HashMap<>(bundle.keySet().size());
sparseParcelableArray=bundle.getSparseParcelableArray(key)
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
primaryItemPosition=in.readInt()
int primaryItemPosition = in.readInt();
Bundle bundle = new Bundle();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
final TextView abText = (TextView) findViewById(R.id.ab_text);
final AyBe ayBe = new AyBe();
id=item.getItemId()
int id = item.getItemId();
callback=weakCallback.get()
AbTestingParamsLoadedCallback callback = weakCallback.get();
WeakReference<NoLeakActivity> weakNoLeakActivity = new WeakReference<NoLeakActivity>(noLeakActivity);
noLeakActivity=weakNoLeakActivity.get()
NoLeakActivity noLeakActivity = weakNoLeakActivity.get();
RecyclerView recyclerView = (RecyclerView) layoutInflater.inflate(R.layout.view_page, viewGroup, false);
itemView=layoutInflater.inflate(R.layout.view_item,parent,false)
View itemView = layoutInflater.inflate(R.layout.view_item, parent, false);
actual=foo.twice(HALF)
int actual = foo.twice(HALF);
int expected = WHOLE;
final float inverseRatio = 1f - ratio;
float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRatio);
float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRatio);
float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRatio);
hsv=node.getHsv()
float[] hsv = node.getHsv();
width=bitmap.getWidth()
final int width = bitmap.getWidth();
height=bitmap.getHeight()
final int height = bitmap.getHeight();
final int[] rgbPixels = new int[width * height];
final MedianCutQuantizer mcq = new MedianCutQuantizer(rgbPixels, NUM_COLORS);
primaryAccentColor=findPrimaryAccentColor()
final ColorNode primaryAccentColor = findPrimaryAccentColor();
secondaryAccentColor=findSecondaryAccentColor(primaryAccentColor)
final ColorNode secondaryAccentColor = findSecondaryAccentColor(primaryAccentColor);
tertiaryAccentColor=findTertiaryAccentColor(primaryAccentColor,secondaryAccentColor)
final int tertiaryAccentColor = findTertiaryAccentColor(
                primaryAccentColor, secondaryAccentColor);
primaryTextColor=findPrimaryTextColor(primaryAccentColor)
final int primaryTextColor = findPrimaryTextColor(primaryAccentColor);
secondaryTextColor=findSecondaryTextColor(primaryAccentColor)
final int secondaryTextColor = findSecondaryTextColor(primaryAccentColor);
final float primaryHue = primary.getHsv()[0];
final float candidateHue = candidate.getHsv()[0];
copy=Arrays.copyOf(palette,palette.length)
final MedianCutQuantizer.ColorNode[] copy = Arrays.copyOf(palette, palette.length);
maxCount=palette[0].getCount()
final float maxCount = palette[0].getCount();
lhsWeight=calculateWeight(lhs,maxCount)
final float lhsWeight = calculateWeight(lhs, maxCount);
rhsWeight=calculateWeight(rhs,maxCount)
final float rhsWeight = calculateWeight(rhs, maxCount);
float sum = 0;
float sumWeight = 0;
float value = values[i];
float weight = values[i + 1];
ColorHistogram colorHist = new ColorHistogram(pixels);
K=colorHist.getNumberOfColors()
int K = colorHist.getNumberOfColors();
ColorNode[] rCols = null;
rgb=colorHist.getColor(i)
int rgb = colorHist.getColor(i);
cnt=colorHist.getCount(i)
int cnt = colorHist.getCount(i);
ColorBox initialBox = new ColorBox(0, K - 1, 0);
List<ColorBox> colorSet = new ArrayList<ColorBox>();
int k = 1;
boolean done = false;
nextBox=findBoxToSplit(colorSet)
ColorBox nextBox = findBoxToSplit(colorSet);
newBox=nextBox.splitBox()
ColorBox newBox = nextBox.splitBox();
color=findClosestColor(pixels[i])
ColorNode color = findClosestColor(pixels[i]);
idx=findClosestColorIndex(rgb)
int idx = findClosestColorIndex(rgb);
red=Color.red(rgb)
int red = Color.red(rgb);
grn=Color.green(rgb)
int grn = Color.green(rgb);
blu=Color.blue(rgb)
int blu = Color.blue(rgb);
int minIdx = 0;
int minDistance = Integer.MAX_VALUE;
ColorNode color = quantColors[i];
d2=color.distance2(red,grn,blu)
int d2 = color.distance2(red, grn, blu);
ColorBox boxToSplit = null;
int minLevel = Integer.MAX_VALUE;
n=colorBoxes.size()
int n = colorBoxes.size();
ColorNode[] avgColors = new ColorNode[n];
int i = 0;
int dr = this.red - red;
int dg = this.grn - grn;
int db = this.blu - blu;
ColorNode color = imageColors[i];
int r = color.red;
int g = color.grn;
int b = color.blu;
dim=getLongestColorDimension()
ColorDimension dim = getLongestColorDimension();
med=findMedian(dim)
int med = findMedian(dim);
int nextLevel = level + 1;
ColorBox newBox = new ColorBox(med + 1, upper, nextLevel);
int rLength = rmax - rmin;
int gLength = gmax - gmin;
int bLength = bmax - bmin;
int half = count / 2;
int nPixels, median;
int rSum = 0;
int gSum = 0;
int bSum = 0;
int n = 0;
ColorNode ci = imageColors[i];
int cnt = ci.cnt;
double nd = n;
int avgRed = (int) (0.5 + rSum / nd);
int avgGrn = (int) (0.5 + gSum / nd);
int avgBlu = (int) (0.5 + bSum / nd);
s=this.getClass().getSimpleName()
String s = this.getClass().getSimpleName();
int i = 0;
int N = pixelsOrig.length;
int[] pixelsCpy = new int[N];
int k = -1;
int curColor = -1;
int nColors = k + 1;
id=item.getItemId()
int id = item.getItemId();
Intent intent = new Intent();
bitmap=((BitmapDrawable)imageView.getDrawable()).getBitmap()
Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap();
DominantColorCalculator dominantColorCalculator = new DominantColorCalculator(bitmap);
selectedImageUri=data.getData()
Uri selectedImageUri = data.getData();
selectedImagePath=getPath(selectedImageUri)
String selectedImagePath = getPath(selectedImageUri);
String[] projection = {MediaStore.Images.Media.DATA};
cursor=managedQuery(uri,projection,null,null,null)
Cursor cursor = managedQuery(uri, projection, null, null, null);
column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)
int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
LinearLayout rootView = (LinearLayout) inflater.inflate(R.layout.fragment_main, container, false);
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
preapprovalButton=payPal.getCheckoutButton(getActivity(),PayPal.BUTTON_194x37,CheckoutButton.TEXT_PAY)
CheckoutButton preapprovalButton = payPal.getCheckoutButton(getActivity(), PayPal.BUTTON_194x37, CheckoutButton.TEXT_PAY);
preapprovalIntent=payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY)
Intent preapprovalIntent = payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY);
String resultTitle = "";
String resultInfo = "";
String resultExtra = "";
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
PayPalPreapproval preapproval = new PayPalPreapproval();
preapproval=createPreapproval(preapprovalKey)
PayPalPreapproval preapproval = createPreapproval(preapprovalKey);
Bundle bundle = new Bundle();
int availableLength = maxLength;
StringBuilder stringBuilder = new StringBuilder(maxLength);
prefixAndSuffixLength=computeAppendedLengthIncludingSeparatorSpaces(prefix,suffix)
int prefixAndSuffixLength = computeAppendedLengthIncludingSeparatorSpaces(prefix, suffix);
urlLength=computeUrlLengthIncludingSeparatorSpace(url)
int urlLength = computeUrlLengthIncludingSeparatorSpace(url);
trimmedSubject=ellipsizeTextIfExceedsMaxLength(subject,availableLength)
String trimmedSubject = ellipsizeTextIfExceedsMaxLength(subject, availableLength);
int length = 0;
preferences=context.getSharedPreferences(MRU_PREFERENCES,Context.MODE_PRIVATE)
SharedPreferences preferences = context.getSharedPreferences(MRU_PREFERENCES, Context.MODE_PRIVATE);
args=getArguments()
Bundle args = getArguments();
themeResId=getThemeResIdIfProvidedIn(args)
int themeResId = getThemeResIdIfProvidedIn(args);
title=getTitleIfProvidedIn(args)
CharSequence title = getTitleIfProvidedIn(args);
builder=createDialogBuilder(themeResId).setCancelable(true).setView(dialogView)
AlertDialog.Builder builder = createDialogBuilder(themeResId)
                .setCancelable(true)
                .setView(dialogView);
inflater=getActivity().getLayoutInflater()
LayoutInflater inflater = getActivity().getLayoutInflater();
GridView gridView = (GridView) rootView.findViewById(R.id.ps__dialog_grid);
targetApps=extractTargetAppsFrom(args)
TargetApps targetApps = extractTargetAppsFrom(args);
allShareTargets=getAvailableShareTargets(sharingIntent)
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
priorityAppInfos=createPriorityResolveInfoList(targetApps,allShareTargets)
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
otherAppInfos=createOtherAppsResolveInfoList(priorityAppInfos,allShareTargets)
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
resolveInfos=targetApps.extractTargetResolveInfosFrom(allShareTargets)
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
mruResolveInfo=findMruResolveInfoIn(allShareTargets)
ResolveInfo mruResolveInfo = findMruResolveInfoIn(allShareTargets);
List<ResolveInfo> otherAppsInfos = new ArrayList<ResolveInfo>(allAppInfos);
mruPackageName=persister.getLastUsedTarget()
String mruPackageName = persister.getLastUsedTarget();
String packageName = resolveInfo.activityInfo.packageName;
packageManager=getActivity().getPackageManager()
PackageManager packageManager = getActivity().getPackageManager();
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
View buttonStrip = (View) showMoreButton.getParent();
gridView=getGridView()
GridView gridView = getGridView();
intent=wrapIntentWithExplicitTargetComponentForItem(position,sharingIntent)
Intent intent = wrapIntentWithExplicitTargetComponentForItem(position, sharingIntent);
Intent intent = new Intent(sharingIntent);
ActivityInfo activity = adapter.getItem(position).activityInfo;
ComponentName name = new ComponentName(activity.applicationInfo.packageName, activity.name);
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
PriorityShareDialog dialog = new PriorityShareDialog();
Bundle args = new Bundle();
sharingIntent=createSharingIntent()
Intent sharingIntent = createSharingIntent();
fragmentManager=activity.getFragmentManager()
FragmentManager fragmentManager = activity.getFragmentManager();
Intent intent = new Intent(Intent.ACTION_SEND);
dialog=new PriorityShareDialog.Builder().setTitle(title).setTargetApps(targetApps).setSharingIntent(sharingIntent).setOnPrepareSharingIntentListener(listener).setShowMostRecentlyUsed(showMostRecentlyUsed).build()
PriorityShareDialog dialog = new PriorityShareDialog.Builder()
                .setTitle(title)
                .setTargetApps(targetApps)
                .setSharingIntent(sharingIntent)
                .setOnPrepareSharingIntentListener(listener)
                .setShowMostRecentlyUsed(showMostRecentlyUsed)
                .build();
PrioritySharer prioritySharer = new PrioritySharer();
prioritySharer=build()
PrioritySharer prioritySharer = build();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
layoutInflater=LayoutInflater.from(context)
LayoutInflater layoutInflater = LayoutInflater.from(context);
iconSizePx=getIconSizePx(context.getResources())
int iconSizePx = getIconSizePx(context.getResources());
ArrayList<ResolveInfo> sortedList = new ArrayList<ResolveInfo>(resolveInfoList);
int otherAppsCountMaybe = showAllApps ? otherAppInfos.size() : 0;
firstOtherAppsItemPosition=priorityAppInfos.size()
int firstOtherAppsItemPosition = priorityAppInfos.size();
int offsetPosition = position - firstOtherAppsItemPosition;
TextView textView;
textView=initializeItemViewIfNecessary(convertView,R.layout.ps__grid_item_share,parent)
TextView textView = initializeItemViewIfNecessary(convertView, R.layout.ps__grid_item_share, parent);
info=getItem(position)
ResolveInfo info = getItem(position);
icon=info.loadIcon(packageManager)
Drawable icon = info.loadIcon(packageManager);
arraySize=in.readInt()
int arraySize = in.readInt();
String[] packageNames = new String[arraySize];
arraySize=targetPackages.size()
int arraySize = targetPackages.size();
String[] packagesArray = new String[arraySize];
SparseArray<ResolveInfo> matchedResolveInfos = new SparseArray<ResolveInfo>(targetPackages.size());
String packageName = info.activityInfo.packageName;
index=indexOfItemInto(packageName,targetPackages)
int index = indexOfItemInto(packageName, targetPackages);
sparseArraySize=sparseArray.size()
int sparseArraySize = sparseArray.size();
ArrayList<T> list = new ArrayList<T>(sparseArraySize);
int i = 0;
originalSubject=intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT)
CharSequence originalSubject = intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT);
String subject = originalSubject != null ? originalSubject.toString() : null;
composer=createComposer()
MessageComposer composer = createComposer();
component=intent.getComponent()
ComponentName component = intent.getComponent();
targetPackageName=component.getPackageName()
String targetPackageName = component.getPackageName();
adapter=ArrayAdapter.createFromResource(this,R.array.target_apps,android.R.layout.simple_spinner_item)
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
EditText text = (EditText) findViewById(R.id.text);
EditText title = (EditText) findViewById(R.id.title);
EditText mimeType = (EditText) findViewById(R.id.mime_type);
EditText dataUri = (EditText) findViewById(R.id.data_uri);
Switch showMostRecentlyUsed = (Switch) findViewById(R.id.show_most_recently_used);
uriString=dataUri.getText().toString()
String uriString = dataUri.getText().toString();
EditText text = (EditText) findViewById(R.id.text);
TextView textView = (TextView) convertView.findViewById(R.id.positionView);
colorView=convertView.findViewById(R.id.colorView)
View colorView = convertView.findViewById(R.id.colorView);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
offset=headerPlaceholder.getTop()
int offset = headerPlaceholder.getTop();
Integer item = COLORS[position];
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
firstVisiblePosition=grid.getFirstVisiblePosition()
int firstVisiblePosition = grid.getFirstVisiblePosition();
inflate=getViewForPosition(container,position)
View inflate = getViewForPosition(container, position);
id=item.getItemId()
int id = item.getItemId();
MyActivity activity = new MyActivity();
String manifestProperty = "../app/src/main/AndroidManifest.xml";
String resProperty = "../app/src/main/res";
cursor=resolver.query(uri,projection,selection,selectionArgs,null)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, null);
cursor=resolver.query(uri,projection,selection,selectionArgs,sortOrder)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, sortOrder);
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=richClass.setter(name)
Method setter = richClass.setter(name);
T obj;
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=methodsByName.get(name)
Method setter = methodsByName.get(name);
int type = TYPE_INT;
Class<?> t = setter.getParameterTypes()[0];
Class<?> t = setter.getParameterTypes()[0];
cursorType=cursor.getType(index)
final int cursorType = cursor.getType(index);
final Object obj;
s=f.getAnnotation(Mapper.class)
Mapper s = f.getAnnotation(Mapper.class);
mm=m.getAnnotation(Mapper.class)
Mapper mm = m.getAnnotation(Mapper.class);
methodName=StringUtil.asCamelifySetMethod(what)
String methodName = StringUtil.asCamelifySetMethod(what);
cursor=getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,null,null,null,null)
Cursor cursor = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
now=System.currentTimeMillis()
long now = System.currentTimeMillis();
List<Contact2> typedCursor = new CursorList<Contact2>(cursor, Contact2.class);
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[a-zA-Z0-9]+")
Pattern p = Pattern.compile("[a-zA-Z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[A-Z][a-z0-9]+")
Pattern p = Pattern.compile("[A-Z][a-z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
SurfaceView first = (SurfaceView) findViewById(R.id.firstSurface);
SurfaceView second = (SurfaceView) findViewById(R.id.secondSurface);
Intent pickVideo = new Intent(Intent.ACTION_PICK);
xml=context.obtainStyledAttributes(attrs,R.styleable.RelativeLayoutWithForeground)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.RelativeLayoutWithForeground);
int foregroundResId = INVALID_FOREGROUND_ID;
drawable=getDrawable(getResources(),foregroundResId)
Drawable drawable = getDrawable(getResources(), foregroundResId);
Bundle args = new Bundle();
enroll=mHotwordDetector.createEnrollIntent()
Intent enroll = mHotwordDetector.createEnrollIntent();

Diff of 707790a4ed408793f33d03655d52576c4bce19d9 and deb4daabbd91e7242248f463517d8c1f0e295671:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 0
	--> recency = null
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 707790a4ed408793f33d03655d52576c4bce19d9 to deb4daabbd91e7242248f463517d8c1f0e295671


****Parsing for addition at revision deb4daabbd91e7242248f463517d8c1f0e295671****

Added AccessibilityServices.java to .\/spikes\ repository source files.
Added Action.java to .\/spikes\ repository source files.
Added Actions.java to .\/spikes\ repository source files.
Added ActionsAccessibilityDelegate.java to .\/spikes\ repository source files.
Added ActionsAlertDialogCreator.java to .\/spikes\ repository source files.
Added AccessibilityServicesActivity.java to .\/spikes\ repository source files.
Added Demo.java to .\/spikes\ repository source files.
Added DemoAdapter.java to .\/spikes\ repository source files.
Added CustomActionsActivity.java to .\/spikes\ repository source files.
Added TweetView.java to .\/spikes\ repository source files.
Added DemosActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added DrawerActivity.java to .\/spikes\ repository source files.
Added EarthActivity.java to .\/spikes\ repository source files.
Added ProHaxDrawerActivity.java to .\/spikes\ repository source files.
Added SaturnActivity.java to .\/spikes\ repository source files.
Added LocalPlayerActivity.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added CastApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ComposeSmsActivity.java to .\/spikes\ repository source files.
Added HeadlessSmsSendService.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MmsReceiver.java to .\/spikes\ repository source files.
Added SmsReceiver.java to .\/spikes\ repository source files.
Added ExtendedDemoActivity.java to .\/spikes\ repository source files.
Added ExtendedDemoApplication.java to .\/spikes\ repository source files.
Added SimpleDemoActivity.java to .\/spikes\ repository source files.
Added SimpleDemoApplication.java to .\/spikes\ repository source files.
Added Binder.java to .\/spikes\ repository source files.
Added ConnectedClient.java to .\/spikes\ repository source files.
Added Connection.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnection.java to .\/spikes\ repository source files.
Added ServiceConnectionCallback.java to .\/spikes\ repository source files.
Added EasyCustomTabs.java to .\/spikes\ repository source files.
Added ActionButtonComposer.java to .\/spikes\ repository source files.
Added CloseButtonIconComposer.java to .\/spikes\ repository source files.
Added Composer.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilder.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigator.java to .\/spikes\ repository source files.
Added EasyCustomTabsWebNavigator.java to .\/spikes\ repository source files.
Added ExitAnimationsComposer.java to .\/spikes\ repository source files.
Added IntentCustomizer.java to .\/spikes\ repository source files.
Added MenuItemComposer.java to .\/spikes\ repository source files.
Added NavigationFallback.java to .\/spikes\ repository source files.
Added Navigator.java to .\/spikes\ repository source files.
Added ShowTitleComposer.java to .\/spikes\ repository source files.
Added StartAnimationsComposer.java to .\/spikes\ repository source files.
Added ToolbarColorComposer.java to .\/spikes\ repository source files.
Added UrlBarHidingComposer.java to .\/spikes\ repository source files.
Added WebNavigator.java to .\/spikes\ repository source files.
Added AvailableAppProvider.java to .\/spikes\ repository source files.
Added BestPackageFinder.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProvider.java to .\/spikes\ repository source files.
Added BinderTest.java to .\/spikes\ repository source files.
Added ConnectedClientTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnectionTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigatorTest.java to .\/spikes\ repository source files.
Added BestPackageFinderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProviderTest.java to .\/spikes\ repository source files.
Added ApiPagedChannelHistory.java to .\/spikes\ repository source files.
Added ApiPagedResponse.java to .\/spikes\ repository source files.
Added ChannelHistory.java to .\/spikes\ repository source files.
Added HistoryConverter.java to .\/spikes\ repository source files.
Added Runner.java to .\/spikes\ repository source files.
Added SlackHistoryFetcher.java to .\/spikes\ repository source files.
Added SlackWebService.java to .\/spikes\ repository source files.
Added ApiPagedResponseTest.java to .\/spikes\ repository source files.
Added MainActivityTest.java to .\/spikes\ repository source files.
Added LoremAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added BetterAccountManager.java to .\/spikes\ repository source files.
Added BetterAuthenticator.java to .\/spikes\ repository source files.
Added BetterAuthenticatorActivity.java to .\/spikes\ repository source files.
Added GertHerbAuthenticator.java to .\/spikes\ repository source files.
Added GertHerbAuthenticatorService.java to .\/spikes\ repository source files.
Added NoAccountException.java to .\/spikes\ repository source files.
Added ReactiveAuthenticatorActivity.java to .\/spikes\ repository source files.
Added Token.java to .\/spikes\ repository source files.
Added GertHerbActivity.java to .\/spikes\ repository source files.
Added GertHerbApplication.java to .\/spikes\ repository source files.
Added GertHerbAuthenticationActivity.java to .\/spikes\ repository source files.
Added TypefaceFactory.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added ViewServer.java to .\/spikes\ repository source files.
Added ViewServerManager.java to .\/spikes\ repository source files.
Added DeveloperError.java to .\/spikes\ repository source files.
Added HomeActivity.java to .\/spikes\ repository source files.
Added LoginActivity.java to .\/spikes\ repository source files.
Added LoginView.java to .\/spikes\ repository source files.
Added UserCredentials.java to .\/spikes\ repository source files.
Added FontButton.java to .\/spikes\ repository source files.
Added FontEditText.java to .\/spikes\ repository source files.
Added FontTextView.java to .\/spikes\ repository source files.
Added GithubApi.java to .\/spikes\ repository source files.
Added GithubApiFactory.java to .\/spikes\ repository source files.
Added TokenRequest.java to .\/spikes\ repository source files.
Added TokenResponse.java to .\/spikes\ repository source files.
Added Dummy.java to .\/spikes\ repository source files.
Added DummyTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MainFragment.java to .\/spikes\ repository source files.
Added Attributes.java to .\/spikes\ repository source files.
Added Coordinates.java to .\/spikes\ repository source files.
Added IndicatorCoordinatesCalculator.java to .\/spikes\ repository source files.
Added LandingStrip.java to .\/spikes\ repository source files.
Added MutableCoordinates.java to .\/spikes\ repository source files.
Added OnPagerAdapterChangedListener.java to .\/spikes\ repository source files.
Added PagerAdapterObserver.java to .\/spikes\ repository source files.
Added Scrollable.java to .\/spikes\ repository source files.
Added ScrollingPageChangeListener.java to .\/spikes\ repository source files.
Added State.java to .\/spikes\ repository source files.
Added TabsContainer.java to .\/spikes\ repository source files.
Added CustomLandingStrip.java to .\/spikes\ repository source files.
Added CustomTabActivity.java to .\/spikes\ repository source files.
Added ExampleRainbowLandingStrip.java to .\/spikes\ repository source files.
Added FixedWidthTabActivity.java to .\/spikes\ repository source files.
Added NoFragmentsSimpleTextTabActivity.java to .\/spikes\ repository source files.
Added Data.java to .\/spikes\ repository source files.
Added DemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added SmallDemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerFragment.java to .\/spikes\ repository source files.
Added DemoViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapterState.java to .\/spikes\ repository source files.
Added SimpleTextTabActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AbTestingParamsLoadedCallback.java to .\/spikes\ repository source files.
Added AyBe.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added WeakStartCallback.java to .\/spikes\ repository source files.
Added LeakActivity.java to .\/spikes\ repository source files.
Added NoLeakActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added Bar.java to .\/spikes\ repository source files.
Added Foo.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added FooTest.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added ColorScheme.java to .\/spikes\ repository source files.
Added ColorUtils.java to .\/spikes\ repository source files.
Added DominantColorCalculator.java to .\/spikes\ repository source files.
Added FloatUtils.java to .\/spikes\ repository source files.
Added MedianCutQuantizer.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added PayPalFragment.java to .\/spikes\ repository source files.
Added PayPalHelper.java to .\/spikes\ repository source files.
Added MaxLengthMessageComposer.java to .\/spikes\ repository source files.
Added MessageComposer.java to .\/spikes\ repository source files.
Added TwitterMessageComposer.java to .\/spikes\ repository source files.
Added DisabledMruPersister.java to .\/spikes\ repository source files.
Added MruPersister.java to .\/spikes\ repository source files.
Added SharedPreferencesMruPersister.java to .\/spikes\ repository source files.
Added OnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added PriorityShareDialog.java to .\/spikes\ repository source files.
Added PrioritySharer.java to .\/spikes\ repository source files.
Added ShareTargetsAdapter.java to .\/spikes\ repository source files.
Added SimpleOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added TargetApps.java to .\/spikes\ repository source files.
Added TwitterOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AdvancedActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SimpleActivity.java to .\/spikes\ repository source files.
Added LockingActivity.java to .\/spikes\ repository source files.
Added PostLockingActivity.java to .\/spikes\ repository source files.
Added PreLockingActivity.java to .\/spikes\ repository source files.
Added DummyAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added NovoStaggeredGridView.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SpikeApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SwipeableView.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MyClass.java to .\/spikes\ repository source files.
Added MyClassTest.java to .\/spikes\ repository source files.
Added MyAndroidClassTest.java to .\/spikes\ repository source files.
Added RobolectricGradleTestRunner.java to .\/spikes\ repository source files.
Added Mapper.java to .\/spikes\ repository source files.
Added Query.java to .\/spikes\ repository source files.
Added TypedResolver.java to .\/spikes\ repository source files.
Added CursorList.java to .\/spikes\ repository source files.
Added CursorListIterator.java to .\/spikes\ repository source files.
Added CursorMarshaller.java to .\/spikes\ repository source files.
Added EmptyListIterator.java to .\/spikes\ repository source files.
Added ReflectionCursorMarshaller.java to .\/spikes\ repository source files.
Added RichClass.java to .\/spikes\ repository source files.
Added Setter.java to .\/spikes\ repository source files.
Added Function.java to .\/spikes\ repository source files.
Added TypedElementLoader.java to .\/spikes\ repository source files.
Added TypedLoader.java to .\/spikes\ repository source files.
Added Marshaller.java to .\/spikes\ repository source files.
Added ObjectMapper.java to .\/spikes\ repository source files.
Added TypedActivity.java to .\/spikes\ repository source files.
Added StringUtil.java to .\/spikes\ repository source files.
Added MyObject.java to .\/spikes\ repository source files.
Added MediaPlayerSwitcherActivity.java to .\/spikes\ repository source files.
Added VideoPlayerService.java to .\/spikes\ repository source files.
Added RelativeLayoutWithForeground.java to .\/spikes\ repository source files.
Added DemoActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added RecognitionService.java to .\/spikes\ repository source files.
Added SessionService.java to .\/spikes\ repository source files.
Added SettingsActivity.java to .\/spikes\ repository source files.
Added SmartContextInteractionService.java to .\/spikes\ repository source files.
AccessibilityManager accessibilityManager = (AccessibilityManager) context.getSystemService(Context.ACCESSIBILITY_SERVICE);
enabledServices=getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN)
List<AccessibilityServiceInfo> enabledServices = getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN);
List<AccessibilityServiceInfo> enabledServices = getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN);
Action otherAction = (Action) o;
int result = id;
Actions otherActions = (Actions) o;
label=resources.getString(action.getLabel())
String label = resources.getString(action.getLabel());
action=actions.findActionById(actionId)
Action action = actions.findActionById(actionId);
action=actions.getAction(which)
Action action = actions.getAction(which);
CharSequence[] itemLabels = new CharSequence[actions.getCount()];
View view = convertView;
demo=getItem(position)
Demo demo = getItem(position);
Intent intent = new Intent(context, demo.activityClass);
layoutInflater=LayoutInflater.from(parent.getContext())
LayoutInflater layoutInflater = LayoutInflater.from(parent.getContext());
TweetView tweetView = (TweetView) findViewById(R.id.tweet);
actions=createActions(tweet,listener)
final Actions actions = createActions(tweet, listener);
ListView listView = ((ListView) findViewById(R.id.list));
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
final DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close) {

            @Override
            public void onDrawerClosed(View drawerView) {
                super.onDrawerClosed(drawerView);
                // waiting for the drawer to close, then navigating seems to cause issue.
                // why wait for the drawer to close? jankiness.
                if (pendingNavigationClick != null) {
                    startActivity(pendingNavigationClick);
                    pendingNavigationClick = null;
                }
            }

        };
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close);
Intent intent;
b=getIntent().getExtras()
Bundle b = getIntent().getExtras();
mShouldStartPlayback=b.getBoolean("shouldStart")
boolean mShouldStartPlayback = b.getBoolean("shouldStart");
startPosition=b.getInt("startPosition",0)
int startPosition = b.getInt("startPosition", 0);
currentPos=mVideoView.getCurrentPosition()
int currentPos = mVideoView.getCurrentPosition();
String msg;
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, mDisplaySize.y + getActionBar().getHeight());
mm=mSelectedMedia.getMetadata()
MediaMetadata mm = mSelectedMedia.getMetadata();
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, (int) (mDisplaySize.x * ASPECT_RATIO));
WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
width=display.getWidth()
int width = display.getWidth();
height=display.getHeight()
int height = display.getHeight();
int resourceId = 0;
String videoUrl = "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4#sthash.rJ5rPZy8.dpuf";
String title = "Jahre Philharmonie";
String description = "Awesome film you must watch!";
String author = "Blundell";
String thumbUrl = "http://www.ustream.tv/blog/wp-content/uploads/2013/10/simply-go-live.png";
MediaMetadata metadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE);
mediaInfo=new MediaInfo.Builder(videoUrl).setMetadata(metadata).setStreamType(MediaInfo.STREAM_TYPE_BUFFERED).setContentType("video/mp4").build()
MediaInfo mediaInfo = new MediaInfo.Builder(videoUrl)
                        .setMetadata(metadata)
                        .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)
                        .setContentType("video/mp4")
                        .build();
Intent intent = new Intent(MainActivity.this, LocalPlayerActivity.class);
preferences=getPreferences(MODE_PRIVATE)
SharedPreferences preferences = getPreferences(MODE_PRIVATE);
defaultSmsPackage=Telephony.Sms.getDefaultSmsPackage(this)
String defaultSmsPackage = Telephony.Sms.getDefaultSmsPackage(this);
Intent intent = new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
availableAppProvider=EasyCustomTabs.getInstance()
AvailableAppProvider availableAppProvider = EasyCustomTabs.getInstance();
ConnectedClient connectedClient = new ConnectedClient(client);
binder=Binder.newInstance()
Binder binder = Binder.newInstance();
List<Composer> composerList = new ArrayList<>();
customTabsSession=connection.newSession()
CustomTabsSession customTabsSession = connection.newSession();
CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(customTabsSession);
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
context=EasyCustomTabs.getInstance().getContext()
Context context = EasyCustomTabs.getInstance().getContext();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
packagesSupportingCustomTabs=getPackagesSupportingCustomTabs()
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
defaultPackage=getDefaultPackage()
String defaultPackage = getDefaultPackage();
defaultActivityInfo=packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK,0)
ResolveInfo defaultActivityInfo = packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK, 0);
String packageName = defaultActivityInfo.activityInfo.packageName;
resolvedInfoList=packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK,0)
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<String> packagesSupportingCustomTabs = new ArrayList<>();
Intent serviceIntent = new Intent();
bestPackageFinder=BestPackageFinder.newInstance()
BestPackageFinder bestPackageFinder = BestPackageFinder.newInstance();
packageName=bestPackageFinder.findBestPackage()
String packageName = bestPackageFinder.findBestPackage();
resolveInfo=createResolveInfoFor(packageName)
ResolveInfo resolveInfo = createResolveInfoFor(packageName);
ResolveInfo resolveInfo = new ResolveInfo();
List<ResolveInfo> resolveInfoList = new ArrayList<>();
defaultPackageResolveInfo=createResolveInfoFor(packageName)
ResolveInfo defaultPackageResolveInfo = createResolveInfoFor(packageName);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
oldestApiMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage oldestApiMessage = apiMessages.get(apiMessages.size() - 1);
String lastResponseEpochTime = oldestApiMessage.timeStamp;
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
latestMessage=latestMessages.get(latestMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage latestMessage = latestMessages.get(latestMessages.size() - 1);
latestMessageDateTime=convertToLocalDateTime(latestMessage.timeStamp)
LocalDateTime latestMessageDateTime = convertToLocalDateTime(latestMessage.timeStamp);
List<ChannelHistory.Message> messages = new ArrayList<>();
historyFrom=getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1))
LocalDateTime historyFrom = getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1));
historyTo=getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0))
LocalDateTime historyTo = getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0));
String text = apiMessage.text;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
lastMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage lastMessage = apiMessages.get(apiMessages.size() - 1);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
firstMessage=apiMessages.get(0)
ApiPagedChannelHistory.ApiMessage firstMessage = apiMessages.get(0);
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
String slackToken = args[0];
retrofit=new Retrofit.Builder().baseUrl("https://slack.com/api/").addConverterFactory(GsonConverterFactory.create()).build()
Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://slack.com/api/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();
slackWebService=retrofit.create(SlackWebService.class)
SlackWebService slackWebService = retrofit.create(SlackWebService.class);
slackHistoryFetcher=SlackHistoryFetcher.from(slackWebService,slackToken)
SlackHistoryFetcher slackHistoryFetcher = SlackHistoryFetcher.from(slackWebService, slackToken);
start=LocalDateTime.now()
LocalDateTime start = LocalDateTime.now();
end=LocalDateTime.now().minusDays(7)
LocalDateTime end = LocalDateTime.now().minusDays(7);
channelHistory=slackHistoryFetcher.getChannelHistory(start,end)
ChannelHistory channelHistory = slackHistoryFetcher.getChannelHistory(start, end);
HistoryConverter historyConverter = new HistoryConverter();
ApiPagedResponse apiPagedResponse = new ApiPagedResponse(start);
response=fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime())
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
apiPagedChannelHistory=response.body()
ApiPagedChannelHistory apiPagedChannelHistory = response.body();
channelHistory=slackWebService.getChannelHistory(slackToken,channel,lastResponseEpochTime,NUMBER_OF_RESULTS)
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
ApiPagedChannelHistory apiPagedChannelHistory = new ApiPagedChannelHistory();
ApiPagedChannelHistory.ApiMessage apiMessage = new ApiPagedChannelHistory.ApiMessage();
final TextView textView = new TextView(context);
emptyView=findViewById(R.id.empty_view)
View emptyView = findViewById(R.id.empty_view);
final Integer action = values[0];
LoremAdapter loremAdapter = new LoremAdapter();
accounts=accountManager.getAccountsByType(accountType)
Account[] accounts = accountManager.getAccountsByType(accountType);
Bundle result;
Bundle result;
Bundle result = new Bundle();
activity=createLoginIntent(context,accountType,authTokenType,requiredFeatures,options)
Intent activity = createLoginIntent(context, accountType, authTokenType, requiredFeatures, options);
Bundle bundle = new Bundle();
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
accounts=accountManager.getAccountsByType(authTokenType)
Account[] accounts = accountManager.getAccountsByType(authTokenType);
bundle=createResponseBundle(token)
Bundle bundle = createResponseBundle(token);
accountManager=AccountManager.get(this.getApplicationContext())
AccountManager accountManager = AccountManager.get(this.getApplicationContext());
Account account = new Account(token.getUserName(), getAccountName());
Bundle bundle = new Bundle();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
GertHerbAuthenticator authenticator = new GertHerbAuthenticator(this);
fontId=getFontId(context,attrs)
int fontId = getFontId(context, attrs);
fontType=getFontType(fontId)
FontType fontType = getFontType(fontId);
typedArray=context.obtainStyledAttributes(attrs,R.styleable.CustomTextAppearance)
TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CustomTextAppearance);
typeface=createTypeFace(context,fontType)
Typeface typeface = createTypeFace(context, fontType);
info=context.getApplicationInfo()
ApplicationInfo info = context.getApplicationInfo();
name=activity.getTitle().toString()
String name = activity.getTitle().toString();
client=mServer.accept()
Socket client = mServer.accept();
boolean result;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
BufferedReader in = null;
request=in.readLine()
final String request = in.readLine();
String command;
String parameters;
index=request.indexOf(' ')
int index = request.indexOf(' ');
boolean result;
boolean success = true;
BufferedWriter out = null;
index=parameters.indexOf(' ')
int index = parameters.indexOf(' ');
code=parameters.substring(0,index)
final String code = parameters.substring(0, index);
int hashCode = (int) Long.parseLong(code, 16);
window=findWindow(hashCode)
final View window = findWindow(hashCode);
dispatch=ViewDebug.class.getDeclaredMethod("dispatchCommand",View.class,String.class,String.class,OutputStream.class)
final Method dispatch = ViewDebug.class.getDeclaredMethod("dispatchCommand",
                        View.class, String.class, String.class, OutputStream.class);
View window = null;
boolean result = true;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
boolean result = true;
String focusName = null;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
View focusedWindow = null;
BufferedWriter out = null;
boolean needWindowListUpdate = false;
boolean needFocusedWindowUpdate = false;
BetterAccountManager accountManager = new BetterAccountManager(this, getString(R.string.account_type), getString(R.string.token_type), null);
loginView=Views.findById(this,R.id.login_view)
LoginView loginView = Views.findById(this, R.id.login_view);
authorizationApi=new GithubApiFactory().createAuthorizationApi(credentials.username,credentials.password)
GithubApi authorizationApi = new GithubApiFactory().createAuthorizationApi(credentials.username, credentials.password);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
Endpoint endpoint = new Endpoint() {
            @Override
            public String getUrl() {
                return GITHUB_API_URL;
            }

            @Override
            public String getName() {
                return "Live";
            }
        };
interceptor=createAuthorizationRequestInterceptor(username,password)
RequestInterceptor interceptor = createAuthorizationRequestInterceptor(username, password);
restAdapter=createRestAdapter(endpoint,interceptor)
RestAdapter restAdapter = createRestAdapter(endpoint, interceptor);
Dummy dummy = new Dummy();
result=dummy.explodes()
boolean result = dummy.explodes();
String base64EncodedPublicKey = "CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE";
premiumPurchase=inventory.getPurchase(SKU_PREMIUM)
Purchase premiumPurchase = inventory.getPurchase(SKU_PREMIUM);
infiniteGasPurchase=inventory.getPurchase(SKU_INFINITE_GAS)
Purchase infiniteGasPurchase = inventory.getPurchase(SKU_INFINITE_GAS);
gasPurchase=inventory.getPurchase(SKU_GAS)
Purchase gasPurchase = inventory.getPurchase(SKU_GAS);
String payload = "";
String payload = "";
String payload = "";
payload=p.getDeveloperPayload()
String payload = p.getDeveloperPayload();
int index = mTank >= TANK_RES_IDS.length ? TANK_RES_IDS.length - 1 : mTank;
AlertDialog.Builder bld = new AlertDialog.Builder(this);
spe=getPreferences(MODE_PRIVATE).edit()
SharedPreferences.Editor spe = getPreferences(MODE_PRIVATE).edit();
sp=getPreferences(MODE_PRIVATE)
SharedPreferences sp = getPreferences(MODE_PRIVATE);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                                  + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                    | ((source[d + 1 + off] << 24) >>> 16)
                    | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                    | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                                   "-1002:Bad response received/" +
                                   "-1003:Purchase signature verification failed/" +
                                   "-1004:Send intent failed/" +
                                   "-1005:User cancelled/" +
                                   "-1006:Unknown purchase response/" +
                                   "-1007:Missing token/" +
                                   "-1008:Unknown error/" +
                                   "-1009:Subscriptions not available/" +
                                   "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(),
                    itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                        | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                        | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                            | ((source[d + 1 + off] << 24) >>> 16)
                            | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                            | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                "-1002:Bad response received/" +
                "-1003:Purchase signature verification failed/" +
                "-1004:Send intent failed/" +
                "-1005:User cancelled/" +
                "-1006:Unknown purchase response/" +
                "-1007:Missing token/" +
                "-1008:Unknown error/" +
                "-1009:Subscriptions not available/" +
                "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(), itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
responseCode=result.getResponse()
int responseCode = result.getResponse();
sku=purchase.getSku()
String sku = purchase.getSku();
skuDetails=inv.getSkuDetails(sku)
SkuDetails skuDetails = inv.getSkuDetails(sku);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
Button purchaseFiveButton = (Button) rootView.findViewById(R.id.fragment_main_button_purchase_five_coins);
xml=context.obtainStyledAttributes(attrs,R.styleable.LandingStrip)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.LandingStrip);
tabLayoutId=xml.getResourceId(R.styleable.LandingStrip_tabLayoutId,MISSING_TAB_LAYOUT_ID)
int tabLayoutId = xml.getResourceId(R.styleable.LandingStrip_tabLayoutId, MISSING_TAB_LAYOUT_ID);
indicatorColour=xml.getResourceId(R.styleable.LandingStrip_indicatorColor,DEFAULT_INDICATOR_COLOUR)
int indicatorColour = xml.getResourceId(R.styleable.LandingStrip_indicatorColor, DEFAULT_INDICATOR_COLOUR);
indicatorHeight=getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight,DEFAULT_INDICATOR_HEIGHT,xml)
int indicatorHeight = getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight, DEFAULT_INDICATOR_HEIGHT, xml);
tabsPaddingLeft=getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingLeft = getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding, DEFAULT_TABS_PADDING, xml);
tabsPaddingRight=getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingRight = getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding, DEFAULT_TABS_PADDING, xml);
MutableCoordinates drawCurrentTabCoordinates = new MutableCoordinates();
MutableCoordinates drawNextTabCoordinates = new MutableCoordinates();
MutableCoordinates drawMovingIndicatorCoordinates = new MutableCoordinates();
currentTab=tabsContainer.getTabAt(currentPosition)
View currentTab = tabsContainer.getTabAt(currentPosition);
currentTabStart=currentTab.getLeft()
float currentTabStart = currentTab.getLeft();
currentTabEnd=currentTab.getRight()
float currentTabEnd = currentTab.getRight();
nextTab=tabsContainer.getTabAt(currentPosition + 1)
View nextTab = tabsContainer.getTabAt(currentPosition + 1);
nextTabPositionOffset=getFractionFrom(pagePositionOffset)
float nextTabPositionOffset = getFractionFrom(pagePositionOffset);
indicatorStart=getIndicatorPosition(nextTab.getStart(),pagePositionOffset,currentTab.getStart(),nextTabPositionOffset)
float indicatorStart = getIndicatorPosition(nextTab.getStart(), pagePositionOffset, currentTab.getStart(), nextTabPositionOffset);
indicatorEnd=getIndicatorPosition(nextTab.getEnd(),pagePositionOffset,currentTab.getEnd(),nextTabPositionOffset)
float indicatorEnd = getIndicatorPosition(nextTab.getEnd(), pagePositionOffset, currentTab.getEnd(), nextTabPositionOffset);
height=getHeight()
int height = getHeight();
tabCount=pagerAdapter.getCount()
int tabCount = pagerAdapter.getCount();
title=pagerAdapter.getPageTitle(position)
CharSequence title = pagerAdapter.getPageTitle(position);
inflatedTabView=tabsContainer.inflateTab(layoutInflater,attributes.getTabLayoutId())
View inflatedTabView = tabsContainer.inflateTab(layoutInflater, attributes.getTabLayoutId());
int position = (int) view.getTag(TAG_KEY_POSITION);
scrollOffset=getHorizontalScrollOffset(position,positionOffset)
int scrollOffset = getHorizontalScrollOffset(position, positionOffset);
newScrollX=calculateScrollOffset(position,scrollOffset,positionOffset)
float newScrollX = calculateScrollOffset(position, scrollOffset, positionOffset);
tabWidth=tabsContainer.getTabAt(position).getWidth()
int tabWidth = tabsContainer.getTabAt(position).getWidth();
tabForPosition=tabsContainer.getTabAt(position)
View tabForPosition = tabsContainer.getTabAt(position);
float tabStartX = tabForPosition.getLeft() + scrollOffset;
int viewMiddleOffset = getTabParentWidth() / 2;
float tabCenterOffset = (tabForPosition.getRight() - tabForPosition.getLeft()) * 0.5F;
nextTabDelta=getNextTabDelta(position,pagerOffset,tabForPosition)
float nextTabDelta = getNextTabDelta(position, pagerOffset, tabForPosition);
LinearLayout tabsContainerView = new LinearLayout(context);
tab=getTabAt(index)
View tab = getTabAt(index);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
position=indicatorCoordinates.getStart()
float position = indicatorCoordinates.getStart();
lastTabOffset=((ViewGroup)getChildAt(0)).getChildAt(getChildCount() - 1).getWidth()
float lastTabOffset = ((ViewGroup) getChildAt(0)).getChildAt(getChildCount() - 1).getWidth();
frequency=getOneCycle(lastTabOffset)
float frequency = getOneCycle(lastTabOffset);
r=toHex(calculateColour(position,frequency,PHASE_RED,AMPLITUDE,CENTER_FREQUENCY))
String r = toHex(calculateColour(position, frequency, PHASE_RED, AMPLITUDE, CENTER_FREQUENCY));
g=toHex(calculateColour(position,frequency,PHASE_GREEN,AMPLITUDE,CENTER_FREQUENCY))
String g = toHex(calculateColour(position, frequency, PHASE_GREEN, AMPLITUDE, CENTER_FREQUENCY));
b=toHex(calculateColour(position,frequency,PHASE_BLUE,AMPLITUDE,CENTER_FREQUENCY))
String b = toHex(calculateColour(position, frequency, PHASE_BLUE, AMPLITUDE, CENTER_FREQUENCY));
height=getHeight()
int height = getHeight();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPagerFragment viewPagerFragment = new ViewPagerFragment();
Bundle bundle = new Bundle();
TextView view = (TextView) layoutInflater.inflate(R.layout.view_demo, container, false);
currentPosition=viewPagerAdapterState.getCurrentPosition()
int currentPosition = viewPagerAdapterState.getCurrentPosition();
view=getView(container,position)
View view = getView(container, position);
parcelableSparseArray=viewPagerAdapterState.get(position)
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
View view = (View) object;
SparseArray<Parcelable> viewState = new SparseArray<>();
position=entry.getValue()
int position = entry.getValue();
view=entry.getKey()
View view = entry.getKey();
bundle=in.readBundle()
Bundle bundle = in.readBundle();
Map<Integer, SparseArray<Parcelable>> viewStates = new HashMap<>(bundle.keySet().size());
sparseParcelableArray=bundle.getSparseParcelableArray(key)
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
primaryItemPosition=in.readInt()
int primaryItemPosition = in.readInt();
Bundle bundle = new Bundle();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
final TextView abText = (TextView) findViewById(R.id.ab_text);
final AyBe ayBe = new AyBe();
id=item.getItemId()
int id = item.getItemId();
callback=weakCallback.get()
AbTestingParamsLoadedCallback callback = weakCallback.get();
WeakReference<NoLeakActivity> weakNoLeakActivity = new WeakReference<NoLeakActivity>(noLeakActivity);
noLeakActivity=weakNoLeakActivity.get()
NoLeakActivity noLeakActivity = weakNoLeakActivity.get();
RecyclerView recyclerView = (RecyclerView) layoutInflater.inflate(R.layout.view_page, viewGroup, false);
itemView=layoutInflater.inflate(R.layout.view_item,parent,false)
View itemView = layoutInflater.inflate(R.layout.view_item, parent, false);
actual=foo.twice(HALF)
int actual = foo.twice(HALF);
int expected = WHOLE;
final float inverseRatio = 1f - ratio;
float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRatio);
float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRatio);
float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRatio);
hsv=node.getHsv()
float[] hsv = node.getHsv();
width=bitmap.getWidth()
final int width = bitmap.getWidth();
height=bitmap.getHeight()
final int height = bitmap.getHeight();
final int[] rgbPixels = new int[width * height];
final MedianCutQuantizer mcq = new MedianCutQuantizer(rgbPixels, NUM_COLORS);
primaryAccentColor=findPrimaryAccentColor()
final ColorNode primaryAccentColor = findPrimaryAccentColor();
secondaryAccentColor=findSecondaryAccentColor(primaryAccentColor)
final ColorNode secondaryAccentColor = findSecondaryAccentColor(primaryAccentColor);
tertiaryAccentColor=findTertiaryAccentColor(primaryAccentColor,secondaryAccentColor)
final int tertiaryAccentColor = findTertiaryAccentColor(
                primaryAccentColor, secondaryAccentColor);
primaryTextColor=findPrimaryTextColor(primaryAccentColor)
final int primaryTextColor = findPrimaryTextColor(primaryAccentColor);
secondaryTextColor=findSecondaryTextColor(primaryAccentColor)
final int secondaryTextColor = findSecondaryTextColor(primaryAccentColor);
final float primaryHue = primary.getHsv()[0];
final float candidateHue = candidate.getHsv()[0];
copy=Arrays.copyOf(palette,palette.length)
final MedianCutQuantizer.ColorNode[] copy = Arrays.copyOf(palette, palette.length);
maxCount=palette[0].getCount()
final float maxCount = palette[0].getCount();
lhsWeight=calculateWeight(lhs,maxCount)
final float lhsWeight = calculateWeight(lhs, maxCount);
rhsWeight=calculateWeight(rhs,maxCount)
final float rhsWeight = calculateWeight(rhs, maxCount);
float sum = 0;
float sumWeight = 0;
float value = values[i];
float weight = values[i + 1];
ColorHistogram colorHist = new ColorHistogram(pixels);
K=colorHist.getNumberOfColors()
int K = colorHist.getNumberOfColors();
ColorNode[] rCols = null;
rgb=colorHist.getColor(i)
int rgb = colorHist.getColor(i);
cnt=colorHist.getCount(i)
int cnt = colorHist.getCount(i);
ColorBox initialBox = new ColorBox(0, K - 1, 0);
List<ColorBox> colorSet = new ArrayList<ColorBox>();
int k = 1;
boolean done = false;
nextBox=findBoxToSplit(colorSet)
ColorBox nextBox = findBoxToSplit(colorSet);
newBox=nextBox.splitBox()
ColorBox newBox = nextBox.splitBox();
color=findClosestColor(pixels[i])
ColorNode color = findClosestColor(pixels[i]);
idx=findClosestColorIndex(rgb)
int idx = findClosestColorIndex(rgb);
red=Color.red(rgb)
int red = Color.red(rgb);
grn=Color.green(rgb)
int grn = Color.green(rgb);
blu=Color.blue(rgb)
int blu = Color.blue(rgb);
int minIdx = 0;
int minDistance = Integer.MAX_VALUE;
ColorNode color = quantColors[i];
d2=color.distance2(red,grn,blu)
int d2 = color.distance2(red, grn, blu);
ColorBox boxToSplit = null;
int minLevel = Integer.MAX_VALUE;
n=colorBoxes.size()
int n = colorBoxes.size();
ColorNode[] avgColors = new ColorNode[n];
int i = 0;
int dr = this.red - red;
int dg = this.grn - grn;
int db = this.blu - blu;
ColorNode color = imageColors[i];
int r = color.red;
int g = color.grn;
int b = color.blu;
dim=getLongestColorDimension()
ColorDimension dim = getLongestColorDimension();
med=findMedian(dim)
int med = findMedian(dim);
int nextLevel = level + 1;
ColorBox newBox = new ColorBox(med + 1, upper, nextLevel);
int rLength = rmax - rmin;
int gLength = gmax - gmin;
int bLength = bmax - bmin;
int half = count / 2;
int nPixels, median;
int rSum = 0;
int gSum = 0;
int bSum = 0;
int n = 0;
ColorNode ci = imageColors[i];
int cnt = ci.cnt;
double nd = n;
int avgRed = (int) (0.5 + rSum / nd);
int avgGrn = (int) (0.5 + gSum / nd);
int avgBlu = (int) (0.5 + bSum / nd);
s=this.getClass().getSimpleName()
String s = this.getClass().getSimpleName();
int i = 0;
int N = pixelsOrig.length;
int[] pixelsCpy = new int[N];
int k = -1;
int curColor = -1;
int nColors = k + 1;
id=item.getItemId()
int id = item.getItemId();
Intent intent = new Intent();
bitmap=((BitmapDrawable)imageView.getDrawable()).getBitmap()
Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap();
DominantColorCalculator dominantColorCalculator = new DominantColorCalculator(bitmap);
selectedImageUri=data.getData()
Uri selectedImageUri = data.getData();
selectedImagePath=getPath(selectedImageUri)
String selectedImagePath = getPath(selectedImageUri);
String[] projection = {MediaStore.Images.Media.DATA};
cursor=managedQuery(uri,projection,null,null,null)
Cursor cursor = managedQuery(uri, projection, null, null, null);
column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)
int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
LinearLayout rootView = (LinearLayout) inflater.inflate(R.layout.fragment_main, container, false);
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
preapprovalButton=payPal.getCheckoutButton(getActivity(),PayPal.BUTTON_194x37,CheckoutButton.TEXT_PAY)
CheckoutButton preapprovalButton = payPal.getCheckoutButton(getActivity(), PayPal.BUTTON_194x37, CheckoutButton.TEXT_PAY);
preapprovalIntent=payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY)
Intent preapprovalIntent = payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY);
String resultTitle = "";
String resultInfo = "";
String resultExtra = "";
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
PayPalPreapproval preapproval = new PayPalPreapproval();
preapproval=createPreapproval(preapprovalKey)
PayPalPreapproval preapproval = createPreapproval(preapprovalKey);
Bundle bundle = new Bundle();
int availableLength = maxLength;
StringBuilder stringBuilder = new StringBuilder(maxLength);
prefixAndSuffixLength=computeAppendedLengthIncludingSeparatorSpaces(prefix,suffix)
int prefixAndSuffixLength = computeAppendedLengthIncludingSeparatorSpaces(prefix, suffix);
urlLength=computeUrlLengthIncludingSeparatorSpace(url)
int urlLength = computeUrlLengthIncludingSeparatorSpace(url);
trimmedSubject=ellipsizeTextIfExceedsMaxLength(subject,availableLength)
String trimmedSubject = ellipsizeTextIfExceedsMaxLength(subject, availableLength);
int length = 0;
preferences=context.getSharedPreferences(MRU_PREFERENCES,Context.MODE_PRIVATE)
SharedPreferences preferences = context.getSharedPreferences(MRU_PREFERENCES, Context.MODE_PRIVATE);
args=getArguments()
Bundle args = getArguments();
themeResId=getThemeResIdIfProvidedIn(args)
int themeResId = getThemeResIdIfProvidedIn(args);
title=getTitleIfProvidedIn(args)
CharSequence title = getTitleIfProvidedIn(args);
builder=createDialogBuilder(themeResId).setCancelable(true).setView(dialogView)
AlertDialog.Builder builder = createDialogBuilder(themeResId)
                .setCancelable(true)
                .setView(dialogView);
inflater=getActivity().getLayoutInflater()
LayoutInflater inflater = getActivity().getLayoutInflater();
GridView gridView = (GridView) rootView.findViewById(R.id.ps__dialog_grid);
targetApps=extractTargetAppsFrom(args)
TargetApps targetApps = extractTargetAppsFrom(args);
allShareTargets=getAvailableShareTargets(sharingIntent)
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
priorityAppInfos=createPriorityResolveInfoList(targetApps,allShareTargets)
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
otherAppInfos=createOtherAppsResolveInfoList(priorityAppInfos,allShareTargets)
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
resolveInfos=targetApps.extractTargetResolveInfosFrom(allShareTargets)
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
mruResolveInfo=findMruResolveInfoIn(allShareTargets)
ResolveInfo mruResolveInfo = findMruResolveInfoIn(allShareTargets);
List<ResolveInfo> otherAppsInfos = new ArrayList<ResolveInfo>(allAppInfos);
mruPackageName=persister.getLastUsedTarget()
String mruPackageName = persister.getLastUsedTarget();
String packageName = resolveInfo.activityInfo.packageName;
packageManager=getActivity().getPackageManager()
PackageManager packageManager = getActivity().getPackageManager();
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
View buttonStrip = (View) showMoreButton.getParent();
gridView=getGridView()
GridView gridView = getGridView();
intent=wrapIntentWithExplicitTargetComponentForItem(position,sharingIntent)
Intent intent = wrapIntentWithExplicitTargetComponentForItem(position, sharingIntent);
Intent intent = new Intent(sharingIntent);
ActivityInfo activity = adapter.getItem(position).activityInfo;
ComponentName name = new ComponentName(activity.applicationInfo.packageName, activity.name);
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
PriorityShareDialog dialog = new PriorityShareDialog();
Bundle args = new Bundle();
sharingIntent=createSharingIntent()
Intent sharingIntent = createSharingIntent();
fragmentManager=activity.getFragmentManager()
FragmentManager fragmentManager = activity.getFragmentManager();
Intent intent = new Intent(Intent.ACTION_SEND);
dialog=new PriorityShareDialog.Builder().setTitle(title).setTargetApps(targetApps).setSharingIntent(sharingIntent).setOnPrepareSharingIntentListener(listener).setShowMostRecentlyUsed(showMostRecentlyUsed).build()
PriorityShareDialog dialog = new PriorityShareDialog.Builder()
                .setTitle(title)
                .setTargetApps(targetApps)
                .setSharingIntent(sharingIntent)
                .setOnPrepareSharingIntentListener(listener)
                .setShowMostRecentlyUsed(showMostRecentlyUsed)
                .build();
PrioritySharer prioritySharer = new PrioritySharer();
prioritySharer=build()
PrioritySharer prioritySharer = build();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
layoutInflater=LayoutInflater.from(context)
LayoutInflater layoutInflater = LayoutInflater.from(context);
iconSizePx=getIconSizePx(context.getResources())
int iconSizePx = getIconSizePx(context.getResources());
ArrayList<ResolveInfo> sortedList = new ArrayList<ResolveInfo>(resolveInfoList);
int otherAppsCountMaybe = showAllApps ? otherAppInfos.size() : 0;
firstOtherAppsItemPosition=priorityAppInfos.size()
int firstOtherAppsItemPosition = priorityAppInfos.size();
int offsetPosition = position - firstOtherAppsItemPosition;
TextView textView;
textView=initializeItemViewIfNecessary(convertView,R.layout.ps__grid_item_share,parent)
TextView textView = initializeItemViewIfNecessary(convertView, R.layout.ps__grid_item_share, parent);
info=getItem(position)
ResolveInfo info = getItem(position);
icon=info.loadIcon(packageManager)
Drawable icon = info.loadIcon(packageManager);
arraySize=in.readInt()
int arraySize = in.readInt();
String[] packageNames = new String[arraySize];
arraySize=targetPackages.size()
int arraySize = targetPackages.size();
String[] packagesArray = new String[arraySize];
SparseArray<ResolveInfo> matchedResolveInfos = new SparseArray<ResolveInfo>(targetPackages.size());
String packageName = info.activityInfo.packageName;
index=indexOfItemInto(packageName,targetPackages)
int index = indexOfItemInto(packageName, targetPackages);
sparseArraySize=sparseArray.size()
int sparseArraySize = sparseArray.size();
ArrayList<T> list = new ArrayList<T>(sparseArraySize);
int i = 0;
originalSubject=intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT)
CharSequence originalSubject = intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT);
String subject = originalSubject != null ? originalSubject.toString() : null;
composer=createComposer()
MessageComposer composer = createComposer();
component=intent.getComponent()
ComponentName component = intent.getComponent();
targetPackageName=component.getPackageName()
String targetPackageName = component.getPackageName();
adapter=ArrayAdapter.createFromResource(this,R.array.target_apps,android.R.layout.simple_spinner_item)
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
EditText text = (EditText) findViewById(R.id.text);
EditText title = (EditText) findViewById(R.id.title);
EditText mimeType = (EditText) findViewById(R.id.mime_type);
EditText dataUri = (EditText) findViewById(R.id.data_uri);
Switch showMostRecentlyUsed = (Switch) findViewById(R.id.show_most_recently_used);
uriString=dataUri.getText().toString()
String uriString = dataUri.getText().toString();
EditText text = (EditText) findViewById(R.id.text);
TextView textView = (TextView) convertView.findViewById(R.id.positionView);
colorView=convertView.findViewById(R.id.colorView)
View colorView = convertView.findViewById(R.id.colorView);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
offset=headerPlaceholder.getTop()
int offset = headerPlaceholder.getTop();
Integer item = COLORS[position];
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
firstVisiblePosition=grid.getFirstVisiblePosition()
int firstVisiblePosition = grid.getFirstVisiblePosition();
inflate=getViewForPosition(container,position)
View inflate = getViewForPosition(container, position);
id=item.getItemId()
int id = item.getItemId();
MyActivity activity = new MyActivity();
String manifestProperty = "../app/src/main/AndroidManifest.xml";
String resProperty = "../app/src/main/res";
cursor=resolver.query(uri,projection,selection,selectionArgs,null)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, null);
cursor=resolver.query(uri,projection,selection,selectionArgs,sortOrder)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, sortOrder);
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=richClass.setter(name)
Method setter = richClass.setter(name);
T obj;
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=methodsByName.get(name)
Method setter = methodsByName.get(name);
int type = TYPE_INT;
Class<?> t = setter.getParameterTypes()[0];
Class<?> t = setter.getParameterTypes()[0];
cursorType=cursor.getType(index)
final int cursorType = cursor.getType(index);
final Object obj;
s=f.getAnnotation(Mapper.class)
Mapper s = f.getAnnotation(Mapper.class);
mm=m.getAnnotation(Mapper.class)
Mapper mm = m.getAnnotation(Mapper.class);
methodName=StringUtil.asCamelifySetMethod(what)
String methodName = StringUtil.asCamelifySetMethod(what);
cursor=getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,null,null,null,null)
Cursor cursor = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
now=System.currentTimeMillis()
long now = System.currentTimeMillis();
List<Contact2> typedCursor = new CursorList<Contact2>(cursor, Contact2.class);
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[a-zA-Z0-9]+")
Pattern p = Pattern.compile("[a-zA-Z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[A-Z][a-z0-9]+")
Pattern p = Pattern.compile("[A-Z][a-z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
SurfaceView first = (SurfaceView) findViewById(R.id.firstSurface);
SurfaceView second = (SurfaceView) findViewById(R.id.secondSurface);
Intent pickVideo = new Intent(Intent.ACTION_PICK);
xml=context.obtainStyledAttributes(attrs,R.styleable.RelativeLayoutWithForeground)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.RelativeLayoutWithForeground);
int foregroundResId = INVALID_FOREGROUND_ID;
drawable=getDrawable(getResources(),foregroundResId)
Drawable drawable = getDrawable(getResources(), foregroundResId);
Bundle args = new Bundle();
enroll=mHotwordDetector.createEnrollIntent()
Intent enroll = mHotwordDetector.createEnrollIntent();

Diff of deb4daabbd91e7242248f463517d8c1f0e295671 and 996df319625e8a5305ec12bed8affc6e2e2f17d8:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 1
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision deb4daabbd91e7242248f463517d8c1f0e295671 to 996df319625e8a5305ec12bed8affc6e2e2f17d8


****Parsing for addition at revision 996df319625e8a5305ec12bed8affc6e2e2f17d8****

Added AccessibilityServices.java to .\/spikes\ repository source files.
Added Action.java to .\/spikes\ repository source files.
Added Actions.java to .\/spikes\ repository source files.
Added ActionsAccessibilityDelegate.java to .\/spikes\ repository source files.
Added ActionsAlertDialogCreator.java to .\/spikes\ repository source files.
Added AccessibilityServicesActivity.java to .\/spikes\ repository source files.
Added Demo.java to .\/spikes\ repository source files.
Added DemoAdapter.java to .\/spikes\ repository source files.
Added CustomActionsActivity.java to .\/spikes\ repository source files.
Added TweetView.java to .\/spikes\ repository source files.
Added DemosActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added DrawerActivity.java to .\/spikes\ repository source files.
Added EarthActivity.java to .\/spikes\ repository source files.
Added ProHaxDrawerActivity.java to .\/spikes\ repository source files.
Added SaturnActivity.java to .\/spikes\ repository source files.
Added LocalPlayerActivity.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added CastApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ComposeSmsActivity.java to .\/spikes\ repository source files.
Added HeadlessSmsSendService.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MmsReceiver.java to .\/spikes\ repository source files.
Added SmsReceiver.java to .\/spikes\ repository source files.
Added ExtendedDemoActivity.java to .\/spikes\ repository source files.
Added ExtendedDemoApplication.java to .\/spikes\ repository source files.
Added SimpleDemoActivity.java to .\/spikes\ repository source files.
Added SimpleDemoApplication.java to .\/spikes\ repository source files.
Added Binder.java to .\/spikes\ repository source files.
Added ConnectedClient.java to .\/spikes\ repository source files.
Added Connection.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnection.java to .\/spikes\ repository source files.
Added ServiceConnectionCallback.java to .\/spikes\ repository source files.
Added EasyCustomTabs.java to .\/spikes\ repository source files.
Added ActionButtonComposer.java to .\/spikes\ repository source files.
Added CloseButtonIconComposer.java to .\/spikes\ repository source files.
Added Composer.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilder.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigator.java to .\/spikes\ repository source files.
Added EasyCustomTabsWebNavigator.java to .\/spikes\ repository source files.
Added ExitAnimationsComposer.java to .\/spikes\ repository source files.
Added IntentCustomizer.java to .\/spikes\ repository source files.
Added MenuItemComposer.java to .\/spikes\ repository source files.
Added NavigationFallback.java to .\/spikes\ repository source files.
Added Navigator.java to .\/spikes\ repository source files.
Added ShowTitleComposer.java to .\/spikes\ repository source files.
Added StartAnimationsComposer.java to .\/spikes\ repository source files.
Added ToolbarColorComposer.java to .\/spikes\ repository source files.
Added UrlBarHidingComposer.java to .\/spikes\ repository source files.
Added WebNavigator.java to .\/spikes\ repository source files.
Added AvailableAppProvider.java to .\/spikes\ repository source files.
Added BestPackageFinder.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProvider.java to .\/spikes\ repository source files.
Added BinderTest.java to .\/spikes\ repository source files.
Added ConnectedClientTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnectionTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigatorTest.java to .\/spikes\ repository source files.
Added BestPackageFinderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProviderTest.java to .\/spikes\ repository source files.
Added ApiPagedChannelHistory.java to .\/spikes\ repository source files.
Added ApiPagedResponse.java to .\/spikes\ repository source files.
Added ChannelHistory.java to .\/spikes\ repository source files.
Added HistoryConverter.java to .\/spikes\ repository source files.
Added Runner.java to .\/spikes\ repository source files.
Added SlackHistoryFetcher.java to .\/spikes\ repository source files.
Added SlackWebService.java to .\/spikes\ repository source files.
Added ApiPagedResponseTest.java to .\/spikes\ repository source files.
Added MainActivityTest.java to .\/spikes\ repository source files.
Added LoremAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added BetterAccountManager.java to .\/spikes\ repository source files.
Added BetterAuthenticator.java to .\/spikes\ repository source files.
Added BetterAuthenticatorActivity.java to .\/spikes\ repository source files.
Added GertHerbAuthenticator.java to .\/spikes\ repository source files.
Added GertHerbAuthenticatorService.java to .\/spikes\ repository source files.
Added NoAccountException.java to .\/spikes\ repository source files.
Added ReactiveAuthenticatorActivity.java to .\/spikes\ repository source files.
Added Token.java to .\/spikes\ repository source files.
Added GertHerbActivity.java to .\/spikes\ repository source files.
Added GertHerbApplication.java to .\/spikes\ repository source files.
Added GertHerbAuthenticationActivity.java to .\/spikes\ repository source files.
Added TypefaceFactory.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added ViewServer.java to .\/spikes\ repository source files.
Added ViewServerManager.java to .\/spikes\ repository source files.
Added DeveloperError.java to .\/spikes\ repository source files.
Added HomeActivity.java to .\/spikes\ repository source files.
Added LoginActivity.java to .\/spikes\ repository source files.
Added LoginView.java to .\/spikes\ repository source files.
Added UserCredentials.java to .\/spikes\ repository source files.
Added FontButton.java to .\/spikes\ repository source files.
Added FontEditText.java to .\/spikes\ repository source files.
Added FontTextView.java to .\/spikes\ repository source files.
Added GithubApi.java to .\/spikes\ repository source files.
Added GithubApiFactory.java to .\/spikes\ repository source files.
Added TokenRequest.java to .\/spikes\ repository source files.
Added TokenResponse.java to .\/spikes\ repository source files.
Added Dummy.java to .\/spikes\ repository source files.
Added DummyTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MainFragment.java to .\/spikes\ repository source files.
Added Attributes.java to .\/spikes\ repository source files.
Added Coordinates.java to .\/spikes\ repository source files.
Added IndicatorCoordinatesCalculator.java to .\/spikes\ repository source files.
Added LandingStrip.java to .\/spikes\ repository source files.
Added MutableCoordinates.java to .\/spikes\ repository source files.
Added OnPagerAdapterChangedListener.java to .\/spikes\ repository source files.
Added PagerAdapterObserver.java to .\/spikes\ repository source files.
Added Scrollable.java to .\/spikes\ repository source files.
Added ScrollingPageChangeListener.java to .\/spikes\ repository source files.
Added State.java to .\/spikes\ repository source files.
Added TabsContainer.java to .\/spikes\ repository source files.
Added CustomLandingStrip.java to .\/spikes\ repository source files.
Added CustomTabActivity.java to .\/spikes\ repository source files.
Added ExampleRainbowLandingStrip.java to .\/spikes\ repository source files.
Added FixedWidthTabActivity.java to .\/spikes\ repository source files.
Added NoFragmentsSimpleTextTabActivity.java to .\/spikes\ repository source files.
Added Data.java to .\/spikes\ repository source files.
Added DemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added SmallDemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerFragment.java to .\/spikes\ repository source files.
Added DemoViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapterState.java to .\/spikes\ repository source files.
Added SimpleTextTabActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AbTestingParamsLoadedCallback.java to .\/spikes\ repository source files.
Added AyBe.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added WeakStartCallback.java to .\/spikes\ repository source files.
Added LeakActivity.java to .\/spikes\ repository source files.
Added NoLeakActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added Bar.java to .\/spikes\ repository source files.
Added Foo.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added FooTest.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added ColorScheme.java to .\/spikes\ repository source files.
Added ColorUtils.java to .\/spikes\ repository source files.
Added DominantColorCalculator.java to .\/spikes\ repository source files.
Added FloatUtils.java to .\/spikes\ repository source files.
Added MedianCutQuantizer.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added PayPalFragment.java to .\/spikes\ repository source files.
Added PayPalHelper.java to .\/spikes\ repository source files.
Added MaxLengthMessageComposer.java to .\/spikes\ repository source files.
Added MessageComposer.java to .\/spikes\ repository source files.
Added TwitterMessageComposer.java to .\/spikes\ repository source files.
Added DisabledMruPersister.java to .\/spikes\ repository source files.
Added MruPersister.java to .\/spikes\ repository source files.
Added SharedPreferencesMruPersister.java to .\/spikes\ repository source files.
Added OnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added PriorityShareDialog.java to .\/spikes\ repository source files.
Added PrioritySharer.java to .\/spikes\ repository source files.
Added ShareTargetsAdapter.java to .\/spikes\ repository source files.
Added SimpleOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added TargetApps.java to .\/spikes\ repository source files.
Added TwitterOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AdvancedActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SimpleActivity.java to .\/spikes\ repository source files.
Added LockingActivity.java to .\/spikes\ repository source files.
Added PostLockingActivity.java to .\/spikes\ repository source files.
Added PreLockingActivity.java to .\/spikes\ repository source files.
Added DummyAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added NovoStaggeredGridView.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SpikeApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SwipeableView.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MyClass.java to .\/spikes\ repository source files.
Added MyClassTest.java to .\/spikes\ repository source files.
Added MyAndroidClassTest.java to .\/spikes\ repository source files.
Added RobolectricGradleTestRunner.java to .\/spikes\ repository source files.
Added Mapper.java to .\/spikes\ repository source files.
Added Query.java to .\/spikes\ repository source files.
Added TypedResolver.java to .\/spikes\ repository source files.
Added CursorList.java to .\/spikes\ repository source files.
Added CursorListIterator.java to .\/spikes\ repository source files.
Added CursorMarshaller.java to .\/spikes\ repository source files.
Added EmptyListIterator.java to .\/spikes\ repository source files.
Added ReflectionCursorMarshaller.java to .\/spikes\ repository source files.
Added RichClass.java to .\/spikes\ repository source files.
Added Setter.java to .\/spikes\ repository source files.
Added Function.java to .\/spikes\ repository source files.
Added TypedElementLoader.java to .\/spikes\ repository source files.
Added TypedLoader.java to .\/spikes\ repository source files.
Added Marshaller.java to .\/spikes\ repository source files.
Added ObjectMapper.java to .\/spikes\ repository source files.
Added TypedActivity.java to .\/spikes\ repository source files.
Added StringUtil.java to .\/spikes\ repository source files.
Added MyObject.java to .\/spikes\ repository source files.
Added MediaPlayerSwitcherActivity.java to .\/spikes\ repository source files.
Added VideoPlayerService.java to .\/spikes\ repository source files.
Added RelativeLayoutWithForeground.java to .\/spikes\ repository source files.
Added DemoActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added RecognitionService.java to .\/spikes\ repository source files.
Added SessionService.java to .\/spikes\ repository source files.
Added SettingsActivity.java to .\/spikes\ repository source files.
Added SmartContextInteractionService.java to .\/spikes\ repository source files.
AccessibilityManager accessibilityManager = (AccessibilityManager) context.getSystemService(Context.ACCESSIBILITY_SERVICE);
enabledServices=getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN)
List<AccessibilityServiceInfo> enabledServices = getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN);
List<AccessibilityServiceInfo> enabledServices = getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN);
Action otherAction = (Action) o;
int result = id;
Actions otherActions = (Actions) o;
action=actions.getAction(i)
Action action = actions.getAction(i);
label=resources.getString(action.getLabel())
String label = resources.getString(action.getLabel());
action=actions.findActionById(actionId)
Action action = actions.findActionById(actionId);
action=actions.getAction(which)
Action action = actions.getAction(which);
CharSequence[] itemLabels = new CharSequence[actions.getCount()];
View view = convertView;
demo=getItem(position)
Demo demo = getItem(position);
Intent intent = new Intent(context, demo.activityClass);
layoutInflater=LayoutInflater.from(parent.getContext())
LayoutInflater layoutInflater = LayoutInflater.from(parent.getContext());
TweetView tweetView = (TweetView) findViewById(R.id.tweet);
actions=createActions(tweet,listener)
final Actions actions = createActions(tweet, listener);
ListView listView = ((ListView) findViewById(R.id.list));
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
final DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close) {

            @Override
            public void onDrawerClosed(View drawerView) {
                super.onDrawerClosed(drawerView);
                // waiting for the drawer to close, then navigating seems to cause issue.
                // why wait for the drawer to close? jankiness.
                if (pendingNavigationClick != null) {
                    startActivity(pendingNavigationClick);
                    pendingNavigationClick = null;
                }
            }

        };
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close);
Intent intent;
b=getIntent().getExtras()
Bundle b = getIntent().getExtras();
mShouldStartPlayback=b.getBoolean("shouldStart")
boolean mShouldStartPlayback = b.getBoolean("shouldStart");
startPosition=b.getInt("startPosition",0)
int startPosition = b.getInt("startPosition", 0);
currentPos=mVideoView.getCurrentPosition()
int currentPos = mVideoView.getCurrentPosition();
String msg;
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, mDisplaySize.y + getActionBar().getHeight());
mm=mSelectedMedia.getMetadata()
MediaMetadata mm = mSelectedMedia.getMetadata();
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, (int) (mDisplaySize.x * ASPECT_RATIO));
WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
width=display.getWidth()
int width = display.getWidth();
height=display.getHeight()
int height = display.getHeight();
int resourceId = 0;
String videoUrl = "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4#sthash.rJ5rPZy8.dpuf";
String title = "Jahre Philharmonie";
String description = "Awesome film you must watch!";
String author = "Blundell";
String thumbUrl = "http://www.ustream.tv/blog/wp-content/uploads/2013/10/simply-go-live.png";
MediaMetadata metadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE);
mediaInfo=new MediaInfo.Builder(videoUrl).setMetadata(metadata).setStreamType(MediaInfo.STREAM_TYPE_BUFFERED).setContentType("video/mp4").build()
MediaInfo mediaInfo = new MediaInfo.Builder(videoUrl)
                        .setMetadata(metadata)
                        .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)
                        .setContentType("video/mp4")
                        .build();
Intent intent = new Intent(MainActivity.this, LocalPlayerActivity.class);
preferences=getPreferences(MODE_PRIVATE)
SharedPreferences preferences = getPreferences(MODE_PRIVATE);
defaultSmsPackage=Telephony.Sms.getDefaultSmsPackage(this)
String defaultSmsPackage = Telephony.Sms.getDefaultSmsPackage(this);
Intent intent = new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
availableAppProvider=EasyCustomTabs.getInstance()
AvailableAppProvider availableAppProvider = EasyCustomTabs.getInstance();
ConnectedClient connectedClient = new ConnectedClient(client);
binder=Binder.newInstance()
Binder binder = Binder.newInstance();
List<Composer> composerList = new ArrayList<>();
customTabsSession=connection.newSession()
CustomTabsSession customTabsSession = connection.newSession();
CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(customTabsSession);
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
context=EasyCustomTabs.getInstance().getContext()
Context context = EasyCustomTabs.getInstance().getContext();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
packagesSupportingCustomTabs=getPackagesSupportingCustomTabs()
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
defaultPackage=getDefaultPackage()
String defaultPackage = getDefaultPackage();
defaultActivityInfo=packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK,0)
ResolveInfo defaultActivityInfo = packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK, 0);
String packageName = defaultActivityInfo.activityInfo.packageName;
resolvedInfoList=packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK,0)
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<String> packagesSupportingCustomTabs = new ArrayList<>();
Intent serviceIntent = new Intent();
bestPackageFinder=BestPackageFinder.newInstance()
BestPackageFinder bestPackageFinder = BestPackageFinder.newInstance();
packageName=bestPackageFinder.findBestPackage()
String packageName = bestPackageFinder.findBestPackage();
resolveInfo=createResolveInfoFor(packageName)
ResolveInfo resolveInfo = createResolveInfoFor(packageName);
ResolveInfo resolveInfo = new ResolveInfo();
List<ResolveInfo> resolveInfoList = new ArrayList<>();
defaultPackageResolveInfo=createResolveInfoFor(packageName)
ResolveInfo defaultPackageResolveInfo = createResolveInfoFor(packageName);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
oldestApiMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage oldestApiMessage = apiMessages.get(apiMessages.size() - 1);
String lastResponseEpochTime = oldestApiMessage.timeStamp;
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
latestMessage=latestMessages.get(latestMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage latestMessage = latestMessages.get(latestMessages.size() - 1);
latestMessageDateTime=convertToLocalDateTime(latestMessage.timeStamp)
LocalDateTime latestMessageDateTime = convertToLocalDateTime(latestMessage.timeStamp);
List<ChannelHistory.Message> messages = new ArrayList<>();
historyFrom=getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1))
LocalDateTime historyFrom = getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1));
historyTo=getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0))
LocalDateTime historyTo = getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0));
String text = apiMessage.text;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
lastMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage lastMessage = apiMessages.get(apiMessages.size() - 1);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
firstMessage=apiMessages.get(0)
ApiPagedChannelHistory.ApiMessage firstMessage = apiMessages.get(0);
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
String slackToken = args[0];
retrofit=new Retrofit.Builder().baseUrl("https://slack.com/api/").addConverterFactory(GsonConverterFactory.create()).build()
Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://slack.com/api/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();
slackWebService=retrofit.create(SlackWebService.class)
SlackWebService slackWebService = retrofit.create(SlackWebService.class);
slackHistoryFetcher=SlackHistoryFetcher.from(slackWebService,slackToken)
SlackHistoryFetcher slackHistoryFetcher = SlackHistoryFetcher.from(slackWebService, slackToken);
start=LocalDateTime.now()
LocalDateTime start = LocalDateTime.now();
end=LocalDateTime.now().minusDays(7)
LocalDateTime end = LocalDateTime.now().minusDays(7);
channelHistory=slackHistoryFetcher.getChannelHistory(start,end)
ChannelHistory channelHistory = slackHistoryFetcher.getChannelHistory(start, end);
HistoryConverter historyConverter = new HistoryConverter();
ApiPagedResponse apiPagedResponse = new ApiPagedResponse(start);
response=fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime())
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
apiPagedChannelHistory=response.body()
ApiPagedChannelHistory apiPagedChannelHistory = response.body();
channelHistory=slackWebService.getChannelHistory(slackToken,channel,lastResponseEpochTime,NUMBER_OF_RESULTS)
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
ApiPagedChannelHistory apiPagedChannelHistory = new ApiPagedChannelHistory();
ApiPagedChannelHistory.ApiMessage apiMessage = new ApiPagedChannelHistory.ApiMessage();
final TextView textView = new TextView(context);
emptyView=findViewById(R.id.empty_view)
View emptyView = findViewById(R.id.empty_view);
final Integer action = values[0];
LoremAdapter loremAdapter = new LoremAdapter();
accounts=accountManager.getAccountsByType(accountType)
Account[] accounts = accountManager.getAccountsByType(accountType);
Bundle result;
Bundle result;
Bundle result = new Bundle();
activity=createLoginIntent(context,accountType,authTokenType,requiredFeatures,options)
Intent activity = createLoginIntent(context, accountType, authTokenType, requiredFeatures, options);
Bundle bundle = new Bundle();
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
accounts=accountManager.getAccountsByType(authTokenType)
Account[] accounts = accountManager.getAccountsByType(authTokenType);
bundle=createResponseBundle(token)
Bundle bundle = createResponseBundle(token);
accountManager=AccountManager.get(this.getApplicationContext())
AccountManager accountManager = AccountManager.get(this.getApplicationContext());
Account account = new Account(token.getUserName(), getAccountName());
Bundle bundle = new Bundle();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
GertHerbAuthenticator authenticator = new GertHerbAuthenticator(this);
fontId=getFontId(context,attrs)
int fontId = getFontId(context, attrs);
fontType=getFontType(fontId)
FontType fontType = getFontType(fontId);
typedArray=context.obtainStyledAttributes(attrs,R.styleable.CustomTextAppearance)
TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CustomTextAppearance);
typeface=createTypeFace(context,fontType)
Typeface typeface = createTypeFace(context, fontType);
info=context.getApplicationInfo()
ApplicationInfo info = context.getApplicationInfo();
name=activity.getTitle().toString()
String name = activity.getTitle().toString();
client=mServer.accept()
Socket client = mServer.accept();
boolean result;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
BufferedReader in = null;
request=in.readLine()
final String request = in.readLine();
String command;
String parameters;
index=request.indexOf(' ')
int index = request.indexOf(' ');
boolean result;
boolean success = true;
BufferedWriter out = null;
index=parameters.indexOf(' ')
int index = parameters.indexOf(' ');
code=parameters.substring(0,index)
final String code = parameters.substring(0, index);
int hashCode = (int) Long.parseLong(code, 16);
window=findWindow(hashCode)
final View window = findWindow(hashCode);
dispatch=ViewDebug.class.getDeclaredMethod("dispatchCommand",View.class,String.class,String.class,OutputStream.class)
final Method dispatch = ViewDebug.class.getDeclaredMethod("dispatchCommand",
                        View.class, String.class, String.class, OutputStream.class);
View window = null;
boolean result = true;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
boolean result = true;
String focusName = null;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
View focusedWindow = null;
BufferedWriter out = null;
boolean needWindowListUpdate = false;
boolean needFocusedWindowUpdate = false;
BetterAccountManager accountManager = new BetterAccountManager(this, getString(R.string.account_type), getString(R.string.token_type), null);
loginView=Views.findById(this,R.id.login_view)
LoginView loginView = Views.findById(this, R.id.login_view);
authorizationApi=new GithubApiFactory().createAuthorizationApi(credentials.username,credentials.password)
GithubApi authorizationApi = new GithubApiFactory().createAuthorizationApi(credentials.username, credentials.password);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
Endpoint endpoint = new Endpoint() {
            @Override
            public String getUrl() {
                return GITHUB_API_URL;
            }

            @Override
            public String getName() {
                return "Live";
            }
        };
interceptor=createAuthorizationRequestInterceptor(username,password)
RequestInterceptor interceptor = createAuthorizationRequestInterceptor(username, password);
restAdapter=createRestAdapter(endpoint,interceptor)
RestAdapter restAdapter = createRestAdapter(endpoint, interceptor);
Dummy dummy = new Dummy();
result=dummy.explodes()
boolean result = dummy.explodes();
String base64EncodedPublicKey = "CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE";
premiumPurchase=inventory.getPurchase(SKU_PREMIUM)
Purchase premiumPurchase = inventory.getPurchase(SKU_PREMIUM);
infiniteGasPurchase=inventory.getPurchase(SKU_INFINITE_GAS)
Purchase infiniteGasPurchase = inventory.getPurchase(SKU_INFINITE_GAS);
gasPurchase=inventory.getPurchase(SKU_GAS)
Purchase gasPurchase = inventory.getPurchase(SKU_GAS);
String payload = "";
String payload = "";
String payload = "";
payload=p.getDeveloperPayload()
String payload = p.getDeveloperPayload();
int index = mTank >= TANK_RES_IDS.length ? TANK_RES_IDS.length - 1 : mTank;
AlertDialog.Builder bld = new AlertDialog.Builder(this);
spe=getPreferences(MODE_PRIVATE).edit()
SharedPreferences.Editor spe = getPreferences(MODE_PRIVATE).edit();
sp=getPreferences(MODE_PRIVATE)
SharedPreferences sp = getPreferences(MODE_PRIVATE);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                                  + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                    | ((source[d + 1 + off] << 24) >>> 16)
                    | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                    | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                                   "-1002:Bad response received/" +
                                   "-1003:Purchase signature verification failed/" +
                                   "-1004:Send intent failed/" +
                                   "-1005:User cancelled/" +
                                   "-1006:Unknown purchase response/" +
                                   "-1007:Missing token/" +
                                   "-1008:Unknown error/" +
                                   "-1009:Subscriptions not available/" +
                                   "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(),
                    itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                        | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                        | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                            | ((source[d + 1 + off] << 24) >>> 16)
                            | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                            | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                "-1002:Bad response received/" +
                "-1003:Purchase signature verification failed/" +
                "-1004:Send intent failed/" +
                "-1005:User cancelled/" +
                "-1006:Unknown purchase response/" +
                "-1007:Missing token/" +
                "-1008:Unknown error/" +
                "-1009:Subscriptions not available/" +
                "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(), itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
responseCode=result.getResponse()
int responseCode = result.getResponse();
sku=purchase.getSku()
String sku = purchase.getSku();
skuDetails=inv.getSkuDetails(sku)
SkuDetails skuDetails = inv.getSkuDetails(sku);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
Button purchaseFiveButton = (Button) rootView.findViewById(R.id.fragment_main_button_purchase_five_coins);
xml=context.obtainStyledAttributes(attrs,R.styleable.LandingStrip)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.LandingStrip);
tabLayoutId=xml.getResourceId(R.styleable.LandingStrip_tabLayoutId,MISSING_TAB_LAYOUT_ID)
int tabLayoutId = xml.getResourceId(R.styleable.LandingStrip_tabLayoutId, MISSING_TAB_LAYOUT_ID);
indicatorColour=xml.getResourceId(R.styleable.LandingStrip_indicatorColor,DEFAULT_INDICATOR_COLOUR)
int indicatorColour = xml.getResourceId(R.styleable.LandingStrip_indicatorColor, DEFAULT_INDICATOR_COLOUR);
indicatorHeight=getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight,DEFAULT_INDICATOR_HEIGHT,xml)
int indicatorHeight = getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight, DEFAULT_INDICATOR_HEIGHT, xml);
tabsPaddingLeft=getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingLeft = getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding, DEFAULT_TABS_PADDING, xml);
tabsPaddingRight=getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingRight = getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding, DEFAULT_TABS_PADDING, xml);
MutableCoordinates drawCurrentTabCoordinates = new MutableCoordinates();
MutableCoordinates drawNextTabCoordinates = new MutableCoordinates();
MutableCoordinates drawMovingIndicatorCoordinates = new MutableCoordinates();
currentTab=tabsContainer.getTabAt(currentPosition)
View currentTab = tabsContainer.getTabAt(currentPosition);
currentTabStart=currentTab.getLeft()
float currentTabStart = currentTab.getLeft();
currentTabEnd=currentTab.getRight()
float currentTabEnd = currentTab.getRight();
nextTab=tabsContainer.getTabAt(currentPosition + 1)
View nextTab = tabsContainer.getTabAt(currentPosition + 1);
nextTabPositionOffset=getFractionFrom(pagePositionOffset)
float nextTabPositionOffset = getFractionFrom(pagePositionOffset);
indicatorStart=getIndicatorPosition(nextTab.getStart(),pagePositionOffset,currentTab.getStart(),nextTabPositionOffset)
float indicatorStart = getIndicatorPosition(nextTab.getStart(), pagePositionOffset, currentTab.getStart(), nextTabPositionOffset);
indicatorEnd=getIndicatorPosition(nextTab.getEnd(),pagePositionOffset,currentTab.getEnd(),nextTabPositionOffset)
float indicatorEnd = getIndicatorPosition(nextTab.getEnd(), pagePositionOffset, currentTab.getEnd(), nextTabPositionOffset);
height=getHeight()
int height = getHeight();
tabCount=pagerAdapter.getCount()
int tabCount = pagerAdapter.getCount();
title=pagerAdapter.getPageTitle(position)
CharSequence title = pagerAdapter.getPageTitle(position);
inflatedTabView=tabsContainer.inflateTab(layoutInflater,attributes.getTabLayoutId())
View inflatedTabView = tabsContainer.inflateTab(layoutInflater, attributes.getTabLayoutId());
int position = (int) view.getTag(TAG_KEY_POSITION);
scrollOffset=getHorizontalScrollOffset(position,positionOffset)
int scrollOffset = getHorizontalScrollOffset(position, positionOffset);
newScrollX=calculateScrollOffset(position,scrollOffset,positionOffset)
float newScrollX = calculateScrollOffset(position, scrollOffset, positionOffset);
tabWidth=tabsContainer.getTabAt(position).getWidth()
int tabWidth = tabsContainer.getTabAt(position).getWidth();
tabForPosition=tabsContainer.getTabAt(position)
View tabForPosition = tabsContainer.getTabAt(position);
float tabStartX = tabForPosition.getLeft() + scrollOffset;
int viewMiddleOffset = getTabParentWidth() / 2;
float tabCenterOffset = (tabForPosition.getRight() - tabForPosition.getLeft()) * 0.5F;
nextTabDelta=getNextTabDelta(position,pagerOffset,tabForPosition)
float nextTabDelta = getNextTabDelta(position, pagerOffset, tabForPosition);
LinearLayout tabsContainerView = new LinearLayout(context);
tab=getTabAt(index)
View tab = getTabAt(index);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
position=indicatorCoordinates.getStart()
float position = indicatorCoordinates.getStart();
lastTabOffset=((ViewGroup)getChildAt(0)).getChildAt(getChildCount() - 1).getWidth()
float lastTabOffset = ((ViewGroup) getChildAt(0)).getChildAt(getChildCount() - 1).getWidth();
frequency=getOneCycle(lastTabOffset)
float frequency = getOneCycle(lastTabOffset);
r=toHex(calculateColour(position,frequency,PHASE_RED,AMPLITUDE,CENTER_FREQUENCY))
String r = toHex(calculateColour(position, frequency, PHASE_RED, AMPLITUDE, CENTER_FREQUENCY));
g=toHex(calculateColour(position,frequency,PHASE_GREEN,AMPLITUDE,CENTER_FREQUENCY))
String g = toHex(calculateColour(position, frequency, PHASE_GREEN, AMPLITUDE, CENTER_FREQUENCY));
b=toHex(calculateColour(position,frequency,PHASE_BLUE,AMPLITUDE,CENTER_FREQUENCY))
String b = toHex(calculateColour(position, frequency, PHASE_BLUE, AMPLITUDE, CENTER_FREQUENCY));
height=getHeight()
int height = getHeight();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPagerFragment viewPagerFragment = new ViewPagerFragment();
Bundle bundle = new Bundle();
TextView view = (TextView) layoutInflater.inflate(R.layout.view_demo, container, false);
currentPosition=viewPagerAdapterState.getCurrentPosition()
int currentPosition = viewPagerAdapterState.getCurrentPosition();
view=getView(container,position)
View view = getView(container, position);
parcelableSparseArray=viewPagerAdapterState.get(position)
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
View view = (View) object;
SparseArray<Parcelable> viewState = new SparseArray<>();
position=entry.getValue()
int position = entry.getValue();
view=entry.getKey()
View view = entry.getKey();
bundle=in.readBundle()
Bundle bundle = in.readBundle();
Map<Integer, SparseArray<Parcelable>> viewStates = new HashMap<>(bundle.keySet().size());
sparseParcelableArray=bundle.getSparseParcelableArray(key)
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
primaryItemPosition=in.readInt()
int primaryItemPosition = in.readInt();
Bundle bundle = new Bundle();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
final TextView abText = (TextView) findViewById(R.id.ab_text);
final AyBe ayBe = new AyBe();
id=item.getItemId()
int id = item.getItemId();
callback=weakCallback.get()
AbTestingParamsLoadedCallback callback = weakCallback.get();
WeakReference<NoLeakActivity> weakNoLeakActivity = new WeakReference<NoLeakActivity>(noLeakActivity);
noLeakActivity=weakNoLeakActivity.get()
NoLeakActivity noLeakActivity = weakNoLeakActivity.get();
RecyclerView recyclerView = (RecyclerView) layoutInflater.inflate(R.layout.view_page, viewGroup, false);
itemView=layoutInflater.inflate(R.layout.view_item,parent,false)
View itemView = layoutInflater.inflate(R.layout.view_item, parent, false);
actual=foo.twice(HALF)
int actual = foo.twice(HALF);
int expected = WHOLE;
final float inverseRatio = 1f - ratio;
float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRatio);
float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRatio);
float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRatio);
hsv=node.getHsv()
float[] hsv = node.getHsv();
width=bitmap.getWidth()
final int width = bitmap.getWidth();
height=bitmap.getHeight()
final int height = bitmap.getHeight();
final int[] rgbPixels = new int[width * height];
final MedianCutQuantizer mcq = new MedianCutQuantizer(rgbPixels, NUM_COLORS);
primaryAccentColor=findPrimaryAccentColor()
final ColorNode primaryAccentColor = findPrimaryAccentColor();
secondaryAccentColor=findSecondaryAccentColor(primaryAccentColor)
final ColorNode secondaryAccentColor = findSecondaryAccentColor(primaryAccentColor);
tertiaryAccentColor=findTertiaryAccentColor(primaryAccentColor,secondaryAccentColor)
final int tertiaryAccentColor = findTertiaryAccentColor(
                primaryAccentColor, secondaryAccentColor);
primaryTextColor=findPrimaryTextColor(primaryAccentColor)
final int primaryTextColor = findPrimaryTextColor(primaryAccentColor);
secondaryTextColor=findSecondaryTextColor(primaryAccentColor)
final int secondaryTextColor = findSecondaryTextColor(primaryAccentColor);
final float primaryHue = primary.getHsv()[0];
final float candidateHue = candidate.getHsv()[0];
copy=Arrays.copyOf(palette,palette.length)
final MedianCutQuantizer.ColorNode[] copy = Arrays.copyOf(palette, palette.length);
maxCount=palette[0].getCount()
final float maxCount = palette[0].getCount();
lhsWeight=calculateWeight(lhs,maxCount)
final float lhsWeight = calculateWeight(lhs, maxCount);
rhsWeight=calculateWeight(rhs,maxCount)
final float rhsWeight = calculateWeight(rhs, maxCount);
float sum = 0;
float sumWeight = 0;
float value = values[i];
float weight = values[i + 1];
ColorHistogram colorHist = new ColorHistogram(pixels);
K=colorHist.getNumberOfColors()
int K = colorHist.getNumberOfColors();
ColorNode[] rCols = null;
rgb=colorHist.getColor(i)
int rgb = colorHist.getColor(i);
cnt=colorHist.getCount(i)
int cnt = colorHist.getCount(i);
ColorBox initialBox = new ColorBox(0, K - 1, 0);
List<ColorBox> colorSet = new ArrayList<ColorBox>();
int k = 1;
boolean done = false;
nextBox=findBoxToSplit(colorSet)
ColorBox nextBox = findBoxToSplit(colorSet);
newBox=nextBox.splitBox()
ColorBox newBox = nextBox.splitBox();
color=findClosestColor(pixels[i])
ColorNode color = findClosestColor(pixels[i]);
idx=findClosestColorIndex(rgb)
int idx = findClosestColorIndex(rgb);
red=Color.red(rgb)
int red = Color.red(rgb);
grn=Color.green(rgb)
int grn = Color.green(rgb);
blu=Color.blue(rgb)
int blu = Color.blue(rgb);
int minIdx = 0;
int minDistance = Integer.MAX_VALUE;
ColorNode color = quantColors[i];
d2=color.distance2(red,grn,blu)
int d2 = color.distance2(red, grn, blu);
ColorBox boxToSplit = null;
int minLevel = Integer.MAX_VALUE;
n=colorBoxes.size()
int n = colorBoxes.size();
ColorNode[] avgColors = new ColorNode[n];
int i = 0;
int dr = this.red - red;
int dg = this.grn - grn;
int db = this.blu - blu;
ColorNode color = imageColors[i];
int r = color.red;
int g = color.grn;
int b = color.blu;
dim=getLongestColorDimension()
ColorDimension dim = getLongestColorDimension();
med=findMedian(dim)
int med = findMedian(dim);
int nextLevel = level + 1;
ColorBox newBox = new ColorBox(med + 1, upper, nextLevel);
int rLength = rmax - rmin;
int gLength = gmax - gmin;
int bLength = bmax - bmin;
int half = count / 2;
int nPixels, median;
int rSum = 0;
int gSum = 0;
int bSum = 0;
int n = 0;
ColorNode ci = imageColors[i];
int cnt = ci.cnt;
double nd = n;
int avgRed = (int) (0.5 + rSum / nd);
int avgGrn = (int) (0.5 + gSum / nd);
int avgBlu = (int) (0.5 + bSum / nd);
s=this.getClass().getSimpleName()
String s = this.getClass().getSimpleName();
int i = 0;
int N = pixelsOrig.length;
int[] pixelsCpy = new int[N];
int k = -1;
int curColor = -1;
int nColors = k + 1;
id=item.getItemId()
int id = item.getItemId();
Intent intent = new Intent();
bitmap=((BitmapDrawable)imageView.getDrawable()).getBitmap()
Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap();
DominantColorCalculator dominantColorCalculator = new DominantColorCalculator(bitmap);
selectedImageUri=data.getData()
Uri selectedImageUri = data.getData();
selectedImagePath=getPath(selectedImageUri)
String selectedImagePath = getPath(selectedImageUri);
String[] projection = {MediaStore.Images.Media.DATA};
cursor=managedQuery(uri,projection,null,null,null)
Cursor cursor = managedQuery(uri, projection, null, null, null);
column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)
int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
LinearLayout rootView = (LinearLayout) inflater.inflate(R.layout.fragment_main, container, false);
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
preapprovalButton=payPal.getCheckoutButton(getActivity(),PayPal.BUTTON_194x37,CheckoutButton.TEXT_PAY)
CheckoutButton preapprovalButton = payPal.getCheckoutButton(getActivity(), PayPal.BUTTON_194x37, CheckoutButton.TEXT_PAY);
preapprovalIntent=payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY)
Intent preapprovalIntent = payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY);
String resultTitle = "";
String resultInfo = "";
String resultExtra = "";
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
PayPalPreapproval preapproval = new PayPalPreapproval();
preapproval=createPreapproval(preapprovalKey)
PayPalPreapproval preapproval = createPreapproval(preapprovalKey);
Bundle bundle = new Bundle();
int availableLength = maxLength;
StringBuilder stringBuilder = new StringBuilder(maxLength);
prefixAndSuffixLength=computeAppendedLengthIncludingSeparatorSpaces(prefix,suffix)
int prefixAndSuffixLength = computeAppendedLengthIncludingSeparatorSpaces(prefix, suffix);
urlLength=computeUrlLengthIncludingSeparatorSpace(url)
int urlLength = computeUrlLengthIncludingSeparatorSpace(url);
trimmedSubject=ellipsizeTextIfExceedsMaxLength(subject,availableLength)
String trimmedSubject = ellipsizeTextIfExceedsMaxLength(subject, availableLength);
int length = 0;
preferences=context.getSharedPreferences(MRU_PREFERENCES,Context.MODE_PRIVATE)
SharedPreferences preferences = context.getSharedPreferences(MRU_PREFERENCES, Context.MODE_PRIVATE);
args=getArguments()
Bundle args = getArguments();
themeResId=getThemeResIdIfProvidedIn(args)
int themeResId = getThemeResIdIfProvidedIn(args);
title=getTitleIfProvidedIn(args)
CharSequence title = getTitleIfProvidedIn(args);
builder=createDialogBuilder(themeResId).setCancelable(true).setView(dialogView)
AlertDialog.Builder builder = createDialogBuilder(themeResId)
                .setCancelable(true)
                .setView(dialogView);
inflater=getActivity().getLayoutInflater()
LayoutInflater inflater = getActivity().getLayoutInflater();
GridView gridView = (GridView) rootView.findViewById(R.id.ps__dialog_grid);
targetApps=extractTargetAppsFrom(args)
TargetApps targetApps = extractTargetAppsFrom(args);
allShareTargets=getAvailableShareTargets(sharingIntent)
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
priorityAppInfos=createPriorityResolveInfoList(targetApps,allShareTargets)
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
otherAppInfos=createOtherAppsResolveInfoList(priorityAppInfos,allShareTargets)
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
resolveInfos=targetApps.extractTargetResolveInfosFrom(allShareTargets)
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
mruResolveInfo=findMruResolveInfoIn(allShareTargets)
ResolveInfo mruResolveInfo = findMruResolveInfoIn(allShareTargets);
List<ResolveInfo> otherAppsInfos = new ArrayList<ResolveInfo>(allAppInfos);
mruPackageName=persister.getLastUsedTarget()
String mruPackageName = persister.getLastUsedTarget();
String packageName = resolveInfo.activityInfo.packageName;
packageManager=getActivity().getPackageManager()
PackageManager packageManager = getActivity().getPackageManager();
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
View buttonStrip = (View) showMoreButton.getParent();
gridView=getGridView()
GridView gridView = getGridView();
intent=wrapIntentWithExplicitTargetComponentForItem(position,sharingIntent)
Intent intent = wrapIntentWithExplicitTargetComponentForItem(position, sharingIntent);
Intent intent = new Intent(sharingIntent);
ActivityInfo activity = adapter.getItem(position).activityInfo;
ComponentName name = new ComponentName(activity.applicationInfo.packageName, activity.name);
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
PriorityShareDialog dialog = new PriorityShareDialog();
Bundle args = new Bundle();
sharingIntent=createSharingIntent()
Intent sharingIntent = createSharingIntent();
fragmentManager=activity.getFragmentManager()
FragmentManager fragmentManager = activity.getFragmentManager();
Intent intent = new Intent(Intent.ACTION_SEND);
dialog=new PriorityShareDialog.Builder().setTitle(title).setTargetApps(targetApps).setSharingIntent(sharingIntent).setOnPrepareSharingIntentListener(listener).setShowMostRecentlyUsed(showMostRecentlyUsed).build()
PriorityShareDialog dialog = new PriorityShareDialog.Builder()
                .setTitle(title)
                .setTargetApps(targetApps)
                .setSharingIntent(sharingIntent)
                .setOnPrepareSharingIntentListener(listener)
                .setShowMostRecentlyUsed(showMostRecentlyUsed)
                .build();
PrioritySharer prioritySharer = new PrioritySharer();
prioritySharer=build()
PrioritySharer prioritySharer = build();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
layoutInflater=LayoutInflater.from(context)
LayoutInflater layoutInflater = LayoutInflater.from(context);
iconSizePx=getIconSizePx(context.getResources())
int iconSizePx = getIconSizePx(context.getResources());
ArrayList<ResolveInfo> sortedList = new ArrayList<ResolveInfo>(resolveInfoList);
int otherAppsCountMaybe = showAllApps ? otherAppInfos.size() : 0;
firstOtherAppsItemPosition=priorityAppInfos.size()
int firstOtherAppsItemPosition = priorityAppInfos.size();
int offsetPosition = position - firstOtherAppsItemPosition;
TextView textView;
textView=initializeItemViewIfNecessary(convertView,R.layout.ps__grid_item_share,parent)
TextView textView = initializeItemViewIfNecessary(convertView, R.layout.ps__grid_item_share, parent);
info=getItem(position)
ResolveInfo info = getItem(position);
icon=info.loadIcon(packageManager)
Drawable icon = info.loadIcon(packageManager);
arraySize=in.readInt()
int arraySize = in.readInt();
String[] packageNames = new String[arraySize];
arraySize=targetPackages.size()
int arraySize = targetPackages.size();
String[] packagesArray = new String[arraySize];
SparseArray<ResolveInfo> matchedResolveInfos = new SparseArray<ResolveInfo>(targetPackages.size());
String packageName = info.activityInfo.packageName;
index=indexOfItemInto(packageName,targetPackages)
int index = indexOfItemInto(packageName, targetPackages);
sparseArraySize=sparseArray.size()
int sparseArraySize = sparseArray.size();
ArrayList<T> list = new ArrayList<T>(sparseArraySize);
int i = 0;
originalSubject=intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT)
CharSequence originalSubject = intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT);
String subject = originalSubject != null ? originalSubject.toString() : null;
composer=createComposer()
MessageComposer composer = createComposer();
component=intent.getComponent()
ComponentName component = intent.getComponent();
targetPackageName=component.getPackageName()
String targetPackageName = component.getPackageName();
adapter=ArrayAdapter.createFromResource(this,R.array.target_apps,android.R.layout.simple_spinner_item)
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
EditText text = (EditText) findViewById(R.id.text);
EditText title = (EditText) findViewById(R.id.title);
EditText mimeType = (EditText) findViewById(R.id.mime_type);
EditText dataUri = (EditText) findViewById(R.id.data_uri);
Switch showMostRecentlyUsed = (Switch) findViewById(R.id.show_most_recently_used);
uriString=dataUri.getText().toString()
String uriString = dataUri.getText().toString();
EditText text = (EditText) findViewById(R.id.text);
TextView textView = (TextView) convertView.findViewById(R.id.positionView);
colorView=convertView.findViewById(R.id.colorView)
View colorView = convertView.findViewById(R.id.colorView);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
offset=headerPlaceholder.getTop()
int offset = headerPlaceholder.getTop();
Integer item = COLORS[position];
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
firstVisiblePosition=grid.getFirstVisiblePosition()
int firstVisiblePosition = grid.getFirstVisiblePosition();
inflate=getViewForPosition(container,position)
View inflate = getViewForPosition(container, position);
id=item.getItemId()
int id = item.getItemId();
MyActivity activity = new MyActivity();
String manifestProperty = "../app/src/main/AndroidManifest.xml";
String resProperty = "../app/src/main/res";
cursor=resolver.query(uri,projection,selection,selectionArgs,null)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, null);
cursor=resolver.query(uri,projection,selection,selectionArgs,sortOrder)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, sortOrder);
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=richClass.setter(name)
Method setter = richClass.setter(name);
T obj;
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=methodsByName.get(name)
Method setter = methodsByName.get(name);
int type = TYPE_INT;
Class<?> t = setter.getParameterTypes()[0];
Class<?> t = setter.getParameterTypes()[0];
cursorType=cursor.getType(index)
final int cursorType = cursor.getType(index);
final Object obj;
s=f.getAnnotation(Mapper.class)
Mapper s = f.getAnnotation(Mapper.class);
mm=m.getAnnotation(Mapper.class)
Mapper mm = m.getAnnotation(Mapper.class);
methodName=StringUtil.asCamelifySetMethod(what)
String methodName = StringUtil.asCamelifySetMethod(what);
cursor=getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,null,null,null,null)
Cursor cursor = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
now=System.currentTimeMillis()
long now = System.currentTimeMillis();
List<Contact2> typedCursor = new CursorList<Contact2>(cursor, Contact2.class);
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[a-zA-Z0-9]+")
Pattern p = Pattern.compile("[a-zA-Z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[A-Z][a-z0-9]+")
Pattern p = Pattern.compile("[A-Z][a-z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
SurfaceView first = (SurfaceView) findViewById(R.id.firstSurface);
SurfaceView second = (SurfaceView) findViewById(R.id.secondSurface);
Intent pickVideo = new Intent(Intent.ACTION_PICK);
xml=context.obtainStyledAttributes(attrs,R.styleable.RelativeLayoutWithForeground)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.RelativeLayoutWithForeground);
int foregroundResId = INVALID_FOREGROUND_ID;
drawable=getDrawable(getResources(),foregroundResId)
Drawable drawable = getDrawable(getResources(), foregroundResId);
Bundle args = new Bundle();
enroll=mHotwordDetector.createEnrollIntent()
Intent enroll = mHotwordDetector.createEnrollIntent();

Diff of 996df319625e8a5305ec12bed8affc6e2e2f17d8 and b5c949f8ebcedd476407ca61d954845ace866e6b:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 1
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 996df319625e8a5305ec12bed8affc6e2e2f17d8 to b5c949f8ebcedd476407ca61d954845ace866e6b


****Parsing for addition at revision b5c949f8ebcedd476407ca61d954845ace866e6b****

Added AccessibilityServices.java to .\/spikes\ repository source files.
Added Action.java to .\/spikes\ repository source files.
Added Actions.java to .\/spikes\ repository source files.
Added ActionsAccessibilityDelegate.java to .\/spikes\ repository source files.
Added ActionsAlertDialogCreator.java to .\/spikes\ repository source files.
Added AccessibilityServicesActivity.java to .\/spikes\ repository source files.
Added Demo.java to .\/spikes\ repository source files.
Added DemoAdapter.java to .\/spikes\ repository source files.
Added CustomActionsActivity.java to .\/spikes\ repository source files.
Added TweetView.java to .\/spikes\ repository source files.
Added DemosActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added DrawerActivity.java to .\/spikes\ repository source files.
Added EarthActivity.java to .\/spikes\ repository source files.
Added ProHaxDrawerActivity.java to .\/spikes\ repository source files.
Added SaturnActivity.java to .\/spikes\ repository source files.
Added LocalPlayerActivity.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added CastApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ComposeSmsActivity.java to .\/spikes\ repository source files.
Added HeadlessSmsSendService.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MmsReceiver.java to .\/spikes\ repository source files.
Added SmsReceiver.java to .\/spikes\ repository source files.
Added ExtendedDemoActivity.java to .\/spikes\ repository source files.
Added ExtendedDemoApplication.java to .\/spikes\ repository source files.
Added SimpleDemoActivity.java to .\/spikes\ repository source files.
Added SimpleDemoApplication.java to .\/spikes\ repository source files.
Added Binder.java to .\/spikes\ repository source files.
Added ConnectedClient.java to .\/spikes\ repository source files.
Added Connection.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnection.java to .\/spikes\ repository source files.
Added ServiceConnectionCallback.java to .\/spikes\ repository source files.
Added EasyCustomTabs.java to .\/spikes\ repository source files.
Added ActionButtonComposer.java to .\/spikes\ repository source files.
Added CloseButtonIconComposer.java to .\/spikes\ repository source files.
Added Composer.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilder.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigator.java to .\/spikes\ repository source files.
Added EasyCustomTabsWebNavigator.java to .\/spikes\ repository source files.
Added ExitAnimationsComposer.java to .\/spikes\ repository source files.
Added IntentCustomizer.java to .\/spikes\ repository source files.
Added MenuItemComposer.java to .\/spikes\ repository source files.
Added NavigationFallback.java to .\/spikes\ repository source files.
Added Navigator.java to .\/spikes\ repository source files.
Added ShowTitleComposer.java to .\/spikes\ repository source files.
Added StartAnimationsComposer.java to .\/spikes\ repository source files.
Added ToolbarColorComposer.java to .\/spikes\ repository source files.
Added UrlBarHidingComposer.java to .\/spikes\ repository source files.
Added WebNavigator.java to .\/spikes\ repository source files.
Added AvailableAppProvider.java to .\/spikes\ repository source files.
Added BestPackageFinder.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProvider.java to .\/spikes\ repository source files.
Added BinderTest.java to .\/spikes\ repository source files.
Added ConnectedClientTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnectionTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigatorTest.java to .\/spikes\ repository source files.
Added BestPackageFinderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProviderTest.java to .\/spikes\ repository source files.
Added ApiPagedChannelHistory.java to .\/spikes\ repository source files.
Added ApiPagedResponse.java to .\/spikes\ repository source files.
Added ChannelHistory.java to .\/spikes\ repository source files.
Added HistoryConverter.java to .\/spikes\ repository source files.
Added Runner.java to .\/spikes\ repository source files.
Added SlackHistoryFetcher.java to .\/spikes\ repository source files.
Added SlackWebService.java to .\/spikes\ repository source files.
Added ApiPagedResponseTest.java to .\/spikes\ repository source files.
Added MainActivityTest.java to .\/spikes\ repository source files.
Added LoremAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added BetterAccountManager.java to .\/spikes\ repository source files.
Added BetterAuthenticator.java to .\/spikes\ repository source files.
Added BetterAuthenticatorActivity.java to .\/spikes\ repository source files.
Added GertHerbAuthenticator.java to .\/spikes\ repository source files.
Added GertHerbAuthenticatorService.java to .\/spikes\ repository source files.
Added NoAccountException.java to .\/spikes\ repository source files.
Added ReactiveAuthenticatorActivity.java to .\/spikes\ repository source files.
Added Token.java to .\/spikes\ repository source files.
Added GertHerbActivity.java to .\/spikes\ repository source files.
Added GertHerbApplication.java to .\/spikes\ repository source files.
Added GertHerbAuthenticationActivity.java to .\/spikes\ repository source files.
Added TypefaceFactory.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added ViewServer.java to .\/spikes\ repository source files.
Added ViewServerManager.java to .\/spikes\ repository source files.
Added DeveloperError.java to .\/spikes\ repository source files.
Added HomeActivity.java to .\/spikes\ repository source files.
Added LoginActivity.java to .\/spikes\ repository source files.
Added LoginView.java to .\/spikes\ repository source files.
Added UserCredentials.java to .\/spikes\ repository source files.
Added FontButton.java to .\/spikes\ repository source files.
Added FontEditText.java to .\/spikes\ repository source files.
Added FontTextView.java to .\/spikes\ repository source files.
Added GithubApi.java to .\/spikes\ repository source files.
Added GithubApiFactory.java to .\/spikes\ repository source files.
Added TokenRequest.java to .\/spikes\ repository source files.
Added TokenResponse.java to .\/spikes\ repository source files.
Added Dummy.java to .\/spikes\ repository source files.
Added DummyTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MainFragment.java to .\/spikes\ repository source files.
Added Attributes.java to .\/spikes\ repository source files.
Added Coordinates.java to .\/spikes\ repository source files.
Added IndicatorCoordinatesCalculator.java to .\/spikes\ repository source files.
Added LandingStrip.java to .\/spikes\ repository source files.
Added MutableCoordinates.java to .\/spikes\ repository source files.
Added OnPagerAdapterChangedListener.java to .\/spikes\ repository source files.
Added PagerAdapterObserver.java to .\/spikes\ repository source files.
Added Scrollable.java to .\/spikes\ repository source files.
Added ScrollingPageChangeListener.java to .\/spikes\ repository source files.
Added State.java to .\/spikes\ repository source files.
Added TabsContainer.java to .\/spikes\ repository source files.
Added CustomLandingStrip.java to .\/spikes\ repository source files.
Added CustomTabActivity.java to .\/spikes\ repository source files.
Added ExampleRainbowLandingStrip.java to .\/spikes\ repository source files.
Added FixedWidthTabActivity.java to .\/spikes\ repository source files.
Added NoFragmentsSimpleTextTabActivity.java to .\/spikes\ repository source files.
Added Data.java to .\/spikes\ repository source files.
Added DemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added SmallDemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerFragment.java to .\/spikes\ repository source files.
Added DemoViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapterState.java to .\/spikes\ repository source files.
Added SimpleTextTabActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AbTestingParamsLoadedCallback.java to .\/spikes\ repository source files.
Added AyBe.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added WeakStartCallback.java to .\/spikes\ repository source files.
Added LeakActivity.java to .\/spikes\ repository source files.
Added NoLeakActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added Bar.java to .\/spikes\ repository source files.
Added Foo.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added FooTest.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added ColorScheme.java to .\/spikes\ repository source files.
Added ColorUtils.java to .\/spikes\ repository source files.
Added DominantColorCalculator.java to .\/spikes\ repository source files.
Added FloatUtils.java to .\/spikes\ repository source files.
Added MedianCutQuantizer.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added PayPalFragment.java to .\/spikes\ repository source files.
Added PayPalHelper.java to .\/spikes\ repository source files.
Added MaxLengthMessageComposer.java to .\/spikes\ repository source files.
Added MessageComposer.java to .\/spikes\ repository source files.
Added TwitterMessageComposer.java to .\/spikes\ repository source files.
Added DisabledMruPersister.java to .\/spikes\ repository source files.
Added MruPersister.java to .\/spikes\ repository source files.
Added SharedPreferencesMruPersister.java to .\/spikes\ repository source files.
Added OnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added PriorityShareDialog.java to .\/spikes\ repository source files.
Added PrioritySharer.java to .\/spikes\ repository source files.
Added ShareTargetsAdapter.java to .\/spikes\ repository source files.
Added SimpleOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added TargetApps.java to .\/spikes\ repository source files.
Added TwitterOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AdvancedActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SimpleActivity.java to .\/spikes\ repository source files.
Added LockingActivity.java to .\/spikes\ repository source files.
Added PostLockingActivity.java to .\/spikes\ repository source files.
Added PreLockingActivity.java to .\/spikes\ repository source files.
Added DummyAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added NovoStaggeredGridView.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SpikeApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SwipeableView.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MyClass.java to .\/spikes\ repository source files.
Added MyClassTest.java to .\/spikes\ repository source files.
Added MyAndroidClassTest.java to .\/spikes\ repository source files.
Added RobolectricGradleTestRunner.java to .\/spikes\ repository source files.
Added Mapper.java to .\/spikes\ repository source files.
Added Query.java to .\/spikes\ repository source files.
Added TypedResolver.java to .\/spikes\ repository source files.
Added CursorList.java to .\/spikes\ repository source files.
Added CursorListIterator.java to .\/spikes\ repository source files.
Added CursorMarshaller.java to .\/spikes\ repository source files.
Added EmptyListIterator.java to .\/spikes\ repository source files.
Added ReflectionCursorMarshaller.java to .\/spikes\ repository source files.
Added RichClass.java to .\/spikes\ repository source files.
Added Setter.java to .\/spikes\ repository source files.
Added Function.java to .\/spikes\ repository source files.
Added TypedElementLoader.java to .\/spikes\ repository source files.
Added TypedLoader.java to .\/spikes\ repository source files.
Added Marshaller.java to .\/spikes\ repository source files.
Added ObjectMapper.java to .\/spikes\ repository source files.
Added TypedActivity.java to .\/spikes\ repository source files.
Added StringUtil.java to .\/spikes\ repository source files.
Added MyObject.java to .\/spikes\ repository source files.
Added MediaPlayerSwitcherActivity.java to .\/spikes\ repository source files.
Added VideoPlayerService.java to .\/spikes\ repository source files.
Added RelativeLayoutWithForeground.java to .\/spikes\ repository source files.
Added DemoActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added RecognitionService.java to .\/spikes\ repository source files.
Added SessionService.java to .\/spikes\ repository source files.
Added SettingsActivity.java to .\/spikes\ repository source files.
Added SmartContextInteractionService.java to .\/spikes\ repository source files.
AccessibilityManager accessibilityManager = (AccessibilityManager) context.getSystemService(Context.ACCESSIBILITY_SERVICE);
enabledServices=getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN)
List<AccessibilityServiceInfo> enabledServices = getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN);
List<AccessibilityServiceInfo> enabledServices = getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN);
Action otherAction = (Action) o;
int result = id;
Actions otherActions = (Actions) o;
action=actions.getAction(i)
Action action = actions.getAction(i);
label=resources.getString(action.getLabel())
String label = resources.getString(action.getLabel());
action=actions.findActionById(actionId)
Action action = actions.findActionById(actionId);
action=actions.getAction(which)
Action action = actions.getAction(which);
CharSequence[] itemLabels = new CharSequence[actions.getCount()];
View view = convertView;
demo=getItem(position)
Demo demo = getItem(position);
Intent intent = new Intent(context, demo.activityClass);
layoutInflater=LayoutInflater.from(parent.getContext())
LayoutInflater layoutInflater = LayoutInflater.from(parent.getContext());
TweetView tweetView = (TweetView) findViewById(R.id.tweet);
actions=createActions(tweet,listener)
final Actions actions = createActions(tweet, listener);
ListView listView = ((ListView) findViewById(R.id.list));
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
final DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close) {

            @Override
            public void onDrawerClosed(View drawerView) {
                super.onDrawerClosed(drawerView);
                // waiting for the drawer to close, then navigating seems to cause issue.
                // why wait for the drawer to close? jankiness.
                if (pendingNavigationClick != null) {
                    startActivity(pendingNavigationClick);
                    pendingNavigationClick = null;
                }
            }

        };
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close);
Intent intent;
b=getIntent().getExtras()
Bundle b = getIntent().getExtras();
mShouldStartPlayback=b.getBoolean("shouldStart")
boolean mShouldStartPlayback = b.getBoolean("shouldStart");
startPosition=b.getInt("startPosition",0)
int startPosition = b.getInt("startPosition", 0);
currentPos=mVideoView.getCurrentPosition()
int currentPos = mVideoView.getCurrentPosition();
String msg;
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, mDisplaySize.y + getActionBar().getHeight());
mm=mSelectedMedia.getMetadata()
MediaMetadata mm = mSelectedMedia.getMetadata();
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, (int) (mDisplaySize.x * ASPECT_RATIO));
WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
width=display.getWidth()
int width = display.getWidth();
height=display.getHeight()
int height = display.getHeight();
int resourceId = 0;
String videoUrl = "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4#sthash.rJ5rPZy8.dpuf";
String title = "Jahre Philharmonie";
String description = "Awesome film you must watch!";
String author = "Blundell";
String thumbUrl = "http://www.ustream.tv/blog/wp-content/uploads/2013/10/simply-go-live.png";
MediaMetadata metadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE);
mediaInfo=new MediaInfo.Builder(videoUrl).setMetadata(metadata).setStreamType(MediaInfo.STREAM_TYPE_BUFFERED).setContentType("video/mp4").build()
MediaInfo mediaInfo = new MediaInfo.Builder(videoUrl)
                        .setMetadata(metadata)
                        .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)
                        .setContentType("video/mp4")
                        .build();
Intent intent = new Intent(MainActivity.this, LocalPlayerActivity.class);
preferences=getPreferences(MODE_PRIVATE)
SharedPreferences preferences = getPreferences(MODE_PRIVATE);
defaultSmsPackage=Telephony.Sms.getDefaultSmsPackage(this)
String defaultSmsPackage = Telephony.Sms.getDefaultSmsPackage(this);
Intent intent = new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
availableAppProvider=EasyCustomTabs.getInstance()
AvailableAppProvider availableAppProvider = EasyCustomTabs.getInstance();
ConnectedClient connectedClient = new ConnectedClient(client);
binder=Binder.newInstance()
Binder binder = Binder.newInstance();
List<Composer> composerList = new ArrayList<>();
customTabsSession=connection.newSession()
CustomTabsSession customTabsSession = connection.newSession();
CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(customTabsSession);
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
context=EasyCustomTabs.getInstance().getContext()
Context context = EasyCustomTabs.getInstance().getContext();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
packagesSupportingCustomTabs=getPackagesSupportingCustomTabs()
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
defaultPackage=getDefaultPackage()
String defaultPackage = getDefaultPackage();
defaultActivityInfo=packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK,0)
ResolveInfo defaultActivityInfo = packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK, 0);
String packageName = defaultActivityInfo.activityInfo.packageName;
resolvedInfoList=packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK,0)
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<String> packagesSupportingCustomTabs = new ArrayList<>();
Intent serviceIntent = new Intent();
bestPackageFinder=BestPackageFinder.newInstance()
BestPackageFinder bestPackageFinder = BestPackageFinder.newInstance();
packageName=bestPackageFinder.findBestPackage()
String packageName = bestPackageFinder.findBestPackage();
resolveInfo=createResolveInfoFor(packageName)
ResolveInfo resolveInfo = createResolveInfoFor(packageName);
ResolveInfo resolveInfo = new ResolveInfo();
List<ResolveInfo> resolveInfoList = new ArrayList<>();
defaultPackageResolveInfo=createResolveInfoFor(packageName)
ResolveInfo defaultPackageResolveInfo = createResolveInfoFor(packageName);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
oldestApiMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage oldestApiMessage = apiMessages.get(apiMessages.size() - 1);
String lastResponseEpochTime = oldestApiMessage.timeStamp;
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
latestMessage=latestMessages.get(latestMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage latestMessage = latestMessages.get(latestMessages.size() - 1);
latestMessageDateTime=convertToLocalDateTime(latestMessage.timeStamp)
LocalDateTime latestMessageDateTime = convertToLocalDateTime(latestMessage.timeStamp);
List<ChannelHistory.Message> messages = new ArrayList<>();
historyFrom=getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1))
LocalDateTime historyFrom = getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1));
historyTo=getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0))
LocalDateTime historyTo = getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0));
String text = apiMessage.text;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
lastMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage lastMessage = apiMessages.get(apiMessages.size() - 1);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
firstMessage=apiMessages.get(0)
ApiPagedChannelHistory.ApiMessage firstMessage = apiMessages.get(0);
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
String slackToken = args[0];
retrofit=new Retrofit.Builder().baseUrl("https://slack.com/api/").addConverterFactory(GsonConverterFactory.create()).build()
Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://slack.com/api/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();
slackWebService=retrofit.create(SlackWebService.class)
SlackWebService slackWebService = retrofit.create(SlackWebService.class);
slackHistoryFetcher=SlackHistoryFetcher.from(slackWebService,slackToken)
SlackHistoryFetcher slackHistoryFetcher = SlackHistoryFetcher.from(slackWebService, slackToken);
start=LocalDateTime.now()
LocalDateTime start = LocalDateTime.now();
end=LocalDateTime.now().minusDays(7)
LocalDateTime end = LocalDateTime.now().minusDays(7);
channelHistory=slackHistoryFetcher.getChannelHistory(start,end)
ChannelHistory channelHistory = slackHistoryFetcher.getChannelHistory(start, end);
HistoryConverter historyConverter = new HistoryConverter();
ApiPagedResponse apiPagedResponse = new ApiPagedResponse(start);
response=fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime())
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
apiPagedChannelHistory=response.body()
ApiPagedChannelHistory apiPagedChannelHistory = response.body();
channelHistory=slackWebService.getChannelHistory(slackToken,channel,lastResponseEpochTime,NUMBER_OF_RESULTS)
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
ApiPagedChannelHistory apiPagedChannelHistory = new ApiPagedChannelHistory();
ApiPagedChannelHistory.ApiMessage apiMessage = new ApiPagedChannelHistory.ApiMessage();
final TextView textView = new TextView(context);
emptyView=findViewById(R.id.empty_view)
View emptyView = findViewById(R.id.empty_view);
final Integer action = values[0];
LoremAdapter loremAdapter = new LoremAdapter();
accounts=accountManager.getAccountsByType(accountType)
Account[] accounts = accountManager.getAccountsByType(accountType);
Bundle result;
Bundle result;
Bundle result = new Bundle();
activity=createLoginIntent(context,accountType,authTokenType,requiredFeatures,options)
Intent activity = createLoginIntent(context, accountType, authTokenType, requiredFeatures, options);
Bundle bundle = new Bundle();
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
accounts=accountManager.getAccountsByType(authTokenType)
Account[] accounts = accountManager.getAccountsByType(authTokenType);
bundle=createResponseBundle(token)
Bundle bundle = createResponseBundle(token);
accountManager=AccountManager.get(this.getApplicationContext())
AccountManager accountManager = AccountManager.get(this.getApplicationContext());
Account account = new Account(token.getUserName(), getAccountName());
Bundle bundle = new Bundle();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
GertHerbAuthenticator authenticator = new GertHerbAuthenticator(this);
fontId=getFontId(context,attrs)
int fontId = getFontId(context, attrs);
fontType=getFontType(fontId)
FontType fontType = getFontType(fontId);
typedArray=context.obtainStyledAttributes(attrs,R.styleable.CustomTextAppearance)
TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CustomTextAppearance);
typeface=createTypeFace(context,fontType)
Typeface typeface = createTypeFace(context, fontType);
info=context.getApplicationInfo()
ApplicationInfo info = context.getApplicationInfo();
name=activity.getTitle().toString()
String name = activity.getTitle().toString();
client=mServer.accept()
Socket client = mServer.accept();
boolean result;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
BufferedReader in = null;
request=in.readLine()
final String request = in.readLine();
String command;
String parameters;
index=request.indexOf(' ')
int index = request.indexOf(' ');
boolean result;
boolean success = true;
BufferedWriter out = null;
index=parameters.indexOf(' ')
int index = parameters.indexOf(' ');
code=parameters.substring(0,index)
final String code = parameters.substring(0, index);
int hashCode = (int) Long.parseLong(code, 16);
window=findWindow(hashCode)
final View window = findWindow(hashCode);
dispatch=ViewDebug.class.getDeclaredMethod("dispatchCommand",View.class,String.class,String.class,OutputStream.class)
final Method dispatch = ViewDebug.class.getDeclaredMethod("dispatchCommand",
                        View.class, String.class, String.class, OutputStream.class);
View window = null;
boolean result = true;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
boolean result = true;
String focusName = null;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
View focusedWindow = null;
BufferedWriter out = null;
boolean needWindowListUpdate = false;
boolean needFocusedWindowUpdate = false;
BetterAccountManager accountManager = new BetterAccountManager(this, getString(R.string.account_type), getString(R.string.token_type), null);
loginView=Views.findById(this,R.id.login_view)
LoginView loginView = Views.findById(this, R.id.login_view);
authorizationApi=new GithubApiFactory().createAuthorizationApi(credentials.username,credentials.password)
GithubApi authorizationApi = new GithubApiFactory().createAuthorizationApi(credentials.username, credentials.password);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
Endpoint endpoint = new Endpoint() {
            @Override
            public String getUrl() {
                return GITHUB_API_URL;
            }

            @Override
            public String getName() {
                return "Live";
            }
        };
interceptor=createAuthorizationRequestInterceptor(username,password)
RequestInterceptor interceptor = createAuthorizationRequestInterceptor(username, password);
restAdapter=createRestAdapter(endpoint,interceptor)
RestAdapter restAdapter = createRestAdapter(endpoint, interceptor);
Dummy dummy = new Dummy();
result=dummy.explodes()
boolean result = dummy.explodes();
String base64EncodedPublicKey = "CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE";
premiumPurchase=inventory.getPurchase(SKU_PREMIUM)
Purchase premiumPurchase = inventory.getPurchase(SKU_PREMIUM);
infiniteGasPurchase=inventory.getPurchase(SKU_INFINITE_GAS)
Purchase infiniteGasPurchase = inventory.getPurchase(SKU_INFINITE_GAS);
gasPurchase=inventory.getPurchase(SKU_GAS)
Purchase gasPurchase = inventory.getPurchase(SKU_GAS);
String payload = "";
String payload = "";
String payload = "";
payload=p.getDeveloperPayload()
String payload = p.getDeveloperPayload();
int index = mTank >= TANK_RES_IDS.length ? TANK_RES_IDS.length - 1 : mTank;
AlertDialog.Builder bld = new AlertDialog.Builder(this);
spe=getPreferences(MODE_PRIVATE).edit()
SharedPreferences.Editor spe = getPreferences(MODE_PRIVATE).edit();
sp=getPreferences(MODE_PRIVATE)
SharedPreferences sp = getPreferences(MODE_PRIVATE);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                                  + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                    | ((source[d + 1 + off] << 24) >>> 16)
                    | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                    | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                                   "-1002:Bad response received/" +
                                   "-1003:Purchase signature verification failed/" +
                                   "-1004:Send intent failed/" +
                                   "-1005:User cancelled/" +
                                   "-1006:Unknown purchase response/" +
                                   "-1007:Missing token/" +
                                   "-1008:Unknown error/" +
                                   "-1009:Subscriptions not available/" +
                                   "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(),
                    itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                        | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                        | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                            | ((source[d + 1 + off] << 24) >>> 16)
                            | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                            | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                "-1002:Bad response received/" +
                "-1003:Purchase signature verification failed/" +
                "-1004:Send intent failed/" +
                "-1005:User cancelled/" +
                "-1006:Unknown purchase response/" +
                "-1007:Missing token/" +
                "-1008:Unknown error/" +
                "-1009:Subscriptions not available/" +
                "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(), itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
responseCode=result.getResponse()
int responseCode = result.getResponse();
sku=purchase.getSku()
String sku = purchase.getSku();
skuDetails=inv.getSkuDetails(sku)
SkuDetails skuDetails = inv.getSkuDetails(sku);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
Button purchaseFiveButton = (Button) rootView.findViewById(R.id.fragment_main_button_purchase_five_coins);
xml=context.obtainStyledAttributes(attrs,R.styleable.LandingStrip)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.LandingStrip);
tabLayoutId=xml.getResourceId(R.styleable.LandingStrip_tabLayoutId,MISSING_TAB_LAYOUT_ID)
int tabLayoutId = xml.getResourceId(R.styleable.LandingStrip_tabLayoutId, MISSING_TAB_LAYOUT_ID);
indicatorColour=xml.getResourceId(R.styleable.LandingStrip_indicatorColor,DEFAULT_INDICATOR_COLOUR)
int indicatorColour = xml.getResourceId(R.styleable.LandingStrip_indicatorColor, DEFAULT_INDICATOR_COLOUR);
indicatorHeight=getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight,DEFAULT_INDICATOR_HEIGHT,xml)
int indicatorHeight = getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight, DEFAULT_INDICATOR_HEIGHT, xml);
tabsPaddingLeft=getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingLeft = getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding, DEFAULT_TABS_PADDING, xml);
tabsPaddingRight=getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingRight = getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding, DEFAULT_TABS_PADDING, xml);
MutableCoordinates drawCurrentTabCoordinates = new MutableCoordinates();
MutableCoordinates drawNextTabCoordinates = new MutableCoordinates();
MutableCoordinates drawMovingIndicatorCoordinates = new MutableCoordinates();
currentTab=tabsContainer.getTabAt(currentPosition)
View currentTab = tabsContainer.getTabAt(currentPosition);
currentTabStart=currentTab.getLeft()
float currentTabStart = currentTab.getLeft();
currentTabEnd=currentTab.getRight()
float currentTabEnd = currentTab.getRight();
nextTab=tabsContainer.getTabAt(currentPosition + 1)
View nextTab = tabsContainer.getTabAt(currentPosition + 1);
nextTabPositionOffset=getFractionFrom(pagePositionOffset)
float nextTabPositionOffset = getFractionFrom(pagePositionOffset);
indicatorStart=getIndicatorPosition(nextTab.getStart(),pagePositionOffset,currentTab.getStart(),nextTabPositionOffset)
float indicatorStart = getIndicatorPosition(nextTab.getStart(), pagePositionOffset, currentTab.getStart(), nextTabPositionOffset);
indicatorEnd=getIndicatorPosition(nextTab.getEnd(),pagePositionOffset,currentTab.getEnd(),nextTabPositionOffset)
float indicatorEnd = getIndicatorPosition(nextTab.getEnd(), pagePositionOffset, currentTab.getEnd(), nextTabPositionOffset);
height=getHeight()
int height = getHeight();
tabCount=pagerAdapter.getCount()
int tabCount = pagerAdapter.getCount();
title=pagerAdapter.getPageTitle(position)
CharSequence title = pagerAdapter.getPageTitle(position);
inflatedTabView=tabsContainer.inflateTab(layoutInflater,attributes.getTabLayoutId())
View inflatedTabView = tabsContainer.inflateTab(layoutInflater, attributes.getTabLayoutId());
int position = (int) view.getTag(TAG_KEY_POSITION);
scrollOffset=getHorizontalScrollOffset(position,positionOffset)
int scrollOffset = getHorizontalScrollOffset(position, positionOffset);
newScrollX=calculateScrollOffset(position,scrollOffset,positionOffset)
float newScrollX = calculateScrollOffset(position, scrollOffset, positionOffset);
tabWidth=tabsContainer.getTabAt(position).getWidth()
int tabWidth = tabsContainer.getTabAt(position).getWidth();
tabForPosition=tabsContainer.getTabAt(position)
View tabForPosition = tabsContainer.getTabAt(position);
float tabStartX = tabForPosition.getLeft() + scrollOffset;
int viewMiddleOffset = getTabParentWidth() / 2;
float tabCenterOffset = (tabForPosition.getRight() - tabForPosition.getLeft()) * 0.5F;
nextTabDelta=getNextTabDelta(position,pagerOffset,tabForPosition)
float nextTabDelta = getNextTabDelta(position, pagerOffset, tabForPosition);
LinearLayout tabsContainerView = new LinearLayout(context);
tab=getTabAt(index)
View tab = getTabAt(index);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
position=indicatorCoordinates.getStart()
float position = indicatorCoordinates.getStart();
lastTabOffset=((ViewGroup)getChildAt(0)).getChildAt(getChildCount() - 1).getWidth()
float lastTabOffset = ((ViewGroup) getChildAt(0)).getChildAt(getChildCount() - 1).getWidth();
frequency=getOneCycle(lastTabOffset)
float frequency = getOneCycle(lastTabOffset);
r=toHex(calculateColour(position,frequency,PHASE_RED,AMPLITUDE,CENTER_FREQUENCY))
String r = toHex(calculateColour(position, frequency, PHASE_RED, AMPLITUDE, CENTER_FREQUENCY));
g=toHex(calculateColour(position,frequency,PHASE_GREEN,AMPLITUDE,CENTER_FREQUENCY))
String g = toHex(calculateColour(position, frequency, PHASE_GREEN, AMPLITUDE, CENTER_FREQUENCY));
b=toHex(calculateColour(position,frequency,PHASE_BLUE,AMPLITUDE,CENTER_FREQUENCY))
String b = toHex(calculateColour(position, frequency, PHASE_BLUE, AMPLITUDE, CENTER_FREQUENCY));
height=getHeight()
int height = getHeight();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPagerFragment viewPagerFragment = new ViewPagerFragment();
Bundle bundle = new Bundle();
TextView view = (TextView) layoutInflater.inflate(R.layout.view_demo, container, false);
currentPosition=viewPagerAdapterState.getCurrentPosition()
int currentPosition = viewPagerAdapterState.getCurrentPosition();
view=getView(container,position)
View view = getView(container, position);
parcelableSparseArray=viewPagerAdapterState.get(position)
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
View view = (View) object;
SparseArray<Parcelable> viewState = new SparseArray<>();
position=entry.getValue()
int position = entry.getValue();
view=entry.getKey()
View view = entry.getKey();
bundle=in.readBundle()
Bundle bundle = in.readBundle();
Map<Integer, SparseArray<Parcelable>> viewStates = new HashMap<>(bundle.keySet().size());
sparseParcelableArray=bundle.getSparseParcelableArray(key)
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
primaryItemPosition=in.readInt()
int primaryItemPosition = in.readInt();
Bundle bundle = new Bundle();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
final TextView abText = (TextView) findViewById(R.id.ab_text);
final AyBe ayBe = new AyBe();
id=item.getItemId()
int id = item.getItemId();
callback=weakCallback.get()
AbTestingParamsLoadedCallback callback = weakCallback.get();
WeakReference<NoLeakActivity> weakNoLeakActivity = new WeakReference<NoLeakActivity>(noLeakActivity);
noLeakActivity=weakNoLeakActivity.get()
NoLeakActivity noLeakActivity = weakNoLeakActivity.get();
RecyclerView recyclerView = (RecyclerView) layoutInflater.inflate(R.layout.view_page, viewGroup, false);
itemView=layoutInflater.inflate(R.layout.view_item,parent,false)
View itemView = layoutInflater.inflate(R.layout.view_item, parent, false);
actual=foo.twice(HALF)
int actual = foo.twice(HALF);
int expected = WHOLE;
final float inverseRatio = 1f - ratio;
float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRatio);
float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRatio);
float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRatio);
hsv=node.getHsv()
float[] hsv = node.getHsv();
width=bitmap.getWidth()
final int width = bitmap.getWidth();
height=bitmap.getHeight()
final int height = bitmap.getHeight();
final int[] rgbPixels = new int[width * height];
final MedianCutQuantizer mcq = new MedianCutQuantizer(rgbPixels, NUM_COLORS);
primaryAccentColor=findPrimaryAccentColor()
final ColorNode primaryAccentColor = findPrimaryAccentColor();
secondaryAccentColor=findSecondaryAccentColor(primaryAccentColor)
final ColorNode secondaryAccentColor = findSecondaryAccentColor(primaryAccentColor);
tertiaryAccentColor=findTertiaryAccentColor(primaryAccentColor,secondaryAccentColor)
final int tertiaryAccentColor = findTertiaryAccentColor(
                primaryAccentColor, secondaryAccentColor);
primaryTextColor=findPrimaryTextColor(primaryAccentColor)
final int primaryTextColor = findPrimaryTextColor(primaryAccentColor);
secondaryTextColor=findSecondaryTextColor(primaryAccentColor)
final int secondaryTextColor = findSecondaryTextColor(primaryAccentColor);
final float primaryHue = primary.getHsv()[0];
final float candidateHue = candidate.getHsv()[0];
copy=Arrays.copyOf(palette,palette.length)
final MedianCutQuantizer.ColorNode[] copy = Arrays.copyOf(palette, palette.length);
maxCount=palette[0].getCount()
final float maxCount = palette[0].getCount();
lhsWeight=calculateWeight(lhs,maxCount)
final float lhsWeight = calculateWeight(lhs, maxCount);
rhsWeight=calculateWeight(rhs,maxCount)
final float rhsWeight = calculateWeight(rhs, maxCount);
float sum = 0;
float sumWeight = 0;
float value = values[i];
float weight = values[i + 1];
ColorHistogram colorHist = new ColorHistogram(pixels);
K=colorHist.getNumberOfColors()
int K = colorHist.getNumberOfColors();
ColorNode[] rCols = null;
rgb=colorHist.getColor(i)
int rgb = colorHist.getColor(i);
cnt=colorHist.getCount(i)
int cnt = colorHist.getCount(i);
ColorBox initialBox = new ColorBox(0, K - 1, 0);
List<ColorBox> colorSet = new ArrayList<ColorBox>();
int k = 1;
boolean done = false;
nextBox=findBoxToSplit(colorSet)
ColorBox nextBox = findBoxToSplit(colorSet);
newBox=nextBox.splitBox()
ColorBox newBox = nextBox.splitBox();
color=findClosestColor(pixels[i])
ColorNode color = findClosestColor(pixels[i]);
idx=findClosestColorIndex(rgb)
int idx = findClosestColorIndex(rgb);
red=Color.red(rgb)
int red = Color.red(rgb);
grn=Color.green(rgb)
int grn = Color.green(rgb);
blu=Color.blue(rgb)
int blu = Color.blue(rgb);
int minIdx = 0;
int minDistance = Integer.MAX_VALUE;
ColorNode color = quantColors[i];
d2=color.distance2(red,grn,blu)
int d2 = color.distance2(red, grn, blu);
ColorBox boxToSplit = null;
int minLevel = Integer.MAX_VALUE;
n=colorBoxes.size()
int n = colorBoxes.size();
ColorNode[] avgColors = new ColorNode[n];
int i = 0;
int dr = this.red - red;
int dg = this.grn - grn;
int db = this.blu - blu;
ColorNode color = imageColors[i];
int r = color.red;
int g = color.grn;
int b = color.blu;
dim=getLongestColorDimension()
ColorDimension dim = getLongestColorDimension();
med=findMedian(dim)
int med = findMedian(dim);
int nextLevel = level + 1;
ColorBox newBox = new ColorBox(med + 1, upper, nextLevel);
int rLength = rmax - rmin;
int gLength = gmax - gmin;
int bLength = bmax - bmin;
int half = count / 2;
int nPixels, median;
int rSum = 0;
int gSum = 0;
int bSum = 0;
int n = 0;
ColorNode ci = imageColors[i];
int cnt = ci.cnt;
double nd = n;
int avgRed = (int) (0.5 + rSum / nd);
int avgGrn = (int) (0.5 + gSum / nd);
int avgBlu = (int) (0.5 + bSum / nd);
s=this.getClass().getSimpleName()
String s = this.getClass().getSimpleName();
int i = 0;
int N = pixelsOrig.length;
int[] pixelsCpy = new int[N];
int k = -1;
int curColor = -1;
int nColors = k + 1;
id=item.getItemId()
int id = item.getItemId();
Intent intent = new Intent();
bitmap=((BitmapDrawable)imageView.getDrawable()).getBitmap()
Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap();
DominantColorCalculator dominantColorCalculator = new DominantColorCalculator(bitmap);
selectedImageUri=data.getData()
Uri selectedImageUri = data.getData();
selectedImagePath=getPath(selectedImageUri)
String selectedImagePath = getPath(selectedImageUri);
String[] projection = {MediaStore.Images.Media.DATA};
cursor=managedQuery(uri,projection,null,null,null)
Cursor cursor = managedQuery(uri, projection, null, null, null);
column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)
int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
LinearLayout rootView = (LinearLayout) inflater.inflate(R.layout.fragment_main, container, false);
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
preapprovalButton=payPal.getCheckoutButton(getActivity(),PayPal.BUTTON_194x37,CheckoutButton.TEXT_PAY)
CheckoutButton preapprovalButton = payPal.getCheckoutButton(getActivity(), PayPal.BUTTON_194x37, CheckoutButton.TEXT_PAY);
preapprovalIntent=payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY)
Intent preapprovalIntent = payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY);
String resultTitle = "";
String resultInfo = "";
String resultExtra = "";
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
PayPalPreapproval preapproval = new PayPalPreapproval();
preapproval=createPreapproval(preapprovalKey)
PayPalPreapproval preapproval = createPreapproval(preapprovalKey);
Bundle bundle = new Bundle();
int availableLength = maxLength;
StringBuilder stringBuilder = new StringBuilder(maxLength);
prefixAndSuffixLength=computeAppendedLengthIncludingSeparatorSpaces(prefix,suffix)
int prefixAndSuffixLength = computeAppendedLengthIncludingSeparatorSpaces(prefix, suffix);
urlLength=computeUrlLengthIncludingSeparatorSpace(url)
int urlLength = computeUrlLengthIncludingSeparatorSpace(url);
trimmedSubject=ellipsizeTextIfExceedsMaxLength(subject,availableLength)
String trimmedSubject = ellipsizeTextIfExceedsMaxLength(subject, availableLength);
int length = 0;
preferences=context.getSharedPreferences(MRU_PREFERENCES,Context.MODE_PRIVATE)
SharedPreferences preferences = context.getSharedPreferences(MRU_PREFERENCES, Context.MODE_PRIVATE);
args=getArguments()
Bundle args = getArguments();
themeResId=getThemeResIdIfProvidedIn(args)
int themeResId = getThemeResIdIfProvidedIn(args);
title=getTitleIfProvidedIn(args)
CharSequence title = getTitleIfProvidedIn(args);
builder=createDialogBuilder(themeResId).setCancelable(true).setView(dialogView)
AlertDialog.Builder builder = createDialogBuilder(themeResId)
                .setCancelable(true)
                .setView(dialogView);
inflater=getActivity().getLayoutInflater()
LayoutInflater inflater = getActivity().getLayoutInflater();
GridView gridView = (GridView) rootView.findViewById(R.id.ps__dialog_grid);
targetApps=extractTargetAppsFrom(args)
TargetApps targetApps = extractTargetAppsFrom(args);
allShareTargets=getAvailableShareTargets(sharingIntent)
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
priorityAppInfos=createPriorityResolveInfoList(targetApps,allShareTargets)
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
otherAppInfos=createOtherAppsResolveInfoList(priorityAppInfos,allShareTargets)
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
resolveInfos=targetApps.extractTargetResolveInfosFrom(allShareTargets)
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
mruResolveInfo=findMruResolveInfoIn(allShareTargets)
ResolveInfo mruResolveInfo = findMruResolveInfoIn(allShareTargets);
List<ResolveInfo> otherAppsInfos = new ArrayList<ResolveInfo>(allAppInfos);
mruPackageName=persister.getLastUsedTarget()
String mruPackageName = persister.getLastUsedTarget();
String packageName = resolveInfo.activityInfo.packageName;
packageManager=getActivity().getPackageManager()
PackageManager packageManager = getActivity().getPackageManager();
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
View buttonStrip = (View) showMoreButton.getParent();
gridView=getGridView()
GridView gridView = getGridView();
intent=wrapIntentWithExplicitTargetComponentForItem(position,sharingIntent)
Intent intent = wrapIntentWithExplicitTargetComponentForItem(position, sharingIntent);
Intent intent = new Intent(sharingIntent);
ActivityInfo activity = adapter.getItem(position).activityInfo;
ComponentName name = new ComponentName(activity.applicationInfo.packageName, activity.name);
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
PriorityShareDialog dialog = new PriorityShareDialog();
Bundle args = new Bundle();
sharingIntent=createSharingIntent()
Intent sharingIntent = createSharingIntent();
fragmentManager=activity.getFragmentManager()
FragmentManager fragmentManager = activity.getFragmentManager();
Intent intent = new Intent(Intent.ACTION_SEND);
dialog=new PriorityShareDialog.Builder().setTitle(title).setTargetApps(targetApps).setSharingIntent(sharingIntent).setOnPrepareSharingIntentListener(listener).setShowMostRecentlyUsed(showMostRecentlyUsed).build()
PriorityShareDialog dialog = new PriorityShareDialog.Builder()
                .setTitle(title)
                .setTargetApps(targetApps)
                .setSharingIntent(sharingIntent)
                .setOnPrepareSharingIntentListener(listener)
                .setShowMostRecentlyUsed(showMostRecentlyUsed)
                .build();
PrioritySharer prioritySharer = new PrioritySharer();
prioritySharer=build()
PrioritySharer prioritySharer = build();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
layoutInflater=LayoutInflater.from(context)
LayoutInflater layoutInflater = LayoutInflater.from(context);
iconSizePx=getIconSizePx(context.getResources())
int iconSizePx = getIconSizePx(context.getResources());
ArrayList<ResolveInfo> sortedList = new ArrayList<ResolveInfo>(resolveInfoList);
int otherAppsCountMaybe = showAllApps ? otherAppInfos.size() : 0;
firstOtherAppsItemPosition=priorityAppInfos.size()
int firstOtherAppsItemPosition = priorityAppInfos.size();
int offsetPosition = position - firstOtherAppsItemPosition;
TextView textView;
textView=initializeItemViewIfNecessary(convertView,R.layout.ps__grid_item_share,parent)
TextView textView = initializeItemViewIfNecessary(convertView, R.layout.ps__grid_item_share, parent);
info=getItem(position)
ResolveInfo info = getItem(position);
icon=info.loadIcon(packageManager)
Drawable icon = info.loadIcon(packageManager);
arraySize=in.readInt()
int arraySize = in.readInt();
String[] packageNames = new String[arraySize];
arraySize=targetPackages.size()
int arraySize = targetPackages.size();
String[] packagesArray = new String[arraySize];
SparseArray<ResolveInfo> matchedResolveInfos = new SparseArray<ResolveInfo>(targetPackages.size());
String packageName = info.activityInfo.packageName;
index=indexOfItemInto(packageName,targetPackages)
int index = indexOfItemInto(packageName, targetPackages);
sparseArraySize=sparseArray.size()
int sparseArraySize = sparseArray.size();
ArrayList<T> list = new ArrayList<T>(sparseArraySize);
int i = 0;
originalSubject=intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT)
CharSequence originalSubject = intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT);
String subject = originalSubject != null ? originalSubject.toString() : null;
composer=createComposer()
MessageComposer composer = createComposer();
component=intent.getComponent()
ComponentName component = intent.getComponent();
targetPackageName=component.getPackageName()
String targetPackageName = component.getPackageName();
adapter=ArrayAdapter.createFromResource(this,R.array.target_apps,android.R.layout.simple_spinner_item)
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
EditText text = (EditText) findViewById(R.id.text);
EditText title = (EditText) findViewById(R.id.title);
EditText mimeType = (EditText) findViewById(R.id.mime_type);
EditText dataUri = (EditText) findViewById(R.id.data_uri);
Switch showMostRecentlyUsed = (Switch) findViewById(R.id.show_most_recently_used);
uriString=dataUri.getText().toString()
String uriString = dataUri.getText().toString();
EditText text = (EditText) findViewById(R.id.text);
TextView textView = (TextView) convertView.findViewById(R.id.positionView);
colorView=convertView.findViewById(R.id.colorView)
View colorView = convertView.findViewById(R.id.colorView);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
offset=headerPlaceholder.getTop()
int offset = headerPlaceholder.getTop();
Integer item = COLORS[position];
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
firstVisiblePosition=grid.getFirstVisiblePosition()
int firstVisiblePosition = grid.getFirstVisiblePosition();
inflate=getViewForPosition(container,position)
View inflate = getViewForPosition(container, position);
id=item.getItemId()
int id = item.getItemId();
MyActivity activity = new MyActivity();
String manifestProperty = "../app/src/main/AndroidManifest.xml";
String resProperty = "../app/src/main/res";
cursor=resolver.query(uri,projection,selection,selectionArgs,null)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, null);
cursor=resolver.query(uri,projection,selection,selectionArgs,sortOrder)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, sortOrder);
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=richClass.setter(name)
Method setter = richClass.setter(name);
T obj;
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=methodsByName.get(name)
Method setter = methodsByName.get(name);
int type = TYPE_INT;
Class<?> t = setter.getParameterTypes()[0];
Class<?> t = setter.getParameterTypes()[0];
cursorType=cursor.getType(index)
final int cursorType = cursor.getType(index);
final Object obj;
s=f.getAnnotation(Mapper.class)
Mapper s = f.getAnnotation(Mapper.class);
mm=m.getAnnotation(Mapper.class)
Mapper mm = m.getAnnotation(Mapper.class);
methodName=StringUtil.asCamelifySetMethod(what)
String methodName = StringUtil.asCamelifySetMethod(what);
cursor=getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,null,null,null,null)
Cursor cursor = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
now=System.currentTimeMillis()
long now = System.currentTimeMillis();
List<Contact2> typedCursor = new CursorList<Contact2>(cursor, Contact2.class);
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[a-zA-Z0-9]+")
Pattern p = Pattern.compile("[a-zA-Z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[A-Z][a-z0-9]+")
Pattern p = Pattern.compile("[A-Z][a-z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
SurfaceView first = (SurfaceView) findViewById(R.id.firstSurface);
SurfaceView second = (SurfaceView) findViewById(R.id.secondSurface);
Intent pickVideo = new Intent(Intent.ACTION_PICK);
xml=context.obtainStyledAttributes(attrs,R.styleable.RelativeLayoutWithForeground)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.RelativeLayoutWithForeground);
int foregroundResId = INVALID_FOREGROUND_ID;
drawable=getDrawable(getResources(),foregroundResId)
Drawable drawable = getDrawable(getResources(), foregroundResId);
Bundle args = new Bundle();
enroll=mHotwordDetector.createEnrollIntent()
Intent enroll = mHotwordDetector.createEnrollIntent();

Diff of b5c949f8ebcedd476407ca61d954845ace866e6b and 63f61d2cb76626f854bb540bc684a5b34fb438e2:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 1
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision b5c949f8ebcedd476407ca61d954845ace866e6b to 63f61d2cb76626f854bb540bc684a5b34fb438e2


****Parsing for addition at revision 63f61d2cb76626f854bb540bc684a5b34fb438e2****

Added AccessibilityServices.java to .\/spikes\ repository source files.
Added Action.java to .\/spikes\ repository source files.
Added Actions.java to .\/spikes\ repository source files.
Added ActionsAccessibilityDelegate.java to .\/spikes\ repository source files.
Added ActionsAlertDialogCreator.java to .\/spikes\ repository source files.
Added AccessibilityServicesActivity.java to .\/spikes\ repository source files.
Added Demo.java to .\/spikes\ repository source files.
Added DemoAdapter.java to .\/spikes\ repository source files.
Added CustomActionsActivity.java to .\/spikes\ repository source files.
Added TweetView.java to .\/spikes\ repository source files.
Added DemosActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added DrawerActivity.java to .\/spikes\ repository source files.
Added EarthActivity.java to .\/spikes\ repository source files.
Added ProHaxDrawerActivity.java to .\/spikes\ repository source files.
Added SaturnActivity.java to .\/spikes\ repository source files.
Added LocalPlayerActivity.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added CastApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ComposeSmsActivity.java to .\/spikes\ repository source files.
Added HeadlessSmsSendService.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MmsReceiver.java to .\/spikes\ repository source files.
Added SmsReceiver.java to .\/spikes\ repository source files.
Added ExtendedDemoActivity.java to .\/spikes\ repository source files.
Added ExtendedDemoApplication.java to .\/spikes\ repository source files.
Added SimpleDemoActivity.java to .\/spikes\ repository source files.
Added SimpleDemoApplication.java to .\/spikes\ repository source files.
Added Binder.java to .\/spikes\ repository source files.
Added ConnectedClient.java to .\/spikes\ repository source files.
Added Connection.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnection.java to .\/spikes\ repository source files.
Added ServiceConnectionCallback.java to .\/spikes\ repository source files.
Added EasyCustomTabs.java to .\/spikes\ repository source files.
Added ActionButtonComposer.java to .\/spikes\ repository source files.
Added CloseButtonIconComposer.java to .\/spikes\ repository source files.
Added Composer.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilder.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigator.java to .\/spikes\ repository source files.
Added EasyCustomTabsWebNavigator.java to .\/spikes\ repository source files.
Added ExitAnimationsComposer.java to .\/spikes\ repository source files.
Added IntentCustomizer.java to .\/spikes\ repository source files.
Added MenuItemComposer.java to .\/spikes\ repository source files.
Added NavigationFallback.java to .\/spikes\ repository source files.
Added Navigator.java to .\/spikes\ repository source files.
Added ShowTitleComposer.java to .\/spikes\ repository source files.
Added StartAnimationsComposer.java to .\/spikes\ repository source files.
Added ToolbarColorComposer.java to .\/spikes\ repository source files.
Added UrlBarHidingComposer.java to .\/spikes\ repository source files.
Added WebNavigator.java to .\/spikes\ repository source files.
Added AvailableAppProvider.java to .\/spikes\ repository source files.
Added BestPackageFinder.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProvider.java to .\/spikes\ repository source files.
Added BinderTest.java to .\/spikes\ repository source files.
Added ConnectedClientTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnectionTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigatorTest.java to .\/spikes\ repository source files.
Added BestPackageFinderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProviderTest.java to .\/spikes\ repository source files.
Added ApiPagedChannelHistory.java to .\/spikes\ repository source files.
Added ApiPagedResponse.java to .\/spikes\ repository source files.
Added ChannelHistory.java to .\/spikes\ repository source files.
Added HistoryConverter.java to .\/spikes\ repository source files.
Added Runner.java to .\/spikes\ repository source files.
Added SlackHistoryFetcher.java to .\/spikes\ repository source files.
Added SlackWebService.java to .\/spikes\ repository source files.
Added ApiPagedResponseTest.java to .\/spikes\ repository source files.
Added MainActivityTest.java to .\/spikes\ repository source files.
Added LoremAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added BetterAccountManager.java to .\/spikes\ repository source files.
Added BetterAuthenticator.java to .\/spikes\ repository source files.
Added BetterAuthenticatorActivity.java to .\/spikes\ repository source files.
Added GertHerbAuthenticator.java to .\/spikes\ repository source files.
Added GertHerbAuthenticatorService.java to .\/spikes\ repository source files.
Added NoAccountException.java to .\/spikes\ repository source files.
Added ReactiveAuthenticatorActivity.java to .\/spikes\ repository source files.
Added Token.java to .\/spikes\ repository source files.
Added GertHerbActivity.java to .\/spikes\ repository source files.
Added GertHerbApplication.java to .\/spikes\ repository source files.
Added GertHerbAuthenticationActivity.java to .\/spikes\ repository source files.
Added TypefaceFactory.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added ViewServer.java to .\/spikes\ repository source files.
Added ViewServerManager.java to .\/spikes\ repository source files.
Added DeveloperError.java to .\/spikes\ repository source files.
Added HomeActivity.java to .\/spikes\ repository source files.
Added LoginActivity.java to .\/spikes\ repository source files.
Added LoginView.java to .\/spikes\ repository source files.
Added UserCredentials.java to .\/spikes\ repository source files.
Added FontButton.java to .\/spikes\ repository source files.
Added FontEditText.java to .\/spikes\ repository source files.
Added FontTextView.java to .\/spikes\ repository source files.
Added GithubApi.java to .\/spikes\ repository source files.
Added GithubApiFactory.java to .\/spikes\ repository source files.
Added TokenRequest.java to .\/spikes\ repository source files.
Added TokenResponse.java to .\/spikes\ repository source files.
Added Dummy.java to .\/spikes\ repository source files.
Added DummyTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MainFragment.java to .\/spikes\ repository source files.
Added Attributes.java to .\/spikes\ repository source files.
Added Coordinates.java to .\/spikes\ repository source files.
Added IndicatorCoordinatesCalculator.java to .\/spikes\ repository source files.
Added LandingStrip.java to .\/spikes\ repository source files.
Added MutableCoordinates.java to .\/spikes\ repository source files.
Added OnPagerAdapterChangedListener.java to .\/spikes\ repository source files.
Added PagerAdapterObserver.java to .\/spikes\ repository source files.
Added Scrollable.java to .\/spikes\ repository source files.
Added ScrollingPageChangeListener.java to .\/spikes\ repository source files.
Added State.java to .\/spikes\ repository source files.
Added TabsContainer.java to .\/spikes\ repository source files.
Added CustomLandingStrip.java to .\/spikes\ repository source files.
Added CustomTabActivity.java to .\/spikes\ repository source files.
Added ExampleRainbowLandingStrip.java to .\/spikes\ repository source files.
Added FixedWidthTabActivity.java to .\/spikes\ repository source files.
Added NoFragmentsSimpleTextTabActivity.java to .\/spikes\ repository source files.
Added Data.java to .\/spikes\ repository source files.
Added DemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added SmallDemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerFragment.java to .\/spikes\ repository source files.
Added DemoViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapterState.java to .\/spikes\ repository source files.
Added SimpleTextTabActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AbTestingParamsLoadedCallback.java to .\/spikes\ repository source files.
Added AyBe.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added WeakStartCallback.java to .\/spikes\ repository source files.
Added LeakActivity.java to .\/spikes\ repository source files.
Added NoLeakActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added Bar.java to .\/spikes\ repository source files.
Added Foo.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added FooTest.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added ColorScheme.java to .\/spikes\ repository source files.
Added ColorUtils.java to .\/spikes\ repository source files.
Added DominantColorCalculator.java to .\/spikes\ repository source files.
Added FloatUtils.java to .\/spikes\ repository source files.
Added MedianCutQuantizer.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added PayPalFragment.java to .\/spikes\ repository source files.
Added PayPalHelper.java to .\/spikes\ repository source files.
Added MaxLengthMessageComposer.java to .\/spikes\ repository source files.
Added MessageComposer.java to .\/spikes\ repository source files.
Added TwitterMessageComposer.java to .\/spikes\ repository source files.
Added DisabledMruPersister.java to .\/spikes\ repository source files.
Added MruPersister.java to .\/spikes\ repository source files.
Added SharedPreferencesMruPersister.java to .\/spikes\ repository source files.
Added OnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added PriorityShareDialog.java to .\/spikes\ repository source files.
Added PrioritySharer.java to .\/spikes\ repository source files.
Added ShareTargetsAdapter.java to .\/spikes\ repository source files.
Added SimpleOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added TargetApps.java to .\/spikes\ repository source files.
Added TwitterOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AdvancedActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SimpleActivity.java to .\/spikes\ repository source files.
Added LockingActivity.java to .\/spikes\ repository source files.
Added PostLockingActivity.java to .\/spikes\ repository source files.
Added PreLockingActivity.java to .\/spikes\ repository source files.
Added DummyAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added NovoStaggeredGridView.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SpikeApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SwipeableView.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MyClass.java to .\/spikes\ repository source files.
Added MyClassTest.java to .\/spikes\ repository source files.
Added MyAndroidClassTest.java to .\/spikes\ repository source files.
Added RobolectricGradleTestRunner.java to .\/spikes\ repository source files.
Added Mapper.java to .\/spikes\ repository source files.
Added Query.java to .\/spikes\ repository source files.
Added TypedResolver.java to .\/spikes\ repository source files.
Added CursorList.java to .\/spikes\ repository source files.
Added CursorListIterator.java to .\/spikes\ repository source files.
Added CursorMarshaller.java to .\/spikes\ repository source files.
Added EmptyListIterator.java to .\/spikes\ repository source files.
Added ReflectionCursorMarshaller.java to .\/spikes\ repository source files.
Added RichClass.java to .\/spikes\ repository source files.
Added Setter.java to .\/spikes\ repository source files.
Added Function.java to .\/spikes\ repository source files.
Added TypedElementLoader.java to .\/spikes\ repository source files.
Added TypedLoader.java to .\/spikes\ repository source files.
Added Marshaller.java to .\/spikes\ repository source files.
Added ObjectMapper.java to .\/spikes\ repository source files.
Added TypedActivity.java to .\/spikes\ repository source files.
Added StringUtil.java to .\/spikes\ repository source files.
Added MyObject.java to .\/spikes\ repository source files.
Added MediaPlayerSwitcherActivity.java to .\/spikes\ repository source files.
Added VideoPlayerService.java to .\/spikes\ repository source files.
Added RelativeLayoutWithForeground.java to .\/spikes\ repository source files.
Added DemoActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added RecognitionService.java to .\/spikes\ repository source files.
Added SessionService.java to .\/spikes\ repository source files.
Added SettingsActivity.java to .\/spikes\ repository source files.
Added SmartContextInteractionService.java to .\/spikes\ repository source files.
AccessibilityManager accessibilityManager = (AccessibilityManager) context.getSystemService(Context.ACCESSIBILITY_SERVICE);
enabledServices=getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN)
List<AccessibilityServiceInfo> enabledServices = getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN);
List<AccessibilityServiceInfo> enabledServices = getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN);
Action otherAction = (Action) o;
int result = id;
Actions otherActions = (Actions) o;
action=actions.getAction(i)
Action action = actions.getAction(i);
label=resources.getString(action.getLabel())
String label = resources.getString(action.getLabel());
action=actions.findActionById(actionId)
Action action = actions.findActionById(actionId);
action=actions.getAction(which)
Action action = actions.getAction(which);
CharSequence[] itemLabels = new CharSequence[actions.getCount()];
View view = convertView;
demo=getItem(position)
Demo demo = getItem(position);
Intent intent = new Intent(context, demo.activityClass);
layoutInflater=LayoutInflater.from(parent.getContext())
LayoutInflater layoutInflater = LayoutInflater.from(parent.getContext());
TweetView tweetView = (TweetView) findViewById(R.id.tweet);
actions=createActions(tweet,listener)
final Actions actions = createActions(tweet, listener);
ListView listView = ((ListView) findViewById(R.id.list));
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
final DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close) {

            @Override
            public void onDrawerClosed(View drawerView) {
                super.onDrawerClosed(drawerView);
                // waiting for the drawer to close, then navigating seems to cause issue.
                // why wait for the drawer to close? jankiness.
                if (pendingNavigationClick != null) {
                    startActivity(pendingNavigationClick);
                    pendingNavigationClick = null;
                }
            }

        };
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close);
Intent intent;
b=getIntent().getExtras()
Bundle b = getIntent().getExtras();
mShouldStartPlayback=b.getBoolean("shouldStart")
boolean mShouldStartPlayback = b.getBoolean("shouldStart");
startPosition=b.getInt("startPosition",0)
int startPosition = b.getInt("startPosition", 0);
currentPos=mVideoView.getCurrentPosition()
int currentPos = mVideoView.getCurrentPosition();
String msg;
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, mDisplaySize.y + getActionBar().getHeight());
mm=mSelectedMedia.getMetadata()
MediaMetadata mm = mSelectedMedia.getMetadata();
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, (int) (mDisplaySize.x * ASPECT_RATIO));
WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
width=display.getWidth()
int width = display.getWidth();
height=display.getHeight()
int height = display.getHeight();
int resourceId = 0;
String videoUrl = "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4#sthash.rJ5rPZy8.dpuf";
String title = "Jahre Philharmonie";
String description = "Awesome film you must watch!";
String author = "Blundell";
String thumbUrl = "http://www.ustream.tv/blog/wp-content/uploads/2013/10/simply-go-live.png";
MediaMetadata metadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE);
mediaInfo=new MediaInfo.Builder(videoUrl).setMetadata(metadata).setStreamType(MediaInfo.STREAM_TYPE_BUFFERED).setContentType("video/mp4").build()
MediaInfo mediaInfo = new MediaInfo.Builder(videoUrl)
                        .setMetadata(metadata)
                        .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)
                        .setContentType("video/mp4")
                        .build();
Intent intent = new Intent(MainActivity.this, LocalPlayerActivity.class);
preferences=getPreferences(MODE_PRIVATE)
SharedPreferences preferences = getPreferences(MODE_PRIVATE);
defaultSmsPackage=Telephony.Sms.getDefaultSmsPackage(this)
String defaultSmsPackage = Telephony.Sms.getDefaultSmsPackage(this);
Intent intent = new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
availableAppProvider=EasyCustomTabs.getInstance()
AvailableAppProvider availableAppProvider = EasyCustomTabs.getInstance();
ConnectedClient connectedClient = new ConnectedClient(client);
binder=Binder.newInstance()
Binder binder = Binder.newInstance();
List<Composer> composerList = new ArrayList<>();
customTabsSession=connection.newSession()
CustomTabsSession customTabsSession = connection.newSession();
CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(customTabsSession);
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
context=EasyCustomTabs.getInstance().getContext()
Context context = EasyCustomTabs.getInstance().getContext();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
packagesSupportingCustomTabs=getPackagesSupportingCustomTabs()
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
defaultPackage=getDefaultPackage()
String defaultPackage = getDefaultPackage();
defaultActivityInfo=packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK,0)
ResolveInfo defaultActivityInfo = packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK, 0);
String packageName = defaultActivityInfo.activityInfo.packageName;
resolvedInfoList=packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK,0)
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<String> packagesSupportingCustomTabs = new ArrayList<>();
Intent serviceIntent = new Intent();
bestPackageFinder=BestPackageFinder.newInstance()
BestPackageFinder bestPackageFinder = BestPackageFinder.newInstance();
packageName=bestPackageFinder.findBestPackage()
String packageName = bestPackageFinder.findBestPackage();
resolveInfo=createResolveInfoFor(packageName)
ResolveInfo resolveInfo = createResolveInfoFor(packageName);
ResolveInfo resolveInfo = new ResolveInfo();
List<ResolveInfo> resolveInfoList = new ArrayList<>();
defaultPackageResolveInfo=createResolveInfoFor(packageName)
ResolveInfo defaultPackageResolveInfo = createResolveInfoFor(packageName);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
oldestApiMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage oldestApiMessage = apiMessages.get(apiMessages.size() - 1);
String lastResponseEpochTime = oldestApiMessage.timeStamp;
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
latestMessage=latestMessages.get(latestMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage latestMessage = latestMessages.get(latestMessages.size() - 1);
latestMessageDateTime=convertToLocalDateTime(latestMessage.timeStamp)
LocalDateTime latestMessageDateTime = convertToLocalDateTime(latestMessage.timeStamp);
List<ChannelHistory.Message> messages = new ArrayList<>();
historyFrom=getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1))
LocalDateTime historyFrom = getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1));
historyTo=getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0))
LocalDateTime historyTo = getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0));
String text = apiMessage.text;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
lastMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage lastMessage = apiMessages.get(apiMessages.size() - 1);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
firstMessage=apiMessages.get(0)
ApiPagedChannelHistory.ApiMessage firstMessage = apiMessages.get(0);
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
String slackToken = args[0];
retrofit=new Retrofit.Builder().baseUrl("https://slack.com/api/").addConverterFactory(GsonConverterFactory.create()).build()
Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://slack.com/api/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();
slackWebService=retrofit.create(SlackWebService.class)
SlackWebService slackWebService = retrofit.create(SlackWebService.class);
slackHistoryFetcher=SlackHistoryFetcher.from(slackWebService,slackToken)
SlackHistoryFetcher slackHistoryFetcher = SlackHistoryFetcher.from(slackWebService, slackToken);
start=LocalDateTime.now()
LocalDateTime start = LocalDateTime.now();
end=LocalDateTime.now().minusDays(7)
LocalDateTime end = LocalDateTime.now().minusDays(7);
channelHistory=slackHistoryFetcher.getChannelHistory(start,end)
ChannelHistory channelHistory = slackHistoryFetcher.getChannelHistory(start, end);
HistoryConverter historyConverter = new HistoryConverter();
ApiPagedResponse apiPagedResponse = new ApiPagedResponse(start);
response=fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime())
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
apiPagedChannelHistory=response.body()
ApiPagedChannelHistory apiPagedChannelHistory = response.body();
channelHistory=slackWebService.getChannelHistory(slackToken,channel,lastResponseEpochTime,NUMBER_OF_RESULTS)
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
ApiPagedChannelHistory apiPagedChannelHistory = new ApiPagedChannelHistory();
ApiPagedChannelHistory.ApiMessage apiMessage = new ApiPagedChannelHistory.ApiMessage();
final TextView textView = new TextView(context);
emptyView=findViewById(R.id.empty_view)
View emptyView = findViewById(R.id.empty_view);
final Integer action = values[0];
LoremAdapter loremAdapter = new LoremAdapter();
accounts=accountManager.getAccountsByType(accountType)
Account[] accounts = accountManager.getAccountsByType(accountType);
Bundle result;
Bundle result;
Bundle result = new Bundle();
activity=createLoginIntent(context,accountType,authTokenType,requiredFeatures,options)
Intent activity = createLoginIntent(context, accountType, authTokenType, requiredFeatures, options);
Bundle bundle = new Bundle();
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
accounts=accountManager.getAccountsByType(authTokenType)
Account[] accounts = accountManager.getAccountsByType(authTokenType);
bundle=createResponseBundle(token)
Bundle bundle = createResponseBundle(token);
accountManager=AccountManager.get(this.getApplicationContext())
AccountManager accountManager = AccountManager.get(this.getApplicationContext());
Account account = new Account(token.getUserName(), getAccountName());
Bundle bundle = new Bundle();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
GertHerbAuthenticator authenticator = new GertHerbAuthenticator(this);
fontId=getFontId(context,attrs)
int fontId = getFontId(context, attrs);
fontType=getFontType(fontId)
FontType fontType = getFontType(fontId);
typedArray=context.obtainStyledAttributes(attrs,R.styleable.CustomTextAppearance)
TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CustomTextAppearance);
typeface=createTypeFace(context,fontType)
Typeface typeface = createTypeFace(context, fontType);
info=context.getApplicationInfo()
ApplicationInfo info = context.getApplicationInfo();
name=activity.getTitle().toString()
String name = activity.getTitle().toString();
client=mServer.accept()
Socket client = mServer.accept();
boolean result;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
BufferedReader in = null;
request=in.readLine()
final String request = in.readLine();
String command;
String parameters;
index=request.indexOf(' ')
int index = request.indexOf(' ');
boolean result;
boolean success = true;
BufferedWriter out = null;
index=parameters.indexOf(' ')
int index = parameters.indexOf(' ');
code=parameters.substring(0,index)
final String code = parameters.substring(0, index);
int hashCode = (int) Long.parseLong(code, 16);
window=findWindow(hashCode)
final View window = findWindow(hashCode);
dispatch=ViewDebug.class.getDeclaredMethod("dispatchCommand",View.class,String.class,String.class,OutputStream.class)
final Method dispatch = ViewDebug.class.getDeclaredMethod("dispatchCommand",
                        View.class, String.class, String.class, OutputStream.class);
View window = null;
boolean result = true;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
boolean result = true;
String focusName = null;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
View focusedWindow = null;
BufferedWriter out = null;
boolean needWindowListUpdate = false;
boolean needFocusedWindowUpdate = false;
BetterAccountManager accountManager = new BetterAccountManager(this, getString(R.string.account_type), getString(R.string.token_type), null);
loginView=Views.findById(this,R.id.login_view)
LoginView loginView = Views.findById(this, R.id.login_view);
authorizationApi=new GithubApiFactory().createAuthorizationApi(credentials.username,credentials.password)
GithubApi authorizationApi = new GithubApiFactory().createAuthorizationApi(credentials.username, credentials.password);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
Endpoint endpoint = new Endpoint() {
            @Override
            public String getUrl() {
                return GITHUB_API_URL;
            }

            @Override
            public String getName() {
                return "Live";
            }
        };
interceptor=createAuthorizationRequestInterceptor(username,password)
RequestInterceptor interceptor = createAuthorizationRequestInterceptor(username, password);
restAdapter=createRestAdapter(endpoint,interceptor)
RestAdapter restAdapter = createRestAdapter(endpoint, interceptor);
Dummy dummy = new Dummy();
result=dummy.explodes()
boolean result = dummy.explodes();
String base64EncodedPublicKey = "CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE";
premiumPurchase=inventory.getPurchase(SKU_PREMIUM)
Purchase premiumPurchase = inventory.getPurchase(SKU_PREMIUM);
infiniteGasPurchase=inventory.getPurchase(SKU_INFINITE_GAS)
Purchase infiniteGasPurchase = inventory.getPurchase(SKU_INFINITE_GAS);
gasPurchase=inventory.getPurchase(SKU_GAS)
Purchase gasPurchase = inventory.getPurchase(SKU_GAS);
String payload = "";
String payload = "";
String payload = "";
payload=p.getDeveloperPayload()
String payload = p.getDeveloperPayload();
int index = mTank >= TANK_RES_IDS.length ? TANK_RES_IDS.length - 1 : mTank;
AlertDialog.Builder bld = new AlertDialog.Builder(this);
spe=getPreferences(MODE_PRIVATE).edit()
SharedPreferences.Editor spe = getPreferences(MODE_PRIVATE).edit();
sp=getPreferences(MODE_PRIVATE)
SharedPreferences sp = getPreferences(MODE_PRIVATE);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                                  + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                    | ((source[d + 1 + off] << 24) >>> 16)
                    | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                    | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                                   "-1002:Bad response received/" +
                                   "-1003:Purchase signature verification failed/" +
                                   "-1004:Send intent failed/" +
                                   "-1005:User cancelled/" +
                                   "-1006:Unknown purchase response/" +
                                   "-1007:Missing token/" +
                                   "-1008:Unknown error/" +
                                   "-1009:Subscriptions not available/" +
                                   "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(),
                    itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                        | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                        | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                            | ((source[d + 1 + off] << 24) >>> 16)
                            | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                            | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                "-1002:Bad response received/" +
                "-1003:Purchase signature verification failed/" +
                "-1004:Send intent failed/" +
                "-1005:User cancelled/" +
                "-1006:Unknown purchase response/" +
                "-1007:Missing token/" +
                "-1008:Unknown error/" +
                "-1009:Subscriptions not available/" +
                "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(), itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
responseCode=result.getResponse()
int responseCode = result.getResponse();
sku=purchase.getSku()
String sku = purchase.getSku();
skuDetails=inv.getSkuDetails(sku)
SkuDetails skuDetails = inv.getSkuDetails(sku);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
Button purchaseFiveButton = (Button) rootView.findViewById(R.id.fragment_main_button_purchase_five_coins);
xml=context.obtainStyledAttributes(attrs,R.styleable.LandingStrip)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.LandingStrip);
tabLayoutId=xml.getResourceId(R.styleable.LandingStrip_tabLayoutId,MISSING_TAB_LAYOUT_ID)
int tabLayoutId = xml.getResourceId(R.styleable.LandingStrip_tabLayoutId, MISSING_TAB_LAYOUT_ID);
indicatorColour=xml.getResourceId(R.styleable.LandingStrip_indicatorColor,DEFAULT_INDICATOR_COLOUR)
int indicatorColour = xml.getResourceId(R.styleable.LandingStrip_indicatorColor, DEFAULT_INDICATOR_COLOUR);
indicatorHeight=getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight,DEFAULT_INDICATOR_HEIGHT,xml)
int indicatorHeight = getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight, DEFAULT_INDICATOR_HEIGHT, xml);
tabsPaddingLeft=getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingLeft = getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding, DEFAULT_TABS_PADDING, xml);
tabsPaddingRight=getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingRight = getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding, DEFAULT_TABS_PADDING, xml);
MutableCoordinates drawCurrentTabCoordinates = new MutableCoordinates();
MutableCoordinates drawNextTabCoordinates = new MutableCoordinates();
MutableCoordinates drawMovingIndicatorCoordinates = new MutableCoordinates();
currentTab=tabsContainer.getTabAt(currentPosition)
View currentTab = tabsContainer.getTabAt(currentPosition);
currentTabStart=currentTab.getLeft()
float currentTabStart = currentTab.getLeft();
currentTabEnd=currentTab.getRight()
float currentTabEnd = currentTab.getRight();
nextTab=tabsContainer.getTabAt(currentPosition + 1)
View nextTab = tabsContainer.getTabAt(currentPosition + 1);
nextTabPositionOffset=getFractionFrom(pagePositionOffset)
float nextTabPositionOffset = getFractionFrom(pagePositionOffset);
indicatorStart=getIndicatorPosition(nextTab.getStart(),pagePositionOffset,currentTab.getStart(),nextTabPositionOffset)
float indicatorStart = getIndicatorPosition(nextTab.getStart(), pagePositionOffset, currentTab.getStart(), nextTabPositionOffset);
indicatorEnd=getIndicatorPosition(nextTab.getEnd(),pagePositionOffset,currentTab.getEnd(),nextTabPositionOffset)
float indicatorEnd = getIndicatorPosition(nextTab.getEnd(), pagePositionOffset, currentTab.getEnd(), nextTabPositionOffset);
height=getHeight()
int height = getHeight();
tabCount=pagerAdapter.getCount()
int tabCount = pagerAdapter.getCount();
title=pagerAdapter.getPageTitle(position)
CharSequence title = pagerAdapter.getPageTitle(position);
inflatedTabView=tabsContainer.inflateTab(layoutInflater,attributes.getTabLayoutId())
View inflatedTabView = tabsContainer.inflateTab(layoutInflater, attributes.getTabLayoutId());
int position = (int) view.getTag(TAG_KEY_POSITION);
scrollOffset=getHorizontalScrollOffset(position,positionOffset)
int scrollOffset = getHorizontalScrollOffset(position, positionOffset);
newScrollX=calculateScrollOffset(position,scrollOffset,positionOffset)
float newScrollX = calculateScrollOffset(position, scrollOffset, positionOffset);
tabWidth=tabsContainer.getTabAt(position).getWidth()
int tabWidth = tabsContainer.getTabAt(position).getWidth();
tabForPosition=tabsContainer.getTabAt(position)
View tabForPosition = tabsContainer.getTabAt(position);
float tabStartX = tabForPosition.getLeft() + scrollOffset;
int viewMiddleOffset = getTabParentWidth() / 2;
float tabCenterOffset = (tabForPosition.getRight() - tabForPosition.getLeft()) * 0.5F;
nextTabDelta=getNextTabDelta(position,pagerOffset,tabForPosition)
float nextTabDelta = getNextTabDelta(position, pagerOffset, tabForPosition);
LinearLayout tabsContainerView = new LinearLayout(context);
tab=getTabAt(index)
View tab = getTabAt(index);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
position=indicatorCoordinates.getStart()
float position = indicatorCoordinates.getStart();
lastTabOffset=((ViewGroup)getChildAt(0)).getChildAt(getChildCount() - 1).getWidth()
float lastTabOffset = ((ViewGroup) getChildAt(0)).getChildAt(getChildCount() - 1).getWidth();
frequency=getOneCycle(lastTabOffset)
float frequency = getOneCycle(lastTabOffset);
r=toHex(calculateColour(position,frequency,PHASE_RED,AMPLITUDE,CENTER_FREQUENCY))
String r = toHex(calculateColour(position, frequency, PHASE_RED, AMPLITUDE, CENTER_FREQUENCY));
g=toHex(calculateColour(position,frequency,PHASE_GREEN,AMPLITUDE,CENTER_FREQUENCY))
String g = toHex(calculateColour(position, frequency, PHASE_GREEN, AMPLITUDE, CENTER_FREQUENCY));
b=toHex(calculateColour(position,frequency,PHASE_BLUE,AMPLITUDE,CENTER_FREQUENCY))
String b = toHex(calculateColour(position, frequency, PHASE_BLUE, AMPLITUDE, CENTER_FREQUENCY));
height=getHeight()
int height = getHeight();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPagerFragment viewPagerFragment = new ViewPagerFragment();
Bundle bundle = new Bundle();
TextView view = (TextView) layoutInflater.inflate(R.layout.view_demo, container, false);
currentPosition=viewPagerAdapterState.getCurrentPosition()
int currentPosition = viewPagerAdapterState.getCurrentPosition();
view=getView(container,position)
View view = getView(container, position);
parcelableSparseArray=viewPagerAdapterState.get(position)
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
View view = (View) object;
SparseArray<Parcelable> viewState = new SparseArray<>();
position=entry.getValue()
int position = entry.getValue();
view=entry.getKey()
View view = entry.getKey();
bundle=in.readBundle()
Bundle bundle = in.readBundle();
Map<Integer, SparseArray<Parcelable>> viewStates = new HashMap<>(bundle.keySet().size());
sparseParcelableArray=bundle.getSparseParcelableArray(key)
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
primaryItemPosition=in.readInt()
int primaryItemPosition = in.readInt();
Bundle bundle = new Bundle();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
final TextView abText = (TextView) findViewById(R.id.ab_text);
final AyBe ayBe = new AyBe();
id=item.getItemId()
int id = item.getItemId();
callback=weakCallback.get()
AbTestingParamsLoadedCallback callback = weakCallback.get();
WeakReference<NoLeakActivity> weakNoLeakActivity = new WeakReference<NoLeakActivity>(noLeakActivity);
noLeakActivity=weakNoLeakActivity.get()
NoLeakActivity noLeakActivity = weakNoLeakActivity.get();
RecyclerView recyclerView = (RecyclerView) layoutInflater.inflate(R.layout.view_page, viewGroup, false);
itemView=layoutInflater.inflate(R.layout.view_item,parent,false)
View itemView = layoutInflater.inflate(R.layout.view_item, parent, false);
actual=foo.twice(HALF)
int actual = foo.twice(HALF);
int expected = WHOLE;
final float inverseRatio = 1f - ratio;
float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRatio);
float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRatio);
float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRatio);
hsv=node.getHsv()
float[] hsv = node.getHsv();
width=bitmap.getWidth()
final int width = bitmap.getWidth();
height=bitmap.getHeight()
final int height = bitmap.getHeight();
final int[] rgbPixels = new int[width * height];
final MedianCutQuantizer mcq = new MedianCutQuantizer(rgbPixels, NUM_COLORS);
primaryAccentColor=findPrimaryAccentColor()
final ColorNode primaryAccentColor = findPrimaryAccentColor();
secondaryAccentColor=findSecondaryAccentColor(primaryAccentColor)
final ColorNode secondaryAccentColor = findSecondaryAccentColor(primaryAccentColor);
tertiaryAccentColor=findTertiaryAccentColor(primaryAccentColor,secondaryAccentColor)
final int tertiaryAccentColor = findTertiaryAccentColor(
                primaryAccentColor, secondaryAccentColor);
primaryTextColor=findPrimaryTextColor(primaryAccentColor)
final int primaryTextColor = findPrimaryTextColor(primaryAccentColor);
secondaryTextColor=findSecondaryTextColor(primaryAccentColor)
final int secondaryTextColor = findSecondaryTextColor(primaryAccentColor);
final float primaryHue = primary.getHsv()[0];
final float candidateHue = candidate.getHsv()[0];
copy=Arrays.copyOf(palette,palette.length)
final MedianCutQuantizer.ColorNode[] copy = Arrays.copyOf(palette, palette.length);
maxCount=palette[0].getCount()
final float maxCount = palette[0].getCount();
lhsWeight=calculateWeight(lhs,maxCount)
final float lhsWeight = calculateWeight(lhs, maxCount);
rhsWeight=calculateWeight(rhs,maxCount)
final float rhsWeight = calculateWeight(rhs, maxCount);
float sum = 0;
float sumWeight = 0;
float value = values[i];
float weight = values[i + 1];
ColorHistogram colorHist = new ColorHistogram(pixels);
K=colorHist.getNumberOfColors()
int K = colorHist.getNumberOfColors();
ColorNode[] rCols = null;
rgb=colorHist.getColor(i)
int rgb = colorHist.getColor(i);
cnt=colorHist.getCount(i)
int cnt = colorHist.getCount(i);
ColorBox initialBox = new ColorBox(0, K - 1, 0);
List<ColorBox> colorSet = new ArrayList<ColorBox>();
int k = 1;
boolean done = false;
nextBox=findBoxToSplit(colorSet)
ColorBox nextBox = findBoxToSplit(colorSet);
newBox=nextBox.splitBox()
ColorBox newBox = nextBox.splitBox();
color=findClosestColor(pixels[i])
ColorNode color = findClosestColor(pixels[i]);
idx=findClosestColorIndex(rgb)
int idx = findClosestColorIndex(rgb);
red=Color.red(rgb)
int red = Color.red(rgb);
grn=Color.green(rgb)
int grn = Color.green(rgb);
blu=Color.blue(rgb)
int blu = Color.blue(rgb);
int minIdx = 0;
int minDistance = Integer.MAX_VALUE;
ColorNode color = quantColors[i];
d2=color.distance2(red,grn,blu)
int d2 = color.distance2(red, grn, blu);
ColorBox boxToSplit = null;
int minLevel = Integer.MAX_VALUE;
n=colorBoxes.size()
int n = colorBoxes.size();
ColorNode[] avgColors = new ColorNode[n];
int i = 0;
int dr = this.red - red;
int dg = this.grn - grn;
int db = this.blu - blu;
ColorNode color = imageColors[i];
int r = color.red;
int g = color.grn;
int b = color.blu;
dim=getLongestColorDimension()
ColorDimension dim = getLongestColorDimension();
med=findMedian(dim)
int med = findMedian(dim);
int nextLevel = level + 1;
ColorBox newBox = new ColorBox(med + 1, upper, nextLevel);
int rLength = rmax - rmin;
int gLength = gmax - gmin;
int bLength = bmax - bmin;
int half = count / 2;
int nPixels, median;
int rSum = 0;
int gSum = 0;
int bSum = 0;
int n = 0;
ColorNode ci = imageColors[i];
int cnt = ci.cnt;
double nd = n;
int avgRed = (int) (0.5 + rSum / nd);
int avgGrn = (int) (0.5 + gSum / nd);
int avgBlu = (int) (0.5 + bSum / nd);
s=this.getClass().getSimpleName()
String s = this.getClass().getSimpleName();
int i = 0;
int N = pixelsOrig.length;
int[] pixelsCpy = new int[N];
int k = -1;
int curColor = -1;
int nColors = k + 1;
id=item.getItemId()
int id = item.getItemId();
Intent intent = new Intent();
bitmap=((BitmapDrawable)imageView.getDrawable()).getBitmap()
Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap();
DominantColorCalculator dominantColorCalculator = new DominantColorCalculator(bitmap);
selectedImageUri=data.getData()
Uri selectedImageUri = data.getData();
selectedImagePath=getPath(selectedImageUri)
String selectedImagePath = getPath(selectedImageUri);
String[] projection = {MediaStore.Images.Media.DATA};
cursor=managedQuery(uri,projection,null,null,null)
Cursor cursor = managedQuery(uri, projection, null, null, null);
column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)
int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
LinearLayout rootView = (LinearLayout) inflater.inflate(R.layout.fragment_main, container, false);
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
preapprovalButton=payPal.getCheckoutButton(getActivity(),PayPal.BUTTON_194x37,CheckoutButton.TEXT_PAY)
CheckoutButton preapprovalButton = payPal.getCheckoutButton(getActivity(), PayPal.BUTTON_194x37, CheckoutButton.TEXT_PAY);
preapprovalIntent=payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY)
Intent preapprovalIntent = payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY);
String resultTitle = "";
String resultInfo = "";
String resultExtra = "";
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
PayPalPreapproval preapproval = new PayPalPreapproval();
preapproval=createPreapproval(preapprovalKey)
PayPalPreapproval preapproval = createPreapproval(preapprovalKey);
Bundle bundle = new Bundle();
int availableLength = maxLength;
StringBuilder stringBuilder = new StringBuilder(maxLength);
prefixAndSuffixLength=computeAppendedLengthIncludingSeparatorSpaces(prefix,suffix)
int prefixAndSuffixLength = computeAppendedLengthIncludingSeparatorSpaces(prefix, suffix);
urlLength=computeUrlLengthIncludingSeparatorSpace(url)
int urlLength = computeUrlLengthIncludingSeparatorSpace(url);
trimmedSubject=ellipsizeTextIfExceedsMaxLength(subject,availableLength)
String trimmedSubject = ellipsizeTextIfExceedsMaxLength(subject, availableLength);
int length = 0;
preferences=context.getSharedPreferences(MRU_PREFERENCES,Context.MODE_PRIVATE)
SharedPreferences preferences = context.getSharedPreferences(MRU_PREFERENCES, Context.MODE_PRIVATE);
args=getArguments()
Bundle args = getArguments();
themeResId=getThemeResIdIfProvidedIn(args)
int themeResId = getThemeResIdIfProvidedIn(args);
title=getTitleIfProvidedIn(args)
CharSequence title = getTitleIfProvidedIn(args);
builder=createDialogBuilder(themeResId).setCancelable(true).setView(dialogView)
AlertDialog.Builder builder = createDialogBuilder(themeResId)
                .setCancelable(true)
                .setView(dialogView);
inflater=getActivity().getLayoutInflater()
LayoutInflater inflater = getActivity().getLayoutInflater();
GridView gridView = (GridView) rootView.findViewById(R.id.ps__dialog_grid);
targetApps=extractTargetAppsFrom(args)
TargetApps targetApps = extractTargetAppsFrom(args);
allShareTargets=getAvailableShareTargets(sharingIntent)
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
priorityAppInfos=createPriorityResolveInfoList(targetApps,allShareTargets)
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
otherAppInfos=createOtherAppsResolveInfoList(priorityAppInfos,allShareTargets)
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
resolveInfos=targetApps.extractTargetResolveInfosFrom(allShareTargets)
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
mruResolveInfo=findMruResolveInfoIn(allShareTargets)
ResolveInfo mruResolveInfo = findMruResolveInfoIn(allShareTargets);
List<ResolveInfo> otherAppsInfos = new ArrayList<ResolveInfo>(allAppInfos);
mruPackageName=persister.getLastUsedTarget()
String mruPackageName = persister.getLastUsedTarget();
String packageName = resolveInfo.activityInfo.packageName;
packageManager=getActivity().getPackageManager()
PackageManager packageManager = getActivity().getPackageManager();
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
View buttonStrip = (View) showMoreButton.getParent();
gridView=getGridView()
GridView gridView = getGridView();
intent=wrapIntentWithExplicitTargetComponentForItem(position,sharingIntent)
Intent intent = wrapIntentWithExplicitTargetComponentForItem(position, sharingIntent);
Intent intent = new Intent(sharingIntent);
ActivityInfo activity = adapter.getItem(position).activityInfo;
ComponentName name = new ComponentName(activity.applicationInfo.packageName, activity.name);
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
PriorityShareDialog dialog = new PriorityShareDialog();
Bundle args = new Bundle();
sharingIntent=createSharingIntent()
Intent sharingIntent = createSharingIntent();
fragmentManager=activity.getFragmentManager()
FragmentManager fragmentManager = activity.getFragmentManager();
Intent intent = new Intent(Intent.ACTION_SEND);
dialog=new PriorityShareDialog.Builder().setTitle(title).setTargetApps(targetApps).setSharingIntent(sharingIntent).setOnPrepareSharingIntentListener(listener).setShowMostRecentlyUsed(showMostRecentlyUsed).build()
PriorityShareDialog dialog = new PriorityShareDialog.Builder()
                .setTitle(title)
                .setTargetApps(targetApps)
                .setSharingIntent(sharingIntent)
                .setOnPrepareSharingIntentListener(listener)
                .setShowMostRecentlyUsed(showMostRecentlyUsed)
                .build();
PrioritySharer prioritySharer = new PrioritySharer();
prioritySharer=build()
PrioritySharer prioritySharer = build();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
layoutInflater=LayoutInflater.from(context)
LayoutInflater layoutInflater = LayoutInflater.from(context);
iconSizePx=getIconSizePx(context.getResources())
int iconSizePx = getIconSizePx(context.getResources());
ArrayList<ResolveInfo> sortedList = new ArrayList<ResolveInfo>(resolveInfoList);
int otherAppsCountMaybe = showAllApps ? otherAppInfos.size() : 0;
firstOtherAppsItemPosition=priorityAppInfos.size()
int firstOtherAppsItemPosition = priorityAppInfos.size();
int offsetPosition = position - firstOtherAppsItemPosition;
TextView textView;
textView=initializeItemViewIfNecessary(convertView,R.layout.ps__grid_item_share,parent)
TextView textView = initializeItemViewIfNecessary(convertView, R.layout.ps__grid_item_share, parent);
info=getItem(position)
ResolveInfo info = getItem(position);
icon=info.loadIcon(packageManager)
Drawable icon = info.loadIcon(packageManager);
arraySize=in.readInt()
int arraySize = in.readInt();
String[] packageNames = new String[arraySize];
arraySize=targetPackages.size()
int arraySize = targetPackages.size();
String[] packagesArray = new String[arraySize];
SparseArray<ResolveInfo> matchedResolveInfos = new SparseArray<ResolveInfo>(targetPackages.size());
String packageName = info.activityInfo.packageName;
index=indexOfItemInto(packageName,targetPackages)
int index = indexOfItemInto(packageName, targetPackages);
sparseArraySize=sparseArray.size()
int sparseArraySize = sparseArray.size();
ArrayList<T> list = new ArrayList<T>(sparseArraySize);
int i = 0;
originalSubject=intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT)
CharSequence originalSubject = intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT);
String subject = originalSubject != null ? originalSubject.toString() : null;
composer=createComposer()
MessageComposer composer = createComposer();
component=intent.getComponent()
ComponentName component = intent.getComponent();
targetPackageName=component.getPackageName()
String targetPackageName = component.getPackageName();
adapter=ArrayAdapter.createFromResource(this,R.array.target_apps,android.R.layout.simple_spinner_item)
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
EditText text = (EditText) findViewById(R.id.text);
EditText title = (EditText) findViewById(R.id.title);
EditText mimeType = (EditText) findViewById(R.id.mime_type);
EditText dataUri = (EditText) findViewById(R.id.data_uri);
Switch showMostRecentlyUsed = (Switch) findViewById(R.id.show_most_recently_used);
uriString=dataUri.getText().toString()
String uriString = dataUri.getText().toString();
EditText text = (EditText) findViewById(R.id.text);
TextView textView = (TextView) convertView.findViewById(R.id.positionView);
colorView=convertView.findViewById(R.id.colorView)
View colorView = convertView.findViewById(R.id.colorView);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
offset=headerPlaceholder.getTop()
int offset = headerPlaceholder.getTop();
Integer item = COLORS[position];
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
firstVisiblePosition=grid.getFirstVisiblePosition()
int firstVisiblePosition = grid.getFirstVisiblePosition();
inflate=getViewForPosition(container,position)
View inflate = getViewForPosition(container, position);
id=item.getItemId()
int id = item.getItemId();
MyActivity activity = new MyActivity();
String manifestProperty = "../app/src/main/AndroidManifest.xml";
String resProperty = "../app/src/main/res";
cursor=resolver.query(uri,projection,selection,selectionArgs,null)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, null);
cursor=resolver.query(uri,projection,selection,selectionArgs,sortOrder)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, sortOrder);
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=richClass.setter(name)
Method setter = richClass.setter(name);
T obj;
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=methodsByName.get(name)
Method setter = methodsByName.get(name);
int type = TYPE_INT;
Class<?> t = setter.getParameterTypes()[0];
Class<?> t = setter.getParameterTypes()[0];
cursorType=cursor.getType(index)
final int cursorType = cursor.getType(index);
final Object obj;
s=f.getAnnotation(Mapper.class)
Mapper s = f.getAnnotation(Mapper.class);
mm=m.getAnnotation(Mapper.class)
Mapper mm = m.getAnnotation(Mapper.class);
methodName=StringUtil.asCamelifySetMethod(what)
String methodName = StringUtil.asCamelifySetMethod(what);
cursor=getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,null,null,null,null)
Cursor cursor = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
now=System.currentTimeMillis()
long now = System.currentTimeMillis();
List<Contact2> typedCursor = new CursorList<Contact2>(cursor, Contact2.class);
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[a-zA-Z0-9]+")
Pattern p = Pattern.compile("[a-zA-Z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[A-Z][a-z0-9]+")
Pattern p = Pattern.compile("[A-Z][a-z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
SurfaceView first = (SurfaceView) findViewById(R.id.firstSurface);
SurfaceView second = (SurfaceView) findViewById(R.id.secondSurface);
Intent pickVideo = new Intent(Intent.ACTION_PICK);
xml=context.obtainStyledAttributes(attrs,R.styleable.RelativeLayoutWithForeground)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.RelativeLayoutWithForeground);
int foregroundResId = INVALID_FOREGROUND_ID;
drawable=getDrawable(getResources(),foregroundResId)
Drawable drawable = getDrawable(getResources(), foregroundResId);
Bundle args = new Bundle();
enroll=mHotwordDetector.createEnrollIntent()
Intent enroll = mHotwordDetector.createEnrollIntent();

Diff of 63f61d2cb76626f854bb540bc684a5b34fb438e2 and 55a78bda12eca1ca01441ee75048f7d6c72d1fa0:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 1
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 63f61d2cb76626f854bb540bc684a5b34fb438e2 to 55a78bda12eca1ca01441ee75048f7d6c72d1fa0


****Parsing for addition at revision 55a78bda12eca1ca01441ee75048f7d6c72d1fa0****

Added AccessibilityServices.java to .\/spikes\ repository source files.
Added Action.java to .\/spikes\ repository source files.
Added Actions.java to .\/spikes\ repository source files.
Added ActionsAccessibilityDelegate.java to .\/spikes\ repository source files.
Added ActionsAlertDialogCreator.java to .\/spikes\ repository source files.
Added AccessibilityServicesActivity.java to .\/spikes\ repository source files.
Added Demo.java to .\/spikes\ repository source files.
Added DemoAdapter.java to .\/spikes\ repository source files.
Added CustomActionsActivity.java to .\/spikes\ repository source files.
Added TweetView.java to .\/spikes\ repository source files.
Added DemosActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added DrawerActivity.java to .\/spikes\ repository source files.
Added EarthActivity.java to .\/spikes\ repository source files.
Added ProHaxDrawerActivity.java to .\/spikes\ repository source files.
Added SaturnActivity.java to .\/spikes\ repository source files.
Added LocalPlayerActivity.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added CastApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ComposeSmsActivity.java to .\/spikes\ repository source files.
Added HeadlessSmsSendService.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MmsReceiver.java to .\/spikes\ repository source files.
Added SmsReceiver.java to .\/spikes\ repository source files.
Added ExtendedDemoActivity.java to .\/spikes\ repository source files.
Added ExtendedDemoApplication.java to .\/spikes\ repository source files.
Added SimpleDemoActivity.java to .\/spikes\ repository source files.
Added SimpleDemoApplication.java to .\/spikes\ repository source files.
Added Binder.java to .\/spikes\ repository source files.
Added ConnectedClient.java to .\/spikes\ repository source files.
Added Connection.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnection.java to .\/spikes\ repository source files.
Added ServiceConnectionCallback.java to .\/spikes\ repository source files.
Added EasyCustomTabs.java to .\/spikes\ repository source files.
Added ActionButtonComposer.java to .\/spikes\ repository source files.
Added CloseButtonIconComposer.java to .\/spikes\ repository source files.
Added Composer.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilder.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigator.java to .\/spikes\ repository source files.
Added EasyCustomTabsWebNavigator.java to .\/spikes\ repository source files.
Added ExitAnimationsComposer.java to .\/spikes\ repository source files.
Added IntentCustomizer.java to .\/spikes\ repository source files.
Added MenuItemComposer.java to .\/spikes\ repository source files.
Added NavigationFallback.java to .\/spikes\ repository source files.
Added Navigator.java to .\/spikes\ repository source files.
Added ShowTitleComposer.java to .\/spikes\ repository source files.
Added StartAnimationsComposer.java to .\/spikes\ repository source files.
Added ToolbarColorComposer.java to .\/spikes\ repository source files.
Added UrlBarHidingComposer.java to .\/spikes\ repository source files.
Added WebNavigator.java to .\/spikes\ repository source files.
Added AvailableAppProvider.java to .\/spikes\ repository source files.
Added BestPackageFinder.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProvider.java to .\/spikes\ repository source files.
Added BinderTest.java to .\/spikes\ repository source files.
Added ConnectedClientTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnectionTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigatorTest.java to .\/spikes\ repository source files.
Added BestPackageFinderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProviderTest.java to .\/spikes\ repository source files.
Added ApiPagedChannelHistory.java to .\/spikes\ repository source files.
Added ApiPagedResponse.java to .\/spikes\ repository source files.
Added ChannelHistory.java to .\/spikes\ repository source files.
Added HistoryConverter.java to .\/spikes\ repository source files.
Added Runner.java to .\/spikes\ repository source files.
Added SlackHistoryFetcher.java to .\/spikes\ repository source files.
Added SlackWebService.java to .\/spikes\ repository source files.
Added ApiPagedResponseTest.java to .\/spikes\ repository source files.
Added MainActivityTest.java to .\/spikes\ repository source files.
Added LoremAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added BetterAccountManager.java to .\/spikes\ repository source files.
Added BetterAuthenticator.java to .\/spikes\ repository source files.
Added BetterAuthenticatorActivity.java to .\/spikes\ repository source files.
Added GertHerbAuthenticator.java to .\/spikes\ repository source files.
Added GertHerbAuthenticatorService.java to .\/spikes\ repository source files.
Added NoAccountException.java to .\/spikes\ repository source files.
Added ReactiveAuthenticatorActivity.java to .\/spikes\ repository source files.
Added Token.java to .\/spikes\ repository source files.
Added GertHerbActivity.java to .\/spikes\ repository source files.
Added GertHerbApplication.java to .\/spikes\ repository source files.
Added GertHerbAuthenticationActivity.java to .\/spikes\ repository source files.
Added TypefaceFactory.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added ViewServer.java to .\/spikes\ repository source files.
Added ViewServerManager.java to .\/spikes\ repository source files.
Added DeveloperError.java to .\/spikes\ repository source files.
Added HomeActivity.java to .\/spikes\ repository source files.
Added LoginActivity.java to .\/spikes\ repository source files.
Added LoginView.java to .\/spikes\ repository source files.
Added UserCredentials.java to .\/spikes\ repository source files.
Added FontButton.java to .\/spikes\ repository source files.
Added FontEditText.java to .\/spikes\ repository source files.
Added FontTextView.java to .\/spikes\ repository source files.
Added GithubApi.java to .\/spikes\ repository source files.
Added GithubApiFactory.java to .\/spikes\ repository source files.
Added TokenRequest.java to .\/spikes\ repository source files.
Added TokenResponse.java to .\/spikes\ repository source files.
Added Dummy.java to .\/spikes\ repository source files.
Added DummyTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MainFragment.java to .\/spikes\ repository source files.
Added Attributes.java to .\/spikes\ repository source files.
Added Coordinates.java to .\/spikes\ repository source files.
Added IndicatorCoordinatesCalculator.java to .\/spikes\ repository source files.
Added LandingStrip.java to .\/spikes\ repository source files.
Added MutableCoordinates.java to .\/spikes\ repository source files.
Added OnPagerAdapterChangedListener.java to .\/spikes\ repository source files.
Added PagerAdapterObserver.java to .\/spikes\ repository source files.
Added Scrollable.java to .\/spikes\ repository source files.
Added ScrollingPageChangeListener.java to .\/spikes\ repository source files.
Added State.java to .\/spikes\ repository source files.
Added TabsContainer.java to .\/spikes\ repository source files.
Added CustomLandingStrip.java to .\/spikes\ repository source files.
Added CustomTabActivity.java to .\/spikes\ repository source files.
Added ExampleRainbowLandingStrip.java to .\/spikes\ repository source files.
Added FixedWidthTabActivity.java to .\/spikes\ repository source files.
Added NoFragmentsSimpleTextTabActivity.java to .\/spikes\ repository source files.
Added Data.java to .\/spikes\ repository source files.
Added DemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added SmallDemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerFragment.java to .\/spikes\ repository source files.
Added DemoViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapterState.java to .\/spikes\ repository source files.
Added SimpleTextTabActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AbTestingParamsLoadedCallback.java to .\/spikes\ repository source files.
Added AyBe.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added WeakStartCallback.java to .\/spikes\ repository source files.
Added LeakActivity.java to .\/spikes\ repository source files.
Added NoLeakActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added Bar.java to .\/spikes\ repository source files.
Added Foo.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added FooTest.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added ColorScheme.java to .\/spikes\ repository source files.
Added ColorUtils.java to .\/spikes\ repository source files.
Added DominantColorCalculator.java to .\/spikes\ repository source files.
Added FloatUtils.java to .\/spikes\ repository source files.
Added MedianCutQuantizer.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added PayPalFragment.java to .\/spikes\ repository source files.
Added PayPalHelper.java to .\/spikes\ repository source files.
Added MaxLengthMessageComposer.java to .\/spikes\ repository source files.
Added MessageComposer.java to .\/spikes\ repository source files.
Added TwitterMessageComposer.java to .\/spikes\ repository source files.
Added DisabledMruPersister.java to .\/spikes\ repository source files.
Added MruPersister.java to .\/spikes\ repository source files.
Added SharedPreferencesMruPersister.java to .\/spikes\ repository source files.
Added OnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added PriorityShareDialog.java to .\/spikes\ repository source files.
Added PrioritySharer.java to .\/spikes\ repository source files.
Added ShareTargetsAdapter.java to .\/spikes\ repository source files.
Added SimpleOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added TargetApps.java to .\/spikes\ repository source files.
Added TwitterOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AdvancedActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SimpleActivity.java to .\/spikes\ repository source files.
Added LockingActivity.java to .\/spikes\ repository source files.
Added PostLockingActivity.java to .\/spikes\ repository source files.
Added PreLockingActivity.java to .\/spikes\ repository source files.
Added DummyAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added NovoStaggeredGridView.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SpikeApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SwipeableView.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MyClass.java to .\/spikes\ repository source files.
Added MyClassTest.java to .\/spikes\ repository source files.
Added MyAndroidClassTest.java to .\/spikes\ repository source files.
Added RobolectricGradleTestRunner.java to .\/spikes\ repository source files.
Added Mapper.java to .\/spikes\ repository source files.
Added Query.java to .\/spikes\ repository source files.
Added TypedResolver.java to .\/spikes\ repository source files.
Added CursorList.java to .\/spikes\ repository source files.
Added CursorListIterator.java to .\/spikes\ repository source files.
Added CursorMarshaller.java to .\/spikes\ repository source files.
Added EmptyListIterator.java to .\/spikes\ repository source files.
Added ReflectionCursorMarshaller.java to .\/spikes\ repository source files.
Added RichClass.java to .\/spikes\ repository source files.
Added Setter.java to .\/spikes\ repository source files.
Added Function.java to .\/spikes\ repository source files.
Added TypedElementLoader.java to .\/spikes\ repository source files.
Added TypedLoader.java to .\/spikes\ repository source files.
Added Marshaller.java to .\/spikes\ repository source files.
Added ObjectMapper.java to .\/spikes\ repository source files.
Added TypedActivity.java to .\/spikes\ repository source files.
Added StringUtil.java to .\/spikes\ repository source files.
Added MyObject.java to .\/spikes\ repository source files.
Added MediaPlayerSwitcherActivity.java to .\/spikes\ repository source files.
Added VideoPlayerService.java to .\/spikes\ repository source files.
Added RelativeLayoutWithForeground.java to .\/spikes\ repository source files.
Added DemoActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added RecognitionService.java to .\/spikes\ repository source files.
Added SessionService.java to .\/spikes\ repository source files.
Added SettingsActivity.java to .\/spikes\ repository source files.
Added SmartContextInteractionService.java to .\/spikes\ repository source files.
AccessibilityManager accessibilityManager = (AccessibilityManager) context.getSystemService(Context.ACCESSIBILITY_SERVICE);
enabledServices=getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN)
List<AccessibilityServiceInfo> enabledServices = getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN);
List<AccessibilityServiceInfo> enabledServices = getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN);
Action otherAction = (Action) o;
int result = id;
Actions otherActions = (Actions) o;
action=actions.getAction(i)
Action action = actions.getAction(i);
label=resources.getString(action.getLabel())
String label = resources.getString(action.getLabel());
action=actions.findActionById(actionId)
Action action = actions.findActionById(actionId);
action=actions.getAction(which)
Action action = actions.getAction(which);
CharSequence[] itemLabels = new CharSequence[actions.getCount()];
View view = convertView;
demo=getItem(position)
Demo demo = getItem(position);
Intent intent = new Intent(context, demo.activityClass);
layoutInflater=LayoutInflater.from(parent.getContext())
LayoutInflater layoutInflater = LayoutInflater.from(parent.getContext());
TweetView tweetView = (TweetView) findViewById(R.id.tweet);
actions=createActions(tweet,listener)
final Actions actions = createActions(tweet, listener);
ListView listView = ((ListView) findViewById(R.id.list));
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
final DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close) {

            @Override
            public void onDrawerClosed(View drawerView) {
                super.onDrawerClosed(drawerView);
                // waiting for the drawer to close, then navigating seems to cause issue.
                // why wait for the drawer to close? jankiness.
                if (pendingNavigationClick != null) {
                    startActivity(pendingNavigationClick);
                    pendingNavigationClick = null;
                }
            }

        };
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close);
Intent intent;
b=getIntent().getExtras()
Bundle b = getIntent().getExtras();
mShouldStartPlayback=b.getBoolean("shouldStart")
boolean mShouldStartPlayback = b.getBoolean("shouldStart");
startPosition=b.getInt("startPosition",0)
int startPosition = b.getInt("startPosition", 0);
currentPos=mVideoView.getCurrentPosition()
int currentPos = mVideoView.getCurrentPosition();
String msg;
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, mDisplaySize.y + getActionBar().getHeight());
mm=mSelectedMedia.getMetadata()
MediaMetadata mm = mSelectedMedia.getMetadata();
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, (int) (mDisplaySize.x * ASPECT_RATIO));
WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
width=display.getWidth()
int width = display.getWidth();
height=display.getHeight()
int height = display.getHeight();
int resourceId = 0;
String videoUrl = "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4#sthash.rJ5rPZy8.dpuf";
String title = "Jahre Philharmonie";
String description = "Awesome film you must watch!";
String author = "Blundell";
String thumbUrl = "http://www.ustream.tv/blog/wp-content/uploads/2013/10/simply-go-live.png";
MediaMetadata metadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE);
mediaInfo=new MediaInfo.Builder(videoUrl).setMetadata(metadata).setStreamType(MediaInfo.STREAM_TYPE_BUFFERED).setContentType("video/mp4").build()
MediaInfo mediaInfo = new MediaInfo.Builder(videoUrl)
                        .setMetadata(metadata)
                        .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)
                        .setContentType("video/mp4")
                        .build();
Intent intent = new Intent(MainActivity.this, LocalPlayerActivity.class);
preferences=getPreferences(MODE_PRIVATE)
SharedPreferences preferences = getPreferences(MODE_PRIVATE);
defaultSmsPackage=Telephony.Sms.getDefaultSmsPackage(this)
String defaultSmsPackage = Telephony.Sms.getDefaultSmsPackage(this);
Intent intent = new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
availableAppProvider=EasyCustomTabs.getInstance()
AvailableAppProvider availableAppProvider = EasyCustomTabs.getInstance();
ConnectedClient connectedClient = new ConnectedClient(client);
binder=Binder.newInstance()
Binder binder = Binder.newInstance();
List<Composer> composerList = new ArrayList<>();
customTabsSession=connection.newSession()
CustomTabsSession customTabsSession = connection.newSession();
CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(customTabsSession);
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
context=EasyCustomTabs.getInstance().getContext()
Context context = EasyCustomTabs.getInstance().getContext();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
packagesSupportingCustomTabs=getPackagesSupportingCustomTabs()
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
defaultPackage=getDefaultPackage()
String defaultPackage = getDefaultPackage();
defaultActivityInfo=packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK,0)
ResolveInfo defaultActivityInfo = packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK, 0);
String packageName = defaultActivityInfo.activityInfo.packageName;
resolvedInfoList=packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK,0)
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<String> packagesSupportingCustomTabs = new ArrayList<>();
Intent serviceIntent = new Intent();
bestPackageFinder=BestPackageFinder.newInstance()
BestPackageFinder bestPackageFinder = BestPackageFinder.newInstance();
packageName=bestPackageFinder.findBestPackage()
String packageName = bestPackageFinder.findBestPackage();
resolveInfo=createResolveInfoFor(packageName)
ResolveInfo resolveInfo = createResolveInfoFor(packageName);
ResolveInfo resolveInfo = new ResolveInfo();
List<ResolveInfo> resolveInfoList = new ArrayList<>();
defaultPackageResolveInfo=createResolveInfoFor(packageName)
ResolveInfo defaultPackageResolveInfo = createResolveInfoFor(packageName);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
oldestApiMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage oldestApiMessage = apiMessages.get(apiMessages.size() - 1);
String lastResponseEpochTime = oldestApiMessage.timeStamp;
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
latestMessage=latestMessages.get(latestMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage latestMessage = latestMessages.get(latestMessages.size() - 1);
latestMessageDateTime=convertToLocalDateTime(latestMessage.timeStamp)
LocalDateTime latestMessageDateTime = convertToLocalDateTime(latestMessage.timeStamp);
List<ChannelHistory.Message> messages = new ArrayList<>();
historyFrom=getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1))
LocalDateTime historyFrom = getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1));
historyTo=getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0))
LocalDateTime historyTo = getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0));
String text = apiMessage.text;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
lastMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage lastMessage = apiMessages.get(apiMessages.size() - 1);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
firstMessage=apiMessages.get(0)
ApiPagedChannelHistory.ApiMessage firstMessage = apiMessages.get(0);
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
String slackToken = args[0];
retrofit=new Retrofit.Builder().baseUrl("https://slack.com/api/").addConverterFactory(GsonConverterFactory.create()).build()
Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://slack.com/api/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();
slackWebService=retrofit.create(SlackWebService.class)
SlackWebService slackWebService = retrofit.create(SlackWebService.class);
slackHistoryFetcher=SlackHistoryFetcher.from(slackWebService,slackToken)
SlackHistoryFetcher slackHistoryFetcher = SlackHistoryFetcher.from(slackWebService, slackToken);
start=LocalDateTime.now()
LocalDateTime start = LocalDateTime.now();
end=LocalDateTime.now().minusDays(7)
LocalDateTime end = LocalDateTime.now().minusDays(7);
channelHistory=slackHistoryFetcher.getChannelHistory(start,end)
ChannelHistory channelHistory = slackHistoryFetcher.getChannelHistory(start, end);
HistoryConverter historyConverter = new HistoryConverter();
ApiPagedResponse apiPagedResponse = new ApiPagedResponse(start);
response=fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime())
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
apiPagedChannelHistory=response.body()
ApiPagedChannelHistory apiPagedChannelHistory = response.body();
channelHistory=slackWebService.getChannelHistory(slackToken,channel,lastResponseEpochTime,NUMBER_OF_RESULTS)
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
ApiPagedChannelHistory apiPagedChannelHistory = new ApiPagedChannelHistory();
ApiPagedChannelHistory.ApiMessage apiMessage = new ApiPagedChannelHistory.ApiMessage();
final TextView textView = new TextView(context);
emptyView=findViewById(R.id.empty_view)
View emptyView = findViewById(R.id.empty_view);
final Integer action = values[0];
LoremAdapter loremAdapter = new LoremAdapter();
accounts=accountManager.getAccountsByType(accountType)
Account[] accounts = accountManager.getAccountsByType(accountType);
Bundle result;
Bundle result;
Bundle result = new Bundle();
activity=createLoginIntent(context,accountType,authTokenType,requiredFeatures,options)
Intent activity = createLoginIntent(context, accountType, authTokenType, requiredFeatures, options);
Bundle bundle = new Bundle();
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
accounts=accountManager.getAccountsByType(authTokenType)
Account[] accounts = accountManager.getAccountsByType(authTokenType);
bundle=createResponseBundle(token)
Bundle bundle = createResponseBundle(token);
accountManager=AccountManager.get(this.getApplicationContext())
AccountManager accountManager = AccountManager.get(this.getApplicationContext());
Account account = new Account(token.getUserName(), getAccountName());
Bundle bundle = new Bundle();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
GertHerbAuthenticator authenticator = new GertHerbAuthenticator(this);
fontId=getFontId(context,attrs)
int fontId = getFontId(context, attrs);
fontType=getFontType(fontId)
FontType fontType = getFontType(fontId);
typedArray=context.obtainStyledAttributes(attrs,R.styleable.CustomTextAppearance)
TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CustomTextAppearance);
typeface=createTypeFace(context,fontType)
Typeface typeface = createTypeFace(context, fontType);
info=context.getApplicationInfo()
ApplicationInfo info = context.getApplicationInfo();
name=activity.getTitle().toString()
String name = activity.getTitle().toString();
client=mServer.accept()
Socket client = mServer.accept();
boolean result;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
BufferedReader in = null;
request=in.readLine()
final String request = in.readLine();
String command;
String parameters;
index=request.indexOf(' ')
int index = request.indexOf(' ');
boolean result;
boolean success = true;
BufferedWriter out = null;
index=parameters.indexOf(' ')
int index = parameters.indexOf(' ');
code=parameters.substring(0,index)
final String code = parameters.substring(0, index);
int hashCode = (int) Long.parseLong(code, 16);
window=findWindow(hashCode)
final View window = findWindow(hashCode);
dispatch=ViewDebug.class.getDeclaredMethod("dispatchCommand",View.class,String.class,String.class,OutputStream.class)
final Method dispatch = ViewDebug.class.getDeclaredMethod("dispatchCommand",
                        View.class, String.class, String.class, OutputStream.class);
View window = null;
boolean result = true;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
boolean result = true;
String focusName = null;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
View focusedWindow = null;
BufferedWriter out = null;
boolean needWindowListUpdate = false;
boolean needFocusedWindowUpdate = false;
BetterAccountManager accountManager = new BetterAccountManager(this, getString(R.string.account_type), getString(R.string.token_type), null);
loginView=Views.findById(this,R.id.login_view)
LoginView loginView = Views.findById(this, R.id.login_view);
authorizationApi=new GithubApiFactory().createAuthorizationApi(credentials.username,credentials.password)
GithubApi authorizationApi = new GithubApiFactory().createAuthorizationApi(credentials.username, credentials.password);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
Endpoint endpoint = new Endpoint() {
            @Override
            public String getUrl() {
                return GITHUB_API_URL;
            }

            @Override
            public String getName() {
                return "Live";
            }
        };
interceptor=createAuthorizationRequestInterceptor(username,password)
RequestInterceptor interceptor = createAuthorizationRequestInterceptor(username, password);
restAdapter=createRestAdapter(endpoint,interceptor)
RestAdapter restAdapter = createRestAdapter(endpoint, interceptor);
Dummy dummy = new Dummy();
result=dummy.explodes()
boolean result = dummy.explodes();
String base64EncodedPublicKey = "CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE";
premiumPurchase=inventory.getPurchase(SKU_PREMIUM)
Purchase premiumPurchase = inventory.getPurchase(SKU_PREMIUM);
infiniteGasPurchase=inventory.getPurchase(SKU_INFINITE_GAS)
Purchase infiniteGasPurchase = inventory.getPurchase(SKU_INFINITE_GAS);
gasPurchase=inventory.getPurchase(SKU_GAS)
Purchase gasPurchase = inventory.getPurchase(SKU_GAS);
String payload = "";
String payload = "";
String payload = "";
payload=p.getDeveloperPayload()
String payload = p.getDeveloperPayload();
int index = mTank >= TANK_RES_IDS.length ? TANK_RES_IDS.length - 1 : mTank;
AlertDialog.Builder bld = new AlertDialog.Builder(this);
spe=getPreferences(MODE_PRIVATE).edit()
SharedPreferences.Editor spe = getPreferences(MODE_PRIVATE).edit();
sp=getPreferences(MODE_PRIVATE)
SharedPreferences sp = getPreferences(MODE_PRIVATE);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                                  + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                    | ((source[d + 1 + off] << 24) >>> 16)
                    | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                    | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                                   "-1002:Bad response received/" +
                                   "-1003:Purchase signature verification failed/" +
                                   "-1004:Send intent failed/" +
                                   "-1005:User cancelled/" +
                                   "-1006:Unknown purchase response/" +
                                   "-1007:Missing token/" +
                                   "-1008:Unknown error/" +
                                   "-1009:Subscriptions not available/" +
                                   "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(),
                    itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                        | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                        | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                            | ((source[d + 1 + off] << 24) >>> 16)
                            | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                            | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                "-1002:Bad response received/" +
                "-1003:Purchase signature verification failed/" +
                "-1004:Send intent failed/" +
                "-1005:User cancelled/" +
                "-1006:Unknown purchase response/" +
                "-1007:Missing token/" +
                "-1008:Unknown error/" +
                "-1009:Subscriptions not available/" +
                "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(), itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
responseCode=result.getResponse()
int responseCode = result.getResponse();
sku=purchase.getSku()
String sku = purchase.getSku();
skuDetails=inv.getSkuDetails(sku)
SkuDetails skuDetails = inv.getSkuDetails(sku);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
Button purchaseFiveButton = (Button) rootView.findViewById(R.id.fragment_main_button_purchase_five_coins);
xml=context.obtainStyledAttributes(attrs,R.styleable.LandingStrip)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.LandingStrip);
tabLayoutId=xml.getResourceId(R.styleable.LandingStrip_tabLayoutId,MISSING_TAB_LAYOUT_ID)
int tabLayoutId = xml.getResourceId(R.styleable.LandingStrip_tabLayoutId, MISSING_TAB_LAYOUT_ID);
indicatorColour=xml.getResourceId(R.styleable.LandingStrip_indicatorColor,DEFAULT_INDICATOR_COLOUR)
int indicatorColour = xml.getResourceId(R.styleable.LandingStrip_indicatorColor, DEFAULT_INDICATOR_COLOUR);
indicatorHeight=getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight,DEFAULT_INDICATOR_HEIGHT,xml)
int indicatorHeight = getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight, DEFAULT_INDICATOR_HEIGHT, xml);
tabsPaddingLeft=getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingLeft = getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding, DEFAULT_TABS_PADDING, xml);
tabsPaddingRight=getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingRight = getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding, DEFAULT_TABS_PADDING, xml);
MutableCoordinates drawCurrentTabCoordinates = new MutableCoordinates();
MutableCoordinates drawNextTabCoordinates = new MutableCoordinates();
MutableCoordinates drawMovingIndicatorCoordinates = new MutableCoordinates();
currentTab=tabsContainer.getTabAt(currentPosition)
View currentTab = tabsContainer.getTabAt(currentPosition);
currentTabStart=currentTab.getLeft()
float currentTabStart = currentTab.getLeft();
currentTabEnd=currentTab.getRight()
float currentTabEnd = currentTab.getRight();
nextTab=tabsContainer.getTabAt(currentPosition + 1)
View nextTab = tabsContainer.getTabAt(currentPosition + 1);
nextTabPositionOffset=getFractionFrom(pagePositionOffset)
float nextTabPositionOffset = getFractionFrom(pagePositionOffset);
indicatorStart=getIndicatorPosition(nextTab.getStart(),pagePositionOffset,currentTab.getStart(),nextTabPositionOffset)
float indicatorStart = getIndicatorPosition(nextTab.getStart(), pagePositionOffset, currentTab.getStart(), nextTabPositionOffset);
indicatorEnd=getIndicatorPosition(nextTab.getEnd(),pagePositionOffset,currentTab.getEnd(),nextTabPositionOffset)
float indicatorEnd = getIndicatorPosition(nextTab.getEnd(), pagePositionOffset, currentTab.getEnd(), nextTabPositionOffset);
height=getHeight()
int height = getHeight();
tabCount=pagerAdapter.getCount()
int tabCount = pagerAdapter.getCount();
title=pagerAdapter.getPageTitle(position)
CharSequence title = pagerAdapter.getPageTitle(position);
inflatedTabView=tabsContainer.inflateTab(layoutInflater,attributes.getTabLayoutId())
View inflatedTabView = tabsContainer.inflateTab(layoutInflater, attributes.getTabLayoutId());
int position = (int) view.getTag(TAG_KEY_POSITION);
scrollOffset=getHorizontalScrollOffset(position,positionOffset)
int scrollOffset = getHorizontalScrollOffset(position, positionOffset);
newScrollX=calculateScrollOffset(position,scrollOffset,positionOffset)
float newScrollX = calculateScrollOffset(position, scrollOffset, positionOffset);
tabWidth=tabsContainer.getTabAt(position).getWidth()
int tabWidth = tabsContainer.getTabAt(position).getWidth();
tabForPosition=tabsContainer.getTabAt(position)
View tabForPosition = tabsContainer.getTabAt(position);
float tabStartX = tabForPosition.getLeft() + scrollOffset;
int viewMiddleOffset = getTabParentWidth() / 2;
float tabCenterOffset = (tabForPosition.getRight() - tabForPosition.getLeft()) * 0.5F;
nextTabDelta=getNextTabDelta(position,pagerOffset,tabForPosition)
float nextTabDelta = getNextTabDelta(position, pagerOffset, tabForPosition);
LinearLayout tabsContainerView = new LinearLayout(context);
tab=getTabAt(index)
View tab = getTabAt(index);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
position=indicatorCoordinates.getStart()
float position = indicatorCoordinates.getStart();
lastTabOffset=((ViewGroup)getChildAt(0)).getChildAt(getChildCount() - 1).getWidth()
float lastTabOffset = ((ViewGroup) getChildAt(0)).getChildAt(getChildCount() - 1).getWidth();
frequency=getOneCycle(lastTabOffset)
float frequency = getOneCycle(lastTabOffset);
r=toHex(calculateColour(position,frequency,PHASE_RED,AMPLITUDE,CENTER_FREQUENCY))
String r = toHex(calculateColour(position, frequency, PHASE_RED, AMPLITUDE, CENTER_FREQUENCY));
g=toHex(calculateColour(position,frequency,PHASE_GREEN,AMPLITUDE,CENTER_FREQUENCY))
String g = toHex(calculateColour(position, frequency, PHASE_GREEN, AMPLITUDE, CENTER_FREQUENCY));
b=toHex(calculateColour(position,frequency,PHASE_BLUE,AMPLITUDE,CENTER_FREQUENCY))
String b = toHex(calculateColour(position, frequency, PHASE_BLUE, AMPLITUDE, CENTER_FREQUENCY));
height=getHeight()
int height = getHeight();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPagerFragment viewPagerFragment = new ViewPagerFragment();
Bundle bundle = new Bundle();
TextView view = (TextView) layoutInflater.inflate(R.layout.view_demo, container, false);
currentPosition=viewPagerAdapterState.getCurrentPosition()
int currentPosition = viewPagerAdapterState.getCurrentPosition();
view=getView(container,position)
View view = getView(container, position);
parcelableSparseArray=viewPagerAdapterState.get(position)
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
View view = (View) object;
SparseArray<Parcelable> viewState = new SparseArray<>();
position=entry.getValue()
int position = entry.getValue();
view=entry.getKey()
View view = entry.getKey();
bundle=in.readBundle()
Bundle bundle = in.readBundle();
Map<Integer, SparseArray<Parcelable>> viewStates = new HashMap<>(bundle.keySet().size());
sparseParcelableArray=bundle.getSparseParcelableArray(key)
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
primaryItemPosition=in.readInt()
int primaryItemPosition = in.readInt();
Bundle bundle = new Bundle();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
final TextView abText = (TextView) findViewById(R.id.ab_text);
final AyBe ayBe = new AyBe();
id=item.getItemId()
int id = item.getItemId();
callback=weakCallback.get()
AbTestingParamsLoadedCallback callback = weakCallback.get();
WeakReference<NoLeakActivity> weakNoLeakActivity = new WeakReference<NoLeakActivity>(noLeakActivity);
noLeakActivity=weakNoLeakActivity.get()
NoLeakActivity noLeakActivity = weakNoLeakActivity.get();
RecyclerView recyclerView = (RecyclerView) layoutInflater.inflate(R.layout.view_page, viewGroup, false);
itemView=layoutInflater.inflate(R.layout.view_item,parent,false)
View itemView = layoutInflater.inflate(R.layout.view_item, parent, false);
actual=foo.twice(HALF)
int actual = foo.twice(HALF);
int expected = WHOLE;
final float inverseRatio = 1f - ratio;
float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRatio);
float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRatio);
float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRatio);
hsv=node.getHsv()
float[] hsv = node.getHsv();
width=bitmap.getWidth()
final int width = bitmap.getWidth();
height=bitmap.getHeight()
final int height = bitmap.getHeight();
final int[] rgbPixels = new int[width * height];
final MedianCutQuantizer mcq = new MedianCutQuantizer(rgbPixels, NUM_COLORS);
primaryAccentColor=findPrimaryAccentColor()
final ColorNode primaryAccentColor = findPrimaryAccentColor();
secondaryAccentColor=findSecondaryAccentColor(primaryAccentColor)
final ColorNode secondaryAccentColor = findSecondaryAccentColor(primaryAccentColor);
tertiaryAccentColor=findTertiaryAccentColor(primaryAccentColor,secondaryAccentColor)
final int tertiaryAccentColor = findTertiaryAccentColor(
                primaryAccentColor, secondaryAccentColor);
primaryTextColor=findPrimaryTextColor(primaryAccentColor)
final int primaryTextColor = findPrimaryTextColor(primaryAccentColor);
secondaryTextColor=findSecondaryTextColor(primaryAccentColor)
final int secondaryTextColor = findSecondaryTextColor(primaryAccentColor);
final float primaryHue = primary.getHsv()[0];
final float candidateHue = candidate.getHsv()[0];
copy=Arrays.copyOf(palette,palette.length)
final MedianCutQuantizer.ColorNode[] copy = Arrays.copyOf(palette, palette.length);
maxCount=palette[0].getCount()
final float maxCount = palette[0].getCount();
lhsWeight=calculateWeight(lhs,maxCount)
final float lhsWeight = calculateWeight(lhs, maxCount);
rhsWeight=calculateWeight(rhs,maxCount)
final float rhsWeight = calculateWeight(rhs, maxCount);
float sum = 0;
float sumWeight = 0;
float value = values[i];
float weight = values[i + 1];
ColorHistogram colorHist = new ColorHistogram(pixels);
K=colorHist.getNumberOfColors()
int K = colorHist.getNumberOfColors();
ColorNode[] rCols = null;
rgb=colorHist.getColor(i)
int rgb = colorHist.getColor(i);
cnt=colorHist.getCount(i)
int cnt = colorHist.getCount(i);
ColorBox initialBox = new ColorBox(0, K - 1, 0);
List<ColorBox> colorSet = new ArrayList<ColorBox>();
int k = 1;
boolean done = false;
nextBox=findBoxToSplit(colorSet)
ColorBox nextBox = findBoxToSplit(colorSet);
newBox=nextBox.splitBox()
ColorBox newBox = nextBox.splitBox();
color=findClosestColor(pixels[i])
ColorNode color = findClosestColor(pixels[i]);
idx=findClosestColorIndex(rgb)
int idx = findClosestColorIndex(rgb);
red=Color.red(rgb)
int red = Color.red(rgb);
grn=Color.green(rgb)
int grn = Color.green(rgb);
blu=Color.blue(rgb)
int blu = Color.blue(rgb);
int minIdx = 0;
int minDistance = Integer.MAX_VALUE;
ColorNode color = quantColors[i];
d2=color.distance2(red,grn,blu)
int d2 = color.distance2(red, grn, blu);
ColorBox boxToSplit = null;
int minLevel = Integer.MAX_VALUE;
n=colorBoxes.size()
int n = colorBoxes.size();
ColorNode[] avgColors = new ColorNode[n];
int i = 0;
int dr = this.red - red;
int dg = this.grn - grn;
int db = this.blu - blu;
ColorNode color = imageColors[i];
int r = color.red;
int g = color.grn;
int b = color.blu;
dim=getLongestColorDimension()
ColorDimension dim = getLongestColorDimension();
med=findMedian(dim)
int med = findMedian(dim);
int nextLevel = level + 1;
ColorBox newBox = new ColorBox(med + 1, upper, nextLevel);
int rLength = rmax - rmin;
int gLength = gmax - gmin;
int bLength = bmax - bmin;
int half = count / 2;
int nPixels, median;
int rSum = 0;
int gSum = 0;
int bSum = 0;
int n = 0;
ColorNode ci = imageColors[i];
int cnt = ci.cnt;
double nd = n;
int avgRed = (int) (0.5 + rSum / nd);
int avgGrn = (int) (0.5 + gSum / nd);
int avgBlu = (int) (0.5 + bSum / nd);
s=this.getClass().getSimpleName()
String s = this.getClass().getSimpleName();
int i = 0;
int N = pixelsOrig.length;
int[] pixelsCpy = new int[N];
int k = -1;
int curColor = -1;
int nColors = k + 1;
id=item.getItemId()
int id = item.getItemId();
Intent intent = new Intent();
bitmap=((BitmapDrawable)imageView.getDrawable()).getBitmap()
Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap();
DominantColorCalculator dominantColorCalculator = new DominantColorCalculator(bitmap);
selectedImageUri=data.getData()
Uri selectedImageUri = data.getData();
selectedImagePath=getPath(selectedImageUri)
String selectedImagePath = getPath(selectedImageUri);
String[] projection = {MediaStore.Images.Media.DATA};
cursor=managedQuery(uri,projection,null,null,null)
Cursor cursor = managedQuery(uri, projection, null, null, null);
column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)
int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
LinearLayout rootView = (LinearLayout) inflater.inflate(R.layout.fragment_main, container, false);
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
preapprovalButton=payPal.getCheckoutButton(getActivity(),PayPal.BUTTON_194x37,CheckoutButton.TEXT_PAY)
CheckoutButton preapprovalButton = payPal.getCheckoutButton(getActivity(), PayPal.BUTTON_194x37, CheckoutButton.TEXT_PAY);
preapprovalIntent=payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY)
Intent preapprovalIntent = payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY);
String resultTitle = "";
String resultInfo = "";
String resultExtra = "";
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
PayPalPreapproval preapproval = new PayPalPreapproval();
preapproval=createPreapproval(preapprovalKey)
PayPalPreapproval preapproval = createPreapproval(preapprovalKey);
Bundle bundle = new Bundle();
int availableLength = maxLength;
StringBuilder stringBuilder = new StringBuilder(maxLength);
prefixAndSuffixLength=computeAppendedLengthIncludingSeparatorSpaces(prefix,suffix)
int prefixAndSuffixLength = computeAppendedLengthIncludingSeparatorSpaces(prefix, suffix);
urlLength=computeUrlLengthIncludingSeparatorSpace(url)
int urlLength = computeUrlLengthIncludingSeparatorSpace(url);
trimmedSubject=ellipsizeTextIfExceedsMaxLength(subject,availableLength)
String trimmedSubject = ellipsizeTextIfExceedsMaxLength(subject, availableLength);
int length = 0;
preferences=context.getSharedPreferences(MRU_PREFERENCES,Context.MODE_PRIVATE)
SharedPreferences preferences = context.getSharedPreferences(MRU_PREFERENCES, Context.MODE_PRIVATE);
args=getArguments()
Bundle args = getArguments();
themeResId=getThemeResIdIfProvidedIn(args)
int themeResId = getThemeResIdIfProvidedIn(args);
title=getTitleIfProvidedIn(args)
CharSequence title = getTitleIfProvidedIn(args);
builder=createDialogBuilder(themeResId).setCancelable(true).setView(dialogView)
AlertDialog.Builder builder = createDialogBuilder(themeResId)
                .setCancelable(true)
                .setView(dialogView);
inflater=getActivity().getLayoutInflater()
LayoutInflater inflater = getActivity().getLayoutInflater();
GridView gridView = (GridView) rootView.findViewById(R.id.ps__dialog_grid);
targetApps=extractTargetAppsFrom(args)
TargetApps targetApps = extractTargetAppsFrom(args);
allShareTargets=getAvailableShareTargets(sharingIntent)
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
priorityAppInfos=createPriorityResolveInfoList(targetApps,allShareTargets)
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
otherAppInfos=createOtherAppsResolveInfoList(priorityAppInfos,allShareTargets)
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
resolveInfos=targetApps.extractTargetResolveInfosFrom(allShareTargets)
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
mruResolveInfo=findMruResolveInfoIn(allShareTargets)
ResolveInfo mruResolveInfo = findMruResolveInfoIn(allShareTargets);
List<ResolveInfo> otherAppsInfos = new ArrayList<ResolveInfo>(allAppInfos);
mruPackageName=persister.getLastUsedTarget()
String mruPackageName = persister.getLastUsedTarget();
String packageName = resolveInfo.activityInfo.packageName;
packageManager=getActivity().getPackageManager()
PackageManager packageManager = getActivity().getPackageManager();
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
View buttonStrip = (View) showMoreButton.getParent();
gridView=getGridView()
GridView gridView = getGridView();
intent=wrapIntentWithExplicitTargetComponentForItem(position,sharingIntent)
Intent intent = wrapIntentWithExplicitTargetComponentForItem(position, sharingIntent);
Intent intent = new Intent(sharingIntent);
ActivityInfo activity = adapter.getItem(position).activityInfo;
ComponentName name = new ComponentName(activity.applicationInfo.packageName, activity.name);
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
PriorityShareDialog dialog = new PriorityShareDialog();
Bundle args = new Bundle();
sharingIntent=createSharingIntent()
Intent sharingIntent = createSharingIntent();
fragmentManager=activity.getFragmentManager()
FragmentManager fragmentManager = activity.getFragmentManager();
Intent intent = new Intent(Intent.ACTION_SEND);
dialog=new PriorityShareDialog.Builder().setTitle(title).setTargetApps(targetApps).setSharingIntent(sharingIntent).setOnPrepareSharingIntentListener(listener).setShowMostRecentlyUsed(showMostRecentlyUsed).build()
PriorityShareDialog dialog = new PriorityShareDialog.Builder()
                .setTitle(title)
                .setTargetApps(targetApps)
                .setSharingIntent(sharingIntent)
                .setOnPrepareSharingIntentListener(listener)
                .setShowMostRecentlyUsed(showMostRecentlyUsed)
                .build();
PrioritySharer prioritySharer = new PrioritySharer();
prioritySharer=build()
PrioritySharer prioritySharer = build();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
layoutInflater=LayoutInflater.from(context)
LayoutInflater layoutInflater = LayoutInflater.from(context);
iconSizePx=getIconSizePx(context.getResources())
int iconSizePx = getIconSizePx(context.getResources());
ArrayList<ResolveInfo> sortedList = new ArrayList<ResolveInfo>(resolveInfoList);
int otherAppsCountMaybe = showAllApps ? otherAppInfos.size() : 0;
firstOtherAppsItemPosition=priorityAppInfos.size()
int firstOtherAppsItemPosition = priorityAppInfos.size();
int offsetPosition = position - firstOtherAppsItemPosition;
TextView textView;
textView=initializeItemViewIfNecessary(convertView,R.layout.ps__grid_item_share,parent)
TextView textView = initializeItemViewIfNecessary(convertView, R.layout.ps__grid_item_share, parent);
info=getItem(position)
ResolveInfo info = getItem(position);
icon=info.loadIcon(packageManager)
Drawable icon = info.loadIcon(packageManager);
arraySize=in.readInt()
int arraySize = in.readInt();
String[] packageNames = new String[arraySize];
arraySize=targetPackages.size()
int arraySize = targetPackages.size();
String[] packagesArray = new String[arraySize];
SparseArray<ResolveInfo> matchedResolveInfos = new SparseArray<ResolveInfo>(targetPackages.size());
String packageName = info.activityInfo.packageName;
index=indexOfItemInto(packageName,targetPackages)
int index = indexOfItemInto(packageName, targetPackages);
sparseArraySize=sparseArray.size()
int sparseArraySize = sparseArray.size();
ArrayList<T> list = new ArrayList<T>(sparseArraySize);
int i = 0;
originalSubject=intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT)
CharSequence originalSubject = intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT);
String subject = originalSubject != null ? originalSubject.toString() : null;
composer=createComposer()
MessageComposer composer = createComposer();
component=intent.getComponent()
ComponentName component = intent.getComponent();
targetPackageName=component.getPackageName()
String targetPackageName = component.getPackageName();
adapter=ArrayAdapter.createFromResource(this,R.array.target_apps,android.R.layout.simple_spinner_item)
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
EditText text = (EditText) findViewById(R.id.text);
EditText title = (EditText) findViewById(R.id.title);
EditText mimeType = (EditText) findViewById(R.id.mime_type);
EditText dataUri = (EditText) findViewById(R.id.data_uri);
Switch showMostRecentlyUsed = (Switch) findViewById(R.id.show_most_recently_used);
uriString=dataUri.getText().toString()
String uriString = dataUri.getText().toString();
EditText text = (EditText) findViewById(R.id.text);
TextView textView = (TextView) convertView.findViewById(R.id.positionView);
colorView=convertView.findViewById(R.id.colorView)
View colorView = convertView.findViewById(R.id.colorView);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
offset=headerPlaceholder.getTop()
int offset = headerPlaceholder.getTop();
Integer item = COLORS[position];
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
firstVisiblePosition=grid.getFirstVisiblePosition()
int firstVisiblePosition = grid.getFirstVisiblePosition();
inflate=getViewForPosition(container,position)
View inflate = getViewForPosition(container, position);
id=item.getItemId()
int id = item.getItemId();
MyActivity activity = new MyActivity();
String manifestProperty = "../app/src/main/AndroidManifest.xml";
String resProperty = "../app/src/main/res";
cursor=resolver.query(uri,projection,selection,selectionArgs,null)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, null);
cursor=resolver.query(uri,projection,selection,selectionArgs,sortOrder)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, sortOrder);
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=richClass.setter(name)
Method setter = richClass.setter(name);
T obj;
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=methodsByName.get(name)
Method setter = methodsByName.get(name);
int type = TYPE_INT;
Class<?> t = setter.getParameterTypes()[0];
Class<?> t = setter.getParameterTypes()[0];
cursorType=cursor.getType(index)
final int cursorType = cursor.getType(index);
final Object obj;
s=f.getAnnotation(Mapper.class)
Mapper s = f.getAnnotation(Mapper.class);
mm=m.getAnnotation(Mapper.class)
Mapper mm = m.getAnnotation(Mapper.class);
methodName=StringUtil.asCamelifySetMethod(what)
String methodName = StringUtil.asCamelifySetMethod(what);
cursor=getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,null,null,null,null)
Cursor cursor = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
now=System.currentTimeMillis()
long now = System.currentTimeMillis();
List<Contact2> typedCursor = new CursorList<Contact2>(cursor, Contact2.class);
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[a-zA-Z0-9]+")
Pattern p = Pattern.compile("[a-zA-Z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[A-Z][a-z0-9]+")
Pattern p = Pattern.compile("[A-Z][a-z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
SurfaceView first = (SurfaceView) findViewById(R.id.firstSurface);
SurfaceView second = (SurfaceView) findViewById(R.id.secondSurface);
Intent pickVideo = new Intent(Intent.ACTION_PICK);
xml=context.obtainStyledAttributes(attrs,R.styleable.RelativeLayoutWithForeground)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.RelativeLayoutWithForeground);
int foregroundResId = INVALID_FOREGROUND_ID;
drawable=getDrawable(getResources(),foregroundResId)
Drawable drawable = getDrawable(getResources(), foregroundResId);
Bundle args = new Bundle();
enroll=mHotwordDetector.createEnrollIntent()
Intent enroll = mHotwordDetector.createEnrollIntent();

Diff of 55a78bda12eca1ca01441ee75048f7d6c72d1fa0 and 9c33cb3589818f91a368bb66d218b9c708b193e2:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 1
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 55a78bda12eca1ca01441ee75048f7d6c72d1fa0 to 9c33cb3589818f91a368bb66d218b9c708b193e2


****Parsing for addition at revision 9c33cb3589818f91a368bb66d218b9c708b193e2****

Added AccessibilityServices.java to .\/spikes\ repository source files.
Added Action.java to .\/spikes\ repository source files.
Added Actions.java to .\/spikes\ repository source files.
Added ActionsAccessibilityDelegate.java to .\/spikes\ repository source files.
Added ActionsAlertDialogCreator.java to .\/spikes\ repository source files.
Added AccessibilityServicesActivity.java to .\/spikes\ repository source files.
Added Demo.java to .\/spikes\ repository source files.
Added DemoAdapter.java to .\/spikes\ repository source files.
Added CustomActionsActivity.java to .\/spikes\ repository source files.
Added TweetView.java to .\/spikes\ repository source files.
Added DemosActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added DrawerActivity.java to .\/spikes\ repository source files.
Added EarthActivity.java to .\/spikes\ repository source files.
Added ProHaxDrawerActivity.java to .\/spikes\ repository source files.
Added SaturnActivity.java to .\/spikes\ repository source files.
Added LocalPlayerActivity.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added CastApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ComposeSmsActivity.java to .\/spikes\ repository source files.
Added HeadlessSmsSendService.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MmsReceiver.java to .\/spikes\ repository source files.
Added SmsReceiver.java to .\/spikes\ repository source files.
Added ExtendedDemoActivity.java to .\/spikes\ repository source files.
Added ExtendedDemoApplication.java to .\/spikes\ repository source files.
Added SimpleDemoActivity.java to .\/spikes\ repository source files.
Added SimpleDemoApplication.java to .\/spikes\ repository source files.
Added Binder.java to .\/spikes\ repository source files.
Added ConnectedClient.java to .\/spikes\ repository source files.
Added Connection.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnection.java to .\/spikes\ repository source files.
Added ServiceConnectionCallback.java to .\/spikes\ repository source files.
Added EasyCustomTabs.java to .\/spikes\ repository source files.
Added ActionButtonComposer.java to .\/spikes\ repository source files.
Added CloseButtonIconComposer.java to .\/spikes\ repository source files.
Added Composer.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilder.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigator.java to .\/spikes\ repository source files.
Added EasyCustomTabsWebNavigator.java to .\/spikes\ repository source files.
Added ExitAnimationsComposer.java to .\/spikes\ repository source files.
Added IntentCustomizer.java to .\/spikes\ repository source files.
Added MenuItemComposer.java to .\/spikes\ repository source files.
Added NavigationFallback.java to .\/spikes\ repository source files.
Added Navigator.java to .\/spikes\ repository source files.
Added ShowTitleComposer.java to .\/spikes\ repository source files.
Added StartAnimationsComposer.java to .\/spikes\ repository source files.
Added ToolbarColorComposer.java to .\/spikes\ repository source files.
Added UrlBarHidingComposer.java to .\/spikes\ repository source files.
Added WebNavigator.java to .\/spikes\ repository source files.
Added AvailableAppProvider.java to .\/spikes\ repository source files.
Added BestPackageFinder.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProvider.java to .\/spikes\ repository source files.
Added BinderTest.java to .\/spikes\ repository source files.
Added ConnectedClientTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnectionTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigatorTest.java to .\/spikes\ repository source files.
Added BestPackageFinderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProviderTest.java to .\/spikes\ repository source files.
Added ApiPagedChannelHistory.java to .\/spikes\ repository source files.
Added ApiPagedResponse.java to .\/spikes\ repository source files.
Added ChannelHistory.java to .\/spikes\ repository source files.
Added HistoryConverter.java to .\/spikes\ repository source files.
Added Runner.java to .\/spikes\ repository source files.
Added SlackHistoryFetcher.java to .\/spikes\ repository source files.
Added SlackWebService.java to .\/spikes\ repository source files.
Added ApiPagedResponseTest.java to .\/spikes\ repository source files.
Added MainActivityTest.java to .\/spikes\ repository source files.
Added LoremAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added BetterAccountManager.java to .\/spikes\ repository source files.
Added BetterAuthenticator.java to .\/spikes\ repository source files.
Added BetterAuthenticatorActivity.java to .\/spikes\ repository source files.
Added GertHerbAuthenticator.java to .\/spikes\ repository source files.
Added GertHerbAuthenticatorService.java to .\/spikes\ repository source files.
Added NoAccountException.java to .\/spikes\ repository source files.
Added ReactiveAuthenticatorActivity.java to .\/spikes\ repository source files.
Added Token.java to .\/spikes\ repository source files.
Added GertHerbActivity.java to .\/spikes\ repository source files.
Added GertHerbApplication.java to .\/spikes\ repository source files.
Added GertHerbAuthenticationActivity.java to .\/spikes\ repository source files.
Added TypefaceFactory.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added ViewServer.java to .\/spikes\ repository source files.
Added ViewServerManager.java to .\/spikes\ repository source files.
Added DeveloperError.java to .\/spikes\ repository source files.
Added HomeActivity.java to .\/spikes\ repository source files.
Added LoginActivity.java to .\/spikes\ repository source files.
Added LoginView.java to .\/spikes\ repository source files.
Added UserCredentials.java to .\/spikes\ repository source files.
Added FontButton.java to .\/spikes\ repository source files.
Added FontEditText.java to .\/spikes\ repository source files.
Added FontTextView.java to .\/spikes\ repository source files.
Added GithubApi.java to .\/spikes\ repository source files.
Added GithubApiFactory.java to .\/spikes\ repository source files.
Added TokenRequest.java to .\/spikes\ repository source files.
Added TokenResponse.java to .\/spikes\ repository source files.
Added Dummy.java to .\/spikes\ repository source files.
Added DummyTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MainFragment.java to .\/spikes\ repository source files.
Added Attributes.java to .\/spikes\ repository source files.
Added Coordinates.java to .\/spikes\ repository source files.
Added IndicatorCoordinatesCalculator.java to .\/spikes\ repository source files.
Added LandingStrip.java to .\/spikes\ repository source files.
Added MutableCoordinates.java to .\/spikes\ repository source files.
Added OnPagerAdapterChangedListener.java to .\/spikes\ repository source files.
Added PagerAdapterObserver.java to .\/spikes\ repository source files.
Added Scrollable.java to .\/spikes\ repository source files.
Added ScrollingPageChangeListener.java to .\/spikes\ repository source files.
Added State.java to .\/spikes\ repository source files.
Added TabsContainer.java to .\/spikes\ repository source files.
Added CustomLandingStrip.java to .\/spikes\ repository source files.
Added CustomTabActivity.java to .\/spikes\ repository source files.
Added ExampleRainbowLandingStrip.java to .\/spikes\ repository source files.
Added FixedWidthTabActivity.java to .\/spikes\ repository source files.
Added NoFragmentsSimpleTextTabActivity.java to .\/spikes\ repository source files.
Added Data.java to .\/spikes\ repository source files.
Added DemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added SmallDemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerFragment.java to .\/spikes\ repository source files.
Added DemoViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapterState.java to .\/spikes\ repository source files.
Added SimpleTextTabActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AbTestingParamsLoadedCallback.java to .\/spikes\ repository source files.
Added AyBe.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added WeakStartCallback.java to .\/spikes\ repository source files.
Added LeakActivity.java to .\/spikes\ repository source files.
Added NoLeakActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added Bar.java to .\/spikes\ repository source files.
Added Foo.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added FooTest.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added ColorScheme.java to .\/spikes\ repository source files.
Added ColorUtils.java to .\/spikes\ repository source files.
Added DominantColorCalculator.java to .\/spikes\ repository source files.
Added FloatUtils.java to .\/spikes\ repository source files.
Added MedianCutQuantizer.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added PayPalFragment.java to .\/spikes\ repository source files.
Added PayPalHelper.java to .\/spikes\ repository source files.
Added MaxLengthMessageComposer.java to .\/spikes\ repository source files.
Added MessageComposer.java to .\/spikes\ repository source files.
Added TwitterMessageComposer.java to .\/spikes\ repository source files.
Added DisabledMruPersister.java to .\/spikes\ repository source files.
Added MruPersister.java to .\/spikes\ repository source files.
Added SharedPreferencesMruPersister.java to .\/spikes\ repository source files.
Added OnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added PriorityShareDialog.java to .\/spikes\ repository source files.
Added PrioritySharer.java to .\/spikes\ repository source files.
Added ShareTargetsAdapter.java to .\/spikes\ repository source files.
Added SimpleOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added TargetApps.java to .\/spikes\ repository source files.
Added TwitterOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AdvancedActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SimpleActivity.java to .\/spikes\ repository source files.
Added LockingActivity.java to .\/spikes\ repository source files.
Added PostLockingActivity.java to .\/spikes\ repository source files.
Added PreLockingActivity.java to .\/spikes\ repository source files.
Added DummyAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added NovoStaggeredGridView.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SpikeApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SwipeableView.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MyClass.java to .\/spikes\ repository source files.
Added MyClassTest.java to .\/spikes\ repository source files.
Added MyAndroidClassTest.java to .\/spikes\ repository source files.
Added RobolectricGradleTestRunner.java to .\/spikes\ repository source files.
Added Mapper.java to .\/spikes\ repository source files.
Added Query.java to .\/spikes\ repository source files.
Added TypedResolver.java to .\/spikes\ repository source files.
Added CursorList.java to .\/spikes\ repository source files.
Added CursorListIterator.java to .\/spikes\ repository source files.
Added CursorMarshaller.java to .\/spikes\ repository source files.
Added EmptyListIterator.java to .\/spikes\ repository source files.
Added ReflectionCursorMarshaller.java to .\/spikes\ repository source files.
Added RichClass.java to .\/spikes\ repository source files.
Added Setter.java to .\/spikes\ repository source files.
Added Function.java to .\/spikes\ repository source files.
Added TypedElementLoader.java to .\/spikes\ repository source files.
Added TypedLoader.java to .\/spikes\ repository source files.
Added Marshaller.java to .\/spikes\ repository source files.
Added ObjectMapper.java to .\/spikes\ repository source files.
Added TypedActivity.java to .\/spikes\ repository source files.
Added StringUtil.java to .\/spikes\ repository source files.
Added MyObject.java to .\/spikes\ repository source files.
Added MediaPlayerSwitcherActivity.java to .\/spikes\ repository source files.
Added VideoPlayerService.java to .\/spikes\ repository source files.
Added RelativeLayoutWithForeground.java to .\/spikes\ repository source files.
Added DemoActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added RecognitionService.java to .\/spikes\ repository source files.
Added SessionService.java to .\/spikes\ repository source files.
Added SettingsActivity.java to .\/spikes\ repository source files.
Added SmartContextInteractionService.java to .\/spikes\ repository source files.
AccessibilityManager accessibilityManager = (AccessibilityManager) context.getSystemService(Context.ACCESSIBILITY_SERVICE);
enabledServices=getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN)
List<AccessibilityServiceInfo> enabledServices = getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN);
List<AccessibilityServiceInfo> enabledServices = getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN);
Action otherAction = (Action) o;
int result = id;
Actions otherActions = (Actions) o;
action=actions.getAction(i)
Action action = actions.getAction(i);
label=resources.getString(action.getLabel())
String label = resources.getString(action.getLabel());
action=actions.findActionById(actionId)
Action action = actions.findActionById(actionId);
action=actions.getAction(which)
Action action = actions.getAction(which);
CharSequence[] itemLabels = new CharSequence[actions.getCount()];

 Generics pattern public class ActionsAlertDialogCreator was added at revision 9c33cb3589818f91a368bb66d218b9c708b193e2

View view = convertView;
demo=getItem(position)
Demo demo = getItem(position);
Intent intent = new Intent(context, demo.activityClass);
layoutInflater=LayoutInflater.from(parent.getContext())
LayoutInflater layoutInflater = LayoutInflater.from(parent.getContext());
TweetView tweetView = (TweetView) findViewById(R.id.tweet);
actions=createActions(tweet,listener)
final Actions actions = createActions(tweet, listener);
ListView listView = ((ListView) findViewById(R.id.list));
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
final DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close) {

            @Override
            public void onDrawerClosed(View drawerView) {
                super.onDrawerClosed(drawerView);
                // waiting for the drawer to close, then navigating seems to cause issue.
                // why wait for the drawer to close? jankiness.
                if (pendingNavigationClick != null) {
                    startActivity(pendingNavigationClick);
                    pendingNavigationClick = null;
                }
            }

        };
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close);
Intent intent;
b=getIntent().getExtras()
Bundle b = getIntent().getExtras();
mShouldStartPlayback=b.getBoolean("shouldStart")
boolean mShouldStartPlayback = b.getBoolean("shouldStart");
startPosition=b.getInt("startPosition",0)
int startPosition = b.getInt("startPosition", 0);
currentPos=mVideoView.getCurrentPosition()
int currentPos = mVideoView.getCurrentPosition();
String msg;
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, mDisplaySize.y + getActionBar().getHeight());
mm=mSelectedMedia.getMetadata()
MediaMetadata mm = mSelectedMedia.getMetadata();
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, (int) (mDisplaySize.x * ASPECT_RATIO));
WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
width=display.getWidth()
int width = display.getWidth();
height=display.getHeight()
int height = display.getHeight();
int resourceId = 0;
String videoUrl = "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4#sthash.rJ5rPZy8.dpuf";
String title = "Jahre Philharmonie";
String description = "Awesome film you must watch!";
String author = "Blundell";
String thumbUrl = "http://www.ustream.tv/blog/wp-content/uploads/2013/10/simply-go-live.png";
MediaMetadata metadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE);
mediaInfo=new MediaInfo.Builder(videoUrl).setMetadata(metadata).setStreamType(MediaInfo.STREAM_TYPE_BUFFERED).setContentType("video/mp4").build()
MediaInfo mediaInfo = new MediaInfo.Builder(videoUrl)
                        .setMetadata(metadata)
                        .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)
                        .setContentType("video/mp4")
                        .build();
Intent intent = new Intent(MainActivity.this, LocalPlayerActivity.class);
preferences=getPreferences(MODE_PRIVATE)
SharedPreferences preferences = getPreferences(MODE_PRIVATE);
defaultSmsPackage=Telephony.Sms.getDefaultSmsPackage(this)
String defaultSmsPackage = Telephony.Sms.getDefaultSmsPackage(this);
Intent intent = new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
availableAppProvider=EasyCustomTabs.getInstance()
AvailableAppProvider availableAppProvider = EasyCustomTabs.getInstance();
ConnectedClient connectedClient = new ConnectedClient(client);
binder=Binder.newInstance()
Binder binder = Binder.newInstance();
List<Composer> composerList = new ArrayList<>();
customTabsSession=connection.newSession()
CustomTabsSession customTabsSession = connection.newSession();
CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(customTabsSession);
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
context=EasyCustomTabs.getInstance().getContext()
Context context = EasyCustomTabs.getInstance().getContext();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
packagesSupportingCustomTabs=getPackagesSupportingCustomTabs()
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
defaultPackage=getDefaultPackage()
String defaultPackage = getDefaultPackage();
defaultActivityInfo=packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK,0)
ResolveInfo defaultActivityInfo = packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK, 0);
String packageName = defaultActivityInfo.activityInfo.packageName;
resolvedInfoList=packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK,0)
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<String> packagesSupportingCustomTabs = new ArrayList<>();
Intent serviceIntent = new Intent();
bestPackageFinder=BestPackageFinder.newInstance()
BestPackageFinder bestPackageFinder = BestPackageFinder.newInstance();
packageName=bestPackageFinder.findBestPackage()
String packageName = bestPackageFinder.findBestPackage();
resolveInfo=createResolveInfoFor(packageName)
ResolveInfo resolveInfo = createResolveInfoFor(packageName);
ResolveInfo resolveInfo = new ResolveInfo();
List<ResolveInfo> resolveInfoList = new ArrayList<>();
defaultPackageResolveInfo=createResolveInfoFor(packageName)
ResolveInfo defaultPackageResolveInfo = createResolveInfoFor(packageName);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
oldestApiMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage oldestApiMessage = apiMessages.get(apiMessages.size() - 1);
String lastResponseEpochTime = oldestApiMessage.timeStamp;
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
latestMessage=latestMessages.get(latestMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage latestMessage = latestMessages.get(latestMessages.size() - 1);
latestMessageDateTime=convertToLocalDateTime(latestMessage.timeStamp)
LocalDateTime latestMessageDateTime = convertToLocalDateTime(latestMessage.timeStamp);
List<ChannelHistory.Message> messages = new ArrayList<>();
historyFrom=getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1))
LocalDateTime historyFrom = getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1));
historyTo=getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0))
LocalDateTime historyTo = getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0));
String text = apiMessage.text;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
lastMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage lastMessage = apiMessages.get(apiMessages.size() - 1);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
firstMessage=apiMessages.get(0)
ApiPagedChannelHistory.ApiMessage firstMessage = apiMessages.get(0);
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
String slackToken = args[0];
retrofit=new Retrofit.Builder().baseUrl("https://slack.com/api/").addConverterFactory(GsonConverterFactory.create()).build()
Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://slack.com/api/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();
slackWebService=retrofit.create(SlackWebService.class)
SlackWebService slackWebService = retrofit.create(SlackWebService.class);
slackHistoryFetcher=SlackHistoryFetcher.from(slackWebService,slackToken)
SlackHistoryFetcher slackHistoryFetcher = SlackHistoryFetcher.from(slackWebService, slackToken);
start=LocalDateTime.now()
LocalDateTime start = LocalDateTime.now();
end=LocalDateTime.now().minusDays(7)
LocalDateTime end = LocalDateTime.now().minusDays(7);
channelHistory=slackHistoryFetcher.getChannelHistory(start,end)
ChannelHistory channelHistory = slackHistoryFetcher.getChannelHistory(start, end);
HistoryConverter historyConverter = new HistoryConverter();
ApiPagedResponse apiPagedResponse = new ApiPagedResponse(start);
response=fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime())
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
apiPagedChannelHistory=response.body()
ApiPagedChannelHistory apiPagedChannelHistory = response.body();
channelHistory=slackWebService.getChannelHistory(slackToken,channel,lastResponseEpochTime,NUMBER_OF_RESULTS)
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
ApiPagedChannelHistory apiPagedChannelHistory = new ApiPagedChannelHistory();
ApiPagedChannelHistory.ApiMessage apiMessage = new ApiPagedChannelHistory.ApiMessage();
final TextView textView = new TextView(context);
emptyView=findViewById(R.id.empty_view)
View emptyView = findViewById(R.id.empty_view);
final Integer action = values[0];
LoremAdapter loremAdapter = new LoremAdapter();
accounts=accountManager.getAccountsByType(accountType)
Account[] accounts = accountManager.getAccountsByType(accountType);
Bundle result;
Bundle result;
Bundle result = new Bundle();
activity=createLoginIntent(context,accountType,authTokenType,requiredFeatures,options)
Intent activity = createLoginIntent(context, accountType, authTokenType, requiredFeatures, options);
Bundle bundle = new Bundle();
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
accounts=accountManager.getAccountsByType(authTokenType)
Account[] accounts = accountManager.getAccountsByType(authTokenType);
bundle=createResponseBundle(token)
Bundle bundle = createResponseBundle(token);
accountManager=AccountManager.get(this.getApplicationContext())
AccountManager accountManager = AccountManager.get(this.getApplicationContext());
Account account = new Account(token.getUserName(), getAccountName());
Bundle bundle = new Bundle();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
GertHerbAuthenticator authenticator = new GertHerbAuthenticator(this);
fontId=getFontId(context,attrs)
int fontId = getFontId(context, attrs);
fontType=getFontType(fontId)
FontType fontType = getFontType(fontId);
typedArray=context.obtainStyledAttributes(attrs,R.styleable.CustomTextAppearance)
TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CustomTextAppearance);
typeface=createTypeFace(context,fontType)
Typeface typeface = createTypeFace(context, fontType);
info=context.getApplicationInfo()
ApplicationInfo info = context.getApplicationInfo();
name=activity.getTitle().toString()
String name = activity.getTitle().toString();
client=mServer.accept()
Socket client = mServer.accept();
boolean result;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
BufferedReader in = null;
request=in.readLine()
final String request = in.readLine();
String command;
String parameters;
index=request.indexOf(' ')
int index = request.indexOf(' ');
boolean result;
boolean success = true;
BufferedWriter out = null;
index=parameters.indexOf(' ')
int index = parameters.indexOf(' ');
code=parameters.substring(0,index)
final String code = parameters.substring(0, index);
int hashCode = (int) Long.parseLong(code, 16);
window=findWindow(hashCode)
final View window = findWindow(hashCode);
dispatch=ViewDebug.class.getDeclaredMethod("dispatchCommand",View.class,String.class,String.class,OutputStream.class)
final Method dispatch = ViewDebug.class.getDeclaredMethod("dispatchCommand",
                        View.class, String.class, String.class, OutputStream.class);
View window = null;
boolean result = true;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
boolean result = true;
String focusName = null;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
View focusedWindow = null;
BufferedWriter out = null;
boolean needWindowListUpdate = false;
boolean needFocusedWindowUpdate = false;
BetterAccountManager accountManager = new BetterAccountManager(this, getString(R.string.account_type), getString(R.string.token_type), null);
loginView=Views.findById(this,R.id.login_view)
LoginView loginView = Views.findById(this, R.id.login_view);
authorizationApi=new GithubApiFactory().createAuthorizationApi(credentials.username,credentials.password)
GithubApi authorizationApi = new GithubApiFactory().createAuthorizationApi(credentials.username, credentials.password);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
Endpoint endpoint = new Endpoint() {
            @Override
            public String getUrl() {
                return GITHUB_API_URL;
            }

            @Override
            public String getName() {
                return "Live";
            }
        };
interceptor=createAuthorizationRequestInterceptor(username,password)
RequestInterceptor interceptor = createAuthorizationRequestInterceptor(username, password);
restAdapter=createRestAdapter(endpoint,interceptor)
RestAdapter restAdapter = createRestAdapter(endpoint, interceptor);
Dummy dummy = new Dummy();
result=dummy.explodes()
boolean result = dummy.explodes();
String base64EncodedPublicKey = "CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE";
premiumPurchase=inventory.getPurchase(SKU_PREMIUM)
Purchase premiumPurchase = inventory.getPurchase(SKU_PREMIUM);
infiniteGasPurchase=inventory.getPurchase(SKU_INFINITE_GAS)
Purchase infiniteGasPurchase = inventory.getPurchase(SKU_INFINITE_GAS);
gasPurchase=inventory.getPurchase(SKU_GAS)
Purchase gasPurchase = inventory.getPurchase(SKU_GAS);
String payload = "";
String payload = "";
String payload = "";
payload=p.getDeveloperPayload()
String payload = p.getDeveloperPayload();
int index = mTank >= TANK_RES_IDS.length ? TANK_RES_IDS.length - 1 : mTank;
AlertDialog.Builder bld = new AlertDialog.Builder(this);
spe=getPreferences(MODE_PRIVATE).edit()
SharedPreferences.Editor spe = getPreferences(MODE_PRIVATE).edit();
sp=getPreferences(MODE_PRIVATE)
SharedPreferences sp = getPreferences(MODE_PRIVATE);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                                  + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                    | ((source[d + 1 + off] << 24) >>> 16)
                    | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                    | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                                   "-1002:Bad response received/" +
                                   "-1003:Purchase signature verification failed/" +
                                   "-1004:Send intent failed/" +
                                   "-1005:User cancelled/" +
                                   "-1006:Unknown purchase response/" +
                                   "-1007:Missing token/" +
                                   "-1008:Unknown error/" +
                                   "-1009:Subscriptions not available/" +
                                   "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(),
                    itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                        | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                        | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                            | ((source[d + 1 + off] << 24) >>> 16)
                            | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                            | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                "-1002:Bad response received/" +
                "-1003:Purchase signature verification failed/" +
                "-1004:Send intent failed/" +
                "-1005:User cancelled/" +
                "-1006:Unknown purchase response/" +
                "-1007:Missing token/" +
                "-1008:Unknown error/" +
                "-1009:Subscriptions not available/" +
                "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(), itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
responseCode=result.getResponse()
int responseCode = result.getResponse();
sku=purchase.getSku()
String sku = purchase.getSku();
skuDetails=inv.getSkuDetails(sku)
SkuDetails skuDetails = inv.getSkuDetails(sku);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
Button purchaseFiveButton = (Button) rootView.findViewById(R.id.fragment_main_button_purchase_five_coins);
xml=context.obtainStyledAttributes(attrs,R.styleable.LandingStrip)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.LandingStrip);
tabLayoutId=xml.getResourceId(R.styleable.LandingStrip_tabLayoutId,MISSING_TAB_LAYOUT_ID)
int tabLayoutId = xml.getResourceId(R.styleable.LandingStrip_tabLayoutId, MISSING_TAB_LAYOUT_ID);
indicatorColour=xml.getResourceId(R.styleable.LandingStrip_indicatorColor,DEFAULT_INDICATOR_COLOUR)
int indicatorColour = xml.getResourceId(R.styleable.LandingStrip_indicatorColor, DEFAULT_INDICATOR_COLOUR);
indicatorHeight=getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight,DEFAULT_INDICATOR_HEIGHT,xml)
int indicatorHeight = getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight, DEFAULT_INDICATOR_HEIGHT, xml);
tabsPaddingLeft=getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingLeft = getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding, DEFAULT_TABS_PADDING, xml);
tabsPaddingRight=getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingRight = getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding, DEFAULT_TABS_PADDING, xml);
MutableCoordinates drawCurrentTabCoordinates = new MutableCoordinates();
MutableCoordinates drawNextTabCoordinates = new MutableCoordinates();
MutableCoordinates drawMovingIndicatorCoordinates = new MutableCoordinates();
currentTab=tabsContainer.getTabAt(currentPosition)
View currentTab = tabsContainer.getTabAt(currentPosition);
currentTabStart=currentTab.getLeft()
float currentTabStart = currentTab.getLeft();
currentTabEnd=currentTab.getRight()
float currentTabEnd = currentTab.getRight();
nextTab=tabsContainer.getTabAt(currentPosition + 1)
View nextTab = tabsContainer.getTabAt(currentPosition + 1);
nextTabPositionOffset=getFractionFrom(pagePositionOffset)
float nextTabPositionOffset = getFractionFrom(pagePositionOffset);
indicatorStart=getIndicatorPosition(nextTab.getStart(),pagePositionOffset,currentTab.getStart(),nextTabPositionOffset)
float indicatorStart = getIndicatorPosition(nextTab.getStart(), pagePositionOffset, currentTab.getStart(), nextTabPositionOffset);
indicatorEnd=getIndicatorPosition(nextTab.getEnd(),pagePositionOffset,currentTab.getEnd(),nextTabPositionOffset)
float indicatorEnd = getIndicatorPosition(nextTab.getEnd(), pagePositionOffset, currentTab.getEnd(), nextTabPositionOffset);
height=getHeight()
int height = getHeight();
tabCount=pagerAdapter.getCount()
int tabCount = pagerAdapter.getCount();
title=pagerAdapter.getPageTitle(position)
CharSequence title = pagerAdapter.getPageTitle(position);
inflatedTabView=tabsContainer.inflateTab(layoutInflater,attributes.getTabLayoutId())
View inflatedTabView = tabsContainer.inflateTab(layoutInflater, attributes.getTabLayoutId());
int position = (int) view.getTag(TAG_KEY_POSITION);
scrollOffset=getHorizontalScrollOffset(position,positionOffset)
int scrollOffset = getHorizontalScrollOffset(position, positionOffset);
newScrollX=calculateScrollOffset(position,scrollOffset,positionOffset)
float newScrollX = calculateScrollOffset(position, scrollOffset, positionOffset);
tabWidth=tabsContainer.getTabAt(position).getWidth()
int tabWidth = tabsContainer.getTabAt(position).getWidth();
tabForPosition=tabsContainer.getTabAt(position)
View tabForPosition = tabsContainer.getTabAt(position);
float tabStartX = tabForPosition.getLeft() + scrollOffset;
int viewMiddleOffset = getTabParentWidth() / 2;
float tabCenterOffset = (tabForPosition.getRight() - tabForPosition.getLeft()) * 0.5F;
nextTabDelta=getNextTabDelta(position,pagerOffset,tabForPosition)
float nextTabDelta = getNextTabDelta(position, pagerOffset, tabForPosition);
LinearLayout tabsContainerView = new LinearLayout(context);
tab=getTabAt(index)
View tab = getTabAt(index);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
position=indicatorCoordinates.getStart()
float position = indicatorCoordinates.getStart();
lastTabOffset=((ViewGroup)getChildAt(0)).getChildAt(getChildCount() - 1).getWidth()
float lastTabOffset = ((ViewGroup) getChildAt(0)).getChildAt(getChildCount() - 1).getWidth();
frequency=getOneCycle(lastTabOffset)
float frequency = getOneCycle(lastTabOffset);
r=toHex(calculateColour(position,frequency,PHASE_RED,AMPLITUDE,CENTER_FREQUENCY))
String r = toHex(calculateColour(position, frequency, PHASE_RED, AMPLITUDE, CENTER_FREQUENCY));
g=toHex(calculateColour(position,frequency,PHASE_GREEN,AMPLITUDE,CENTER_FREQUENCY))
String g = toHex(calculateColour(position, frequency, PHASE_GREEN, AMPLITUDE, CENTER_FREQUENCY));
b=toHex(calculateColour(position,frequency,PHASE_BLUE,AMPLITUDE,CENTER_FREQUENCY))
String b = toHex(calculateColour(position, frequency, PHASE_BLUE, AMPLITUDE, CENTER_FREQUENCY));
height=getHeight()
int height = getHeight();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPagerFragment viewPagerFragment = new ViewPagerFragment();
Bundle bundle = new Bundle();
TextView view = (TextView) layoutInflater.inflate(R.layout.view_demo, container, false);
currentPosition=viewPagerAdapterState.getCurrentPosition()
int currentPosition = viewPagerAdapterState.getCurrentPosition();
view=getView(container,position)
View view = getView(container, position);
parcelableSparseArray=viewPagerAdapterState.get(position)
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
View view = (View) object;
SparseArray<Parcelable> viewState = new SparseArray<>();
position=entry.getValue()
int position = entry.getValue();
view=entry.getKey()
View view = entry.getKey();
bundle=in.readBundle()
Bundle bundle = in.readBundle();
Map<Integer, SparseArray<Parcelable>> viewStates = new HashMap<>(bundle.keySet().size());
sparseParcelableArray=bundle.getSparseParcelableArray(key)
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
primaryItemPosition=in.readInt()
int primaryItemPosition = in.readInt();
Bundle bundle = new Bundle();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
final TextView abText = (TextView) findViewById(R.id.ab_text);
final AyBe ayBe = new AyBe();
id=item.getItemId()
int id = item.getItemId();
callback=weakCallback.get()
AbTestingParamsLoadedCallback callback = weakCallback.get();
WeakReference<NoLeakActivity> weakNoLeakActivity = new WeakReference<NoLeakActivity>(noLeakActivity);
noLeakActivity=weakNoLeakActivity.get()
NoLeakActivity noLeakActivity = weakNoLeakActivity.get();
RecyclerView recyclerView = (RecyclerView) layoutInflater.inflate(R.layout.view_page, viewGroup, false);
itemView=layoutInflater.inflate(R.layout.view_item,parent,false)
View itemView = layoutInflater.inflate(R.layout.view_item, parent, false);
actual=foo.twice(HALF)
int actual = foo.twice(HALF);
int expected = WHOLE;
final float inverseRatio = 1f - ratio;
float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRatio);
float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRatio);
float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRatio);
hsv=node.getHsv()
float[] hsv = node.getHsv();
width=bitmap.getWidth()
final int width = bitmap.getWidth();
height=bitmap.getHeight()
final int height = bitmap.getHeight();
final int[] rgbPixels = new int[width * height];
final MedianCutQuantizer mcq = new MedianCutQuantizer(rgbPixels, NUM_COLORS);
primaryAccentColor=findPrimaryAccentColor()
final ColorNode primaryAccentColor = findPrimaryAccentColor();
secondaryAccentColor=findSecondaryAccentColor(primaryAccentColor)
final ColorNode secondaryAccentColor = findSecondaryAccentColor(primaryAccentColor);
tertiaryAccentColor=findTertiaryAccentColor(primaryAccentColor,secondaryAccentColor)
final int tertiaryAccentColor = findTertiaryAccentColor(
                primaryAccentColor, secondaryAccentColor);
primaryTextColor=findPrimaryTextColor(primaryAccentColor)
final int primaryTextColor = findPrimaryTextColor(primaryAccentColor);
secondaryTextColor=findSecondaryTextColor(primaryAccentColor)
final int secondaryTextColor = findSecondaryTextColor(primaryAccentColor);
final float primaryHue = primary.getHsv()[0];
final float candidateHue = candidate.getHsv()[0];
copy=Arrays.copyOf(palette,palette.length)
final MedianCutQuantizer.ColorNode[] copy = Arrays.copyOf(palette, palette.length);
maxCount=palette[0].getCount()
final float maxCount = palette[0].getCount();
lhsWeight=calculateWeight(lhs,maxCount)
final float lhsWeight = calculateWeight(lhs, maxCount);
rhsWeight=calculateWeight(rhs,maxCount)
final float rhsWeight = calculateWeight(rhs, maxCount);
float sum = 0;
float sumWeight = 0;
float value = values[i];
float weight = values[i + 1];
ColorHistogram colorHist = new ColorHistogram(pixels);
K=colorHist.getNumberOfColors()
int K = colorHist.getNumberOfColors();
ColorNode[] rCols = null;
rgb=colorHist.getColor(i)
int rgb = colorHist.getColor(i);
cnt=colorHist.getCount(i)
int cnt = colorHist.getCount(i);
ColorBox initialBox = new ColorBox(0, K - 1, 0);
List<ColorBox> colorSet = new ArrayList<ColorBox>();
int k = 1;
boolean done = false;
nextBox=findBoxToSplit(colorSet)
ColorBox nextBox = findBoxToSplit(colorSet);
newBox=nextBox.splitBox()
ColorBox newBox = nextBox.splitBox();
color=findClosestColor(pixels[i])
ColorNode color = findClosestColor(pixels[i]);
idx=findClosestColorIndex(rgb)
int idx = findClosestColorIndex(rgb);
red=Color.red(rgb)
int red = Color.red(rgb);
grn=Color.green(rgb)
int grn = Color.green(rgb);
blu=Color.blue(rgb)
int blu = Color.blue(rgb);
int minIdx = 0;
int minDistance = Integer.MAX_VALUE;
ColorNode color = quantColors[i];
d2=color.distance2(red,grn,blu)
int d2 = color.distance2(red, grn, blu);
ColorBox boxToSplit = null;
int minLevel = Integer.MAX_VALUE;
n=colorBoxes.size()
int n = colorBoxes.size();
ColorNode[] avgColors = new ColorNode[n];
int i = 0;
int dr = this.red - red;
int dg = this.grn - grn;
int db = this.blu - blu;
ColorNode color = imageColors[i];
int r = color.red;
int g = color.grn;
int b = color.blu;
dim=getLongestColorDimension()
ColorDimension dim = getLongestColorDimension();
med=findMedian(dim)
int med = findMedian(dim);
int nextLevel = level + 1;
ColorBox newBox = new ColorBox(med + 1, upper, nextLevel);
int rLength = rmax - rmin;
int gLength = gmax - gmin;
int bLength = bmax - bmin;
int half = count / 2;
int nPixels, median;
int rSum = 0;
int gSum = 0;
int bSum = 0;
int n = 0;
ColorNode ci = imageColors[i];
int cnt = ci.cnt;
double nd = n;
int avgRed = (int) (0.5 + rSum / nd);
int avgGrn = (int) (0.5 + gSum / nd);
int avgBlu = (int) (0.5 + bSum / nd);
s=this.getClass().getSimpleName()
String s = this.getClass().getSimpleName();
int i = 0;
int N = pixelsOrig.length;
int[] pixelsCpy = new int[N];
int k = -1;
int curColor = -1;
int nColors = k + 1;
id=item.getItemId()
int id = item.getItemId();
Intent intent = new Intent();
bitmap=((BitmapDrawable)imageView.getDrawable()).getBitmap()
Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap();
DominantColorCalculator dominantColorCalculator = new DominantColorCalculator(bitmap);
selectedImageUri=data.getData()
Uri selectedImageUri = data.getData();
selectedImagePath=getPath(selectedImageUri)
String selectedImagePath = getPath(selectedImageUri);
String[] projection = {MediaStore.Images.Media.DATA};
cursor=managedQuery(uri,projection,null,null,null)
Cursor cursor = managedQuery(uri, projection, null, null, null);
column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)
int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
LinearLayout rootView = (LinearLayout) inflater.inflate(R.layout.fragment_main, container, false);
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
preapprovalButton=payPal.getCheckoutButton(getActivity(),PayPal.BUTTON_194x37,CheckoutButton.TEXT_PAY)
CheckoutButton preapprovalButton = payPal.getCheckoutButton(getActivity(), PayPal.BUTTON_194x37, CheckoutButton.TEXT_PAY);
preapprovalIntent=payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY)
Intent preapprovalIntent = payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY);
String resultTitle = "";
String resultInfo = "";
String resultExtra = "";
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
PayPalPreapproval preapproval = new PayPalPreapproval();
preapproval=createPreapproval(preapprovalKey)
PayPalPreapproval preapproval = createPreapproval(preapprovalKey);
Bundle bundle = new Bundle();
int availableLength = maxLength;
StringBuilder stringBuilder = new StringBuilder(maxLength);
prefixAndSuffixLength=computeAppendedLengthIncludingSeparatorSpaces(prefix,suffix)
int prefixAndSuffixLength = computeAppendedLengthIncludingSeparatorSpaces(prefix, suffix);
urlLength=computeUrlLengthIncludingSeparatorSpace(url)
int urlLength = computeUrlLengthIncludingSeparatorSpace(url);
trimmedSubject=ellipsizeTextIfExceedsMaxLength(subject,availableLength)
String trimmedSubject = ellipsizeTextIfExceedsMaxLength(subject, availableLength);
int length = 0;
preferences=context.getSharedPreferences(MRU_PREFERENCES,Context.MODE_PRIVATE)
SharedPreferences preferences = context.getSharedPreferences(MRU_PREFERENCES, Context.MODE_PRIVATE);
args=getArguments()
Bundle args = getArguments();
themeResId=getThemeResIdIfProvidedIn(args)
int themeResId = getThemeResIdIfProvidedIn(args);
title=getTitleIfProvidedIn(args)
CharSequence title = getTitleIfProvidedIn(args);
builder=createDialogBuilder(themeResId).setCancelable(true).setView(dialogView)
AlertDialog.Builder builder = createDialogBuilder(themeResId)
                .setCancelable(true)
                .setView(dialogView);
inflater=getActivity().getLayoutInflater()
LayoutInflater inflater = getActivity().getLayoutInflater();
GridView gridView = (GridView) rootView.findViewById(R.id.ps__dialog_grid);
targetApps=extractTargetAppsFrom(args)
TargetApps targetApps = extractTargetAppsFrom(args);
allShareTargets=getAvailableShareTargets(sharingIntent)
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
priorityAppInfos=createPriorityResolveInfoList(targetApps,allShareTargets)
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
otherAppInfos=createOtherAppsResolveInfoList(priorityAppInfos,allShareTargets)
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
resolveInfos=targetApps.extractTargetResolveInfosFrom(allShareTargets)
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
mruResolveInfo=findMruResolveInfoIn(allShareTargets)
ResolveInfo mruResolveInfo = findMruResolveInfoIn(allShareTargets);
List<ResolveInfo> otherAppsInfos = new ArrayList<ResolveInfo>(allAppInfos);
mruPackageName=persister.getLastUsedTarget()
String mruPackageName = persister.getLastUsedTarget();
String packageName = resolveInfo.activityInfo.packageName;
packageManager=getActivity().getPackageManager()
PackageManager packageManager = getActivity().getPackageManager();
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
View buttonStrip = (View) showMoreButton.getParent();
gridView=getGridView()
GridView gridView = getGridView();
intent=wrapIntentWithExplicitTargetComponentForItem(position,sharingIntent)
Intent intent = wrapIntentWithExplicitTargetComponentForItem(position, sharingIntent);
Intent intent = new Intent(sharingIntent);
ActivityInfo activity = adapter.getItem(position).activityInfo;
ComponentName name = new ComponentName(activity.applicationInfo.packageName, activity.name);
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
PriorityShareDialog dialog = new PriorityShareDialog();
Bundle args = new Bundle();
sharingIntent=createSharingIntent()
Intent sharingIntent = createSharingIntent();
fragmentManager=activity.getFragmentManager()
FragmentManager fragmentManager = activity.getFragmentManager();
Intent intent = new Intent(Intent.ACTION_SEND);
dialog=new PriorityShareDialog.Builder().setTitle(title).setTargetApps(targetApps).setSharingIntent(sharingIntent).setOnPrepareSharingIntentListener(listener).setShowMostRecentlyUsed(showMostRecentlyUsed).build()
PriorityShareDialog dialog = new PriorityShareDialog.Builder()
                .setTitle(title)
                .setTargetApps(targetApps)
                .setSharingIntent(sharingIntent)
                .setOnPrepareSharingIntentListener(listener)
                .setShowMostRecentlyUsed(showMostRecentlyUsed)
                .build();
PrioritySharer prioritySharer = new PrioritySharer();
prioritySharer=build()
PrioritySharer prioritySharer = build();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
layoutInflater=LayoutInflater.from(context)
LayoutInflater layoutInflater = LayoutInflater.from(context);
iconSizePx=getIconSizePx(context.getResources())
int iconSizePx = getIconSizePx(context.getResources());
ArrayList<ResolveInfo> sortedList = new ArrayList<ResolveInfo>(resolveInfoList);
int otherAppsCountMaybe = showAllApps ? otherAppInfos.size() : 0;
firstOtherAppsItemPosition=priorityAppInfos.size()
int firstOtherAppsItemPosition = priorityAppInfos.size();
int offsetPosition = position - firstOtherAppsItemPosition;
TextView textView;
textView=initializeItemViewIfNecessary(convertView,R.layout.ps__grid_item_share,parent)
TextView textView = initializeItemViewIfNecessary(convertView, R.layout.ps__grid_item_share, parent);
info=getItem(position)
ResolveInfo info = getItem(position);
icon=info.loadIcon(packageManager)
Drawable icon = info.loadIcon(packageManager);
arraySize=in.readInt()
int arraySize = in.readInt();
String[] packageNames = new String[arraySize];
arraySize=targetPackages.size()
int arraySize = targetPackages.size();
String[] packagesArray = new String[arraySize];
SparseArray<ResolveInfo> matchedResolveInfos = new SparseArray<ResolveInfo>(targetPackages.size());
String packageName = info.activityInfo.packageName;
index=indexOfItemInto(packageName,targetPackages)
int index = indexOfItemInto(packageName, targetPackages);
sparseArraySize=sparseArray.size()
int sparseArraySize = sparseArray.size();
ArrayList<T> list = new ArrayList<T>(sparseArraySize);
int i = 0;
originalSubject=intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT)
CharSequence originalSubject = intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT);
String subject = originalSubject != null ? originalSubject.toString() : null;
composer=createComposer()
MessageComposer composer = createComposer();
component=intent.getComponent()
ComponentName component = intent.getComponent();
targetPackageName=component.getPackageName()
String targetPackageName = component.getPackageName();
adapter=ArrayAdapter.createFromResource(this,R.array.target_apps,android.R.layout.simple_spinner_item)
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
EditText text = (EditText) findViewById(R.id.text);
EditText title = (EditText) findViewById(R.id.title);
EditText mimeType = (EditText) findViewById(R.id.mime_type);
EditText dataUri = (EditText) findViewById(R.id.data_uri);
Switch showMostRecentlyUsed = (Switch) findViewById(R.id.show_most_recently_used);
uriString=dataUri.getText().toString()
String uriString = dataUri.getText().toString();
EditText text = (EditText) findViewById(R.id.text);
TextView textView = (TextView) convertView.findViewById(R.id.positionView);
colorView=convertView.findViewById(R.id.colorView)
View colorView = convertView.findViewById(R.id.colorView);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
offset=headerPlaceholder.getTop()
int offset = headerPlaceholder.getTop();
Integer item = COLORS[position];
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
firstVisiblePosition=grid.getFirstVisiblePosition()
int firstVisiblePosition = grid.getFirstVisiblePosition();
inflate=getViewForPosition(container,position)
View inflate = getViewForPosition(container, position);
id=item.getItemId()
int id = item.getItemId();
MyActivity activity = new MyActivity();
String manifestProperty = "../app/src/main/AndroidManifest.xml";
String resProperty = "../app/src/main/res";
cursor=resolver.query(uri,projection,selection,selectionArgs,null)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, null);
cursor=resolver.query(uri,projection,selection,selectionArgs,sortOrder)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, sortOrder);
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=richClass.setter(name)
Method setter = richClass.setter(name);
T obj;
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=methodsByName.get(name)
Method setter = methodsByName.get(name);
int type = TYPE_INT;
Class<?> t = setter.getParameterTypes()[0];
Class<?> t = setter.getParameterTypes()[0];
cursorType=cursor.getType(index)
final int cursorType = cursor.getType(index);
final Object obj;
s=f.getAnnotation(Mapper.class)
Mapper s = f.getAnnotation(Mapper.class);
mm=m.getAnnotation(Mapper.class)
Mapper mm = m.getAnnotation(Mapper.class);
methodName=StringUtil.asCamelifySetMethod(what)
String methodName = StringUtil.asCamelifySetMethod(what);
cursor=getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,null,null,null,null)
Cursor cursor = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
now=System.currentTimeMillis()
long now = System.currentTimeMillis();
List<Contact2> typedCursor = new CursorList<Contact2>(cursor, Contact2.class);
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[a-zA-Z0-9]+")
Pattern p = Pattern.compile("[a-zA-Z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[A-Z][a-z0-9]+")
Pattern p = Pattern.compile("[A-Z][a-z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
SurfaceView first = (SurfaceView) findViewById(R.id.firstSurface);
SurfaceView second = (SurfaceView) findViewById(R.id.secondSurface);
Intent pickVideo = new Intent(Intent.ACTION_PICK);
xml=context.obtainStyledAttributes(attrs,R.styleable.RelativeLayoutWithForeground)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.RelativeLayoutWithForeground);
int foregroundResId = INVALID_FOREGROUND_ID;
drawable=getDrawable(getResources(),foregroundResId)
Drawable drawable = getDrawable(getResources(), foregroundResId);
Bundle args = new Bundle();
enroll=mHotwordDetector.createEnrollIntent()
Intent enroll = mHotwordDetector.createEnrollIntent();

Diff of 9c33cb3589818f91a368bb66d218b9c708b193e2 and cce4558502c05e9bc1e7b832f73a1de734117c1e:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 2
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 9c33cb3589818f91a368bb66d218b9c708b193e2 to cce4558502c05e9bc1e7b832f73a1de734117c1e


****Parsing for addition at revision cce4558502c05e9bc1e7b832f73a1de734117c1e****

Added AccessibilityServices.java to .\/spikes\ repository source files.
Added Action.java to .\/spikes\ repository source files.
Added Actions.java to .\/spikes\ repository source files.
Added ActionsAccessibilityDelegate.java to .\/spikes\ repository source files.
Added AccessibilityServicesActivity.java to .\/spikes\ repository source files.
Added Demo.java to .\/spikes\ repository source files.
Added DemoAdapter.java to .\/spikes\ repository source files.
Added CustomActionsActivity.java to .\/spikes\ repository source files.
Added TweetView.java to .\/spikes\ repository source files.
Added DemosActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added DrawerActivity.java to .\/spikes\ repository source files.
Added EarthActivity.java to .\/spikes\ repository source files.
Added ProHaxDrawerActivity.java to .\/spikes\ repository source files.
Added SaturnActivity.java to .\/spikes\ repository source files.
Added LocalPlayerActivity.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added CastApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ComposeSmsActivity.java to .\/spikes\ repository source files.
Added HeadlessSmsSendService.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MmsReceiver.java to .\/spikes\ repository source files.
Added SmsReceiver.java to .\/spikes\ repository source files.
Added ExtendedDemoActivity.java to .\/spikes\ repository source files.
Added ExtendedDemoApplication.java to .\/spikes\ repository source files.
Added SimpleDemoActivity.java to .\/spikes\ repository source files.
Added SimpleDemoApplication.java to .\/spikes\ repository source files.
Added Binder.java to .\/spikes\ repository source files.
Added ConnectedClient.java to .\/spikes\ repository source files.
Added Connection.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnection.java to .\/spikes\ repository source files.
Added ServiceConnectionCallback.java to .\/spikes\ repository source files.
Added EasyCustomTabs.java to .\/spikes\ repository source files.
Added ActionButtonComposer.java to .\/spikes\ repository source files.
Added CloseButtonIconComposer.java to .\/spikes\ repository source files.
Added Composer.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilder.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigator.java to .\/spikes\ repository source files.
Added EasyCustomTabsWebNavigator.java to .\/spikes\ repository source files.
Added ExitAnimationsComposer.java to .\/spikes\ repository source files.
Added IntentCustomizer.java to .\/spikes\ repository source files.
Added MenuItemComposer.java to .\/spikes\ repository source files.
Added NavigationFallback.java to .\/spikes\ repository source files.
Added Navigator.java to .\/spikes\ repository source files.
Added ShowTitleComposer.java to .\/spikes\ repository source files.
Added StartAnimationsComposer.java to .\/spikes\ repository source files.
Added ToolbarColorComposer.java to .\/spikes\ repository source files.
Added UrlBarHidingComposer.java to .\/spikes\ repository source files.
Added WebNavigator.java to .\/spikes\ repository source files.
Added AvailableAppProvider.java to .\/spikes\ repository source files.
Added BestPackageFinder.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProvider.java to .\/spikes\ repository source files.
Added BinderTest.java to .\/spikes\ repository source files.
Added ConnectedClientTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnectionTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigatorTest.java to .\/spikes\ repository source files.
Added BestPackageFinderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProviderTest.java to .\/spikes\ repository source files.
Added ApiPagedChannelHistory.java to .\/spikes\ repository source files.
Added ApiPagedResponse.java to .\/spikes\ repository source files.
Added ChannelHistory.java to .\/spikes\ repository source files.
Added HistoryConverter.java to .\/spikes\ repository source files.
Added Runner.java to .\/spikes\ repository source files.
Added SlackHistoryFetcher.java to .\/spikes\ repository source files.
Added SlackWebService.java to .\/spikes\ repository source files.
Added ApiPagedResponseTest.java to .\/spikes\ repository source files.
Added MainActivityTest.java to .\/spikes\ repository source files.
Added LoremAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added BetterAccountManager.java to .\/spikes\ repository source files.
Added BetterAuthenticator.java to .\/spikes\ repository source files.
Added BetterAuthenticatorActivity.java to .\/spikes\ repository source files.
Added GertHerbAuthenticator.java to .\/spikes\ repository source files.
Added GertHerbAuthenticatorService.java to .\/spikes\ repository source files.
Added NoAccountException.java to .\/spikes\ repository source files.
Added ReactiveAuthenticatorActivity.java to .\/spikes\ repository source files.
Added Token.java to .\/spikes\ repository source files.
Added GertHerbActivity.java to .\/spikes\ repository source files.
Added GertHerbApplication.java to .\/spikes\ repository source files.
Added GertHerbAuthenticationActivity.java to .\/spikes\ repository source files.
Added TypefaceFactory.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added ViewServer.java to .\/spikes\ repository source files.
Added ViewServerManager.java to .\/spikes\ repository source files.
Added DeveloperError.java to .\/spikes\ repository source files.
Added HomeActivity.java to .\/spikes\ repository source files.
Added LoginActivity.java to .\/spikes\ repository source files.
Added LoginView.java to .\/spikes\ repository source files.
Added UserCredentials.java to .\/spikes\ repository source files.
Added FontButton.java to .\/spikes\ repository source files.
Added FontEditText.java to .\/spikes\ repository source files.
Added FontTextView.java to .\/spikes\ repository source files.
Added GithubApi.java to .\/spikes\ repository source files.
Added GithubApiFactory.java to .\/spikes\ repository source files.
Added TokenRequest.java to .\/spikes\ repository source files.
Added TokenResponse.java to .\/spikes\ repository source files.
Added Dummy.java to .\/spikes\ repository source files.
Added DummyTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MainFragment.java to .\/spikes\ repository source files.
Added Attributes.java to .\/spikes\ repository source files.
Added Coordinates.java to .\/spikes\ repository source files.
Added IndicatorCoordinatesCalculator.java to .\/spikes\ repository source files.
Added LandingStrip.java to .\/spikes\ repository source files.
Added MutableCoordinates.java to .\/spikes\ repository source files.
Added OnPagerAdapterChangedListener.java to .\/spikes\ repository source files.
Added PagerAdapterObserver.java to .\/spikes\ repository source files.
Added Scrollable.java to .\/spikes\ repository source files.
Added ScrollingPageChangeListener.java to .\/spikes\ repository source files.
Added State.java to .\/spikes\ repository source files.
Added TabsContainer.java to .\/spikes\ repository source files.
Added CustomLandingStrip.java to .\/spikes\ repository source files.
Added CustomTabActivity.java to .\/spikes\ repository source files.
Added ExampleRainbowLandingStrip.java to .\/spikes\ repository source files.
Added FixedWidthTabActivity.java to .\/spikes\ repository source files.
Added NoFragmentsSimpleTextTabActivity.java to .\/spikes\ repository source files.
Added Data.java to .\/spikes\ repository source files.
Added DemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added SmallDemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerFragment.java to .\/spikes\ repository source files.
Added DemoViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapterState.java to .\/spikes\ repository source files.
Added SimpleTextTabActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AbTestingParamsLoadedCallback.java to .\/spikes\ repository source files.
Added AyBe.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added WeakStartCallback.java to .\/spikes\ repository source files.
Added LeakActivity.java to .\/spikes\ repository source files.
Added NoLeakActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added Bar.java to .\/spikes\ repository source files.
Added Foo.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added FooTest.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added ColorScheme.java to .\/spikes\ repository source files.
Added ColorUtils.java to .\/spikes\ repository source files.
Added DominantColorCalculator.java to .\/spikes\ repository source files.
Added FloatUtils.java to .\/spikes\ repository source files.
Added MedianCutQuantizer.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added PayPalFragment.java to .\/spikes\ repository source files.
Added PayPalHelper.java to .\/spikes\ repository source files.
Added MaxLengthMessageComposer.java to .\/spikes\ repository source files.
Added MessageComposer.java to .\/spikes\ repository source files.
Added TwitterMessageComposer.java to .\/spikes\ repository source files.
Added DisabledMruPersister.java to .\/spikes\ repository source files.
Added MruPersister.java to .\/spikes\ repository source files.
Added SharedPreferencesMruPersister.java to .\/spikes\ repository source files.
Added OnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added PriorityShareDialog.java to .\/spikes\ repository source files.
Added PrioritySharer.java to .\/spikes\ repository source files.
Added ShareTargetsAdapter.java to .\/spikes\ repository source files.
Added SimpleOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added TargetApps.java to .\/spikes\ repository source files.
Added TwitterOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AdvancedActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SimpleActivity.java to .\/spikes\ repository source files.
Added LockingActivity.java to .\/spikes\ repository source files.
Added PostLockingActivity.java to .\/spikes\ repository source files.
Added PreLockingActivity.java to .\/spikes\ repository source files.
Added DummyAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added NovoStaggeredGridView.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SpikeApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SwipeableView.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MyClass.java to .\/spikes\ repository source files.
Added MyClassTest.java to .\/spikes\ repository source files.
Added MyAndroidClassTest.java to .\/spikes\ repository source files.
Added RobolectricGradleTestRunner.java to .\/spikes\ repository source files.
Added Mapper.java to .\/spikes\ repository source files.
Added Query.java to .\/spikes\ repository source files.
Added TypedResolver.java to .\/spikes\ repository source files.
Added CursorList.java to .\/spikes\ repository source files.
Added CursorListIterator.java to .\/spikes\ repository source files.
Added CursorMarshaller.java to .\/spikes\ repository source files.
Added EmptyListIterator.java to .\/spikes\ repository source files.
Added ReflectionCursorMarshaller.java to .\/spikes\ repository source files.
Added RichClass.java to .\/spikes\ repository source files.
Added Setter.java to .\/spikes\ repository source files.
Added Function.java to .\/spikes\ repository source files.
Added TypedElementLoader.java to .\/spikes\ repository source files.
Added TypedLoader.java to .\/spikes\ repository source files.
Added Marshaller.java to .\/spikes\ repository source files.
Added ObjectMapper.java to .\/spikes\ repository source files.
Added TypedActivity.java to .\/spikes\ repository source files.
Added StringUtil.java to .\/spikes\ repository source files.
Added MyObject.java to .\/spikes\ repository source files.
Added MediaPlayerSwitcherActivity.java to .\/spikes\ repository source files.
Added VideoPlayerService.java to .\/spikes\ repository source files.
Added RelativeLayoutWithForeground.java to .\/spikes\ repository source files.
Added DemoActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added RecognitionService.java to .\/spikes\ repository source files.
Added SessionService.java to .\/spikes\ repository source files.
Added SettingsActivity.java to .\/spikes\ repository source files.
Added SmartContextInteractionService.java to .\/spikes\ repository source files.
AccessibilityManager accessibilityManager = (AccessibilityManager) context.getSystemService(Context.ACCESSIBILITY_SERVICE);
enabledServices=getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN)
List<AccessibilityServiceInfo> enabledServices = getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN);
List<AccessibilityServiceInfo> enabledServices = getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN);
Action otherAction = (Action) o;
int result = id;
Actions otherActions = (Actions) o;
action=actions.getAction(i)
Action action = actions.getAction(i);
label=resources.getString(action.getLabel())
String label = resources.getString(action.getLabel());
action=actions.findActionById(actionId)
Action action = actions.findActionById(actionId);
View view = convertView;
demo=getItem(position)
Demo demo = getItem(position);
Intent intent = new Intent(context, demo.activityClass);
layoutInflater=LayoutInflater.from(parent.getContext())
LayoutInflater layoutInflater = LayoutInflater.from(parent.getContext());
TweetView tweetView = (TweetView) findViewById(R.id.tweet);
actions=createActions(tweet,listener)
final Actions actions = createActions(tweet, listener);
CharSequence[] itemLabels = new CharSequence[actions.getCount()];
action=actions.getAction(which)
Action action = actions.getAction(which);
ListView listView = ((ListView) findViewById(R.id.list));
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
final DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close) {

            @Override
            public void onDrawerClosed(View drawerView) {
                super.onDrawerClosed(drawerView);
                // waiting for the drawer to close, then navigating seems to cause issue.
                // why wait for the drawer to close? jankiness.
                if (pendingNavigationClick != null) {
                    startActivity(pendingNavigationClick);
                    pendingNavigationClick = null;
                }
            }

        };
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close);
Intent intent;
b=getIntent().getExtras()
Bundle b = getIntent().getExtras();
mShouldStartPlayback=b.getBoolean("shouldStart")
boolean mShouldStartPlayback = b.getBoolean("shouldStart");
startPosition=b.getInt("startPosition",0)
int startPosition = b.getInt("startPosition", 0);
currentPos=mVideoView.getCurrentPosition()
int currentPos = mVideoView.getCurrentPosition();
String msg;
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, mDisplaySize.y + getActionBar().getHeight());
mm=mSelectedMedia.getMetadata()
MediaMetadata mm = mSelectedMedia.getMetadata();
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, (int) (mDisplaySize.x * ASPECT_RATIO));
WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
width=display.getWidth()
int width = display.getWidth();
height=display.getHeight()
int height = display.getHeight();
int resourceId = 0;
String videoUrl = "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4#sthash.rJ5rPZy8.dpuf";
String title = "Jahre Philharmonie";
String description = "Awesome film you must watch!";
String author = "Blundell";
String thumbUrl = "http://www.ustream.tv/blog/wp-content/uploads/2013/10/simply-go-live.png";
MediaMetadata metadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE);
mediaInfo=new MediaInfo.Builder(videoUrl).setMetadata(metadata).setStreamType(MediaInfo.STREAM_TYPE_BUFFERED).setContentType("video/mp4").build()
MediaInfo mediaInfo = new MediaInfo.Builder(videoUrl)
                        .setMetadata(metadata)
                        .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)
                        .setContentType("video/mp4")
                        .build();
Intent intent = new Intent(MainActivity.this, LocalPlayerActivity.class);
preferences=getPreferences(MODE_PRIVATE)
SharedPreferences preferences = getPreferences(MODE_PRIVATE);
defaultSmsPackage=Telephony.Sms.getDefaultSmsPackage(this)
String defaultSmsPackage = Telephony.Sms.getDefaultSmsPackage(this);
Intent intent = new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
availableAppProvider=EasyCustomTabs.getInstance()
AvailableAppProvider availableAppProvider = EasyCustomTabs.getInstance();
ConnectedClient connectedClient = new ConnectedClient(client);
binder=Binder.newInstance()
Binder binder = Binder.newInstance();
List<Composer> composerList = new ArrayList<>();
customTabsSession=connection.newSession()
CustomTabsSession customTabsSession = connection.newSession();
CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(customTabsSession);
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
context=EasyCustomTabs.getInstance().getContext()
Context context = EasyCustomTabs.getInstance().getContext();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
packagesSupportingCustomTabs=getPackagesSupportingCustomTabs()
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
defaultPackage=getDefaultPackage()
String defaultPackage = getDefaultPackage();
defaultActivityInfo=packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK,0)
ResolveInfo defaultActivityInfo = packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK, 0);
String packageName = defaultActivityInfo.activityInfo.packageName;
resolvedInfoList=packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK,0)
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<String> packagesSupportingCustomTabs = new ArrayList<>();
Intent serviceIntent = new Intent();
bestPackageFinder=BestPackageFinder.newInstance()
BestPackageFinder bestPackageFinder = BestPackageFinder.newInstance();
packageName=bestPackageFinder.findBestPackage()
String packageName = bestPackageFinder.findBestPackage();
resolveInfo=createResolveInfoFor(packageName)
ResolveInfo resolveInfo = createResolveInfoFor(packageName);
ResolveInfo resolveInfo = new ResolveInfo();
List<ResolveInfo> resolveInfoList = new ArrayList<>();
defaultPackageResolveInfo=createResolveInfoFor(packageName)
ResolveInfo defaultPackageResolveInfo = createResolveInfoFor(packageName);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
oldestApiMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage oldestApiMessage = apiMessages.get(apiMessages.size() - 1);
String lastResponseEpochTime = oldestApiMessage.timeStamp;
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
latestMessage=latestMessages.get(latestMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage latestMessage = latestMessages.get(latestMessages.size() - 1);
latestMessageDateTime=convertToLocalDateTime(latestMessage.timeStamp)
LocalDateTime latestMessageDateTime = convertToLocalDateTime(latestMessage.timeStamp);
List<ChannelHistory.Message> messages = new ArrayList<>();
historyFrom=getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1))
LocalDateTime historyFrom = getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1));
historyTo=getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0))
LocalDateTime historyTo = getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0));
String text = apiMessage.text;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
lastMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage lastMessage = apiMessages.get(apiMessages.size() - 1);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
firstMessage=apiMessages.get(0)
ApiPagedChannelHistory.ApiMessage firstMessage = apiMessages.get(0);
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
String slackToken = args[0];
retrofit=new Retrofit.Builder().baseUrl("https://slack.com/api/").addConverterFactory(GsonConverterFactory.create()).build()
Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://slack.com/api/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();
slackWebService=retrofit.create(SlackWebService.class)
SlackWebService slackWebService = retrofit.create(SlackWebService.class);
slackHistoryFetcher=SlackHistoryFetcher.from(slackWebService,slackToken)
SlackHistoryFetcher slackHistoryFetcher = SlackHistoryFetcher.from(slackWebService, slackToken);
start=LocalDateTime.now()
LocalDateTime start = LocalDateTime.now();
end=LocalDateTime.now().minusDays(7)
LocalDateTime end = LocalDateTime.now().minusDays(7);
channelHistory=slackHistoryFetcher.getChannelHistory(start,end)
ChannelHistory channelHistory = slackHistoryFetcher.getChannelHistory(start, end);
HistoryConverter historyConverter = new HistoryConverter();
ApiPagedResponse apiPagedResponse = new ApiPagedResponse(start);
response=fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime())
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
apiPagedChannelHistory=response.body()
ApiPagedChannelHistory apiPagedChannelHistory = response.body();
channelHistory=slackWebService.getChannelHistory(slackToken,channel,lastResponseEpochTime,NUMBER_OF_RESULTS)
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
ApiPagedChannelHistory apiPagedChannelHistory = new ApiPagedChannelHistory();
ApiPagedChannelHistory.ApiMessage apiMessage = new ApiPagedChannelHistory.ApiMessage();
final TextView textView = new TextView(context);
emptyView=findViewById(R.id.empty_view)
View emptyView = findViewById(R.id.empty_view);
final Integer action = values[0];
LoremAdapter loremAdapter = new LoremAdapter();
accounts=accountManager.getAccountsByType(accountType)
Account[] accounts = accountManager.getAccountsByType(accountType);
Bundle result;
Bundle result;
Bundle result = new Bundle();
activity=createLoginIntent(context,accountType,authTokenType,requiredFeatures,options)
Intent activity = createLoginIntent(context, accountType, authTokenType, requiredFeatures, options);
Bundle bundle = new Bundle();
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
accounts=accountManager.getAccountsByType(authTokenType)
Account[] accounts = accountManager.getAccountsByType(authTokenType);
bundle=createResponseBundle(token)
Bundle bundle = createResponseBundle(token);
accountManager=AccountManager.get(this.getApplicationContext())
AccountManager accountManager = AccountManager.get(this.getApplicationContext());
Account account = new Account(token.getUserName(), getAccountName());
Bundle bundle = new Bundle();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
GertHerbAuthenticator authenticator = new GertHerbAuthenticator(this);
fontId=getFontId(context,attrs)
int fontId = getFontId(context, attrs);
fontType=getFontType(fontId)
FontType fontType = getFontType(fontId);
typedArray=context.obtainStyledAttributes(attrs,R.styleable.CustomTextAppearance)
TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CustomTextAppearance);
typeface=createTypeFace(context,fontType)
Typeface typeface = createTypeFace(context, fontType);
info=context.getApplicationInfo()
ApplicationInfo info = context.getApplicationInfo();
name=activity.getTitle().toString()
String name = activity.getTitle().toString();
client=mServer.accept()
Socket client = mServer.accept();
boolean result;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
BufferedReader in = null;
request=in.readLine()
final String request = in.readLine();
String command;
String parameters;
index=request.indexOf(' ')
int index = request.indexOf(' ');
boolean result;
boolean success = true;
BufferedWriter out = null;
index=parameters.indexOf(' ')
int index = parameters.indexOf(' ');
code=parameters.substring(0,index)
final String code = parameters.substring(0, index);
int hashCode = (int) Long.parseLong(code, 16);
window=findWindow(hashCode)
final View window = findWindow(hashCode);
dispatch=ViewDebug.class.getDeclaredMethod("dispatchCommand",View.class,String.class,String.class,OutputStream.class)
final Method dispatch = ViewDebug.class.getDeclaredMethod("dispatchCommand",
                        View.class, String.class, String.class, OutputStream.class);
View window = null;
boolean result = true;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
boolean result = true;
String focusName = null;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
View focusedWindow = null;
BufferedWriter out = null;
boolean needWindowListUpdate = false;
boolean needFocusedWindowUpdate = false;
BetterAccountManager accountManager = new BetterAccountManager(this, getString(R.string.account_type), getString(R.string.token_type), null);
loginView=Views.findById(this,R.id.login_view)
LoginView loginView = Views.findById(this, R.id.login_view);
authorizationApi=new GithubApiFactory().createAuthorizationApi(credentials.username,credentials.password)
GithubApi authorizationApi = new GithubApiFactory().createAuthorizationApi(credentials.username, credentials.password);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
Endpoint endpoint = new Endpoint() {
            @Override
            public String getUrl() {
                return GITHUB_API_URL;
            }

            @Override
            public String getName() {
                return "Live";
            }
        };
interceptor=createAuthorizationRequestInterceptor(username,password)
RequestInterceptor interceptor = createAuthorizationRequestInterceptor(username, password);
restAdapter=createRestAdapter(endpoint,interceptor)
RestAdapter restAdapter = createRestAdapter(endpoint, interceptor);
Dummy dummy = new Dummy();
result=dummy.explodes()
boolean result = dummy.explodes();
String base64EncodedPublicKey = "CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE";
premiumPurchase=inventory.getPurchase(SKU_PREMIUM)
Purchase premiumPurchase = inventory.getPurchase(SKU_PREMIUM);
infiniteGasPurchase=inventory.getPurchase(SKU_INFINITE_GAS)
Purchase infiniteGasPurchase = inventory.getPurchase(SKU_INFINITE_GAS);
gasPurchase=inventory.getPurchase(SKU_GAS)
Purchase gasPurchase = inventory.getPurchase(SKU_GAS);
String payload = "";
String payload = "";
String payload = "";
payload=p.getDeveloperPayload()
String payload = p.getDeveloperPayload();
int index = mTank >= TANK_RES_IDS.length ? TANK_RES_IDS.length - 1 : mTank;
AlertDialog.Builder bld = new AlertDialog.Builder(this);
spe=getPreferences(MODE_PRIVATE).edit()
SharedPreferences.Editor spe = getPreferences(MODE_PRIVATE).edit();
sp=getPreferences(MODE_PRIVATE)
SharedPreferences sp = getPreferences(MODE_PRIVATE);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                                  + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                    | ((source[d + 1 + off] << 24) >>> 16)
                    | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                    | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                                   "-1002:Bad response received/" +
                                   "-1003:Purchase signature verification failed/" +
                                   "-1004:Send intent failed/" +
                                   "-1005:User cancelled/" +
                                   "-1006:Unknown purchase response/" +
                                   "-1007:Missing token/" +
                                   "-1008:Unknown error/" +
                                   "-1009:Subscriptions not available/" +
                                   "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(),
                    itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                        | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                        | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                            | ((source[d + 1 + off] << 24) >>> 16)
                            | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                            | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                "-1002:Bad response received/" +
                "-1003:Purchase signature verification failed/" +
                "-1004:Send intent failed/" +
                "-1005:User cancelled/" +
                "-1006:Unknown purchase response/" +
                "-1007:Missing token/" +
                "-1008:Unknown error/" +
                "-1009:Subscriptions not available/" +
                "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(), itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
responseCode=result.getResponse()
int responseCode = result.getResponse();
sku=purchase.getSku()
String sku = purchase.getSku();
skuDetails=inv.getSkuDetails(sku)
SkuDetails skuDetails = inv.getSkuDetails(sku);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
Button purchaseFiveButton = (Button) rootView.findViewById(R.id.fragment_main_button_purchase_five_coins);
xml=context.obtainStyledAttributes(attrs,R.styleable.LandingStrip)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.LandingStrip);
tabLayoutId=xml.getResourceId(R.styleable.LandingStrip_tabLayoutId,MISSING_TAB_LAYOUT_ID)
int tabLayoutId = xml.getResourceId(R.styleable.LandingStrip_tabLayoutId, MISSING_TAB_LAYOUT_ID);
indicatorColour=xml.getResourceId(R.styleable.LandingStrip_indicatorColor,DEFAULT_INDICATOR_COLOUR)
int indicatorColour = xml.getResourceId(R.styleable.LandingStrip_indicatorColor, DEFAULT_INDICATOR_COLOUR);
indicatorHeight=getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight,DEFAULT_INDICATOR_HEIGHT,xml)
int indicatorHeight = getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight, DEFAULT_INDICATOR_HEIGHT, xml);
tabsPaddingLeft=getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingLeft = getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding, DEFAULT_TABS_PADDING, xml);
tabsPaddingRight=getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingRight = getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding, DEFAULT_TABS_PADDING, xml);
MutableCoordinates drawCurrentTabCoordinates = new MutableCoordinates();
MutableCoordinates drawNextTabCoordinates = new MutableCoordinates();
MutableCoordinates drawMovingIndicatorCoordinates = new MutableCoordinates();
currentTab=tabsContainer.getTabAt(currentPosition)
View currentTab = tabsContainer.getTabAt(currentPosition);
currentTabStart=currentTab.getLeft()
float currentTabStart = currentTab.getLeft();
currentTabEnd=currentTab.getRight()
float currentTabEnd = currentTab.getRight();
nextTab=tabsContainer.getTabAt(currentPosition + 1)
View nextTab = tabsContainer.getTabAt(currentPosition + 1);
nextTabPositionOffset=getFractionFrom(pagePositionOffset)
float nextTabPositionOffset = getFractionFrom(pagePositionOffset);
indicatorStart=getIndicatorPosition(nextTab.getStart(),pagePositionOffset,currentTab.getStart(),nextTabPositionOffset)
float indicatorStart = getIndicatorPosition(nextTab.getStart(), pagePositionOffset, currentTab.getStart(), nextTabPositionOffset);
indicatorEnd=getIndicatorPosition(nextTab.getEnd(),pagePositionOffset,currentTab.getEnd(),nextTabPositionOffset)
float indicatorEnd = getIndicatorPosition(nextTab.getEnd(), pagePositionOffset, currentTab.getEnd(), nextTabPositionOffset);
height=getHeight()
int height = getHeight();
tabCount=pagerAdapter.getCount()
int tabCount = pagerAdapter.getCount();
title=pagerAdapter.getPageTitle(position)
CharSequence title = pagerAdapter.getPageTitle(position);
inflatedTabView=tabsContainer.inflateTab(layoutInflater,attributes.getTabLayoutId())
View inflatedTabView = tabsContainer.inflateTab(layoutInflater, attributes.getTabLayoutId());
int position = (int) view.getTag(TAG_KEY_POSITION);
scrollOffset=getHorizontalScrollOffset(position,positionOffset)
int scrollOffset = getHorizontalScrollOffset(position, positionOffset);
newScrollX=calculateScrollOffset(position,scrollOffset,positionOffset)
float newScrollX = calculateScrollOffset(position, scrollOffset, positionOffset);
tabWidth=tabsContainer.getTabAt(position).getWidth()
int tabWidth = tabsContainer.getTabAt(position).getWidth();
tabForPosition=tabsContainer.getTabAt(position)
View tabForPosition = tabsContainer.getTabAt(position);
float tabStartX = tabForPosition.getLeft() + scrollOffset;
int viewMiddleOffset = getTabParentWidth() / 2;
float tabCenterOffset = (tabForPosition.getRight() - tabForPosition.getLeft()) * 0.5F;
nextTabDelta=getNextTabDelta(position,pagerOffset,tabForPosition)
float nextTabDelta = getNextTabDelta(position, pagerOffset, tabForPosition);
LinearLayout tabsContainerView = new LinearLayout(context);
tab=getTabAt(index)
View tab = getTabAt(index);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
position=indicatorCoordinates.getStart()
float position = indicatorCoordinates.getStart();
lastTabOffset=((ViewGroup)getChildAt(0)).getChildAt(getChildCount() - 1).getWidth()
float lastTabOffset = ((ViewGroup) getChildAt(0)).getChildAt(getChildCount() - 1).getWidth();
frequency=getOneCycle(lastTabOffset)
float frequency = getOneCycle(lastTabOffset);
r=toHex(calculateColour(position,frequency,PHASE_RED,AMPLITUDE,CENTER_FREQUENCY))
String r = toHex(calculateColour(position, frequency, PHASE_RED, AMPLITUDE, CENTER_FREQUENCY));
g=toHex(calculateColour(position,frequency,PHASE_GREEN,AMPLITUDE,CENTER_FREQUENCY))
String g = toHex(calculateColour(position, frequency, PHASE_GREEN, AMPLITUDE, CENTER_FREQUENCY));
b=toHex(calculateColour(position,frequency,PHASE_BLUE,AMPLITUDE,CENTER_FREQUENCY))
String b = toHex(calculateColour(position, frequency, PHASE_BLUE, AMPLITUDE, CENTER_FREQUENCY));
height=getHeight()
int height = getHeight();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPagerFragment viewPagerFragment = new ViewPagerFragment();
Bundle bundle = new Bundle();
TextView view = (TextView) layoutInflater.inflate(R.layout.view_demo, container, false);
currentPosition=viewPagerAdapterState.getCurrentPosition()
int currentPosition = viewPagerAdapterState.getCurrentPosition();
view=getView(container,position)
View view = getView(container, position);
parcelableSparseArray=viewPagerAdapterState.get(position)
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
View view = (View) object;
SparseArray<Parcelable> viewState = new SparseArray<>();
position=entry.getValue()
int position = entry.getValue();
view=entry.getKey()
View view = entry.getKey();
bundle=in.readBundle()
Bundle bundle = in.readBundle();
Map<Integer, SparseArray<Parcelable>> viewStates = new HashMap<>(bundle.keySet().size());
sparseParcelableArray=bundle.getSparseParcelableArray(key)
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
primaryItemPosition=in.readInt()
int primaryItemPosition = in.readInt();
Bundle bundle = new Bundle();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
final TextView abText = (TextView) findViewById(R.id.ab_text);
final AyBe ayBe = new AyBe();
id=item.getItemId()
int id = item.getItemId();
callback=weakCallback.get()
AbTestingParamsLoadedCallback callback = weakCallback.get();
WeakReference<NoLeakActivity> weakNoLeakActivity = new WeakReference<NoLeakActivity>(noLeakActivity);
noLeakActivity=weakNoLeakActivity.get()
NoLeakActivity noLeakActivity = weakNoLeakActivity.get();
RecyclerView recyclerView = (RecyclerView) layoutInflater.inflate(R.layout.view_page, viewGroup, false);
itemView=layoutInflater.inflate(R.layout.view_item,parent,false)
View itemView = layoutInflater.inflate(R.layout.view_item, parent, false);
actual=foo.twice(HALF)
int actual = foo.twice(HALF);
int expected = WHOLE;
final float inverseRatio = 1f - ratio;
float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRatio);
float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRatio);
float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRatio);
hsv=node.getHsv()
float[] hsv = node.getHsv();
width=bitmap.getWidth()
final int width = bitmap.getWidth();
height=bitmap.getHeight()
final int height = bitmap.getHeight();
final int[] rgbPixels = new int[width * height];
final MedianCutQuantizer mcq = new MedianCutQuantizer(rgbPixels, NUM_COLORS);
primaryAccentColor=findPrimaryAccentColor()
final ColorNode primaryAccentColor = findPrimaryAccentColor();
secondaryAccentColor=findSecondaryAccentColor(primaryAccentColor)
final ColorNode secondaryAccentColor = findSecondaryAccentColor(primaryAccentColor);
tertiaryAccentColor=findTertiaryAccentColor(primaryAccentColor,secondaryAccentColor)
final int tertiaryAccentColor = findTertiaryAccentColor(
                primaryAccentColor, secondaryAccentColor);
primaryTextColor=findPrimaryTextColor(primaryAccentColor)
final int primaryTextColor = findPrimaryTextColor(primaryAccentColor);
secondaryTextColor=findSecondaryTextColor(primaryAccentColor)
final int secondaryTextColor = findSecondaryTextColor(primaryAccentColor);
final float primaryHue = primary.getHsv()[0];
final float candidateHue = candidate.getHsv()[0];
copy=Arrays.copyOf(palette,palette.length)
final MedianCutQuantizer.ColorNode[] copy = Arrays.copyOf(palette, palette.length);
maxCount=palette[0].getCount()
final float maxCount = palette[0].getCount();
lhsWeight=calculateWeight(lhs,maxCount)
final float lhsWeight = calculateWeight(lhs, maxCount);
rhsWeight=calculateWeight(rhs,maxCount)
final float rhsWeight = calculateWeight(rhs, maxCount);
float sum = 0;
float sumWeight = 0;
float value = values[i];
float weight = values[i + 1];
ColorHistogram colorHist = new ColorHistogram(pixels);
K=colorHist.getNumberOfColors()
int K = colorHist.getNumberOfColors();
ColorNode[] rCols = null;
rgb=colorHist.getColor(i)
int rgb = colorHist.getColor(i);
cnt=colorHist.getCount(i)
int cnt = colorHist.getCount(i);
ColorBox initialBox = new ColorBox(0, K - 1, 0);
List<ColorBox> colorSet = new ArrayList<ColorBox>();
int k = 1;
boolean done = false;
nextBox=findBoxToSplit(colorSet)
ColorBox nextBox = findBoxToSplit(colorSet);
newBox=nextBox.splitBox()
ColorBox newBox = nextBox.splitBox();
color=findClosestColor(pixels[i])
ColorNode color = findClosestColor(pixels[i]);
idx=findClosestColorIndex(rgb)
int idx = findClosestColorIndex(rgb);
red=Color.red(rgb)
int red = Color.red(rgb);
grn=Color.green(rgb)
int grn = Color.green(rgb);
blu=Color.blue(rgb)
int blu = Color.blue(rgb);
int minIdx = 0;
int minDistance = Integer.MAX_VALUE;
ColorNode color = quantColors[i];
d2=color.distance2(red,grn,blu)
int d2 = color.distance2(red, grn, blu);
ColorBox boxToSplit = null;
int minLevel = Integer.MAX_VALUE;
n=colorBoxes.size()
int n = colorBoxes.size();
ColorNode[] avgColors = new ColorNode[n];
int i = 0;
int dr = this.red - red;
int dg = this.grn - grn;
int db = this.blu - blu;
ColorNode color = imageColors[i];
int r = color.red;
int g = color.grn;
int b = color.blu;
dim=getLongestColorDimension()
ColorDimension dim = getLongestColorDimension();
med=findMedian(dim)
int med = findMedian(dim);
int nextLevel = level + 1;
ColorBox newBox = new ColorBox(med + 1, upper, nextLevel);
int rLength = rmax - rmin;
int gLength = gmax - gmin;
int bLength = bmax - bmin;
int half = count / 2;
int nPixels, median;
int rSum = 0;
int gSum = 0;
int bSum = 0;
int n = 0;
ColorNode ci = imageColors[i];
int cnt = ci.cnt;
double nd = n;
int avgRed = (int) (0.5 + rSum / nd);
int avgGrn = (int) (0.5 + gSum / nd);
int avgBlu = (int) (0.5 + bSum / nd);
s=this.getClass().getSimpleName()
String s = this.getClass().getSimpleName();
int i = 0;
int N = pixelsOrig.length;
int[] pixelsCpy = new int[N];
int k = -1;
int curColor = -1;
int nColors = k + 1;
id=item.getItemId()
int id = item.getItemId();
Intent intent = new Intent();
bitmap=((BitmapDrawable)imageView.getDrawable()).getBitmap()
Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap();
DominantColorCalculator dominantColorCalculator = new DominantColorCalculator(bitmap);
selectedImageUri=data.getData()
Uri selectedImageUri = data.getData();
selectedImagePath=getPath(selectedImageUri)
String selectedImagePath = getPath(selectedImageUri);
String[] projection = {MediaStore.Images.Media.DATA};
cursor=managedQuery(uri,projection,null,null,null)
Cursor cursor = managedQuery(uri, projection, null, null, null);
column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)
int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
LinearLayout rootView = (LinearLayout) inflater.inflate(R.layout.fragment_main, container, false);
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
preapprovalButton=payPal.getCheckoutButton(getActivity(),PayPal.BUTTON_194x37,CheckoutButton.TEXT_PAY)
CheckoutButton preapprovalButton = payPal.getCheckoutButton(getActivity(), PayPal.BUTTON_194x37, CheckoutButton.TEXT_PAY);
preapprovalIntent=payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY)
Intent preapprovalIntent = payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY);
String resultTitle = "";
String resultInfo = "";
String resultExtra = "";
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
PayPalPreapproval preapproval = new PayPalPreapproval();
preapproval=createPreapproval(preapprovalKey)
PayPalPreapproval preapproval = createPreapproval(preapprovalKey);
Bundle bundle = new Bundle();
int availableLength = maxLength;
StringBuilder stringBuilder = new StringBuilder(maxLength);
prefixAndSuffixLength=computeAppendedLengthIncludingSeparatorSpaces(prefix,suffix)
int prefixAndSuffixLength = computeAppendedLengthIncludingSeparatorSpaces(prefix, suffix);
urlLength=computeUrlLengthIncludingSeparatorSpace(url)
int urlLength = computeUrlLengthIncludingSeparatorSpace(url);
trimmedSubject=ellipsizeTextIfExceedsMaxLength(subject,availableLength)
String trimmedSubject = ellipsizeTextIfExceedsMaxLength(subject, availableLength);
int length = 0;
preferences=context.getSharedPreferences(MRU_PREFERENCES,Context.MODE_PRIVATE)
SharedPreferences preferences = context.getSharedPreferences(MRU_PREFERENCES, Context.MODE_PRIVATE);
args=getArguments()
Bundle args = getArguments();
themeResId=getThemeResIdIfProvidedIn(args)
int themeResId = getThemeResIdIfProvidedIn(args);
title=getTitleIfProvidedIn(args)
CharSequence title = getTitleIfProvidedIn(args);
builder=createDialogBuilder(themeResId).setCancelable(true).setView(dialogView)
AlertDialog.Builder builder = createDialogBuilder(themeResId)
                .setCancelable(true)
                .setView(dialogView);
inflater=getActivity().getLayoutInflater()
LayoutInflater inflater = getActivity().getLayoutInflater();
GridView gridView = (GridView) rootView.findViewById(R.id.ps__dialog_grid);
targetApps=extractTargetAppsFrom(args)
TargetApps targetApps = extractTargetAppsFrom(args);
allShareTargets=getAvailableShareTargets(sharingIntent)
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
priorityAppInfos=createPriorityResolveInfoList(targetApps,allShareTargets)
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
otherAppInfos=createOtherAppsResolveInfoList(priorityAppInfos,allShareTargets)
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
resolveInfos=targetApps.extractTargetResolveInfosFrom(allShareTargets)
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
mruResolveInfo=findMruResolveInfoIn(allShareTargets)
ResolveInfo mruResolveInfo = findMruResolveInfoIn(allShareTargets);
List<ResolveInfo> otherAppsInfos = new ArrayList<ResolveInfo>(allAppInfos);
mruPackageName=persister.getLastUsedTarget()
String mruPackageName = persister.getLastUsedTarget();
String packageName = resolveInfo.activityInfo.packageName;
packageManager=getActivity().getPackageManager()
PackageManager packageManager = getActivity().getPackageManager();
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
View buttonStrip = (View) showMoreButton.getParent();
gridView=getGridView()
GridView gridView = getGridView();
intent=wrapIntentWithExplicitTargetComponentForItem(position,sharingIntent)
Intent intent = wrapIntentWithExplicitTargetComponentForItem(position, sharingIntent);
Intent intent = new Intent(sharingIntent);
ActivityInfo activity = adapter.getItem(position).activityInfo;
ComponentName name = new ComponentName(activity.applicationInfo.packageName, activity.name);
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
PriorityShareDialog dialog = new PriorityShareDialog();
Bundle args = new Bundle();
sharingIntent=createSharingIntent()
Intent sharingIntent = createSharingIntent();
fragmentManager=activity.getFragmentManager()
FragmentManager fragmentManager = activity.getFragmentManager();
Intent intent = new Intent(Intent.ACTION_SEND);
dialog=new PriorityShareDialog.Builder().setTitle(title).setTargetApps(targetApps).setSharingIntent(sharingIntent).setOnPrepareSharingIntentListener(listener).setShowMostRecentlyUsed(showMostRecentlyUsed).build()
PriorityShareDialog dialog = new PriorityShareDialog.Builder()
                .setTitle(title)
                .setTargetApps(targetApps)
                .setSharingIntent(sharingIntent)
                .setOnPrepareSharingIntentListener(listener)
                .setShowMostRecentlyUsed(showMostRecentlyUsed)
                .build();
PrioritySharer prioritySharer = new PrioritySharer();
prioritySharer=build()
PrioritySharer prioritySharer = build();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
layoutInflater=LayoutInflater.from(context)
LayoutInflater layoutInflater = LayoutInflater.from(context);
iconSizePx=getIconSizePx(context.getResources())
int iconSizePx = getIconSizePx(context.getResources());
ArrayList<ResolveInfo> sortedList = new ArrayList<ResolveInfo>(resolveInfoList);
int otherAppsCountMaybe = showAllApps ? otherAppInfos.size() : 0;
firstOtherAppsItemPosition=priorityAppInfos.size()
int firstOtherAppsItemPosition = priorityAppInfos.size();
int offsetPosition = position - firstOtherAppsItemPosition;
TextView textView;
textView=initializeItemViewIfNecessary(convertView,R.layout.ps__grid_item_share,parent)
TextView textView = initializeItemViewIfNecessary(convertView, R.layout.ps__grid_item_share, parent);
info=getItem(position)
ResolveInfo info = getItem(position);
icon=info.loadIcon(packageManager)
Drawable icon = info.loadIcon(packageManager);
arraySize=in.readInt()
int arraySize = in.readInt();
String[] packageNames = new String[arraySize];
arraySize=targetPackages.size()
int arraySize = targetPackages.size();
String[] packagesArray = new String[arraySize];
SparseArray<ResolveInfo> matchedResolveInfos = new SparseArray<ResolveInfo>(targetPackages.size());
String packageName = info.activityInfo.packageName;
index=indexOfItemInto(packageName,targetPackages)
int index = indexOfItemInto(packageName, targetPackages);
sparseArraySize=sparseArray.size()
int sparseArraySize = sparseArray.size();
ArrayList<T> list = new ArrayList<T>(sparseArraySize);
int i = 0;
originalSubject=intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT)
CharSequence originalSubject = intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT);
String subject = originalSubject != null ? originalSubject.toString() : null;
composer=createComposer()
MessageComposer composer = createComposer();
component=intent.getComponent()
ComponentName component = intent.getComponent();
targetPackageName=component.getPackageName()
String targetPackageName = component.getPackageName();
adapter=ArrayAdapter.createFromResource(this,R.array.target_apps,android.R.layout.simple_spinner_item)
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
EditText text = (EditText) findViewById(R.id.text);
EditText title = (EditText) findViewById(R.id.title);
EditText mimeType = (EditText) findViewById(R.id.mime_type);
EditText dataUri = (EditText) findViewById(R.id.data_uri);
Switch showMostRecentlyUsed = (Switch) findViewById(R.id.show_most_recently_used);
uriString=dataUri.getText().toString()
String uriString = dataUri.getText().toString();
EditText text = (EditText) findViewById(R.id.text);
TextView textView = (TextView) convertView.findViewById(R.id.positionView);
colorView=convertView.findViewById(R.id.colorView)
View colorView = convertView.findViewById(R.id.colorView);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
offset=headerPlaceholder.getTop()
int offset = headerPlaceholder.getTop();
Integer item = COLORS[position];
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
firstVisiblePosition=grid.getFirstVisiblePosition()
int firstVisiblePosition = grid.getFirstVisiblePosition();
inflate=getViewForPosition(container,position)
View inflate = getViewForPosition(container, position);
id=item.getItemId()
int id = item.getItemId();
MyActivity activity = new MyActivity();
String manifestProperty = "../app/src/main/AndroidManifest.xml";
String resProperty = "../app/src/main/res";
cursor=resolver.query(uri,projection,selection,selectionArgs,null)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, null);
cursor=resolver.query(uri,projection,selection,selectionArgs,sortOrder)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, sortOrder);
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=richClass.setter(name)
Method setter = richClass.setter(name);
T obj;
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=methodsByName.get(name)
Method setter = methodsByName.get(name);
int type = TYPE_INT;
Class<?> t = setter.getParameterTypes()[0];
Class<?> t = setter.getParameterTypes()[0];
cursorType=cursor.getType(index)
final int cursorType = cursor.getType(index);
final Object obj;
s=f.getAnnotation(Mapper.class)
Mapper s = f.getAnnotation(Mapper.class);
mm=m.getAnnotation(Mapper.class)
Mapper mm = m.getAnnotation(Mapper.class);
methodName=StringUtil.asCamelifySetMethod(what)
String methodName = StringUtil.asCamelifySetMethod(what);
cursor=getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,null,null,null,null)
Cursor cursor = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
now=System.currentTimeMillis()
long now = System.currentTimeMillis();
List<Contact2> typedCursor = new CursorList<Contact2>(cursor, Contact2.class);
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[a-zA-Z0-9]+")
Pattern p = Pattern.compile("[a-zA-Z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[A-Z][a-z0-9]+")
Pattern p = Pattern.compile("[A-Z][a-z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
SurfaceView first = (SurfaceView) findViewById(R.id.firstSurface);
SurfaceView second = (SurfaceView) findViewById(R.id.secondSurface);
Intent pickVideo = new Intent(Intent.ACTION_PICK);
xml=context.obtainStyledAttributes(attrs,R.styleable.RelativeLayoutWithForeground)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.RelativeLayoutWithForeground);
int foregroundResId = INVALID_FOREGROUND_ID;
drawable=getDrawable(getResources(),foregroundResId)
Drawable drawable = getDrawable(getResources(), foregroundResId);
Bundle args = new Bundle();
enroll=mHotwordDetector.createEnrollIntent()
Intent enroll = mHotwordDetector.createEnrollIntent();

Diff of cce4558502c05e9bc1e7b832f73a1de734117c1e and cb93ffb8454cf99359dff578ff73dfad63321d89:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 2
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision cce4558502c05e9bc1e7b832f73a1de734117c1e to cb93ffb8454cf99359dff578ff73dfad63321d89


****Parsing for addition at revision cb93ffb8454cf99359dff578ff73dfad63321d89****

Added AccessibilityServices.java to .\/spikes\ repository source files.
Added Action.java to .\/spikes\ repository source files.
Added Actions.java to .\/spikes\ repository source files.
Added ActionsAccessibilityDelegate.java to .\/spikes\ repository source files.
Added AccessibilityServicesActivity.java to .\/spikes\ repository source files.
Added Demo.java to .\/spikes\ repository source files.
Added DemoAdapter.java to .\/spikes\ repository source files.
Added CustomActionsActivity.java to .\/spikes\ repository source files.
Added TweetView.java to .\/spikes\ repository source files.
Added DemosActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added DrawerActivity.java to .\/spikes\ repository source files.
Added EarthActivity.java to .\/spikes\ repository source files.
Added ProHaxDrawerActivity.java to .\/spikes\ repository source files.
Added SaturnActivity.java to .\/spikes\ repository source files.
Added LocalPlayerActivity.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added CastApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ComposeSmsActivity.java to .\/spikes\ repository source files.
Added HeadlessSmsSendService.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MmsReceiver.java to .\/spikes\ repository source files.
Added SmsReceiver.java to .\/spikes\ repository source files.
Added ExtendedDemoActivity.java to .\/spikes\ repository source files.
Added ExtendedDemoApplication.java to .\/spikes\ repository source files.
Added SimpleDemoActivity.java to .\/spikes\ repository source files.
Added SimpleDemoApplication.java to .\/spikes\ repository source files.
Added Binder.java to .\/spikes\ repository source files.
Added ConnectedClient.java to .\/spikes\ repository source files.
Added Connection.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnection.java to .\/spikes\ repository source files.
Added ServiceConnectionCallback.java to .\/spikes\ repository source files.
Added EasyCustomTabs.java to .\/spikes\ repository source files.
Added ActionButtonComposer.java to .\/spikes\ repository source files.
Added CloseButtonIconComposer.java to .\/spikes\ repository source files.
Added Composer.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilder.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigator.java to .\/spikes\ repository source files.
Added EasyCustomTabsWebNavigator.java to .\/spikes\ repository source files.
Added ExitAnimationsComposer.java to .\/spikes\ repository source files.
Added IntentCustomizer.java to .\/spikes\ repository source files.
Added MenuItemComposer.java to .\/spikes\ repository source files.
Added NavigationFallback.java to .\/spikes\ repository source files.
Added Navigator.java to .\/spikes\ repository source files.
Added ShowTitleComposer.java to .\/spikes\ repository source files.
Added StartAnimationsComposer.java to .\/spikes\ repository source files.
Added ToolbarColorComposer.java to .\/spikes\ repository source files.
Added UrlBarHidingComposer.java to .\/spikes\ repository source files.
Added WebNavigator.java to .\/spikes\ repository source files.
Added AvailableAppProvider.java to .\/spikes\ repository source files.
Added BestPackageFinder.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProvider.java to .\/spikes\ repository source files.
Added BinderTest.java to .\/spikes\ repository source files.
Added ConnectedClientTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnectionTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigatorTest.java to .\/spikes\ repository source files.
Added BestPackageFinderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProviderTest.java to .\/spikes\ repository source files.
Added ApiPagedChannelHistory.java to .\/spikes\ repository source files.
Added ApiPagedResponse.java to .\/spikes\ repository source files.
Added ChannelHistory.java to .\/spikes\ repository source files.
Added HistoryConverter.java to .\/spikes\ repository source files.
Added Runner.java to .\/spikes\ repository source files.
Added SlackHistoryFetcher.java to .\/spikes\ repository source files.
Added SlackWebService.java to .\/spikes\ repository source files.
Added ApiPagedResponseTest.java to .\/spikes\ repository source files.
Added MainActivityTest.java to .\/spikes\ repository source files.
Added LoremAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added BetterAccountManager.java to .\/spikes\ repository source files.
Added BetterAuthenticator.java to .\/spikes\ repository source files.
Added BetterAuthenticatorActivity.java to .\/spikes\ repository source files.
Added GertHerbAuthenticator.java to .\/spikes\ repository source files.
Added GertHerbAuthenticatorService.java to .\/spikes\ repository source files.
Added NoAccountException.java to .\/spikes\ repository source files.
Added ReactiveAuthenticatorActivity.java to .\/spikes\ repository source files.
Added Token.java to .\/spikes\ repository source files.
Added GertHerbActivity.java to .\/spikes\ repository source files.
Added GertHerbApplication.java to .\/spikes\ repository source files.
Added GertHerbAuthenticationActivity.java to .\/spikes\ repository source files.
Added TypefaceFactory.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added ViewServer.java to .\/spikes\ repository source files.
Added ViewServerManager.java to .\/spikes\ repository source files.
Added DeveloperError.java to .\/spikes\ repository source files.
Added HomeActivity.java to .\/spikes\ repository source files.
Added LoginActivity.java to .\/spikes\ repository source files.
Added LoginView.java to .\/spikes\ repository source files.
Added UserCredentials.java to .\/spikes\ repository source files.
Added FontButton.java to .\/spikes\ repository source files.
Added FontEditText.java to .\/spikes\ repository source files.
Added FontTextView.java to .\/spikes\ repository source files.
Added GithubApi.java to .\/spikes\ repository source files.
Added GithubApiFactory.java to .\/spikes\ repository source files.
Added TokenRequest.java to .\/spikes\ repository source files.
Added TokenResponse.java to .\/spikes\ repository source files.
Added Dummy.java to .\/spikes\ repository source files.
Added DummyTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MainFragment.java to .\/spikes\ repository source files.
Added Attributes.java to .\/spikes\ repository source files.
Added Coordinates.java to .\/spikes\ repository source files.
Added IndicatorCoordinatesCalculator.java to .\/spikes\ repository source files.
Added LandingStrip.java to .\/spikes\ repository source files.
Added MutableCoordinates.java to .\/spikes\ repository source files.
Added OnPagerAdapterChangedListener.java to .\/spikes\ repository source files.
Added PagerAdapterObserver.java to .\/spikes\ repository source files.
Added Scrollable.java to .\/spikes\ repository source files.
Added ScrollingPageChangeListener.java to .\/spikes\ repository source files.
Added State.java to .\/spikes\ repository source files.
Added TabsContainer.java to .\/spikes\ repository source files.
Added CustomLandingStrip.java to .\/spikes\ repository source files.
Added CustomTabActivity.java to .\/spikes\ repository source files.
Added ExampleRainbowLandingStrip.java to .\/spikes\ repository source files.
Added FixedWidthTabActivity.java to .\/spikes\ repository source files.
Added NoFragmentsSimpleTextTabActivity.java to .\/spikes\ repository source files.
Added Data.java to .\/spikes\ repository source files.
Added DemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added SmallDemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerFragment.java to .\/spikes\ repository source files.
Added DemoViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapterState.java to .\/spikes\ repository source files.
Added SimpleTextTabActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AbTestingParamsLoadedCallback.java to .\/spikes\ repository source files.
Added AyBe.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added WeakStartCallback.java to .\/spikes\ repository source files.
Added LeakActivity.java to .\/spikes\ repository source files.
Added NoLeakActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added Bar.java to .\/spikes\ repository source files.
Added Foo.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added FooTest.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added ColorScheme.java to .\/spikes\ repository source files.
Added ColorUtils.java to .\/spikes\ repository source files.
Added DominantColorCalculator.java to .\/spikes\ repository source files.
Added FloatUtils.java to .\/spikes\ repository source files.
Added MedianCutQuantizer.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added PayPalFragment.java to .\/spikes\ repository source files.
Added PayPalHelper.java to .\/spikes\ repository source files.
Added MaxLengthMessageComposer.java to .\/spikes\ repository source files.
Added MessageComposer.java to .\/spikes\ repository source files.
Added TwitterMessageComposer.java to .\/spikes\ repository source files.
Added DisabledMruPersister.java to .\/spikes\ repository source files.
Added MruPersister.java to .\/spikes\ repository source files.
Added SharedPreferencesMruPersister.java to .\/spikes\ repository source files.
Added OnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added PriorityShareDialog.java to .\/spikes\ repository source files.
Added PrioritySharer.java to .\/spikes\ repository source files.
Added ShareTargetsAdapter.java to .\/spikes\ repository source files.
Added SimpleOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added TargetApps.java to .\/spikes\ repository source files.
Added TwitterOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AdvancedActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SimpleActivity.java to .\/spikes\ repository source files.
Added LockingActivity.java to .\/spikes\ repository source files.
Added PostLockingActivity.java to .\/spikes\ repository source files.
Added PreLockingActivity.java to .\/spikes\ repository source files.
Added DummyAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added NovoStaggeredGridView.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SpikeApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SwipeableView.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MyClass.java to .\/spikes\ repository source files.
Added MyClassTest.java to .\/spikes\ repository source files.
Added MyAndroidClassTest.java to .\/spikes\ repository source files.
Added RobolectricGradleTestRunner.java to .\/spikes\ repository source files.
Added Mapper.java to .\/spikes\ repository source files.
Added Query.java to .\/spikes\ repository source files.
Added TypedResolver.java to .\/spikes\ repository source files.
Added CursorList.java to .\/spikes\ repository source files.
Added CursorListIterator.java to .\/spikes\ repository source files.
Added CursorMarshaller.java to .\/spikes\ repository source files.
Added EmptyListIterator.java to .\/spikes\ repository source files.
Added ReflectionCursorMarshaller.java to .\/spikes\ repository source files.
Added RichClass.java to .\/spikes\ repository source files.
Added Setter.java to .\/spikes\ repository source files.
Added Function.java to .\/spikes\ repository source files.
Added TypedElementLoader.java to .\/spikes\ repository source files.
Added TypedLoader.java to .\/spikes\ repository source files.
Added Marshaller.java to .\/spikes\ repository source files.
Added ObjectMapper.java to .\/spikes\ repository source files.
Added TypedActivity.java to .\/spikes\ repository source files.
Added StringUtil.java to .\/spikes\ repository source files.
Added MyObject.java to .\/spikes\ repository source files.
Added MediaPlayerSwitcherActivity.java to .\/spikes\ repository source files.
Added VideoPlayerService.java to .\/spikes\ repository source files.
Added RelativeLayoutWithForeground.java to .\/spikes\ repository source files.
Added DemoActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added RecognitionService.java to .\/spikes\ repository source files.
Added SessionService.java to .\/spikes\ repository source files.
Added SettingsActivity.java to .\/spikes\ repository source files.
Added SmartContextInteractionService.java to .\/spikes\ repository source files.
AccessibilityManager accessibilityManager = (AccessibilityManager) context.getSystemService(Context.ACCESSIBILITY_SERVICE);
enabledServices=getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN)
List<AccessibilityServiceInfo> enabledServices = getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN);
List<AccessibilityServiceInfo> enabledServices = getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN);
Action otherAction = (Action) o;
int result = id;
Actions otherActions = (Actions) o;
action=actions.getAction(i)
Action action = actions.getAction(i);
label=resources.getString(action.getLabel())
String label = resources.getString(action.getLabel());
action=actions.findActionById(actionId)
Action action = actions.findActionById(actionId);

 Generics pattern public class ActionsAccessibilityDelegate was added at revision cb93ffb8454cf99359dff578ff73dfad63321d89

View view = convertView;
demo=getItem(position)
Demo demo = getItem(position);
Intent intent = new Intent(context, demo.activityClass);
layoutInflater=LayoutInflater.from(parent.getContext())
LayoutInflater layoutInflater = LayoutInflater.from(parent.getContext());
TweetView tweetView = (TweetView) findViewById(R.id.tweet);
actions=createActions(tweet,listener)
Actions actions = createActions(tweet, listener);
ListView listView = ((ListView) findViewById(R.id.list));
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
final DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close) {

            @Override
            public void onDrawerClosed(View drawerView) {
                super.onDrawerClosed(drawerView);
                // waiting for the drawer to close, then navigating seems to cause issue.
                // why wait for the drawer to close? jankiness.
                if (pendingNavigationClick != null) {
                    startActivity(pendingNavigationClick);
                    pendingNavigationClick = null;
                }
            }

        };
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close);
Intent intent;
b=getIntent().getExtras()
Bundle b = getIntent().getExtras();
mShouldStartPlayback=b.getBoolean("shouldStart")
boolean mShouldStartPlayback = b.getBoolean("shouldStart");
startPosition=b.getInt("startPosition",0)
int startPosition = b.getInt("startPosition", 0);
currentPos=mVideoView.getCurrentPosition()
int currentPos = mVideoView.getCurrentPosition();
String msg;
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, mDisplaySize.y + getActionBar().getHeight());
mm=mSelectedMedia.getMetadata()
MediaMetadata mm = mSelectedMedia.getMetadata();
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, (int) (mDisplaySize.x * ASPECT_RATIO));
WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
width=display.getWidth()
int width = display.getWidth();
height=display.getHeight()
int height = display.getHeight();
int resourceId = 0;
String videoUrl = "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4#sthash.rJ5rPZy8.dpuf";
String title = "Jahre Philharmonie";
String description = "Awesome film you must watch!";
String author = "Blundell";
String thumbUrl = "http://www.ustream.tv/blog/wp-content/uploads/2013/10/simply-go-live.png";
MediaMetadata metadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE);
mediaInfo=new MediaInfo.Builder(videoUrl).setMetadata(metadata).setStreamType(MediaInfo.STREAM_TYPE_BUFFERED).setContentType("video/mp4").build()
MediaInfo mediaInfo = new MediaInfo.Builder(videoUrl)
                        .setMetadata(metadata)
                        .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)
                        .setContentType("video/mp4")
                        .build();
Intent intent = new Intent(MainActivity.this, LocalPlayerActivity.class);
preferences=getPreferences(MODE_PRIVATE)
SharedPreferences preferences = getPreferences(MODE_PRIVATE);
defaultSmsPackage=Telephony.Sms.getDefaultSmsPackage(this)
String defaultSmsPackage = Telephony.Sms.getDefaultSmsPackage(this);
Intent intent = new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
availableAppProvider=EasyCustomTabs.getInstance()
AvailableAppProvider availableAppProvider = EasyCustomTabs.getInstance();
ConnectedClient connectedClient = new ConnectedClient(client);
binder=Binder.newInstance()
Binder binder = Binder.newInstance();
List<Composer> composerList = new ArrayList<>();
customTabsSession=connection.newSession()
CustomTabsSession customTabsSession = connection.newSession();
CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(customTabsSession);
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
context=EasyCustomTabs.getInstance().getContext()
Context context = EasyCustomTabs.getInstance().getContext();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
packagesSupportingCustomTabs=getPackagesSupportingCustomTabs()
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
defaultPackage=getDefaultPackage()
String defaultPackage = getDefaultPackage();
defaultActivityInfo=packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK,0)
ResolveInfo defaultActivityInfo = packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK, 0);
String packageName = defaultActivityInfo.activityInfo.packageName;
resolvedInfoList=packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK,0)
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<String> packagesSupportingCustomTabs = new ArrayList<>();
Intent serviceIntent = new Intent();
bestPackageFinder=BestPackageFinder.newInstance()
BestPackageFinder bestPackageFinder = BestPackageFinder.newInstance();
packageName=bestPackageFinder.findBestPackage()
String packageName = bestPackageFinder.findBestPackage();
resolveInfo=createResolveInfoFor(packageName)
ResolveInfo resolveInfo = createResolveInfoFor(packageName);
ResolveInfo resolveInfo = new ResolveInfo();
List<ResolveInfo> resolveInfoList = new ArrayList<>();
defaultPackageResolveInfo=createResolveInfoFor(packageName)
ResolveInfo defaultPackageResolveInfo = createResolveInfoFor(packageName);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
oldestApiMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage oldestApiMessage = apiMessages.get(apiMessages.size() - 1);
String lastResponseEpochTime = oldestApiMessage.timeStamp;
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
latestMessage=latestMessages.get(latestMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage latestMessage = latestMessages.get(latestMessages.size() - 1);
latestMessageDateTime=convertToLocalDateTime(latestMessage.timeStamp)
LocalDateTime latestMessageDateTime = convertToLocalDateTime(latestMessage.timeStamp);
List<ChannelHistory.Message> messages = new ArrayList<>();
historyFrom=getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1))
LocalDateTime historyFrom = getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1));
historyTo=getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0))
LocalDateTime historyTo = getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0));
String text = apiMessage.text;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
lastMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage lastMessage = apiMessages.get(apiMessages.size() - 1);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
firstMessage=apiMessages.get(0)
ApiPagedChannelHistory.ApiMessage firstMessage = apiMessages.get(0);
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
String slackToken = args[0];
retrofit=new Retrofit.Builder().baseUrl("https://slack.com/api/").addConverterFactory(GsonConverterFactory.create()).build()
Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://slack.com/api/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();
slackWebService=retrofit.create(SlackWebService.class)
SlackWebService slackWebService = retrofit.create(SlackWebService.class);
slackHistoryFetcher=SlackHistoryFetcher.from(slackWebService,slackToken)
SlackHistoryFetcher slackHistoryFetcher = SlackHistoryFetcher.from(slackWebService, slackToken);
start=LocalDateTime.now()
LocalDateTime start = LocalDateTime.now();
end=LocalDateTime.now().minusDays(7)
LocalDateTime end = LocalDateTime.now().minusDays(7);
channelHistory=slackHistoryFetcher.getChannelHistory(start,end)
ChannelHistory channelHistory = slackHistoryFetcher.getChannelHistory(start, end);
HistoryConverter historyConverter = new HistoryConverter();
ApiPagedResponse apiPagedResponse = new ApiPagedResponse(start);
response=fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime())
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
apiPagedChannelHistory=response.body()
ApiPagedChannelHistory apiPagedChannelHistory = response.body();
channelHistory=slackWebService.getChannelHistory(slackToken,channel,lastResponseEpochTime,NUMBER_OF_RESULTS)
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
ApiPagedChannelHistory apiPagedChannelHistory = new ApiPagedChannelHistory();
ApiPagedChannelHistory.ApiMessage apiMessage = new ApiPagedChannelHistory.ApiMessage();
final TextView textView = new TextView(context);
emptyView=findViewById(R.id.empty_view)
View emptyView = findViewById(R.id.empty_view);
final Integer action = values[0];
LoremAdapter loremAdapter = new LoremAdapter();
accounts=accountManager.getAccountsByType(accountType)
Account[] accounts = accountManager.getAccountsByType(accountType);
Bundle result;
Bundle result;
Bundle result = new Bundle();
activity=createLoginIntent(context,accountType,authTokenType,requiredFeatures,options)
Intent activity = createLoginIntent(context, accountType, authTokenType, requiredFeatures, options);
Bundle bundle = new Bundle();
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
accounts=accountManager.getAccountsByType(authTokenType)
Account[] accounts = accountManager.getAccountsByType(authTokenType);
bundle=createResponseBundle(token)
Bundle bundle = createResponseBundle(token);
accountManager=AccountManager.get(this.getApplicationContext())
AccountManager accountManager = AccountManager.get(this.getApplicationContext());
Account account = new Account(token.getUserName(), getAccountName());
Bundle bundle = new Bundle();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
GertHerbAuthenticator authenticator = new GertHerbAuthenticator(this);
fontId=getFontId(context,attrs)
int fontId = getFontId(context, attrs);
fontType=getFontType(fontId)
FontType fontType = getFontType(fontId);
typedArray=context.obtainStyledAttributes(attrs,R.styleable.CustomTextAppearance)
TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CustomTextAppearance);
typeface=createTypeFace(context,fontType)
Typeface typeface = createTypeFace(context, fontType);
info=context.getApplicationInfo()
ApplicationInfo info = context.getApplicationInfo();
name=activity.getTitle().toString()
String name = activity.getTitle().toString();
client=mServer.accept()
Socket client = mServer.accept();
boolean result;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
BufferedReader in = null;
request=in.readLine()
final String request = in.readLine();
String command;
String parameters;
index=request.indexOf(' ')
int index = request.indexOf(' ');
boolean result;
boolean success = true;
BufferedWriter out = null;
index=parameters.indexOf(' ')
int index = parameters.indexOf(' ');
code=parameters.substring(0,index)
final String code = parameters.substring(0, index);
int hashCode = (int) Long.parseLong(code, 16);
window=findWindow(hashCode)
final View window = findWindow(hashCode);
dispatch=ViewDebug.class.getDeclaredMethod("dispatchCommand",View.class,String.class,String.class,OutputStream.class)
final Method dispatch = ViewDebug.class.getDeclaredMethod("dispatchCommand",
                        View.class, String.class, String.class, OutputStream.class);
View window = null;
boolean result = true;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
boolean result = true;
String focusName = null;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
View focusedWindow = null;
BufferedWriter out = null;
boolean needWindowListUpdate = false;
boolean needFocusedWindowUpdate = false;
BetterAccountManager accountManager = new BetterAccountManager(this, getString(R.string.account_type), getString(R.string.token_type), null);
loginView=Views.findById(this,R.id.login_view)
LoginView loginView = Views.findById(this, R.id.login_view);
authorizationApi=new GithubApiFactory().createAuthorizationApi(credentials.username,credentials.password)
GithubApi authorizationApi = new GithubApiFactory().createAuthorizationApi(credentials.username, credentials.password);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
Endpoint endpoint = new Endpoint() {
            @Override
            public String getUrl() {
                return GITHUB_API_URL;
            }

            @Override
            public String getName() {
                return "Live";
            }
        };
interceptor=createAuthorizationRequestInterceptor(username,password)
RequestInterceptor interceptor = createAuthorizationRequestInterceptor(username, password);
restAdapter=createRestAdapter(endpoint,interceptor)
RestAdapter restAdapter = createRestAdapter(endpoint, interceptor);
Dummy dummy = new Dummy();
result=dummy.explodes()
boolean result = dummy.explodes();
String base64EncodedPublicKey = "CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE";
premiumPurchase=inventory.getPurchase(SKU_PREMIUM)
Purchase premiumPurchase = inventory.getPurchase(SKU_PREMIUM);
infiniteGasPurchase=inventory.getPurchase(SKU_INFINITE_GAS)
Purchase infiniteGasPurchase = inventory.getPurchase(SKU_INFINITE_GAS);
gasPurchase=inventory.getPurchase(SKU_GAS)
Purchase gasPurchase = inventory.getPurchase(SKU_GAS);
String payload = "";
String payload = "";
String payload = "";
payload=p.getDeveloperPayload()
String payload = p.getDeveloperPayload();
int index = mTank >= TANK_RES_IDS.length ? TANK_RES_IDS.length - 1 : mTank;
AlertDialog.Builder bld = new AlertDialog.Builder(this);
spe=getPreferences(MODE_PRIVATE).edit()
SharedPreferences.Editor spe = getPreferences(MODE_PRIVATE).edit();
sp=getPreferences(MODE_PRIVATE)
SharedPreferences sp = getPreferences(MODE_PRIVATE);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                                  + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                    | ((source[d + 1 + off] << 24) >>> 16)
                    | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                    | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                                   "-1002:Bad response received/" +
                                   "-1003:Purchase signature verification failed/" +
                                   "-1004:Send intent failed/" +
                                   "-1005:User cancelled/" +
                                   "-1006:Unknown purchase response/" +
                                   "-1007:Missing token/" +
                                   "-1008:Unknown error/" +
                                   "-1009:Subscriptions not available/" +
                                   "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(),
                    itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                        | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                        | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                            | ((source[d + 1 + off] << 24) >>> 16)
                            | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                            | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                "-1002:Bad response received/" +
                "-1003:Purchase signature verification failed/" +
                "-1004:Send intent failed/" +
                "-1005:User cancelled/" +
                "-1006:Unknown purchase response/" +
                "-1007:Missing token/" +
                "-1008:Unknown error/" +
                "-1009:Subscriptions not available/" +
                "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(), itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
responseCode=result.getResponse()
int responseCode = result.getResponse();
sku=purchase.getSku()
String sku = purchase.getSku();
skuDetails=inv.getSkuDetails(sku)
SkuDetails skuDetails = inv.getSkuDetails(sku);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
Button purchaseFiveButton = (Button) rootView.findViewById(R.id.fragment_main_button_purchase_five_coins);
xml=context.obtainStyledAttributes(attrs,R.styleable.LandingStrip)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.LandingStrip);
tabLayoutId=xml.getResourceId(R.styleable.LandingStrip_tabLayoutId,MISSING_TAB_LAYOUT_ID)
int tabLayoutId = xml.getResourceId(R.styleable.LandingStrip_tabLayoutId, MISSING_TAB_LAYOUT_ID);
indicatorColour=xml.getResourceId(R.styleable.LandingStrip_indicatorColor,DEFAULT_INDICATOR_COLOUR)
int indicatorColour = xml.getResourceId(R.styleable.LandingStrip_indicatorColor, DEFAULT_INDICATOR_COLOUR);
indicatorHeight=getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight,DEFAULT_INDICATOR_HEIGHT,xml)
int indicatorHeight = getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight, DEFAULT_INDICATOR_HEIGHT, xml);
tabsPaddingLeft=getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingLeft = getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding, DEFAULT_TABS_PADDING, xml);
tabsPaddingRight=getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingRight = getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding, DEFAULT_TABS_PADDING, xml);
MutableCoordinates drawCurrentTabCoordinates = new MutableCoordinates();
MutableCoordinates drawNextTabCoordinates = new MutableCoordinates();
MutableCoordinates drawMovingIndicatorCoordinates = new MutableCoordinates();
currentTab=tabsContainer.getTabAt(currentPosition)
View currentTab = tabsContainer.getTabAt(currentPosition);
currentTabStart=currentTab.getLeft()
float currentTabStart = currentTab.getLeft();
currentTabEnd=currentTab.getRight()
float currentTabEnd = currentTab.getRight();
nextTab=tabsContainer.getTabAt(currentPosition + 1)
View nextTab = tabsContainer.getTabAt(currentPosition + 1);
nextTabPositionOffset=getFractionFrom(pagePositionOffset)
float nextTabPositionOffset = getFractionFrom(pagePositionOffset);
indicatorStart=getIndicatorPosition(nextTab.getStart(),pagePositionOffset,currentTab.getStart(),nextTabPositionOffset)
float indicatorStart = getIndicatorPosition(nextTab.getStart(), pagePositionOffset, currentTab.getStart(), nextTabPositionOffset);
indicatorEnd=getIndicatorPosition(nextTab.getEnd(),pagePositionOffset,currentTab.getEnd(),nextTabPositionOffset)
float indicatorEnd = getIndicatorPosition(nextTab.getEnd(), pagePositionOffset, currentTab.getEnd(), nextTabPositionOffset);
height=getHeight()
int height = getHeight();
tabCount=pagerAdapter.getCount()
int tabCount = pagerAdapter.getCount();
title=pagerAdapter.getPageTitle(position)
CharSequence title = pagerAdapter.getPageTitle(position);
inflatedTabView=tabsContainer.inflateTab(layoutInflater,attributes.getTabLayoutId())
View inflatedTabView = tabsContainer.inflateTab(layoutInflater, attributes.getTabLayoutId());
int position = (int) view.getTag(TAG_KEY_POSITION);
scrollOffset=getHorizontalScrollOffset(position,positionOffset)
int scrollOffset = getHorizontalScrollOffset(position, positionOffset);
newScrollX=calculateScrollOffset(position,scrollOffset,positionOffset)
float newScrollX = calculateScrollOffset(position, scrollOffset, positionOffset);
tabWidth=tabsContainer.getTabAt(position).getWidth()
int tabWidth = tabsContainer.getTabAt(position).getWidth();
tabForPosition=tabsContainer.getTabAt(position)
View tabForPosition = tabsContainer.getTabAt(position);
float tabStartX = tabForPosition.getLeft() + scrollOffset;
int viewMiddleOffset = getTabParentWidth() / 2;
float tabCenterOffset = (tabForPosition.getRight() - tabForPosition.getLeft()) * 0.5F;
nextTabDelta=getNextTabDelta(position,pagerOffset,tabForPosition)
float nextTabDelta = getNextTabDelta(position, pagerOffset, tabForPosition);
LinearLayout tabsContainerView = new LinearLayout(context);
tab=getTabAt(index)
View tab = getTabAt(index);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
position=indicatorCoordinates.getStart()
float position = indicatorCoordinates.getStart();
lastTabOffset=((ViewGroup)getChildAt(0)).getChildAt(getChildCount() - 1).getWidth()
float lastTabOffset = ((ViewGroup) getChildAt(0)).getChildAt(getChildCount() - 1).getWidth();
frequency=getOneCycle(lastTabOffset)
float frequency = getOneCycle(lastTabOffset);
r=toHex(calculateColour(position,frequency,PHASE_RED,AMPLITUDE,CENTER_FREQUENCY))
String r = toHex(calculateColour(position, frequency, PHASE_RED, AMPLITUDE, CENTER_FREQUENCY));
g=toHex(calculateColour(position,frequency,PHASE_GREEN,AMPLITUDE,CENTER_FREQUENCY))
String g = toHex(calculateColour(position, frequency, PHASE_GREEN, AMPLITUDE, CENTER_FREQUENCY));
b=toHex(calculateColour(position,frequency,PHASE_BLUE,AMPLITUDE,CENTER_FREQUENCY))
String b = toHex(calculateColour(position, frequency, PHASE_BLUE, AMPLITUDE, CENTER_FREQUENCY));
height=getHeight()
int height = getHeight();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPagerFragment viewPagerFragment = new ViewPagerFragment();
Bundle bundle = new Bundle();
TextView view = (TextView) layoutInflater.inflate(R.layout.view_demo, container, false);
currentPosition=viewPagerAdapterState.getCurrentPosition()
int currentPosition = viewPagerAdapterState.getCurrentPosition();
view=getView(container,position)
View view = getView(container, position);
parcelableSparseArray=viewPagerAdapterState.get(position)
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
View view = (View) object;
SparseArray<Parcelable> viewState = new SparseArray<>();
position=entry.getValue()
int position = entry.getValue();
view=entry.getKey()
View view = entry.getKey();
bundle=in.readBundle()
Bundle bundle = in.readBundle();
Map<Integer, SparseArray<Parcelable>> viewStates = new HashMap<>(bundle.keySet().size());
sparseParcelableArray=bundle.getSparseParcelableArray(key)
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
primaryItemPosition=in.readInt()
int primaryItemPosition = in.readInt();
Bundle bundle = new Bundle();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
final TextView abText = (TextView) findViewById(R.id.ab_text);
final AyBe ayBe = new AyBe();
id=item.getItemId()
int id = item.getItemId();
callback=weakCallback.get()
AbTestingParamsLoadedCallback callback = weakCallback.get();
WeakReference<NoLeakActivity> weakNoLeakActivity = new WeakReference<NoLeakActivity>(noLeakActivity);
noLeakActivity=weakNoLeakActivity.get()
NoLeakActivity noLeakActivity = weakNoLeakActivity.get();
RecyclerView recyclerView = (RecyclerView) layoutInflater.inflate(R.layout.view_page, viewGroup, false);
itemView=layoutInflater.inflate(R.layout.view_item,parent,false)
View itemView = layoutInflater.inflate(R.layout.view_item, parent, false);
actual=foo.twice(HALF)
int actual = foo.twice(HALF);
int expected = WHOLE;
final float inverseRatio = 1f - ratio;
float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRatio);
float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRatio);
float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRatio);
hsv=node.getHsv()
float[] hsv = node.getHsv();
width=bitmap.getWidth()
final int width = bitmap.getWidth();
height=bitmap.getHeight()
final int height = bitmap.getHeight();
final int[] rgbPixels = new int[width * height];
final MedianCutQuantizer mcq = new MedianCutQuantizer(rgbPixels, NUM_COLORS);
primaryAccentColor=findPrimaryAccentColor()
final ColorNode primaryAccentColor = findPrimaryAccentColor();
secondaryAccentColor=findSecondaryAccentColor(primaryAccentColor)
final ColorNode secondaryAccentColor = findSecondaryAccentColor(primaryAccentColor);
tertiaryAccentColor=findTertiaryAccentColor(primaryAccentColor,secondaryAccentColor)
final int tertiaryAccentColor = findTertiaryAccentColor(
                primaryAccentColor, secondaryAccentColor);
primaryTextColor=findPrimaryTextColor(primaryAccentColor)
final int primaryTextColor = findPrimaryTextColor(primaryAccentColor);
secondaryTextColor=findSecondaryTextColor(primaryAccentColor)
final int secondaryTextColor = findSecondaryTextColor(primaryAccentColor);
final float primaryHue = primary.getHsv()[0];
final float candidateHue = candidate.getHsv()[0];
copy=Arrays.copyOf(palette,palette.length)
final MedianCutQuantizer.ColorNode[] copy = Arrays.copyOf(palette, palette.length);
maxCount=palette[0].getCount()
final float maxCount = palette[0].getCount();
lhsWeight=calculateWeight(lhs,maxCount)
final float lhsWeight = calculateWeight(lhs, maxCount);
rhsWeight=calculateWeight(rhs,maxCount)
final float rhsWeight = calculateWeight(rhs, maxCount);
float sum = 0;
float sumWeight = 0;
float value = values[i];
float weight = values[i + 1];
ColorHistogram colorHist = new ColorHistogram(pixels);
K=colorHist.getNumberOfColors()
int K = colorHist.getNumberOfColors();
ColorNode[] rCols = null;
rgb=colorHist.getColor(i)
int rgb = colorHist.getColor(i);
cnt=colorHist.getCount(i)
int cnt = colorHist.getCount(i);
ColorBox initialBox = new ColorBox(0, K - 1, 0);
List<ColorBox> colorSet = new ArrayList<ColorBox>();
int k = 1;
boolean done = false;
nextBox=findBoxToSplit(colorSet)
ColorBox nextBox = findBoxToSplit(colorSet);
newBox=nextBox.splitBox()
ColorBox newBox = nextBox.splitBox();
color=findClosestColor(pixels[i])
ColorNode color = findClosestColor(pixels[i]);
idx=findClosestColorIndex(rgb)
int idx = findClosestColorIndex(rgb);
red=Color.red(rgb)
int red = Color.red(rgb);
grn=Color.green(rgb)
int grn = Color.green(rgb);
blu=Color.blue(rgb)
int blu = Color.blue(rgb);
int minIdx = 0;
int minDistance = Integer.MAX_VALUE;
ColorNode color = quantColors[i];
d2=color.distance2(red,grn,blu)
int d2 = color.distance2(red, grn, blu);
ColorBox boxToSplit = null;
int minLevel = Integer.MAX_VALUE;
n=colorBoxes.size()
int n = colorBoxes.size();
ColorNode[] avgColors = new ColorNode[n];
int i = 0;
int dr = this.red - red;
int dg = this.grn - grn;
int db = this.blu - blu;
ColorNode color = imageColors[i];
int r = color.red;
int g = color.grn;
int b = color.blu;
dim=getLongestColorDimension()
ColorDimension dim = getLongestColorDimension();
med=findMedian(dim)
int med = findMedian(dim);
int nextLevel = level + 1;
ColorBox newBox = new ColorBox(med + 1, upper, nextLevel);
int rLength = rmax - rmin;
int gLength = gmax - gmin;
int bLength = bmax - bmin;
int half = count / 2;
int nPixels, median;
int rSum = 0;
int gSum = 0;
int bSum = 0;
int n = 0;
ColorNode ci = imageColors[i];
int cnt = ci.cnt;
double nd = n;
int avgRed = (int) (0.5 + rSum / nd);
int avgGrn = (int) (0.5 + gSum / nd);
int avgBlu = (int) (0.5 + bSum / nd);
s=this.getClass().getSimpleName()
String s = this.getClass().getSimpleName();
int i = 0;
int N = pixelsOrig.length;
int[] pixelsCpy = new int[N];
int k = -1;
int curColor = -1;
int nColors = k + 1;
id=item.getItemId()
int id = item.getItemId();
Intent intent = new Intent();
bitmap=((BitmapDrawable)imageView.getDrawable()).getBitmap()
Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap();
DominantColorCalculator dominantColorCalculator = new DominantColorCalculator(bitmap);
selectedImageUri=data.getData()
Uri selectedImageUri = data.getData();
selectedImagePath=getPath(selectedImageUri)
String selectedImagePath = getPath(selectedImageUri);
String[] projection = {MediaStore.Images.Media.DATA};
cursor=managedQuery(uri,projection,null,null,null)
Cursor cursor = managedQuery(uri, projection, null, null, null);
column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)
int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
LinearLayout rootView = (LinearLayout) inflater.inflate(R.layout.fragment_main, container, false);
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
preapprovalButton=payPal.getCheckoutButton(getActivity(),PayPal.BUTTON_194x37,CheckoutButton.TEXT_PAY)
CheckoutButton preapprovalButton = payPal.getCheckoutButton(getActivity(), PayPal.BUTTON_194x37, CheckoutButton.TEXT_PAY);
preapprovalIntent=payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY)
Intent preapprovalIntent = payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY);
String resultTitle = "";
String resultInfo = "";
String resultExtra = "";
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
PayPalPreapproval preapproval = new PayPalPreapproval();
preapproval=createPreapproval(preapprovalKey)
PayPalPreapproval preapproval = createPreapproval(preapprovalKey);
Bundle bundle = new Bundle();
int availableLength = maxLength;
StringBuilder stringBuilder = new StringBuilder(maxLength);
prefixAndSuffixLength=computeAppendedLengthIncludingSeparatorSpaces(prefix,suffix)
int prefixAndSuffixLength = computeAppendedLengthIncludingSeparatorSpaces(prefix, suffix);
urlLength=computeUrlLengthIncludingSeparatorSpace(url)
int urlLength = computeUrlLengthIncludingSeparatorSpace(url);
trimmedSubject=ellipsizeTextIfExceedsMaxLength(subject,availableLength)
String trimmedSubject = ellipsizeTextIfExceedsMaxLength(subject, availableLength);
int length = 0;
preferences=context.getSharedPreferences(MRU_PREFERENCES,Context.MODE_PRIVATE)
SharedPreferences preferences = context.getSharedPreferences(MRU_PREFERENCES, Context.MODE_PRIVATE);
args=getArguments()
Bundle args = getArguments();
themeResId=getThemeResIdIfProvidedIn(args)
int themeResId = getThemeResIdIfProvidedIn(args);
title=getTitleIfProvidedIn(args)
CharSequence title = getTitleIfProvidedIn(args);
builder=createDialogBuilder(themeResId).setCancelable(true).setView(dialogView)
AlertDialog.Builder builder = createDialogBuilder(themeResId)
                .setCancelable(true)
                .setView(dialogView);
inflater=getActivity().getLayoutInflater()
LayoutInflater inflater = getActivity().getLayoutInflater();
GridView gridView = (GridView) rootView.findViewById(R.id.ps__dialog_grid);
targetApps=extractTargetAppsFrom(args)
TargetApps targetApps = extractTargetAppsFrom(args);
allShareTargets=getAvailableShareTargets(sharingIntent)
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
priorityAppInfos=createPriorityResolveInfoList(targetApps,allShareTargets)
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
otherAppInfos=createOtherAppsResolveInfoList(priorityAppInfos,allShareTargets)
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
resolveInfos=targetApps.extractTargetResolveInfosFrom(allShareTargets)
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
mruResolveInfo=findMruResolveInfoIn(allShareTargets)
ResolveInfo mruResolveInfo = findMruResolveInfoIn(allShareTargets);
List<ResolveInfo> otherAppsInfos = new ArrayList<ResolveInfo>(allAppInfos);
mruPackageName=persister.getLastUsedTarget()
String mruPackageName = persister.getLastUsedTarget();
String packageName = resolveInfo.activityInfo.packageName;
packageManager=getActivity().getPackageManager()
PackageManager packageManager = getActivity().getPackageManager();
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
View buttonStrip = (View) showMoreButton.getParent();
gridView=getGridView()
GridView gridView = getGridView();
intent=wrapIntentWithExplicitTargetComponentForItem(position,sharingIntent)
Intent intent = wrapIntentWithExplicitTargetComponentForItem(position, sharingIntent);
Intent intent = new Intent(sharingIntent);
ActivityInfo activity = adapter.getItem(position).activityInfo;
ComponentName name = new ComponentName(activity.applicationInfo.packageName, activity.name);
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
PriorityShareDialog dialog = new PriorityShareDialog();
Bundle args = new Bundle();
sharingIntent=createSharingIntent()
Intent sharingIntent = createSharingIntent();
fragmentManager=activity.getFragmentManager()
FragmentManager fragmentManager = activity.getFragmentManager();
Intent intent = new Intent(Intent.ACTION_SEND);
dialog=new PriorityShareDialog.Builder().setTitle(title).setTargetApps(targetApps).setSharingIntent(sharingIntent).setOnPrepareSharingIntentListener(listener).setShowMostRecentlyUsed(showMostRecentlyUsed).build()
PriorityShareDialog dialog = new PriorityShareDialog.Builder()
                .setTitle(title)
                .setTargetApps(targetApps)
                .setSharingIntent(sharingIntent)
                .setOnPrepareSharingIntentListener(listener)
                .setShowMostRecentlyUsed(showMostRecentlyUsed)
                .build();
PrioritySharer prioritySharer = new PrioritySharer();
prioritySharer=build()
PrioritySharer prioritySharer = build();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
layoutInflater=LayoutInflater.from(context)
LayoutInflater layoutInflater = LayoutInflater.from(context);
iconSizePx=getIconSizePx(context.getResources())
int iconSizePx = getIconSizePx(context.getResources());
ArrayList<ResolveInfo> sortedList = new ArrayList<ResolveInfo>(resolveInfoList);
int otherAppsCountMaybe = showAllApps ? otherAppInfos.size() : 0;
firstOtherAppsItemPosition=priorityAppInfos.size()
int firstOtherAppsItemPosition = priorityAppInfos.size();
int offsetPosition = position - firstOtherAppsItemPosition;
TextView textView;
textView=initializeItemViewIfNecessary(convertView,R.layout.ps__grid_item_share,parent)
TextView textView = initializeItemViewIfNecessary(convertView, R.layout.ps__grid_item_share, parent);
info=getItem(position)
ResolveInfo info = getItem(position);
icon=info.loadIcon(packageManager)
Drawable icon = info.loadIcon(packageManager);
arraySize=in.readInt()
int arraySize = in.readInt();
String[] packageNames = new String[arraySize];
arraySize=targetPackages.size()
int arraySize = targetPackages.size();
String[] packagesArray = new String[arraySize];
SparseArray<ResolveInfo> matchedResolveInfos = new SparseArray<ResolveInfo>(targetPackages.size());
String packageName = info.activityInfo.packageName;
index=indexOfItemInto(packageName,targetPackages)
int index = indexOfItemInto(packageName, targetPackages);
sparseArraySize=sparseArray.size()
int sparseArraySize = sparseArray.size();
ArrayList<T> list = new ArrayList<T>(sparseArraySize);
int i = 0;
originalSubject=intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT)
CharSequence originalSubject = intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT);
String subject = originalSubject != null ? originalSubject.toString() : null;
composer=createComposer()
MessageComposer composer = createComposer();
component=intent.getComponent()
ComponentName component = intent.getComponent();
targetPackageName=component.getPackageName()
String targetPackageName = component.getPackageName();
adapter=ArrayAdapter.createFromResource(this,R.array.target_apps,android.R.layout.simple_spinner_item)
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
EditText text = (EditText) findViewById(R.id.text);
EditText title = (EditText) findViewById(R.id.title);
EditText mimeType = (EditText) findViewById(R.id.mime_type);
EditText dataUri = (EditText) findViewById(R.id.data_uri);
Switch showMostRecentlyUsed = (Switch) findViewById(R.id.show_most_recently_used);
uriString=dataUri.getText().toString()
String uriString = dataUri.getText().toString();
EditText text = (EditText) findViewById(R.id.text);
TextView textView = (TextView) convertView.findViewById(R.id.positionView);
colorView=convertView.findViewById(R.id.colorView)
View colorView = convertView.findViewById(R.id.colorView);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
offset=headerPlaceholder.getTop()
int offset = headerPlaceholder.getTop();
Integer item = COLORS[position];
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
firstVisiblePosition=grid.getFirstVisiblePosition()
int firstVisiblePosition = grid.getFirstVisiblePosition();
inflate=getViewForPosition(container,position)
View inflate = getViewForPosition(container, position);
id=item.getItemId()
int id = item.getItemId();
MyActivity activity = new MyActivity();
String manifestProperty = "../app/src/main/AndroidManifest.xml";
String resProperty = "../app/src/main/res";
cursor=resolver.query(uri,projection,selection,selectionArgs,null)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, null);
cursor=resolver.query(uri,projection,selection,selectionArgs,sortOrder)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, sortOrder);
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=richClass.setter(name)
Method setter = richClass.setter(name);
T obj;
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=methodsByName.get(name)
Method setter = methodsByName.get(name);
int type = TYPE_INT;
Class<?> t = setter.getParameterTypes()[0];
Class<?> t = setter.getParameterTypes()[0];
cursorType=cursor.getType(index)
final int cursorType = cursor.getType(index);
final Object obj;
s=f.getAnnotation(Mapper.class)
Mapper s = f.getAnnotation(Mapper.class);
mm=m.getAnnotation(Mapper.class)
Mapper mm = m.getAnnotation(Mapper.class);
methodName=StringUtil.asCamelifySetMethod(what)
String methodName = StringUtil.asCamelifySetMethod(what);
cursor=getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,null,null,null,null)
Cursor cursor = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
now=System.currentTimeMillis()
long now = System.currentTimeMillis();
List<Contact2> typedCursor = new CursorList<Contact2>(cursor, Contact2.class);
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[a-zA-Z0-9]+")
Pattern p = Pattern.compile("[a-zA-Z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[A-Z][a-z0-9]+")
Pattern p = Pattern.compile("[A-Z][a-z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
SurfaceView first = (SurfaceView) findViewById(R.id.firstSurface);
SurfaceView second = (SurfaceView) findViewById(R.id.secondSurface);
Intent pickVideo = new Intent(Intent.ACTION_PICK);
xml=context.obtainStyledAttributes(attrs,R.styleable.RelativeLayoutWithForeground)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.RelativeLayoutWithForeground);
int foregroundResId = INVALID_FOREGROUND_ID;
drawable=getDrawable(getResources(),foregroundResId)
Drawable drawable = getDrawable(getResources(), foregroundResId);
Bundle args = new Bundle();
enroll=mHotwordDetector.createEnrollIntent()
Intent enroll = mHotwordDetector.createEnrollIntent();

Diff of cb93ffb8454cf99359dff578ff73dfad63321d89 and 2c8b0159c542dc63216edac7d2cc1e434f87425f:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 3
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision cb93ffb8454cf99359dff578ff73dfad63321d89 to 2c8b0159c542dc63216edac7d2cc1e434f87425f


****Parsing for addition at revision 2c8b0159c542dc63216edac7d2cc1e434f87425f****

Added AccessibilityServices.java to .\/spikes\ repository source files.
Added Action.java to .\/spikes\ repository source files.
Added Actions.java to .\/spikes\ repository source files.
Added AccessibilityServicesActivity.java to .\/spikes\ repository source files.
Added Demo.java to .\/spikes\ repository source files.
Added DemoAdapter.java to .\/spikes\ repository source files.
Added CustomActionsActivity.java to .\/spikes\ repository source files.
Added TweetView.java to .\/spikes\ repository source files.
Added DemosActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added DrawerActivity.java to .\/spikes\ repository source files.
Added EarthActivity.java to .\/spikes\ repository source files.
Added ProHaxDrawerActivity.java to .\/spikes\ repository source files.
Added SaturnActivity.java to .\/spikes\ repository source files.
Added LocalPlayerActivity.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added CastApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ComposeSmsActivity.java to .\/spikes\ repository source files.
Added HeadlessSmsSendService.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MmsReceiver.java to .\/spikes\ repository source files.
Added SmsReceiver.java to .\/spikes\ repository source files.
Added ExtendedDemoActivity.java to .\/spikes\ repository source files.
Added ExtendedDemoApplication.java to .\/spikes\ repository source files.
Added SimpleDemoActivity.java to .\/spikes\ repository source files.
Added SimpleDemoApplication.java to .\/spikes\ repository source files.
Added Binder.java to .\/spikes\ repository source files.
Added ConnectedClient.java to .\/spikes\ repository source files.
Added Connection.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnection.java to .\/spikes\ repository source files.
Added ServiceConnectionCallback.java to .\/spikes\ repository source files.
Added EasyCustomTabs.java to .\/spikes\ repository source files.
Added ActionButtonComposer.java to .\/spikes\ repository source files.
Added CloseButtonIconComposer.java to .\/spikes\ repository source files.
Added Composer.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilder.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigator.java to .\/spikes\ repository source files.
Added EasyCustomTabsWebNavigator.java to .\/spikes\ repository source files.
Added ExitAnimationsComposer.java to .\/spikes\ repository source files.
Added IntentCustomizer.java to .\/spikes\ repository source files.
Added MenuItemComposer.java to .\/spikes\ repository source files.
Added NavigationFallback.java to .\/spikes\ repository source files.
Added Navigator.java to .\/spikes\ repository source files.
Added ShowTitleComposer.java to .\/spikes\ repository source files.
Added StartAnimationsComposer.java to .\/spikes\ repository source files.
Added ToolbarColorComposer.java to .\/spikes\ repository source files.
Added UrlBarHidingComposer.java to .\/spikes\ repository source files.
Added WebNavigator.java to .\/spikes\ repository source files.
Added AvailableAppProvider.java to .\/spikes\ repository source files.
Added BestPackageFinder.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProvider.java to .\/spikes\ repository source files.
Added BinderTest.java to .\/spikes\ repository source files.
Added ConnectedClientTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnectionTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigatorTest.java to .\/spikes\ repository source files.
Added BestPackageFinderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProviderTest.java to .\/spikes\ repository source files.
Added ApiPagedChannelHistory.java to .\/spikes\ repository source files.
Added ApiPagedResponse.java to .\/spikes\ repository source files.
Added ChannelHistory.java to .\/spikes\ repository source files.
Added HistoryConverter.java to .\/spikes\ repository source files.
Added Runner.java to .\/spikes\ repository source files.
Added SlackHistoryFetcher.java to .\/spikes\ repository source files.
Added SlackWebService.java to .\/spikes\ repository source files.
Added ApiPagedResponseTest.java to .\/spikes\ repository source files.
Added MainActivityTest.java to .\/spikes\ repository source files.
Added LoremAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added BetterAccountManager.java to .\/spikes\ repository source files.
Added BetterAuthenticator.java to .\/spikes\ repository source files.
Added BetterAuthenticatorActivity.java to .\/spikes\ repository source files.
Added GertHerbAuthenticator.java to .\/spikes\ repository source files.
Added GertHerbAuthenticatorService.java to .\/spikes\ repository source files.
Added NoAccountException.java to .\/spikes\ repository source files.
Added ReactiveAuthenticatorActivity.java to .\/spikes\ repository source files.
Added Token.java to .\/spikes\ repository source files.
Added GertHerbActivity.java to .\/spikes\ repository source files.
Added GertHerbApplication.java to .\/spikes\ repository source files.
Added GertHerbAuthenticationActivity.java to .\/spikes\ repository source files.
Added TypefaceFactory.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added ViewServer.java to .\/spikes\ repository source files.
Added ViewServerManager.java to .\/spikes\ repository source files.
Added DeveloperError.java to .\/spikes\ repository source files.
Added HomeActivity.java to .\/spikes\ repository source files.
Added LoginActivity.java to .\/spikes\ repository source files.
Added LoginView.java to .\/spikes\ repository source files.
Added UserCredentials.java to .\/spikes\ repository source files.
Added FontButton.java to .\/spikes\ repository source files.
Added FontEditText.java to .\/spikes\ repository source files.
Added FontTextView.java to .\/spikes\ repository source files.
Added GithubApi.java to .\/spikes\ repository source files.
Added GithubApiFactory.java to .\/spikes\ repository source files.
Added TokenRequest.java to .\/spikes\ repository source files.
Added TokenResponse.java to .\/spikes\ repository source files.
Added Dummy.java to .\/spikes\ repository source files.
Added DummyTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MainFragment.java to .\/spikes\ repository source files.
Added Attributes.java to .\/spikes\ repository source files.
Added Coordinates.java to .\/spikes\ repository source files.
Added IndicatorCoordinatesCalculator.java to .\/spikes\ repository source files.
Added LandingStrip.java to .\/spikes\ repository source files.
Added MutableCoordinates.java to .\/spikes\ repository source files.
Added OnPagerAdapterChangedListener.java to .\/spikes\ repository source files.
Added PagerAdapterObserver.java to .\/spikes\ repository source files.
Added Scrollable.java to .\/spikes\ repository source files.
Added ScrollingPageChangeListener.java to .\/spikes\ repository source files.
Added State.java to .\/spikes\ repository source files.
Added TabsContainer.java to .\/spikes\ repository source files.
Added CustomLandingStrip.java to .\/spikes\ repository source files.
Added CustomTabActivity.java to .\/spikes\ repository source files.
Added ExampleRainbowLandingStrip.java to .\/spikes\ repository source files.
Added FixedWidthTabActivity.java to .\/spikes\ repository source files.
Added NoFragmentsSimpleTextTabActivity.java to .\/spikes\ repository source files.
Added Data.java to .\/spikes\ repository source files.
Added DemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added SmallDemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerFragment.java to .\/spikes\ repository source files.
Added DemoViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapterState.java to .\/spikes\ repository source files.
Added SimpleTextTabActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AbTestingParamsLoadedCallback.java to .\/spikes\ repository source files.
Added AyBe.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added WeakStartCallback.java to .\/spikes\ repository source files.
Added LeakActivity.java to .\/spikes\ repository source files.
Added NoLeakActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added Bar.java to .\/spikes\ repository source files.
Added Foo.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added FooTest.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added ColorScheme.java to .\/spikes\ repository source files.
Added ColorUtils.java to .\/spikes\ repository source files.
Added DominantColorCalculator.java to .\/spikes\ repository source files.
Added FloatUtils.java to .\/spikes\ repository source files.
Added MedianCutQuantizer.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added PayPalFragment.java to .\/spikes\ repository source files.
Added PayPalHelper.java to .\/spikes\ repository source files.
Added MaxLengthMessageComposer.java to .\/spikes\ repository source files.
Added MessageComposer.java to .\/spikes\ repository source files.
Added TwitterMessageComposer.java to .\/spikes\ repository source files.
Added DisabledMruPersister.java to .\/spikes\ repository source files.
Added MruPersister.java to .\/spikes\ repository source files.
Added SharedPreferencesMruPersister.java to .\/spikes\ repository source files.
Added OnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added PriorityShareDialog.java to .\/spikes\ repository source files.
Added PrioritySharer.java to .\/spikes\ repository source files.
Added ShareTargetsAdapter.java to .\/spikes\ repository source files.
Added SimpleOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added TargetApps.java to .\/spikes\ repository source files.
Added TwitterOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AdvancedActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SimpleActivity.java to .\/spikes\ repository source files.
Added LockingActivity.java to .\/spikes\ repository source files.
Added PostLockingActivity.java to .\/spikes\ repository source files.
Added PreLockingActivity.java to .\/spikes\ repository source files.
Added DummyAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added NovoStaggeredGridView.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SpikeApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SwipeableView.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MyClass.java to .\/spikes\ repository source files.
Added MyClassTest.java to .\/spikes\ repository source files.
Added MyAndroidClassTest.java to .\/spikes\ repository source files.
Added RobolectricGradleTestRunner.java to .\/spikes\ repository source files.
Added Mapper.java to .\/spikes\ repository source files.
Added Query.java to .\/spikes\ repository source files.
Added TypedResolver.java to .\/spikes\ repository source files.
Added CursorList.java to .\/spikes\ repository source files.
Added CursorListIterator.java to .\/spikes\ repository source files.
Added CursorMarshaller.java to .\/spikes\ repository source files.
Added EmptyListIterator.java to .\/spikes\ repository source files.
Added ReflectionCursorMarshaller.java to .\/spikes\ repository source files.
Added RichClass.java to .\/spikes\ repository source files.
Added Setter.java to .\/spikes\ repository source files.
Added Function.java to .\/spikes\ repository source files.
Added TypedElementLoader.java to .\/spikes\ repository source files.
Added TypedLoader.java to .\/spikes\ repository source files.
Added Marshaller.java to .\/spikes\ repository source files.
Added ObjectMapper.java to .\/spikes\ repository source files.
Added TypedActivity.java to .\/spikes\ repository source files.
Added StringUtil.java to .\/spikes\ repository source files.
Added MyObject.java to .\/spikes\ repository source files.
Added MediaPlayerSwitcherActivity.java to .\/spikes\ repository source files.
Added VideoPlayerService.java to .\/spikes\ repository source files.
Added RelativeLayoutWithForeground.java to .\/spikes\ repository source files.
Added DemoActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added RecognitionService.java to .\/spikes\ repository source files.
Added SessionService.java to .\/spikes\ repository source files.
Added SettingsActivity.java to .\/spikes\ repository source files.
Added SmartContextInteractionService.java to .\/spikes\ repository source files.
AccessibilityManager accessibilityManager = (AccessibilityManager) context.getSystemService(Context.ACCESSIBILITY_SERVICE);
enabledServices=getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN)
List<AccessibilityServiceInfo> enabledServices = getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN);
List<AccessibilityServiceInfo> enabledServices = getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN);
Action otherAction = (Action) o;
int result = id;
Actions otherActions = (Actions) o;
View view = convertView;
demo=getItem(position)
Demo demo = getItem(position);
Intent intent = new Intent(context, demo.activityClass);
layoutInflater=LayoutInflater.from(parent.getContext())
LayoutInflater layoutInflater = LayoutInflater.from(parent.getContext());
TweetView tweetView = (TweetView) findViewById(R.id.tweet);
ListView listView = ((ListView) findViewById(R.id.list));
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
final DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close) {

            @Override
            public void onDrawerClosed(View drawerView) {
                super.onDrawerClosed(drawerView);
                // waiting for the drawer to close, then navigating seems to cause issue.
                // why wait for the drawer to close? jankiness.
                if (pendingNavigationClick != null) {
                    startActivity(pendingNavigationClick);
                    pendingNavigationClick = null;
                }
            }

        };
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close);
Intent intent;
b=getIntent().getExtras()
Bundle b = getIntent().getExtras();
mShouldStartPlayback=b.getBoolean("shouldStart")
boolean mShouldStartPlayback = b.getBoolean("shouldStart");
startPosition=b.getInt("startPosition",0)
int startPosition = b.getInt("startPosition", 0);
currentPos=mVideoView.getCurrentPosition()
int currentPos = mVideoView.getCurrentPosition();
String msg;
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, mDisplaySize.y + getActionBar().getHeight());
mm=mSelectedMedia.getMetadata()
MediaMetadata mm = mSelectedMedia.getMetadata();
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, (int) (mDisplaySize.x * ASPECT_RATIO));
WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
width=display.getWidth()
int width = display.getWidth();
height=display.getHeight()
int height = display.getHeight();
int resourceId = 0;
String videoUrl = "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4#sthash.rJ5rPZy8.dpuf";
String title = "Jahre Philharmonie";
String description = "Awesome film you must watch!";
String author = "Blundell";
String thumbUrl = "http://www.ustream.tv/blog/wp-content/uploads/2013/10/simply-go-live.png";
MediaMetadata metadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE);
mediaInfo=new MediaInfo.Builder(videoUrl).setMetadata(metadata).setStreamType(MediaInfo.STREAM_TYPE_BUFFERED).setContentType("video/mp4").build()
MediaInfo mediaInfo = new MediaInfo.Builder(videoUrl)
                        .setMetadata(metadata)
                        .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)
                        .setContentType("video/mp4")
                        .build();
Intent intent = new Intent(MainActivity.this, LocalPlayerActivity.class);
preferences=getPreferences(MODE_PRIVATE)
SharedPreferences preferences = getPreferences(MODE_PRIVATE);
defaultSmsPackage=Telephony.Sms.getDefaultSmsPackage(this)
String defaultSmsPackage = Telephony.Sms.getDefaultSmsPackage(this);
Intent intent = new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
availableAppProvider=EasyCustomTabs.getInstance()
AvailableAppProvider availableAppProvider = EasyCustomTabs.getInstance();
ConnectedClient connectedClient = new ConnectedClient(client);
binder=Binder.newInstance()
Binder binder = Binder.newInstance();
List<Composer> composerList = new ArrayList<>();
customTabsSession=connection.newSession()
CustomTabsSession customTabsSession = connection.newSession();
CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(customTabsSession);
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
context=EasyCustomTabs.getInstance().getContext()
Context context = EasyCustomTabs.getInstance().getContext();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
packagesSupportingCustomTabs=getPackagesSupportingCustomTabs()
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
defaultPackage=getDefaultPackage()
String defaultPackage = getDefaultPackage();
defaultActivityInfo=packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK,0)
ResolveInfo defaultActivityInfo = packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK, 0);
String packageName = defaultActivityInfo.activityInfo.packageName;
resolvedInfoList=packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK,0)
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<String> packagesSupportingCustomTabs = new ArrayList<>();
Intent serviceIntent = new Intent();
bestPackageFinder=BestPackageFinder.newInstance()
BestPackageFinder bestPackageFinder = BestPackageFinder.newInstance();
packageName=bestPackageFinder.findBestPackage()
String packageName = bestPackageFinder.findBestPackage();
resolveInfo=createResolveInfoFor(packageName)
ResolveInfo resolveInfo = createResolveInfoFor(packageName);
ResolveInfo resolveInfo = new ResolveInfo();
List<ResolveInfo> resolveInfoList = new ArrayList<>();
defaultPackageResolveInfo=createResolveInfoFor(packageName)
ResolveInfo defaultPackageResolveInfo = createResolveInfoFor(packageName);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
oldestApiMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage oldestApiMessage = apiMessages.get(apiMessages.size() - 1);
String lastResponseEpochTime = oldestApiMessage.timeStamp;
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
latestMessage=latestMessages.get(latestMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage latestMessage = latestMessages.get(latestMessages.size() - 1);
latestMessageDateTime=convertToLocalDateTime(latestMessage.timeStamp)
LocalDateTime latestMessageDateTime = convertToLocalDateTime(latestMessage.timeStamp);
List<ChannelHistory.Message> messages = new ArrayList<>();
historyFrom=getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1))
LocalDateTime historyFrom = getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1));
historyTo=getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0))
LocalDateTime historyTo = getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0));
String text = apiMessage.text;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
lastMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage lastMessage = apiMessages.get(apiMessages.size() - 1);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
firstMessage=apiMessages.get(0)
ApiPagedChannelHistory.ApiMessage firstMessage = apiMessages.get(0);
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
String slackToken = args[0];
retrofit=new Retrofit.Builder().baseUrl("https://slack.com/api/").addConverterFactory(GsonConverterFactory.create()).build()
Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://slack.com/api/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();
slackWebService=retrofit.create(SlackWebService.class)
SlackWebService slackWebService = retrofit.create(SlackWebService.class);
slackHistoryFetcher=SlackHistoryFetcher.from(slackWebService,slackToken)
SlackHistoryFetcher slackHistoryFetcher = SlackHistoryFetcher.from(slackWebService, slackToken);
start=LocalDateTime.now()
LocalDateTime start = LocalDateTime.now();
end=LocalDateTime.now().minusDays(7)
LocalDateTime end = LocalDateTime.now().minusDays(7);
channelHistory=slackHistoryFetcher.getChannelHistory(start,end)
ChannelHistory channelHistory = slackHistoryFetcher.getChannelHistory(start, end);
HistoryConverter historyConverter = new HistoryConverter();
ApiPagedResponse apiPagedResponse = new ApiPagedResponse(start);
response=fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime())
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
apiPagedChannelHistory=response.body()
ApiPagedChannelHistory apiPagedChannelHistory = response.body();
channelHistory=slackWebService.getChannelHistory(slackToken,channel,lastResponseEpochTime,NUMBER_OF_RESULTS)
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
ApiPagedChannelHistory apiPagedChannelHistory = new ApiPagedChannelHistory();
ApiPagedChannelHistory.ApiMessage apiMessage = new ApiPagedChannelHistory.ApiMessage();
final TextView textView = new TextView(context);
emptyView=findViewById(R.id.empty_view)
View emptyView = findViewById(R.id.empty_view);
final Integer action = values[0];
LoremAdapter loremAdapter = new LoremAdapter();
accounts=accountManager.getAccountsByType(accountType)
Account[] accounts = accountManager.getAccountsByType(accountType);
Bundle result;
Bundle result;
Bundle result = new Bundle();
activity=createLoginIntent(context,accountType,authTokenType,requiredFeatures,options)
Intent activity = createLoginIntent(context, accountType, authTokenType, requiredFeatures, options);
Bundle bundle = new Bundle();
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
accounts=accountManager.getAccountsByType(authTokenType)
Account[] accounts = accountManager.getAccountsByType(authTokenType);
bundle=createResponseBundle(token)
Bundle bundle = createResponseBundle(token);
accountManager=AccountManager.get(this.getApplicationContext())
AccountManager accountManager = AccountManager.get(this.getApplicationContext());
Account account = new Account(token.getUserName(), getAccountName());
Bundle bundle = new Bundle();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
GertHerbAuthenticator authenticator = new GertHerbAuthenticator(this);
fontId=getFontId(context,attrs)
int fontId = getFontId(context, attrs);
fontType=getFontType(fontId)
FontType fontType = getFontType(fontId);
typedArray=context.obtainStyledAttributes(attrs,R.styleable.CustomTextAppearance)
TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CustomTextAppearance);
typeface=createTypeFace(context,fontType)
Typeface typeface = createTypeFace(context, fontType);
info=context.getApplicationInfo()
ApplicationInfo info = context.getApplicationInfo();
name=activity.getTitle().toString()
String name = activity.getTitle().toString();
client=mServer.accept()
Socket client = mServer.accept();
boolean result;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
BufferedReader in = null;
request=in.readLine()
final String request = in.readLine();
String command;
String parameters;
index=request.indexOf(' ')
int index = request.indexOf(' ');
boolean result;
boolean success = true;
BufferedWriter out = null;
index=parameters.indexOf(' ')
int index = parameters.indexOf(' ');
code=parameters.substring(0,index)
final String code = parameters.substring(0, index);
int hashCode = (int) Long.parseLong(code, 16);
window=findWindow(hashCode)
final View window = findWindow(hashCode);
dispatch=ViewDebug.class.getDeclaredMethod("dispatchCommand",View.class,String.class,String.class,OutputStream.class)
final Method dispatch = ViewDebug.class.getDeclaredMethod("dispatchCommand",
                        View.class, String.class, String.class, OutputStream.class);
View window = null;
boolean result = true;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
boolean result = true;
String focusName = null;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
View focusedWindow = null;
BufferedWriter out = null;
boolean needWindowListUpdate = false;
boolean needFocusedWindowUpdate = false;
BetterAccountManager accountManager = new BetterAccountManager(this, getString(R.string.account_type), getString(R.string.token_type), null);
loginView=Views.findById(this,R.id.login_view)
LoginView loginView = Views.findById(this, R.id.login_view);
authorizationApi=new GithubApiFactory().createAuthorizationApi(credentials.username,credentials.password)
GithubApi authorizationApi = new GithubApiFactory().createAuthorizationApi(credentials.username, credentials.password);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
Endpoint endpoint = new Endpoint() {
            @Override
            public String getUrl() {
                return GITHUB_API_URL;
            }

            @Override
            public String getName() {
                return "Live";
            }
        };
interceptor=createAuthorizationRequestInterceptor(username,password)
RequestInterceptor interceptor = createAuthorizationRequestInterceptor(username, password);
restAdapter=createRestAdapter(endpoint,interceptor)
RestAdapter restAdapter = createRestAdapter(endpoint, interceptor);
Dummy dummy = new Dummy();
result=dummy.explodes()
boolean result = dummy.explodes();
String base64EncodedPublicKey = "CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE";
premiumPurchase=inventory.getPurchase(SKU_PREMIUM)
Purchase premiumPurchase = inventory.getPurchase(SKU_PREMIUM);
infiniteGasPurchase=inventory.getPurchase(SKU_INFINITE_GAS)
Purchase infiniteGasPurchase = inventory.getPurchase(SKU_INFINITE_GAS);
gasPurchase=inventory.getPurchase(SKU_GAS)
Purchase gasPurchase = inventory.getPurchase(SKU_GAS);
String payload = "";
String payload = "";
String payload = "";
payload=p.getDeveloperPayload()
String payload = p.getDeveloperPayload();
int index = mTank >= TANK_RES_IDS.length ? TANK_RES_IDS.length - 1 : mTank;
AlertDialog.Builder bld = new AlertDialog.Builder(this);
spe=getPreferences(MODE_PRIVATE).edit()
SharedPreferences.Editor spe = getPreferences(MODE_PRIVATE).edit();
sp=getPreferences(MODE_PRIVATE)
SharedPreferences sp = getPreferences(MODE_PRIVATE);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                                  + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                    | ((source[d + 1 + off] << 24) >>> 16)
                    | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                    | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                                   "-1002:Bad response received/" +
                                   "-1003:Purchase signature verification failed/" +
                                   "-1004:Send intent failed/" +
                                   "-1005:User cancelled/" +
                                   "-1006:Unknown purchase response/" +
                                   "-1007:Missing token/" +
                                   "-1008:Unknown error/" +
                                   "-1009:Subscriptions not available/" +
                                   "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(),
                    itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                        | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                        | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                            | ((source[d + 1 + off] << 24) >>> 16)
                            | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                            | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                "-1002:Bad response received/" +
                "-1003:Purchase signature verification failed/" +
                "-1004:Send intent failed/" +
                "-1005:User cancelled/" +
                "-1006:Unknown purchase response/" +
                "-1007:Missing token/" +
                "-1008:Unknown error/" +
                "-1009:Subscriptions not available/" +
                "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(), itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
responseCode=result.getResponse()
int responseCode = result.getResponse();
sku=purchase.getSku()
String sku = purchase.getSku();
skuDetails=inv.getSkuDetails(sku)
SkuDetails skuDetails = inv.getSkuDetails(sku);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
Button purchaseFiveButton = (Button) rootView.findViewById(R.id.fragment_main_button_purchase_five_coins);
xml=context.obtainStyledAttributes(attrs,R.styleable.LandingStrip)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.LandingStrip);
tabLayoutId=xml.getResourceId(R.styleable.LandingStrip_tabLayoutId,MISSING_TAB_LAYOUT_ID)
int tabLayoutId = xml.getResourceId(R.styleable.LandingStrip_tabLayoutId, MISSING_TAB_LAYOUT_ID);
indicatorColour=xml.getResourceId(R.styleable.LandingStrip_indicatorColor,DEFAULT_INDICATOR_COLOUR)
int indicatorColour = xml.getResourceId(R.styleable.LandingStrip_indicatorColor, DEFAULT_INDICATOR_COLOUR);
indicatorHeight=getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight,DEFAULT_INDICATOR_HEIGHT,xml)
int indicatorHeight = getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight, DEFAULT_INDICATOR_HEIGHT, xml);
tabsPaddingLeft=getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingLeft = getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding, DEFAULT_TABS_PADDING, xml);
tabsPaddingRight=getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingRight = getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding, DEFAULT_TABS_PADDING, xml);
MutableCoordinates drawCurrentTabCoordinates = new MutableCoordinates();
MutableCoordinates drawNextTabCoordinates = new MutableCoordinates();
MutableCoordinates drawMovingIndicatorCoordinates = new MutableCoordinates();
currentTab=tabsContainer.getTabAt(currentPosition)
View currentTab = tabsContainer.getTabAt(currentPosition);
currentTabStart=currentTab.getLeft()
float currentTabStart = currentTab.getLeft();
currentTabEnd=currentTab.getRight()
float currentTabEnd = currentTab.getRight();
nextTab=tabsContainer.getTabAt(currentPosition + 1)
View nextTab = tabsContainer.getTabAt(currentPosition + 1);
nextTabPositionOffset=getFractionFrom(pagePositionOffset)
float nextTabPositionOffset = getFractionFrom(pagePositionOffset);
indicatorStart=getIndicatorPosition(nextTab.getStart(),pagePositionOffset,currentTab.getStart(),nextTabPositionOffset)
float indicatorStart = getIndicatorPosition(nextTab.getStart(), pagePositionOffset, currentTab.getStart(), nextTabPositionOffset);
indicatorEnd=getIndicatorPosition(nextTab.getEnd(),pagePositionOffset,currentTab.getEnd(),nextTabPositionOffset)
float indicatorEnd = getIndicatorPosition(nextTab.getEnd(), pagePositionOffset, currentTab.getEnd(), nextTabPositionOffset);
height=getHeight()
int height = getHeight();
tabCount=pagerAdapter.getCount()
int tabCount = pagerAdapter.getCount();
title=pagerAdapter.getPageTitle(position)
CharSequence title = pagerAdapter.getPageTitle(position);
inflatedTabView=tabsContainer.inflateTab(layoutInflater,attributes.getTabLayoutId())
View inflatedTabView = tabsContainer.inflateTab(layoutInflater, attributes.getTabLayoutId());
int position = (int) view.getTag(TAG_KEY_POSITION);
scrollOffset=getHorizontalScrollOffset(position,positionOffset)
int scrollOffset = getHorizontalScrollOffset(position, positionOffset);
newScrollX=calculateScrollOffset(position,scrollOffset,positionOffset)
float newScrollX = calculateScrollOffset(position, scrollOffset, positionOffset);
tabWidth=tabsContainer.getTabAt(position).getWidth()
int tabWidth = tabsContainer.getTabAt(position).getWidth();
tabForPosition=tabsContainer.getTabAt(position)
View tabForPosition = tabsContainer.getTabAt(position);
float tabStartX = tabForPosition.getLeft() + scrollOffset;
int viewMiddleOffset = getTabParentWidth() / 2;
float tabCenterOffset = (tabForPosition.getRight() - tabForPosition.getLeft()) * 0.5F;
nextTabDelta=getNextTabDelta(position,pagerOffset,tabForPosition)
float nextTabDelta = getNextTabDelta(position, pagerOffset, tabForPosition);
LinearLayout tabsContainerView = new LinearLayout(context);
tab=getTabAt(index)
View tab = getTabAt(index);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
position=indicatorCoordinates.getStart()
float position = indicatorCoordinates.getStart();
lastTabOffset=((ViewGroup)getChildAt(0)).getChildAt(getChildCount() - 1).getWidth()
float lastTabOffset = ((ViewGroup) getChildAt(0)).getChildAt(getChildCount() - 1).getWidth();
frequency=getOneCycle(lastTabOffset)
float frequency = getOneCycle(lastTabOffset);
r=toHex(calculateColour(position,frequency,PHASE_RED,AMPLITUDE,CENTER_FREQUENCY))
String r = toHex(calculateColour(position, frequency, PHASE_RED, AMPLITUDE, CENTER_FREQUENCY));
g=toHex(calculateColour(position,frequency,PHASE_GREEN,AMPLITUDE,CENTER_FREQUENCY))
String g = toHex(calculateColour(position, frequency, PHASE_GREEN, AMPLITUDE, CENTER_FREQUENCY));
b=toHex(calculateColour(position,frequency,PHASE_BLUE,AMPLITUDE,CENTER_FREQUENCY))
String b = toHex(calculateColour(position, frequency, PHASE_BLUE, AMPLITUDE, CENTER_FREQUENCY));
height=getHeight()
int height = getHeight();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPagerFragment viewPagerFragment = new ViewPagerFragment();
Bundle bundle = new Bundle();
TextView view = (TextView) layoutInflater.inflate(R.layout.view_demo, container, false);
currentPosition=viewPagerAdapterState.getCurrentPosition()
int currentPosition = viewPagerAdapterState.getCurrentPosition();
view=getView(container,position)
View view = getView(container, position);
parcelableSparseArray=viewPagerAdapterState.get(position)
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
View view = (View) object;
SparseArray<Parcelable> viewState = new SparseArray<>();
position=entry.getValue()
int position = entry.getValue();
view=entry.getKey()
View view = entry.getKey();
bundle=in.readBundle()
Bundle bundle = in.readBundle();
Map<Integer, SparseArray<Parcelable>> viewStates = new HashMap<>(bundle.keySet().size());
sparseParcelableArray=bundle.getSparseParcelableArray(key)
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
primaryItemPosition=in.readInt()
int primaryItemPosition = in.readInt();
Bundle bundle = new Bundle();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
final TextView abText = (TextView) findViewById(R.id.ab_text);
final AyBe ayBe = new AyBe();
id=item.getItemId()
int id = item.getItemId();
callback=weakCallback.get()
AbTestingParamsLoadedCallback callback = weakCallback.get();
WeakReference<NoLeakActivity> weakNoLeakActivity = new WeakReference<NoLeakActivity>(noLeakActivity);
noLeakActivity=weakNoLeakActivity.get()
NoLeakActivity noLeakActivity = weakNoLeakActivity.get();
RecyclerView recyclerView = (RecyclerView) layoutInflater.inflate(R.layout.view_page, viewGroup, false);
itemView=layoutInflater.inflate(R.layout.view_item,parent,false)
View itemView = layoutInflater.inflate(R.layout.view_item, parent, false);
actual=foo.twice(HALF)
int actual = foo.twice(HALF);
int expected = WHOLE;
final float inverseRatio = 1f - ratio;
float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRatio);
float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRatio);
float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRatio);
hsv=node.getHsv()
float[] hsv = node.getHsv();
width=bitmap.getWidth()
final int width = bitmap.getWidth();
height=bitmap.getHeight()
final int height = bitmap.getHeight();
final int[] rgbPixels = new int[width * height];
final MedianCutQuantizer mcq = new MedianCutQuantizer(rgbPixels, NUM_COLORS);
primaryAccentColor=findPrimaryAccentColor()
final ColorNode primaryAccentColor = findPrimaryAccentColor();
secondaryAccentColor=findSecondaryAccentColor(primaryAccentColor)
final ColorNode secondaryAccentColor = findSecondaryAccentColor(primaryAccentColor);
tertiaryAccentColor=findTertiaryAccentColor(primaryAccentColor,secondaryAccentColor)
final int tertiaryAccentColor = findTertiaryAccentColor(
                primaryAccentColor, secondaryAccentColor);
primaryTextColor=findPrimaryTextColor(primaryAccentColor)
final int primaryTextColor = findPrimaryTextColor(primaryAccentColor);
secondaryTextColor=findSecondaryTextColor(primaryAccentColor)
final int secondaryTextColor = findSecondaryTextColor(primaryAccentColor);
final float primaryHue = primary.getHsv()[0];
final float candidateHue = candidate.getHsv()[0];
copy=Arrays.copyOf(palette,palette.length)
final MedianCutQuantizer.ColorNode[] copy = Arrays.copyOf(palette, palette.length);
maxCount=palette[0].getCount()
final float maxCount = palette[0].getCount();
lhsWeight=calculateWeight(lhs,maxCount)
final float lhsWeight = calculateWeight(lhs, maxCount);
rhsWeight=calculateWeight(rhs,maxCount)
final float rhsWeight = calculateWeight(rhs, maxCount);
float sum = 0;
float sumWeight = 0;
float value = values[i];
float weight = values[i + 1];
ColorHistogram colorHist = new ColorHistogram(pixels);
K=colorHist.getNumberOfColors()
int K = colorHist.getNumberOfColors();
ColorNode[] rCols = null;
rgb=colorHist.getColor(i)
int rgb = colorHist.getColor(i);
cnt=colorHist.getCount(i)
int cnt = colorHist.getCount(i);
ColorBox initialBox = new ColorBox(0, K - 1, 0);
List<ColorBox> colorSet = new ArrayList<ColorBox>();
int k = 1;
boolean done = false;
nextBox=findBoxToSplit(colorSet)
ColorBox nextBox = findBoxToSplit(colorSet);
newBox=nextBox.splitBox()
ColorBox newBox = nextBox.splitBox();
color=findClosestColor(pixels[i])
ColorNode color = findClosestColor(pixels[i]);
idx=findClosestColorIndex(rgb)
int idx = findClosestColorIndex(rgb);
red=Color.red(rgb)
int red = Color.red(rgb);
grn=Color.green(rgb)
int grn = Color.green(rgb);
blu=Color.blue(rgb)
int blu = Color.blue(rgb);
int minIdx = 0;
int minDistance = Integer.MAX_VALUE;
ColorNode color = quantColors[i];
d2=color.distance2(red,grn,blu)
int d2 = color.distance2(red, grn, blu);
ColorBox boxToSplit = null;
int minLevel = Integer.MAX_VALUE;
n=colorBoxes.size()
int n = colorBoxes.size();
ColorNode[] avgColors = new ColorNode[n];
int i = 0;
int dr = this.red - red;
int dg = this.grn - grn;
int db = this.blu - blu;
ColorNode color = imageColors[i];
int r = color.red;
int g = color.grn;
int b = color.blu;
dim=getLongestColorDimension()
ColorDimension dim = getLongestColorDimension();
med=findMedian(dim)
int med = findMedian(dim);
int nextLevel = level + 1;
ColorBox newBox = new ColorBox(med + 1, upper, nextLevel);
int rLength = rmax - rmin;
int gLength = gmax - gmin;
int bLength = bmax - bmin;
int half = count / 2;
int nPixels, median;
int rSum = 0;
int gSum = 0;
int bSum = 0;
int n = 0;
ColorNode ci = imageColors[i];
int cnt = ci.cnt;
double nd = n;
int avgRed = (int) (0.5 + rSum / nd);
int avgGrn = (int) (0.5 + gSum / nd);
int avgBlu = (int) (0.5 + bSum / nd);
s=this.getClass().getSimpleName()
String s = this.getClass().getSimpleName();
int i = 0;
int N = pixelsOrig.length;
int[] pixelsCpy = new int[N];
int k = -1;
int curColor = -1;
int nColors = k + 1;
id=item.getItemId()
int id = item.getItemId();
Intent intent = new Intent();
bitmap=((BitmapDrawable)imageView.getDrawable()).getBitmap()
Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap();
DominantColorCalculator dominantColorCalculator = new DominantColorCalculator(bitmap);
selectedImageUri=data.getData()
Uri selectedImageUri = data.getData();
selectedImagePath=getPath(selectedImageUri)
String selectedImagePath = getPath(selectedImageUri);
String[] projection = {MediaStore.Images.Media.DATA};
cursor=managedQuery(uri,projection,null,null,null)
Cursor cursor = managedQuery(uri, projection, null, null, null);
column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)
int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
LinearLayout rootView = (LinearLayout) inflater.inflate(R.layout.fragment_main, container, false);
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
preapprovalButton=payPal.getCheckoutButton(getActivity(),PayPal.BUTTON_194x37,CheckoutButton.TEXT_PAY)
CheckoutButton preapprovalButton = payPal.getCheckoutButton(getActivity(), PayPal.BUTTON_194x37, CheckoutButton.TEXT_PAY);
preapprovalIntent=payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY)
Intent preapprovalIntent = payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY);
String resultTitle = "";
String resultInfo = "";
String resultExtra = "";
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
PayPalPreapproval preapproval = new PayPalPreapproval();
preapproval=createPreapproval(preapprovalKey)
PayPalPreapproval preapproval = createPreapproval(preapprovalKey);
Bundle bundle = new Bundle();
int availableLength = maxLength;
StringBuilder stringBuilder = new StringBuilder(maxLength);
prefixAndSuffixLength=computeAppendedLengthIncludingSeparatorSpaces(prefix,suffix)
int prefixAndSuffixLength = computeAppendedLengthIncludingSeparatorSpaces(prefix, suffix);
urlLength=computeUrlLengthIncludingSeparatorSpace(url)
int urlLength = computeUrlLengthIncludingSeparatorSpace(url);
trimmedSubject=ellipsizeTextIfExceedsMaxLength(subject,availableLength)
String trimmedSubject = ellipsizeTextIfExceedsMaxLength(subject, availableLength);
int length = 0;
preferences=context.getSharedPreferences(MRU_PREFERENCES,Context.MODE_PRIVATE)
SharedPreferences preferences = context.getSharedPreferences(MRU_PREFERENCES, Context.MODE_PRIVATE);
args=getArguments()
Bundle args = getArguments();
themeResId=getThemeResIdIfProvidedIn(args)
int themeResId = getThemeResIdIfProvidedIn(args);
title=getTitleIfProvidedIn(args)
CharSequence title = getTitleIfProvidedIn(args);
builder=createDialogBuilder(themeResId).setCancelable(true).setView(dialogView)
AlertDialog.Builder builder = createDialogBuilder(themeResId)
                .setCancelable(true)
                .setView(dialogView);
inflater=getActivity().getLayoutInflater()
LayoutInflater inflater = getActivity().getLayoutInflater();
GridView gridView = (GridView) rootView.findViewById(R.id.ps__dialog_grid);
targetApps=extractTargetAppsFrom(args)
TargetApps targetApps = extractTargetAppsFrom(args);
allShareTargets=getAvailableShareTargets(sharingIntent)
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
priorityAppInfos=createPriorityResolveInfoList(targetApps,allShareTargets)
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
otherAppInfos=createOtherAppsResolveInfoList(priorityAppInfos,allShareTargets)
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
resolveInfos=targetApps.extractTargetResolveInfosFrom(allShareTargets)
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
mruResolveInfo=findMruResolveInfoIn(allShareTargets)
ResolveInfo mruResolveInfo = findMruResolveInfoIn(allShareTargets);
List<ResolveInfo> otherAppsInfos = new ArrayList<ResolveInfo>(allAppInfos);
mruPackageName=persister.getLastUsedTarget()
String mruPackageName = persister.getLastUsedTarget();
String packageName = resolveInfo.activityInfo.packageName;
packageManager=getActivity().getPackageManager()
PackageManager packageManager = getActivity().getPackageManager();
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
View buttonStrip = (View) showMoreButton.getParent();
gridView=getGridView()
GridView gridView = getGridView();
intent=wrapIntentWithExplicitTargetComponentForItem(position,sharingIntent)
Intent intent = wrapIntentWithExplicitTargetComponentForItem(position, sharingIntent);
Intent intent = new Intent(sharingIntent);
ActivityInfo activity = adapter.getItem(position).activityInfo;
ComponentName name = new ComponentName(activity.applicationInfo.packageName, activity.name);
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
PriorityShareDialog dialog = new PriorityShareDialog();
Bundle args = new Bundle();
sharingIntent=createSharingIntent()
Intent sharingIntent = createSharingIntent();
fragmentManager=activity.getFragmentManager()
FragmentManager fragmentManager = activity.getFragmentManager();
Intent intent = new Intent(Intent.ACTION_SEND);
dialog=new PriorityShareDialog.Builder().setTitle(title).setTargetApps(targetApps).setSharingIntent(sharingIntent).setOnPrepareSharingIntentListener(listener).setShowMostRecentlyUsed(showMostRecentlyUsed).build()
PriorityShareDialog dialog = new PriorityShareDialog.Builder()
                .setTitle(title)
                .setTargetApps(targetApps)
                .setSharingIntent(sharingIntent)
                .setOnPrepareSharingIntentListener(listener)
                .setShowMostRecentlyUsed(showMostRecentlyUsed)
                .build();
PrioritySharer prioritySharer = new PrioritySharer();
prioritySharer=build()
PrioritySharer prioritySharer = build();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
layoutInflater=LayoutInflater.from(context)
LayoutInflater layoutInflater = LayoutInflater.from(context);
iconSizePx=getIconSizePx(context.getResources())
int iconSizePx = getIconSizePx(context.getResources());
ArrayList<ResolveInfo> sortedList = new ArrayList<ResolveInfo>(resolveInfoList);
int otherAppsCountMaybe = showAllApps ? otherAppInfos.size() : 0;
firstOtherAppsItemPosition=priorityAppInfos.size()
int firstOtherAppsItemPosition = priorityAppInfos.size();
int offsetPosition = position - firstOtherAppsItemPosition;
TextView textView;
textView=initializeItemViewIfNecessary(convertView,R.layout.ps__grid_item_share,parent)
TextView textView = initializeItemViewIfNecessary(convertView, R.layout.ps__grid_item_share, parent);
info=getItem(position)
ResolveInfo info = getItem(position);
icon=info.loadIcon(packageManager)
Drawable icon = info.loadIcon(packageManager);
arraySize=in.readInt()
int arraySize = in.readInt();
String[] packageNames = new String[arraySize];
arraySize=targetPackages.size()
int arraySize = targetPackages.size();
String[] packagesArray = new String[arraySize];
SparseArray<ResolveInfo> matchedResolveInfos = new SparseArray<ResolveInfo>(targetPackages.size());
String packageName = info.activityInfo.packageName;
index=indexOfItemInto(packageName,targetPackages)
int index = indexOfItemInto(packageName, targetPackages);
sparseArraySize=sparseArray.size()
int sparseArraySize = sparseArray.size();
ArrayList<T> list = new ArrayList<T>(sparseArraySize);
int i = 0;
originalSubject=intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT)
CharSequence originalSubject = intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT);
String subject = originalSubject != null ? originalSubject.toString() : null;
composer=createComposer()
MessageComposer composer = createComposer();
component=intent.getComponent()
ComponentName component = intent.getComponent();
targetPackageName=component.getPackageName()
String targetPackageName = component.getPackageName();
adapter=ArrayAdapter.createFromResource(this,R.array.target_apps,android.R.layout.simple_spinner_item)
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
EditText text = (EditText) findViewById(R.id.text);
EditText title = (EditText) findViewById(R.id.title);
EditText mimeType = (EditText) findViewById(R.id.mime_type);
EditText dataUri = (EditText) findViewById(R.id.data_uri);
Switch showMostRecentlyUsed = (Switch) findViewById(R.id.show_most_recently_used);
uriString=dataUri.getText().toString()
String uriString = dataUri.getText().toString();
EditText text = (EditText) findViewById(R.id.text);
TextView textView = (TextView) convertView.findViewById(R.id.positionView);
colorView=convertView.findViewById(R.id.colorView)
View colorView = convertView.findViewById(R.id.colorView);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
offset=headerPlaceholder.getTop()
int offset = headerPlaceholder.getTop();
Integer item = COLORS[position];
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
firstVisiblePosition=grid.getFirstVisiblePosition()
int firstVisiblePosition = grid.getFirstVisiblePosition();
inflate=getViewForPosition(container,position)
View inflate = getViewForPosition(container, position);
id=item.getItemId()
int id = item.getItemId();
MyActivity activity = new MyActivity();
String manifestProperty = "../app/src/main/AndroidManifest.xml";
String resProperty = "../app/src/main/res";
cursor=resolver.query(uri,projection,selection,selectionArgs,null)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, null);
cursor=resolver.query(uri,projection,selection,selectionArgs,sortOrder)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, sortOrder);
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=richClass.setter(name)
Method setter = richClass.setter(name);
T obj;
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=methodsByName.get(name)
Method setter = methodsByName.get(name);
int type = TYPE_INT;
Class<?> t = setter.getParameterTypes()[0];
Class<?> t = setter.getParameterTypes()[0];
cursorType=cursor.getType(index)
final int cursorType = cursor.getType(index);
final Object obj;
s=f.getAnnotation(Mapper.class)
Mapper s = f.getAnnotation(Mapper.class);
mm=m.getAnnotation(Mapper.class)
Mapper mm = m.getAnnotation(Mapper.class);
methodName=StringUtil.asCamelifySetMethod(what)
String methodName = StringUtil.asCamelifySetMethod(what);
cursor=getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,null,null,null,null)
Cursor cursor = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
now=System.currentTimeMillis()
long now = System.currentTimeMillis();
List<Contact2> typedCursor = new CursorList<Contact2>(cursor, Contact2.class);
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[a-zA-Z0-9]+")
Pattern p = Pattern.compile("[a-zA-Z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[A-Z][a-z0-9]+")
Pattern p = Pattern.compile("[A-Z][a-z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
SurfaceView first = (SurfaceView) findViewById(R.id.firstSurface);
SurfaceView second = (SurfaceView) findViewById(R.id.secondSurface);
Intent pickVideo = new Intent(Intent.ACTION_PICK);
xml=context.obtainStyledAttributes(attrs,R.styleable.RelativeLayoutWithForeground)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.RelativeLayoutWithForeground);
int foregroundResId = INVALID_FOREGROUND_ID;
drawable=getDrawable(getResources(),foregroundResId)
Drawable drawable = getDrawable(getResources(), foregroundResId);
Bundle args = new Bundle();
enroll=mHotwordDetector.createEnrollIntent()
Intent enroll = mHotwordDetector.createEnrollIntent();

Diff of 2c8b0159c542dc63216edac7d2cc1e434f87425f and dc0b498077be7a79d8cf6a45d4e89991ed34803a:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 3
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 2c8b0159c542dc63216edac7d2cc1e434f87425f to dc0b498077be7a79d8cf6a45d4e89991ed34803a


****Parsing for addition at revision dc0b498077be7a79d8cf6a45d4e89991ed34803a****

Added AccessibilityServices.java to .\/spikes\ repository source files.
Added Action.java to .\/spikes\ repository source files.
Added Actions.java to .\/spikes\ repository source files.
Added AccessibilityServicesActivity.java to .\/spikes\ repository source files.
Added Demo.java to .\/spikes\ repository source files.
Added DemoAdapter.java to .\/spikes\ repository source files.
Added CustomActionsActivity.java to .\/spikes\ repository source files.
Added TweetView.java to .\/spikes\ repository source files.
Added DemosActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added DrawerActivity.java to .\/spikes\ repository source files.
Added EarthActivity.java to .\/spikes\ repository source files.
Added ProHaxDrawerActivity.java to .\/spikes\ repository source files.
Added SaturnActivity.java to .\/spikes\ repository source files.
Added LocalPlayerActivity.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added CastApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ComposeSmsActivity.java to .\/spikes\ repository source files.
Added HeadlessSmsSendService.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MmsReceiver.java to .\/spikes\ repository source files.
Added SmsReceiver.java to .\/spikes\ repository source files.
Added ExtendedDemoActivity.java to .\/spikes\ repository source files.
Added ExtendedDemoApplication.java to .\/spikes\ repository source files.
Added SimpleDemoActivity.java to .\/spikes\ repository source files.
Added SimpleDemoApplication.java to .\/spikes\ repository source files.
Added Binder.java to .\/spikes\ repository source files.
Added ConnectedClient.java to .\/spikes\ repository source files.
Added Connection.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnection.java to .\/spikes\ repository source files.
Added ServiceConnectionCallback.java to .\/spikes\ repository source files.
Added EasyCustomTabs.java to .\/spikes\ repository source files.
Added ActionButtonComposer.java to .\/spikes\ repository source files.
Added CloseButtonIconComposer.java to .\/spikes\ repository source files.
Added Composer.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilder.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigator.java to .\/spikes\ repository source files.
Added EasyCustomTabsWebNavigator.java to .\/spikes\ repository source files.
Added ExitAnimationsComposer.java to .\/spikes\ repository source files.
Added IntentCustomizer.java to .\/spikes\ repository source files.
Added MenuItemComposer.java to .\/spikes\ repository source files.
Added NavigationFallback.java to .\/spikes\ repository source files.
Added Navigator.java to .\/spikes\ repository source files.
Added ShowTitleComposer.java to .\/spikes\ repository source files.
Added StartAnimationsComposer.java to .\/spikes\ repository source files.
Added ToolbarColorComposer.java to .\/spikes\ repository source files.
Added UrlBarHidingComposer.java to .\/spikes\ repository source files.
Added WebNavigator.java to .\/spikes\ repository source files.
Added AvailableAppProvider.java to .\/spikes\ repository source files.
Added BestPackageFinder.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProvider.java to .\/spikes\ repository source files.
Added BinderTest.java to .\/spikes\ repository source files.
Added ConnectedClientTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnectionTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigatorTest.java to .\/spikes\ repository source files.
Added BestPackageFinderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProviderTest.java to .\/spikes\ repository source files.
Added ApiPagedChannelHistory.java to .\/spikes\ repository source files.
Added ApiPagedResponse.java to .\/spikes\ repository source files.
Added ChannelHistory.java to .\/spikes\ repository source files.
Added HistoryConverter.java to .\/spikes\ repository source files.
Added Runner.java to .\/spikes\ repository source files.
Added SlackHistoryFetcher.java to .\/spikes\ repository source files.
Added SlackWebService.java to .\/spikes\ repository source files.
Added ApiPagedResponseTest.java to .\/spikes\ repository source files.
Added MainActivityTest.java to .\/spikes\ repository source files.
Added LoremAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added BetterAccountManager.java to .\/spikes\ repository source files.
Added BetterAuthenticator.java to .\/spikes\ repository source files.
Added BetterAuthenticatorActivity.java to .\/spikes\ repository source files.
Added GertHerbAuthenticator.java to .\/spikes\ repository source files.
Added GertHerbAuthenticatorService.java to .\/spikes\ repository source files.
Added NoAccountException.java to .\/spikes\ repository source files.
Added ReactiveAuthenticatorActivity.java to .\/spikes\ repository source files.
Added Token.java to .\/spikes\ repository source files.
Added GertHerbActivity.java to .\/spikes\ repository source files.
Added GertHerbApplication.java to .\/spikes\ repository source files.
Added GertHerbAuthenticationActivity.java to .\/spikes\ repository source files.
Added TypefaceFactory.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added ViewServer.java to .\/spikes\ repository source files.
Added ViewServerManager.java to .\/spikes\ repository source files.
Added DeveloperError.java to .\/spikes\ repository source files.
Added HomeActivity.java to .\/spikes\ repository source files.
Added LoginActivity.java to .\/spikes\ repository source files.
Added LoginView.java to .\/spikes\ repository source files.
Added UserCredentials.java to .\/spikes\ repository source files.
Added FontButton.java to .\/spikes\ repository source files.
Added FontEditText.java to .\/spikes\ repository source files.
Added FontTextView.java to .\/spikes\ repository source files.
Added GithubApi.java to .\/spikes\ repository source files.
Added GithubApiFactory.java to .\/spikes\ repository source files.
Added TokenRequest.java to .\/spikes\ repository source files.
Added TokenResponse.java to .\/spikes\ repository source files.
Added Dummy.java to .\/spikes\ repository source files.
Added DummyTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MainFragment.java to .\/spikes\ repository source files.
Added Attributes.java to .\/spikes\ repository source files.
Added Coordinates.java to .\/spikes\ repository source files.
Added IndicatorCoordinatesCalculator.java to .\/spikes\ repository source files.
Added LandingStrip.java to .\/spikes\ repository source files.
Added MutableCoordinates.java to .\/spikes\ repository source files.
Added OnPagerAdapterChangedListener.java to .\/spikes\ repository source files.
Added PagerAdapterObserver.java to .\/spikes\ repository source files.
Added Scrollable.java to .\/spikes\ repository source files.
Added ScrollingPageChangeListener.java to .\/spikes\ repository source files.
Added State.java to .\/spikes\ repository source files.
Added TabsContainer.java to .\/spikes\ repository source files.
Added CustomLandingStrip.java to .\/spikes\ repository source files.
Added CustomTabActivity.java to .\/spikes\ repository source files.
Added ExampleRainbowLandingStrip.java to .\/spikes\ repository source files.
Added FixedWidthTabActivity.java to .\/spikes\ repository source files.
Added NoFragmentsSimpleTextTabActivity.java to .\/spikes\ repository source files.
Added Data.java to .\/spikes\ repository source files.
Added DemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added SmallDemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerFragment.java to .\/spikes\ repository source files.
Added DemoViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapterState.java to .\/spikes\ repository source files.
Added SimpleTextTabActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AbTestingParamsLoadedCallback.java to .\/spikes\ repository source files.
Added AyBe.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added WeakStartCallback.java to .\/spikes\ repository source files.
Added LeakActivity.java to .\/spikes\ repository source files.
Added NoLeakActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added Bar.java to .\/spikes\ repository source files.
Added Foo.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added FooTest.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added ColorScheme.java to .\/spikes\ repository source files.
Added ColorUtils.java to .\/spikes\ repository source files.
Added DominantColorCalculator.java to .\/spikes\ repository source files.
Added FloatUtils.java to .\/spikes\ repository source files.
Added MedianCutQuantizer.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added PayPalFragment.java to .\/spikes\ repository source files.
Added PayPalHelper.java to .\/spikes\ repository source files.
Added MaxLengthMessageComposer.java to .\/spikes\ repository source files.
Added MessageComposer.java to .\/spikes\ repository source files.
Added TwitterMessageComposer.java to .\/spikes\ repository source files.
Added DisabledMruPersister.java to .\/spikes\ repository source files.
Added MruPersister.java to .\/spikes\ repository source files.
Added SharedPreferencesMruPersister.java to .\/spikes\ repository source files.
Added OnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added PriorityShareDialog.java to .\/spikes\ repository source files.
Added PrioritySharer.java to .\/spikes\ repository source files.
Added ShareTargetsAdapter.java to .\/spikes\ repository source files.
Added SimpleOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added TargetApps.java to .\/spikes\ repository source files.
Added TwitterOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AdvancedActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SimpleActivity.java to .\/spikes\ repository source files.
Added LockingActivity.java to .\/spikes\ repository source files.
Added PostLockingActivity.java to .\/spikes\ repository source files.
Added PreLockingActivity.java to .\/spikes\ repository source files.
Added DummyAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added NovoStaggeredGridView.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SpikeApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SwipeableView.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MyClass.java to .\/spikes\ repository source files.
Added MyClassTest.java to .\/spikes\ repository source files.
Added MyAndroidClassTest.java to .\/spikes\ repository source files.
Added RobolectricGradleTestRunner.java to .\/spikes\ repository source files.
Added Mapper.java to .\/spikes\ repository source files.
Added Query.java to .\/spikes\ repository source files.
Added TypedResolver.java to .\/spikes\ repository source files.
Added CursorList.java to .\/spikes\ repository source files.
Added CursorListIterator.java to .\/spikes\ repository source files.
Added CursorMarshaller.java to .\/spikes\ repository source files.
Added EmptyListIterator.java to .\/spikes\ repository source files.
Added ReflectionCursorMarshaller.java to .\/spikes\ repository source files.
Added RichClass.java to .\/spikes\ repository source files.
Added Setter.java to .\/spikes\ repository source files.
Added Function.java to .\/spikes\ repository source files.
Added TypedElementLoader.java to .\/spikes\ repository source files.
Added TypedLoader.java to .\/spikes\ repository source files.
Added Marshaller.java to .\/spikes\ repository source files.
Added ObjectMapper.java to .\/spikes\ repository source files.
Added TypedActivity.java to .\/spikes\ repository source files.
Added StringUtil.java to .\/spikes\ repository source files.
Added MyObject.java to .\/spikes\ repository source files.
Added MediaPlayerSwitcherActivity.java to .\/spikes\ repository source files.
Added VideoPlayerService.java to .\/spikes\ repository source files.
Added RelativeLayoutWithForeground.java to .\/spikes\ repository source files.
Added DemoActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added RecognitionService.java to .\/spikes\ repository source files.
Added SessionService.java to .\/spikes\ repository source files.
Added SettingsActivity.java to .\/spikes\ repository source files.
Added SmartContextInteractionService.java to .\/spikes\ repository source files.
AccessibilityManager accessibilityManager = (AccessibilityManager) context.getSystemService(Context.ACCESSIBILITY_SERVICE);
enabledServices=getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN)
List<AccessibilityServiceInfo> enabledServices = getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN);
List<AccessibilityServiceInfo> enabledServices = getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN);
Action otherAction = (Action) o;
int result = id;
Actions otherActions = (Actions) o;
View view = convertView;
demo=getItem(position)
Demo demo = getItem(position);
Intent intent = new Intent(context, demo.activityClass);
layoutInflater=LayoutInflater.from(parent.getContext())
LayoutInflater layoutInflater = LayoutInflater.from(parent.getContext());
TweetView tweetView = (TweetView) findViewById(R.id.tweet);
ListView listView = ((ListView) findViewById(R.id.list));
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
final DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close) {

            @Override
            public void onDrawerClosed(View drawerView) {
                super.onDrawerClosed(drawerView);
                // waiting for the drawer to close, then navigating seems to cause issue.
                // why wait for the drawer to close? jankiness.
                if (pendingNavigationClick != null) {
                    startActivity(pendingNavigationClick);
                    pendingNavigationClick = null;
                }
            }

        };
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close);
Intent intent;
b=getIntent().getExtras()
Bundle b = getIntent().getExtras();
mShouldStartPlayback=b.getBoolean("shouldStart")
boolean mShouldStartPlayback = b.getBoolean("shouldStart");
startPosition=b.getInt("startPosition",0)
int startPosition = b.getInt("startPosition", 0);
currentPos=mVideoView.getCurrentPosition()
int currentPos = mVideoView.getCurrentPosition();
String msg;
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, mDisplaySize.y + getActionBar().getHeight());
mm=mSelectedMedia.getMetadata()
MediaMetadata mm = mSelectedMedia.getMetadata();
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, (int) (mDisplaySize.x * ASPECT_RATIO));
WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
width=display.getWidth()
int width = display.getWidth();
height=display.getHeight()
int height = display.getHeight();
int resourceId = 0;
String videoUrl = "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4#sthash.rJ5rPZy8.dpuf";
String title = "Jahre Philharmonie";
String description = "Awesome film you must watch!";
String author = "Blundell";
String thumbUrl = "http://www.ustream.tv/blog/wp-content/uploads/2013/10/simply-go-live.png";
MediaMetadata metadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE);
mediaInfo=new MediaInfo.Builder(videoUrl).setMetadata(metadata).setStreamType(MediaInfo.STREAM_TYPE_BUFFERED).setContentType("video/mp4").build()
MediaInfo mediaInfo = new MediaInfo.Builder(videoUrl)
                        .setMetadata(metadata)
                        .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)
                        .setContentType("video/mp4")
                        .build();
Intent intent = new Intent(MainActivity.this, LocalPlayerActivity.class);
preferences=getPreferences(MODE_PRIVATE)
SharedPreferences preferences = getPreferences(MODE_PRIVATE);
defaultSmsPackage=Telephony.Sms.getDefaultSmsPackage(this)
String defaultSmsPackage = Telephony.Sms.getDefaultSmsPackage(this);
Intent intent = new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
availableAppProvider=EasyCustomTabs.getInstance()
AvailableAppProvider availableAppProvider = EasyCustomTabs.getInstance();
ConnectedClient connectedClient = new ConnectedClient(client);
binder=Binder.newInstance()
Binder binder = Binder.newInstance();
List<Composer> composerList = new ArrayList<>();
customTabsSession=connection.newSession()
CustomTabsSession customTabsSession = connection.newSession();
CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(customTabsSession);
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
context=EasyCustomTabs.getInstance().getContext()
Context context = EasyCustomTabs.getInstance().getContext();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
packagesSupportingCustomTabs=getPackagesSupportingCustomTabs()
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
defaultPackage=getDefaultPackage()
String defaultPackage = getDefaultPackage();
defaultActivityInfo=packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK,0)
ResolveInfo defaultActivityInfo = packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK, 0);
String packageName = defaultActivityInfo.activityInfo.packageName;
resolvedInfoList=packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK,0)
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<String> packagesSupportingCustomTabs = new ArrayList<>();
Intent serviceIntent = new Intent();
bestPackageFinder=BestPackageFinder.newInstance()
BestPackageFinder bestPackageFinder = BestPackageFinder.newInstance();
packageName=bestPackageFinder.findBestPackage()
String packageName = bestPackageFinder.findBestPackage();
resolveInfo=createResolveInfoFor(packageName)
ResolveInfo resolveInfo = createResolveInfoFor(packageName);
ResolveInfo resolveInfo = new ResolveInfo();
List<ResolveInfo> resolveInfoList = new ArrayList<>();
defaultPackageResolveInfo=createResolveInfoFor(packageName)
ResolveInfo defaultPackageResolveInfo = createResolveInfoFor(packageName);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
oldestApiMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage oldestApiMessage = apiMessages.get(apiMessages.size() - 1);
String lastResponseEpochTime = oldestApiMessage.timeStamp;
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
latestMessage=latestMessages.get(latestMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage latestMessage = latestMessages.get(latestMessages.size() - 1);
latestMessageDateTime=convertToLocalDateTime(latestMessage.timeStamp)
LocalDateTime latestMessageDateTime = convertToLocalDateTime(latestMessage.timeStamp);
List<ChannelHistory.Message> messages = new ArrayList<>();
historyFrom=getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1))
LocalDateTime historyFrom = getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1));
historyTo=getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0))
LocalDateTime historyTo = getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0));
String text = apiMessage.text;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
lastMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage lastMessage = apiMessages.get(apiMessages.size() - 1);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
firstMessage=apiMessages.get(0)
ApiPagedChannelHistory.ApiMessage firstMessage = apiMessages.get(0);
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
String slackToken = args[0];
retrofit=new Retrofit.Builder().baseUrl("https://slack.com/api/").addConverterFactory(GsonConverterFactory.create()).build()
Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://slack.com/api/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();
slackWebService=retrofit.create(SlackWebService.class)
SlackWebService slackWebService = retrofit.create(SlackWebService.class);
slackHistoryFetcher=SlackHistoryFetcher.from(slackWebService,slackToken)
SlackHistoryFetcher slackHistoryFetcher = SlackHistoryFetcher.from(slackWebService, slackToken);
start=LocalDateTime.now()
LocalDateTime start = LocalDateTime.now();
end=LocalDateTime.now().minusDays(7)
LocalDateTime end = LocalDateTime.now().minusDays(7);
channelHistory=slackHistoryFetcher.getChannelHistory(start,end)
ChannelHistory channelHistory = slackHistoryFetcher.getChannelHistory(start, end);
HistoryConverter historyConverter = new HistoryConverter();
ApiPagedResponse apiPagedResponse = new ApiPagedResponse(start);
response=fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime())
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
apiPagedChannelHistory=response.body()
ApiPagedChannelHistory apiPagedChannelHistory = response.body();
channelHistory=slackWebService.getChannelHistory(slackToken,channel,lastResponseEpochTime,NUMBER_OF_RESULTS)
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
ApiPagedChannelHistory apiPagedChannelHistory = new ApiPagedChannelHistory();
ApiPagedChannelHistory.ApiMessage apiMessage = new ApiPagedChannelHistory.ApiMessage();
final TextView textView = new TextView(context);
emptyView=findViewById(R.id.empty_view)
View emptyView = findViewById(R.id.empty_view);
final Integer action = values[0];
LoremAdapter loremAdapter = new LoremAdapter();
accounts=accountManager.getAccountsByType(accountType)
Account[] accounts = accountManager.getAccountsByType(accountType);
Bundle result;
Bundle result;
Bundle result = new Bundle();
activity=createLoginIntent(context,accountType,authTokenType,requiredFeatures,options)
Intent activity = createLoginIntent(context, accountType, authTokenType, requiredFeatures, options);
Bundle bundle = new Bundle();
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
accounts=accountManager.getAccountsByType(authTokenType)
Account[] accounts = accountManager.getAccountsByType(authTokenType);
bundle=createResponseBundle(token)
Bundle bundle = createResponseBundle(token);
accountManager=AccountManager.get(this.getApplicationContext())
AccountManager accountManager = AccountManager.get(this.getApplicationContext());
Account account = new Account(token.getUserName(), getAccountName());
Bundle bundle = new Bundle();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
GertHerbAuthenticator authenticator = new GertHerbAuthenticator(this);
fontId=getFontId(context,attrs)
int fontId = getFontId(context, attrs);
fontType=getFontType(fontId)
FontType fontType = getFontType(fontId);
typedArray=context.obtainStyledAttributes(attrs,R.styleable.CustomTextAppearance)
TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CustomTextAppearance);
typeface=createTypeFace(context,fontType)
Typeface typeface = createTypeFace(context, fontType);
info=context.getApplicationInfo()
ApplicationInfo info = context.getApplicationInfo();
name=activity.getTitle().toString()
String name = activity.getTitle().toString();
client=mServer.accept()
Socket client = mServer.accept();
boolean result;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
BufferedReader in = null;
request=in.readLine()
final String request = in.readLine();
String command;
String parameters;
index=request.indexOf(' ')
int index = request.indexOf(' ');
boolean result;
boolean success = true;
BufferedWriter out = null;
index=parameters.indexOf(' ')
int index = parameters.indexOf(' ');
code=parameters.substring(0,index)
final String code = parameters.substring(0, index);
int hashCode = (int) Long.parseLong(code, 16);
window=findWindow(hashCode)
final View window = findWindow(hashCode);
dispatch=ViewDebug.class.getDeclaredMethod("dispatchCommand",View.class,String.class,String.class,OutputStream.class)
final Method dispatch = ViewDebug.class.getDeclaredMethod("dispatchCommand",
                        View.class, String.class, String.class, OutputStream.class);
View window = null;
boolean result = true;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
boolean result = true;
String focusName = null;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
View focusedWindow = null;
BufferedWriter out = null;
boolean needWindowListUpdate = false;
boolean needFocusedWindowUpdate = false;
BetterAccountManager accountManager = new BetterAccountManager(this, getString(R.string.account_type), getString(R.string.token_type), null);
loginView=Views.findById(this,R.id.login_view)
LoginView loginView = Views.findById(this, R.id.login_view);
authorizationApi=new GithubApiFactory().createAuthorizationApi(credentials.username,credentials.password)
GithubApi authorizationApi = new GithubApiFactory().createAuthorizationApi(credentials.username, credentials.password);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
Endpoint endpoint = new Endpoint() {
            @Override
            public String getUrl() {
                return GITHUB_API_URL;
            }

            @Override
            public String getName() {
                return "Live";
            }
        };
interceptor=createAuthorizationRequestInterceptor(username,password)
RequestInterceptor interceptor = createAuthorizationRequestInterceptor(username, password);
restAdapter=createRestAdapter(endpoint,interceptor)
RestAdapter restAdapter = createRestAdapter(endpoint, interceptor);
Dummy dummy = new Dummy();
result=dummy.explodes()
boolean result = dummy.explodes();
String base64EncodedPublicKey = "CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE";
premiumPurchase=inventory.getPurchase(SKU_PREMIUM)
Purchase premiumPurchase = inventory.getPurchase(SKU_PREMIUM);
infiniteGasPurchase=inventory.getPurchase(SKU_INFINITE_GAS)
Purchase infiniteGasPurchase = inventory.getPurchase(SKU_INFINITE_GAS);
gasPurchase=inventory.getPurchase(SKU_GAS)
Purchase gasPurchase = inventory.getPurchase(SKU_GAS);
String payload = "";
String payload = "";
String payload = "";
payload=p.getDeveloperPayload()
String payload = p.getDeveloperPayload();
int index = mTank >= TANK_RES_IDS.length ? TANK_RES_IDS.length - 1 : mTank;
AlertDialog.Builder bld = new AlertDialog.Builder(this);
spe=getPreferences(MODE_PRIVATE).edit()
SharedPreferences.Editor spe = getPreferences(MODE_PRIVATE).edit();
sp=getPreferences(MODE_PRIVATE)
SharedPreferences sp = getPreferences(MODE_PRIVATE);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                                  + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                    | ((source[d + 1 + off] << 24) >>> 16)
                    | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                    | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                                   "-1002:Bad response received/" +
                                   "-1003:Purchase signature verification failed/" +
                                   "-1004:Send intent failed/" +
                                   "-1005:User cancelled/" +
                                   "-1006:Unknown purchase response/" +
                                   "-1007:Missing token/" +
                                   "-1008:Unknown error/" +
                                   "-1009:Subscriptions not available/" +
                                   "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(),
                    itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                        | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                        | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                            | ((source[d + 1 + off] << 24) >>> 16)
                            | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                            | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                "-1002:Bad response received/" +
                "-1003:Purchase signature verification failed/" +
                "-1004:Send intent failed/" +
                "-1005:User cancelled/" +
                "-1006:Unknown purchase response/" +
                "-1007:Missing token/" +
                "-1008:Unknown error/" +
                "-1009:Subscriptions not available/" +
                "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(), itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
responseCode=result.getResponse()
int responseCode = result.getResponse();
sku=purchase.getSku()
String sku = purchase.getSku();
skuDetails=inv.getSkuDetails(sku)
SkuDetails skuDetails = inv.getSkuDetails(sku);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
Button purchaseFiveButton = (Button) rootView.findViewById(R.id.fragment_main_button_purchase_five_coins);
xml=context.obtainStyledAttributes(attrs,R.styleable.LandingStrip)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.LandingStrip);
tabLayoutId=xml.getResourceId(R.styleable.LandingStrip_tabLayoutId,MISSING_TAB_LAYOUT_ID)
int tabLayoutId = xml.getResourceId(R.styleable.LandingStrip_tabLayoutId, MISSING_TAB_LAYOUT_ID);
indicatorColour=xml.getResourceId(R.styleable.LandingStrip_indicatorColor,DEFAULT_INDICATOR_COLOUR)
int indicatorColour = xml.getResourceId(R.styleable.LandingStrip_indicatorColor, DEFAULT_INDICATOR_COLOUR);
indicatorHeight=getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight,DEFAULT_INDICATOR_HEIGHT,xml)
int indicatorHeight = getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight, DEFAULT_INDICATOR_HEIGHT, xml);
tabsPaddingLeft=getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingLeft = getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding, DEFAULT_TABS_PADDING, xml);
tabsPaddingRight=getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingRight = getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding, DEFAULT_TABS_PADDING, xml);
MutableCoordinates drawCurrentTabCoordinates = new MutableCoordinates();
MutableCoordinates drawNextTabCoordinates = new MutableCoordinates();
MutableCoordinates drawMovingIndicatorCoordinates = new MutableCoordinates();
currentTab=tabsContainer.getTabAt(currentPosition)
View currentTab = tabsContainer.getTabAt(currentPosition);
currentTabStart=currentTab.getLeft()
float currentTabStart = currentTab.getLeft();
currentTabEnd=currentTab.getRight()
float currentTabEnd = currentTab.getRight();
nextTab=tabsContainer.getTabAt(currentPosition + 1)
View nextTab = tabsContainer.getTabAt(currentPosition + 1);
nextTabPositionOffset=getFractionFrom(pagePositionOffset)
float nextTabPositionOffset = getFractionFrom(pagePositionOffset);
indicatorStart=getIndicatorPosition(nextTab.getStart(),pagePositionOffset,currentTab.getStart(),nextTabPositionOffset)
float indicatorStart = getIndicatorPosition(nextTab.getStart(), pagePositionOffset, currentTab.getStart(), nextTabPositionOffset);
indicatorEnd=getIndicatorPosition(nextTab.getEnd(),pagePositionOffset,currentTab.getEnd(),nextTabPositionOffset)
float indicatorEnd = getIndicatorPosition(nextTab.getEnd(), pagePositionOffset, currentTab.getEnd(), nextTabPositionOffset);
height=getHeight()
int height = getHeight();
tabCount=pagerAdapter.getCount()
int tabCount = pagerAdapter.getCount();
title=pagerAdapter.getPageTitle(position)
CharSequence title = pagerAdapter.getPageTitle(position);
inflatedTabView=tabsContainer.inflateTab(layoutInflater,attributes.getTabLayoutId())
View inflatedTabView = tabsContainer.inflateTab(layoutInflater, attributes.getTabLayoutId());
int position = (int) view.getTag(TAG_KEY_POSITION);
scrollOffset=getHorizontalScrollOffset(position,positionOffset)
int scrollOffset = getHorizontalScrollOffset(position, positionOffset);
newScrollX=calculateScrollOffset(position,scrollOffset,positionOffset)
float newScrollX = calculateScrollOffset(position, scrollOffset, positionOffset);
tabWidth=tabsContainer.getTabAt(position).getWidth()
int tabWidth = tabsContainer.getTabAt(position).getWidth();
tabForPosition=tabsContainer.getTabAt(position)
View tabForPosition = tabsContainer.getTabAt(position);
float tabStartX = tabForPosition.getLeft() + scrollOffset;
int viewMiddleOffset = getTabParentWidth() / 2;
float tabCenterOffset = (tabForPosition.getRight() - tabForPosition.getLeft()) * 0.5F;
nextTabDelta=getNextTabDelta(position,pagerOffset,tabForPosition)
float nextTabDelta = getNextTabDelta(position, pagerOffset, tabForPosition);
LinearLayout tabsContainerView = new LinearLayout(context);
tab=getTabAt(index)
View tab = getTabAt(index);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
position=indicatorCoordinates.getStart()
float position = indicatorCoordinates.getStart();
lastTabOffset=((ViewGroup)getChildAt(0)).getChildAt(getChildCount() - 1).getWidth()
float lastTabOffset = ((ViewGroup) getChildAt(0)).getChildAt(getChildCount() - 1).getWidth();
frequency=getOneCycle(lastTabOffset)
float frequency = getOneCycle(lastTabOffset);
r=toHex(calculateColour(position,frequency,PHASE_RED,AMPLITUDE,CENTER_FREQUENCY))
String r = toHex(calculateColour(position, frequency, PHASE_RED, AMPLITUDE, CENTER_FREQUENCY));
g=toHex(calculateColour(position,frequency,PHASE_GREEN,AMPLITUDE,CENTER_FREQUENCY))
String g = toHex(calculateColour(position, frequency, PHASE_GREEN, AMPLITUDE, CENTER_FREQUENCY));
b=toHex(calculateColour(position,frequency,PHASE_BLUE,AMPLITUDE,CENTER_FREQUENCY))
String b = toHex(calculateColour(position, frequency, PHASE_BLUE, AMPLITUDE, CENTER_FREQUENCY));
height=getHeight()
int height = getHeight();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPagerFragment viewPagerFragment = new ViewPagerFragment();
Bundle bundle = new Bundle();
TextView view = (TextView) layoutInflater.inflate(R.layout.view_demo, container, false);
currentPosition=viewPagerAdapterState.getCurrentPosition()
int currentPosition = viewPagerAdapterState.getCurrentPosition();
view=getView(container,position)
View view = getView(container, position);
parcelableSparseArray=viewPagerAdapterState.get(position)
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
View view = (View) object;
SparseArray<Parcelable> viewState = new SparseArray<>();
position=entry.getValue()
int position = entry.getValue();
view=entry.getKey()
View view = entry.getKey();
bundle=in.readBundle()
Bundle bundle = in.readBundle();
Map<Integer, SparseArray<Parcelable>> viewStates = new HashMap<>(bundle.keySet().size());
sparseParcelableArray=bundle.getSparseParcelableArray(key)
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
primaryItemPosition=in.readInt()
int primaryItemPosition = in.readInt();
Bundle bundle = new Bundle();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
final TextView abText = (TextView) findViewById(R.id.ab_text);
final AyBe ayBe = new AyBe();
id=item.getItemId()
int id = item.getItemId();
callback=weakCallback.get()
AbTestingParamsLoadedCallback callback = weakCallback.get();
WeakReference<NoLeakActivity> weakNoLeakActivity = new WeakReference<NoLeakActivity>(noLeakActivity);
noLeakActivity=weakNoLeakActivity.get()
NoLeakActivity noLeakActivity = weakNoLeakActivity.get();
RecyclerView recyclerView = (RecyclerView) layoutInflater.inflate(R.layout.view_page, viewGroup, false);
itemView=layoutInflater.inflate(R.layout.view_item,parent,false)
View itemView = layoutInflater.inflate(R.layout.view_item, parent, false);
actual=foo.twice(HALF)
int actual = foo.twice(HALF);
int expected = WHOLE;
final float inverseRatio = 1f - ratio;
float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRatio);
float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRatio);
float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRatio);
hsv=node.getHsv()
float[] hsv = node.getHsv();
width=bitmap.getWidth()
final int width = bitmap.getWidth();
height=bitmap.getHeight()
final int height = bitmap.getHeight();
final int[] rgbPixels = new int[width * height];
final MedianCutQuantizer mcq = new MedianCutQuantizer(rgbPixels, NUM_COLORS);
primaryAccentColor=findPrimaryAccentColor()
final ColorNode primaryAccentColor = findPrimaryAccentColor();
secondaryAccentColor=findSecondaryAccentColor(primaryAccentColor)
final ColorNode secondaryAccentColor = findSecondaryAccentColor(primaryAccentColor);
tertiaryAccentColor=findTertiaryAccentColor(primaryAccentColor,secondaryAccentColor)
final int tertiaryAccentColor = findTertiaryAccentColor(
                primaryAccentColor, secondaryAccentColor);
primaryTextColor=findPrimaryTextColor(primaryAccentColor)
final int primaryTextColor = findPrimaryTextColor(primaryAccentColor);
secondaryTextColor=findSecondaryTextColor(primaryAccentColor)
final int secondaryTextColor = findSecondaryTextColor(primaryAccentColor);
final float primaryHue = primary.getHsv()[0];
final float candidateHue = candidate.getHsv()[0];
copy=Arrays.copyOf(palette,palette.length)
final MedianCutQuantizer.ColorNode[] copy = Arrays.copyOf(palette, palette.length);
maxCount=palette[0].getCount()
final float maxCount = palette[0].getCount();
lhsWeight=calculateWeight(lhs,maxCount)
final float lhsWeight = calculateWeight(lhs, maxCount);
rhsWeight=calculateWeight(rhs,maxCount)
final float rhsWeight = calculateWeight(rhs, maxCount);
float sum = 0;
float sumWeight = 0;
float value = values[i];
float weight = values[i + 1];
ColorHistogram colorHist = new ColorHistogram(pixels);
K=colorHist.getNumberOfColors()
int K = colorHist.getNumberOfColors();
ColorNode[] rCols = null;
rgb=colorHist.getColor(i)
int rgb = colorHist.getColor(i);
cnt=colorHist.getCount(i)
int cnt = colorHist.getCount(i);
ColorBox initialBox = new ColorBox(0, K - 1, 0);
List<ColorBox> colorSet = new ArrayList<ColorBox>();
int k = 1;
boolean done = false;
nextBox=findBoxToSplit(colorSet)
ColorBox nextBox = findBoxToSplit(colorSet);
newBox=nextBox.splitBox()
ColorBox newBox = nextBox.splitBox();
color=findClosestColor(pixels[i])
ColorNode color = findClosestColor(pixels[i]);
idx=findClosestColorIndex(rgb)
int idx = findClosestColorIndex(rgb);
red=Color.red(rgb)
int red = Color.red(rgb);
grn=Color.green(rgb)
int grn = Color.green(rgb);
blu=Color.blue(rgb)
int blu = Color.blue(rgb);
int minIdx = 0;
int minDistance = Integer.MAX_VALUE;
ColorNode color = quantColors[i];
d2=color.distance2(red,grn,blu)
int d2 = color.distance2(red, grn, blu);
ColorBox boxToSplit = null;
int minLevel = Integer.MAX_VALUE;
n=colorBoxes.size()
int n = colorBoxes.size();
ColorNode[] avgColors = new ColorNode[n];
int i = 0;
int dr = this.red - red;
int dg = this.grn - grn;
int db = this.blu - blu;
ColorNode color = imageColors[i];
int r = color.red;
int g = color.grn;
int b = color.blu;
dim=getLongestColorDimension()
ColorDimension dim = getLongestColorDimension();
med=findMedian(dim)
int med = findMedian(dim);
int nextLevel = level + 1;
ColorBox newBox = new ColorBox(med + 1, upper, nextLevel);
int rLength = rmax - rmin;
int gLength = gmax - gmin;
int bLength = bmax - bmin;
int half = count / 2;
int nPixels, median;
int rSum = 0;
int gSum = 0;
int bSum = 0;
int n = 0;
ColorNode ci = imageColors[i];
int cnt = ci.cnt;
double nd = n;
int avgRed = (int) (0.5 + rSum / nd);
int avgGrn = (int) (0.5 + gSum / nd);
int avgBlu = (int) (0.5 + bSum / nd);
s=this.getClass().getSimpleName()
String s = this.getClass().getSimpleName();
int i = 0;
int N = pixelsOrig.length;
int[] pixelsCpy = new int[N];
int k = -1;
int curColor = -1;
int nColors = k + 1;
id=item.getItemId()
int id = item.getItemId();
Intent intent = new Intent();
bitmap=((BitmapDrawable)imageView.getDrawable()).getBitmap()
Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap();
DominantColorCalculator dominantColorCalculator = new DominantColorCalculator(bitmap);
selectedImageUri=data.getData()
Uri selectedImageUri = data.getData();
selectedImagePath=getPath(selectedImageUri)
String selectedImagePath = getPath(selectedImageUri);
String[] projection = {MediaStore.Images.Media.DATA};
cursor=managedQuery(uri,projection,null,null,null)
Cursor cursor = managedQuery(uri, projection, null, null, null);
column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)
int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
LinearLayout rootView = (LinearLayout) inflater.inflate(R.layout.fragment_main, container, false);
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
preapprovalButton=payPal.getCheckoutButton(getActivity(),PayPal.BUTTON_194x37,CheckoutButton.TEXT_PAY)
CheckoutButton preapprovalButton = payPal.getCheckoutButton(getActivity(), PayPal.BUTTON_194x37, CheckoutButton.TEXT_PAY);
preapprovalIntent=payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY)
Intent preapprovalIntent = payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY);
String resultTitle = "";
String resultInfo = "";
String resultExtra = "";
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
PayPalPreapproval preapproval = new PayPalPreapproval();
preapproval=createPreapproval(preapprovalKey)
PayPalPreapproval preapproval = createPreapproval(preapprovalKey);
Bundle bundle = new Bundle();
int availableLength = maxLength;
StringBuilder stringBuilder = new StringBuilder(maxLength);
prefixAndSuffixLength=computeAppendedLengthIncludingSeparatorSpaces(prefix,suffix)
int prefixAndSuffixLength = computeAppendedLengthIncludingSeparatorSpaces(prefix, suffix);
urlLength=computeUrlLengthIncludingSeparatorSpace(url)
int urlLength = computeUrlLengthIncludingSeparatorSpace(url);
trimmedSubject=ellipsizeTextIfExceedsMaxLength(subject,availableLength)
String trimmedSubject = ellipsizeTextIfExceedsMaxLength(subject, availableLength);
int length = 0;
preferences=context.getSharedPreferences(MRU_PREFERENCES,Context.MODE_PRIVATE)
SharedPreferences preferences = context.getSharedPreferences(MRU_PREFERENCES, Context.MODE_PRIVATE);
args=getArguments()
Bundle args = getArguments();
themeResId=getThemeResIdIfProvidedIn(args)
int themeResId = getThemeResIdIfProvidedIn(args);
title=getTitleIfProvidedIn(args)
CharSequence title = getTitleIfProvidedIn(args);
builder=createDialogBuilder(themeResId).setCancelable(true).setView(dialogView)
AlertDialog.Builder builder = createDialogBuilder(themeResId)
                .setCancelable(true)
                .setView(dialogView);
inflater=getActivity().getLayoutInflater()
LayoutInflater inflater = getActivity().getLayoutInflater();
GridView gridView = (GridView) rootView.findViewById(R.id.ps__dialog_grid);
targetApps=extractTargetAppsFrom(args)
TargetApps targetApps = extractTargetAppsFrom(args);
allShareTargets=getAvailableShareTargets(sharingIntent)
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
priorityAppInfos=createPriorityResolveInfoList(targetApps,allShareTargets)
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
otherAppInfos=createOtherAppsResolveInfoList(priorityAppInfos,allShareTargets)
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
resolveInfos=targetApps.extractTargetResolveInfosFrom(allShareTargets)
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
mruResolveInfo=findMruResolveInfoIn(allShareTargets)
ResolveInfo mruResolveInfo = findMruResolveInfoIn(allShareTargets);
List<ResolveInfo> otherAppsInfos = new ArrayList<ResolveInfo>(allAppInfos);
mruPackageName=persister.getLastUsedTarget()
String mruPackageName = persister.getLastUsedTarget();
String packageName = resolveInfo.activityInfo.packageName;
packageManager=getActivity().getPackageManager()
PackageManager packageManager = getActivity().getPackageManager();
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
View buttonStrip = (View) showMoreButton.getParent();
gridView=getGridView()
GridView gridView = getGridView();
intent=wrapIntentWithExplicitTargetComponentForItem(position,sharingIntent)
Intent intent = wrapIntentWithExplicitTargetComponentForItem(position, sharingIntent);
Intent intent = new Intent(sharingIntent);
ActivityInfo activity = adapter.getItem(position).activityInfo;
ComponentName name = new ComponentName(activity.applicationInfo.packageName, activity.name);
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
PriorityShareDialog dialog = new PriorityShareDialog();
Bundle args = new Bundle();
sharingIntent=createSharingIntent()
Intent sharingIntent = createSharingIntent();
fragmentManager=activity.getFragmentManager()
FragmentManager fragmentManager = activity.getFragmentManager();
Intent intent = new Intent(Intent.ACTION_SEND);
dialog=new PriorityShareDialog.Builder().setTitle(title).setTargetApps(targetApps).setSharingIntent(sharingIntent).setOnPrepareSharingIntentListener(listener).setShowMostRecentlyUsed(showMostRecentlyUsed).build()
PriorityShareDialog dialog = new PriorityShareDialog.Builder()
                .setTitle(title)
                .setTargetApps(targetApps)
                .setSharingIntent(sharingIntent)
                .setOnPrepareSharingIntentListener(listener)
                .setShowMostRecentlyUsed(showMostRecentlyUsed)
                .build();
PrioritySharer prioritySharer = new PrioritySharer();
prioritySharer=build()
PrioritySharer prioritySharer = build();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
layoutInflater=LayoutInflater.from(context)
LayoutInflater layoutInflater = LayoutInflater.from(context);
iconSizePx=getIconSizePx(context.getResources())
int iconSizePx = getIconSizePx(context.getResources());
ArrayList<ResolveInfo> sortedList = new ArrayList<ResolveInfo>(resolveInfoList);
int otherAppsCountMaybe = showAllApps ? otherAppInfos.size() : 0;
firstOtherAppsItemPosition=priorityAppInfos.size()
int firstOtherAppsItemPosition = priorityAppInfos.size();
int offsetPosition = position - firstOtherAppsItemPosition;
TextView textView;
textView=initializeItemViewIfNecessary(convertView,R.layout.ps__grid_item_share,parent)
TextView textView = initializeItemViewIfNecessary(convertView, R.layout.ps__grid_item_share, parent);
info=getItem(position)
ResolveInfo info = getItem(position);
icon=info.loadIcon(packageManager)
Drawable icon = info.loadIcon(packageManager);
arraySize=in.readInt()
int arraySize = in.readInt();
String[] packageNames = new String[arraySize];
arraySize=targetPackages.size()
int arraySize = targetPackages.size();
String[] packagesArray = new String[arraySize];
SparseArray<ResolveInfo> matchedResolveInfos = new SparseArray<ResolveInfo>(targetPackages.size());
String packageName = info.activityInfo.packageName;
index=indexOfItemInto(packageName,targetPackages)
int index = indexOfItemInto(packageName, targetPackages);
sparseArraySize=sparseArray.size()
int sparseArraySize = sparseArray.size();
ArrayList<T> list = new ArrayList<T>(sparseArraySize);
int i = 0;
originalSubject=intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT)
CharSequence originalSubject = intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT);
String subject = originalSubject != null ? originalSubject.toString() : null;
composer=createComposer()
MessageComposer composer = createComposer();
component=intent.getComponent()
ComponentName component = intent.getComponent();
targetPackageName=component.getPackageName()
String targetPackageName = component.getPackageName();
adapter=ArrayAdapter.createFromResource(this,R.array.target_apps,android.R.layout.simple_spinner_item)
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
EditText text = (EditText) findViewById(R.id.text);
EditText title = (EditText) findViewById(R.id.title);
EditText mimeType = (EditText) findViewById(R.id.mime_type);
EditText dataUri = (EditText) findViewById(R.id.data_uri);
Switch showMostRecentlyUsed = (Switch) findViewById(R.id.show_most_recently_used);
uriString=dataUri.getText().toString()
String uriString = dataUri.getText().toString();
EditText text = (EditText) findViewById(R.id.text);
TextView textView = (TextView) convertView.findViewById(R.id.positionView);
colorView=convertView.findViewById(R.id.colorView)
View colorView = convertView.findViewById(R.id.colorView);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
offset=headerPlaceholder.getTop()
int offset = headerPlaceholder.getTop();
Integer item = COLORS[position];
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
firstVisiblePosition=grid.getFirstVisiblePosition()
int firstVisiblePosition = grid.getFirstVisiblePosition();
inflate=getViewForPosition(container,position)
View inflate = getViewForPosition(container, position);
id=item.getItemId()
int id = item.getItemId();
MyActivity activity = new MyActivity();
String manifestProperty = "../app/src/main/AndroidManifest.xml";
String resProperty = "../app/src/main/res";
cursor=resolver.query(uri,projection,selection,selectionArgs,null)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, null);
cursor=resolver.query(uri,projection,selection,selectionArgs,sortOrder)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, sortOrder);
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=richClass.setter(name)
Method setter = richClass.setter(name);
T obj;
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=methodsByName.get(name)
Method setter = methodsByName.get(name);
int type = TYPE_INT;
Class<?> t = setter.getParameterTypes()[0];
Class<?> t = setter.getParameterTypes()[0];
cursorType=cursor.getType(index)
final int cursorType = cursor.getType(index);
final Object obj;
s=f.getAnnotation(Mapper.class)
Mapper s = f.getAnnotation(Mapper.class);
mm=m.getAnnotation(Mapper.class)
Mapper mm = m.getAnnotation(Mapper.class);
methodName=StringUtil.asCamelifySetMethod(what)
String methodName = StringUtil.asCamelifySetMethod(what);
cursor=getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,null,null,null,null)
Cursor cursor = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
now=System.currentTimeMillis()
long now = System.currentTimeMillis();
List<Contact2> typedCursor = new CursorList<Contact2>(cursor, Contact2.class);
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[a-zA-Z0-9]+")
Pattern p = Pattern.compile("[a-zA-Z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[A-Z][a-z0-9]+")
Pattern p = Pattern.compile("[A-Z][a-z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
SurfaceView first = (SurfaceView) findViewById(R.id.firstSurface);
SurfaceView second = (SurfaceView) findViewById(R.id.secondSurface);
Intent pickVideo = new Intent(Intent.ACTION_PICK);
xml=context.obtainStyledAttributes(attrs,R.styleable.RelativeLayoutWithForeground)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.RelativeLayoutWithForeground);
int foregroundResId = INVALID_FOREGROUND_ID;
drawable=getDrawable(getResources(),foregroundResId)
Drawable drawable = getDrawable(getResources(), foregroundResId);
Bundle args = new Bundle();
enroll=mHotwordDetector.createEnrollIntent()
Intent enroll = mHotwordDetector.createEnrollIntent();

Diff of dc0b498077be7a79d8cf6a45d4e89991ed34803a and fa423ea387abb6e92b48170109ad2c21b0dd36b5:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 3
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision dc0b498077be7a79d8cf6a45d4e89991ed34803a to fa423ea387abb6e92b48170109ad2c21b0dd36b5


****Parsing for addition at revision fa423ea387abb6e92b48170109ad2c21b0dd36b5****

Added AccessibilityServices.java to .\/spikes\ repository source files.
Added Action.java to .\/spikes\ repository source files.
Added AccessibilityServicesActivity.java to .\/spikes\ repository source files.
Added Demo.java to .\/spikes\ repository source files.
Added DemoAdapter.java to .\/spikes\ repository source files.
Added CustomActionsActivity.java to .\/spikes\ repository source files.
Added TweetView.java to .\/spikes\ repository source files.
Added DemosActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added DrawerActivity.java to .\/spikes\ repository source files.
Added EarthActivity.java to .\/spikes\ repository source files.
Added ProHaxDrawerActivity.java to .\/spikes\ repository source files.
Added SaturnActivity.java to .\/spikes\ repository source files.
Added LocalPlayerActivity.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added CastApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ComposeSmsActivity.java to .\/spikes\ repository source files.
Added HeadlessSmsSendService.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MmsReceiver.java to .\/spikes\ repository source files.
Added SmsReceiver.java to .\/spikes\ repository source files.
Added ExtendedDemoActivity.java to .\/spikes\ repository source files.
Added ExtendedDemoApplication.java to .\/spikes\ repository source files.
Added SimpleDemoActivity.java to .\/spikes\ repository source files.
Added SimpleDemoApplication.java to .\/spikes\ repository source files.
Added Binder.java to .\/spikes\ repository source files.
Added ConnectedClient.java to .\/spikes\ repository source files.
Added Connection.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnection.java to .\/spikes\ repository source files.
Added ServiceConnectionCallback.java to .\/spikes\ repository source files.
Added EasyCustomTabs.java to .\/spikes\ repository source files.
Added ActionButtonComposer.java to .\/spikes\ repository source files.
Added CloseButtonIconComposer.java to .\/spikes\ repository source files.
Added Composer.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilder.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigator.java to .\/spikes\ repository source files.
Added EasyCustomTabsWebNavigator.java to .\/spikes\ repository source files.
Added ExitAnimationsComposer.java to .\/spikes\ repository source files.
Added IntentCustomizer.java to .\/spikes\ repository source files.
Added MenuItemComposer.java to .\/spikes\ repository source files.
Added NavigationFallback.java to .\/spikes\ repository source files.
Added Navigator.java to .\/spikes\ repository source files.
Added ShowTitleComposer.java to .\/spikes\ repository source files.
Added StartAnimationsComposer.java to .\/spikes\ repository source files.
Added ToolbarColorComposer.java to .\/spikes\ repository source files.
Added UrlBarHidingComposer.java to .\/spikes\ repository source files.
Added WebNavigator.java to .\/spikes\ repository source files.
Added AvailableAppProvider.java to .\/spikes\ repository source files.
Added BestPackageFinder.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProvider.java to .\/spikes\ repository source files.
Added BinderTest.java to .\/spikes\ repository source files.
Added ConnectedClientTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnectionTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigatorTest.java to .\/spikes\ repository source files.
Added BestPackageFinderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProviderTest.java to .\/spikes\ repository source files.
Added ApiPagedChannelHistory.java to .\/spikes\ repository source files.
Added ApiPagedResponse.java to .\/spikes\ repository source files.
Added ChannelHistory.java to .\/spikes\ repository source files.
Added HistoryConverter.java to .\/spikes\ repository source files.
Added Runner.java to .\/spikes\ repository source files.
Added SlackHistoryFetcher.java to .\/spikes\ repository source files.
Added SlackWebService.java to .\/spikes\ repository source files.
Added ApiPagedResponseTest.java to .\/spikes\ repository source files.
Added MainActivityTest.java to .\/spikes\ repository source files.
Added LoremAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added BetterAccountManager.java to .\/spikes\ repository source files.
Added BetterAuthenticator.java to .\/spikes\ repository source files.
Added BetterAuthenticatorActivity.java to .\/spikes\ repository source files.
Added GertHerbAuthenticator.java to .\/spikes\ repository source files.
Added GertHerbAuthenticatorService.java to .\/spikes\ repository source files.
Added NoAccountException.java to .\/spikes\ repository source files.
Added ReactiveAuthenticatorActivity.java to .\/spikes\ repository source files.
Added Token.java to .\/spikes\ repository source files.
Added GertHerbActivity.java to .\/spikes\ repository source files.
Added GertHerbApplication.java to .\/spikes\ repository source files.
Added GertHerbAuthenticationActivity.java to .\/spikes\ repository source files.
Added TypefaceFactory.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added ViewServer.java to .\/spikes\ repository source files.
Added ViewServerManager.java to .\/spikes\ repository source files.
Added DeveloperError.java to .\/spikes\ repository source files.
Added HomeActivity.java to .\/spikes\ repository source files.
Added LoginActivity.java to .\/spikes\ repository source files.
Added LoginView.java to .\/spikes\ repository source files.
Added UserCredentials.java to .\/spikes\ repository source files.
Added FontButton.java to .\/spikes\ repository source files.
Added FontEditText.java to .\/spikes\ repository source files.
Added FontTextView.java to .\/spikes\ repository source files.
Added GithubApi.java to .\/spikes\ repository source files.
Added GithubApiFactory.java to .\/spikes\ repository source files.
Added TokenRequest.java to .\/spikes\ repository source files.
Added TokenResponse.java to .\/spikes\ repository source files.
Added Dummy.java to .\/spikes\ repository source files.
Added DummyTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MainFragment.java to .\/spikes\ repository source files.
Added Attributes.java to .\/spikes\ repository source files.
Added Coordinates.java to .\/spikes\ repository source files.
Added IndicatorCoordinatesCalculator.java to .\/spikes\ repository source files.
Added LandingStrip.java to .\/spikes\ repository source files.
Added MutableCoordinates.java to .\/spikes\ repository source files.
Added OnPagerAdapterChangedListener.java to .\/spikes\ repository source files.
Added PagerAdapterObserver.java to .\/spikes\ repository source files.
Added Scrollable.java to .\/spikes\ repository source files.
Added ScrollingPageChangeListener.java to .\/spikes\ repository source files.
Added State.java to .\/spikes\ repository source files.
Added TabsContainer.java to .\/spikes\ repository source files.
Added CustomLandingStrip.java to .\/spikes\ repository source files.
Added CustomTabActivity.java to .\/spikes\ repository source files.
Added ExampleRainbowLandingStrip.java to .\/spikes\ repository source files.
Added FixedWidthTabActivity.java to .\/spikes\ repository source files.
Added NoFragmentsSimpleTextTabActivity.java to .\/spikes\ repository source files.
Added Data.java to .\/spikes\ repository source files.
Added DemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added SmallDemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerFragment.java to .\/spikes\ repository source files.
Added DemoViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapterState.java to .\/spikes\ repository source files.
Added SimpleTextTabActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AbTestingParamsLoadedCallback.java to .\/spikes\ repository source files.
Added AyBe.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added WeakStartCallback.java to .\/spikes\ repository source files.
Added LeakActivity.java to .\/spikes\ repository source files.
Added NoLeakActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added Bar.java to .\/spikes\ repository source files.
Added Foo.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added FooTest.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added ColorScheme.java to .\/spikes\ repository source files.
Added ColorUtils.java to .\/spikes\ repository source files.
Added DominantColorCalculator.java to .\/spikes\ repository source files.
Added FloatUtils.java to .\/spikes\ repository source files.
Added MedianCutQuantizer.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added PayPalFragment.java to .\/spikes\ repository source files.
Added PayPalHelper.java to .\/spikes\ repository source files.
Added MaxLengthMessageComposer.java to .\/spikes\ repository source files.
Added MessageComposer.java to .\/spikes\ repository source files.
Added TwitterMessageComposer.java to .\/spikes\ repository source files.
Added DisabledMruPersister.java to .\/spikes\ repository source files.
Added MruPersister.java to .\/spikes\ repository source files.
Added SharedPreferencesMruPersister.java to .\/spikes\ repository source files.
Added OnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added PriorityShareDialog.java to .\/spikes\ repository source files.
Added PrioritySharer.java to .\/spikes\ repository source files.
Added ShareTargetsAdapter.java to .\/spikes\ repository source files.
Added SimpleOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added TargetApps.java to .\/spikes\ repository source files.
Added TwitterOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AdvancedActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SimpleActivity.java to .\/spikes\ repository source files.
Added LockingActivity.java to .\/spikes\ repository source files.
Added PostLockingActivity.java to .\/spikes\ repository source files.
Added PreLockingActivity.java to .\/spikes\ repository source files.
Added DummyAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added NovoStaggeredGridView.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SpikeApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SwipeableView.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MyClass.java to .\/spikes\ repository source files.
Added MyClassTest.java to .\/spikes\ repository source files.
Added MyAndroidClassTest.java to .\/spikes\ repository source files.
Added RobolectricGradleTestRunner.java to .\/spikes\ repository source files.
Added Mapper.java to .\/spikes\ repository source files.
Added Query.java to .\/spikes\ repository source files.
Added TypedResolver.java to .\/spikes\ repository source files.
Added CursorList.java to .\/spikes\ repository source files.
Added CursorListIterator.java to .\/spikes\ repository source files.
Added CursorMarshaller.java to .\/spikes\ repository source files.
Added EmptyListIterator.java to .\/spikes\ repository source files.
Added ReflectionCursorMarshaller.java to .\/spikes\ repository source files.
Added RichClass.java to .\/spikes\ repository source files.
Added Setter.java to .\/spikes\ repository source files.
Added Function.java to .\/spikes\ repository source files.
Added TypedElementLoader.java to .\/spikes\ repository source files.
Added TypedLoader.java to .\/spikes\ repository source files.
Added Marshaller.java to .\/spikes\ repository source files.
Added ObjectMapper.java to .\/spikes\ repository source files.
Added TypedActivity.java to .\/spikes\ repository source files.
Added StringUtil.java to .\/spikes\ repository source files.
Added MyObject.java to .\/spikes\ repository source files.
Added MediaPlayerSwitcherActivity.java to .\/spikes\ repository source files.
Added VideoPlayerService.java to .\/spikes\ repository source files.
Added RelativeLayoutWithForeground.java to .\/spikes\ repository source files.
Added DemoActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added RecognitionService.java to .\/spikes\ repository source files.
Added SessionService.java to .\/spikes\ repository source files.
Added SettingsActivity.java to .\/spikes\ repository source files.
Added SmartContextInteractionService.java to .\/spikes\ repository source files.
AccessibilityManager accessibilityManager = (AccessibilityManager) context.getSystemService(Context.ACCESSIBILITY_SERVICE);
enabledServices=getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN)
List<AccessibilityServiceInfo> enabledServices = getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN);
List<AccessibilityServiceInfo> enabledServices = getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN);
Action action = (Action) o;
int result = id;

 Generics pattern public class Action was added at revision fa423ea387abb6e92b48170109ad2c21b0dd36b5

View view = convertView;
demo=getItem(position)
Demo demo = getItem(position);
Intent intent = new Intent(context, demo.activityClass);
layoutInflater=LayoutInflater.from(parent.getContext())
LayoutInflater layoutInflater = LayoutInflater.from(parent.getContext());
TweetView tweetView = (TweetView) findViewById(R.id.tweet);
ListView listView = ((ListView) findViewById(R.id.list));
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
final DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close) {

            @Override
            public void onDrawerClosed(View drawerView) {
                super.onDrawerClosed(drawerView);
                // waiting for the drawer to close, then navigating seems to cause issue.
                // why wait for the drawer to close? jankiness.
                if (pendingNavigationClick != null) {
                    startActivity(pendingNavigationClick);
                    pendingNavigationClick = null;
                }
            }

        };
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close);
Intent intent;
b=getIntent().getExtras()
Bundle b = getIntent().getExtras();
mShouldStartPlayback=b.getBoolean("shouldStart")
boolean mShouldStartPlayback = b.getBoolean("shouldStart");
startPosition=b.getInt("startPosition",0)
int startPosition = b.getInt("startPosition", 0);
currentPos=mVideoView.getCurrentPosition()
int currentPos = mVideoView.getCurrentPosition();
String msg;
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, mDisplaySize.y + getActionBar().getHeight());
mm=mSelectedMedia.getMetadata()
MediaMetadata mm = mSelectedMedia.getMetadata();
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, (int) (mDisplaySize.x * ASPECT_RATIO));
WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
width=display.getWidth()
int width = display.getWidth();
height=display.getHeight()
int height = display.getHeight();
int resourceId = 0;
String videoUrl = "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4#sthash.rJ5rPZy8.dpuf";
String title = "Jahre Philharmonie";
String description = "Awesome film you must watch!";
String author = "Blundell";
String thumbUrl = "http://www.ustream.tv/blog/wp-content/uploads/2013/10/simply-go-live.png";
MediaMetadata metadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE);
mediaInfo=new MediaInfo.Builder(videoUrl).setMetadata(metadata).setStreamType(MediaInfo.STREAM_TYPE_BUFFERED).setContentType("video/mp4").build()
MediaInfo mediaInfo = new MediaInfo.Builder(videoUrl)
                        .setMetadata(metadata)
                        .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)
                        .setContentType("video/mp4")
                        .build();
Intent intent = new Intent(MainActivity.this, LocalPlayerActivity.class);
preferences=getPreferences(MODE_PRIVATE)
SharedPreferences preferences = getPreferences(MODE_PRIVATE);
defaultSmsPackage=Telephony.Sms.getDefaultSmsPackage(this)
String defaultSmsPackage = Telephony.Sms.getDefaultSmsPackage(this);
Intent intent = new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
availableAppProvider=EasyCustomTabs.getInstance()
AvailableAppProvider availableAppProvider = EasyCustomTabs.getInstance();
ConnectedClient connectedClient = new ConnectedClient(client);
binder=Binder.newInstance()
Binder binder = Binder.newInstance();
List<Composer> composerList = new ArrayList<>();
customTabsSession=connection.newSession()
CustomTabsSession customTabsSession = connection.newSession();
CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(customTabsSession);
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
context=EasyCustomTabs.getInstance().getContext()
Context context = EasyCustomTabs.getInstance().getContext();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
packagesSupportingCustomTabs=getPackagesSupportingCustomTabs()
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
defaultPackage=getDefaultPackage()
String defaultPackage = getDefaultPackage();
defaultActivityInfo=packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK,0)
ResolveInfo defaultActivityInfo = packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK, 0);
String packageName = defaultActivityInfo.activityInfo.packageName;
resolvedInfoList=packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK,0)
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<String> packagesSupportingCustomTabs = new ArrayList<>();
Intent serviceIntent = new Intent();
bestPackageFinder=BestPackageFinder.newInstance()
BestPackageFinder bestPackageFinder = BestPackageFinder.newInstance();
packageName=bestPackageFinder.findBestPackage()
String packageName = bestPackageFinder.findBestPackage();
resolveInfo=createResolveInfoFor(packageName)
ResolveInfo resolveInfo = createResolveInfoFor(packageName);
ResolveInfo resolveInfo = new ResolveInfo();
List<ResolveInfo> resolveInfoList = new ArrayList<>();
defaultPackageResolveInfo=createResolveInfoFor(packageName)
ResolveInfo defaultPackageResolveInfo = createResolveInfoFor(packageName);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
oldestApiMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage oldestApiMessage = apiMessages.get(apiMessages.size() - 1);
String lastResponseEpochTime = oldestApiMessage.timeStamp;
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
latestMessage=latestMessages.get(latestMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage latestMessage = latestMessages.get(latestMessages.size() - 1);
latestMessageDateTime=convertToLocalDateTime(latestMessage.timeStamp)
LocalDateTime latestMessageDateTime = convertToLocalDateTime(latestMessage.timeStamp);
List<ChannelHistory.Message> messages = new ArrayList<>();
historyFrom=getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1))
LocalDateTime historyFrom = getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1));
historyTo=getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0))
LocalDateTime historyTo = getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0));
String text = apiMessage.text;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
lastMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage lastMessage = apiMessages.get(apiMessages.size() - 1);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
firstMessage=apiMessages.get(0)
ApiPagedChannelHistory.ApiMessage firstMessage = apiMessages.get(0);
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
String slackToken = args[0];
retrofit=new Retrofit.Builder().baseUrl("https://slack.com/api/").addConverterFactory(GsonConverterFactory.create()).build()
Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://slack.com/api/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();
slackWebService=retrofit.create(SlackWebService.class)
SlackWebService slackWebService = retrofit.create(SlackWebService.class);
slackHistoryFetcher=SlackHistoryFetcher.from(slackWebService,slackToken)
SlackHistoryFetcher slackHistoryFetcher = SlackHistoryFetcher.from(slackWebService, slackToken);
start=LocalDateTime.now()
LocalDateTime start = LocalDateTime.now();
end=LocalDateTime.now().minusDays(7)
LocalDateTime end = LocalDateTime.now().minusDays(7);
channelHistory=slackHistoryFetcher.getChannelHistory(start,end)
ChannelHistory channelHistory = slackHistoryFetcher.getChannelHistory(start, end);
HistoryConverter historyConverter = new HistoryConverter();
ApiPagedResponse apiPagedResponse = new ApiPagedResponse(start);
response=fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime())
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
apiPagedChannelHistory=response.body()
ApiPagedChannelHistory apiPagedChannelHistory = response.body();
channelHistory=slackWebService.getChannelHistory(slackToken,channel,lastResponseEpochTime,NUMBER_OF_RESULTS)
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
ApiPagedChannelHistory apiPagedChannelHistory = new ApiPagedChannelHistory();
ApiPagedChannelHistory.ApiMessage apiMessage = new ApiPagedChannelHistory.ApiMessage();
final TextView textView = new TextView(context);
emptyView=findViewById(R.id.empty_view)
View emptyView = findViewById(R.id.empty_view);
final Integer action = values[0];
LoremAdapter loremAdapter = new LoremAdapter();
accounts=accountManager.getAccountsByType(accountType)
Account[] accounts = accountManager.getAccountsByType(accountType);
Bundle result;
Bundle result;
Bundle result = new Bundle();
activity=createLoginIntent(context,accountType,authTokenType,requiredFeatures,options)
Intent activity = createLoginIntent(context, accountType, authTokenType, requiredFeatures, options);
Bundle bundle = new Bundle();
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
accounts=accountManager.getAccountsByType(authTokenType)
Account[] accounts = accountManager.getAccountsByType(authTokenType);
bundle=createResponseBundle(token)
Bundle bundle = createResponseBundle(token);
accountManager=AccountManager.get(this.getApplicationContext())
AccountManager accountManager = AccountManager.get(this.getApplicationContext());
Account account = new Account(token.getUserName(), getAccountName());
Bundle bundle = new Bundle();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
GertHerbAuthenticator authenticator = new GertHerbAuthenticator(this);
fontId=getFontId(context,attrs)
int fontId = getFontId(context, attrs);
fontType=getFontType(fontId)
FontType fontType = getFontType(fontId);
typedArray=context.obtainStyledAttributes(attrs,R.styleable.CustomTextAppearance)
TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CustomTextAppearance);
typeface=createTypeFace(context,fontType)
Typeface typeface = createTypeFace(context, fontType);
info=context.getApplicationInfo()
ApplicationInfo info = context.getApplicationInfo();
name=activity.getTitle().toString()
String name = activity.getTitle().toString();
client=mServer.accept()
Socket client = mServer.accept();
boolean result;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
BufferedReader in = null;
request=in.readLine()
final String request = in.readLine();
String command;
String parameters;
index=request.indexOf(' ')
int index = request.indexOf(' ');
boolean result;
boolean success = true;
BufferedWriter out = null;
index=parameters.indexOf(' ')
int index = parameters.indexOf(' ');
code=parameters.substring(0,index)
final String code = parameters.substring(0, index);
int hashCode = (int) Long.parseLong(code, 16);
window=findWindow(hashCode)
final View window = findWindow(hashCode);
dispatch=ViewDebug.class.getDeclaredMethod("dispatchCommand",View.class,String.class,String.class,OutputStream.class)
final Method dispatch = ViewDebug.class.getDeclaredMethod("dispatchCommand",
                        View.class, String.class, String.class, OutputStream.class);
View window = null;
boolean result = true;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
boolean result = true;
String focusName = null;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
View focusedWindow = null;
BufferedWriter out = null;
boolean needWindowListUpdate = false;
boolean needFocusedWindowUpdate = false;
BetterAccountManager accountManager = new BetterAccountManager(this, getString(R.string.account_type), getString(R.string.token_type), null);
loginView=Views.findById(this,R.id.login_view)
LoginView loginView = Views.findById(this, R.id.login_view);
authorizationApi=new GithubApiFactory().createAuthorizationApi(credentials.username,credentials.password)
GithubApi authorizationApi = new GithubApiFactory().createAuthorizationApi(credentials.username, credentials.password);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
Endpoint endpoint = new Endpoint() {
            @Override
            public String getUrl() {
                return GITHUB_API_URL;
            }

            @Override
            public String getName() {
                return "Live";
            }
        };
interceptor=createAuthorizationRequestInterceptor(username,password)
RequestInterceptor interceptor = createAuthorizationRequestInterceptor(username, password);
restAdapter=createRestAdapter(endpoint,interceptor)
RestAdapter restAdapter = createRestAdapter(endpoint, interceptor);
Dummy dummy = new Dummy();
result=dummy.explodes()
boolean result = dummy.explodes();
String base64EncodedPublicKey = "CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE";
premiumPurchase=inventory.getPurchase(SKU_PREMIUM)
Purchase premiumPurchase = inventory.getPurchase(SKU_PREMIUM);
infiniteGasPurchase=inventory.getPurchase(SKU_INFINITE_GAS)
Purchase infiniteGasPurchase = inventory.getPurchase(SKU_INFINITE_GAS);
gasPurchase=inventory.getPurchase(SKU_GAS)
Purchase gasPurchase = inventory.getPurchase(SKU_GAS);
String payload = "";
String payload = "";
String payload = "";
payload=p.getDeveloperPayload()
String payload = p.getDeveloperPayload();
int index = mTank >= TANK_RES_IDS.length ? TANK_RES_IDS.length - 1 : mTank;
AlertDialog.Builder bld = new AlertDialog.Builder(this);
spe=getPreferences(MODE_PRIVATE).edit()
SharedPreferences.Editor spe = getPreferences(MODE_PRIVATE).edit();
sp=getPreferences(MODE_PRIVATE)
SharedPreferences sp = getPreferences(MODE_PRIVATE);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                                  + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                    | ((source[d + 1 + off] << 24) >>> 16)
                    | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                    | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                                   "-1002:Bad response received/" +
                                   "-1003:Purchase signature verification failed/" +
                                   "-1004:Send intent failed/" +
                                   "-1005:User cancelled/" +
                                   "-1006:Unknown purchase response/" +
                                   "-1007:Missing token/" +
                                   "-1008:Unknown error/" +
                                   "-1009:Subscriptions not available/" +
                                   "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(),
                    itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                        | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                        | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                            | ((source[d + 1 + off] << 24) >>> 16)
                            | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                            | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                "-1002:Bad response received/" +
                "-1003:Purchase signature verification failed/" +
                "-1004:Send intent failed/" +
                "-1005:User cancelled/" +
                "-1006:Unknown purchase response/" +
                "-1007:Missing token/" +
                "-1008:Unknown error/" +
                "-1009:Subscriptions not available/" +
                "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(), itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
responseCode=result.getResponse()
int responseCode = result.getResponse();
sku=purchase.getSku()
String sku = purchase.getSku();
skuDetails=inv.getSkuDetails(sku)
SkuDetails skuDetails = inv.getSkuDetails(sku);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
Button purchaseFiveButton = (Button) rootView.findViewById(R.id.fragment_main_button_purchase_five_coins);
xml=context.obtainStyledAttributes(attrs,R.styleable.LandingStrip)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.LandingStrip);
tabLayoutId=xml.getResourceId(R.styleable.LandingStrip_tabLayoutId,MISSING_TAB_LAYOUT_ID)
int tabLayoutId = xml.getResourceId(R.styleable.LandingStrip_tabLayoutId, MISSING_TAB_LAYOUT_ID);
indicatorColour=xml.getResourceId(R.styleable.LandingStrip_indicatorColor,DEFAULT_INDICATOR_COLOUR)
int indicatorColour = xml.getResourceId(R.styleable.LandingStrip_indicatorColor, DEFAULT_INDICATOR_COLOUR);
indicatorHeight=getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight,DEFAULT_INDICATOR_HEIGHT,xml)
int indicatorHeight = getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight, DEFAULT_INDICATOR_HEIGHT, xml);
tabsPaddingLeft=getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingLeft = getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding, DEFAULT_TABS_PADDING, xml);
tabsPaddingRight=getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingRight = getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding, DEFAULT_TABS_PADDING, xml);
MutableCoordinates drawCurrentTabCoordinates = new MutableCoordinates();
MutableCoordinates drawNextTabCoordinates = new MutableCoordinates();
MutableCoordinates drawMovingIndicatorCoordinates = new MutableCoordinates();
currentTab=tabsContainer.getTabAt(currentPosition)
View currentTab = tabsContainer.getTabAt(currentPosition);
currentTabStart=currentTab.getLeft()
float currentTabStart = currentTab.getLeft();
currentTabEnd=currentTab.getRight()
float currentTabEnd = currentTab.getRight();
nextTab=tabsContainer.getTabAt(currentPosition + 1)
View nextTab = tabsContainer.getTabAt(currentPosition + 1);
nextTabPositionOffset=getFractionFrom(pagePositionOffset)
float nextTabPositionOffset = getFractionFrom(pagePositionOffset);
indicatorStart=getIndicatorPosition(nextTab.getStart(),pagePositionOffset,currentTab.getStart(),nextTabPositionOffset)
float indicatorStart = getIndicatorPosition(nextTab.getStart(), pagePositionOffset, currentTab.getStart(), nextTabPositionOffset);
indicatorEnd=getIndicatorPosition(nextTab.getEnd(),pagePositionOffset,currentTab.getEnd(),nextTabPositionOffset)
float indicatorEnd = getIndicatorPosition(nextTab.getEnd(), pagePositionOffset, currentTab.getEnd(), nextTabPositionOffset);
height=getHeight()
int height = getHeight();
tabCount=pagerAdapter.getCount()
int tabCount = pagerAdapter.getCount();
title=pagerAdapter.getPageTitle(position)
CharSequence title = pagerAdapter.getPageTitle(position);
inflatedTabView=tabsContainer.inflateTab(layoutInflater,attributes.getTabLayoutId())
View inflatedTabView = tabsContainer.inflateTab(layoutInflater, attributes.getTabLayoutId());
int position = (int) view.getTag(TAG_KEY_POSITION);
scrollOffset=getHorizontalScrollOffset(position,positionOffset)
int scrollOffset = getHorizontalScrollOffset(position, positionOffset);
newScrollX=calculateScrollOffset(position,scrollOffset,positionOffset)
float newScrollX = calculateScrollOffset(position, scrollOffset, positionOffset);
tabWidth=tabsContainer.getTabAt(position).getWidth()
int tabWidth = tabsContainer.getTabAt(position).getWidth();
tabForPosition=tabsContainer.getTabAt(position)
View tabForPosition = tabsContainer.getTabAt(position);
float tabStartX = tabForPosition.getLeft() + scrollOffset;
int viewMiddleOffset = getTabParentWidth() / 2;
float tabCenterOffset = (tabForPosition.getRight() - tabForPosition.getLeft()) * 0.5F;
nextTabDelta=getNextTabDelta(position,pagerOffset,tabForPosition)
float nextTabDelta = getNextTabDelta(position, pagerOffset, tabForPosition);
LinearLayout tabsContainerView = new LinearLayout(context);
tab=getTabAt(index)
View tab = getTabAt(index);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
position=indicatorCoordinates.getStart()
float position = indicatorCoordinates.getStart();
lastTabOffset=((ViewGroup)getChildAt(0)).getChildAt(getChildCount() - 1).getWidth()
float lastTabOffset = ((ViewGroup) getChildAt(0)).getChildAt(getChildCount() - 1).getWidth();
frequency=getOneCycle(lastTabOffset)
float frequency = getOneCycle(lastTabOffset);
r=toHex(calculateColour(position,frequency,PHASE_RED,AMPLITUDE,CENTER_FREQUENCY))
String r = toHex(calculateColour(position, frequency, PHASE_RED, AMPLITUDE, CENTER_FREQUENCY));
g=toHex(calculateColour(position,frequency,PHASE_GREEN,AMPLITUDE,CENTER_FREQUENCY))
String g = toHex(calculateColour(position, frequency, PHASE_GREEN, AMPLITUDE, CENTER_FREQUENCY));
b=toHex(calculateColour(position,frequency,PHASE_BLUE,AMPLITUDE,CENTER_FREQUENCY))
String b = toHex(calculateColour(position, frequency, PHASE_BLUE, AMPLITUDE, CENTER_FREQUENCY));
height=getHeight()
int height = getHeight();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPagerFragment viewPagerFragment = new ViewPagerFragment();
Bundle bundle = new Bundle();
TextView view = (TextView) layoutInflater.inflate(R.layout.view_demo, container, false);
currentPosition=viewPagerAdapterState.getCurrentPosition()
int currentPosition = viewPagerAdapterState.getCurrentPosition();
view=getView(container,position)
View view = getView(container, position);
parcelableSparseArray=viewPagerAdapterState.get(position)
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
View view = (View) object;
SparseArray<Parcelable> viewState = new SparseArray<>();
position=entry.getValue()
int position = entry.getValue();
view=entry.getKey()
View view = entry.getKey();
bundle=in.readBundle()
Bundle bundle = in.readBundle();
Map<Integer, SparseArray<Parcelable>> viewStates = new HashMap<>(bundle.keySet().size());
sparseParcelableArray=bundle.getSparseParcelableArray(key)
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
primaryItemPosition=in.readInt()
int primaryItemPosition = in.readInt();
Bundle bundle = new Bundle();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
final TextView abText = (TextView) findViewById(R.id.ab_text);
final AyBe ayBe = new AyBe();
id=item.getItemId()
int id = item.getItemId();
callback=weakCallback.get()
AbTestingParamsLoadedCallback callback = weakCallback.get();
WeakReference<NoLeakActivity> weakNoLeakActivity = new WeakReference<NoLeakActivity>(noLeakActivity);
noLeakActivity=weakNoLeakActivity.get()
NoLeakActivity noLeakActivity = weakNoLeakActivity.get();
RecyclerView recyclerView = (RecyclerView) layoutInflater.inflate(R.layout.view_page, viewGroup, false);
itemView=layoutInflater.inflate(R.layout.view_item,parent,false)
View itemView = layoutInflater.inflate(R.layout.view_item, parent, false);
actual=foo.twice(HALF)
int actual = foo.twice(HALF);
int expected = WHOLE;
final float inverseRatio = 1f - ratio;
float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRatio);
float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRatio);
float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRatio);
hsv=node.getHsv()
float[] hsv = node.getHsv();
width=bitmap.getWidth()
final int width = bitmap.getWidth();
height=bitmap.getHeight()
final int height = bitmap.getHeight();
final int[] rgbPixels = new int[width * height];
final MedianCutQuantizer mcq = new MedianCutQuantizer(rgbPixels, NUM_COLORS);
primaryAccentColor=findPrimaryAccentColor()
final ColorNode primaryAccentColor = findPrimaryAccentColor();
secondaryAccentColor=findSecondaryAccentColor(primaryAccentColor)
final ColorNode secondaryAccentColor = findSecondaryAccentColor(primaryAccentColor);
tertiaryAccentColor=findTertiaryAccentColor(primaryAccentColor,secondaryAccentColor)
final int tertiaryAccentColor = findTertiaryAccentColor(
                primaryAccentColor, secondaryAccentColor);
primaryTextColor=findPrimaryTextColor(primaryAccentColor)
final int primaryTextColor = findPrimaryTextColor(primaryAccentColor);
secondaryTextColor=findSecondaryTextColor(primaryAccentColor)
final int secondaryTextColor = findSecondaryTextColor(primaryAccentColor);
final float primaryHue = primary.getHsv()[0];
final float candidateHue = candidate.getHsv()[0];
copy=Arrays.copyOf(palette,palette.length)
final MedianCutQuantizer.ColorNode[] copy = Arrays.copyOf(palette, palette.length);
maxCount=palette[0].getCount()
final float maxCount = palette[0].getCount();
lhsWeight=calculateWeight(lhs,maxCount)
final float lhsWeight = calculateWeight(lhs, maxCount);
rhsWeight=calculateWeight(rhs,maxCount)
final float rhsWeight = calculateWeight(rhs, maxCount);
float sum = 0;
float sumWeight = 0;
float value = values[i];
float weight = values[i + 1];
ColorHistogram colorHist = new ColorHistogram(pixels);
K=colorHist.getNumberOfColors()
int K = colorHist.getNumberOfColors();
ColorNode[] rCols = null;
rgb=colorHist.getColor(i)
int rgb = colorHist.getColor(i);
cnt=colorHist.getCount(i)
int cnt = colorHist.getCount(i);
ColorBox initialBox = new ColorBox(0, K - 1, 0);
List<ColorBox> colorSet = new ArrayList<ColorBox>();
int k = 1;
boolean done = false;
nextBox=findBoxToSplit(colorSet)
ColorBox nextBox = findBoxToSplit(colorSet);
newBox=nextBox.splitBox()
ColorBox newBox = nextBox.splitBox();
color=findClosestColor(pixels[i])
ColorNode color = findClosestColor(pixels[i]);
idx=findClosestColorIndex(rgb)
int idx = findClosestColorIndex(rgb);
red=Color.red(rgb)
int red = Color.red(rgb);
grn=Color.green(rgb)
int grn = Color.green(rgb);
blu=Color.blue(rgb)
int blu = Color.blue(rgb);
int minIdx = 0;
int minDistance = Integer.MAX_VALUE;
ColorNode color = quantColors[i];
d2=color.distance2(red,grn,blu)
int d2 = color.distance2(red, grn, blu);
ColorBox boxToSplit = null;
int minLevel = Integer.MAX_VALUE;
n=colorBoxes.size()
int n = colorBoxes.size();
ColorNode[] avgColors = new ColorNode[n];
int i = 0;
int dr = this.red - red;
int dg = this.grn - grn;
int db = this.blu - blu;
ColorNode color = imageColors[i];
int r = color.red;
int g = color.grn;
int b = color.blu;
dim=getLongestColorDimension()
ColorDimension dim = getLongestColorDimension();
med=findMedian(dim)
int med = findMedian(dim);
int nextLevel = level + 1;
ColorBox newBox = new ColorBox(med + 1, upper, nextLevel);
int rLength = rmax - rmin;
int gLength = gmax - gmin;
int bLength = bmax - bmin;
int half = count / 2;
int nPixels, median;
int rSum = 0;
int gSum = 0;
int bSum = 0;
int n = 0;
ColorNode ci = imageColors[i];
int cnt = ci.cnt;
double nd = n;
int avgRed = (int) (0.5 + rSum / nd);
int avgGrn = (int) (0.5 + gSum / nd);
int avgBlu = (int) (0.5 + bSum / nd);
s=this.getClass().getSimpleName()
String s = this.getClass().getSimpleName();
int i = 0;
int N = pixelsOrig.length;
int[] pixelsCpy = new int[N];
int k = -1;
int curColor = -1;
int nColors = k + 1;
id=item.getItemId()
int id = item.getItemId();
Intent intent = new Intent();
bitmap=((BitmapDrawable)imageView.getDrawable()).getBitmap()
Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap();
DominantColorCalculator dominantColorCalculator = new DominantColorCalculator(bitmap);
selectedImageUri=data.getData()
Uri selectedImageUri = data.getData();
selectedImagePath=getPath(selectedImageUri)
String selectedImagePath = getPath(selectedImageUri);
String[] projection = {MediaStore.Images.Media.DATA};
cursor=managedQuery(uri,projection,null,null,null)
Cursor cursor = managedQuery(uri, projection, null, null, null);
column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)
int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
LinearLayout rootView = (LinearLayout) inflater.inflate(R.layout.fragment_main, container, false);
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
preapprovalButton=payPal.getCheckoutButton(getActivity(),PayPal.BUTTON_194x37,CheckoutButton.TEXT_PAY)
CheckoutButton preapprovalButton = payPal.getCheckoutButton(getActivity(), PayPal.BUTTON_194x37, CheckoutButton.TEXT_PAY);
preapprovalIntent=payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY)
Intent preapprovalIntent = payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY);
String resultTitle = "";
String resultInfo = "";
String resultExtra = "";
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
PayPalPreapproval preapproval = new PayPalPreapproval();
preapproval=createPreapproval(preapprovalKey)
PayPalPreapproval preapproval = createPreapproval(preapprovalKey);
Bundle bundle = new Bundle();
int availableLength = maxLength;
StringBuilder stringBuilder = new StringBuilder(maxLength);
prefixAndSuffixLength=computeAppendedLengthIncludingSeparatorSpaces(prefix,suffix)
int prefixAndSuffixLength = computeAppendedLengthIncludingSeparatorSpaces(prefix, suffix);
urlLength=computeUrlLengthIncludingSeparatorSpace(url)
int urlLength = computeUrlLengthIncludingSeparatorSpace(url);
trimmedSubject=ellipsizeTextIfExceedsMaxLength(subject,availableLength)
String trimmedSubject = ellipsizeTextIfExceedsMaxLength(subject, availableLength);
int length = 0;
preferences=context.getSharedPreferences(MRU_PREFERENCES,Context.MODE_PRIVATE)
SharedPreferences preferences = context.getSharedPreferences(MRU_PREFERENCES, Context.MODE_PRIVATE);
args=getArguments()
Bundle args = getArguments();
themeResId=getThemeResIdIfProvidedIn(args)
int themeResId = getThemeResIdIfProvidedIn(args);
title=getTitleIfProvidedIn(args)
CharSequence title = getTitleIfProvidedIn(args);
builder=createDialogBuilder(themeResId).setCancelable(true).setView(dialogView)
AlertDialog.Builder builder = createDialogBuilder(themeResId)
                .setCancelable(true)
                .setView(dialogView);
inflater=getActivity().getLayoutInflater()
LayoutInflater inflater = getActivity().getLayoutInflater();
GridView gridView = (GridView) rootView.findViewById(R.id.ps__dialog_grid);
targetApps=extractTargetAppsFrom(args)
TargetApps targetApps = extractTargetAppsFrom(args);
allShareTargets=getAvailableShareTargets(sharingIntent)
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
priorityAppInfos=createPriorityResolveInfoList(targetApps,allShareTargets)
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
otherAppInfos=createOtherAppsResolveInfoList(priorityAppInfos,allShareTargets)
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
resolveInfos=targetApps.extractTargetResolveInfosFrom(allShareTargets)
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
mruResolveInfo=findMruResolveInfoIn(allShareTargets)
ResolveInfo mruResolveInfo = findMruResolveInfoIn(allShareTargets);
List<ResolveInfo> otherAppsInfos = new ArrayList<ResolveInfo>(allAppInfos);
mruPackageName=persister.getLastUsedTarget()
String mruPackageName = persister.getLastUsedTarget();
String packageName = resolveInfo.activityInfo.packageName;
packageManager=getActivity().getPackageManager()
PackageManager packageManager = getActivity().getPackageManager();
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
View buttonStrip = (View) showMoreButton.getParent();
gridView=getGridView()
GridView gridView = getGridView();
intent=wrapIntentWithExplicitTargetComponentForItem(position,sharingIntent)
Intent intent = wrapIntentWithExplicitTargetComponentForItem(position, sharingIntent);
Intent intent = new Intent(sharingIntent);
ActivityInfo activity = adapter.getItem(position).activityInfo;
ComponentName name = new ComponentName(activity.applicationInfo.packageName, activity.name);
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
PriorityShareDialog dialog = new PriorityShareDialog();
Bundle args = new Bundle();
sharingIntent=createSharingIntent()
Intent sharingIntent = createSharingIntent();
fragmentManager=activity.getFragmentManager()
FragmentManager fragmentManager = activity.getFragmentManager();
Intent intent = new Intent(Intent.ACTION_SEND);
dialog=new PriorityShareDialog.Builder().setTitle(title).setTargetApps(targetApps).setSharingIntent(sharingIntent).setOnPrepareSharingIntentListener(listener).setShowMostRecentlyUsed(showMostRecentlyUsed).build()
PriorityShareDialog dialog = new PriorityShareDialog.Builder()
                .setTitle(title)
                .setTargetApps(targetApps)
                .setSharingIntent(sharingIntent)
                .setOnPrepareSharingIntentListener(listener)
                .setShowMostRecentlyUsed(showMostRecentlyUsed)
                .build();
PrioritySharer prioritySharer = new PrioritySharer();
prioritySharer=build()
PrioritySharer prioritySharer = build();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
layoutInflater=LayoutInflater.from(context)
LayoutInflater layoutInflater = LayoutInflater.from(context);
iconSizePx=getIconSizePx(context.getResources())
int iconSizePx = getIconSizePx(context.getResources());
ArrayList<ResolveInfo> sortedList = new ArrayList<ResolveInfo>(resolveInfoList);
int otherAppsCountMaybe = showAllApps ? otherAppInfos.size() : 0;
firstOtherAppsItemPosition=priorityAppInfos.size()
int firstOtherAppsItemPosition = priorityAppInfos.size();
int offsetPosition = position - firstOtherAppsItemPosition;
TextView textView;
textView=initializeItemViewIfNecessary(convertView,R.layout.ps__grid_item_share,parent)
TextView textView = initializeItemViewIfNecessary(convertView, R.layout.ps__grid_item_share, parent);
info=getItem(position)
ResolveInfo info = getItem(position);
icon=info.loadIcon(packageManager)
Drawable icon = info.loadIcon(packageManager);
arraySize=in.readInt()
int arraySize = in.readInt();
String[] packageNames = new String[arraySize];
arraySize=targetPackages.size()
int arraySize = targetPackages.size();
String[] packagesArray = new String[arraySize];
SparseArray<ResolveInfo> matchedResolveInfos = new SparseArray<ResolveInfo>(targetPackages.size());
String packageName = info.activityInfo.packageName;
index=indexOfItemInto(packageName,targetPackages)
int index = indexOfItemInto(packageName, targetPackages);
sparseArraySize=sparseArray.size()
int sparseArraySize = sparseArray.size();
ArrayList<T> list = new ArrayList<T>(sparseArraySize);
int i = 0;
originalSubject=intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT)
CharSequence originalSubject = intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT);
String subject = originalSubject != null ? originalSubject.toString() : null;
composer=createComposer()
MessageComposer composer = createComposer();
component=intent.getComponent()
ComponentName component = intent.getComponent();
targetPackageName=component.getPackageName()
String targetPackageName = component.getPackageName();
adapter=ArrayAdapter.createFromResource(this,R.array.target_apps,android.R.layout.simple_spinner_item)
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
EditText text = (EditText) findViewById(R.id.text);
EditText title = (EditText) findViewById(R.id.title);
EditText mimeType = (EditText) findViewById(R.id.mime_type);
EditText dataUri = (EditText) findViewById(R.id.data_uri);
Switch showMostRecentlyUsed = (Switch) findViewById(R.id.show_most_recently_used);
uriString=dataUri.getText().toString()
String uriString = dataUri.getText().toString();
EditText text = (EditText) findViewById(R.id.text);
TextView textView = (TextView) convertView.findViewById(R.id.positionView);
colorView=convertView.findViewById(R.id.colorView)
View colorView = convertView.findViewById(R.id.colorView);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
offset=headerPlaceholder.getTop()
int offset = headerPlaceholder.getTop();
Integer item = COLORS[position];
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
firstVisiblePosition=grid.getFirstVisiblePosition()
int firstVisiblePosition = grid.getFirstVisiblePosition();
inflate=getViewForPosition(container,position)
View inflate = getViewForPosition(container, position);
id=item.getItemId()
int id = item.getItemId();
MyActivity activity = new MyActivity();
String manifestProperty = "../app/src/main/AndroidManifest.xml";
String resProperty = "../app/src/main/res";
cursor=resolver.query(uri,projection,selection,selectionArgs,null)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, null);
cursor=resolver.query(uri,projection,selection,selectionArgs,sortOrder)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, sortOrder);
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=richClass.setter(name)
Method setter = richClass.setter(name);
T obj;
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=methodsByName.get(name)
Method setter = methodsByName.get(name);
int type = TYPE_INT;
Class<?> t = setter.getParameterTypes()[0];
Class<?> t = setter.getParameterTypes()[0];
cursorType=cursor.getType(index)
final int cursorType = cursor.getType(index);
final Object obj;
s=f.getAnnotation(Mapper.class)
Mapper s = f.getAnnotation(Mapper.class);
mm=m.getAnnotation(Mapper.class)
Mapper mm = m.getAnnotation(Mapper.class);
methodName=StringUtil.asCamelifySetMethod(what)
String methodName = StringUtil.asCamelifySetMethod(what);
cursor=getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,null,null,null,null)
Cursor cursor = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
now=System.currentTimeMillis()
long now = System.currentTimeMillis();
List<Contact2> typedCursor = new CursorList<Contact2>(cursor, Contact2.class);
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[a-zA-Z0-9]+")
Pattern p = Pattern.compile("[a-zA-Z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[A-Z][a-z0-9]+")
Pattern p = Pattern.compile("[A-Z][a-z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
SurfaceView first = (SurfaceView) findViewById(R.id.firstSurface);
SurfaceView second = (SurfaceView) findViewById(R.id.secondSurface);
Intent pickVideo = new Intent(Intent.ACTION_PICK);
xml=context.obtainStyledAttributes(attrs,R.styleable.RelativeLayoutWithForeground)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.RelativeLayoutWithForeground);
int foregroundResId = INVALID_FOREGROUND_ID;
drawable=getDrawable(getResources(),foregroundResId)
Drawable drawable = getDrawable(getResources(), foregroundResId);
Bundle args = new Bundle();
enroll=mHotwordDetector.createEnrollIntent()
Intent enroll = mHotwordDetector.createEnrollIntent();

Diff of fa423ea387abb6e92b48170109ad2c21b0dd36b5 and 5a97731ea690ea41160fbec872088c81787100c3:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 4
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision fa423ea387abb6e92b48170109ad2c21b0dd36b5 to 5a97731ea690ea41160fbec872088c81787100c3


****Parsing for addition at revision 5a97731ea690ea41160fbec872088c81787100c3****

Added AccessibilityServices.java to .\/spikes\ repository source files.
Added AccessibilityServicesActivity.java to .\/spikes\ repository source files.
Added Demo.java to .\/spikes\ repository source files.
Added DemoAdapter.java to .\/spikes\ repository source files.
Added CustomActionsActivity.java to .\/spikes\ repository source files.
Added TweetView.java to .\/spikes\ repository source files.
Added DemosActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added DrawerActivity.java to .\/spikes\ repository source files.
Added EarthActivity.java to .\/spikes\ repository source files.
Added ProHaxDrawerActivity.java to .\/spikes\ repository source files.
Added SaturnActivity.java to .\/spikes\ repository source files.
Added LocalPlayerActivity.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added CastApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ComposeSmsActivity.java to .\/spikes\ repository source files.
Added HeadlessSmsSendService.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MmsReceiver.java to .\/spikes\ repository source files.
Added SmsReceiver.java to .\/spikes\ repository source files.
Added ExtendedDemoActivity.java to .\/spikes\ repository source files.
Added ExtendedDemoApplication.java to .\/spikes\ repository source files.
Added SimpleDemoActivity.java to .\/spikes\ repository source files.
Added SimpleDemoApplication.java to .\/spikes\ repository source files.
Added Binder.java to .\/spikes\ repository source files.
Added ConnectedClient.java to .\/spikes\ repository source files.
Added Connection.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnection.java to .\/spikes\ repository source files.
Added ServiceConnectionCallback.java to .\/spikes\ repository source files.
Added EasyCustomTabs.java to .\/spikes\ repository source files.
Added ActionButtonComposer.java to .\/spikes\ repository source files.
Added CloseButtonIconComposer.java to .\/spikes\ repository source files.
Added Composer.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilder.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigator.java to .\/spikes\ repository source files.
Added EasyCustomTabsWebNavigator.java to .\/spikes\ repository source files.
Added ExitAnimationsComposer.java to .\/spikes\ repository source files.
Added IntentCustomizer.java to .\/spikes\ repository source files.
Added MenuItemComposer.java to .\/spikes\ repository source files.
Added NavigationFallback.java to .\/spikes\ repository source files.
Added Navigator.java to .\/spikes\ repository source files.
Added ShowTitleComposer.java to .\/spikes\ repository source files.
Added StartAnimationsComposer.java to .\/spikes\ repository source files.
Added ToolbarColorComposer.java to .\/spikes\ repository source files.
Added UrlBarHidingComposer.java to .\/spikes\ repository source files.
Added WebNavigator.java to .\/spikes\ repository source files.
Added AvailableAppProvider.java to .\/spikes\ repository source files.
Added BestPackageFinder.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProvider.java to .\/spikes\ repository source files.
Added BinderTest.java to .\/spikes\ repository source files.
Added ConnectedClientTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnectionTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigatorTest.java to .\/spikes\ repository source files.
Added BestPackageFinderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProviderTest.java to .\/spikes\ repository source files.
Added ApiPagedChannelHistory.java to .\/spikes\ repository source files.
Added ApiPagedResponse.java to .\/spikes\ repository source files.
Added ChannelHistory.java to .\/spikes\ repository source files.
Added HistoryConverter.java to .\/spikes\ repository source files.
Added Runner.java to .\/spikes\ repository source files.
Added SlackHistoryFetcher.java to .\/spikes\ repository source files.
Added SlackWebService.java to .\/spikes\ repository source files.
Added ApiPagedResponseTest.java to .\/spikes\ repository source files.
Added MainActivityTest.java to .\/spikes\ repository source files.
Added LoremAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added BetterAccountManager.java to .\/spikes\ repository source files.
Added BetterAuthenticator.java to .\/spikes\ repository source files.
Added BetterAuthenticatorActivity.java to .\/spikes\ repository source files.
Added GertHerbAuthenticator.java to .\/spikes\ repository source files.
Added GertHerbAuthenticatorService.java to .\/spikes\ repository source files.
Added NoAccountException.java to .\/spikes\ repository source files.
Added ReactiveAuthenticatorActivity.java to .\/spikes\ repository source files.
Added Token.java to .\/spikes\ repository source files.
Added GertHerbActivity.java to .\/spikes\ repository source files.
Added GertHerbApplication.java to .\/spikes\ repository source files.
Added GertHerbAuthenticationActivity.java to .\/spikes\ repository source files.
Added TypefaceFactory.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added ViewServer.java to .\/spikes\ repository source files.
Added ViewServerManager.java to .\/spikes\ repository source files.
Added DeveloperError.java to .\/spikes\ repository source files.
Added HomeActivity.java to .\/spikes\ repository source files.
Added LoginActivity.java to .\/spikes\ repository source files.
Added LoginView.java to .\/spikes\ repository source files.
Added UserCredentials.java to .\/spikes\ repository source files.
Added FontButton.java to .\/spikes\ repository source files.
Added FontEditText.java to .\/spikes\ repository source files.
Added FontTextView.java to .\/spikes\ repository source files.
Added GithubApi.java to .\/spikes\ repository source files.
Added GithubApiFactory.java to .\/spikes\ repository source files.
Added TokenRequest.java to .\/spikes\ repository source files.
Added TokenResponse.java to .\/spikes\ repository source files.
Added Dummy.java to .\/spikes\ repository source files.
Added DummyTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MainFragment.java to .\/spikes\ repository source files.
Added Attributes.java to .\/spikes\ repository source files.
Added Coordinates.java to .\/spikes\ repository source files.
Added IndicatorCoordinatesCalculator.java to .\/spikes\ repository source files.
Added LandingStrip.java to .\/spikes\ repository source files.
Added MutableCoordinates.java to .\/spikes\ repository source files.
Added OnPagerAdapterChangedListener.java to .\/spikes\ repository source files.
Added PagerAdapterObserver.java to .\/spikes\ repository source files.
Added Scrollable.java to .\/spikes\ repository source files.
Added ScrollingPageChangeListener.java to .\/spikes\ repository source files.
Added State.java to .\/spikes\ repository source files.
Added TabsContainer.java to .\/spikes\ repository source files.
Added CustomLandingStrip.java to .\/spikes\ repository source files.
Added CustomTabActivity.java to .\/spikes\ repository source files.
Added ExampleRainbowLandingStrip.java to .\/spikes\ repository source files.
Added FixedWidthTabActivity.java to .\/spikes\ repository source files.
Added NoFragmentsSimpleTextTabActivity.java to .\/spikes\ repository source files.
Added Data.java to .\/spikes\ repository source files.
Added DemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added SmallDemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerFragment.java to .\/spikes\ repository source files.
Added DemoViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapterState.java to .\/spikes\ repository source files.
Added SimpleTextTabActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AbTestingParamsLoadedCallback.java to .\/spikes\ repository source files.
Added AyBe.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added WeakStartCallback.java to .\/spikes\ repository source files.
Added LeakActivity.java to .\/spikes\ repository source files.
Added NoLeakActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added Bar.java to .\/spikes\ repository source files.
Added Foo.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added FooTest.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added ColorScheme.java to .\/spikes\ repository source files.
Added ColorUtils.java to .\/spikes\ repository source files.
Added DominantColorCalculator.java to .\/spikes\ repository source files.
Added FloatUtils.java to .\/spikes\ repository source files.
Added MedianCutQuantizer.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added PayPalFragment.java to .\/spikes\ repository source files.
Added PayPalHelper.java to .\/spikes\ repository source files.
Added MaxLengthMessageComposer.java to .\/spikes\ repository source files.
Added MessageComposer.java to .\/spikes\ repository source files.
Added TwitterMessageComposer.java to .\/spikes\ repository source files.
Added DisabledMruPersister.java to .\/spikes\ repository source files.
Added MruPersister.java to .\/spikes\ repository source files.
Added SharedPreferencesMruPersister.java to .\/spikes\ repository source files.
Added OnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added PriorityShareDialog.java to .\/spikes\ repository source files.
Added PrioritySharer.java to .\/spikes\ repository source files.
Added ShareTargetsAdapter.java to .\/spikes\ repository source files.
Added SimpleOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added TargetApps.java to .\/spikes\ repository source files.
Added TwitterOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AdvancedActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SimpleActivity.java to .\/spikes\ repository source files.
Added LockingActivity.java to .\/spikes\ repository source files.
Added PostLockingActivity.java to .\/spikes\ repository source files.
Added PreLockingActivity.java to .\/spikes\ repository source files.
Added DummyAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added NovoStaggeredGridView.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SpikeApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SwipeableView.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MyClass.java to .\/spikes\ repository source files.
Added MyClassTest.java to .\/spikes\ repository source files.
Added MyAndroidClassTest.java to .\/spikes\ repository source files.
Added RobolectricGradleTestRunner.java to .\/spikes\ repository source files.
Added Mapper.java to .\/spikes\ repository source files.
Added Query.java to .\/spikes\ repository source files.
Added TypedResolver.java to .\/spikes\ repository source files.
Added CursorList.java to .\/spikes\ repository source files.
Added CursorListIterator.java to .\/spikes\ repository source files.
Added CursorMarshaller.java to .\/spikes\ repository source files.
Added EmptyListIterator.java to .\/spikes\ repository source files.
Added ReflectionCursorMarshaller.java to .\/spikes\ repository source files.
Added RichClass.java to .\/spikes\ repository source files.
Added Setter.java to .\/spikes\ repository source files.
Added Function.java to .\/spikes\ repository source files.
Added TypedElementLoader.java to .\/spikes\ repository source files.
Added TypedLoader.java to .\/spikes\ repository source files.
Added Marshaller.java to .\/spikes\ repository source files.
Added ObjectMapper.java to .\/spikes\ repository source files.
Added TypedActivity.java to .\/spikes\ repository source files.
Added StringUtil.java to .\/spikes\ repository source files.
Added MyObject.java to .\/spikes\ repository source files.
Added MediaPlayerSwitcherActivity.java to .\/spikes\ repository source files.
Added VideoPlayerService.java to .\/spikes\ repository source files.
Added RelativeLayoutWithForeground.java to .\/spikes\ repository source files.
Added DemoActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added RecognitionService.java to .\/spikes\ repository source files.
Added SessionService.java to .\/spikes\ repository source files.
Added SettingsActivity.java to .\/spikes\ repository source files.
Added SmartContextInteractionService.java to .\/spikes\ repository source files.
AccessibilityManager accessibilityManager = (AccessibilityManager) context.getSystemService(Context.ACCESSIBILITY_SERVICE);
enabledServices=getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN)
List<AccessibilityServiceInfo> enabledServices = getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN);
List<AccessibilityServiceInfo> enabledServices = getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN);
View view = convertView;
demo=getItem(position)
Demo demo = getItem(position);
Intent intent = new Intent(context, demo.activityClass);
layoutInflater=LayoutInflater.from(parent.getContext())
LayoutInflater layoutInflater = LayoutInflater.from(parent.getContext());
TweetView tweetView = (TweetView) findViewById(R.id.tweet);
ListView listView = ((ListView) findViewById(R.id.list));
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
final DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close) {

            @Override
            public void onDrawerClosed(View drawerView) {
                super.onDrawerClosed(drawerView);
                // waiting for the drawer to close, then navigating seems to cause issue.
                // why wait for the drawer to close? jankiness.
                if (pendingNavigationClick != null) {
                    startActivity(pendingNavigationClick);
                    pendingNavigationClick = null;
                }
            }

        };
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close);
Intent intent;
b=getIntent().getExtras()
Bundle b = getIntent().getExtras();
mShouldStartPlayback=b.getBoolean("shouldStart")
boolean mShouldStartPlayback = b.getBoolean("shouldStart");
startPosition=b.getInt("startPosition",0)
int startPosition = b.getInt("startPosition", 0);
currentPos=mVideoView.getCurrentPosition()
int currentPos = mVideoView.getCurrentPosition();
String msg;
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, mDisplaySize.y + getActionBar().getHeight());
mm=mSelectedMedia.getMetadata()
MediaMetadata mm = mSelectedMedia.getMetadata();
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, (int) (mDisplaySize.x * ASPECT_RATIO));
WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
width=display.getWidth()
int width = display.getWidth();
height=display.getHeight()
int height = display.getHeight();
int resourceId = 0;
String videoUrl = "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4#sthash.rJ5rPZy8.dpuf";
String title = "Jahre Philharmonie";
String description = "Awesome film you must watch!";
String author = "Blundell";
String thumbUrl = "http://www.ustream.tv/blog/wp-content/uploads/2013/10/simply-go-live.png";
MediaMetadata metadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE);
mediaInfo=new MediaInfo.Builder(videoUrl).setMetadata(metadata).setStreamType(MediaInfo.STREAM_TYPE_BUFFERED).setContentType("video/mp4").build()
MediaInfo mediaInfo = new MediaInfo.Builder(videoUrl)
                        .setMetadata(metadata)
                        .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)
                        .setContentType("video/mp4")
                        .build();
Intent intent = new Intent(MainActivity.this, LocalPlayerActivity.class);
preferences=getPreferences(MODE_PRIVATE)
SharedPreferences preferences = getPreferences(MODE_PRIVATE);
defaultSmsPackage=Telephony.Sms.getDefaultSmsPackage(this)
String defaultSmsPackage = Telephony.Sms.getDefaultSmsPackage(this);
Intent intent = new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
availableAppProvider=EasyCustomTabs.getInstance()
AvailableAppProvider availableAppProvider = EasyCustomTabs.getInstance();
ConnectedClient connectedClient = new ConnectedClient(client);
binder=Binder.newInstance()
Binder binder = Binder.newInstance();
List<Composer> composerList = new ArrayList<>();
customTabsSession=connection.newSession()
CustomTabsSession customTabsSession = connection.newSession();
CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(customTabsSession);
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
context=EasyCustomTabs.getInstance().getContext()
Context context = EasyCustomTabs.getInstance().getContext();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
packagesSupportingCustomTabs=getPackagesSupportingCustomTabs()
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
defaultPackage=getDefaultPackage()
String defaultPackage = getDefaultPackage();
defaultActivityInfo=packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK,0)
ResolveInfo defaultActivityInfo = packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK, 0);
String packageName = defaultActivityInfo.activityInfo.packageName;
resolvedInfoList=packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK,0)
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<String> packagesSupportingCustomTabs = new ArrayList<>();
Intent serviceIntent = new Intent();
bestPackageFinder=BestPackageFinder.newInstance()
BestPackageFinder bestPackageFinder = BestPackageFinder.newInstance();
packageName=bestPackageFinder.findBestPackage()
String packageName = bestPackageFinder.findBestPackage();
resolveInfo=createResolveInfoFor(packageName)
ResolveInfo resolveInfo = createResolveInfoFor(packageName);
ResolveInfo resolveInfo = new ResolveInfo();
List<ResolveInfo> resolveInfoList = new ArrayList<>();
defaultPackageResolveInfo=createResolveInfoFor(packageName)
ResolveInfo defaultPackageResolveInfo = createResolveInfoFor(packageName);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
oldestApiMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage oldestApiMessage = apiMessages.get(apiMessages.size() - 1);
String lastResponseEpochTime = oldestApiMessage.timeStamp;
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
latestMessage=latestMessages.get(latestMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage latestMessage = latestMessages.get(latestMessages.size() - 1);
latestMessageDateTime=convertToLocalDateTime(latestMessage.timeStamp)
LocalDateTime latestMessageDateTime = convertToLocalDateTime(latestMessage.timeStamp);
List<ChannelHistory.Message> messages = new ArrayList<>();
historyFrom=getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1))
LocalDateTime historyFrom = getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1));
historyTo=getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0))
LocalDateTime historyTo = getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0));
String text = apiMessage.text;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
lastMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage lastMessage = apiMessages.get(apiMessages.size() - 1);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
firstMessage=apiMessages.get(0)
ApiPagedChannelHistory.ApiMessage firstMessage = apiMessages.get(0);
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
String slackToken = args[0];
retrofit=new Retrofit.Builder().baseUrl("https://slack.com/api/").addConverterFactory(GsonConverterFactory.create()).build()
Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://slack.com/api/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();
slackWebService=retrofit.create(SlackWebService.class)
SlackWebService slackWebService = retrofit.create(SlackWebService.class);
slackHistoryFetcher=SlackHistoryFetcher.from(slackWebService,slackToken)
SlackHistoryFetcher slackHistoryFetcher = SlackHistoryFetcher.from(slackWebService, slackToken);
start=LocalDateTime.now()
LocalDateTime start = LocalDateTime.now();
end=LocalDateTime.now().minusDays(7)
LocalDateTime end = LocalDateTime.now().minusDays(7);
channelHistory=slackHistoryFetcher.getChannelHistory(start,end)
ChannelHistory channelHistory = slackHistoryFetcher.getChannelHistory(start, end);
HistoryConverter historyConverter = new HistoryConverter();
ApiPagedResponse apiPagedResponse = new ApiPagedResponse(start);
response=fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime())
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
apiPagedChannelHistory=response.body()
ApiPagedChannelHistory apiPagedChannelHistory = response.body();
channelHistory=slackWebService.getChannelHistory(slackToken,channel,lastResponseEpochTime,NUMBER_OF_RESULTS)
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
ApiPagedChannelHistory apiPagedChannelHistory = new ApiPagedChannelHistory();
ApiPagedChannelHistory.ApiMessage apiMessage = new ApiPagedChannelHistory.ApiMessage();
final TextView textView = new TextView(context);
emptyView=findViewById(R.id.empty_view)
View emptyView = findViewById(R.id.empty_view);
final Integer action = values[0];
LoremAdapter loremAdapter = new LoremAdapter();
accounts=accountManager.getAccountsByType(accountType)
Account[] accounts = accountManager.getAccountsByType(accountType);
Bundle result;
Bundle result;
Bundle result = new Bundle();
activity=createLoginIntent(context,accountType,authTokenType,requiredFeatures,options)
Intent activity = createLoginIntent(context, accountType, authTokenType, requiredFeatures, options);
Bundle bundle = new Bundle();
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
accounts=accountManager.getAccountsByType(authTokenType)
Account[] accounts = accountManager.getAccountsByType(authTokenType);
bundle=createResponseBundle(token)
Bundle bundle = createResponseBundle(token);
accountManager=AccountManager.get(this.getApplicationContext())
AccountManager accountManager = AccountManager.get(this.getApplicationContext());
Account account = new Account(token.getUserName(), getAccountName());
Bundle bundle = new Bundle();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
GertHerbAuthenticator authenticator = new GertHerbAuthenticator(this);
fontId=getFontId(context,attrs)
int fontId = getFontId(context, attrs);
fontType=getFontType(fontId)
FontType fontType = getFontType(fontId);
typedArray=context.obtainStyledAttributes(attrs,R.styleable.CustomTextAppearance)
TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CustomTextAppearance);
typeface=createTypeFace(context,fontType)
Typeface typeface = createTypeFace(context, fontType);
info=context.getApplicationInfo()
ApplicationInfo info = context.getApplicationInfo();
name=activity.getTitle().toString()
String name = activity.getTitle().toString();
client=mServer.accept()
Socket client = mServer.accept();
boolean result;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
BufferedReader in = null;
request=in.readLine()
final String request = in.readLine();
String command;
String parameters;
index=request.indexOf(' ')
int index = request.indexOf(' ');
boolean result;
boolean success = true;
BufferedWriter out = null;
index=parameters.indexOf(' ')
int index = parameters.indexOf(' ');
code=parameters.substring(0,index)
final String code = parameters.substring(0, index);
int hashCode = (int) Long.parseLong(code, 16);
window=findWindow(hashCode)
final View window = findWindow(hashCode);
dispatch=ViewDebug.class.getDeclaredMethod("dispatchCommand",View.class,String.class,String.class,OutputStream.class)
final Method dispatch = ViewDebug.class.getDeclaredMethod("dispatchCommand",
                        View.class, String.class, String.class, OutputStream.class);
View window = null;
boolean result = true;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
boolean result = true;
String focusName = null;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
View focusedWindow = null;
BufferedWriter out = null;
boolean needWindowListUpdate = false;
boolean needFocusedWindowUpdate = false;
BetterAccountManager accountManager = new BetterAccountManager(this, getString(R.string.account_type), getString(R.string.token_type), null);
loginView=Views.findById(this,R.id.login_view)
LoginView loginView = Views.findById(this, R.id.login_view);
authorizationApi=new GithubApiFactory().createAuthorizationApi(credentials.username,credentials.password)
GithubApi authorizationApi = new GithubApiFactory().createAuthorizationApi(credentials.username, credentials.password);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
Endpoint endpoint = new Endpoint() {
            @Override
            public String getUrl() {
                return GITHUB_API_URL;
            }

            @Override
            public String getName() {
                return "Live";
            }
        };
interceptor=createAuthorizationRequestInterceptor(username,password)
RequestInterceptor interceptor = createAuthorizationRequestInterceptor(username, password);
restAdapter=createRestAdapter(endpoint,interceptor)
RestAdapter restAdapter = createRestAdapter(endpoint, interceptor);
Dummy dummy = new Dummy();
result=dummy.explodes()
boolean result = dummy.explodes();
String base64EncodedPublicKey = "CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE";
premiumPurchase=inventory.getPurchase(SKU_PREMIUM)
Purchase premiumPurchase = inventory.getPurchase(SKU_PREMIUM);
infiniteGasPurchase=inventory.getPurchase(SKU_INFINITE_GAS)
Purchase infiniteGasPurchase = inventory.getPurchase(SKU_INFINITE_GAS);
gasPurchase=inventory.getPurchase(SKU_GAS)
Purchase gasPurchase = inventory.getPurchase(SKU_GAS);
String payload = "";
String payload = "";
String payload = "";
payload=p.getDeveloperPayload()
String payload = p.getDeveloperPayload();
int index = mTank >= TANK_RES_IDS.length ? TANK_RES_IDS.length - 1 : mTank;
AlertDialog.Builder bld = new AlertDialog.Builder(this);
spe=getPreferences(MODE_PRIVATE).edit()
SharedPreferences.Editor spe = getPreferences(MODE_PRIVATE).edit();
sp=getPreferences(MODE_PRIVATE)
SharedPreferences sp = getPreferences(MODE_PRIVATE);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                                  + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                    | ((source[d + 1 + off] << 24) >>> 16)
                    | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                    | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                                   "-1002:Bad response received/" +
                                   "-1003:Purchase signature verification failed/" +
                                   "-1004:Send intent failed/" +
                                   "-1005:User cancelled/" +
                                   "-1006:Unknown purchase response/" +
                                   "-1007:Missing token/" +
                                   "-1008:Unknown error/" +
                                   "-1009:Subscriptions not available/" +
                                   "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(),
                    itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                        | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                        | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                            | ((source[d + 1 + off] << 24) >>> 16)
                            | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                            | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                "-1002:Bad response received/" +
                "-1003:Purchase signature verification failed/" +
                "-1004:Send intent failed/" +
                "-1005:User cancelled/" +
                "-1006:Unknown purchase response/" +
                "-1007:Missing token/" +
                "-1008:Unknown error/" +
                "-1009:Subscriptions not available/" +
                "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(), itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
responseCode=result.getResponse()
int responseCode = result.getResponse();
sku=purchase.getSku()
String sku = purchase.getSku();
skuDetails=inv.getSkuDetails(sku)
SkuDetails skuDetails = inv.getSkuDetails(sku);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
Button purchaseFiveButton = (Button) rootView.findViewById(R.id.fragment_main_button_purchase_five_coins);
xml=context.obtainStyledAttributes(attrs,R.styleable.LandingStrip)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.LandingStrip);
tabLayoutId=xml.getResourceId(R.styleable.LandingStrip_tabLayoutId,MISSING_TAB_LAYOUT_ID)
int tabLayoutId = xml.getResourceId(R.styleable.LandingStrip_tabLayoutId, MISSING_TAB_LAYOUT_ID);
indicatorColour=xml.getResourceId(R.styleable.LandingStrip_indicatorColor,DEFAULT_INDICATOR_COLOUR)
int indicatorColour = xml.getResourceId(R.styleable.LandingStrip_indicatorColor, DEFAULT_INDICATOR_COLOUR);
indicatorHeight=getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight,DEFAULT_INDICATOR_HEIGHT,xml)
int indicatorHeight = getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight, DEFAULT_INDICATOR_HEIGHT, xml);
tabsPaddingLeft=getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingLeft = getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding, DEFAULT_TABS_PADDING, xml);
tabsPaddingRight=getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingRight = getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding, DEFAULT_TABS_PADDING, xml);
MutableCoordinates drawCurrentTabCoordinates = new MutableCoordinates();
MutableCoordinates drawNextTabCoordinates = new MutableCoordinates();
MutableCoordinates drawMovingIndicatorCoordinates = new MutableCoordinates();
currentTab=tabsContainer.getTabAt(currentPosition)
View currentTab = tabsContainer.getTabAt(currentPosition);
currentTabStart=currentTab.getLeft()
float currentTabStart = currentTab.getLeft();
currentTabEnd=currentTab.getRight()
float currentTabEnd = currentTab.getRight();
nextTab=tabsContainer.getTabAt(currentPosition + 1)
View nextTab = tabsContainer.getTabAt(currentPosition + 1);
nextTabPositionOffset=getFractionFrom(pagePositionOffset)
float nextTabPositionOffset = getFractionFrom(pagePositionOffset);
indicatorStart=getIndicatorPosition(nextTab.getStart(),pagePositionOffset,currentTab.getStart(),nextTabPositionOffset)
float indicatorStart = getIndicatorPosition(nextTab.getStart(), pagePositionOffset, currentTab.getStart(), nextTabPositionOffset);
indicatorEnd=getIndicatorPosition(nextTab.getEnd(),pagePositionOffset,currentTab.getEnd(),nextTabPositionOffset)
float indicatorEnd = getIndicatorPosition(nextTab.getEnd(), pagePositionOffset, currentTab.getEnd(), nextTabPositionOffset);
height=getHeight()
int height = getHeight();
tabCount=pagerAdapter.getCount()
int tabCount = pagerAdapter.getCount();
title=pagerAdapter.getPageTitle(position)
CharSequence title = pagerAdapter.getPageTitle(position);
inflatedTabView=tabsContainer.inflateTab(layoutInflater,attributes.getTabLayoutId())
View inflatedTabView = tabsContainer.inflateTab(layoutInflater, attributes.getTabLayoutId());
int position = (int) view.getTag(TAG_KEY_POSITION);
scrollOffset=getHorizontalScrollOffset(position,positionOffset)
int scrollOffset = getHorizontalScrollOffset(position, positionOffset);
newScrollX=calculateScrollOffset(position,scrollOffset,positionOffset)
float newScrollX = calculateScrollOffset(position, scrollOffset, positionOffset);
tabWidth=tabsContainer.getTabAt(position).getWidth()
int tabWidth = tabsContainer.getTabAt(position).getWidth();
tabForPosition=tabsContainer.getTabAt(position)
View tabForPosition = tabsContainer.getTabAt(position);
float tabStartX = tabForPosition.getLeft() + scrollOffset;
int viewMiddleOffset = getTabParentWidth() / 2;
float tabCenterOffset = (tabForPosition.getRight() - tabForPosition.getLeft()) * 0.5F;
nextTabDelta=getNextTabDelta(position,pagerOffset,tabForPosition)
float nextTabDelta = getNextTabDelta(position, pagerOffset, tabForPosition);
LinearLayout tabsContainerView = new LinearLayout(context);
tab=getTabAt(index)
View tab = getTabAt(index);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
position=indicatorCoordinates.getStart()
float position = indicatorCoordinates.getStart();
lastTabOffset=((ViewGroup)getChildAt(0)).getChildAt(getChildCount() - 1).getWidth()
float lastTabOffset = ((ViewGroup) getChildAt(0)).getChildAt(getChildCount() - 1).getWidth();
frequency=getOneCycle(lastTabOffset)
float frequency = getOneCycle(lastTabOffset);
r=toHex(calculateColour(position,frequency,PHASE_RED,AMPLITUDE,CENTER_FREQUENCY))
String r = toHex(calculateColour(position, frequency, PHASE_RED, AMPLITUDE, CENTER_FREQUENCY));
g=toHex(calculateColour(position,frequency,PHASE_GREEN,AMPLITUDE,CENTER_FREQUENCY))
String g = toHex(calculateColour(position, frequency, PHASE_GREEN, AMPLITUDE, CENTER_FREQUENCY));
b=toHex(calculateColour(position,frequency,PHASE_BLUE,AMPLITUDE,CENTER_FREQUENCY))
String b = toHex(calculateColour(position, frequency, PHASE_BLUE, AMPLITUDE, CENTER_FREQUENCY));
height=getHeight()
int height = getHeight();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPagerFragment viewPagerFragment = new ViewPagerFragment();
Bundle bundle = new Bundle();
TextView view = (TextView) layoutInflater.inflate(R.layout.view_demo, container, false);
currentPosition=viewPagerAdapterState.getCurrentPosition()
int currentPosition = viewPagerAdapterState.getCurrentPosition();
view=getView(container,position)
View view = getView(container, position);
parcelableSparseArray=viewPagerAdapterState.get(position)
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
View view = (View) object;
SparseArray<Parcelable> viewState = new SparseArray<>();
position=entry.getValue()
int position = entry.getValue();
view=entry.getKey()
View view = entry.getKey();
bundle=in.readBundle()
Bundle bundle = in.readBundle();
Map<Integer, SparseArray<Parcelable>> viewStates = new HashMap<>(bundle.keySet().size());
sparseParcelableArray=bundle.getSparseParcelableArray(key)
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
primaryItemPosition=in.readInt()
int primaryItemPosition = in.readInt();
Bundle bundle = new Bundle();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
final TextView abText = (TextView) findViewById(R.id.ab_text);
final AyBe ayBe = new AyBe();
id=item.getItemId()
int id = item.getItemId();
callback=weakCallback.get()
AbTestingParamsLoadedCallback callback = weakCallback.get();
WeakReference<NoLeakActivity> weakNoLeakActivity = new WeakReference<NoLeakActivity>(noLeakActivity);
noLeakActivity=weakNoLeakActivity.get()
NoLeakActivity noLeakActivity = weakNoLeakActivity.get();
RecyclerView recyclerView = (RecyclerView) layoutInflater.inflate(R.layout.view_page, viewGroup, false);
itemView=layoutInflater.inflate(R.layout.view_item,parent,false)
View itemView = layoutInflater.inflate(R.layout.view_item, parent, false);
actual=foo.twice(HALF)
int actual = foo.twice(HALF);
int expected = WHOLE;
final float inverseRatio = 1f - ratio;
float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRatio);
float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRatio);
float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRatio);
hsv=node.getHsv()
float[] hsv = node.getHsv();
width=bitmap.getWidth()
final int width = bitmap.getWidth();
height=bitmap.getHeight()
final int height = bitmap.getHeight();
final int[] rgbPixels = new int[width * height];
final MedianCutQuantizer mcq = new MedianCutQuantizer(rgbPixels, NUM_COLORS);
primaryAccentColor=findPrimaryAccentColor()
final ColorNode primaryAccentColor = findPrimaryAccentColor();
secondaryAccentColor=findSecondaryAccentColor(primaryAccentColor)
final ColorNode secondaryAccentColor = findSecondaryAccentColor(primaryAccentColor);
tertiaryAccentColor=findTertiaryAccentColor(primaryAccentColor,secondaryAccentColor)
final int tertiaryAccentColor = findTertiaryAccentColor(
                primaryAccentColor, secondaryAccentColor);
primaryTextColor=findPrimaryTextColor(primaryAccentColor)
final int primaryTextColor = findPrimaryTextColor(primaryAccentColor);
secondaryTextColor=findSecondaryTextColor(primaryAccentColor)
final int secondaryTextColor = findSecondaryTextColor(primaryAccentColor);
final float primaryHue = primary.getHsv()[0];
final float candidateHue = candidate.getHsv()[0];
copy=Arrays.copyOf(palette,palette.length)
final MedianCutQuantizer.ColorNode[] copy = Arrays.copyOf(palette, palette.length);
maxCount=palette[0].getCount()
final float maxCount = palette[0].getCount();
lhsWeight=calculateWeight(lhs,maxCount)
final float lhsWeight = calculateWeight(lhs, maxCount);
rhsWeight=calculateWeight(rhs,maxCount)
final float rhsWeight = calculateWeight(rhs, maxCount);
float sum = 0;
float sumWeight = 0;
float value = values[i];
float weight = values[i + 1];
ColorHistogram colorHist = new ColorHistogram(pixels);
K=colorHist.getNumberOfColors()
int K = colorHist.getNumberOfColors();
ColorNode[] rCols = null;
rgb=colorHist.getColor(i)
int rgb = colorHist.getColor(i);
cnt=colorHist.getCount(i)
int cnt = colorHist.getCount(i);
ColorBox initialBox = new ColorBox(0, K - 1, 0);
List<ColorBox> colorSet = new ArrayList<ColorBox>();
int k = 1;
boolean done = false;
nextBox=findBoxToSplit(colorSet)
ColorBox nextBox = findBoxToSplit(colorSet);
newBox=nextBox.splitBox()
ColorBox newBox = nextBox.splitBox();
color=findClosestColor(pixels[i])
ColorNode color = findClosestColor(pixels[i]);
idx=findClosestColorIndex(rgb)
int idx = findClosestColorIndex(rgb);
red=Color.red(rgb)
int red = Color.red(rgb);
grn=Color.green(rgb)
int grn = Color.green(rgb);
blu=Color.blue(rgb)
int blu = Color.blue(rgb);
int minIdx = 0;
int minDistance = Integer.MAX_VALUE;
ColorNode color = quantColors[i];
d2=color.distance2(red,grn,blu)
int d2 = color.distance2(red, grn, blu);
ColorBox boxToSplit = null;
int minLevel = Integer.MAX_VALUE;
n=colorBoxes.size()
int n = colorBoxes.size();
ColorNode[] avgColors = new ColorNode[n];
int i = 0;
int dr = this.red - red;
int dg = this.grn - grn;
int db = this.blu - blu;
ColorNode color = imageColors[i];
int r = color.red;
int g = color.grn;
int b = color.blu;
dim=getLongestColorDimension()
ColorDimension dim = getLongestColorDimension();
med=findMedian(dim)
int med = findMedian(dim);
int nextLevel = level + 1;
ColorBox newBox = new ColorBox(med + 1, upper, nextLevel);
int rLength = rmax - rmin;
int gLength = gmax - gmin;
int bLength = bmax - bmin;
int half = count / 2;
int nPixels, median;
int rSum = 0;
int gSum = 0;
int bSum = 0;
int n = 0;
ColorNode ci = imageColors[i];
int cnt = ci.cnt;
double nd = n;
int avgRed = (int) (0.5 + rSum / nd);
int avgGrn = (int) (0.5 + gSum / nd);
int avgBlu = (int) (0.5 + bSum / nd);
s=this.getClass().getSimpleName()
String s = this.getClass().getSimpleName();
int i = 0;
int N = pixelsOrig.length;
int[] pixelsCpy = new int[N];
int k = -1;
int curColor = -1;
int nColors = k + 1;
id=item.getItemId()
int id = item.getItemId();
Intent intent = new Intent();
bitmap=((BitmapDrawable)imageView.getDrawable()).getBitmap()
Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap();
DominantColorCalculator dominantColorCalculator = new DominantColorCalculator(bitmap);
selectedImageUri=data.getData()
Uri selectedImageUri = data.getData();
selectedImagePath=getPath(selectedImageUri)
String selectedImagePath = getPath(selectedImageUri);
String[] projection = {MediaStore.Images.Media.DATA};
cursor=managedQuery(uri,projection,null,null,null)
Cursor cursor = managedQuery(uri, projection, null, null, null);
column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)
int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
LinearLayout rootView = (LinearLayout) inflater.inflate(R.layout.fragment_main, container, false);
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
preapprovalButton=payPal.getCheckoutButton(getActivity(),PayPal.BUTTON_194x37,CheckoutButton.TEXT_PAY)
CheckoutButton preapprovalButton = payPal.getCheckoutButton(getActivity(), PayPal.BUTTON_194x37, CheckoutButton.TEXT_PAY);
preapprovalIntent=payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY)
Intent preapprovalIntent = payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY);
String resultTitle = "";
String resultInfo = "";
String resultExtra = "";
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
PayPalPreapproval preapproval = new PayPalPreapproval();
preapproval=createPreapproval(preapprovalKey)
PayPalPreapproval preapproval = createPreapproval(preapprovalKey);
Bundle bundle = new Bundle();
int availableLength = maxLength;
StringBuilder stringBuilder = new StringBuilder(maxLength);
prefixAndSuffixLength=computeAppendedLengthIncludingSeparatorSpaces(prefix,suffix)
int prefixAndSuffixLength = computeAppendedLengthIncludingSeparatorSpaces(prefix, suffix);
urlLength=computeUrlLengthIncludingSeparatorSpace(url)
int urlLength = computeUrlLengthIncludingSeparatorSpace(url);
trimmedSubject=ellipsizeTextIfExceedsMaxLength(subject,availableLength)
String trimmedSubject = ellipsizeTextIfExceedsMaxLength(subject, availableLength);
int length = 0;
preferences=context.getSharedPreferences(MRU_PREFERENCES,Context.MODE_PRIVATE)
SharedPreferences preferences = context.getSharedPreferences(MRU_PREFERENCES, Context.MODE_PRIVATE);
args=getArguments()
Bundle args = getArguments();
themeResId=getThemeResIdIfProvidedIn(args)
int themeResId = getThemeResIdIfProvidedIn(args);
title=getTitleIfProvidedIn(args)
CharSequence title = getTitleIfProvidedIn(args);
builder=createDialogBuilder(themeResId).setCancelable(true).setView(dialogView)
AlertDialog.Builder builder = createDialogBuilder(themeResId)
                .setCancelable(true)
                .setView(dialogView);
inflater=getActivity().getLayoutInflater()
LayoutInflater inflater = getActivity().getLayoutInflater();
GridView gridView = (GridView) rootView.findViewById(R.id.ps__dialog_grid);
targetApps=extractTargetAppsFrom(args)
TargetApps targetApps = extractTargetAppsFrom(args);
allShareTargets=getAvailableShareTargets(sharingIntent)
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
priorityAppInfos=createPriorityResolveInfoList(targetApps,allShareTargets)
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
otherAppInfos=createOtherAppsResolveInfoList(priorityAppInfos,allShareTargets)
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
resolveInfos=targetApps.extractTargetResolveInfosFrom(allShareTargets)
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
mruResolveInfo=findMruResolveInfoIn(allShareTargets)
ResolveInfo mruResolveInfo = findMruResolveInfoIn(allShareTargets);
List<ResolveInfo> otherAppsInfos = new ArrayList<ResolveInfo>(allAppInfos);
mruPackageName=persister.getLastUsedTarget()
String mruPackageName = persister.getLastUsedTarget();
String packageName = resolveInfo.activityInfo.packageName;
packageManager=getActivity().getPackageManager()
PackageManager packageManager = getActivity().getPackageManager();
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
View buttonStrip = (View) showMoreButton.getParent();
gridView=getGridView()
GridView gridView = getGridView();
intent=wrapIntentWithExplicitTargetComponentForItem(position,sharingIntent)
Intent intent = wrapIntentWithExplicitTargetComponentForItem(position, sharingIntent);
Intent intent = new Intent(sharingIntent);
ActivityInfo activity = adapter.getItem(position).activityInfo;
ComponentName name = new ComponentName(activity.applicationInfo.packageName, activity.name);
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
PriorityShareDialog dialog = new PriorityShareDialog();
Bundle args = new Bundle();
sharingIntent=createSharingIntent()
Intent sharingIntent = createSharingIntent();
fragmentManager=activity.getFragmentManager()
FragmentManager fragmentManager = activity.getFragmentManager();
Intent intent = new Intent(Intent.ACTION_SEND);
dialog=new PriorityShareDialog.Builder().setTitle(title).setTargetApps(targetApps).setSharingIntent(sharingIntent).setOnPrepareSharingIntentListener(listener).setShowMostRecentlyUsed(showMostRecentlyUsed).build()
PriorityShareDialog dialog = new PriorityShareDialog.Builder()
                .setTitle(title)
                .setTargetApps(targetApps)
                .setSharingIntent(sharingIntent)
                .setOnPrepareSharingIntentListener(listener)
                .setShowMostRecentlyUsed(showMostRecentlyUsed)
                .build();
PrioritySharer prioritySharer = new PrioritySharer();
prioritySharer=build()
PrioritySharer prioritySharer = build();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
layoutInflater=LayoutInflater.from(context)
LayoutInflater layoutInflater = LayoutInflater.from(context);
iconSizePx=getIconSizePx(context.getResources())
int iconSizePx = getIconSizePx(context.getResources());
ArrayList<ResolveInfo> sortedList = new ArrayList<ResolveInfo>(resolveInfoList);
int otherAppsCountMaybe = showAllApps ? otherAppInfos.size() : 0;
firstOtherAppsItemPosition=priorityAppInfos.size()
int firstOtherAppsItemPosition = priorityAppInfos.size();
int offsetPosition = position - firstOtherAppsItemPosition;
TextView textView;
textView=initializeItemViewIfNecessary(convertView,R.layout.ps__grid_item_share,parent)
TextView textView = initializeItemViewIfNecessary(convertView, R.layout.ps__grid_item_share, parent);
info=getItem(position)
ResolveInfo info = getItem(position);
icon=info.loadIcon(packageManager)
Drawable icon = info.loadIcon(packageManager);
arraySize=in.readInt()
int arraySize = in.readInt();
String[] packageNames = new String[arraySize];
arraySize=targetPackages.size()
int arraySize = targetPackages.size();
String[] packagesArray = new String[arraySize];
SparseArray<ResolveInfo> matchedResolveInfos = new SparseArray<ResolveInfo>(targetPackages.size());
String packageName = info.activityInfo.packageName;
index=indexOfItemInto(packageName,targetPackages)
int index = indexOfItemInto(packageName, targetPackages);
sparseArraySize=sparseArray.size()
int sparseArraySize = sparseArray.size();
ArrayList<T> list = new ArrayList<T>(sparseArraySize);
int i = 0;
originalSubject=intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT)
CharSequence originalSubject = intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT);
String subject = originalSubject != null ? originalSubject.toString() : null;
composer=createComposer()
MessageComposer composer = createComposer();
component=intent.getComponent()
ComponentName component = intent.getComponent();
targetPackageName=component.getPackageName()
String targetPackageName = component.getPackageName();
adapter=ArrayAdapter.createFromResource(this,R.array.target_apps,android.R.layout.simple_spinner_item)
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
EditText text = (EditText) findViewById(R.id.text);
EditText title = (EditText) findViewById(R.id.title);
EditText mimeType = (EditText) findViewById(R.id.mime_type);
EditText dataUri = (EditText) findViewById(R.id.data_uri);
Switch showMostRecentlyUsed = (Switch) findViewById(R.id.show_most_recently_used);
uriString=dataUri.getText().toString()
String uriString = dataUri.getText().toString();
EditText text = (EditText) findViewById(R.id.text);
TextView textView = (TextView) convertView.findViewById(R.id.positionView);
colorView=convertView.findViewById(R.id.colorView)
View colorView = convertView.findViewById(R.id.colorView);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
offset=headerPlaceholder.getTop()
int offset = headerPlaceholder.getTop();
Integer item = COLORS[position];
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
firstVisiblePosition=grid.getFirstVisiblePosition()
int firstVisiblePosition = grid.getFirstVisiblePosition();
inflate=getViewForPosition(container,position)
View inflate = getViewForPosition(container, position);
id=item.getItemId()
int id = item.getItemId();
MyActivity activity = new MyActivity();
String manifestProperty = "../app/src/main/AndroidManifest.xml";
String resProperty = "../app/src/main/res";
cursor=resolver.query(uri,projection,selection,selectionArgs,null)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, null);
cursor=resolver.query(uri,projection,selection,selectionArgs,sortOrder)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, sortOrder);
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=richClass.setter(name)
Method setter = richClass.setter(name);
T obj;
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=methodsByName.get(name)
Method setter = methodsByName.get(name);
int type = TYPE_INT;
Class<?> t = setter.getParameterTypes()[0];
Class<?> t = setter.getParameterTypes()[0];
cursorType=cursor.getType(index)
final int cursorType = cursor.getType(index);
final Object obj;
s=f.getAnnotation(Mapper.class)
Mapper s = f.getAnnotation(Mapper.class);
mm=m.getAnnotation(Mapper.class)
Mapper mm = m.getAnnotation(Mapper.class);
methodName=StringUtil.asCamelifySetMethod(what)
String methodName = StringUtil.asCamelifySetMethod(what);
cursor=getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,null,null,null,null)
Cursor cursor = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
now=System.currentTimeMillis()
long now = System.currentTimeMillis();
List<Contact2> typedCursor = new CursorList<Contact2>(cursor, Contact2.class);
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[a-zA-Z0-9]+")
Pattern p = Pattern.compile("[a-zA-Z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[A-Z][a-z0-9]+")
Pattern p = Pattern.compile("[A-Z][a-z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
SurfaceView first = (SurfaceView) findViewById(R.id.firstSurface);
SurfaceView second = (SurfaceView) findViewById(R.id.secondSurface);
Intent pickVideo = new Intent(Intent.ACTION_PICK);
xml=context.obtainStyledAttributes(attrs,R.styleable.RelativeLayoutWithForeground)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.RelativeLayoutWithForeground);
int foregroundResId = INVALID_FOREGROUND_ID;
drawable=getDrawable(getResources(),foregroundResId)
Drawable drawable = getDrawable(getResources(), foregroundResId);
Bundle args = new Bundle();
enroll=mHotwordDetector.createEnrollIntent()
Intent enroll = mHotwordDetector.createEnrollIntent();

Diff of 5a97731ea690ea41160fbec872088c81787100c3 and 6f6ce1906b77583c35a5b6abf97f313d261eb388:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 4
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 5a97731ea690ea41160fbec872088c81787100c3 to 6f6ce1906b77583c35a5b6abf97f313d261eb388


****Parsing for addition at revision 6f6ce1906b77583c35a5b6abf97f313d261eb388****

Added AccessibilityServices.java to .\/spikes\ repository source files.
Added AccessibilityServicesActivity.java to .\/spikes\ repository source files.
Added Demo.java to .\/spikes\ repository source files.
Added DemoAdapter.java to .\/spikes\ repository source files.
Added CustomActionsActivity.java to .\/spikes\ repository source files.
Added DemosActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added DrawerActivity.java to .\/spikes\ repository source files.
Added EarthActivity.java to .\/spikes\ repository source files.
Added ProHaxDrawerActivity.java to .\/spikes\ repository source files.
Added SaturnActivity.java to .\/spikes\ repository source files.
Added LocalPlayerActivity.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added CastApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ComposeSmsActivity.java to .\/spikes\ repository source files.
Added HeadlessSmsSendService.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MmsReceiver.java to .\/spikes\ repository source files.
Added SmsReceiver.java to .\/spikes\ repository source files.
Added ExtendedDemoActivity.java to .\/spikes\ repository source files.
Added ExtendedDemoApplication.java to .\/spikes\ repository source files.
Added SimpleDemoActivity.java to .\/spikes\ repository source files.
Added SimpleDemoApplication.java to .\/spikes\ repository source files.
Added Binder.java to .\/spikes\ repository source files.
Added ConnectedClient.java to .\/spikes\ repository source files.
Added Connection.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnection.java to .\/spikes\ repository source files.
Added ServiceConnectionCallback.java to .\/spikes\ repository source files.
Added EasyCustomTabs.java to .\/spikes\ repository source files.
Added ActionButtonComposer.java to .\/spikes\ repository source files.
Added CloseButtonIconComposer.java to .\/spikes\ repository source files.
Added Composer.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilder.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigator.java to .\/spikes\ repository source files.
Added EasyCustomTabsWebNavigator.java to .\/spikes\ repository source files.
Added ExitAnimationsComposer.java to .\/spikes\ repository source files.
Added IntentCustomizer.java to .\/spikes\ repository source files.
Added MenuItemComposer.java to .\/spikes\ repository source files.
Added NavigationFallback.java to .\/spikes\ repository source files.
Added Navigator.java to .\/spikes\ repository source files.
Added ShowTitleComposer.java to .\/spikes\ repository source files.
Added StartAnimationsComposer.java to .\/spikes\ repository source files.
Added ToolbarColorComposer.java to .\/spikes\ repository source files.
Added UrlBarHidingComposer.java to .\/spikes\ repository source files.
Added WebNavigator.java to .\/spikes\ repository source files.
Added AvailableAppProvider.java to .\/spikes\ repository source files.
Added BestPackageFinder.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProvider.java to .\/spikes\ repository source files.
Added BinderTest.java to .\/spikes\ repository source files.
Added ConnectedClientTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnectionTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigatorTest.java to .\/spikes\ repository source files.
Added BestPackageFinderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProviderTest.java to .\/spikes\ repository source files.
Added ApiPagedChannelHistory.java to .\/spikes\ repository source files.
Added ApiPagedResponse.java to .\/spikes\ repository source files.
Added ChannelHistory.java to .\/spikes\ repository source files.
Added HistoryConverter.java to .\/spikes\ repository source files.
Added Runner.java to .\/spikes\ repository source files.
Added SlackHistoryFetcher.java to .\/spikes\ repository source files.
Added SlackWebService.java to .\/spikes\ repository source files.
Added ApiPagedResponseTest.java to .\/spikes\ repository source files.
Added MainActivityTest.java to .\/spikes\ repository source files.
Added LoremAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added BetterAccountManager.java to .\/spikes\ repository source files.
Added BetterAuthenticator.java to .\/spikes\ repository source files.
Added BetterAuthenticatorActivity.java to .\/spikes\ repository source files.
Added GertHerbAuthenticator.java to .\/spikes\ repository source files.
Added GertHerbAuthenticatorService.java to .\/spikes\ repository source files.
Added NoAccountException.java to .\/spikes\ repository source files.
Added ReactiveAuthenticatorActivity.java to .\/spikes\ repository source files.
Added Token.java to .\/spikes\ repository source files.
Added GertHerbActivity.java to .\/spikes\ repository source files.
Added GertHerbApplication.java to .\/spikes\ repository source files.
Added GertHerbAuthenticationActivity.java to .\/spikes\ repository source files.
Added TypefaceFactory.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added ViewServer.java to .\/spikes\ repository source files.
Added ViewServerManager.java to .\/spikes\ repository source files.
Added DeveloperError.java to .\/spikes\ repository source files.
Added HomeActivity.java to .\/spikes\ repository source files.
Added LoginActivity.java to .\/spikes\ repository source files.
Added LoginView.java to .\/spikes\ repository source files.
Added UserCredentials.java to .\/spikes\ repository source files.
Added FontButton.java to .\/spikes\ repository source files.
Added FontEditText.java to .\/spikes\ repository source files.
Added FontTextView.java to .\/spikes\ repository source files.
Added GithubApi.java to .\/spikes\ repository source files.
Added GithubApiFactory.java to .\/spikes\ repository source files.
Added TokenRequest.java to .\/spikes\ repository source files.
Added TokenResponse.java to .\/spikes\ repository source files.
Added Dummy.java to .\/spikes\ repository source files.
Added DummyTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MainFragment.java to .\/spikes\ repository source files.
Added Attributes.java to .\/spikes\ repository source files.
Added Coordinates.java to .\/spikes\ repository source files.
Added IndicatorCoordinatesCalculator.java to .\/spikes\ repository source files.
Added LandingStrip.java to .\/spikes\ repository source files.
Added MutableCoordinates.java to .\/spikes\ repository source files.
Added OnPagerAdapterChangedListener.java to .\/spikes\ repository source files.
Added PagerAdapterObserver.java to .\/spikes\ repository source files.
Added Scrollable.java to .\/spikes\ repository source files.
Added ScrollingPageChangeListener.java to .\/spikes\ repository source files.
Added State.java to .\/spikes\ repository source files.
Added TabsContainer.java to .\/spikes\ repository source files.
Added CustomLandingStrip.java to .\/spikes\ repository source files.
Added CustomTabActivity.java to .\/spikes\ repository source files.
Added ExampleRainbowLandingStrip.java to .\/spikes\ repository source files.
Added FixedWidthTabActivity.java to .\/spikes\ repository source files.
Added NoFragmentsSimpleTextTabActivity.java to .\/spikes\ repository source files.
Added Data.java to .\/spikes\ repository source files.
Added DemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added SmallDemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerFragment.java to .\/spikes\ repository source files.
Added DemoViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapterState.java to .\/spikes\ repository source files.
Added SimpleTextTabActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AbTestingParamsLoadedCallback.java to .\/spikes\ repository source files.
Added AyBe.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added WeakStartCallback.java to .\/spikes\ repository source files.
Added LeakActivity.java to .\/spikes\ repository source files.
Added NoLeakActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added Bar.java to .\/spikes\ repository source files.
Added Foo.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added FooTest.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added ColorScheme.java to .\/spikes\ repository source files.
Added ColorUtils.java to .\/spikes\ repository source files.
Added DominantColorCalculator.java to .\/spikes\ repository source files.
Added FloatUtils.java to .\/spikes\ repository source files.
Added MedianCutQuantizer.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added PayPalFragment.java to .\/spikes\ repository source files.
Added PayPalHelper.java to .\/spikes\ repository source files.
Added MaxLengthMessageComposer.java to .\/spikes\ repository source files.
Added MessageComposer.java to .\/spikes\ repository source files.
Added TwitterMessageComposer.java to .\/spikes\ repository source files.
Added DisabledMruPersister.java to .\/spikes\ repository source files.
Added MruPersister.java to .\/spikes\ repository source files.
Added SharedPreferencesMruPersister.java to .\/spikes\ repository source files.
Added OnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added PriorityShareDialog.java to .\/spikes\ repository source files.
Added PrioritySharer.java to .\/spikes\ repository source files.
Added ShareTargetsAdapter.java to .\/spikes\ repository source files.
Added SimpleOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added TargetApps.java to .\/spikes\ repository source files.
Added TwitterOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AdvancedActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SimpleActivity.java to .\/spikes\ repository source files.
Added LockingActivity.java to .\/spikes\ repository source files.
Added PostLockingActivity.java to .\/spikes\ repository source files.
Added PreLockingActivity.java to .\/spikes\ repository source files.
Added DummyAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added NovoStaggeredGridView.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SpikeApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SwipeableView.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MyClass.java to .\/spikes\ repository source files.
Added MyClassTest.java to .\/spikes\ repository source files.
Added MyAndroidClassTest.java to .\/spikes\ repository source files.
Added RobolectricGradleTestRunner.java to .\/spikes\ repository source files.
Added Mapper.java to .\/spikes\ repository source files.
Added Query.java to .\/spikes\ repository source files.
Added TypedResolver.java to .\/spikes\ repository source files.
Added CursorList.java to .\/spikes\ repository source files.
Added CursorListIterator.java to .\/spikes\ repository source files.
Added CursorMarshaller.java to .\/spikes\ repository source files.
Added EmptyListIterator.java to .\/spikes\ repository source files.
Added ReflectionCursorMarshaller.java to .\/spikes\ repository source files.
Added RichClass.java to .\/spikes\ repository source files.
Added Setter.java to .\/spikes\ repository source files.
Added Function.java to .\/spikes\ repository source files.
Added TypedElementLoader.java to .\/spikes\ repository source files.
Added TypedLoader.java to .\/spikes\ repository source files.
Added Marshaller.java to .\/spikes\ repository source files.
Added ObjectMapper.java to .\/spikes\ repository source files.
Added TypedActivity.java to .\/spikes\ repository source files.
Added StringUtil.java to .\/spikes\ repository source files.
Added MyObject.java to .\/spikes\ repository source files.
Added MediaPlayerSwitcherActivity.java to .\/spikes\ repository source files.
Added VideoPlayerService.java to .\/spikes\ repository source files.
Added RelativeLayoutWithForeground.java to .\/spikes\ repository source files.
Added DemoActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added RecognitionService.java to .\/spikes\ repository source files.
Added SessionService.java to .\/spikes\ repository source files.
Added SettingsActivity.java to .\/spikes\ repository source files.
Added SmartContextInteractionService.java to .\/spikes\ repository source files.
AccessibilityManager accessibilityManager = (AccessibilityManager) context.getSystemService(Context.ACCESSIBILITY_SERVICE);
enabledServices=getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN)
List<AccessibilityServiceInfo> enabledServices = getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN);
List<AccessibilityServiceInfo> enabledServices = getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN);
View view = convertView;
demo=getItem(position)
Demo demo = getItem(position);
Intent intent = new Intent(context, demo.activityClass);
layoutInflater=LayoutInflater.from(parent.getContext())
LayoutInflater layoutInflater = LayoutInflater.from(parent.getContext());
ListView listView = ((ListView) findViewById(R.id.list));
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
final DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close) {

            @Override
            public void onDrawerClosed(View drawerView) {
                super.onDrawerClosed(drawerView);
                // waiting for the drawer to close, then navigating seems to cause issue.
                // why wait for the drawer to close? jankiness.
                if (pendingNavigationClick != null) {
                    startActivity(pendingNavigationClick);
                    pendingNavigationClick = null;
                }
            }

        };
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close);
Intent intent;
b=getIntent().getExtras()
Bundle b = getIntent().getExtras();
mShouldStartPlayback=b.getBoolean("shouldStart")
boolean mShouldStartPlayback = b.getBoolean("shouldStart");
startPosition=b.getInt("startPosition",0)
int startPosition = b.getInt("startPosition", 0);
currentPos=mVideoView.getCurrentPosition()
int currentPos = mVideoView.getCurrentPosition();
String msg;
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, mDisplaySize.y + getActionBar().getHeight());
mm=mSelectedMedia.getMetadata()
MediaMetadata mm = mSelectedMedia.getMetadata();
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, (int) (mDisplaySize.x * ASPECT_RATIO));
WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
width=display.getWidth()
int width = display.getWidth();
height=display.getHeight()
int height = display.getHeight();
int resourceId = 0;
String videoUrl = "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4#sthash.rJ5rPZy8.dpuf";
String title = "Jahre Philharmonie";
String description = "Awesome film you must watch!";
String author = "Blundell";
String thumbUrl = "http://www.ustream.tv/blog/wp-content/uploads/2013/10/simply-go-live.png";
MediaMetadata metadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE);
mediaInfo=new MediaInfo.Builder(videoUrl).setMetadata(metadata).setStreamType(MediaInfo.STREAM_TYPE_BUFFERED).setContentType("video/mp4").build()
MediaInfo mediaInfo = new MediaInfo.Builder(videoUrl)
                        .setMetadata(metadata)
                        .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)
                        .setContentType("video/mp4")
                        .build();
Intent intent = new Intent(MainActivity.this, LocalPlayerActivity.class);
preferences=getPreferences(MODE_PRIVATE)
SharedPreferences preferences = getPreferences(MODE_PRIVATE);
defaultSmsPackage=Telephony.Sms.getDefaultSmsPackage(this)
String defaultSmsPackage = Telephony.Sms.getDefaultSmsPackage(this);
Intent intent = new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
availableAppProvider=EasyCustomTabs.getInstance()
AvailableAppProvider availableAppProvider = EasyCustomTabs.getInstance();
ConnectedClient connectedClient = new ConnectedClient(client);
binder=Binder.newInstance()
Binder binder = Binder.newInstance();
List<Composer> composerList = new ArrayList<>();
customTabsSession=connection.newSession()
CustomTabsSession customTabsSession = connection.newSession();
CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(customTabsSession);
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
context=EasyCustomTabs.getInstance().getContext()
Context context = EasyCustomTabs.getInstance().getContext();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
packagesSupportingCustomTabs=getPackagesSupportingCustomTabs()
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
defaultPackage=getDefaultPackage()
String defaultPackage = getDefaultPackage();
defaultActivityInfo=packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK,0)
ResolveInfo defaultActivityInfo = packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK, 0);
String packageName = defaultActivityInfo.activityInfo.packageName;
resolvedInfoList=packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK,0)
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<String> packagesSupportingCustomTabs = new ArrayList<>();
Intent serviceIntent = new Intent();
bestPackageFinder=BestPackageFinder.newInstance()
BestPackageFinder bestPackageFinder = BestPackageFinder.newInstance();
packageName=bestPackageFinder.findBestPackage()
String packageName = bestPackageFinder.findBestPackage();
resolveInfo=createResolveInfoFor(packageName)
ResolveInfo resolveInfo = createResolveInfoFor(packageName);
ResolveInfo resolveInfo = new ResolveInfo();
List<ResolveInfo> resolveInfoList = new ArrayList<>();
defaultPackageResolveInfo=createResolveInfoFor(packageName)
ResolveInfo defaultPackageResolveInfo = createResolveInfoFor(packageName);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
oldestApiMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage oldestApiMessage = apiMessages.get(apiMessages.size() - 1);
String lastResponseEpochTime = oldestApiMessage.timeStamp;
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
latestMessage=latestMessages.get(latestMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage latestMessage = latestMessages.get(latestMessages.size() - 1);
latestMessageDateTime=convertToLocalDateTime(latestMessage.timeStamp)
LocalDateTime latestMessageDateTime = convertToLocalDateTime(latestMessage.timeStamp);
List<ChannelHistory.Message> messages = new ArrayList<>();
historyFrom=getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1))
LocalDateTime historyFrom = getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1));
historyTo=getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0))
LocalDateTime historyTo = getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0));
String text = apiMessage.text;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
lastMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage lastMessage = apiMessages.get(apiMessages.size() - 1);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
firstMessage=apiMessages.get(0)
ApiPagedChannelHistory.ApiMessage firstMessage = apiMessages.get(0);
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
String slackToken = args[0];
retrofit=new Retrofit.Builder().baseUrl("https://slack.com/api/").addConverterFactory(GsonConverterFactory.create()).build()
Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://slack.com/api/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();
slackWebService=retrofit.create(SlackWebService.class)
SlackWebService slackWebService = retrofit.create(SlackWebService.class);
slackHistoryFetcher=SlackHistoryFetcher.from(slackWebService,slackToken)
SlackHistoryFetcher slackHistoryFetcher = SlackHistoryFetcher.from(slackWebService, slackToken);
start=LocalDateTime.now()
LocalDateTime start = LocalDateTime.now();
end=LocalDateTime.now().minusDays(7)
LocalDateTime end = LocalDateTime.now().minusDays(7);
channelHistory=slackHistoryFetcher.getChannelHistory(start,end)
ChannelHistory channelHistory = slackHistoryFetcher.getChannelHistory(start, end);
HistoryConverter historyConverter = new HistoryConverter();
ApiPagedResponse apiPagedResponse = new ApiPagedResponse(start);
response=fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime())
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
apiPagedChannelHistory=response.body()
ApiPagedChannelHistory apiPagedChannelHistory = response.body();
channelHistory=slackWebService.getChannelHistory(slackToken,channel,lastResponseEpochTime,NUMBER_OF_RESULTS)
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
ApiPagedChannelHistory apiPagedChannelHistory = new ApiPagedChannelHistory();
ApiPagedChannelHistory.ApiMessage apiMessage = new ApiPagedChannelHistory.ApiMessage();
final TextView textView = new TextView(context);
emptyView=findViewById(R.id.empty_view)
View emptyView = findViewById(R.id.empty_view);
final Integer action = values[0];
LoremAdapter loremAdapter = new LoremAdapter();
accounts=accountManager.getAccountsByType(accountType)
Account[] accounts = accountManager.getAccountsByType(accountType);
Bundle result;
Bundle result;
Bundle result = new Bundle();
activity=createLoginIntent(context,accountType,authTokenType,requiredFeatures,options)
Intent activity = createLoginIntent(context, accountType, authTokenType, requiredFeatures, options);
Bundle bundle = new Bundle();
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
accounts=accountManager.getAccountsByType(authTokenType)
Account[] accounts = accountManager.getAccountsByType(authTokenType);
bundle=createResponseBundle(token)
Bundle bundle = createResponseBundle(token);
accountManager=AccountManager.get(this.getApplicationContext())
AccountManager accountManager = AccountManager.get(this.getApplicationContext());
Account account = new Account(token.getUserName(), getAccountName());
Bundle bundle = new Bundle();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
GertHerbAuthenticator authenticator = new GertHerbAuthenticator(this);
fontId=getFontId(context,attrs)
int fontId = getFontId(context, attrs);
fontType=getFontType(fontId)
FontType fontType = getFontType(fontId);
typedArray=context.obtainStyledAttributes(attrs,R.styleable.CustomTextAppearance)
TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CustomTextAppearance);
typeface=createTypeFace(context,fontType)
Typeface typeface = createTypeFace(context, fontType);
info=context.getApplicationInfo()
ApplicationInfo info = context.getApplicationInfo();
name=activity.getTitle().toString()
String name = activity.getTitle().toString();
client=mServer.accept()
Socket client = mServer.accept();
boolean result;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
BufferedReader in = null;
request=in.readLine()
final String request = in.readLine();
String command;
String parameters;
index=request.indexOf(' ')
int index = request.indexOf(' ');
boolean result;
boolean success = true;
BufferedWriter out = null;
index=parameters.indexOf(' ')
int index = parameters.indexOf(' ');
code=parameters.substring(0,index)
final String code = parameters.substring(0, index);
int hashCode = (int) Long.parseLong(code, 16);
window=findWindow(hashCode)
final View window = findWindow(hashCode);
dispatch=ViewDebug.class.getDeclaredMethod("dispatchCommand",View.class,String.class,String.class,OutputStream.class)
final Method dispatch = ViewDebug.class.getDeclaredMethod("dispatchCommand",
                        View.class, String.class, String.class, OutputStream.class);
View window = null;
boolean result = true;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
boolean result = true;
String focusName = null;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
View focusedWindow = null;
BufferedWriter out = null;
boolean needWindowListUpdate = false;
boolean needFocusedWindowUpdate = false;
BetterAccountManager accountManager = new BetterAccountManager(this, getString(R.string.account_type), getString(R.string.token_type), null);
loginView=Views.findById(this,R.id.login_view)
LoginView loginView = Views.findById(this, R.id.login_view);
authorizationApi=new GithubApiFactory().createAuthorizationApi(credentials.username,credentials.password)
GithubApi authorizationApi = new GithubApiFactory().createAuthorizationApi(credentials.username, credentials.password);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
Endpoint endpoint = new Endpoint() {
            @Override
            public String getUrl() {
                return GITHUB_API_URL;
            }

            @Override
            public String getName() {
                return "Live";
            }
        };
interceptor=createAuthorizationRequestInterceptor(username,password)
RequestInterceptor interceptor = createAuthorizationRequestInterceptor(username, password);
restAdapter=createRestAdapter(endpoint,interceptor)
RestAdapter restAdapter = createRestAdapter(endpoint, interceptor);
Dummy dummy = new Dummy();
result=dummy.explodes()
boolean result = dummy.explodes();
String base64EncodedPublicKey = "CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE";
premiumPurchase=inventory.getPurchase(SKU_PREMIUM)
Purchase premiumPurchase = inventory.getPurchase(SKU_PREMIUM);
infiniteGasPurchase=inventory.getPurchase(SKU_INFINITE_GAS)
Purchase infiniteGasPurchase = inventory.getPurchase(SKU_INFINITE_GAS);
gasPurchase=inventory.getPurchase(SKU_GAS)
Purchase gasPurchase = inventory.getPurchase(SKU_GAS);
String payload = "";
String payload = "";
String payload = "";
payload=p.getDeveloperPayload()
String payload = p.getDeveloperPayload();
int index = mTank >= TANK_RES_IDS.length ? TANK_RES_IDS.length - 1 : mTank;
AlertDialog.Builder bld = new AlertDialog.Builder(this);
spe=getPreferences(MODE_PRIVATE).edit()
SharedPreferences.Editor spe = getPreferences(MODE_PRIVATE).edit();
sp=getPreferences(MODE_PRIVATE)
SharedPreferences sp = getPreferences(MODE_PRIVATE);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                                  + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                    | ((source[d + 1 + off] << 24) >>> 16)
                    | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                    | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                                   "-1002:Bad response received/" +
                                   "-1003:Purchase signature verification failed/" +
                                   "-1004:Send intent failed/" +
                                   "-1005:User cancelled/" +
                                   "-1006:Unknown purchase response/" +
                                   "-1007:Missing token/" +
                                   "-1008:Unknown error/" +
                                   "-1009:Subscriptions not available/" +
                                   "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(),
                    itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                        | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                        | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                            | ((source[d + 1 + off] << 24) >>> 16)
                            | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                            | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                "-1002:Bad response received/" +
                "-1003:Purchase signature verification failed/" +
                "-1004:Send intent failed/" +
                "-1005:User cancelled/" +
                "-1006:Unknown purchase response/" +
                "-1007:Missing token/" +
                "-1008:Unknown error/" +
                "-1009:Subscriptions not available/" +
                "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(), itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
responseCode=result.getResponse()
int responseCode = result.getResponse();
sku=purchase.getSku()
String sku = purchase.getSku();
skuDetails=inv.getSkuDetails(sku)
SkuDetails skuDetails = inv.getSkuDetails(sku);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
Button purchaseFiveButton = (Button) rootView.findViewById(R.id.fragment_main_button_purchase_five_coins);
xml=context.obtainStyledAttributes(attrs,R.styleable.LandingStrip)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.LandingStrip);
tabLayoutId=xml.getResourceId(R.styleable.LandingStrip_tabLayoutId,MISSING_TAB_LAYOUT_ID)
int tabLayoutId = xml.getResourceId(R.styleable.LandingStrip_tabLayoutId, MISSING_TAB_LAYOUT_ID);
indicatorColour=xml.getResourceId(R.styleable.LandingStrip_indicatorColor,DEFAULT_INDICATOR_COLOUR)
int indicatorColour = xml.getResourceId(R.styleable.LandingStrip_indicatorColor, DEFAULT_INDICATOR_COLOUR);
indicatorHeight=getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight,DEFAULT_INDICATOR_HEIGHT,xml)
int indicatorHeight = getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight, DEFAULT_INDICATOR_HEIGHT, xml);
tabsPaddingLeft=getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingLeft = getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding, DEFAULT_TABS_PADDING, xml);
tabsPaddingRight=getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingRight = getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding, DEFAULT_TABS_PADDING, xml);
MutableCoordinates drawCurrentTabCoordinates = new MutableCoordinates();
MutableCoordinates drawNextTabCoordinates = new MutableCoordinates();
MutableCoordinates drawMovingIndicatorCoordinates = new MutableCoordinates();
currentTab=tabsContainer.getTabAt(currentPosition)
View currentTab = tabsContainer.getTabAt(currentPosition);
currentTabStart=currentTab.getLeft()
float currentTabStart = currentTab.getLeft();
currentTabEnd=currentTab.getRight()
float currentTabEnd = currentTab.getRight();
nextTab=tabsContainer.getTabAt(currentPosition + 1)
View nextTab = tabsContainer.getTabAt(currentPosition + 1);
nextTabPositionOffset=getFractionFrom(pagePositionOffset)
float nextTabPositionOffset = getFractionFrom(pagePositionOffset);
indicatorStart=getIndicatorPosition(nextTab.getStart(),pagePositionOffset,currentTab.getStart(),nextTabPositionOffset)
float indicatorStart = getIndicatorPosition(nextTab.getStart(), pagePositionOffset, currentTab.getStart(), nextTabPositionOffset);
indicatorEnd=getIndicatorPosition(nextTab.getEnd(),pagePositionOffset,currentTab.getEnd(),nextTabPositionOffset)
float indicatorEnd = getIndicatorPosition(nextTab.getEnd(), pagePositionOffset, currentTab.getEnd(), nextTabPositionOffset);
height=getHeight()
int height = getHeight();
tabCount=pagerAdapter.getCount()
int tabCount = pagerAdapter.getCount();
title=pagerAdapter.getPageTitle(position)
CharSequence title = pagerAdapter.getPageTitle(position);
inflatedTabView=tabsContainer.inflateTab(layoutInflater,attributes.getTabLayoutId())
View inflatedTabView = tabsContainer.inflateTab(layoutInflater, attributes.getTabLayoutId());
int position = (int) view.getTag(TAG_KEY_POSITION);
scrollOffset=getHorizontalScrollOffset(position,positionOffset)
int scrollOffset = getHorizontalScrollOffset(position, positionOffset);
newScrollX=calculateScrollOffset(position,scrollOffset,positionOffset)
float newScrollX = calculateScrollOffset(position, scrollOffset, positionOffset);
tabWidth=tabsContainer.getTabAt(position).getWidth()
int tabWidth = tabsContainer.getTabAt(position).getWidth();
tabForPosition=tabsContainer.getTabAt(position)
View tabForPosition = tabsContainer.getTabAt(position);
float tabStartX = tabForPosition.getLeft() + scrollOffset;
int viewMiddleOffset = getTabParentWidth() / 2;
float tabCenterOffset = (tabForPosition.getRight() - tabForPosition.getLeft()) * 0.5F;
nextTabDelta=getNextTabDelta(position,pagerOffset,tabForPosition)
float nextTabDelta = getNextTabDelta(position, pagerOffset, tabForPosition);
LinearLayout tabsContainerView = new LinearLayout(context);
tab=getTabAt(index)
View tab = getTabAt(index);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
position=indicatorCoordinates.getStart()
float position = indicatorCoordinates.getStart();
lastTabOffset=((ViewGroup)getChildAt(0)).getChildAt(getChildCount() - 1).getWidth()
float lastTabOffset = ((ViewGroup) getChildAt(0)).getChildAt(getChildCount() - 1).getWidth();
frequency=getOneCycle(lastTabOffset)
float frequency = getOneCycle(lastTabOffset);
r=toHex(calculateColour(position,frequency,PHASE_RED,AMPLITUDE,CENTER_FREQUENCY))
String r = toHex(calculateColour(position, frequency, PHASE_RED, AMPLITUDE, CENTER_FREQUENCY));
g=toHex(calculateColour(position,frequency,PHASE_GREEN,AMPLITUDE,CENTER_FREQUENCY))
String g = toHex(calculateColour(position, frequency, PHASE_GREEN, AMPLITUDE, CENTER_FREQUENCY));
b=toHex(calculateColour(position,frequency,PHASE_BLUE,AMPLITUDE,CENTER_FREQUENCY))
String b = toHex(calculateColour(position, frequency, PHASE_BLUE, AMPLITUDE, CENTER_FREQUENCY));
height=getHeight()
int height = getHeight();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPagerFragment viewPagerFragment = new ViewPagerFragment();
Bundle bundle = new Bundle();
TextView view = (TextView) layoutInflater.inflate(R.layout.view_demo, container, false);
currentPosition=viewPagerAdapterState.getCurrentPosition()
int currentPosition = viewPagerAdapterState.getCurrentPosition();
view=getView(container,position)
View view = getView(container, position);
parcelableSparseArray=viewPagerAdapterState.get(position)
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
View view = (View) object;
SparseArray<Parcelable> viewState = new SparseArray<>();
position=entry.getValue()
int position = entry.getValue();
view=entry.getKey()
View view = entry.getKey();
bundle=in.readBundle()
Bundle bundle = in.readBundle();
Map<Integer, SparseArray<Parcelable>> viewStates = new HashMap<>(bundle.keySet().size());
sparseParcelableArray=bundle.getSparseParcelableArray(key)
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
primaryItemPosition=in.readInt()
int primaryItemPosition = in.readInt();
Bundle bundle = new Bundle();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
final TextView abText = (TextView) findViewById(R.id.ab_text);
final AyBe ayBe = new AyBe();
id=item.getItemId()
int id = item.getItemId();
callback=weakCallback.get()
AbTestingParamsLoadedCallback callback = weakCallback.get();
WeakReference<NoLeakActivity> weakNoLeakActivity = new WeakReference<NoLeakActivity>(noLeakActivity);
noLeakActivity=weakNoLeakActivity.get()
NoLeakActivity noLeakActivity = weakNoLeakActivity.get();
RecyclerView recyclerView = (RecyclerView) layoutInflater.inflate(R.layout.view_page, viewGroup, false);
itemView=layoutInflater.inflate(R.layout.view_item,parent,false)
View itemView = layoutInflater.inflate(R.layout.view_item, parent, false);
actual=foo.twice(HALF)
int actual = foo.twice(HALF);
int expected = WHOLE;
final float inverseRatio = 1f - ratio;
float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRatio);
float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRatio);
float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRatio);
hsv=node.getHsv()
float[] hsv = node.getHsv();
width=bitmap.getWidth()
final int width = bitmap.getWidth();
height=bitmap.getHeight()
final int height = bitmap.getHeight();
final int[] rgbPixels = new int[width * height];
final MedianCutQuantizer mcq = new MedianCutQuantizer(rgbPixels, NUM_COLORS);
primaryAccentColor=findPrimaryAccentColor()
final ColorNode primaryAccentColor = findPrimaryAccentColor();
secondaryAccentColor=findSecondaryAccentColor(primaryAccentColor)
final ColorNode secondaryAccentColor = findSecondaryAccentColor(primaryAccentColor);
tertiaryAccentColor=findTertiaryAccentColor(primaryAccentColor,secondaryAccentColor)
final int tertiaryAccentColor = findTertiaryAccentColor(
                primaryAccentColor, secondaryAccentColor);
primaryTextColor=findPrimaryTextColor(primaryAccentColor)
final int primaryTextColor = findPrimaryTextColor(primaryAccentColor);
secondaryTextColor=findSecondaryTextColor(primaryAccentColor)
final int secondaryTextColor = findSecondaryTextColor(primaryAccentColor);
final float primaryHue = primary.getHsv()[0];
final float candidateHue = candidate.getHsv()[0];
copy=Arrays.copyOf(palette,palette.length)
final MedianCutQuantizer.ColorNode[] copy = Arrays.copyOf(palette, palette.length);
maxCount=palette[0].getCount()
final float maxCount = palette[0].getCount();
lhsWeight=calculateWeight(lhs,maxCount)
final float lhsWeight = calculateWeight(lhs, maxCount);
rhsWeight=calculateWeight(rhs,maxCount)
final float rhsWeight = calculateWeight(rhs, maxCount);
float sum = 0;
float sumWeight = 0;
float value = values[i];
float weight = values[i + 1];
ColorHistogram colorHist = new ColorHistogram(pixels);
K=colorHist.getNumberOfColors()
int K = colorHist.getNumberOfColors();
ColorNode[] rCols = null;
rgb=colorHist.getColor(i)
int rgb = colorHist.getColor(i);
cnt=colorHist.getCount(i)
int cnt = colorHist.getCount(i);
ColorBox initialBox = new ColorBox(0, K - 1, 0);
List<ColorBox> colorSet = new ArrayList<ColorBox>();
int k = 1;
boolean done = false;
nextBox=findBoxToSplit(colorSet)
ColorBox nextBox = findBoxToSplit(colorSet);
newBox=nextBox.splitBox()
ColorBox newBox = nextBox.splitBox();
color=findClosestColor(pixels[i])
ColorNode color = findClosestColor(pixels[i]);
idx=findClosestColorIndex(rgb)
int idx = findClosestColorIndex(rgb);
red=Color.red(rgb)
int red = Color.red(rgb);
grn=Color.green(rgb)
int grn = Color.green(rgb);
blu=Color.blue(rgb)
int blu = Color.blue(rgb);
int minIdx = 0;
int minDistance = Integer.MAX_VALUE;
ColorNode color = quantColors[i];
d2=color.distance2(red,grn,blu)
int d2 = color.distance2(red, grn, blu);
ColorBox boxToSplit = null;
int minLevel = Integer.MAX_VALUE;
n=colorBoxes.size()
int n = colorBoxes.size();
ColorNode[] avgColors = new ColorNode[n];
int i = 0;
int dr = this.red - red;
int dg = this.grn - grn;
int db = this.blu - blu;
ColorNode color = imageColors[i];
int r = color.red;
int g = color.grn;
int b = color.blu;
dim=getLongestColorDimension()
ColorDimension dim = getLongestColorDimension();
med=findMedian(dim)
int med = findMedian(dim);
int nextLevel = level + 1;
ColorBox newBox = new ColorBox(med + 1, upper, nextLevel);
int rLength = rmax - rmin;
int gLength = gmax - gmin;
int bLength = bmax - bmin;
int half = count / 2;
int nPixels, median;
int rSum = 0;
int gSum = 0;
int bSum = 0;
int n = 0;
ColorNode ci = imageColors[i];
int cnt = ci.cnt;
double nd = n;
int avgRed = (int) (0.5 + rSum / nd);
int avgGrn = (int) (0.5 + gSum / nd);
int avgBlu = (int) (0.5 + bSum / nd);
s=this.getClass().getSimpleName()
String s = this.getClass().getSimpleName();
int i = 0;
int N = pixelsOrig.length;
int[] pixelsCpy = new int[N];
int k = -1;
int curColor = -1;
int nColors = k + 1;
id=item.getItemId()
int id = item.getItemId();
Intent intent = new Intent();
bitmap=((BitmapDrawable)imageView.getDrawable()).getBitmap()
Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap();
DominantColorCalculator dominantColorCalculator = new DominantColorCalculator(bitmap);
selectedImageUri=data.getData()
Uri selectedImageUri = data.getData();
selectedImagePath=getPath(selectedImageUri)
String selectedImagePath = getPath(selectedImageUri);
String[] projection = {MediaStore.Images.Media.DATA};
cursor=managedQuery(uri,projection,null,null,null)
Cursor cursor = managedQuery(uri, projection, null, null, null);
column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)
int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
LinearLayout rootView = (LinearLayout) inflater.inflate(R.layout.fragment_main, container, false);
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
preapprovalButton=payPal.getCheckoutButton(getActivity(),PayPal.BUTTON_194x37,CheckoutButton.TEXT_PAY)
CheckoutButton preapprovalButton = payPal.getCheckoutButton(getActivity(), PayPal.BUTTON_194x37, CheckoutButton.TEXT_PAY);
preapprovalIntent=payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY)
Intent preapprovalIntent = payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY);
String resultTitle = "";
String resultInfo = "";
String resultExtra = "";
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
PayPalPreapproval preapproval = new PayPalPreapproval();
preapproval=createPreapproval(preapprovalKey)
PayPalPreapproval preapproval = createPreapproval(preapprovalKey);
Bundle bundle = new Bundle();
int availableLength = maxLength;
StringBuilder stringBuilder = new StringBuilder(maxLength);
prefixAndSuffixLength=computeAppendedLengthIncludingSeparatorSpaces(prefix,suffix)
int prefixAndSuffixLength = computeAppendedLengthIncludingSeparatorSpaces(prefix, suffix);
urlLength=computeUrlLengthIncludingSeparatorSpace(url)
int urlLength = computeUrlLengthIncludingSeparatorSpace(url);
trimmedSubject=ellipsizeTextIfExceedsMaxLength(subject,availableLength)
String trimmedSubject = ellipsizeTextIfExceedsMaxLength(subject, availableLength);
int length = 0;
preferences=context.getSharedPreferences(MRU_PREFERENCES,Context.MODE_PRIVATE)
SharedPreferences preferences = context.getSharedPreferences(MRU_PREFERENCES, Context.MODE_PRIVATE);
args=getArguments()
Bundle args = getArguments();
themeResId=getThemeResIdIfProvidedIn(args)
int themeResId = getThemeResIdIfProvidedIn(args);
title=getTitleIfProvidedIn(args)
CharSequence title = getTitleIfProvidedIn(args);
builder=createDialogBuilder(themeResId).setCancelable(true).setView(dialogView)
AlertDialog.Builder builder = createDialogBuilder(themeResId)
                .setCancelable(true)
                .setView(dialogView);
inflater=getActivity().getLayoutInflater()
LayoutInflater inflater = getActivity().getLayoutInflater();
GridView gridView = (GridView) rootView.findViewById(R.id.ps__dialog_grid);
targetApps=extractTargetAppsFrom(args)
TargetApps targetApps = extractTargetAppsFrom(args);
allShareTargets=getAvailableShareTargets(sharingIntent)
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
priorityAppInfos=createPriorityResolveInfoList(targetApps,allShareTargets)
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
otherAppInfos=createOtherAppsResolveInfoList(priorityAppInfos,allShareTargets)
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
resolveInfos=targetApps.extractTargetResolveInfosFrom(allShareTargets)
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
mruResolveInfo=findMruResolveInfoIn(allShareTargets)
ResolveInfo mruResolveInfo = findMruResolveInfoIn(allShareTargets);
List<ResolveInfo> otherAppsInfos = new ArrayList<ResolveInfo>(allAppInfos);
mruPackageName=persister.getLastUsedTarget()
String mruPackageName = persister.getLastUsedTarget();
String packageName = resolveInfo.activityInfo.packageName;
packageManager=getActivity().getPackageManager()
PackageManager packageManager = getActivity().getPackageManager();
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
View buttonStrip = (View) showMoreButton.getParent();
gridView=getGridView()
GridView gridView = getGridView();
intent=wrapIntentWithExplicitTargetComponentForItem(position,sharingIntent)
Intent intent = wrapIntentWithExplicitTargetComponentForItem(position, sharingIntent);
Intent intent = new Intent(sharingIntent);
ActivityInfo activity = adapter.getItem(position).activityInfo;
ComponentName name = new ComponentName(activity.applicationInfo.packageName, activity.name);
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
PriorityShareDialog dialog = new PriorityShareDialog();
Bundle args = new Bundle();
sharingIntent=createSharingIntent()
Intent sharingIntent = createSharingIntent();
fragmentManager=activity.getFragmentManager()
FragmentManager fragmentManager = activity.getFragmentManager();
Intent intent = new Intent(Intent.ACTION_SEND);
dialog=new PriorityShareDialog.Builder().setTitle(title).setTargetApps(targetApps).setSharingIntent(sharingIntent).setOnPrepareSharingIntentListener(listener).setShowMostRecentlyUsed(showMostRecentlyUsed).build()
PriorityShareDialog dialog = new PriorityShareDialog.Builder()
                .setTitle(title)
                .setTargetApps(targetApps)
                .setSharingIntent(sharingIntent)
                .setOnPrepareSharingIntentListener(listener)
                .setShowMostRecentlyUsed(showMostRecentlyUsed)
                .build();
PrioritySharer prioritySharer = new PrioritySharer();
prioritySharer=build()
PrioritySharer prioritySharer = build();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
layoutInflater=LayoutInflater.from(context)
LayoutInflater layoutInflater = LayoutInflater.from(context);
iconSizePx=getIconSizePx(context.getResources())
int iconSizePx = getIconSizePx(context.getResources());
ArrayList<ResolveInfo> sortedList = new ArrayList<ResolveInfo>(resolveInfoList);
int otherAppsCountMaybe = showAllApps ? otherAppInfos.size() : 0;
firstOtherAppsItemPosition=priorityAppInfos.size()
int firstOtherAppsItemPosition = priorityAppInfos.size();
int offsetPosition = position - firstOtherAppsItemPosition;
TextView textView;
textView=initializeItemViewIfNecessary(convertView,R.layout.ps__grid_item_share,parent)
TextView textView = initializeItemViewIfNecessary(convertView, R.layout.ps__grid_item_share, parent);
info=getItem(position)
ResolveInfo info = getItem(position);
icon=info.loadIcon(packageManager)
Drawable icon = info.loadIcon(packageManager);
arraySize=in.readInt()
int arraySize = in.readInt();
String[] packageNames = new String[arraySize];
arraySize=targetPackages.size()
int arraySize = targetPackages.size();
String[] packagesArray = new String[arraySize];
SparseArray<ResolveInfo> matchedResolveInfos = new SparseArray<ResolveInfo>(targetPackages.size());
String packageName = info.activityInfo.packageName;
index=indexOfItemInto(packageName,targetPackages)
int index = indexOfItemInto(packageName, targetPackages);
sparseArraySize=sparseArray.size()
int sparseArraySize = sparseArray.size();
ArrayList<T> list = new ArrayList<T>(sparseArraySize);
int i = 0;
originalSubject=intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT)
CharSequence originalSubject = intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT);
String subject = originalSubject != null ? originalSubject.toString() : null;
composer=createComposer()
MessageComposer composer = createComposer();
component=intent.getComponent()
ComponentName component = intent.getComponent();
targetPackageName=component.getPackageName()
String targetPackageName = component.getPackageName();
adapter=ArrayAdapter.createFromResource(this,R.array.target_apps,android.R.layout.simple_spinner_item)
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
EditText text = (EditText) findViewById(R.id.text);
EditText title = (EditText) findViewById(R.id.title);
EditText mimeType = (EditText) findViewById(R.id.mime_type);
EditText dataUri = (EditText) findViewById(R.id.data_uri);
Switch showMostRecentlyUsed = (Switch) findViewById(R.id.show_most_recently_used);
uriString=dataUri.getText().toString()
String uriString = dataUri.getText().toString();
EditText text = (EditText) findViewById(R.id.text);
TextView textView = (TextView) convertView.findViewById(R.id.positionView);
colorView=convertView.findViewById(R.id.colorView)
View colorView = convertView.findViewById(R.id.colorView);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
offset=headerPlaceholder.getTop()
int offset = headerPlaceholder.getTop();
Integer item = COLORS[position];
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
firstVisiblePosition=grid.getFirstVisiblePosition()
int firstVisiblePosition = grid.getFirstVisiblePosition();
inflate=getViewForPosition(container,position)
View inflate = getViewForPosition(container, position);
id=item.getItemId()
int id = item.getItemId();
MyActivity activity = new MyActivity();
String manifestProperty = "../app/src/main/AndroidManifest.xml";
String resProperty = "../app/src/main/res";
cursor=resolver.query(uri,projection,selection,selectionArgs,null)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, null);
cursor=resolver.query(uri,projection,selection,selectionArgs,sortOrder)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, sortOrder);
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=richClass.setter(name)
Method setter = richClass.setter(name);
T obj;
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=methodsByName.get(name)
Method setter = methodsByName.get(name);
int type = TYPE_INT;
Class<?> t = setter.getParameterTypes()[0];
Class<?> t = setter.getParameterTypes()[0];
cursorType=cursor.getType(index)
final int cursorType = cursor.getType(index);
final Object obj;
s=f.getAnnotation(Mapper.class)
Mapper s = f.getAnnotation(Mapper.class);
mm=m.getAnnotation(Mapper.class)
Mapper mm = m.getAnnotation(Mapper.class);
methodName=StringUtil.asCamelifySetMethod(what)
String methodName = StringUtil.asCamelifySetMethod(what);
cursor=getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,null,null,null,null)
Cursor cursor = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
now=System.currentTimeMillis()
long now = System.currentTimeMillis();
List<Contact2> typedCursor = new CursorList<Contact2>(cursor, Contact2.class);
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[a-zA-Z0-9]+")
Pattern p = Pattern.compile("[a-zA-Z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[A-Z][a-z0-9]+")
Pattern p = Pattern.compile("[A-Z][a-z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
SurfaceView first = (SurfaceView) findViewById(R.id.firstSurface);
SurfaceView second = (SurfaceView) findViewById(R.id.secondSurface);
Intent pickVideo = new Intent(Intent.ACTION_PICK);
xml=context.obtainStyledAttributes(attrs,R.styleable.RelativeLayoutWithForeground)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.RelativeLayoutWithForeground);
int foregroundResId = INVALID_FOREGROUND_ID;
drawable=getDrawable(getResources(),foregroundResId)
Drawable drawable = getDrawable(getResources(), foregroundResId);
Bundle args = new Bundle();
enroll=mHotwordDetector.createEnrollIntent()
Intent enroll = mHotwordDetector.createEnrollIntent();

Diff of 6f6ce1906b77583c35a5b6abf97f313d261eb388 and 2e965426ea77fbd23e4c938cdc11f7f93cebc1ba:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 4
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 6f6ce1906b77583c35a5b6abf97f313d261eb388 to 2e965426ea77fbd23e4c938cdc11f7f93cebc1ba


****Parsing for addition at revision 2e965426ea77fbd23e4c938cdc11f7f93cebc1ba****

Added AccessibilityServices.java to .\/spikes\ repository source files.
Added AccessibilityServicesActivity.java to .\/spikes\ repository source files.
Added Demo.java to .\/spikes\ repository source files.
Added DemoAdapter.java to .\/spikes\ repository source files.
Added DemosActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added DrawerActivity.java to .\/spikes\ repository source files.
Added EarthActivity.java to .\/spikes\ repository source files.
Added ProHaxDrawerActivity.java to .\/spikes\ repository source files.
Added SaturnActivity.java to .\/spikes\ repository source files.
Added LocalPlayerActivity.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added CastApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ComposeSmsActivity.java to .\/spikes\ repository source files.
Added HeadlessSmsSendService.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MmsReceiver.java to .\/spikes\ repository source files.
Added SmsReceiver.java to .\/spikes\ repository source files.
Added ExtendedDemoActivity.java to .\/spikes\ repository source files.
Added ExtendedDemoApplication.java to .\/spikes\ repository source files.
Added SimpleDemoActivity.java to .\/spikes\ repository source files.
Added SimpleDemoApplication.java to .\/spikes\ repository source files.
Added Binder.java to .\/spikes\ repository source files.
Added ConnectedClient.java to .\/spikes\ repository source files.
Added Connection.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnection.java to .\/spikes\ repository source files.
Added ServiceConnectionCallback.java to .\/spikes\ repository source files.
Added EasyCustomTabs.java to .\/spikes\ repository source files.
Added ActionButtonComposer.java to .\/spikes\ repository source files.
Added CloseButtonIconComposer.java to .\/spikes\ repository source files.
Added Composer.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilder.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigator.java to .\/spikes\ repository source files.
Added EasyCustomTabsWebNavigator.java to .\/spikes\ repository source files.
Added ExitAnimationsComposer.java to .\/spikes\ repository source files.
Added IntentCustomizer.java to .\/spikes\ repository source files.
Added MenuItemComposer.java to .\/spikes\ repository source files.
Added NavigationFallback.java to .\/spikes\ repository source files.
Added Navigator.java to .\/spikes\ repository source files.
Added ShowTitleComposer.java to .\/spikes\ repository source files.
Added StartAnimationsComposer.java to .\/spikes\ repository source files.
Added ToolbarColorComposer.java to .\/spikes\ repository source files.
Added UrlBarHidingComposer.java to .\/spikes\ repository source files.
Added WebNavigator.java to .\/spikes\ repository source files.
Added AvailableAppProvider.java to .\/spikes\ repository source files.
Added BestPackageFinder.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProvider.java to .\/spikes\ repository source files.
Added BinderTest.java to .\/spikes\ repository source files.
Added ConnectedClientTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnectionTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigatorTest.java to .\/spikes\ repository source files.
Added BestPackageFinderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProviderTest.java to .\/spikes\ repository source files.
Added ApiPagedChannelHistory.java to .\/spikes\ repository source files.
Added ApiPagedResponse.java to .\/spikes\ repository source files.
Added ChannelHistory.java to .\/spikes\ repository source files.
Added HistoryConverter.java to .\/spikes\ repository source files.
Added Runner.java to .\/spikes\ repository source files.
Added SlackHistoryFetcher.java to .\/spikes\ repository source files.
Added SlackWebService.java to .\/spikes\ repository source files.
Added ApiPagedResponseTest.java to .\/spikes\ repository source files.
Added MainActivityTest.java to .\/spikes\ repository source files.
Added LoremAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added BetterAccountManager.java to .\/spikes\ repository source files.
Added BetterAuthenticator.java to .\/spikes\ repository source files.
Added BetterAuthenticatorActivity.java to .\/spikes\ repository source files.
Added GertHerbAuthenticator.java to .\/spikes\ repository source files.
Added GertHerbAuthenticatorService.java to .\/spikes\ repository source files.
Added NoAccountException.java to .\/spikes\ repository source files.
Added ReactiveAuthenticatorActivity.java to .\/spikes\ repository source files.
Added Token.java to .\/spikes\ repository source files.
Added GertHerbActivity.java to .\/spikes\ repository source files.
Added GertHerbApplication.java to .\/spikes\ repository source files.
Added GertHerbAuthenticationActivity.java to .\/spikes\ repository source files.
Added TypefaceFactory.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added ViewServer.java to .\/spikes\ repository source files.
Added ViewServerManager.java to .\/spikes\ repository source files.
Added DeveloperError.java to .\/spikes\ repository source files.
Added HomeActivity.java to .\/spikes\ repository source files.
Added LoginActivity.java to .\/spikes\ repository source files.
Added LoginView.java to .\/spikes\ repository source files.
Added UserCredentials.java to .\/spikes\ repository source files.
Added FontButton.java to .\/spikes\ repository source files.
Added FontEditText.java to .\/spikes\ repository source files.
Added FontTextView.java to .\/spikes\ repository source files.
Added GithubApi.java to .\/spikes\ repository source files.
Added GithubApiFactory.java to .\/spikes\ repository source files.
Added TokenRequest.java to .\/spikes\ repository source files.
Added TokenResponse.java to .\/spikes\ repository source files.
Added Dummy.java to .\/spikes\ repository source files.
Added DummyTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MainFragment.java to .\/spikes\ repository source files.
Added Attributes.java to .\/spikes\ repository source files.
Added Coordinates.java to .\/spikes\ repository source files.
Added IndicatorCoordinatesCalculator.java to .\/spikes\ repository source files.
Added LandingStrip.java to .\/spikes\ repository source files.
Added MutableCoordinates.java to .\/spikes\ repository source files.
Added OnPagerAdapterChangedListener.java to .\/spikes\ repository source files.
Added PagerAdapterObserver.java to .\/spikes\ repository source files.
Added Scrollable.java to .\/spikes\ repository source files.
Added ScrollingPageChangeListener.java to .\/spikes\ repository source files.
Added State.java to .\/spikes\ repository source files.
Added TabsContainer.java to .\/spikes\ repository source files.
Added CustomLandingStrip.java to .\/spikes\ repository source files.
Added CustomTabActivity.java to .\/spikes\ repository source files.
Added ExampleRainbowLandingStrip.java to .\/spikes\ repository source files.
Added FixedWidthTabActivity.java to .\/spikes\ repository source files.
Added NoFragmentsSimpleTextTabActivity.java to .\/spikes\ repository source files.
Added Data.java to .\/spikes\ repository source files.
Added DemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added SmallDemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerFragment.java to .\/spikes\ repository source files.
Added DemoViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapterState.java to .\/spikes\ repository source files.
Added SimpleTextTabActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AbTestingParamsLoadedCallback.java to .\/spikes\ repository source files.
Added AyBe.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added WeakStartCallback.java to .\/spikes\ repository source files.
Added LeakActivity.java to .\/spikes\ repository source files.
Added NoLeakActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added Bar.java to .\/spikes\ repository source files.
Added Foo.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added FooTest.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added ColorScheme.java to .\/spikes\ repository source files.
Added ColorUtils.java to .\/spikes\ repository source files.
Added DominantColorCalculator.java to .\/spikes\ repository source files.
Added FloatUtils.java to .\/spikes\ repository source files.
Added MedianCutQuantizer.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added PayPalFragment.java to .\/spikes\ repository source files.
Added PayPalHelper.java to .\/spikes\ repository source files.
Added MaxLengthMessageComposer.java to .\/spikes\ repository source files.
Added MessageComposer.java to .\/spikes\ repository source files.
Added TwitterMessageComposer.java to .\/spikes\ repository source files.
Added DisabledMruPersister.java to .\/spikes\ repository source files.
Added MruPersister.java to .\/spikes\ repository source files.
Added SharedPreferencesMruPersister.java to .\/spikes\ repository source files.
Added OnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added PriorityShareDialog.java to .\/spikes\ repository source files.
Added PrioritySharer.java to .\/spikes\ repository source files.
Added ShareTargetsAdapter.java to .\/spikes\ repository source files.
Added SimpleOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added TargetApps.java to .\/spikes\ repository source files.
Added TwitterOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AdvancedActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SimpleActivity.java to .\/spikes\ repository source files.
Added LockingActivity.java to .\/spikes\ repository source files.
Added PostLockingActivity.java to .\/spikes\ repository source files.
Added PreLockingActivity.java to .\/spikes\ repository source files.
Added DummyAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added NovoStaggeredGridView.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SpikeApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SwipeableView.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MyClass.java to .\/spikes\ repository source files.
Added MyClassTest.java to .\/spikes\ repository source files.
Added MyAndroidClassTest.java to .\/spikes\ repository source files.
Added RobolectricGradleTestRunner.java to .\/spikes\ repository source files.
Added Mapper.java to .\/spikes\ repository source files.
Added Query.java to .\/spikes\ repository source files.
Added TypedResolver.java to .\/spikes\ repository source files.
Added CursorList.java to .\/spikes\ repository source files.
Added CursorListIterator.java to .\/spikes\ repository source files.
Added CursorMarshaller.java to .\/spikes\ repository source files.
Added EmptyListIterator.java to .\/spikes\ repository source files.
Added ReflectionCursorMarshaller.java to .\/spikes\ repository source files.
Added RichClass.java to .\/spikes\ repository source files.
Added Setter.java to .\/spikes\ repository source files.
Added Function.java to .\/spikes\ repository source files.
Added TypedElementLoader.java to .\/spikes\ repository source files.
Added TypedLoader.java to .\/spikes\ repository source files.
Added Marshaller.java to .\/spikes\ repository source files.
Added ObjectMapper.java to .\/spikes\ repository source files.
Added TypedActivity.java to .\/spikes\ repository source files.
Added StringUtil.java to .\/spikes\ repository source files.
Added MyObject.java to .\/spikes\ repository source files.
Added MediaPlayerSwitcherActivity.java to .\/spikes\ repository source files.
Added VideoPlayerService.java to .\/spikes\ repository source files.
Added RelativeLayoutWithForeground.java to .\/spikes\ repository source files.
Added DemoActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added RecognitionService.java to .\/spikes\ repository source files.
Added SessionService.java to .\/spikes\ repository source files.
Added SettingsActivity.java to .\/spikes\ repository source files.
Added SmartContextInteractionService.java to .\/spikes\ repository source files.
AccessibilityManager accessibilityManager = (AccessibilityManager) context.getSystemService(Context.ACCESSIBILITY_SERVICE);
enabledServices=getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN)
List<AccessibilityServiceInfo> enabledServices = getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN);
List<AccessibilityServiceInfo> enabledServices = getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN);

 Generics pattern public final class AccessibilityServices was added at revision 2e965426ea77fbd23e4c938cdc11f7f93cebc1ba


 Generics pattern public class AccessibilityServicesActivity was added at revision 2e965426ea77fbd23e4c938cdc11f7f93cebc1ba

View view = convertView;
demo=getItem(position)
Demo demo = getItem(position);
Intent intent = new Intent(context, demo.activityClass);
layoutInflater=LayoutInflater.from(parent.getContext())
LayoutInflater layoutInflater = LayoutInflater.from(parent.getContext());
ListView listView = ((ListView) findViewById(R.id.list));
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
final DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close) {

            @Override
            public void onDrawerClosed(View drawerView) {
                super.onDrawerClosed(drawerView);
                // waiting for the drawer to close, then navigating seems to cause issue.
                // why wait for the drawer to close? jankiness.
                if (pendingNavigationClick != null) {
                    startActivity(pendingNavigationClick);
                    pendingNavigationClick = null;
                }
            }

        };
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close);
Intent intent;
b=getIntent().getExtras()
Bundle b = getIntent().getExtras();
mShouldStartPlayback=b.getBoolean("shouldStart")
boolean mShouldStartPlayback = b.getBoolean("shouldStart");
startPosition=b.getInt("startPosition",0)
int startPosition = b.getInt("startPosition", 0);
currentPos=mVideoView.getCurrentPosition()
int currentPos = mVideoView.getCurrentPosition();
String msg;
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, mDisplaySize.y + getActionBar().getHeight());
mm=mSelectedMedia.getMetadata()
MediaMetadata mm = mSelectedMedia.getMetadata();
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, (int) (mDisplaySize.x * ASPECT_RATIO));
WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
width=display.getWidth()
int width = display.getWidth();
height=display.getHeight()
int height = display.getHeight();
int resourceId = 0;
String videoUrl = "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4#sthash.rJ5rPZy8.dpuf";
String title = "Jahre Philharmonie";
String description = "Awesome film you must watch!";
String author = "Blundell";
String thumbUrl = "http://www.ustream.tv/blog/wp-content/uploads/2013/10/simply-go-live.png";
MediaMetadata metadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE);
mediaInfo=new MediaInfo.Builder(videoUrl).setMetadata(metadata).setStreamType(MediaInfo.STREAM_TYPE_BUFFERED).setContentType("video/mp4").build()
MediaInfo mediaInfo = new MediaInfo.Builder(videoUrl)
                        .setMetadata(metadata)
                        .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)
                        .setContentType("video/mp4")
                        .build();
Intent intent = new Intent(MainActivity.this, LocalPlayerActivity.class);
preferences=getPreferences(MODE_PRIVATE)
SharedPreferences preferences = getPreferences(MODE_PRIVATE);
defaultSmsPackage=Telephony.Sms.getDefaultSmsPackage(this)
String defaultSmsPackage = Telephony.Sms.getDefaultSmsPackage(this);
Intent intent = new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
availableAppProvider=EasyCustomTabs.getInstance()
AvailableAppProvider availableAppProvider = EasyCustomTabs.getInstance();
ConnectedClient connectedClient = new ConnectedClient(client);
binder=Binder.newInstance()
Binder binder = Binder.newInstance();
List<Composer> composerList = new ArrayList<>();
customTabsSession=connection.newSession()
CustomTabsSession customTabsSession = connection.newSession();
CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(customTabsSession);
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
context=EasyCustomTabs.getInstance().getContext()
Context context = EasyCustomTabs.getInstance().getContext();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
packagesSupportingCustomTabs=getPackagesSupportingCustomTabs()
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
defaultPackage=getDefaultPackage()
String defaultPackage = getDefaultPackage();
defaultActivityInfo=packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK,0)
ResolveInfo defaultActivityInfo = packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK, 0);
String packageName = defaultActivityInfo.activityInfo.packageName;
resolvedInfoList=packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK,0)
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<String> packagesSupportingCustomTabs = new ArrayList<>();
Intent serviceIntent = new Intent();
bestPackageFinder=BestPackageFinder.newInstance()
BestPackageFinder bestPackageFinder = BestPackageFinder.newInstance();
packageName=bestPackageFinder.findBestPackage()
String packageName = bestPackageFinder.findBestPackage();
resolveInfo=createResolveInfoFor(packageName)
ResolveInfo resolveInfo = createResolveInfoFor(packageName);
ResolveInfo resolveInfo = new ResolveInfo();
List<ResolveInfo> resolveInfoList = new ArrayList<>();
defaultPackageResolveInfo=createResolveInfoFor(packageName)
ResolveInfo defaultPackageResolveInfo = createResolveInfoFor(packageName);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
oldestApiMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage oldestApiMessage = apiMessages.get(apiMessages.size() - 1);
String lastResponseEpochTime = oldestApiMessage.timeStamp;
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
latestMessage=latestMessages.get(latestMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage latestMessage = latestMessages.get(latestMessages.size() - 1);
latestMessageDateTime=convertToLocalDateTime(latestMessage.timeStamp)
LocalDateTime latestMessageDateTime = convertToLocalDateTime(latestMessage.timeStamp);
List<ChannelHistory.Message> messages = new ArrayList<>();
historyFrom=getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1))
LocalDateTime historyFrom = getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1));
historyTo=getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0))
LocalDateTime historyTo = getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0));
String text = apiMessage.text;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
lastMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage lastMessage = apiMessages.get(apiMessages.size() - 1);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
firstMessage=apiMessages.get(0)
ApiPagedChannelHistory.ApiMessage firstMessage = apiMessages.get(0);
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
String slackToken = args[0];
retrofit=new Retrofit.Builder().baseUrl("https://slack.com/api/").addConverterFactory(GsonConverterFactory.create()).build()
Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://slack.com/api/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();
slackWebService=retrofit.create(SlackWebService.class)
SlackWebService slackWebService = retrofit.create(SlackWebService.class);
slackHistoryFetcher=SlackHistoryFetcher.from(slackWebService,slackToken)
SlackHistoryFetcher slackHistoryFetcher = SlackHistoryFetcher.from(slackWebService, slackToken);
start=LocalDateTime.now()
LocalDateTime start = LocalDateTime.now();
end=LocalDateTime.now().minusDays(7)
LocalDateTime end = LocalDateTime.now().minusDays(7);
channelHistory=slackHistoryFetcher.getChannelHistory(start,end)
ChannelHistory channelHistory = slackHistoryFetcher.getChannelHistory(start, end);
HistoryConverter historyConverter = new HistoryConverter();
ApiPagedResponse apiPagedResponse = new ApiPagedResponse(start);
response=fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime())
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
apiPagedChannelHistory=response.body()
ApiPagedChannelHistory apiPagedChannelHistory = response.body();
channelHistory=slackWebService.getChannelHistory(slackToken,channel,lastResponseEpochTime,NUMBER_OF_RESULTS)
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
ApiPagedChannelHistory apiPagedChannelHistory = new ApiPagedChannelHistory();
ApiPagedChannelHistory.ApiMessage apiMessage = new ApiPagedChannelHistory.ApiMessage();
final TextView textView = new TextView(context);
emptyView=findViewById(R.id.empty_view)
View emptyView = findViewById(R.id.empty_view);
final Integer action = values[0];
LoremAdapter loremAdapter = new LoremAdapter();
accounts=accountManager.getAccountsByType(accountType)
Account[] accounts = accountManager.getAccountsByType(accountType);
Bundle result;
Bundle result;
Bundle result = new Bundle();
activity=createLoginIntent(context,accountType,authTokenType,requiredFeatures,options)
Intent activity = createLoginIntent(context, accountType, authTokenType, requiredFeatures, options);
Bundle bundle = new Bundle();
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
accounts=accountManager.getAccountsByType(authTokenType)
Account[] accounts = accountManager.getAccountsByType(authTokenType);
bundle=createResponseBundle(token)
Bundle bundle = createResponseBundle(token);
accountManager=AccountManager.get(this.getApplicationContext())
AccountManager accountManager = AccountManager.get(this.getApplicationContext());
Account account = new Account(token.getUserName(), getAccountName());
Bundle bundle = new Bundle();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
GertHerbAuthenticator authenticator = new GertHerbAuthenticator(this);
fontId=getFontId(context,attrs)
int fontId = getFontId(context, attrs);
fontType=getFontType(fontId)
FontType fontType = getFontType(fontId);
typedArray=context.obtainStyledAttributes(attrs,R.styleable.CustomTextAppearance)
TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CustomTextAppearance);
typeface=createTypeFace(context,fontType)
Typeface typeface = createTypeFace(context, fontType);
info=context.getApplicationInfo()
ApplicationInfo info = context.getApplicationInfo();
name=activity.getTitle().toString()
String name = activity.getTitle().toString();
client=mServer.accept()
Socket client = mServer.accept();
boolean result;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
BufferedReader in = null;
request=in.readLine()
final String request = in.readLine();
String command;
String parameters;
index=request.indexOf(' ')
int index = request.indexOf(' ');
boolean result;
boolean success = true;
BufferedWriter out = null;
index=parameters.indexOf(' ')
int index = parameters.indexOf(' ');
code=parameters.substring(0,index)
final String code = parameters.substring(0, index);
int hashCode = (int) Long.parseLong(code, 16);
window=findWindow(hashCode)
final View window = findWindow(hashCode);
dispatch=ViewDebug.class.getDeclaredMethod("dispatchCommand",View.class,String.class,String.class,OutputStream.class)
final Method dispatch = ViewDebug.class.getDeclaredMethod("dispatchCommand",
                        View.class, String.class, String.class, OutputStream.class);
View window = null;
boolean result = true;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
boolean result = true;
String focusName = null;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
View focusedWindow = null;
BufferedWriter out = null;
boolean needWindowListUpdate = false;
boolean needFocusedWindowUpdate = false;
BetterAccountManager accountManager = new BetterAccountManager(this, getString(R.string.account_type), getString(R.string.token_type), null);
loginView=Views.findById(this,R.id.login_view)
LoginView loginView = Views.findById(this, R.id.login_view);
authorizationApi=new GithubApiFactory().createAuthorizationApi(credentials.username,credentials.password)
GithubApi authorizationApi = new GithubApiFactory().createAuthorizationApi(credentials.username, credentials.password);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
Endpoint endpoint = new Endpoint() {
            @Override
            public String getUrl() {
                return GITHUB_API_URL;
            }

            @Override
            public String getName() {
                return "Live";
            }
        };
interceptor=createAuthorizationRequestInterceptor(username,password)
RequestInterceptor interceptor = createAuthorizationRequestInterceptor(username, password);
restAdapter=createRestAdapter(endpoint,interceptor)
RestAdapter restAdapter = createRestAdapter(endpoint, interceptor);
Dummy dummy = new Dummy();
result=dummy.explodes()
boolean result = dummy.explodes();
String base64EncodedPublicKey = "CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE";
premiumPurchase=inventory.getPurchase(SKU_PREMIUM)
Purchase premiumPurchase = inventory.getPurchase(SKU_PREMIUM);
infiniteGasPurchase=inventory.getPurchase(SKU_INFINITE_GAS)
Purchase infiniteGasPurchase = inventory.getPurchase(SKU_INFINITE_GAS);
gasPurchase=inventory.getPurchase(SKU_GAS)
Purchase gasPurchase = inventory.getPurchase(SKU_GAS);
String payload = "";
String payload = "";
String payload = "";
payload=p.getDeveloperPayload()
String payload = p.getDeveloperPayload();
int index = mTank >= TANK_RES_IDS.length ? TANK_RES_IDS.length - 1 : mTank;
AlertDialog.Builder bld = new AlertDialog.Builder(this);
spe=getPreferences(MODE_PRIVATE).edit()
SharedPreferences.Editor spe = getPreferences(MODE_PRIVATE).edit();
sp=getPreferences(MODE_PRIVATE)
SharedPreferences sp = getPreferences(MODE_PRIVATE);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                                  + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                    | ((source[d + 1 + off] << 24) >>> 16)
                    | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                    | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                                   "-1002:Bad response received/" +
                                   "-1003:Purchase signature verification failed/" +
                                   "-1004:Send intent failed/" +
                                   "-1005:User cancelled/" +
                                   "-1006:Unknown purchase response/" +
                                   "-1007:Missing token/" +
                                   "-1008:Unknown error/" +
                                   "-1009:Subscriptions not available/" +
                                   "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(),
                    itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                        | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                        | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                            | ((source[d + 1 + off] << 24) >>> 16)
                            | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                            | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                "-1002:Bad response received/" +
                "-1003:Purchase signature verification failed/" +
                "-1004:Send intent failed/" +
                "-1005:User cancelled/" +
                "-1006:Unknown purchase response/" +
                "-1007:Missing token/" +
                "-1008:Unknown error/" +
                "-1009:Subscriptions not available/" +
                "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(), itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
responseCode=result.getResponse()
int responseCode = result.getResponse();
sku=purchase.getSku()
String sku = purchase.getSku();
skuDetails=inv.getSkuDetails(sku)
SkuDetails skuDetails = inv.getSkuDetails(sku);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
Button purchaseFiveButton = (Button) rootView.findViewById(R.id.fragment_main_button_purchase_five_coins);
xml=context.obtainStyledAttributes(attrs,R.styleable.LandingStrip)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.LandingStrip);
tabLayoutId=xml.getResourceId(R.styleable.LandingStrip_tabLayoutId,MISSING_TAB_LAYOUT_ID)
int tabLayoutId = xml.getResourceId(R.styleable.LandingStrip_tabLayoutId, MISSING_TAB_LAYOUT_ID);
indicatorColour=xml.getResourceId(R.styleable.LandingStrip_indicatorColor,DEFAULT_INDICATOR_COLOUR)
int indicatorColour = xml.getResourceId(R.styleable.LandingStrip_indicatorColor, DEFAULT_INDICATOR_COLOUR);
indicatorHeight=getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight,DEFAULT_INDICATOR_HEIGHT,xml)
int indicatorHeight = getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight, DEFAULT_INDICATOR_HEIGHT, xml);
tabsPaddingLeft=getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingLeft = getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding, DEFAULT_TABS_PADDING, xml);
tabsPaddingRight=getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingRight = getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding, DEFAULT_TABS_PADDING, xml);
MutableCoordinates drawCurrentTabCoordinates = new MutableCoordinates();
MutableCoordinates drawNextTabCoordinates = new MutableCoordinates();
MutableCoordinates drawMovingIndicatorCoordinates = new MutableCoordinates();
currentTab=tabsContainer.getTabAt(currentPosition)
View currentTab = tabsContainer.getTabAt(currentPosition);
currentTabStart=currentTab.getLeft()
float currentTabStart = currentTab.getLeft();
currentTabEnd=currentTab.getRight()
float currentTabEnd = currentTab.getRight();
nextTab=tabsContainer.getTabAt(currentPosition + 1)
View nextTab = tabsContainer.getTabAt(currentPosition + 1);
nextTabPositionOffset=getFractionFrom(pagePositionOffset)
float nextTabPositionOffset = getFractionFrom(pagePositionOffset);
indicatorStart=getIndicatorPosition(nextTab.getStart(),pagePositionOffset,currentTab.getStart(),nextTabPositionOffset)
float indicatorStart = getIndicatorPosition(nextTab.getStart(), pagePositionOffset, currentTab.getStart(), nextTabPositionOffset);
indicatorEnd=getIndicatorPosition(nextTab.getEnd(),pagePositionOffset,currentTab.getEnd(),nextTabPositionOffset)
float indicatorEnd = getIndicatorPosition(nextTab.getEnd(), pagePositionOffset, currentTab.getEnd(), nextTabPositionOffset);
height=getHeight()
int height = getHeight();
tabCount=pagerAdapter.getCount()
int tabCount = pagerAdapter.getCount();
title=pagerAdapter.getPageTitle(position)
CharSequence title = pagerAdapter.getPageTitle(position);
inflatedTabView=tabsContainer.inflateTab(layoutInflater,attributes.getTabLayoutId())
View inflatedTabView = tabsContainer.inflateTab(layoutInflater, attributes.getTabLayoutId());
int position = (int) view.getTag(TAG_KEY_POSITION);
scrollOffset=getHorizontalScrollOffset(position,positionOffset)
int scrollOffset = getHorizontalScrollOffset(position, positionOffset);
newScrollX=calculateScrollOffset(position,scrollOffset,positionOffset)
float newScrollX = calculateScrollOffset(position, scrollOffset, positionOffset);
tabWidth=tabsContainer.getTabAt(position).getWidth()
int tabWidth = tabsContainer.getTabAt(position).getWidth();
tabForPosition=tabsContainer.getTabAt(position)
View tabForPosition = tabsContainer.getTabAt(position);
float tabStartX = tabForPosition.getLeft() + scrollOffset;
int viewMiddleOffset = getTabParentWidth() / 2;
float tabCenterOffset = (tabForPosition.getRight() - tabForPosition.getLeft()) * 0.5F;
nextTabDelta=getNextTabDelta(position,pagerOffset,tabForPosition)
float nextTabDelta = getNextTabDelta(position, pagerOffset, tabForPosition);
LinearLayout tabsContainerView = new LinearLayout(context);
tab=getTabAt(index)
View tab = getTabAt(index);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
position=indicatorCoordinates.getStart()
float position = indicatorCoordinates.getStart();
lastTabOffset=((ViewGroup)getChildAt(0)).getChildAt(getChildCount() - 1).getWidth()
float lastTabOffset = ((ViewGroup) getChildAt(0)).getChildAt(getChildCount() - 1).getWidth();
frequency=getOneCycle(lastTabOffset)
float frequency = getOneCycle(lastTabOffset);
r=toHex(calculateColour(position,frequency,PHASE_RED,AMPLITUDE,CENTER_FREQUENCY))
String r = toHex(calculateColour(position, frequency, PHASE_RED, AMPLITUDE, CENTER_FREQUENCY));
g=toHex(calculateColour(position,frequency,PHASE_GREEN,AMPLITUDE,CENTER_FREQUENCY))
String g = toHex(calculateColour(position, frequency, PHASE_GREEN, AMPLITUDE, CENTER_FREQUENCY));
b=toHex(calculateColour(position,frequency,PHASE_BLUE,AMPLITUDE,CENTER_FREQUENCY))
String b = toHex(calculateColour(position, frequency, PHASE_BLUE, AMPLITUDE, CENTER_FREQUENCY));
height=getHeight()
int height = getHeight();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPagerFragment viewPagerFragment = new ViewPagerFragment();
Bundle bundle = new Bundle();
TextView view = (TextView) layoutInflater.inflate(R.layout.view_demo, container, false);
currentPosition=viewPagerAdapterState.getCurrentPosition()
int currentPosition = viewPagerAdapterState.getCurrentPosition();
view=getView(container,position)
View view = getView(container, position);
parcelableSparseArray=viewPagerAdapterState.get(position)
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
View view = (View) object;
SparseArray<Parcelable> viewState = new SparseArray<>();
position=entry.getValue()
int position = entry.getValue();
view=entry.getKey()
View view = entry.getKey();
bundle=in.readBundle()
Bundle bundle = in.readBundle();
Map<Integer, SparseArray<Parcelable>> viewStates = new HashMap<>(bundle.keySet().size());
sparseParcelableArray=bundle.getSparseParcelableArray(key)
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
primaryItemPosition=in.readInt()
int primaryItemPosition = in.readInt();
Bundle bundle = new Bundle();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
final TextView abText = (TextView) findViewById(R.id.ab_text);
final AyBe ayBe = new AyBe();
id=item.getItemId()
int id = item.getItemId();
callback=weakCallback.get()
AbTestingParamsLoadedCallback callback = weakCallback.get();
WeakReference<NoLeakActivity> weakNoLeakActivity = new WeakReference<NoLeakActivity>(noLeakActivity);
noLeakActivity=weakNoLeakActivity.get()
NoLeakActivity noLeakActivity = weakNoLeakActivity.get();
RecyclerView recyclerView = (RecyclerView) layoutInflater.inflate(R.layout.view_page, viewGroup, false);
itemView=layoutInflater.inflate(R.layout.view_item,parent,false)
View itemView = layoutInflater.inflate(R.layout.view_item, parent, false);
actual=foo.twice(HALF)
int actual = foo.twice(HALF);
int expected = WHOLE;
final float inverseRatio = 1f - ratio;
float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRatio);
float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRatio);
float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRatio);
hsv=node.getHsv()
float[] hsv = node.getHsv();
width=bitmap.getWidth()
final int width = bitmap.getWidth();
height=bitmap.getHeight()
final int height = bitmap.getHeight();
final int[] rgbPixels = new int[width * height];
final MedianCutQuantizer mcq = new MedianCutQuantizer(rgbPixels, NUM_COLORS);
primaryAccentColor=findPrimaryAccentColor()
final ColorNode primaryAccentColor = findPrimaryAccentColor();
secondaryAccentColor=findSecondaryAccentColor(primaryAccentColor)
final ColorNode secondaryAccentColor = findSecondaryAccentColor(primaryAccentColor);
tertiaryAccentColor=findTertiaryAccentColor(primaryAccentColor,secondaryAccentColor)
final int tertiaryAccentColor = findTertiaryAccentColor(
                primaryAccentColor, secondaryAccentColor);
primaryTextColor=findPrimaryTextColor(primaryAccentColor)
final int primaryTextColor = findPrimaryTextColor(primaryAccentColor);
secondaryTextColor=findSecondaryTextColor(primaryAccentColor)
final int secondaryTextColor = findSecondaryTextColor(primaryAccentColor);
final float primaryHue = primary.getHsv()[0];
final float candidateHue = candidate.getHsv()[0];
copy=Arrays.copyOf(palette,palette.length)
final MedianCutQuantizer.ColorNode[] copy = Arrays.copyOf(palette, palette.length);
maxCount=palette[0].getCount()
final float maxCount = palette[0].getCount();
lhsWeight=calculateWeight(lhs,maxCount)
final float lhsWeight = calculateWeight(lhs, maxCount);
rhsWeight=calculateWeight(rhs,maxCount)
final float rhsWeight = calculateWeight(rhs, maxCount);
float sum = 0;
float sumWeight = 0;
float value = values[i];
float weight = values[i + 1];
ColorHistogram colorHist = new ColorHistogram(pixels);
K=colorHist.getNumberOfColors()
int K = colorHist.getNumberOfColors();
ColorNode[] rCols = null;
rgb=colorHist.getColor(i)
int rgb = colorHist.getColor(i);
cnt=colorHist.getCount(i)
int cnt = colorHist.getCount(i);
ColorBox initialBox = new ColorBox(0, K - 1, 0);
List<ColorBox> colorSet = new ArrayList<ColorBox>();
int k = 1;
boolean done = false;
nextBox=findBoxToSplit(colorSet)
ColorBox nextBox = findBoxToSplit(colorSet);
newBox=nextBox.splitBox()
ColorBox newBox = nextBox.splitBox();
color=findClosestColor(pixels[i])
ColorNode color = findClosestColor(pixels[i]);
idx=findClosestColorIndex(rgb)
int idx = findClosestColorIndex(rgb);
red=Color.red(rgb)
int red = Color.red(rgb);
grn=Color.green(rgb)
int grn = Color.green(rgb);
blu=Color.blue(rgb)
int blu = Color.blue(rgb);
int minIdx = 0;
int minDistance = Integer.MAX_VALUE;
ColorNode color = quantColors[i];
d2=color.distance2(red,grn,blu)
int d2 = color.distance2(red, grn, blu);
ColorBox boxToSplit = null;
int minLevel = Integer.MAX_VALUE;
n=colorBoxes.size()
int n = colorBoxes.size();
ColorNode[] avgColors = new ColorNode[n];
int i = 0;
int dr = this.red - red;
int dg = this.grn - grn;
int db = this.blu - blu;
ColorNode color = imageColors[i];
int r = color.red;
int g = color.grn;
int b = color.blu;
dim=getLongestColorDimension()
ColorDimension dim = getLongestColorDimension();
med=findMedian(dim)
int med = findMedian(dim);
int nextLevel = level + 1;
ColorBox newBox = new ColorBox(med + 1, upper, nextLevel);
int rLength = rmax - rmin;
int gLength = gmax - gmin;
int bLength = bmax - bmin;
int half = count / 2;
int nPixels, median;
int rSum = 0;
int gSum = 0;
int bSum = 0;
int n = 0;
ColorNode ci = imageColors[i];
int cnt = ci.cnt;
double nd = n;
int avgRed = (int) (0.5 + rSum / nd);
int avgGrn = (int) (0.5 + gSum / nd);
int avgBlu = (int) (0.5 + bSum / nd);
s=this.getClass().getSimpleName()
String s = this.getClass().getSimpleName();
int i = 0;
int N = pixelsOrig.length;
int[] pixelsCpy = new int[N];
int k = -1;
int curColor = -1;
int nColors = k + 1;
id=item.getItemId()
int id = item.getItemId();
Intent intent = new Intent();
bitmap=((BitmapDrawable)imageView.getDrawable()).getBitmap()
Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap();
DominantColorCalculator dominantColorCalculator = new DominantColorCalculator(bitmap);
selectedImageUri=data.getData()
Uri selectedImageUri = data.getData();
selectedImagePath=getPath(selectedImageUri)
String selectedImagePath = getPath(selectedImageUri);
String[] projection = {MediaStore.Images.Media.DATA};
cursor=managedQuery(uri,projection,null,null,null)
Cursor cursor = managedQuery(uri, projection, null, null, null);
column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)
int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
LinearLayout rootView = (LinearLayout) inflater.inflate(R.layout.fragment_main, container, false);
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
preapprovalButton=payPal.getCheckoutButton(getActivity(),PayPal.BUTTON_194x37,CheckoutButton.TEXT_PAY)
CheckoutButton preapprovalButton = payPal.getCheckoutButton(getActivity(), PayPal.BUTTON_194x37, CheckoutButton.TEXT_PAY);
preapprovalIntent=payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY)
Intent preapprovalIntent = payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY);
String resultTitle = "";
String resultInfo = "";
String resultExtra = "";
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
PayPalPreapproval preapproval = new PayPalPreapproval();
preapproval=createPreapproval(preapprovalKey)
PayPalPreapproval preapproval = createPreapproval(preapprovalKey);
Bundle bundle = new Bundle();
int availableLength = maxLength;
StringBuilder stringBuilder = new StringBuilder(maxLength);
prefixAndSuffixLength=computeAppendedLengthIncludingSeparatorSpaces(prefix,suffix)
int prefixAndSuffixLength = computeAppendedLengthIncludingSeparatorSpaces(prefix, suffix);
urlLength=computeUrlLengthIncludingSeparatorSpace(url)
int urlLength = computeUrlLengthIncludingSeparatorSpace(url);
trimmedSubject=ellipsizeTextIfExceedsMaxLength(subject,availableLength)
String trimmedSubject = ellipsizeTextIfExceedsMaxLength(subject, availableLength);
int length = 0;
preferences=context.getSharedPreferences(MRU_PREFERENCES,Context.MODE_PRIVATE)
SharedPreferences preferences = context.getSharedPreferences(MRU_PREFERENCES, Context.MODE_PRIVATE);
args=getArguments()
Bundle args = getArguments();
themeResId=getThemeResIdIfProvidedIn(args)
int themeResId = getThemeResIdIfProvidedIn(args);
title=getTitleIfProvidedIn(args)
CharSequence title = getTitleIfProvidedIn(args);
builder=createDialogBuilder(themeResId).setCancelable(true).setView(dialogView)
AlertDialog.Builder builder = createDialogBuilder(themeResId)
                .setCancelable(true)
                .setView(dialogView);
inflater=getActivity().getLayoutInflater()
LayoutInflater inflater = getActivity().getLayoutInflater();
GridView gridView = (GridView) rootView.findViewById(R.id.ps__dialog_grid);
targetApps=extractTargetAppsFrom(args)
TargetApps targetApps = extractTargetAppsFrom(args);
allShareTargets=getAvailableShareTargets(sharingIntent)
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
priorityAppInfos=createPriorityResolveInfoList(targetApps,allShareTargets)
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
otherAppInfos=createOtherAppsResolveInfoList(priorityAppInfos,allShareTargets)
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
resolveInfos=targetApps.extractTargetResolveInfosFrom(allShareTargets)
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
mruResolveInfo=findMruResolveInfoIn(allShareTargets)
ResolveInfo mruResolveInfo = findMruResolveInfoIn(allShareTargets);
List<ResolveInfo> otherAppsInfos = new ArrayList<ResolveInfo>(allAppInfos);
mruPackageName=persister.getLastUsedTarget()
String mruPackageName = persister.getLastUsedTarget();
String packageName = resolveInfo.activityInfo.packageName;
packageManager=getActivity().getPackageManager()
PackageManager packageManager = getActivity().getPackageManager();
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
View buttonStrip = (View) showMoreButton.getParent();
gridView=getGridView()
GridView gridView = getGridView();
intent=wrapIntentWithExplicitTargetComponentForItem(position,sharingIntent)
Intent intent = wrapIntentWithExplicitTargetComponentForItem(position, sharingIntent);
Intent intent = new Intent(sharingIntent);
ActivityInfo activity = adapter.getItem(position).activityInfo;
ComponentName name = new ComponentName(activity.applicationInfo.packageName, activity.name);
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
PriorityShareDialog dialog = new PriorityShareDialog();
Bundle args = new Bundle();
sharingIntent=createSharingIntent()
Intent sharingIntent = createSharingIntent();
fragmentManager=activity.getFragmentManager()
FragmentManager fragmentManager = activity.getFragmentManager();
Intent intent = new Intent(Intent.ACTION_SEND);
dialog=new PriorityShareDialog.Builder().setTitle(title).setTargetApps(targetApps).setSharingIntent(sharingIntent).setOnPrepareSharingIntentListener(listener).setShowMostRecentlyUsed(showMostRecentlyUsed).build()
PriorityShareDialog dialog = new PriorityShareDialog.Builder()
                .setTitle(title)
                .setTargetApps(targetApps)
                .setSharingIntent(sharingIntent)
                .setOnPrepareSharingIntentListener(listener)
                .setShowMostRecentlyUsed(showMostRecentlyUsed)
                .build();
PrioritySharer prioritySharer = new PrioritySharer();
prioritySharer=build()
PrioritySharer prioritySharer = build();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
layoutInflater=LayoutInflater.from(context)
LayoutInflater layoutInflater = LayoutInflater.from(context);
iconSizePx=getIconSizePx(context.getResources())
int iconSizePx = getIconSizePx(context.getResources());
ArrayList<ResolveInfo> sortedList = new ArrayList<ResolveInfo>(resolveInfoList);
int otherAppsCountMaybe = showAllApps ? otherAppInfos.size() : 0;
firstOtherAppsItemPosition=priorityAppInfos.size()
int firstOtherAppsItemPosition = priorityAppInfos.size();
int offsetPosition = position - firstOtherAppsItemPosition;
TextView textView;
textView=initializeItemViewIfNecessary(convertView,R.layout.ps__grid_item_share,parent)
TextView textView = initializeItemViewIfNecessary(convertView, R.layout.ps__grid_item_share, parent);
info=getItem(position)
ResolveInfo info = getItem(position);
icon=info.loadIcon(packageManager)
Drawable icon = info.loadIcon(packageManager);
arraySize=in.readInt()
int arraySize = in.readInt();
String[] packageNames = new String[arraySize];
arraySize=targetPackages.size()
int arraySize = targetPackages.size();
String[] packagesArray = new String[arraySize];
SparseArray<ResolveInfo> matchedResolveInfos = new SparseArray<ResolveInfo>(targetPackages.size());
String packageName = info.activityInfo.packageName;
index=indexOfItemInto(packageName,targetPackages)
int index = indexOfItemInto(packageName, targetPackages);
sparseArraySize=sparseArray.size()
int sparseArraySize = sparseArray.size();
ArrayList<T> list = new ArrayList<T>(sparseArraySize);
int i = 0;
originalSubject=intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT)
CharSequence originalSubject = intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT);
String subject = originalSubject != null ? originalSubject.toString() : null;
composer=createComposer()
MessageComposer composer = createComposer();
component=intent.getComponent()
ComponentName component = intent.getComponent();
targetPackageName=component.getPackageName()
String targetPackageName = component.getPackageName();
adapter=ArrayAdapter.createFromResource(this,R.array.target_apps,android.R.layout.simple_spinner_item)
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
EditText text = (EditText) findViewById(R.id.text);
EditText title = (EditText) findViewById(R.id.title);
EditText mimeType = (EditText) findViewById(R.id.mime_type);
EditText dataUri = (EditText) findViewById(R.id.data_uri);
Switch showMostRecentlyUsed = (Switch) findViewById(R.id.show_most_recently_used);
uriString=dataUri.getText().toString()
String uriString = dataUri.getText().toString();
EditText text = (EditText) findViewById(R.id.text);
TextView textView = (TextView) convertView.findViewById(R.id.positionView);
colorView=convertView.findViewById(R.id.colorView)
View colorView = convertView.findViewById(R.id.colorView);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
offset=headerPlaceholder.getTop()
int offset = headerPlaceholder.getTop();
Integer item = COLORS[position];
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
firstVisiblePosition=grid.getFirstVisiblePosition()
int firstVisiblePosition = grid.getFirstVisiblePosition();
inflate=getViewForPosition(container,position)
View inflate = getViewForPosition(container, position);
id=item.getItemId()
int id = item.getItemId();
MyActivity activity = new MyActivity();
String manifestProperty = "../app/src/main/AndroidManifest.xml";
String resProperty = "../app/src/main/res";
cursor=resolver.query(uri,projection,selection,selectionArgs,null)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, null);
cursor=resolver.query(uri,projection,selection,selectionArgs,sortOrder)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, sortOrder);
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=richClass.setter(name)
Method setter = richClass.setter(name);
T obj;
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=methodsByName.get(name)
Method setter = methodsByName.get(name);
int type = TYPE_INT;
Class<?> t = setter.getParameterTypes()[0];
Class<?> t = setter.getParameterTypes()[0];
cursorType=cursor.getType(index)
final int cursorType = cursor.getType(index);
final Object obj;
s=f.getAnnotation(Mapper.class)
Mapper s = f.getAnnotation(Mapper.class);
mm=m.getAnnotation(Mapper.class)
Mapper mm = m.getAnnotation(Mapper.class);
methodName=StringUtil.asCamelifySetMethod(what)
String methodName = StringUtil.asCamelifySetMethod(what);
cursor=getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,null,null,null,null)
Cursor cursor = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
now=System.currentTimeMillis()
long now = System.currentTimeMillis();
List<Contact2> typedCursor = new CursorList<Contact2>(cursor, Contact2.class);
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[a-zA-Z0-9]+")
Pattern p = Pattern.compile("[a-zA-Z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[A-Z][a-z0-9]+")
Pattern p = Pattern.compile("[A-Z][a-z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
SurfaceView first = (SurfaceView) findViewById(R.id.firstSurface);
SurfaceView second = (SurfaceView) findViewById(R.id.secondSurface);
Intent pickVideo = new Intent(Intent.ACTION_PICK);
xml=context.obtainStyledAttributes(attrs,R.styleable.RelativeLayoutWithForeground)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.RelativeLayoutWithForeground);
int foregroundResId = INVALID_FOREGROUND_ID;
drawable=getDrawable(getResources(),foregroundResId)
Drawable drawable = getDrawable(getResources(), foregroundResId);
Bundle args = new Bundle();
enroll=mHotwordDetector.createEnrollIntent()
Intent enroll = mHotwordDetector.createEnrollIntent();

Diff of 2e965426ea77fbd23e4c938cdc11f7f93cebc1ba and af3fca5c41e14e407380cf128331688866e13a36:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 6
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 2e965426ea77fbd23e4c938cdc11f7f93cebc1ba to af3fca5c41e14e407380cf128331688866e13a36


****Parsing for addition at revision af3fca5c41e14e407380cf128331688866e13a36****

Added AccessibilityChecker.java to .\/spikes\ repository source files.
Added AccessibilityCheckerActivity.java to .\/spikes\ repository source files.
Added Demo.java to .\/spikes\ repository source files.
Added DemoAdapter.java to .\/spikes\ repository source files.
Added DemosActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added DrawerActivity.java to .\/spikes\ repository source files.
Added EarthActivity.java to .\/spikes\ repository source files.
Added ProHaxDrawerActivity.java to .\/spikes\ repository source files.
Added SaturnActivity.java to .\/spikes\ repository source files.
Added LocalPlayerActivity.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added CastApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ComposeSmsActivity.java to .\/spikes\ repository source files.
Added HeadlessSmsSendService.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MmsReceiver.java to .\/spikes\ repository source files.
Added SmsReceiver.java to .\/spikes\ repository source files.
Added ExtendedDemoActivity.java to .\/spikes\ repository source files.
Added ExtendedDemoApplication.java to .\/spikes\ repository source files.
Added SimpleDemoActivity.java to .\/spikes\ repository source files.
Added SimpleDemoApplication.java to .\/spikes\ repository source files.
Added Binder.java to .\/spikes\ repository source files.
Added ConnectedClient.java to .\/spikes\ repository source files.
Added Connection.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnection.java to .\/spikes\ repository source files.
Added ServiceConnectionCallback.java to .\/spikes\ repository source files.
Added EasyCustomTabs.java to .\/spikes\ repository source files.
Added ActionButtonComposer.java to .\/spikes\ repository source files.
Added CloseButtonIconComposer.java to .\/spikes\ repository source files.
Added Composer.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilder.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigator.java to .\/spikes\ repository source files.
Added EasyCustomTabsWebNavigator.java to .\/spikes\ repository source files.
Added ExitAnimationsComposer.java to .\/spikes\ repository source files.
Added IntentCustomizer.java to .\/spikes\ repository source files.
Added MenuItemComposer.java to .\/spikes\ repository source files.
Added NavigationFallback.java to .\/spikes\ repository source files.
Added Navigator.java to .\/spikes\ repository source files.
Added ShowTitleComposer.java to .\/spikes\ repository source files.
Added StartAnimationsComposer.java to .\/spikes\ repository source files.
Added ToolbarColorComposer.java to .\/spikes\ repository source files.
Added UrlBarHidingComposer.java to .\/spikes\ repository source files.
Added WebNavigator.java to .\/spikes\ repository source files.
Added AvailableAppProvider.java to .\/spikes\ repository source files.
Added BestPackageFinder.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProvider.java to .\/spikes\ repository source files.
Added BinderTest.java to .\/spikes\ repository source files.
Added ConnectedClientTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnectionTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigatorTest.java to .\/spikes\ repository source files.
Added BestPackageFinderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProviderTest.java to .\/spikes\ repository source files.
Added ApiPagedChannelHistory.java to .\/spikes\ repository source files.
Added ApiPagedResponse.java to .\/spikes\ repository source files.
Added ChannelHistory.java to .\/spikes\ repository source files.
Added HistoryConverter.java to .\/spikes\ repository source files.
Added Runner.java to .\/spikes\ repository source files.
Added SlackHistoryFetcher.java to .\/spikes\ repository source files.
Added SlackWebService.java to .\/spikes\ repository source files.
Added ApiPagedResponseTest.java to .\/spikes\ repository source files.
Added MainActivityTest.java to .\/spikes\ repository source files.
Added LoremAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added BetterAccountManager.java to .\/spikes\ repository source files.
Added BetterAuthenticator.java to .\/spikes\ repository source files.
Added BetterAuthenticatorActivity.java to .\/spikes\ repository source files.
Added GertHerbAuthenticator.java to .\/spikes\ repository source files.
Added GertHerbAuthenticatorService.java to .\/spikes\ repository source files.
Added NoAccountException.java to .\/spikes\ repository source files.
Added ReactiveAuthenticatorActivity.java to .\/spikes\ repository source files.
Added Token.java to .\/spikes\ repository source files.
Added GertHerbActivity.java to .\/spikes\ repository source files.
Added GertHerbApplication.java to .\/spikes\ repository source files.
Added GertHerbAuthenticationActivity.java to .\/spikes\ repository source files.
Added TypefaceFactory.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added ViewServer.java to .\/spikes\ repository source files.
Added ViewServerManager.java to .\/spikes\ repository source files.
Added DeveloperError.java to .\/spikes\ repository source files.
Added HomeActivity.java to .\/spikes\ repository source files.
Added LoginActivity.java to .\/spikes\ repository source files.
Added LoginView.java to .\/spikes\ repository source files.
Added UserCredentials.java to .\/spikes\ repository source files.
Added FontButton.java to .\/spikes\ repository source files.
Added FontEditText.java to .\/spikes\ repository source files.
Added FontTextView.java to .\/spikes\ repository source files.
Added GithubApi.java to .\/spikes\ repository source files.
Added GithubApiFactory.java to .\/spikes\ repository source files.
Added TokenRequest.java to .\/spikes\ repository source files.
Added TokenResponse.java to .\/spikes\ repository source files.
Added Dummy.java to .\/spikes\ repository source files.
Added DummyTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MainFragment.java to .\/spikes\ repository source files.
Added Attributes.java to .\/spikes\ repository source files.
Added Coordinates.java to .\/spikes\ repository source files.
Added IndicatorCoordinatesCalculator.java to .\/spikes\ repository source files.
Added LandingStrip.java to .\/spikes\ repository source files.
Added MutableCoordinates.java to .\/spikes\ repository source files.
Added OnPagerAdapterChangedListener.java to .\/spikes\ repository source files.
Added PagerAdapterObserver.java to .\/spikes\ repository source files.
Added Scrollable.java to .\/spikes\ repository source files.
Added ScrollingPageChangeListener.java to .\/spikes\ repository source files.
Added State.java to .\/spikes\ repository source files.
Added TabsContainer.java to .\/spikes\ repository source files.
Added CustomLandingStrip.java to .\/spikes\ repository source files.
Added CustomTabActivity.java to .\/spikes\ repository source files.
Added ExampleRainbowLandingStrip.java to .\/spikes\ repository source files.
Added FixedWidthTabActivity.java to .\/spikes\ repository source files.
Added NoFragmentsSimpleTextTabActivity.java to .\/spikes\ repository source files.
Added Data.java to .\/spikes\ repository source files.
Added DemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added SmallDemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerFragment.java to .\/spikes\ repository source files.
Added DemoViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapterState.java to .\/spikes\ repository source files.
Added SimpleTextTabActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AbTestingParamsLoadedCallback.java to .\/spikes\ repository source files.
Added AyBe.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added WeakStartCallback.java to .\/spikes\ repository source files.
Added LeakActivity.java to .\/spikes\ repository source files.
Added NoLeakActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added Bar.java to .\/spikes\ repository source files.
Added Foo.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added FooTest.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added ColorScheme.java to .\/spikes\ repository source files.
Added ColorUtils.java to .\/spikes\ repository source files.
Added DominantColorCalculator.java to .\/spikes\ repository source files.
Added FloatUtils.java to .\/spikes\ repository source files.
Added MedianCutQuantizer.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added PayPalFragment.java to .\/spikes\ repository source files.
Added PayPalHelper.java to .\/spikes\ repository source files.
Added MaxLengthMessageComposer.java to .\/spikes\ repository source files.
Added MessageComposer.java to .\/spikes\ repository source files.
Added TwitterMessageComposer.java to .\/spikes\ repository source files.
Added DisabledMruPersister.java to .\/spikes\ repository source files.
Added MruPersister.java to .\/spikes\ repository source files.
Added SharedPreferencesMruPersister.java to .\/spikes\ repository source files.
Added OnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added PriorityShareDialog.java to .\/spikes\ repository source files.
Added PrioritySharer.java to .\/spikes\ repository source files.
Added ShareTargetsAdapter.java to .\/spikes\ repository source files.
Added SimpleOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added TargetApps.java to .\/spikes\ repository source files.
Added TwitterOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AdvancedActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SimpleActivity.java to .\/spikes\ repository source files.
Added LockingActivity.java to .\/spikes\ repository source files.
Added PostLockingActivity.java to .\/spikes\ repository source files.
Added PreLockingActivity.java to .\/spikes\ repository source files.
Added DummyAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added NovoStaggeredGridView.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SpikeApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SwipeableView.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MyClass.java to .\/spikes\ repository source files.
Added MyClassTest.java to .\/spikes\ repository source files.
Added MyAndroidClassTest.java to .\/spikes\ repository source files.
Added RobolectricGradleTestRunner.java to .\/spikes\ repository source files.
Added Mapper.java to .\/spikes\ repository source files.
Added Query.java to .\/spikes\ repository source files.
Added TypedResolver.java to .\/spikes\ repository source files.
Added CursorList.java to .\/spikes\ repository source files.
Added CursorListIterator.java to .\/spikes\ repository source files.
Added CursorMarshaller.java to .\/spikes\ repository source files.
Added EmptyListIterator.java to .\/spikes\ repository source files.
Added ReflectionCursorMarshaller.java to .\/spikes\ repository source files.
Added RichClass.java to .\/spikes\ repository source files.
Added Setter.java to .\/spikes\ repository source files.
Added Function.java to .\/spikes\ repository source files.
Added TypedElementLoader.java to .\/spikes\ repository source files.
Added TypedLoader.java to .\/spikes\ repository source files.
Added Marshaller.java to .\/spikes\ repository source files.
Added ObjectMapper.java to .\/spikes\ repository source files.
Added TypedActivity.java to .\/spikes\ repository source files.
Added StringUtil.java to .\/spikes\ repository source files.
Added MyObject.java to .\/spikes\ repository source files.
Added MediaPlayerSwitcherActivity.java to .\/spikes\ repository source files.
Added VideoPlayerService.java to .\/spikes\ repository source files.
Added RelativeLayoutWithForeground.java to .\/spikes\ repository source files.
Added DemoActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added RecognitionService.java to .\/spikes\ repository source files.
Added SessionService.java to .\/spikes\ repository source files.
Added SettingsActivity.java to .\/spikes\ repository source files.
Added SmartContextInteractionService.java to .\/spikes\ repository source files.
AccessibilityManager accessibilityManager = (AccessibilityManager) context.getSystemService(Context.ACCESSIBILITY_SERVICE);
enabledServices=getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN)
List<AccessibilityServiceInfo> enabledServices = getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN);
List<AccessibilityServiceInfo> enabledServices = getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN);
View view = convertView;
demo=getItem(position)
Demo demo = getItem(position);
Intent intent = new Intent(context, demo.activityClass);
layoutInflater=LayoutInflater.from(parent.getContext())
LayoutInflater layoutInflater = LayoutInflater.from(parent.getContext());
ListView listView = ((ListView) findViewById(R.id.list));
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
final DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close) {

            @Override
            public void onDrawerClosed(View drawerView) {
                super.onDrawerClosed(drawerView);
                // waiting for the drawer to close, then navigating seems to cause issue.
                // why wait for the drawer to close? jankiness.
                if (pendingNavigationClick != null) {
                    startActivity(pendingNavigationClick);
                    pendingNavigationClick = null;
                }
            }

        };
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close);
Intent intent;
b=getIntent().getExtras()
Bundle b = getIntent().getExtras();
mShouldStartPlayback=b.getBoolean("shouldStart")
boolean mShouldStartPlayback = b.getBoolean("shouldStart");
startPosition=b.getInt("startPosition",0)
int startPosition = b.getInt("startPosition", 0);
currentPos=mVideoView.getCurrentPosition()
int currentPos = mVideoView.getCurrentPosition();
String msg;
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, mDisplaySize.y + getActionBar().getHeight());
mm=mSelectedMedia.getMetadata()
MediaMetadata mm = mSelectedMedia.getMetadata();
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, (int) (mDisplaySize.x * ASPECT_RATIO));
WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
width=display.getWidth()
int width = display.getWidth();
height=display.getHeight()
int height = display.getHeight();
int resourceId = 0;
String videoUrl = "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4#sthash.rJ5rPZy8.dpuf";
String title = "Jahre Philharmonie";
String description = "Awesome film you must watch!";
String author = "Blundell";
String thumbUrl = "http://www.ustream.tv/blog/wp-content/uploads/2013/10/simply-go-live.png";
MediaMetadata metadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE);
mediaInfo=new MediaInfo.Builder(videoUrl).setMetadata(metadata).setStreamType(MediaInfo.STREAM_TYPE_BUFFERED).setContentType("video/mp4").build()
MediaInfo mediaInfo = new MediaInfo.Builder(videoUrl)
                        .setMetadata(metadata)
                        .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)
                        .setContentType("video/mp4")
                        .build();
Intent intent = new Intent(MainActivity.this, LocalPlayerActivity.class);
preferences=getPreferences(MODE_PRIVATE)
SharedPreferences preferences = getPreferences(MODE_PRIVATE);
defaultSmsPackage=Telephony.Sms.getDefaultSmsPackage(this)
String defaultSmsPackage = Telephony.Sms.getDefaultSmsPackage(this);
Intent intent = new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
availableAppProvider=EasyCustomTabs.getInstance()
AvailableAppProvider availableAppProvider = EasyCustomTabs.getInstance();
ConnectedClient connectedClient = new ConnectedClient(client);
binder=Binder.newInstance()
Binder binder = Binder.newInstance();
List<Composer> composerList = new ArrayList<>();
customTabsSession=connection.newSession()
CustomTabsSession customTabsSession = connection.newSession();
CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(customTabsSession);
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
context=EasyCustomTabs.getInstance().getContext()
Context context = EasyCustomTabs.getInstance().getContext();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
packagesSupportingCustomTabs=getPackagesSupportingCustomTabs()
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
defaultPackage=getDefaultPackage()
String defaultPackage = getDefaultPackage();
defaultActivityInfo=packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK,0)
ResolveInfo defaultActivityInfo = packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK, 0);
String packageName = defaultActivityInfo.activityInfo.packageName;
resolvedInfoList=packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK,0)
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<String> packagesSupportingCustomTabs = new ArrayList<>();
Intent serviceIntent = new Intent();
bestPackageFinder=BestPackageFinder.newInstance()
BestPackageFinder bestPackageFinder = BestPackageFinder.newInstance();
packageName=bestPackageFinder.findBestPackage()
String packageName = bestPackageFinder.findBestPackage();
resolveInfo=createResolveInfoFor(packageName)
ResolveInfo resolveInfo = createResolveInfoFor(packageName);
ResolveInfo resolveInfo = new ResolveInfo();
List<ResolveInfo> resolveInfoList = new ArrayList<>();
defaultPackageResolveInfo=createResolveInfoFor(packageName)
ResolveInfo defaultPackageResolveInfo = createResolveInfoFor(packageName);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
oldestApiMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage oldestApiMessage = apiMessages.get(apiMessages.size() - 1);
String lastResponseEpochTime = oldestApiMessage.timeStamp;
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
latestMessage=latestMessages.get(latestMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage latestMessage = latestMessages.get(latestMessages.size() - 1);
latestMessageDateTime=convertToLocalDateTime(latestMessage.timeStamp)
LocalDateTime latestMessageDateTime = convertToLocalDateTime(latestMessage.timeStamp);
List<ChannelHistory.Message> messages = new ArrayList<>();
historyFrom=getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1))
LocalDateTime historyFrom = getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1));
historyTo=getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0))
LocalDateTime historyTo = getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0));
String text = apiMessage.text;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
lastMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage lastMessage = apiMessages.get(apiMessages.size() - 1);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
firstMessage=apiMessages.get(0)
ApiPagedChannelHistory.ApiMessage firstMessage = apiMessages.get(0);
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
String slackToken = args[0];
retrofit=new Retrofit.Builder().baseUrl("https://slack.com/api/").addConverterFactory(GsonConverterFactory.create()).build()
Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://slack.com/api/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();
slackWebService=retrofit.create(SlackWebService.class)
SlackWebService slackWebService = retrofit.create(SlackWebService.class);
slackHistoryFetcher=SlackHistoryFetcher.from(slackWebService,slackToken)
SlackHistoryFetcher slackHistoryFetcher = SlackHistoryFetcher.from(slackWebService, slackToken);
start=LocalDateTime.now()
LocalDateTime start = LocalDateTime.now();
end=LocalDateTime.now().minusDays(7)
LocalDateTime end = LocalDateTime.now().minusDays(7);
channelHistory=slackHistoryFetcher.getChannelHistory(start,end)
ChannelHistory channelHistory = slackHistoryFetcher.getChannelHistory(start, end);
HistoryConverter historyConverter = new HistoryConverter();
ApiPagedResponse apiPagedResponse = new ApiPagedResponse(start);
response=fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime())
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
apiPagedChannelHistory=response.body()
ApiPagedChannelHistory apiPagedChannelHistory = response.body();
channelHistory=slackWebService.getChannelHistory(slackToken,channel,lastResponseEpochTime,NUMBER_OF_RESULTS)
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
ApiPagedChannelHistory apiPagedChannelHistory = new ApiPagedChannelHistory();
ApiPagedChannelHistory.ApiMessage apiMessage = new ApiPagedChannelHistory.ApiMessage();
final TextView textView = new TextView(context);
emptyView=findViewById(R.id.empty_view)
View emptyView = findViewById(R.id.empty_view);
final Integer action = values[0];
LoremAdapter loremAdapter = new LoremAdapter();
accounts=accountManager.getAccountsByType(accountType)
Account[] accounts = accountManager.getAccountsByType(accountType);
Bundle result;
Bundle result;
Bundle result = new Bundle();
activity=createLoginIntent(context,accountType,authTokenType,requiredFeatures,options)
Intent activity = createLoginIntent(context, accountType, authTokenType, requiredFeatures, options);
Bundle bundle = new Bundle();
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
accounts=accountManager.getAccountsByType(authTokenType)
Account[] accounts = accountManager.getAccountsByType(authTokenType);
bundle=createResponseBundle(token)
Bundle bundle = createResponseBundle(token);
accountManager=AccountManager.get(this.getApplicationContext())
AccountManager accountManager = AccountManager.get(this.getApplicationContext());
Account account = new Account(token.getUserName(), getAccountName());
Bundle bundle = new Bundle();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
GertHerbAuthenticator authenticator = new GertHerbAuthenticator(this);
fontId=getFontId(context,attrs)
int fontId = getFontId(context, attrs);
fontType=getFontType(fontId)
FontType fontType = getFontType(fontId);
typedArray=context.obtainStyledAttributes(attrs,R.styleable.CustomTextAppearance)
TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CustomTextAppearance);
typeface=createTypeFace(context,fontType)
Typeface typeface = createTypeFace(context, fontType);
info=context.getApplicationInfo()
ApplicationInfo info = context.getApplicationInfo();
name=activity.getTitle().toString()
String name = activity.getTitle().toString();
client=mServer.accept()
Socket client = mServer.accept();
boolean result;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
BufferedReader in = null;
request=in.readLine()
final String request = in.readLine();
String command;
String parameters;
index=request.indexOf(' ')
int index = request.indexOf(' ');
boolean result;
boolean success = true;
BufferedWriter out = null;
index=parameters.indexOf(' ')
int index = parameters.indexOf(' ');
code=parameters.substring(0,index)
final String code = parameters.substring(0, index);
int hashCode = (int) Long.parseLong(code, 16);
window=findWindow(hashCode)
final View window = findWindow(hashCode);
dispatch=ViewDebug.class.getDeclaredMethod("dispatchCommand",View.class,String.class,String.class,OutputStream.class)
final Method dispatch = ViewDebug.class.getDeclaredMethod("dispatchCommand",
                        View.class, String.class, String.class, OutputStream.class);
View window = null;
boolean result = true;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
boolean result = true;
String focusName = null;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
View focusedWindow = null;
BufferedWriter out = null;
boolean needWindowListUpdate = false;
boolean needFocusedWindowUpdate = false;
BetterAccountManager accountManager = new BetterAccountManager(this, getString(R.string.account_type), getString(R.string.token_type), null);
loginView=Views.findById(this,R.id.login_view)
LoginView loginView = Views.findById(this, R.id.login_view);
authorizationApi=new GithubApiFactory().createAuthorizationApi(credentials.username,credentials.password)
GithubApi authorizationApi = new GithubApiFactory().createAuthorizationApi(credentials.username, credentials.password);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
Endpoint endpoint = new Endpoint() {
            @Override
            public String getUrl() {
                return GITHUB_API_URL;
            }

            @Override
            public String getName() {
                return "Live";
            }
        };
interceptor=createAuthorizationRequestInterceptor(username,password)
RequestInterceptor interceptor = createAuthorizationRequestInterceptor(username, password);
restAdapter=createRestAdapter(endpoint,interceptor)
RestAdapter restAdapter = createRestAdapter(endpoint, interceptor);
Dummy dummy = new Dummy();
result=dummy.explodes()
boolean result = dummy.explodes();
String base64EncodedPublicKey = "CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE";
premiumPurchase=inventory.getPurchase(SKU_PREMIUM)
Purchase premiumPurchase = inventory.getPurchase(SKU_PREMIUM);
infiniteGasPurchase=inventory.getPurchase(SKU_INFINITE_GAS)
Purchase infiniteGasPurchase = inventory.getPurchase(SKU_INFINITE_GAS);
gasPurchase=inventory.getPurchase(SKU_GAS)
Purchase gasPurchase = inventory.getPurchase(SKU_GAS);
String payload = "";
String payload = "";
String payload = "";
payload=p.getDeveloperPayload()
String payload = p.getDeveloperPayload();
int index = mTank >= TANK_RES_IDS.length ? TANK_RES_IDS.length - 1 : mTank;
AlertDialog.Builder bld = new AlertDialog.Builder(this);
spe=getPreferences(MODE_PRIVATE).edit()
SharedPreferences.Editor spe = getPreferences(MODE_PRIVATE).edit();
sp=getPreferences(MODE_PRIVATE)
SharedPreferences sp = getPreferences(MODE_PRIVATE);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                                  + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                    | ((source[d + 1 + off] << 24) >>> 16)
                    | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                    | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                                   "-1002:Bad response received/" +
                                   "-1003:Purchase signature verification failed/" +
                                   "-1004:Send intent failed/" +
                                   "-1005:User cancelled/" +
                                   "-1006:Unknown purchase response/" +
                                   "-1007:Missing token/" +
                                   "-1008:Unknown error/" +
                                   "-1009:Subscriptions not available/" +
                                   "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(),
                    itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                        | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                        | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                            | ((source[d + 1 + off] << 24) >>> 16)
                            | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                            | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                "-1002:Bad response received/" +
                "-1003:Purchase signature verification failed/" +
                "-1004:Send intent failed/" +
                "-1005:User cancelled/" +
                "-1006:Unknown purchase response/" +
                "-1007:Missing token/" +
                "-1008:Unknown error/" +
                "-1009:Subscriptions not available/" +
                "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(), itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
responseCode=result.getResponse()
int responseCode = result.getResponse();
sku=purchase.getSku()
String sku = purchase.getSku();
skuDetails=inv.getSkuDetails(sku)
SkuDetails skuDetails = inv.getSkuDetails(sku);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
Button purchaseFiveButton = (Button) rootView.findViewById(R.id.fragment_main_button_purchase_five_coins);
xml=context.obtainStyledAttributes(attrs,R.styleable.LandingStrip)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.LandingStrip);
tabLayoutId=xml.getResourceId(R.styleable.LandingStrip_tabLayoutId,MISSING_TAB_LAYOUT_ID)
int tabLayoutId = xml.getResourceId(R.styleable.LandingStrip_tabLayoutId, MISSING_TAB_LAYOUT_ID);
indicatorColour=xml.getResourceId(R.styleable.LandingStrip_indicatorColor,DEFAULT_INDICATOR_COLOUR)
int indicatorColour = xml.getResourceId(R.styleable.LandingStrip_indicatorColor, DEFAULT_INDICATOR_COLOUR);
indicatorHeight=getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight,DEFAULT_INDICATOR_HEIGHT,xml)
int indicatorHeight = getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight, DEFAULT_INDICATOR_HEIGHT, xml);
tabsPaddingLeft=getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingLeft = getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding, DEFAULT_TABS_PADDING, xml);
tabsPaddingRight=getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingRight = getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding, DEFAULT_TABS_PADDING, xml);
MutableCoordinates drawCurrentTabCoordinates = new MutableCoordinates();
MutableCoordinates drawNextTabCoordinates = new MutableCoordinates();
MutableCoordinates drawMovingIndicatorCoordinates = new MutableCoordinates();
currentTab=tabsContainer.getTabAt(currentPosition)
View currentTab = tabsContainer.getTabAt(currentPosition);
currentTabStart=currentTab.getLeft()
float currentTabStart = currentTab.getLeft();
currentTabEnd=currentTab.getRight()
float currentTabEnd = currentTab.getRight();
nextTab=tabsContainer.getTabAt(currentPosition + 1)
View nextTab = tabsContainer.getTabAt(currentPosition + 1);
nextTabPositionOffset=getFractionFrom(pagePositionOffset)
float nextTabPositionOffset = getFractionFrom(pagePositionOffset);
indicatorStart=getIndicatorPosition(nextTab.getStart(),pagePositionOffset,currentTab.getStart(),nextTabPositionOffset)
float indicatorStart = getIndicatorPosition(nextTab.getStart(), pagePositionOffset, currentTab.getStart(), nextTabPositionOffset);
indicatorEnd=getIndicatorPosition(nextTab.getEnd(),pagePositionOffset,currentTab.getEnd(),nextTabPositionOffset)
float indicatorEnd = getIndicatorPosition(nextTab.getEnd(), pagePositionOffset, currentTab.getEnd(), nextTabPositionOffset);
height=getHeight()
int height = getHeight();
tabCount=pagerAdapter.getCount()
int tabCount = pagerAdapter.getCount();
title=pagerAdapter.getPageTitle(position)
CharSequence title = pagerAdapter.getPageTitle(position);
inflatedTabView=tabsContainer.inflateTab(layoutInflater,attributes.getTabLayoutId())
View inflatedTabView = tabsContainer.inflateTab(layoutInflater, attributes.getTabLayoutId());
int position = (int) view.getTag(TAG_KEY_POSITION);
scrollOffset=getHorizontalScrollOffset(position,positionOffset)
int scrollOffset = getHorizontalScrollOffset(position, positionOffset);
newScrollX=calculateScrollOffset(position,scrollOffset,positionOffset)
float newScrollX = calculateScrollOffset(position, scrollOffset, positionOffset);
tabWidth=tabsContainer.getTabAt(position).getWidth()
int tabWidth = tabsContainer.getTabAt(position).getWidth();
tabForPosition=tabsContainer.getTabAt(position)
View tabForPosition = tabsContainer.getTabAt(position);
float tabStartX = tabForPosition.getLeft() + scrollOffset;
int viewMiddleOffset = getTabParentWidth() / 2;
float tabCenterOffset = (tabForPosition.getRight() - tabForPosition.getLeft()) * 0.5F;
nextTabDelta=getNextTabDelta(position,pagerOffset,tabForPosition)
float nextTabDelta = getNextTabDelta(position, pagerOffset, tabForPosition);
LinearLayout tabsContainerView = new LinearLayout(context);
tab=getTabAt(index)
View tab = getTabAt(index);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
position=indicatorCoordinates.getStart()
float position = indicatorCoordinates.getStart();
lastTabOffset=((ViewGroup)getChildAt(0)).getChildAt(getChildCount() - 1).getWidth()
float lastTabOffset = ((ViewGroup) getChildAt(0)).getChildAt(getChildCount() - 1).getWidth();
frequency=getOneCycle(lastTabOffset)
float frequency = getOneCycle(lastTabOffset);
r=toHex(calculateColour(position,frequency,PHASE_RED,AMPLITUDE,CENTER_FREQUENCY))
String r = toHex(calculateColour(position, frequency, PHASE_RED, AMPLITUDE, CENTER_FREQUENCY));
g=toHex(calculateColour(position,frequency,PHASE_GREEN,AMPLITUDE,CENTER_FREQUENCY))
String g = toHex(calculateColour(position, frequency, PHASE_GREEN, AMPLITUDE, CENTER_FREQUENCY));
b=toHex(calculateColour(position,frequency,PHASE_BLUE,AMPLITUDE,CENTER_FREQUENCY))
String b = toHex(calculateColour(position, frequency, PHASE_BLUE, AMPLITUDE, CENTER_FREQUENCY));
height=getHeight()
int height = getHeight();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPagerFragment viewPagerFragment = new ViewPagerFragment();
Bundle bundle = new Bundle();
TextView view = (TextView) layoutInflater.inflate(R.layout.view_demo, container, false);
currentPosition=viewPagerAdapterState.getCurrentPosition()
int currentPosition = viewPagerAdapterState.getCurrentPosition();
view=getView(container,position)
View view = getView(container, position);
parcelableSparseArray=viewPagerAdapterState.get(position)
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
View view = (View) object;
SparseArray<Parcelable> viewState = new SparseArray<>();
position=entry.getValue()
int position = entry.getValue();
view=entry.getKey()
View view = entry.getKey();
bundle=in.readBundle()
Bundle bundle = in.readBundle();
Map<Integer, SparseArray<Parcelable>> viewStates = new HashMap<>(bundle.keySet().size());
sparseParcelableArray=bundle.getSparseParcelableArray(key)
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
primaryItemPosition=in.readInt()
int primaryItemPosition = in.readInt();
Bundle bundle = new Bundle();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
final TextView abText = (TextView) findViewById(R.id.ab_text);
final AyBe ayBe = new AyBe();
id=item.getItemId()
int id = item.getItemId();
callback=weakCallback.get()
AbTestingParamsLoadedCallback callback = weakCallback.get();
WeakReference<NoLeakActivity> weakNoLeakActivity = new WeakReference<NoLeakActivity>(noLeakActivity);
noLeakActivity=weakNoLeakActivity.get()
NoLeakActivity noLeakActivity = weakNoLeakActivity.get();
RecyclerView recyclerView = (RecyclerView) layoutInflater.inflate(R.layout.view_page, viewGroup, false);
itemView=layoutInflater.inflate(R.layout.view_item,parent,false)
View itemView = layoutInflater.inflate(R.layout.view_item, parent, false);
actual=foo.twice(HALF)
int actual = foo.twice(HALF);
int expected = WHOLE;
final float inverseRatio = 1f - ratio;
float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRatio);
float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRatio);
float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRatio);
hsv=node.getHsv()
float[] hsv = node.getHsv();
width=bitmap.getWidth()
final int width = bitmap.getWidth();
height=bitmap.getHeight()
final int height = bitmap.getHeight();
final int[] rgbPixels = new int[width * height];
final MedianCutQuantizer mcq = new MedianCutQuantizer(rgbPixels, NUM_COLORS);
primaryAccentColor=findPrimaryAccentColor()
final ColorNode primaryAccentColor = findPrimaryAccentColor();
secondaryAccentColor=findSecondaryAccentColor(primaryAccentColor)
final ColorNode secondaryAccentColor = findSecondaryAccentColor(primaryAccentColor);
tertiaryAccentColor=findTertiaryAccentColor(primaryAccentColor,secondaryAccentColor)
final int tertiaryAccentColor = findTertiaryAccentColor(
                primaryAccentColor, secondaryAccentColor);
primaryTextColor=findPrimaryTextColor(primaryAccentColor)
final int primaryTextColor = findPrimaryTextColor(primaryAccentColor);
secondaryTextColor=findSecondaryTextColor(primaryAccentColor)
final int secondaryTextColor = findSecondaryTextColor(primaryAccentColor);
final float primaryHue = primary.getHsv()[0];
final float candidateHue = candidate.getHsv()[0];
copy=Arrays.copyOf(palette,palette.length)
final MedianCutQuantizer.ColorNode[] copy = Arrays.copyOf(palette, palette.length);
maxCount=palette[0].getCount()
final float maxCount = palette[0].getCount();
lhsWeight=calculateWeight(lhs,maxCount)
final float lhsWeight = calculateWeight(lhs, maxCount);
rhsWeight=calculateWeight(rhs,maxCount)
final float rhsWeight = calculateWeight(rhs, maxCount);
float sum = 0;
float sumWeight = 0;
float value = values[i];
float weight = values[i + 1];
ColorHistogram colorHist = new ColorHistogram(pixels);
K=colorHist.getNumberOfColors()
int K = colorHist.getNumberOfColors();
ColorNode[] rCols = null;
rgb=colorHist.getColor(i)
int rgb = colorHist.getColor(i);
cnt=colorHist.getCount(i)
int cnt = colorHist.getCount(i);
ColorBox initialBox = new ColorBox(0, K - 1, 0);
List<ColorBox> colorSet = new ArrayList<ColorBox>();
int k = 1;
boolean done = false;
nextBox=findBoxToSplit(colorSet)
ColorBox nextBox = findBoxToSplit(colorSet);
newBox=nextBox.splitBox()
ColorBox newBox = nextBox.splitBox();
color=findClosestColor(pixels[i])
ColorNode color = findClosestColor(pixels[i]);
idx=findClosestColorIndex(rgb)
int idx = findClosestColorIndex(rgb);
red=Color.red(rgb)
int red = Color.red(rgb);
grn=Color.green(rgb)
int grn = Color.green(rgb);
blu=Color.blue(rgb)
int blu = Color.blue(rgb);
int minIdx = 0;
int minDistance = Integer.MAX_VALUE;
ColorNode color = quantColors[i];
d2=color.distance2(red,grn,blu)
int d2 = color.distance2(red, grn, blu);
ColorBox boxToSplit = null;
int minLevel = Integer.MAX_VALUE;
n=colorBoxes.size()
int n = colorBoxes.size();
ColorNode[] avgColors = new ColorNode[n];
int i = 0;
int dr = this.red - red;
int dg = this.grn - grn;
int db = this.blu - blu;
ColorNode color = imageColors[i];
int r = color.red;
int g = color.grn;
int b = color.blu;
dim=getLongestColorDimension()
ColorDimension dim = getLongestColorDimension();
med=findMedian(dim)
int med = findMedian(dim);
int nextLevel = level + 1;
ColorBox newBox = new ColorBox(med + 1, upper, nextLevel);
int rLength = rmax - rmin;
int gLength = gmax - gmin;
int bLength = bmax - bmin;
int half = count / 2;
int nPixels, median;
int rSum = 0;
int gSum = 0;
int bSum = 0;
int n = 0;
ColorNode ci = imageColors[i];
int cnt = ci.cnt;
double nd = n;
int avgRed = (int) (0.5 + rSum / nd);
int avgGrn = (int) (0.5 + gSum / nd);
int avgBlu = (int) (0.5 + bSum / nd);
s=this.getClass().getSimpleName()
String s = this.getClass().getSimpleName();
int i = 0;
int N = pixelsOrig.length;
int[] pixelsCpy = new int[N];
int k = -1;
int curColor = -1;
int nColors = k + 1;
id=item.getItemId()
int id = item.getItemId();
Intent intent = new Intent();
bitmap=((BitmapDrawable)imageView.getDrawable()).getBitmap()
Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap();
DominantColorCalculator dominantColorCalculator = new DominantColorCalculator(bitmap);
selectedImageUri=data.getData()
Uri selectedImageUri = data.getData();
selectedImagePath=getPath(selectedImageUri)
String selectedImagePath = getPath(selectedImageUri);
String[] projection = {MediaStore.Images.Media.DATA};
cursor=managedQuery(uri,projection,null,null,null)
Cursor cursor = managedQuery(uri, projection, null, null, null);
column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)
int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
LinearLayout rootView = (LinearLayout) inflater.inflate(R.layout.fragment_main, container, false);
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
preapprovalButton=payPal.getCheckoutButton(getActivity(),PayPal.BUTTON_194x37,CheckoutButton.TEXT_PAY)
CheckoutButton preapprovalButton = payPal.getCheckoutButton(getActivity(), PayPal.BUTTON_194x37, CheckoutButton.TEXT_PAY);
preapprovalIntent=payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY)
Intent preapprovalIntent = payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY);
String resultTitle = "";
String resultInfo = "";
String resultExtra = "";
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
PayPalPreapproval preapproval = new PayPalPreapproval();
preapproval=createPreapproval(preapprovalKey)
PayPalPreapproval preapproval = createPreapproval(preapprovalKey);
Bundle bundle = new Bundle();
int availableLength = maxLength;
StringBuilder stringBuilder = new StringBuilder(maxLength);
prefixAndSuffixLength=computeAppendedLengthIncludingSeparatorSpaces(prefix,suffix)
int prefixAndSuffixLength = computeAppendedLengthIncludingSeparatorSpaces(prefix, suffix);
urlLength=computeUrlLengthIncludingSeparatorSpace(url)
int urlLength = computeUrlLengthIncludingSeparatorSpace(url);
trimmedSubject=ellipsizeTextIfExceedsMaxLength(subject,availableLength)
String trimmedSubject = ellipsizeTextIfExceedsMaxLength(subject, availableLength);
int length = 0;
preferences=context.getSharedPreferences(MRU_PREFERENCES,Context.MODE_PRIVATE)
SharedPreferences preferences = context.getSharedPreferences(MRU_PREFERENCES, Context.MODE_PRIVATE);
args=getArguments()
Bundle args = getArguments();
themeResId=getThemeResIdIfProvidedIn(args)
int themeResId = getThemeResIdIfProvidedIn(args);
title=getTitleIfProvidedIn(args)
CharSequence title = getTitleIfProvidedIn(args);
builder=createDialogBuilder(themeResId).setCancelable(true).setView(dialogView)
AlertDialog.Builder builder = createDialogBuilder(themeResId)
                .setCancelable(true)
                .setView(dialogView);
inflater=getActivity().getLayoutInflater()
LayoutInflater inflater = getActivity().getLayoutInflater();
GridView gridView = (GridView) rootView.findViewById(R.id.ps__dialog_grid);
targetApps=extractTargetAppsFrom(args)
TargetApps targetApps = extractTargetAppsFrom(args);
allShareTargets=getAvailableShareTargets(sharingIntent)
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
priorityAppInfos=createPriorityResolveInfoList(targetApps,allShareTargets)
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
otherAppInfos=createOtherAppsResolveInfoList(priorityAppInfos,allShareTargets)
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
resolveInfos=targetApps.extractTargetResolveInfosFrom(allShareTargets)
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
mruResolveInfo=findMruResolveInfoIn(allShareTargets)
ResolveInfo mruResolveInfo = findMruResolveInfoIn(allShareTargets);
List<ResolveInfo> otherAppsInfos = new ArrayList<ResolveInfo>(allAppInfos);
mruPackageName=persister.getLastUsedTarget()
String mruPackageName = persister.getLastUsedTarget();
String packageName = resolveInfo.activityInfo.packageName;
packageManager=getActivity().getPackageManager()
PackageManager packageManager = getActivity().getPackageManager();
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
View buttonStrip = (View) showMoreButton.getParent();
gridView=getGridView()
GridView gridView = getGridView();
intent=wrapIntentWithExplicitTargetComponentForItem(position,sharingIntent)
Intent intent = wrapIntentWithExplicitTargetComponentForItem(position, sharingIntent);
Intent intent = new Intent(sharingIntent);
ActivityInfo activity = adapter.getItem(position).activityInfo;
ComponentName name = new ComponentName(activity.applicationInfo.packageName, activity.name);
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
PriorityShareDialog dialog = new PriorityShareDialog();
Bundle args = new Bundle();
sharingIntent=createSharingIntent()
Intent sharingIntent = createSharingIntent();
fragmentManager=activity.getFragmentManager()
FragmentManager fragmentManager = activity.getFragmentManager();
Intent intent = new Intent(Intent.ACTION_SEND);
dialog=new PriorityShareDialog.Builder().setTitle(title).setTargetApps(targetApps).setSharingIntent(sharingIntent).setOnPrepareSharingIntentListener(listener).setShowMostRecentlyUsed(showMostRecentlyUsed).build()
PriorityShareDialog dialog = new PriorityShareDialog.Builder()
                .setTitle(title)
                .setTargetApps(targetApps)
                .setSharingIntent(sharingIntent)
                .setOnPrepareSharingIntentListener(listener)
                .setShowMostRecentlyUsed(showMostRecentlyUsed)
                .build();
PrioritySharer prioritySharer = new PrioritySharer();
prioritySharer=build()
PrioritySharer prioritySharer = build();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
layoutInflater=LayoutInflater.from(context)
LayoutInflater layoutInflater = LayoutInflater.from(context);
iconSizePx=getIconSizePx(context.getResources())
int iconSizePx = getIconSizePx(context.getResources());
ArrayList<ResolveInfo> sortedList = new ArrayList<ResolveInfo>(resolveInfoList);
int otherAppsCountMaybe = showAllApps ? otherAppInfos.size() : 0;
firstOtherAppsItemPosition=priorityAppInfos.size()
int firstOtherAppsItemPosition = priorityAppInfos.size();
int offsetPosition = position - firstOtherAppsItemPosition;
TextView textView;
textView=initializeItemViewIfNecessary(convertView,R.layout.ps__grid_item_share,parent)
TextView textView = initializeItemViewIfNecessary(convertView, R.layout.ps__grid_item_share, parent);
info=getItem(position)
ResolveInfo info = getItem(position);
icon=info.loadIcon(packageManager)
Drawable icon = info.loadIcon(packageManager);
arraySize=in.readInt()
int arraySize = in.readInt();
String[] packageNames = new String[arraySize];
arraySize=targetPackages.size()
int arraySize = targetPackages.size();
String[] packagesArray = new String[arraySize];
SparseArray<ResolveInfo> matchedResolveInfos = new SparseArray<ResolveInfo>(targetPackages.size());
String packageName = info.activityInfo.packageName;
index=indexOfItemInto(packageName,targetPackages)
int index = indexOfItemInto(packageName, targetPackages);
sparseArraySize=sparseArray.size()
int sparseArraySize = sparseArray.size();
ArrayList<T> list = new ArrayList<T>(sparseArraySize);
int i = 0;
originalSubject=intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT)
CharSequence originalSubject = intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT);
String subject = originalSubject != null ? originalSubject.toString() : null;
composer=createComposer()
MessageComposer composer = createComposer();
component=intent.getComponent()
ComponentName component = intent.getComponent();
targetPackageName=component.getPackageName()
String targetPackageName = component.getPackageName();
adapter=ArrayAdapter.createFromResource(this,R.array.target_apps,android.R.layout.simple_spinner_item)
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
EditText text = (EditText) findViewById(R.id.text);
EditText title = (EditText) findViewById(R.id.title);
EditText mimeType = (EditText) findViewById(R.id.mime_type);
EditText dataUri = (EditText) findViewById(R.id.data_uri);
Switch showMostRecentlyUsed = (Switch) findViewById(R.id.show_most_recently_used);
uriString=dataUri.getText().toString()
String uriString = dataUri.getText().toString();
EditText text = (EditText) findViewById(R.id.text);
TextView textView = (TextView) convertView.findViewById(R.id.positionView);
colorView=convertView.findViewById(R.id.colorView)
View colorView = convertView.findViewById(R.id.colorView);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
offset=headerPlaceholder.getTop()
int offset = headerPlaceholder.getTop();
Integer item = COLORS[position];
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
firstVisiblePosition=grid.getFirstVisiblePosition()
int firstVisiblePosition = grid.getFirstVisiblePosition();
inflate=getViewForPosition(container,position)
View inflate = getViewForPosition(container, position);
id=item.getItemId()
int id = item.getItemId();
MyActivity activity = new MyActivity();
String manifestProperty = "../app/src/main/AndroidManifest.xml";
String resProperty = "../app/src/main/res";
cursor=resolver.query(uri,projection,selection,selectionArgs,null)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, null);
cursor=resolver.query(uri,projection,selection,selectionArgs,sortOrder)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, sortOrder);
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=richClass.setter(name)
Method setter = richClass.setter(name);
T obj;
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=methodsByName.get(name)
Method setter = methodsByName.get(name);
int type = TYPE_INT;
Class<?> t = setter.getParameterTypes()[0];
Class<?> t = setter.getParameterTypes()[0];
cursorType=cursor.getType(index)
final int cursorType = cursor.getType(index);
final Object obj;
s=f.getAnnotation(Mapper.class)
Mapper s = f.getAnnotation(Mapper.class);
mm=m.getAnnotation(Mapper.class)
Mapper mm = m.getAnnotation(Mapper.class);
methodName=StringUtil.asCamelifySetMethod(what)
String methodName = StringUtil.asCamelifySetMethod(what);
cursor=getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,null,null,null,null)
Cursor cursor = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
now=System.currentTimeMillis()
long now = System.currentTimeMillis();
List<Contact2> typedCursor = new CursorList<Contact2>(cursor, Contact2.class);
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[a-zA-Z0-9]+")
Pattern p = Pattern.compile("[a-zA-Z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[A-Z][a-z0-9]+")
Pattern p = Pattern.compile("[A-Z][a-z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
SurfaceView first = (SurfaceView) findViewById(R.id.firstSurface);
SurfaceView second = (SurfaceView) findViewById(R.id.secondSurface);
Intent pickVideo = new Intent(Intent.ACTION_PICK);
xml=context.obtainStyledAttributes(attrs,R.styleable.RelativeLayoutWithForeground)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.RelativeLayoutWithForeground);
int foregroundResId = INVALID_FOREGROUND_ID;
drawable=getDrawable(getResources(),foregroundResId)
Drawable drawable = getDrawable(getResources(), foregroundResId);
Bundle args = new Bundle();
enroll=mHotwordDetector.createEnrollIntent()
Intent enroll = mHotwordDetector.createEnrollIntent();

Diff of af3fca5c41e14e407380cf128331688866e13a36 and 3e3e3a099c23045fe3ffe840c3e080815c4023ba:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 6
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision af3fca5c41e14e407380cf128331688866e13a36 to 3e3e3a099c23045fe3ffe840c3e080815c4023ba


****Parsing for addition at revision 3e3e3a099c23045fe3ffe840c3e080815c4023ba****

Added AccessibilityChecker.java to .\/spikes\ repository source files.
Added DemoActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added DrawerActivity.java to .\/spikes\ repository source files.
Added EarthActivity.java to .\/spikes\ repository source files.
Added ProHaxDrawerActivity.java to .\/spikes\ repository source files.
Added SaturnActivity.java to .\/spikes\ repository source files.
Added LocalPlayerActivity.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added CastApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ComposeSmsActivity.java to .\/spikes\ repository source files.
Added HeadlessSmsSendService.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MmsReceiver.java to .\/spikes\ repository source files.
Added SmsReceiver.java to .\/spikes\ repository source files.
Added ExtendedDemoActivity.java to .\/spikes\ repository source files.
Added ExtendedDemoApplication.java to .\/spikes\ repository source files.
Added SimpleDemoActivity.java to .\/spikes\ repository source files.
Added SimpleDemoApplication.java to .\/spikes\ repository source files.
Added Binder.java to .\/spikes\ repository source files.
Added ConnectedClient.java to .\/spikes\ repository source files.
Added Connection.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnection.java to .\/spikes\ repository source files.
Added ServiceConnectionCallback.java to .\/spikes\ repository source files.
Added EasyCustomTabs.java to .\/spikes\ repository source files.
Added ActionButtonComposer.java to .\/spikes\ repository source files.
Added CloseButtonIconComposer.java to .\/spikes\ repository source files.
Added Composer.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilder.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigator.java to .\/spikes\ repository source files.
Added EasyCustomTabsWebNavigator.java to .\/spikes\ repository source files.
Added ExitAnimationsComposer.java to .\/spikes\ repository source files.
Added IntentCustomizer.java to .\/spikes\ repository source files.
Added MenuItemComposer.java to .\/spikes\ repository source files.
Added NavigationFallback.java to .\/spikes\ repository source files.
Added Navigator.java to .\/spikes\ repository source files.
Added ShowTitleComposer.java to .\/spikes\ repository source files.
Added StartAnimationsComposer.java to .\/spikes\ repository source files.
Added ToolbarColorComposer.java to .\/spikes\ repository source files.
Added UrlBarHidingComposer.java to .\/spikes\ repository source files.
Added WebNavigator.java to .\/spikes\ repository source files.
Added AvailableAppProvider.java to .\/spikes\ repository source files.
Added BestPackageFinder.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProvider.java to .\/spikes\ repository source files.
Added BinderTest.java to .\/spikes\ repository source files.
Added ConnectedClientTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnectionTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigatorTest.java to .\/spikes\ repository source files.
Added BestPackageFinderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProviderTest.java to .\/spikes\ repository source files.
Added ApiPagedChannelHistory.java to .\/spikes\ repository source files.
Added ApiPagedResponse.java to .\/spikes\ repository source files.
Added ChannelHistory.java to .\/spikes\ repository source files.
Added HistoryConverter.java to .\/spikes\ repository source files.
Added Runner.java to .\/spikes\ repository source files.
Added SlackHistoryFetcher.java to .\/spikes\ repository source files.
Added SlackWebService.java to .\/spikes\ repository source files.
Added ApiPagedResponseTest.java to .\/spikes\ repository source files.
Added MainActivityTest.java to .\/spikes\ repository source files.
Added LoremAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added BetterAccountManager.java to .\/spikes\ repository source files.
Added BetterAuthenticator.java to .\/spikes\ repository source files.
Added BetterAuthenticatorActivity.java to .\/spikes\ repository source files.
Added GertHerbAuthenticator.java to .\/spikes\ repository source files.
Added GertHerbAuthenticatorService.java to .\/spikes\ repository source files.
Added NoAccountException.java to .\/spikes\ repository source files.
Added ReactiveAuthenticatorActivity.java to .\/spikes\ repository source files.
Added Token.java to .\/spikes\ repository source files.
Added GertHerbActivity.java to .\/spikes\ repository source files.
Added GertHerbApplication.java to .\/spikes\ repository source files.
Added GertHerbAuthenticationActivity.java to .\/spikes\ repository source files.
Added TypefaceFactory.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added ViewServer.java to .\/spikes\ repository source files.
Added ViewServerManager.java to .\/spikes\ repository source files.
Added DeveloperError.java to .\/spikes\ repository source files.
Added HomeActivity.java to .\/spikes\ repository source files.
Added LoginActivity.java to .\/spikes\ repository source files.
Added LoginView.java to .\/spikes\ repository source files.
Added UserCredentials.java to .\/spikes\ repository source files.
Added FontButton.java to .\/spikes\ repository source files.
Added FontEditText.java to .\/spikes\ repository source files.
Added FontTextView.java to .\/spikes\ repository source files.
Added GithubApi.java to .\/spikes\ repository source files.
Added GithubApiFactory.java to .\/spikes\ repository source files.
Added TokenRequest.java to .\/spikes\ repository source files.
Added TokenResponse.java to .\/spikes\ repository source files.
Added Dummy.java to .\/spikes\ repository source files.
Added DummyTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MainFragment.java to .\/spikes\ repository source files.
Added Attributes.java to .\/spikes\ repository source files.
Added Coordinates.java to .\/spikes\ repository source files.
Added IndicatorCoordinatesCalculator.java to .\/spikes\ repository source files.
Added LandingStrip.java to .\/spikes\ repository source files.
Added MutableCoordinates.java to .\/spikes\ repository source files.
Added OnPagerAdapterChangedListener.java to .\/spikes\ repository source files.
Added PagerAdapterObserver.java to .\/spikes\ repository source files.
Added Scrollable.java to .\/spikes\ repository source files.
Added ScrollingPageChangeListener.java to .\/spikes\ repository source files.
Added State.java to .\/spikes\ repository source files.
Added TabsContainer.java to .\/spikes\ repository source files.
Added CustomLandingStrip.java to .\/spikes\ repository source files.
Added CustomTabActivity.java to .\/spikes\ repository source files.
Added ExampleRainbowLandingStrip.java to .\/spikes\ repository source files.
Added FixedWidthTabActivity.java to .\/spikes\ repository source files.
Added NoFragmentsSimpleTextTabActivity.java to .\/spikes\ repository source files.
Added Data.java to .\/spikes\ repository source files.
Added DemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added SmallDemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerFragment.java to .\/spikes\ repository source files.
Added DemoViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapterState.java to .\/spikes\ repository source files.
Added SimpleTextTabActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AbTestingParamsLoadedCallback.java to .\/spikes\ repository source files.
Added AyBe.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added WeakStartCallback.java to .\/spikes\ repository source files.
Added LeakActivity.java to .\/spikes\ repository source files.
Added NoLeakActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added Bar.java to .\/spikes\ repository source files.
Added Foo.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added FooTest.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added ColorScheme.java to .\/spikes\ repository source files.
Added ColorUtils.java to .\/spikes\ repository source files.
Added DominantColorCalculator.java to .\/spikes\ repository source files.
Added FloatUtils.java to .\/spikes\ repository source files.
Added MedianCutQuantizer.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added PayPalFragment.java to .\/spikes\ repository source files.
Added PayPalHelper.java to .\/spikes\ repository source files.
Added MaxLengthMessageComposer.java to .\/spikes\ repository source files.
Added MessageComposer.java to .\/spikes\ repository source files.
Added TwitterMessageComposer.java to .\/spikes\ repository source files.
Added DisabledMruPersister.java to .\/spikes\ repository source files.
Added MruPersister.java to .\/spikes\ repository source files.
Added SharedPreferencesMruPersister.java to .\/spikes\ repository source files.
Added OnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added PriorityShareDialog.java to .\/spikes\ repository source files.
Added PrioritySharer.java to .\/spikes\ repository source files.
Added ShareTargetsAdapter.java to .\/spikes\ repository source files.
Added SimpleOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added TargetApps.java to .\/spikes\ repository source files.
Added TwitterOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AdvancedActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SimpleActivity.java to .\/spikes\ repository source files.
Added LockingActivity.java to .\/spikes\ repository source files.
Added PostLockingActivity.java to .\/spikes\ repository source files.
Added PreLockingActivity.java to .\/spikes\ repository source files.
Added DummyAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added NovoStaggeredGridView.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SpikeApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SwipeableView.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MyClass.java to .\/spikes\ repository source files.
Added MyClassTest.java to .\/spikes\ repository source files.
Added MyAndroidClassTest.java to .\/spikes\ repository source files.
Added RobolectricGradleTestRunner.java to .\/spikes\ repository source files.
Added Mapper.java to .\/spikes\ repository source files.
Added Query.java to .\/spikes\ repository source files.
Added TypedResolver.java to .\/spikes\ repository source files.
Added CursorList.java to .\/spikes\ repository source files.
Added CursorListIterator.java to .\/spikes\ repository source files.
Added CursorMarshaller.java to .\/spikes\ repository source files.
Added EmptyListIterator.java to .\/spikes\ repository source files.
Added ReflectionCursorMarshaller.java to .\/spikes\ repository source files.
Added RichClass.java to .\/spikes\ repository source files.
Added Setter.java to .\/spikes\ repository source files.
Added Function.java to .\/spikes\ repository source files.
Added TypedElementLoader.java to .\/spikes\ repository source files.
Added TypedLoader.java to .\/spikes\ repository source files.
Added Marshaller.java to .\/spikes\ repository source files.
Added ObjectMapper.java to .\/spikes\ repository source files.
Added TypedActivity.java to .\/spikes\ repository source files.
Added StringUtil.java to .\/spikes\ repository source files.
Added MyObject.java to .\/spikes\ repository source files.
Added MediaPlayerSwitcherActivity.java to .\/spikes\ repository source files.
Added VideoPlayerService.java to .\/spikes\ repository source files.
Added RelativeLayoutWithForeground.java to .\/spikes\ repository source files.
Added DemoActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added RecognitionService.java to .\/spikes\ repository source files.
Added SessionService.java to .\/spikes\ repository source files.
Added SettingsActivity.java to .\/spikes\ repository source files.
Added SmartContextInteractionService.java to .\/spikes\ repository source files.
AccessibilityManager accessibilityManager = (AccessibilityManager) context.getSystemService(Context.ACCESSIBILITY_SERVICE);
enabledServices=getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN)
List<AccessibilityServiceInfo> enabledServices = getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN);
List<AccessibilityServiceInfo> enabledServices = getEnabledServicesFor(AccessibilityServiceInfo.FEEDBACK_SPOKEN);
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
final DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close) {

            @Override
            public void onDrawerClosed(View drawerView) {
                super.onDrawerClosed(drawerView);
                // waiting for the drawer to close, then navigating seems to cause issue.
                // why wait for the drawer to close? jankiness.
                if (pendingNavigationClick != null) {
                    startActivity(pendingNavigationClick);
                    pendingNavigationClick = null;
                }
            }

        };
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close);
Intent intent;
b=getIntent().getExtras()
Bundle b = getIntent().getExtras();
mShouldStartPlayback=b.getBoolean("shouldStart")
boolean mShouldStartPlayback = b.getBoolean("shouldStart");
startPosition=b.getInt("startPosition",0)
int startPosition = b.getInt("startPosition", 0);
currentPos=mVideoView.getCurrentPosition()
int currentPos = mVideoView.getCurrentPosition();
String msg;
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, mDisplaySize.y + getActionBar().getHeight());
mm=mSelectedMedia.getMetadata()
MediaMetadata mm = mSelectedMedia.getMetadata();
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, (int) (mDisplaySize.x * ASPECT_RATIO));
WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
width=display.getWidth()
int width = display.getWidth();
height=display.getHeight()
int height = display.getHeight();
int resourceId = 0;
String videoUrl = "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4#sthash.rJ5rPZy8.dpuf";
String title = "Jahre Philharmonie";
String description = "Awesome film you must watch!";
String author = "Blundell";
String thumbUrl = "http://www.ustream.tv/blog/wp-content/uploads/2013/10/simply-go-live.png";
MediaMetadata metadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE);
mediaInfo=new MediaInfo.Builder(videoUrl).setMetadata(metadata).setStreamType(MediaInfo.STREAM_TYPE_BUFFERED).setContentType("video/mp4").build()
MediaInfo mediaInfo = new MediaInfo.Builder(videoUrl)
                        .setMetadata(metadata)
                        .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)
                        .setContentType("video/mp4")
                        .build();
Intent intent = new Intent(MainActivity.this, LocalPlayerActivity.class);
preferences=getPreferences(MODE_PRIVATE)
SharedPreferences preferences = getPreferences(MODE_PRIVATE);
defaultSmsPackage=Telephony.Sms.getDefaultSmsPackage(this)
String defaultSmsPackage = Telephony.Sms.getDefaultSmsPackage(this);
Intent intent = new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
availableAppProvider=EasyCustomTabs.getInstance()
AvailableAppProvider availableAppProvider = EasyCustomTabs.getInstance();
ConnectedClient connectedClient = new ConnectedClient(client);
binder=Binder.newInstance()
Binder binder = Binder.newInstance();
List<Composer> composerList = new ArrayList<>();
customTabsSession=connection.newSession()
CustomTabsSession customTabsSession = connection.newSession();
CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(customTabsSession);
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
context=EasyCustomTabs.getInstance().getContext()
Context context = EasyCustomTabs.getInstance().getContext();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
packagesSupportingCustomTabs=getPackagesSupportingCustomTabs()
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
defaultPackage=getDefaultPackage()
String defaultPackage = getDefaultPackage();
defaultActivityInfo=packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK,0)
ResolveInfo defaultActivityInfo = packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK, 0);
String packageName = defaultActivityInfo.activityInfo.packageName;
resolvedInfoList=packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK,0)
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<String> packagesSupportingCustomTabs = new ArrayList<>();
Intent serviceIntent = new Intent();
bestPackageFinder=BestPackageFinder.newInstance()
BestPackageFinder bestPackageFinder = BestPackageFinder.newInstance();
packageName=bestPackageFinder.findBestPackage()
String packageName = bestPackageFinder.findBestPackage();
resolveInfo=createResolveInfoFor(packageName)
ResolveInfo resolveInfo = createResolveInfoFor(packageName);
ResolveInfo resolveInfo = new ResolveInfo();
List<ResolveInfo> resolveInfoList = new ArrayList<>();
defaultPackageResolveInfo=createResolveInfoFor(packageName)
ResolveInfo defaultPackageResolveInfo = createResolveInfoFor(packageName);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
oldestApiMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage oldestApiMessage = apiMessages.get(apiMessages.size() - 1);
String lastResponseEpochTime = oldestApiMessage.timeStamp;
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
latestMessage=latestMessages.get(latestMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage latestMessage = latestMessages.get(latestMessages.size() - 1);
latestMessageDateTime=convertToLocalDateTime(latestMessage.timeStamp)
LocalDateTime latestMessageDateTime = convertToLocalDateTime(latestMessage.timeStamp);
List<ChannelHistory.Message> messages = new ArrayList<>();
historyFrom=getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1))
LocalDateTime historyFrom = getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1));
historyTo=getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0))
LocalDateTime historyTo = getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0));
String text = apiMessage.text;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
lastMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage lastMessage = apiMessages.get(apiMessages.size() - 1);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
firstMessage=apiMessages.get(0)
ApiPagedChannelHistory.ApiMessage firstMessage = apiMessages.get(0);
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
String slackToken = args[0];
retrofit=new Retrofit.Builder().baseUrl("https://slack.com/api/").addConverterFactory(GsonConverterFactory.create()).build()
Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://slack.com/api/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();
slackWebService=retrofit.create(SlackWebService.class)
SlackWebService slackWebService = retrofit.create(SlackWebService.class);
slackHistoryFetcher=SlackHistoryFetcher.from(slackWebService,slackToken)
SlackHistoryFetcher slackHistoryFetcher = SlackHistoryFetcher.from(slackWebService, slackToken);
start=LocalDateTime.now()
LocalDateTime start = LocalDateTime.now();
end=LocalDateTime.now().minusDays(7)
LocalDateTime end = LocalDateTime.now().minusDays(7);
channelHistory=slackHistoryFetcher.getChannelHistory(start,end)
ChannelHistory channelHistory = slackHistoryFetcher.getChannelHistory(start, end);
HistoryConverter historyConverter = new HistoryConverter();
ApiPagedResponse apiPagedResponse = new ApiPagedResponse(start);
response=fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime())
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
apiPagedChannelHistory=response.body()
ApiPagedChannelHistory apiPagedChannelHistory = response.body();
channelHistory=slackWebService.getChannelHistory(slackToken,channel,lastResponseEpochTime,NUMBER_OF_RESULTS)
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
ApiPagedChannelHistory apiPagedChannelHistory = new ApiPagedChannelHistory();
ApiPagedChannelHistory.ApiMessage apiMessage = new ApiPagedChannelHistory.ApiMessage();
final TextView textView = new TextView(context);
emptyView=findViewById(R.id.empty_view)
View emptyView = findViewById(R.id.empty_view);
final Integer action = values[0];
LoremAdapter loremAdapter = new LoremAdapter();
accounts=accountManager.getAccountsByType(accountType)
Account[] accounts = accountManager.getAccountsByType(accountType);
Bundle result;
Bundle result;
Bundle result = new Bundle();
activity=createLoginIntent(context,accountType,authTokenType,requiredFeatures,options)
Intent activity = createLoginIntent(context, accountType, authTokenType, requiredFeatures, options);
Bundle bundle = new Bundle();
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
accounts=accountManager.getAccountsByType(authTokenType)
Account[] accounts = accountManager.getAccountsByType(authTokenType);
bundle=createResponseBundle(token)
Bundle bundle = createResponseBundle(token);
accountManager=AccountManager.get(this.getApplicationContext())
AccountManager accountManager = AccountManager.get(this.getApplicationContext());
Account account = new Account(token.getUserName(), getAccountName());
Bundle bundle = new Bundle();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
GertHerbAuthenticator authenticator = new GertHerbAuthenticator(this);
fontId=getFontId(context,attrs)
int fontId = getFontId(context, attrs);
fontType=getFontType(fontId)
FontType fontType = getFontType(fontId);
typedArray=context.obtainStyledAttributes(attrs,R.styleable.CustomTextAppearance)
TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CustomTextAppearance);
typeface=createTypeFace(context,fontType)
Typeface typeface = createTypeFace(context, fontType);
info=context.getApplicationInfo()
ApplicationInfo info = context.getApplicationInfo();
name=activity.getTitle().toString()
String name = activity.getTitle().toString();
client=mServer.accept()
Socket client = mServer.accept();
boolean result;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
BufferedReader in = null;
request=in.readLine()
final String request = in.readLine();
String command;
String parameters;
index=request.indexOf(' ')
int index = request.indexOf(' ');
boolean result;
boolean success = true;
BufferedWriter out = null;
index=parameters.indexOf(' ')
int index = parameters.indexOf(' ');
code=parameters.substring(0,index)
final String code = parameters.substring(0, index);
int hashCode = (int) Long.parseLong(code, 16);
window=findWindow(hashCode)
final View window = findWindow(hashCode);
dispatch=ViewDebug.class.getDeclaredMethod("dispatchCommand",View.class,String.class,String.class,OutputStream.class)
final Method dispatch = ViewDebug.class.getDeclaredMethod("dispatchCommand",
                        View.class, String.class, String.class, OutputStream.class);
View window = null;
boolean result = true;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
boolean result = true;
String focusName = null;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
View focusedWindow = null;
BufferedWriter out = null;
boolean needWindowListUpdate = false;
boolean needFocusedWindowUpdate = false;
BetterAccountManager accountManager = new BetterAccountManager(this, getString(R.string.account_type), getString(R.string.token_type), null);
loginView=Views.findById(this,R.id.login_view)
LoginView loginView = Views.findById(this, R.id.login_view);
authorizationApi=new GithubApiFactory().createAuthorizationApi(credentials.username,credentials.password)
GithubApi authorizationApi = new GithubApiFactory().createAuthorizationApi(credentials.username, credentials.password);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
Endpoint endpoint = new Endpoint() {
            @Override
            public String getUrl() {
                return GITHUB_API_URL;
            }

            @Override
            public String getName() {
                return "Live";
            }
        };
interceptor=createAuthorizationRequestInterceptor(username,password)
RequestInterceptor interceptor = createAuthorizationRequestInterceptor(username, password);
restAdapter=createRestAdapter(endpoint,interceptor)
RestAdapter restAdapter = createRestAdapter(endpoint, interceptor);
Dummy dummy = new Dummy();
result=dummy.explodes()
boolean result = dummy.explodes();
String base64EncodedPublicKey = "CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE";
premiumPurchase=inventory.getPurchase(SKU_PREMIUM)
Purchase premiumPurchase = inventory.getPurchase(SKU_PREMIUM);
infiniteGasPurchase=inventory.getPurchase(SKU_INFINITE_GAS)
Purchase infiniteGasPurchase = inventory.getPurchase(SKU_INFINITE_GAS);
gasPurchase=inventory.getPurchase(SKU_GAS)
Purchase gasPurchase = inventory.getPurchase(SKU_GAS);
String payload = "";
String payload = "";
String payload = "";
payload=p.getDeveloperPayload()
String payload = p.getDeveloperPayload();
int index = mTank >= TANK_RES_IDS.length ? TANK_RES_IDS.length - 1 : mTank;
AlertDialog.Builder bld = new AlertDialog.Builder(this);
spe=getPreferences(MODE_PRIVATE).edit()
SharedPreferences.Editor spe = getPreferences(MODE_PRIVATE).edit();
sp=getPreferences(MODE_PRIVATE)
SharedPreferences sp = getPreferences(MODE_PRIVATE);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                                  + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                    | ((source[d + 1 + off] << 24) >>> 16)
                    | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                    | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                                   "-1002:Bad response received/" +
                                   "-1003:Purchase signature verification failed/" +
                                   "-1004:Send intent failed/" +
                                   "-1005:User cancelled/" +
                                   "-1006:Unknown purchase response/" +
                                   "-1007:Missing token/" +
                                   "-1008:Unknown error/" +
                                   "-1009:Subscriptions not available/" +
                                   "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(),
                    itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                        | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                        | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                            | ((source[d + 1 + off] << 24) >>> 16)
                            | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                            | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                "-1002:Bad response received/" +
                "-1003:Purchase signature verification failed/" +
                "-1004:Send intent failed/" +
                "-1005:User cancelled/" +
                "-1006:Unknown purchase response/" +
                "-1007:Missing token/" +
                "-1008:Unknown error/" +
                "-1009:Subscriptions not available/" +
                "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(), itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
responseCode=result.getResponse()
int responseCode = result.getResponse();
sku=purchase.getSku()
String sku = purchase.getSku();
skuDetails=inv.getSkuDetails(sku)
SkuDetails skuDetails = inv.getSkuDetails(sku);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
Button purchaseFiveButton = (Button) rootView.findViewById(R.id.fragment_main_button_purchase_five_coins);
xml=context.obtainStyledAttributes(attrs,R.styleable.LandingStrip)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.LandingStrip);
tabLayoutId=xml.getResourceId(R.styleable.LandingStrip_tabLayoutId,MISSING_TAB_LAYOUT_ID)
int tabLayoutId = xml.getResourceId(R.styleable.LandingStrip_tabLayoutId, MISSING_TAB_LAYOUT_ID);
indicatorColour=xml.getResourceId(R.styleable.LandingStrip_indicatorColor,DEFAULT_INDICATOR_COLOUR)
int indicatorColour = xml.getResourceId(R.styleable.LandingStrip_indicatorColor, DEFAULT_INDICATOR_COLOUR);
indicatorHeight=getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight,DEFAULT_INDICATOR_HEIGHT,xml)
int indicatorHeight = getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight, DEFAULT_INDICATOR_HEIGHT, xml);
tabsPaddingLeft=getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingLeft = getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding, DEFAULT_TABS_PADDING, xml);
tabsPaddingRight=getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingRight = getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding, DEFAULT_TABS_PADDING, xml);
MutableCoordinates drawCurrentTabCoordinates = new MutableCoordinates();
MutableCoordinates drawNextTabCoordinates = new MutableCoordinates();
MutableCoordinates drawMovingIndicatorCoordinates = new MutableCoordinates();
currentTab=tabsContainer.getTabAt(currentPosition)
View currentTab = tabsContainer.getTabAt(currentPosition);
currentTabStart=currentTab.getLeft()
float currentTabStart = currentTab.getLeft();
currentTabEnd=currentTab.getRight()
float currentTabEnd = currentTab.getRight();
nextTab=tabsContainer.getTabAt(currentPosition + 1)
View nextTab = tabsContainer.getTabAt(currentPosition + 1);
nextTabPositionOffset=getFractionFrom(pagePositionOffset)
float nextTabPositionOffset = getFractionFrom(pagePositionOffset);
indicatorStart=getIndicatorPosition(nextTab.getStart(),pagePositionOffset,currentTab.getStart(),nextTabPositionOffset)
float indicatorStart = getIndicatorPosition(nextTab.getStart(), pagePositionOffset, currentTab.getStart(), nextTabPositionOffset);
indicatorEnd=getIndicatorPosition(nextTab.getEnd(),pagePositionOffset,currentTab.getEnd(),nextTabPositionOffset)
float indicatorEnd = getIndicatorPosition(nextTab.getEnd(), pagePositionOffset, currentTab.getEnd(), nextTabPositionOffset);
height=getHeight()
int height = getHeight();
tabCount=pagerAdapter.getCount()
int tabCount = pagerAdapter.getCount();
title=pagerAdapter.getPageTitle(position)
CharSequence title = pagerAdapter.getPageTitle(position);
inflatedTabView=tabsContainer.inflateTab(layoutInflater,attributes.getTabLayoutId())
View inflatedTabView = tabsContainer.inflateTab(layoutInflater, attributes.getTabLayoutId());
int position = (int) view.getTag(TAG_KEY_POSITION);
scrollOffset=getHorizontalScrollOffset(position,positionOffset)
int scrollOffset = getHorizontalScrollOffset(position, positionOffset);
newScrollX=calculateScrollOffset(position,scrollOffset,positionOffset)
float newScrollX = calculateScrollOffset(position, scrollOffset, positionOffset);
tabWidth=tabsContainer.getTabAt(position).getWidth()
int tabWidth = tabsContainer.getTabAt(position).getWidth();
tabForPosition=tabsContainer.getTabAt(position)
View tabForPosition = tabsContainer.getTabAt(position);
float tabStartX = tabForPosition.getLeft() + scrollOffset;
int viewMiddleOffset = getTabParentWidth() / 2;
float tabCenterOffset = (tabForPosition.getRight() - tabForPosition.getLeft()) * 0.5F;
nextTabDelta=getNextTabDelta(position,pagerOffset,tabForPosition)
float nextTabDelta = getNextTabDelta(position, pagerOffset, tabForPosition);
LinearLayout tabsContainerView = new LinearLayout(context);
tab=getTabAt(index)
View tab = getTabAt(index);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
position=indicatorCoordinates.getStart()
float position = indicatorCoordinates.getStart();
lastTabOffset=((ViewGroup)getChildAt(0)).getChildAt(getChildCount() - 1).getWidth()
float lastTabOffset = ((ViewGroup) getChildAt(0)).getChildAt(getChildCount() - 1).getWidth();
frequency=getOneCycle(lastTabOffset)
float frequency = getOneCycle(lastTabOffset);
r=toHex(calculateColour(position,frequency,PHASE_RED,AMPLITUDE,CENTER_FREQUENCY))
String r = toHex(calculateColour(position, frequency, PHASE_RED, AMPLITUDE, CENTER_FREQUENCY));
g=toHex(calculateColour(position,frequency,PHASE_GREEN,AMPLITUDE,CENTER_FREQUENCY))
String g = toHex(calculateColour(position, frequency, PHASE_GREEN, AMPLITUDE, CENTER_FREQUENCY));
b=toHex(calculateColour(position,frequency,PHASE_BLUE,AMPLITUDE,CENTER_FREQUENCY))
String b = toHex(calculateColour(position, frequency, PHASE_BLUE, AMPLITUDE, CENTER_FREQUENCY));
height=getHeight()
int height = getHeight();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPagerFragment viewPagerFragment = new ViewPagerFragment();
Bundle bundle = new Bundle();
TextView view = (TextView) layoutInflater.inflate(R.layout.view_demo, container, false);
currentPosition=viewPagerAdapterState.getCurrentPosition()
int currentPosition = viewPagerAdapterState.getCurrentPosition();
view=getView(container,position)
View view = getView(container, position);
parcelableSparseArray=viewPagerAdapterState.get(position)
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
View view = (View) object;
SparseArray<Parcelable> viewState = new SparseArray<>();
position=entry.getValue()
int position = entry.getValue();
view=entry.getKey()
View view = entry.getKey();
bundle=in.readBundle()
Bundle bundle = in.readBundle();
Map<Integer, SparseArray<Parcelable>> viewStates = new HashMap<>(bundle.keySet().size());
sparseParcelableArray=bundle.getSparseParcelableArray(key)
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
primaryItemPosition=in.readInt()
int primaryItemPosition = in.readInt();
Bundle bundle = new Bundle();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
final TextView abText = (TextView) findViewById(R.id.ab_text);
final AyBe ayBe = new AyBe();
id=item.getItemId()
int id = item.getItemId();
callback=weakCallback.get()
AbTestingParamsLoadedCallback callback = weakCallback.get();
WeakReference<NoLeakActivity> weakNoLeakActivity = new WeakReference<NoLeakActivity>(noLeakActivity);
noLeakActivity=weakNoLeakActivity.get()
NoLeakActivity noLeakActivity = weakNoLeakActivity.get();
RecyclerView recyclerView = (RecyclerView) layoutInflater.inflate(R.layout.view_page, viewGroup, false);
itemView=layoutInflater.inflate(R.layout.view_item,parent,false)
View itemView = layoutInflater.inflate(R.layout.view_item, parent, false);
actual=foo.twice(HALF)
int actual = foo.twice(HALF);
int expected = WHOLE;
final float inverseRatio = 1f - ratio;
float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRatio);
float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRatio);
float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRatio);
hsv=node.getHsv()
float[] hsv = node.getHsv();
width=bitmap.getWidth()
final int width = bitmap.getWidth();
height=bitmap.getHeight()
final int height = bitmap.getHeight();
final int[] rgbPixels = new int[width * height];
final MedianCutQuantizer mcq = new MedianCutQuantizer(rgbPixels, NUM_COLORS);
primaryAccentColor=findPrimaryAccentColor()
final ColorNode primaryAccentColor = findPrimaryAccentColor();
secondaryAccentColor=findSecondaryAccentColor(primaryAccentColor)
final ColorNode secondaryAccentColor = findSecondaryAccentColor(primaryAccentColor);
tertiaryAccentColor=findTertiaryAccentColor(primaryAccentColor,secondaryAccentColor)
final int tertiaryAccentColor = findTertiaryAccentColor(
                primaryAccentColor, secondaryAccentColor);
primaryTextColor=findPrimaryTextColor(primaryAccentColor)
final int primaryTextColor = findPrimaryTextColor(primaryAccentColor);
secondaryTextColor=findSecondaryTextColor(primaryAccentColor)
final int secondaryTextColor = findSecondaryTextColor(primaryAccentColor);
final float primaryHue = primary.getHsv()[0];
final float candidateHue = candidate.getHsv()[0];
copy=Arrays.copyOf(palette,palette.length)
final MedianCutQuantizer.ColorNode[] copy = Arrays.copyOf(palette, palette.length);
maxCount=palette[0].getCount()
final float maxCount = palette[0].getCount();
lhsWeight=calculateWeight(lhs,maxCount)
final float lhsWeight = calculateWeight(lhs, maxCount);
rhsWeight=calculateWeight(rhs,maxCount)
final float rhsWeight = calculateWeight(rhs, maxCount);
float sum = 0;
float sumWeight = 0;
float value = values[i];
float weight = values[i + 1];
ColorHistogram colorHist = new ColorHistogram(pixels);
K=colorHist.getNumberOfColors()
int K = colorHist.getNumberOfColors();
ColorNode[] rCols = null;
rgb=colorHist.getColor(i)
int rgb = colorHist.getColor(i);
cnt=colorHist.getCount(i)
int cnt = colorHist.getCount(i);
ColorBox initialBox = new ColorBox(0, K - 1, 0);
List<ColorBox> colorSet = new ArrayList<ColorBox>();
int k = 1;
boolean done = false;
nextBox=findBoxToSplit(colorSet)
ColorBox nextBox = findBoxToSplit(colorSet);
newBox=nextBox.splitBox()
ColorBox newBox = nextBox.splitBox();
color=findClosestColor(pixels[i])
ColorNode color = findClosestColor(pixels[i]);
idx=findClosestColorIndex(rgb)
int idx = findClosestColorIndex(rgb);
red=Color.red(rgb)
int red = Color.red(rgb);
grn=Color.green(rgb)
int grn = Color.green(rgb);
blu=Color.blue(rgb)
int blu = Color.blue(rgb);
int minIdx = 0;
int minDistance = Integer.MAX_VALUE;
ColorNode color = quantColors[i];
d2=color.distance2(red,grn,blu)
int d2 = color.distance2(red, grn, blu);
ColorBox boxToSplit = null;
int minLevel = Integer.MAX_VALUE;
n=colorBoxes.size()
int n = colorBoxes.size();
ColorNode[] avgColors = new ColorNode[n];
int i = 0;
int dr = this.red - red;
int dg = this.grn - grn;
int db = this.blu - blu;
ColorNode color = imageColors[i];
int r = color.red;
int g = color.grn;
int b = color.blu;
dim=getLongestColorDimension()
ColorDimension dim = getLongestColorDimension();
med=findMedian(dim)
int med = findMedian(dim);
int nextLevel = level + 1;
ColorBox newBox = new ColorBox(med + 1, upper, nextLevel);
int rLength = rmax - rmin;
int gLength = gmax - gmin;
int bLength = bmax - bmin;
int half = count / 2;
int nPixels, median;
int rSum = 0;
int gSum = 0;
int bSum = 0;
int n = 0;
ColorNode ci = imageColors[i];
int cnt = ci.cnt;
double nd = n;
int avgRed = (int) (0.5 + rSum / nd);
int avgGrn = (int) (0.5 + gSum / nd);
int avgBlu = (int) (0.5 + bSum / nd);
s=this.getClass().getSimpleName()
String s = this.getClass().getSimpleName();
int i = 0;
int N = pixelsOrig.length;
int[] pixelsCpy = new int[N];
int k = -1;
int curColor = -1;
int nColors = k + 1;
id=item.getItemId()
int id = item.getItemId();
Intent intent = new Intent();
bitmap=((BitmapDrawable)imageView.getDrawable()).getBitmap()
Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap();
DominantColorCalculator dominantColorCalculator = new DominantColorCalculator(bitmap);
selectedImageUri=data.getData()
Uri selectedImageUri = data.getData();
selectedImagePath=getPath(selectedImageUri)
String selectedImagePath = getPath(selectedImageUri);
String[] projection = {MediaStore.Images.Media.DATA};
cursor=managedQuery(uri,projection,null,null,null)
Cursor cursor = managedQuery(uri, projection, null, null, null);
column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)
int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
LinearLayout rootView = (LinearLayout) inflater.inflate(R.layout.fragment_main, container, false);
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
preapprovalButton=payPal.getCheckoutButton(getActivity(),PayPal.BUTTON_194x37,CheckoutButton.TEXT_PAY)
CheckoutButton preapprovalButton = payPal.getCheckoutButton(getActivity(), PayPal.BUTTON_194x37, CheckoutButton.TEXT_PAY);
preapprovalIntent=payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY)
Intent preapprovalIntent = payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY);
String resultTitle = "";
String resultInfo = "";
String resultExtra = "";
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
PayPalPreapproval preapproval = new PayPalPreapproval();
preapproval=createPreapproval(preapprovalKey)
PayPalPreapproval preapproval = createPreapproval(preapprovalKey);
Bundle bundle = new Bundle();
int availableLength = maxLength;
StringBuilder stringBuilder = new StringBuilder(maxLength);
prefixAndSuffixLength=computeAppendedLengthIncludingSeparatorSpaces(prefix,suffix)
int prefixAndSuffixLength = computeAppendedLengthIncludingSeparatorSpaces(prefix, suffix);
urlLength=computeUrlLengthIncludingSeparatorSpace(url)
int urlLength = computeUrlLengthIncludingSeparatorSpace(url);
trimmedSubject=ellipsizeTextIfExceedsMaxLength(subject,availableLength)
String trimmedSubject = ellipsizeTextIfExceedsMaxLength(subject, availableLength);
int length = 0;
preferences=context.getSharedPreferences(MRU_PREFERENCES,Context.MODE_PRIVATE)
SharedPreferences preferences = context.getSharedPreferences(MRU_PREFERENCES, Context.MODE_PRIVATE);
args=getArguments()
Bundle args = getArguments();
themeResId=getThemeResIdIfProvidedIn(args)
int themeResId = getThemeResIdIfProvidedIn(args);
title=getTitleIfProvidedIn(args)
CharSequence title = getTitleIfProvidedIn(args);
builder=createDialogBuilder(themeResId).setCancelable(true).setView(dialogView)
AlertDialog.Builder builder = createDialogBuilder(themeResId)
                .setCancelable(true)
                .setView(dialogView);
inflater=getActivity().getLayoutInflater()
LayoutInflater inflater = getActivity().getLayoutInflater();
GridView gridView = (GridView) rootView.findViewById(R.id.ps__dialog_grid);
targetApps=extractTargetAppsFrom(args)
TargetApps targetApps = extractTargetAppsFrom(args);
allShareTargets=getAvailableShareTargets(sharingIntent)
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
priorityAppInfos=createPriorityResolveInfoList(targetApps,allShareTargets)
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
otherAppInfos=createOtherAppsResolveInfoList(priorityAppInfos,allShareTargets)
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
resolveInfos=targetApps.extractTargetResolveInfosFrom(allShareTargets)
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
mruResolveInfo=findMruResolveInfoIn(allShareTargets)
ResolveInfo mruResolveInfo = findMruResolveInfoIn(allShareTargets);
List<ResolveInfo> otherAppsInfos = new ArrayList<ResolveInfo>(allAppInfos);
mruPackageName=persister.getLastUsedTarget()
String mruPackageName = persister.getLastUsedTarget();
String packageName = resolveInfo.activityInfo.packageName;
packageManager=getActivity().getPackageManager()
PackageManager packageManager = getActivity().getPackageManager();
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
View buttonStrip = (View) showMoreButton.getParent();
gridView=getGridView()
GridView gridView = getGridView();
intent=wrapIntentWithExplicitTargetComponentForItem(position,sharingIntent)
Intent intent = wrapIntentWithExplicitTargetComponentForItem(position, sharingIntent);
Intent intent = new Intent(sharingIntent);
ActivityInfo activity = adapter.getItem(position).activityInfo;
ComponentName name = new ComponentName(activity.applicationInfo.packageName, activity.name);
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
PriorityShareDialog dialog = new PriorityShareDialog();
Bundle args = new Bundle();
sharingIntent=createSharingIntent()
Intent sharingIntent = createSharingIntent();
fragmentManager=activity.getFragmentManager()
FragmentManager fragmentManager = activity.getFragmentManager();
Intent intent = new Intent(Intent.ACTION_SEND);
dialog=new PriorityShareDialog.Builder().setTitle(title).setTargetApps(targetApps).setSharingIntent(sharingIntent).setOnPrepareSharingIntentListener(listener).setShowMostRecentlyUsed(showMostRecentlyUsed).build()
PriorityShareDialog dialog = new PriorityShareDialog.Builder()
                .setTitle(title)
                .setTargetApps(targetApps)
                .setSharingIntent(sharingIntent)
                .setOnPrepareSharingIntentListener(listener)
                .setShowMostRecentlyUsed(showMostRecentlyUsed)
                .build();
PrioritySharer prioritySharer = new PrioritySharer();
prioritySharer=build()
PrioritySharer prioritySharer = build();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
layoutInflater=LayoutInflater.from(context)
LayoutInflater layoutInflater = LayoutInflater.from(context);
iconSizePx=getIconSizePx(context.getResources())
int iconSizePx = getIconSizePx(context.getResources());
ArrayList<ResolveInfo> sortedList = new ArrayList<ResolveInfo>(resolveInfoList);
int otherAppsCountMaybe = showAllApps ? otherAppInfos.size() : 0;
firstOtherAppsItemPosition=priorityAppInfos.size()
int firstOtherAppsItemPosition = priorityAppInfos.size();
int offsetPosition = position - firstOtherAppsItemPosition;
TextView textView;
textView=initializeItemViewIfNecessary(convertView,R.layout.ps__grid_item_share,parent)
TextView textView = initializeItemViewIfNecessary(convertView, R.layout.ps__grid_item_share, parent);
info=getItem(position)
ResolveInfo info = getItem(position);
icon=info.loadIcon(packageManager)
Drawable icon = info.loadIcon(packageManager);
arraySize=in.readInt()
int arraySize = in.readInt();
String[] packageNames = new String[arraySize];
arraySize=targetPackages.size()
int arraySize = targetPackages.size();
String[] packagesArray = new String[arraySize];
SparseArray<ResolveInfo> matchedResolveInfos = new SparseArray<ResolveInfo>(targetPackages.size());
String packageName = info.activityInfo.packageName;
index=indexOfItemInto(packageName,targetPackages)
int index = indexOfItemInto(packageName, targetPackages);
sparseArraySize=sparseArray.size()
int sparseArraySize = sparseArray.size();
ArrayList<T> list = new ArrayList<T>(sparseArraySize);
int i = 0;
originalSubject=intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT)
CharSequence originalSubject = intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT);
String subject = originalSubject != null ? originalSubject.toString() : null;
composer=createComposer()
MessageComposer composer = createComposer();
component=intent.getComponent()
ComponentName component = intent.getComponent();
targetPackageName=component.getPackageName()
String targetPackageName = component.getPackageName();
adapter=ArrayAdapter.createFromResource(this,R.array.target_apps,android.R.layout.simple_spinner_item)
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
EditText text = (EditText) findViewById(R.id.text);
EditText title = (EditText) findViewById(R.id.title);
EditText mimeType = (EditText) findViewById(R.id.mime_type);
EditText dataUri = (EditText) findViewById(R.id.data_uri);
Switch showMostRecentlyUsed = (Switch) findViewById(R.id.show_most_recently_used);
uriString=dataUri.getText().toString()
String uriString = dataUri.getText().toString();
EditText text = (EditText) findViewById(R.id.text);
TextView textView = (TextView) convertView.findViewById(R.id.positionView);
colorView=convertView.findViewById(R.id.colorView)
View colorView = convertView.findViewById(R.id.colorView);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
offset=headerPlaceholder.getTop()
int offset = headerPlaceholder.getTop();
Integer item = COLORS[position];
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
firstVisiblePosition=grid.getFirstVisiblePosition()
int firstVisiblePosition = grid.getFirstVisiblePosition();
inflate=getViewForPosition(container,position)
View inflate = getViewForPosition(container, position);
id=item.getItemId()
int id = item.getItemId();
MyActivity activity = new MyActivity();
String manifestProperty = "../app/src/main/AndroidManifest.xml";
String resProperty = "../app/src/main/res";
cursor=resolver.query(uri,projection,selection,selectionArgs,null)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, null);
cursor=resolver.query(uri,projection,selection,selectionArgs,sortOrder)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, sortOrder);
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=richClass.setter(name)
Method setter = richClass.setter(name);
T obj;
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=methodsByName.get(name)
Method setter = methodsByName.get(name);
int type = TYPE_INT;
Class<?> t = setter.getParameterTypes()[0];
Class<?> t = setter.getParameterTypes()[0];
cursorType=cursor.getType(index)
final int cursorType = cursor.getType(index);
final Object obj;
s=f.getAnnotation(Mapper.class)
Mapper s = f.getAnnotation(Mapper.class);
mm=m.getAnnotation(Mapper.class)
Mapper mm = m.getAnnotation(Mapper.class);
methodName=StringUtil.asCamelifySetMethod(what)
String methodName = StringUtil.asCamelifySetMethod(what);
cursor=getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,null,null,null,null)
Cursor cursor = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
now=System.currentTimeMillis()
long now = System.currentTimeMillis();
List<Contact2> typedCursor = new CursorList<Contact2>(cursor, Contact2.class);
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[a-zA-Z0-9]+")
Pattern p = Pattern.compile("[a-zA-Z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[A-Z][a-z0-9]+")
Pattern p = Pattern.compile("[A-Z][a-z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
SurfaceView first = (SurfaceView) findViewById(R.id.firstSurface);
SurfaceView second = (SurfaceView) findViewById(R.id.secondSurface);
Intent pickVideo = new Intent(Intent.ACTION_PICK);
xml=context.obtainStyledAttributes(attrs,R.styleable.RelativeLayoutWithForeground)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.RelativeLayoutWithForeground);
int foregroundResId = INVALID_FOREGROUND_ID;
drawable=getDrawable(getResources(),foregroundResId)
Drawable drawable = getDrawable(getResources(), foregroundResId);
Bundle args = new Bundle();
enroll=mHotwordDetector.createEnrollIntent()
Intent enroll = mHotwordDetector.createEnrollIntent();

Diff of 3e3e3a099c23045fe3ffe840c3e080815c4023ba and 7395e8d7c92ee3b9fe81e02595757703dbaca2cd:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 6
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 3e3e3a099c23045fe3ffe840c3e080815c4023ba to 7395e8d7c92ee3b9fe81e02595757703dbaca2cd

************Analysis complete************
Added generics to repository novoda/spikes = 5

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 6
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 5

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 6
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 5

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 6
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 5

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 6
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 5

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 6
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 5

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 6
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 5

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 6
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 5

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 6
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 5

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 6
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 5

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 6
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 5

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 6
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 5

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 6
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 5

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 6
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 5

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 6
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 5

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 6
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 5

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 6
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 5

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 6
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 5

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 6
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 5

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 6
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null

****Parsing for addition at revision ac112617bfdd907c33ff148c9f89a05eda04beac****

Added ApplicationTest.java to .\/spikes\ repository source files.
Added DrawerActivity.java to .\/spikes\ repository source files.
Added EarthActivity.java to .\/spikes\ repository source files.
Added ProHaxDrawerActivity.java to .\/spikes\ repository source files.
Added SaturnActivity.java to .\/spikes\ repository source files.
Added LocalPlayerActivity.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added CastApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ComposeSmsActivity.java to .\/spikes\ repository source files.
Added HeadlessSmsSendService.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MmsReceiver.java to .\/spikes\ repository source files.
Added SmsReceiver.java to .\/spikes\ repository source files.
Added ExtendedDemoActivity.java to .\/spikes\ repository source files.
Added ExtendedDemoApplication.java to .\/spikes\ repository source files.
Added SimpleDemoActivity.java to .\/spikes\ repository source files.
Added SimpleDemoApplication.java to .\/spikes\ repository source files.
Added Binder.java to .\/spikes\ repository source files.
Added ConnectedClient.java to .\/spikes\ repository source files.
Added Connection.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnection.java to .\/spikes\ repository source files.
Added ServiceConnectionCallback.java to .\/spikes\ repository source files.
Added EasyCustomTabs.java to .\/spikes\ repository source files.
Added ActionButtonComposer.java to .\/spikes\ repository source files.
Added CloseButtonIconComposer.java to .\/spikes\ repository source files.
Added Composer.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilder.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigator.java to .\/spikes\ repository source files.
Added EasyCustomTabsWebNavigator.java to .\/spikes\ repository source files.
Added ExitAnimationsComposer.java to .\/spikes\ repository source files.
Added IntentCustomizer.java to .\/spikes\ repository source files.
Added MenuItemComposer.java to .\/spikes\ repository source files.
Added NavigationFallback.java to .\/spikes\ repository source files.
Added Navigator.java to .\/spikes\ repository source files.
Added ShowTitleComposer.java to .\/spikes\ repository source files.
Added StartAnimationsComposer.java to .\/spikes\ repository source files.
Added ToolbarColorComposer.java to .\/spikes\ repository source files.
Added UrlBarHidingComposer.java to .\/spikes\ repository source files.
Added WebNavigator.java to .\/spikes\ repository source files.
Added AvailableAppProvider.java to .\/spikes\ repository source files.
Added BestPackageFinder.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProvider.java to .\/spikes\ repository source files.
Added BinderTest.java to .\/spikes\ repository source files.
Added ConnectedClientTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnectionTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigatorTest.java to .\/spikes\ repository source files.
Added BestPackageFinderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProviderTest.java to .\/spikes\ repository source files.
Added ApiPagedChannelHistory.java to .\/spikes\ repository source files.
Added ApiPagedResponse.java to .\/spikes\ repository source files.
Added ChannelHistory.java to .\/spikes\ repository source files.
Added HistoryConverter.java to .\/spikes\ repository source files.
Added Runner.java to .\/spikes\ repository source files.
Added SlackHistoryFetcher.java to .\/spikes\ repository source files.
Added SlackWebService.java to .\/spikes\ repository source files.
Added ApiPagedResponseTest.java to .\/spikes\ repository source files.
Added MainActivityTest.java to .\/spikes\ repository source files.
Added LoremAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added BetterAccountManager.java to .\/spikes\ repository source files.
Added BetterAuthenticator.java to .\/spikes\ repository source files.
Added BetterAuthenticatorActivity.java to .\/spikes\ repository source files.
Added GertHerbAuthenticator.java to .\/spikes\ repository source files.
Added GertHerbAuthenticatorService.java to .\/spikes\ repository source files.
Added NoAccountException.java to .\/spikes\ repository source files.
Added ReactiveAuthenticatorActivity.java to .\/spikes\ repository source files.
Added Token.java to .\/spikes\ repository source files.
Added GertHerbActivity.java to .\/spikes\ repository source files.
Added GertHerbApplication.java to .\/spikes\ repository source files.
Added GertHerbAuthenticationActivity.java to .\/spikes\ repository source files.
Added TypefaceFactory.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added ViewServer.java to .\/spikes\ repository source files.
Added ViewServerManager.java to .\/spikes\ repository source files.
Added DeveloperError.java to .\/spikes\ repository source files.
Added HomeActivity.java to .\/spikes\ repository source files.
Added LoginActivity.java to .\/spikes\ repository source files.
Added LoginView.java to .\/spikes\ repository source files.
Added UserCredentials.java to .\/spikes\ repository source files.
Added FontButton.java to .\/spikes\ repository source files.
Added FontEditText.java to .\/spikes\ repository source files.
Added FontTextView.java to .\/spikes\ repository source files.
Added GithubApi.java to .\/spikes\ repository source files.
Added GithubApiFactory.java to .\/spikes\ repository source files.
Added TokenRequest.java to .\/spikes\ repository source files.
Added TokenResponse.java to .\/spikes\ repository source files.
Added Dummy.java to .\/spikes\ repository source files.
Added DummyTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MainFragment.java to .\/spikes\ repository source files.
Added Attributes.java to .\/spikes\ repository source files.
Added Coordinates.java to .\/spikes\ repository source files.
Added IndicatorCoordinatesCalculator.java to .\/spikes\ repository source files.
Added LandingStrip.java to .\/spikes\ repository source files.
Added MutableCoordinates.java to .\/spikes\ repository source files.
Added OnPagerAdapterChangedListener.java to .\/spikes\ repository source files.
Added PagerAdapterObserver.java to .\/spikes\ repository source files.
Added Scrollable.java to .\/spikes\ repository source files.
Added ScrollingPageChangeListener.java to .\/spikes\ repository source files.
Added State.java to .\/spikes\ repository source files.
Added TabsContainer.java to .\/spikes\ repository source files.
Added CustomLandingStrip.java to .\/spikes\ repository source files.
Added CustomTabActivity.java to .\/spikes\ repository source files.
Added ExampleRainbowLandingStrip.java to .\/spikes\ repository source files.
Added FixedWidthTabActivity.java to .\/spikes\ repository source files.
Added NoFragmentsSimpleTextTabActivity.java to .\/spikes\ repository source files.
Added Data.java to .\/spikes\ repository source files.
Added DemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added SmallDemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerFragment.java to .\/spikes\ repository source files.
Added DemoViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapterState.java to .\/spikes\ repository source files.
Added SimpleTextTabActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AbTestingParamsLoadedCallback.java to .\/spikes\ repository source files.
Added AyBe.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added WeakStartCallback.java to .\/spikes\ repository source files.
Added LeakActivity.java to .\/spikes\ repository source files.
Added NoLeakActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added Bar.java to .\/spikes\ repository source files.
Added Foo.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added FooTest.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added ColorScheme.java to .\/spikes\ repository source files.
Added ColorUtils.java to .\/spikes\ repository source files.
Added DominantColorCalculator.java to .\/spikes\ repository source files.
Added FloatUtils.java to .\/spikes\ repository source files.
Added MedianCutQuantizer.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added PayPalFragment.java to .\/spikes\ repository source files.
Added PayPalHelper.java to .\/spikes\ repository source files.
Added MaxLengthMessageComposer.java to .\/spikes\ repository source files.
Added MessageComposer.java to .\/spikes\ repository source files.
Added TwitterMessageComposer.java to .\/spikes\ repository source files.
Added DisabledMruPersister.java to .\/spikes\ repository source files.
Added MruPersister.java to .\/spikes\ repository source files.
Added SharedPreferencesMruPersister.java to .\/spikes\ repository source files.
Added OnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added PriorityShareDialog.java to .\/spikes\ repository source files.
Added PrioritySharer.java to .\/spikes\ repository source files.
Added ShareTargetsAdapter.java to .\/spikes\ repository source files.
Added SimpleOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added TargetApps.java to .\/spikes\ repository source files.
Added TwitterOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AdvancedActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SimpleActivity.java to .\/spikes\ repository source files.
Added LockingActivity.java to .\/spikes\ repository source files.
Added PostLockingActivity.java to .\/spikes\ repository source files.
Added PreLockingActivity.java to .\/spikes\ repository source files.
Added DummyAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added NovoStaggeredGridView.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SpikeApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SwipeableView.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MyClass.java to .\/spikes\ repository source files.
Added MyClassTest.java to .\/spikes\ repository source files.
Added MyAndroidClassTest.java to .\/spikes\ repository source files.
Added RobolectricGradleTestRunner.java to .\/spikes\ repository source files.
Added Mapper.java to .\/spikes\ repository source files.
Added Query.java to .\/spikes\ repository source files.
Added TypedResolver.java to .\/spikes\ repository source files.
Added CursorList.java to .\/spikes\ repository source files.
Added CursorListIterator.java to .\/spikes\ repository source files.
Added CursorMarshaller.java to .\/spikes\ repository source files.
Added EmptyListIterator.java to .\/spikes\ repository source files.
Added ReflectionCursorMarshaller.java to .\/spikes\ repository source files.
Added RichClass.java to .\/spikes\ repository source files.
Added Setter.java to .\/spikes\ repository source files.
Added Function.java to .\/spikes\ repository source files.
Added TypedElementLoader.java to .\/spikes\ repository source files.
Added TypedLoader.java to .\/spikes\ repository source files.
Added Marshaller.java to .\/spikes\ repository source files.
Added ObjectMapper.java to .\/spikes\ repository source files.
Added TypedActivity.java to .\/spikes\ repository source files.
Added StringUtil.java to .\/spikes\ repository source files.
Added MyObject.java to .\/spikes\ repository source files.
Added MediaPlayerSwitcherActivity.java to .\/spikes\ repository source files.
Added VideoPlayerService.java to .\/spikes\ repository source files.
Added RelativeLayoutWithForeground.java to .\/spikes\ repository source files.
Added DemoActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added RecognitionService.java to .\/spikes\ repository source files.
Added SessionService.java to .\/spikes\ repository source files.
Added SettingsActivity.java to .\/spikes\ repository source files.
Added SmartContextInteractionService.java to .\/spikes\ repository source files.
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
final DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close) {

            @Override
            public void onDrawerClosed(View drawerView) {
                super.onDrawerClosed(drawerView);
                // waiting for the drawer to close, then navigating seems to cause issue.
                // why wait for the drawer to close? jankiness.
                if (pendingNavigationClick != null) {
                    startActivity(pendingNavigationClick);
                    pendingNavigationClick = null;
                }
            }

        };
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close);
Intent intent;
b=getIntent().getExtras()
Bundle b = getIntent().getExtras();
mShouldStartPlayback=b.getBoolean("shouldStart")
boolean mShouldStartPlayback = b.getBoolean("shouldStart");
startPosition=b.getInt("startPosition",0)
int startPosition = b.getInt("startPosition", 0);
currentPos=mVideoView.getCurrentPosition()
int currentPos = mVideoView.getCurrentPosition();
String msg;
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, mDisplaySize.y + getActionBar().getHeight());
mm=mSelectedMedia.getMetadata()
MediaMetadata mm = mSelectedMedia.getMetadata();
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, (int) (mDisplaySize.x * ASPECT_RATIO));
WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
width=display.getWidth()
int width = display.getWidth();
height=display.getHeight()
int height = display.getHeight();
int resourceId = 0;
String videoUrl = "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4#sthash.rJ5rPZy8.dpuf";
String title = "Jahre Philharmonie";
String description = "Awesome film you must watch!";
String author = "Blundell";
String thumbUrl = "http://www.ustream.tv/blog/wp-content/uploads/2013/10/simply-go-live.png";
MediaMetadata metadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE);
mediaInfo=new MediaInfo.Builder(videoUrl).setMetadata(metadata).setStreamType(MediaInfo.STREAM_TYPE_BUFFERED).setContentType("video/mp4").build()
MediaInfo mediaInfo = new MediaInfo.Builder(videoUrl)
                        .setMetadata(metadata)
                        .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)
                        .setContentType("video/mp4")
                        .build();
Intent intent = new Intent(MainActivity.this, LocalPlayerActivity.class);
preferences=getPreferences(MODE_PRIVATE)
SharedPreferences preferences = getPreferences(MODE_PRIVATE);
defaultSmsPackage=Telephony.Sms.getDefaultSmsPackage(this)
String defaultSmsPackage = Telephony.Sms.getDefaultSmsPackage(this);
Intent intent = new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
availableAppProvider=EasyCustomTabs.getInstance()
AvailableAppProvider availableAppProvider = EasyCustomTabs.getInstance();
ConnectedClient connectedClient = new ConnectedClient(client);
binder=Binder.newInstance()
Binder binder = Binder.newInstance();
List<Composer> composerList = new ArrayList<>();
customTabsSession=connection.newSession()
CustomTabsSession customTabsSession = connection.newSession();
CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(customTabsSession);
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
context=EasyCustomTabs.getInstance().getContext()
Context context = EasyCustomTabs.getInstance().getContext();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
packagesSupportingCustomTabs=getPackagesSupportingCustomTabs()
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
defaultPackage=getDefaultPackage()
String defaultPackage = getDefaultPackage();
defaultActivityInfo=packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK,0)
ResolveInfo defaultActivityInfo = packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK, 0);
String packageName = defaultActivityInfo.activityInfo.packageName;
resolvedInfoList=packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK,0)
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<String> packagesSupportingCustomTabs = new ArrayList<>();
Intent serviceIntent = new Intent();
bestPackageFinder=BestPackageFinder.newInstance()
BestPackageFinder bestPackageFinder = BestPackageFinder.newInstance();
packageName=bestPackageFinder.findBestPackage()
String packageName = bestPackageFinder.findBestPackage();
resolveInfo=createResolveInfoFor(packageName)
ResolveInfo resolveInfo = createResolveInfoFor(packageName);
ResolveInfo resolveInfo = new ResolveInfo();
List<ResolveInfo> resolveInfoList = new ArrayList<>();
defaultPackageResolveInfo=createResolveInfoFor(packageName)
ResolveInfo defaultPackageResolveInfo = createResolveInfoFor(packageName);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
oldestApiMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage oldestApiMessage = apiMessages.get(apiMessages.size() - 1);
String lastResponseEpochTime = oldestApiMessage.timeStamp;
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
latestMessage=latestMessages.get(latestMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage latestMessage = latestMessages.get(latestMessages.size() - 1);
latestMessageDateTime=convertToLocalDateTime(latestMessage.timeStamp)
LocalDateTime latestMessageDateTime = convertToLocalDateTime(latestMessage.timeStamp);
List<ChannelHistory.Message> messages = new ArrayList<>();
historyFrom=getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1))
LocalDateTime historyFrom = getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1));
historyTo=getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0))
LocalDateTime historyTo = getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0));
String text = apiMessage.text;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
lastMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage lastMessage = apiMessages.get(apiMessages.size() - 1);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
firstMessage=apiMessages.get(0)
ApiPagedChannelHistory.ApiMessage firstMessage = apiMessages.get(0);
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
String slackToken = args[0];
retrofit=new Retrofit.Builder().baseUrl("https://slack.com/api/").addConverterFactory(GsonConverterFactory.create()).build()
Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://slack.com/api/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();
slackWebService=retrofit.create(SlackWebService.class)
SlackWebService slackWebService = retrofit.create(SlackWebService.class);
slackHistoryFetcher=SlackHistoryFetcher.from(slackWebService,slackToken)
SlackHistoryFetcher slackHistoryFetcher = SlackHistoryFetcher.from(slackWebService, slackToken);
start=LocalDateTime.now()
LocalDateTime start = LocalDateTime.now();
end=LocalDateTime.now().minusDays(7)
LocalDateTime end = LocalDateTime.now().minusDays(7);
channelHistory=slackHistoryFetcher.getChannelHistory(start,end)
ChannelHistory channelHistory = slackHistoryFetcher.getChannelHistory(start, end);
HistoryConverter historyConverter = new HistoryConverter();
ApiPagedResponse apiPagedResponse = new ApiPagedResponse(start);
response=fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime())
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
apiPagedChannelHistory=response.body()
ApiPagedChannelHistory apiPagedChannelHistory = response.body();
channelHistory=slackWebService.getChannelHistory(slackToken,channel,lastResponseEpochTime,NUMBER_OF_RESULTS)
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
ApiPagedChannelHistory apiPagedChannelHistory = new ApiPagedChannelHistory();
ApiPagedChannelHistory.ApiMessage apiMessage = new ApiPagedChannelHistory.ApiMessage();
final TextView textView = new TextView(context);
emptyView=findViewById(R.id.empty_view)
View emptyView = findViewById(R.id.empty_view);
final Integer action = values[0];
LoremAdapter loremAdapter = new LoremAdapter();
accounts=accountManager.getAccountsByType(accountType)
Account[] accounts = accountManager.getAccountsByType(accountType);
Bundle result;
Bundle result;
Bundle result = new Bundle();
activity=createLoginIntent(context,accountType,authTokenType,requiredFeatures,options)
Intent activity = createLoginIntent(context, accountType, authTokenType, requiredFeatures, options);
Bundle bundle = new Bundle();
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
accounts=accountManager.getAccountsByType(authTokenType)
Account[] accounts = accountManager.getAccountsByType(authTokenType);
bundle=createResponseBundle(token)
Bundle bundle = createResponseBundle(token);
accountManager=AccountManager.get(this.getApplicationContext())
AccountManager accountManager = AccountManager.get(this.getApplicationContext());
Account account = new Account(token.getUserName(), getAccountName());
Bundle bundle = new Bundle();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
GertHerbAuthenticator authenticator = new GertHerbAuthenticator(this);
fontId=getFontId(context,attrs)
int fontId = getFontId(context, attrs);
fontType=getFontType(fontId)
FontType fontType = getFontType(fontId);
typedArray=context.obtainStyledAttributes(attrs,R.styleable.CustomTextAppearance)
TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CustomTextAppearance);
typeface=createTypeFace(context,fontType)
Typeface typeface = createTypeFace(context, fontType);
info=context.getApplicationInfo()
ApplicationInfo info = context.getApplicationInfo();
name=activity.getTitle().toString()
String name = activity.getTitle().toString();
client=mServer.accept()
Socket client = mServer.accept();
boolean result;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
BufferedReader in = null;
request=in.readLine()
final String request = in.readLine();
String command;
String parameters;
index=request.indexOf(' ')
int index = request.indexOf(' ');
boolean result;
boolean success = true;
BufferedWriter out = null;
index=parameters.indexOf(' ')
int index = parameters.indexOf(' ');
code=parameters.substring(0,index)
final String code = parameters.substring(0, index);
int hashCode = (int) Long.parseLong(code, 16);
window=findWindow(hashCode)
final View window = findWindow(hashCode);
dispatch=ViewDebug.class.getDeclaredMethod("dispatchCommand",View.class,String.class,String.class,OutputStream.class)
final Method dispatch = ViewDebug.class.getDeclaredMethod("dispatchCommand",
                        View.class, String.class, String.class, OutputStream.class);
View window = null;
boolean result = true;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
boolean result = true;
String focusName = null;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
View focusedWindow = null;
BufferedWriter out = null;
boolean needWindowListUpdate = false;
boolean needFocusedWindowUpdate = false;
BetterAccountManager accountManager = new BetterAccountManager(this, getString(R.string.account_type), getString(R.string.token_type), null);
loginView=Views.findById(this,R.id.login_view)
LoginView loginView = Views.findById(this, R.id.login_view);
authorizationApi=new GithubApiFactory().createAuthorizationApi(credentials.username,credentials.password)
GithubApi authorizationApi = new GithubApiFactory().createAuthorizationApi(credentials.username, credentials.password);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
Endpoint endpoint = new Endpoint() {
            @Override
            public String getUrl() {
                return GITHUB_API_URL;
            }

            @Override
            public String getName() {
                return "Live";
            }
        };
interceptor=createAuthorizationRequestInterceptor(username,password)
RequestInterceptor interceptor = createAuthorizationRequestInterceptor(username, password);
restAdapter=createRestAdapter(endpoint,interceptor)
RestAdapter restAdapter = createRestAdapter(endpoint, interceptor);
Dummy dummy = new Dummy();
result=dummy.explodes()
boolean result = dummy.explodes();
String base64EncodedPublicKey = "CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE";
premiumPurchase=inventory.getPurchase(SKU_PREMIUM)
Purchase premiumPurchase = inventory.getPurchase(SKU_PREMIUM);
infiniteGasPurchase=inventory.getPurchase(SKU_INFINITE_GAS)
Purchase infiniteGasPurchase = inventory.getPurchase(SKU_INFINITE_GAS);
gasPurchase=inventory.getPurchase(SKU_GAS)
Purchase gasPurchase = inventory.getPurchase(SKU_GAS);
String payload = "";
String payload = "";
String payload = "";
payload=p.getDeveloperPayload()
String payload = p.getDeveloperPayload();
int index = mTank >= TANK_RES_IDS.length ? TANK_RES_IDS.length - 1 : mTank;
AlertDialog.Builder bld = new AlertDialog.Builder(this);
spe=getPreferences(MODE_PRIVATE).edit()
SharedPreferences.Editor spe = getPreferences(MODE_PRIVATE).edit();
sp=getPreferences(MODE_PRIVATE)
SharedPreferences sp = getPreferences(MODE_PRIVATE);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                                  + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                    | ((source[d + 1 + off] << 24) >>> 16)
                    | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                    | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                                   "-1002:Bad response received/" +
                                   "-1003:Purchase signature verification failed/" +
                                   "-1004:Send intent failed/" +
                                   "-1005:User cancelled/" +
                                   "-1006:Unknown purchase response/" +
                                   "-1007:Missing token/" +
                                   "-1008:Unknown error/" +
                                   "-1009:Subscriptions not available/" +
                                   "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(),
                    itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                        | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                        | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                            | ((source[d + 1 + off] << 24) >>> 16)
                            | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                            | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                "-1002:Bad response received/" +
                "-1003:Purchase signature verification failed/" +
                "-1004:Send intent failed/" +
                "-1005:User cancelled/" +
                "-1006:Unknown purchase response/" +
                "-1007:Missing token/" +
                "-1008:Unknown error/" +
                "-1009:Subscriptions not available/" +
                "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(), itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
responseCode=result.getResponse()
int responseCode = result.getResponse();
sku=purchase.getSku()
String sku = purchase.getSku();
skuDetails=inv.getSkuDetails(sku)
SkuDetails skuDetails = inv.getSkuDetails(sku);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
Button purchaseFiveButton = (Button) rootView.findViewById(R.id.fragment_main_button_purchase_five_coins);
xml=context.obtainStyledAttributes(attrs,R.styleable.LandingStrip)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.LandingStrip);
tabLayoutId=xml.getResourceId(R.styleable.LandingStrip_tabLayoutId,MISSING_TAB_LAYOUT_ID)
int tabLayoutId = xml.getResourceId(R.styleable.LandingStrip_tabLayoutId, MISSING_TAB_LAYOUT_ID);
indicatorColour=xml.getResourceId(R.styleable.LandingStrip_indicatorColor,DEFAULT_INDICATOR_COLOUR)
int indicatorColour = xml.getResourceId(R.styleable.LandingStrip_indicatorColor, DEFAULT_INDICATOR_COLOUR);
indicatorHeight=getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight,DEFAULT_INDICATOR_HEIGHT,xml)
int indicatorHeight = getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight, DEFAULT_INDICATOR_HEIGHT, xml);
tabsPaddingLeft=getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingLeft = getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding, DEFAULT_TABS_PADDING, xml);
tabsPaddingRight=getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingRight = getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding, DEFAULT_TABS_PADDING, xml);
MutableCoordinates drawCurrentTabCoordinates = new MutableCoordinates();
MutableCoordinates drawNextTabCoordinates = new MutableCoordinates();
MutableCoordinates drawMovingIndicatorCoordinates = new MutableCoordinates();
currentTab=tabsContainer.getTabAt(currentPosition)
View currentTab = tabsContainer.getTabAt(currentPosition);
currentTabStart=currentTab.getLeft()
float currentTabStart = currentTab.getLeft();
currentTabEnd=currentTab.getRight()
float currentTabEnd = currentTab.getRight();
nextTab=tabsContainer.getTabAt(currentPosition + 1)
View nextTab = tabsContainer.getTabAt(currentPosition + 1);
nextTabPositionOffset=getFractionFrom(pagePositionOffset)
float nextTabPositionOffset = getFractionFrom(pagePositionOffset);
indicatorStart=getIndicatorPosition(nextTab.getStart(),pagePositionOffset,currentTab.getStart(),nextTabPositionOffset)
float indicatorStart = getIndicatorPosition(nextTab.getStart(), pagePositionOffset, currentTab.getStart(), nextTabPositionOffset);
indicatorEnd=getIndicatorPosition(nextTab.getEnd(),pagePositionOffset,currentTab.getEnd(),nextTabPositionOffset)
float indicatorEnd = getIndicatorPosition(nextTab.getEnd(), pagePositionOffset, currentTab.getEnd(), nextTabPositionOffset);
height=getHeight()
int height = getHeight();
tabCount=pagerAdapter.getCount()
int tabCount = pagerAdapter.getCount();
title=pagerAdapter.getPageTitle(position)
CharSequence title = pagerAdapter.getPageTitle(position);
inflatedTabView=tabsContainer.inflateTab(layoutInflater,attributes.getTabLayoutId())
View inflatedTabView = tabsContainer.inflateTab(layoutInflater, attributes.getTabLayoutId());
int position = (int) view.getTag(TAG_KEY_POSITION);
scrollOffset=getHorizontalScrollOffset(position,positionOffset)
int scrollOffset = getHorizontalScrollOffset(position, positionOffset);
newScrollX=calculateScrollOffset(position,scrollOffset,positionOffset)
float newScrollX = calculateScrollOffset(position, scrollOffset, positionOffset);
tabWidth=tabsContainer.getTabAt(position).getWidth()
int tabWidth = tabsContainer.getTabAt(position).getWidth();
tabForPosition=tabsContainer.getTabAt(position)
View tabForPosition = tabsContainer.getTabAt(position);
float tabStartX = tabForPosition.getLeft() + scrollOffset;
int viewMiddleOffset = getTabParentWidth() / 2;
float tabCenterOffset = (tabForPosition.getRight() - tabForPosition.getLeft()) * 0.5F;
nextTabDelta=getNextTabDelta(position,pagerOffset,tabForPosition)
float nextTabDelta = getNextTabDelta(position, pagerOffset, tabForPosition);
LinearLayout tabsContainerView = new LinearLayout(context);
tab=getTabAt(index)
View tab = getTabAt(index);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
position=indicatorCoordinates.getStart()
float position = indicatorCoordinates.getStart();
lastTabOffset=((ViewGroup)getChildAt(0)).getChildAt(getChildCount() - 1).getWidth()
float lastTabOffset = ((ViewGroup) getChildAt(0)).getChildAt(getChildCount() - 1).getWidth();
frequency=getOneCycle(lastTabOffset)
float frequency = getOneCycle(lastTabOffset);
r=toHex(calculateColour(position,frequency,PHASE_RED,AMPLITUDE,CENTER_FREQUENCY))
String r = toHex(calculateColour(position, frequency, PHASE_RED, AMPLITUDE, CENTER_FREQUENCY));
g=toHex(calculateColour(position,frequency,PHASE_GREEN,AMPLITUDE,CENTER_FREQUENCY))
String g = toHex(calculateColour(position, frequency, PHASE_GREEN, AMPLITUDE, CENTER_FREQUENCY));
b=toHex(calculateColour(position,frequency,PHASE_BLUE,AMPLITUDE,CENTER_FREQUENCY))
String b = toHex(calculateColour(position, frequency, PHASE_BLUE, AMPLITUDE, CENTER_FREQUENCY));
height=getHeight()
int height = getHeight();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPagerFragment viewPagerFragment = new ViewPagerFragment();
Bundle bundle = new Bundle();
TextView view = (TextView) layoutInflater.inflate(R.layout.view_demo, container, false);
currentPosition=viewPagerAdapterState.getCurrentPosition()
int currentPosition = viewPagerAdapterState.getCurrentPosition();
view=getView(container,position)
View view = getView(container, position);
parcelableSparseArray=viewPagerAdapterState.get(position)
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
View view = (View) object;
SparseArray<Parcelable> viewState = new SparseArray<>();
position=entry.getValue()
int position = entry.getValue();
view=entry.getKey()
View view = entry.getKey();
bundle=in.readBundle()
Bundle bundle = in.readBundle();
Map<Integer, SparseArray<Parcelable>> viewStates = new HashMap<>(bundle.keySet().size());
sparseParcelableArray=bundle.getSparseParcelableArray(key)
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
primaryItemPosition=in.readInt()
int primaryItemPosition = in.readInt();
Bundle bundle = new Bundle();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
final TextView abText = (TextView) findViewById(R.id.ab_text);
final AyBe ayBe = new AyBe();
id=item.getItemId()
int id = item.getItemId();
callback=weakCallback.get()
AbTestingParamsLoadedCallback callback = weakCallback.get();
WeakReference<NoLeakActivity> weakNoLeakActivity = new WeakReference<NoLeakActivity>(noLeakActivity);
noLeakActivity=weakNoLeakActivity.get()
NoLeakActivity noLeakActivity = weakNoLeakActivity.get();
RecyclerView recyclerView = (RecyclerView) layoutInflater.inflate(R.layout.view_page, viewGroup, false);
itemView=layoutInflater.inflate(R.layout.view_item,parent,false)
View itemView = layoutInflater.inflate(R.layout.view_item, parent, false);
actual=foo.twice(HALF)
int actual = foo.twice(HALF);
int expected = WHOLE;
final float inverseRatio = 1f - ratio;
float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRatio);
float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRatio);
float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRatio);
hsv=node.getHsv()
float[] hsv = node.getHsv();
width=bitmap.getWidth()
final int width = bitmap.getWidth();
height=bitmap.getHeight()
final int height = bitmap.getHeight();
final int[] rgbPixels = new int[width * height];
final MedianCutQuantizer mcq = new MedianCutQuantizer(rgbPixels, NUM_COLORS);
primaryAccentColor=findPrimaryAccentColor()
final ColorNode primaryAccentColor = findPrimaryAccentColor();
secondaryAccentColor=findSecondaryAccentColor(primaryAccentColor)
final ColorNode secondaryAccentColor = findSecondaryAccentColor(primaryAccentColor);
tertiaryAccentColor=findTertiaryAccentColor(primaryAccentColor,secondaryAccentColor)
final int tertiaryAccentColor = findTertiaryAccentColor(
                primaryAccentColor, secondaryAccentColor);
primaryTextColor=findPrimaryTextColor(primaryAccentColor)
final int primaryTextColor = findPrimaryTextColor(primaryAccentColor);
secondaryTextColor=findSecondaryTextColor(primaryAccentColor)
final int secondaryTextColor = findSecondaryTextColor(primaryAccentColor);
final float primaryHue = primary.getHsv()[0];
final float candidateHue = candidate.getHsv()[0];
copy=Arrays.copyOf(palette,palette.length)
final MedianCutQuantizer.ColorNode[] copy = Arrays.copyOf(palette, palette.length);
maxCount=palette[0].getCount()
final float maxCount = palette[0].getCount();
lhsWeight=calculateWeight(lhs,maxCount)
final float lhsWeight = calculateWeight(lhs, maxCount);
rhsWeight=calculateWeight(rhs,maxCount)
final float rhsWeight = calculateWeight(rhs, maxCount);
float sum = 0;
float sumWeight = 0;
float value = values[i];
float weight = values[i + 1];
ColorHistogram colorHist = new ColorHistogram(pixels);
K=colorHist.getNumberOfColors()
int K = colorHist.getNumberOfColors();
ColorNode[] rCols = null;
rgb=colorHist.getColor(i)
int rgb = colorHist.getColor(i);
cnt=colorHist.getCount(i)
int cnt = colorHist.getCount(i);
ColorBox initialBox = new ColorBox(0, K - 1, 0);
List<ColorBox> colorSet = new ArrayList<ColorBox>();
int k = 1;
boolean done = false;
nextBox=findBoxToSplit(colorSet)
ColorBox nextBox = findBoxToSplit(colorSet);
newBox=nextBox.splitBox()
ColorBox newBox = nextBox.splitBox();
color=findClosestColor(pixels[i])
ColorNode color = findClosestColor(pixels[i]);
idx=findClosestColorIndex(rgb)
int idx = findClosestColorIndex(rgb);
red=Color.red(rgb)
int red = Color.red(rgb);
grn=Color.green(rgb)
int grn = Color.green(rgb);
blu=Color.blue(rgb)
int blu = Color.blue(rgb);
int minIdx = 0;
int minDistance = Integer.MAX_VALUE;
ColorNode color = quantColors[i];
d2=color.distance2(red,grn,blu)
int d2 = color.distance2(red, grn, blu);
ColorBox boxToSplit = null;
int minLevel = Integer.MAX_VALUE;
n=colorBoxes.size()
int n = colorBoxes.size();
ColorNode[] avgColors = new ColorNode[n];
int i = 0;
int dr = this.red - red;
int dg = this.grn - grn;
int db = this.blu - blu;
ColorNode color = imageColors[i];
int r = color.red;
int g = color.grn;
int b = color.blu;
dim=getLongestColorDimension()
ColorDimension dim = getLongestColorDimension();
med=findMedian(dim)
int med = findMedian(dim);
int nextLevel = level + 1;
ColorBox newBox = new ColorBox(med + 1, upper, nextLevel);
int rLength = rmax - rmin;
int gLength = gmax - gmin;
int bLength = bmax - bmin;
int half = count / 2;
int nPixels, median;
int rSum = 0;
int gSum = 0;
int bSum = 0;
int n = 0;
ColorNode ci = imageColors[i];
int cnt = ci.cnt;
double nd = n;
int avgRed = (int) (0.5 + rSum / nd);
int avgGrn = (int) (0.5 + gSum / nd);
int avgBlu = (int) (0.5 + bSum / nd);
s=this.getClass().getSimpleName()
String s = this.getClass().getSimpleName();
int i = 0;
int N = pixelsOrig.length;
int[] pixelsCpy = new int[N];
int k = -1;
int curColor = -1;
int nColors = k + 1;
id=item.getItemId()
int id = item.getItemId();
Intent intent = new Intent();
bitmap=((BitmapDrawable)imageView.getDrawable()).getBitmap()
Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap();
DominantColorCalculator dominantColorCalculator = new DominantColorCalculator(bitmap);
selectedImageUri=data.getData()
Uri selectedImageUri = data.getData();
selectedImagePath=getPath(selectedImageUri)
String selectedImagePath = getPath(selectedImageUri);
String[] projection = {MediaStore.Images.Media.DATA};
cursor=managedQuery(uri,projection,null,null,null)
Cursor cursor = managedQuery(uri, projection, null, null, null);
column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)
int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
LinearLayout rootView = (LinearLayout) inflater.inflate(R.layout.fragment_main, container, false);
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
preapprovalButton=payPal.getCheckoutButton(getActivity(),PayPal.BUTTON_194x37,CheckoutButton.TEXT_PAY)
CheckoutButton preapprovalButton = payPal.getCheckoutButton(getActivity(), PayPal.BUTTON_194x37, CheckoutButton.TEXT_PAY);
preapprovalIntent=payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY)
Intent preapprovalIntent = payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY);
String resultTitle = "";
String resultInfo = "";
String resultExtra = "";
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
PayPalPreapproval preapproval = new PayPalPreapproval();
preapproval=createPreapproval(preapprovalKey)
PayPalPreapproval preapproval = createPreapproval(preapprovalKey);
Bundle bundle = new Bundle();
int availableLength = maxLength;
StringBuilder stringBuilder = new StringBuilder(maxLength);
prefixAndSuffixLength=computeAppendedLengthIncludingSeparatorSpaces(prefix,suffix)
int prefixAndSuffixLength = computeAppendedLengthIncludingSeparatorSpaces(prefix, suffix);
urlLength=computeUrlLengthIncludingSeparatorSpace(url)
int urlLength = computeUrlLengthIncludingSeparatorSpace(url);
trimmedSubject=ellipsizeTextIfExceedsMaxLength(subject,availableLength)
String trimmedSubject = ellipsizeTextIfExceedsMaxLength(subject, availableLength);
int length = 0;
preferences=context.getSharedPreferences(MRU_PREFERENCES,Context.MODE_PRIVATE)
SharedPreferences preferences = context.getSharedPreferences(MRU_PREFERENCES, Context.MODE_PRIVATE);
args=getArguments()
Bundle args = getArguments();
themeResId=getThemeResIdIfProvidedIn(args)
int themeResId = getThemeResIdIfProvidedIn(args);
title=getTitleIfProvidedIn(args)
CharSequence title = getTitleIfProvidedIn(args);
builder=createDialogBuilder(themeResId).setCancelable(true).setView(dialogView)
AlertDialog.Builder builder = createDialogBuilder(themeResId)
                .setCancelable(true)
                .setView(dialogView);
inflater=getActivity().getLayoutInflater()
LayoutInflater inflater = getActivity().getLayoutInflater();
GridView gridView = (GridView) rootView.findViewById(R.id.ps__dialog_grid);
targetApps=extractTargetAppsFrom(args)
TargetApps targetApps = extractTargetAppsFrom(args);
allShareTargets=getAvailableShareTargets(sharingIntent)
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
priorityAppInfos=createPriorityResolveInfoList(targetApps,allShareTargets)
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
otherAppInfos=createOtherAppsResolveInfoList(priorityAppInfos,allShareTargets)
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
resolveInfos=targetApps.extractTargetResolveInfosFrom(allShareTargets)
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
mruResolveInfo=findMruResolveInfoIn(allShareTargets)
ResolveInfo mruResolveInfo = findMruResolveInfoIn(allShareTargets);
List<ResolveInfo> otherAppsInfos = new ArrayList<ResolveInfo>(allAppInfos);
mruPackageName=persister.getLastUsedTarget()
String mruPackageName = persister.getLastUsedTarget();
String packageName = resolveInfo.activityInfo.packageName;
packageManager=getActivity().getPackageManager()
PackageManager packageManager = getActivity().getPackageManager();
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
View buttonStrip = (View) showMoreButton.getParent();
gridView=getGridView()
GridView gridView = getGridView();
intent=wrapIntentWithExplicitTargetComponentForItem(position,sharingIntent)
Intent intent = wrapIntentWithExplicitTargetComponentForItem(position, sharingIntent);
Intent intent = new Intent(sharingIntent);
ActivityInfo activity = adapter.getItem(position).activityInfo;
ComponentName name = new ComponentName(activity.applicationInfo.packageName, activity.name);
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
PriorityShareDialog dialog = new PriorityShareDialog();
Bundle args = new Bundle();
sharingIntent=createSharingIntent()
Intent sharingIntent = createSharingIntent();
fragmentManager=activity.getFragmentManager()
FragmentManager fragmentManager = activity.getFragmentManager();
Intent intent = new Intent(Intent.ACTION_SEND);
dialog=new PriorityShareDialog.Builder().setTitle(title).setTargetApps(targetApps).setSharingIntent(sharingIntent).setOnPrepareSharingIntentListener(listener).setShowMostRecentlyUsed(showMostRecentlyUsed).build()
PriorityShareDialog dialog = new PriorityShareDialog.Builder()
                .setTitle(title)
                .setTargetApps(targetApps)
                .setSharingIntent(sharingIntent)
                .setOnPrepareSharingIntentListener(listener)
                .setShowMostRecentlyUsed(showMostRecentlyUsed)
                .build();
PrioritySharer prioritySharer = new PrioritySharer();
prioritySharer=build()
PrioritySharer prioritySharer = build();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
layoutInflater=LayoutInflater.from(context)
LayoutInflater layoutInflater = LayoutInflater.from(context);
iconSizePx=getIconSizePx(context.getResources())
int iconSizePx = getIconSizePx(context.getResources());
ArrayList<ResolveInfo> sortedList = new ArrayList<ResolveInfo>(resolveInfoList);
int otherAppsCountMaybe = showAllApps ? otherAppInfos.size() : 0;
firstOtherAppsItemPosition=priorityAppInfos.size()
int firstOtherAppsItemPosition = priorityAppInfos.size();
int offsetPosition = position - firstOtherAppsItemPosition;
TextView textView;
textView=initializeItemViewIfNecessary(convertView,R.layout.ps__grid_item_share,parent)
TextView textView = initializeItemViewIfNecessary(convertView, R.layout.ps__grid_item_share, parent);
info=getItem(position)
ResolveInfo info = getItem(position);
icon=info.loadIcon(packageManager)
Drawable icon = info.loadIcon(packageManager);
arraySize=in.readInt()
int arraySize = in.readInt();
String[] packageNames = new String[arraySize];
arraySize=targetPackages.size()
int arraySize = targetPackages.size();
String[] packagesArray = new String[arraySize];
SparseArray<ResolveInfo> matchedResolveInfos = new SparseArray<ResolveInfo>(targetPackages.size());
String packageName = info.activityInfo.packageName;
index=indexOfItemInto(packageName,targetPackages)
int index = indexOfItemInto(packageName, targetPackages);
sparseArraySize=sparseArray.size()
int sparseArraySize = sparseArray.size();
ArrayList<T> list = new ArrayList<T>(sparseArraySize);
int i = 0;
originalSubject=intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT)
CharSequence originalSubject = intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT);
String subject = originalSubject != null ? originalSubject.toString() : null;
composer=createComposer()
MessageComposer composer = createComposer();
component=intent.getComponent()
ComponentName component = intent.getComponent();
targetPackageName=component.getPackageName()
String targetPackageName = component.getPackageName();
adapter=ArrayAdapter.createFromResource(this,R.array.target_apps,android.R.layout.simple_spinner_item)
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
EditText text = (EditText) findViewById(R.id.text);
EditText title = (EditText) findViewById(R.id.title);
EditText mimeType = (EditText) findViewById(R.id.mime_type);
EditText dataUri = (EditText) findViewById(R.id.data_uri);
Switch showMostRecentlyUsed = (Switch) findViewById(R.id.show_most_recently_used);
uriString=dataUri.getText().toString()
String uriString = dataUri.getText().toString();
EditText text = (EditText) findViewById(R.id.text);
TextView textView = (TextView) convertView.findViewById(R.id.positionView);
colorView=convertView.findViewById(R.id.colorView)
View colorView = convertView.findViewById(R.id.colorView);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
offset=headerPlaceholder.getTop()
int offset = headerPlaceholder.getTop();
Integer item = COLORS[position];
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
firstVisiblePosition=grid.getFirstVisiblePosition()
int firstVisiblePosition = grid.getFirstVisiblePosition();
inflate=getViewForPosition(container,position)
View inflate = getViewForPosition(container, position);
id=item.getItemId()
int id = item.getItemId();
MyActivity activity = new MyActivity();
String manifestProperty = "../app/src/main/AndroidManifest.xml";
String resProperty = "../app/src/main/res";
cursor=resolver.query(uri,projection,selection,selectionArgs,null)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, null);
cursor=resolver.query(uri,projection,selection,selectionArgs,sortOrder)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, sortOrder);
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=richClass.setter(name)
Method setter = richClass.setter(name);
T obj;
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=methodsByName.get(name)
Method setter = methodsByName.get(name);
int type = TYPE_INT;
Class<?> t = setter.getParameterTypes()[0];
Class<?> t = setter.getParameterTypes()[0];
cursorType=cursor.getType(index)
final int cursorType = cursor.getType(index);
final Object obj;
s=f.getAnnotation(Mapper.class)
Mapper s = f.getAnnotation(Mapper.class);
mm=m.getAnnotation(Mapper.class)
Mapper mm = m.getAnnotation(Mapper.class);
methodName=StringUtil.asCamelifySetMethod(what)
String methodName = StringUtil.asCamelifySetMethod(what);
cursor=getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,null,null,null,null)
Cursor cursor = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
now=System.currentTimeMillis()
long now = System.currentTimeMillis();
List<Contact2> typedCursor = new CursorList<Contact2>(cursor, Contact2.class);
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[a-zA-Z0-9]+")
Pattern p = Pattern.compile("[a-zA-Z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[A-Z][a-z0-9]+")
Pattern p = Pattern.compile("[A-Z][a-z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
SurfaceView first = (SurfaceView) findViewById(R.id.firstSurface);
SurfaceView second = (SurfaceView) findViewById(R.id.secondSurface);
Intent pickVideo = new Intent(Intent.ACTION_PICK);
xml=context.obtainStyledAttributes(attrs,R.styleable.RelativeLayoutWithForeground)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.RelativeLayoutWithForeground);
int foregroundResId = INVALID_FOREGROUND_ID;
drawable=getDrawable(getResources(),foregroundResId)
Drawable drawable = getDrawable(getResources(), foregroundResId);
Bundle args = new Bundle();
enroll=mHotwordDetector.createEnrollIntent()
Intent enroll = mHotwordDetector.createEnrollIntent();

Diff of ac112617bfdd907c33ff148c9f89a05eda04beac and f5d17332f4329c509a9435d1a45ba39020e645c4:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 6
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision ac112617bfdd907c33ff148c9f89a05eda04beac to f5d17332f4329c509a9435d1a45ba39020e645c4


****Parsing for addition at revision f5d17332f4329c509a9435d1a45ba39020e645c4****

Added ApplicationTest.java to .\/spikes\ repository source files.
Added DrawerActivity.java to .\/spikes\ repository source files.
Added EarthActivity.java to .\/spikes\ repository source files.
Added ProHaxDrawerActivity.java to .\/spikes\ repository source files.
Added SaturnActivity.java to .\/spikes\ repository source files.
Added LocalPlayerActivity.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added CastApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ComposeSmsActivity.java to .\/spikes\ repository source files.
Added HeadlessSmsSendService.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MmsReceiver.java to .\/spikes\ repository source files.
Added SmsReceiver.java to .\/spikes\ repository source files.
Added ExtendedDemoActivity.java to .\/spikes\ repository source files.
Added ExtendedDemoApplication.java to .\/spikes\ repository source files.
Added SimpleDemoActivity.java to .\/spikes\ repository source files.
Added SimpleDemoApplication.java to .\/spikes\ repository source files.
Added Binder.java to .\/spikes\ repository source files.
Added ConnectedClient.java to .\/spikes\ repository source files.
Added Connection.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnection.java to .\/spikes\ repository source files.
Added ServiceConnectionCallback.java to .\/spikes\ repository source files.
Added EasyCustomTabs.java to .\/spikes\ repository source files.
Added ActionButtonComposer.java to .\/spikes\ repository source files.
Added CloseButtonIconComposer.java to .\/spikes\ repository source files.
Added Composer.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilder.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigator.java to .\/spikes\ repository source files.
Added EasyCustomTabsWebNavigator.java to .\/spikes\ repository source files.
Added ExitAnimationsComposer.java to .\/spikes\ repository source files.
Added IntentCustomizer.java to .\/spikes\ repository source files.
Added MenuItemComposer.java to .\/spikes\ repository source files.
Added NavigationFallback.java to .\/spikes\ repository source files.
Added Navigator.java to .\/spikes\ repository source files.
Added ShowTitleComposer.java to .\/spikes\ repository source files.
Added StartAnimationsComposer.java to .\/spikes\ repository source files.
Added ToolbarColorComposer.java to .\/spikes\ repository source files.
Added UrlBarHidingComposer.java to .\/spikes\ repository source files.
Added WebNavigator.java to .\/spikes\ repository source files.
Added AvailableAppProvider.java to .\/spikes\ repository source files.
Added BestPackageFinder.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProvider.java to .\/spikes\ repository source files.
Added BinderTest.java to .\/spikes\ repository source files.
Added ConnectedClientTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnectionTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigatorTest.java to .\/spikes\ repository source files.
Added BestPackageFinderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProviderTest.java to .\/spikes\ repository source files.
Added ApiPagedChannelHistory.java to .\/spikes\ repository source files.
Added ApiPagedResponse.java to .\/spikes\ repository source files.
Added ChannelHistory.java to .\/spikes\ repository source files.
Added HistoryConverter.java to .\/spikes\ repository source files.
Added Runner.java to .\/spikes\ repository source files.
Added SlackHistoryFetcher.java to .\/spikes\ repository source files.
Added SlackWebService.java to .\/spikes\ repository source files.
Added ApiPagedResponseTest.java to .\/spikes\ repository source files.
Added MainActivityTest.java to .\/spikes\ repository source files.
Added LoremAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added BetterAccountManager.java to .\/spikes\ repository source files.
Added BetterAuthenticator.java to .\/spikes\ repository source files.
Added BetterAuthenticatorActivity.java to .\/spikes\ repository source files.
Added GertHerbAuthenticator.java to .\/spikes\ repository source files.
Added GertHerbAuthenticatorService.java to .\/spikes\ repository source files.
Added NoAccountException.java to .\/spikes\ repository source files.
Added ReactiveAuthenticatorActivity.java to .\/spikes\ repository source files.
Added Token.java to .\/spikes\ repository source files.
Added GertHerbActivity.java to .\/spikes\ repository source files.
Added GertHerbApplication.java to .\/spikes\ repository source files.
Added GertHerbAuthenticationActivity.java to .\/spikes\ repository source files.
Added TypefaceFactory.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added ViewServer.java to .\/spikes\ repository source files.
Added ViewServerManager.java to .\/spikes\ repository source files.
Added DeveloperError.java to .\/spikes\ repository source files.
Added HomeActivity.java to .\/spikes\ repository source files.
Added LoginActivity.java to .\/spikes\ repository source files.
Added LoginView.java to .\/spikes\ repository source files.
Added UserCredentials.java to .\/spikes\ repository source files.
Added FontButton.java to .\/spikes\ repository source files.
Added FontEditText.java to .\/spikes\ repository source files.
Added FontTextView.java to .\/spikes\ repository source files.
Added GithubApi.java to .\/spikes\ repository source files.
Added GithubApiFactory.java to .\/spikes\ repository source files.
Added TokenRequest.java to .\/spikes\ repository source files.
Added TokenResponse.java to .\/spikes\ repository source files.
Added Dummy.java to .\/spikes\ repository source files.
Added DummyTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MainFragment.java to .\/spikes\ repository source files.
Added Attributes.java to .\/spikes\ repository source files.
Added Coordinates.java to .\/spikes\ repository source files.
Added IndicatorCoordinatesCalculator.java to .\/spikes\ repository source files.
Added LandingStrip.java to .\/spikes\ repository source files.
Added MutableCoordinates.java to .\/spikes\ repository source files.
Added OnPagerAdapterChangedListener.java to .\/spikes\ repository source files.
Added PagerAdapterObserver.java to .\/spikes\ repository source files.
Added Scrollable.java to .\/spikes\ repository source files.
Added ScrollingPageChangeListener.java to .\/spikes\ repository source files.
Added State.java to .\/spikes\ repository source files.
Added TabsContainer.java to .\/spikes\ repository source files.
Added CustomLandingStrip.java to .\/spikes\ repository source files.
Added CustomTabActivity.java to .\/spikes\ repository source files.
Added ExampleRainbowLandingStrip.java to .\/spikes\ repository source files.
Added FixedWidthTabActivity.java to .\/spikes\ repository source files.
Added NoFragmentsSimpleTextTabActivity.java to .\/spikes\ repository source files.
Added Data.java to .\/spikes\ repository source files.
Added DemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added SmallDemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerFragment.java to .\/spikes\ repository source files.
Added DemoViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapterState.java to .\/spikes\ repository source files.
Added SimpleTextTabActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AbTestingParamsLoadedCallback.java to .\/spikes\ repository source files.
Added AyBe.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added WeakStartCallback.java to .\/spikes\ repository source files.
Added LeakActivity.java to .\/spikes\ repository source files.
Added NoLeakActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added Bar.java to .\/spikes\ repository source files.
Added Foo.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added FooTest.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added ColorScheme.java to .\/spikes\ repository source files.
Added ColorUtils.java to .\/spikes\ repository source files.
Added DominantColorCalculator.java to .\/spikes\ repository source files.
Added FloatUtils.java to .\/spikes\ repository source files.
Added MedianCutQuantizer.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added PayPalFragment.java to .\/spikes\ repository source files.
Added PayPalHelper.java to .\/spikes\ repository source files.
Added MaxLengthMessageComposer.java to .\/spikes\ repository source files.
Added MessageComposer.java to .\/spikes\ repository source files.
Added TwitterMessageComposer.java to .\/spikes\ repository source files.
Added DisabledMruPersister.java to .\/spikes\ repository source files.
Added MruPersister.java to .\/spikes\ repository source files.
Added SharedPreferencesMruPersister.java to .\/spikes\ repository source files.
Added OnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added PriorityShareDialog.java to .\/spikes\ repository source files.
Added PrioritySharer.java to .\/spikes\ repository source files.
Added ShareTargetsAdapter.java to .\/spikes\ repository source files.
Added SimpleOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added TargetApps.java to .\/spikes\ repository source files.
Added TwitterOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AdvancedActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SimpleActivity.java to .\/spikes\ repository source files.
Added LockingActivity.java to .\/spikes\ repository source files.
Added PostLockingActivity.java to .\/spikes\ repository source files.
Added PreLockingActivity.java to .\/spikes\ repository source files.
Added DummyAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added NovoStaggeredGridView.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SpikeApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SwipeableView.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MyClass.java to .\/spikes\ repository source files.
Added MyClassTest.java to .\/spikes\ repository source files.
Added MyAndroidClassTest.java to .\/spikes\ repository source files.
Added RobolectricGradleTestRunner.java to .\/spikes\ repository source files.
Added Mapper.java to .\/spikes\ repository source files.
Added Query.java to .\/spikes\ repository source files.
Added TypedResolver.java to .\/spikes\ repository source files.
Added CursorList.java to .\/spikes\ repository source files.
Added CursorListIterator.java to .\/spikes\ repository source files.
Added CursorMarshaller.java to .\/spikes\ repository source files.
Added EmptyListIterator.java to .\/spikes\ repository source files.
Added ReflectionCursorMarshaller.java to .\/spikes\ repository source files.
Added RichClass.java to .\/spikes\ repository source files.
Added Setter.java to .\/spikes\ repository source files.
Added Function.java to .\/spikes\ repository source files.
Added TypedElementLoader.java to .\/spikes\ repository source files.
Added TypedLoader.java to .\/spikes\ repository source files.
Added Marshaller.java to .\/spikes\ repository source files.
Added ObjectMapper.java to .\/spikes\ repository source files.
Added TypedActivity.java to .\/spikes\ repository source files.
Added StringUtil.java to .\/spikes\ repository source files.
Added MyObject.java to .\/spikes\ repository source files.
Added MediaPlayerSwitcherActivity.java to .\/spikes\ repository source files.
Added VideoPlayerService.java to .\/spikes\ repository source files.
Added RelativeLayoutWithForeground.java to .\/spikes\ repository source files.
Added DemoActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added RecognitionService.java to .\/spikes\ repository source files.
Added SessionService.java to .\/spikes\ repository source files.
Added SettingsActivity.java to .\/spikes\ repository source files.
Added SmartContextInteractionService.java to .\/spikes\ repository source files.
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
final DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close) {

            @Override
            public void onDrawerClosed(View drawerView) {
                super.onDrawerClosed(drawerView);
                // waiting for the drawer to close, then navigating seems to cause issue.
                // why wait for the drawer to close? jankiness.
                if (pendingNavigationClick != null) {
                    startActivity(pendingNavigationClick);
                    pendingNavigationClick = null;
                }
            }

        };
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close);
b=getIntent().getExtras()
Bundle b = getIntent().getExtras();
mShouldStartPlayback=b.getBoolean("shouldStart")
boolean mShouldStartPlayback = b.getBoolean("shouldStart");
startPosition=b.getInt("startPosition",0)
int startPosition = b.getInt("startPosition", 0);
currentPos=mVideoView.getCurrentPosition()
int currentPos = mVideoView.getCurrentPosition();
String msg;
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, mDisplaySize.y + getActionBar().getHeight());
mm=mSelectedMedia.getMetadata()
MediaMetadata mm = mSelectedMedia.getMetadata();
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, (int) (mDisplaySize.x * ASPECT_RATIO));
WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
width=display.getWidth()
int width = display.getWidth();
height=display.getHeight()
int height = display.getHeight();
int resourceId = 0;
String videoUrl = "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4#sthash.rJ5rPZy8.dpuf";
String title = "Jahre Philharmonie";
String description = "Awesome film you must watch!";
String author = "Blundell";
String thumbUrl = "http://www.ustream.tv/blog/wp-content/uploads/2013/10/simply-go-live.png";
MediaMetadata metadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE);
mediaInfo=new MediaInfo.Builder(videoUrl).setMetadata(metadata).setStreamType(MediaInfo.STREAM_TYPE_BUFFERED).setContentType("video/mp4").build()
MediaInfo mediaInfo = new MediaInfo.Builder(videoUrl)
                        .setMetadata(metadata)
                        .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)
                        .setContentType("video/mp4")
                        .build();
Intent intent = new Intent(MainActivity.this, LocalPlayerActivity.class);
preferences=getPreferences(MODE_PRIVATE)
SharedPreferences preferences = getPreferences(MODE_PRIVATE);
defaultSmsPackage=Telephony.Sms.getDefaultSmsPackage(this)
String defaultSmsPackage = Telephony.Sms.getDefaultSmsPackage(this);
Intent intent = new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
availableAppProvider=EasyCustomTabs.getInstance()
AvailableAppProvider availableAppProvider = EasyCustomTabs.getInstance();
ConnectedClient connectedClient = new ConnectedClient(client);
binder=Binder.newInstance()
Binder binder = Binder.newInstance();
List<Composer> composerList = new ArrayList<>();
customTabsSession=connection.newSession()
CustomTabsSession customTabsSession = connection.newSession();
CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(customTabsSession);
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
context=EasyCustomTabs.getInstance().getContext()
Context context = EasyCustomTabs.getInstance().getContext();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
packagesSupportingCustomTabs=getPackagesSupportingCustomTabs()
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
defaultPackage=getDefaultPackage()
String defaultPackage = getDefaultPackage();
defaultActivityInfo=packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK,0)
ResolveInfo defaultActivityInfo = packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK, 0);
String packageName = defaultActivityInfo.activityInfo.packageName;
resolvedInfoList=packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK,0)
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<String> packagesSupportingCustomTabs = new ArrayList<>();
Intent serviceIntent = new Intent();
bestPackageFinder=BestPackageFinder.newInstance()
BestPackageFinder bestPackageFinder = BestPackageFinder.newInstance();
packageName=bestPackageFinder.findBestPackage()
String packageName = bestPackageFinder.findBestPackage();
resolveInfo=createResolveInfoFor(packageName)
ResolveInfo resolveInfo = createResolveInfoFor(packageName);
ResolveInfo resolveInfo = new ResolveInfo();
List<ResolveInfo> resolveInfoList = new ArrayList<>();
defaultPackageResolveInfo=createResolveInfoFor(packageName)
ResolveInfo defaultPackageResolveInfo = createResolveInfoFor(packageName);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
oldestApiMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage oldestApiMessage = apiMessages.get(apiMessages.size() - 1);
String lastResponseEpochTime = oldestApiMessage.timeStamp;
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
latestMessage=latestMessages.get(latestMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage latestMessage = latestMessages.get(latestMessages.size() - 1);
latestMessageDateTime=convertToLocalDateTime(latestMessage.timeStamp)
LocalDateTime latestMessageDateTime = convertToLocalDateTime(latestMessage.timeStamp);
List<ChannelHistory.Message> messages = new ArrayList<>();
historyFrom=getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1))
LocalDateTime historyFrom = getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1));
historyTo=getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0))
LocalDateTime historyTo = getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0));
String text = apiMessage.text;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
lastMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage lastMessage = apiMessages.get(apiMessages.size() - 1);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
firstMessage=apiMessages.get(0)
ApiPagedChannelHistory.ApiMessage firstMessage = apiMessages.get(0);
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
String slackToken = args[0];
retrofit=new Retrofit.Builder().baseUrl("https://slack.com/api/").addConverterFactory(GsonConverterFactory.create()).build()
Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://slack.com/api/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();
slackWebService=retrofit.create(SlackWebService.class)
SlackWebService slackWebService = retrofit.create(SlackWebService.class);
slackHistoryFetcher=SlackHistoryFetcher.from(slackWebService,slackToken)
SlackHistoryFetcher slackHistoryFetcher = SlackHistoryFetcher.from(slackWebService, slackToken);
start=LocalDateTime.now()
LocalDateTime start = LocalDateTime.now();
end=LocalDateTime.now().minusDays(7)
LocalDateTime end = LocalDateTime.now().minusDays(7);
channelHistory=slackHistoryFetcher.getChannelHistory(start,end)
ChannelHistory channelHistory = slackHistoryFetcher.getChannelHistory(start, end);
HistoryConverter historyConverter = new HistoryConverter();
ApiPagedResponse apiPagedResponse = new ApiPagedResponse(start);
response=fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime())
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
apiPagedChannelHistory=response.body()
ApiPagedChannelHistory apiPagedChannelHistory = response.body();
channelHistory=slackWebService.getChannelHistory(slackToken,channel,lastResponseEpochTime,NUMBER_OF_RESULTS)
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
ApiPagedChannelHistory apiPagedChannelHistory = new ApiPagedChannelHistory();
ApiPagedChannelHistory.ApiMessage apiMessage = new ApiPagedChannelHistory.ApiMessage();
final TextView textView = new TextView(context);
emptyView=findViewById(R.id.empty_view)
View emptyView = findViewById(R.id.empty_view);
final Integer action = values[0];
LoremAdapter loremAdapter = new LoremAdapter();
accounts=accountManager.getAccountsByType(accountType)
Account[] accounts = accountManager.getAccountsByType(accountType);
Bundle result;
Bundle result;
Bundle result = new Bundle();
activity=createLoginIntent(context,accountType,authTokenType,requiredFeatures,options)
Intent activity = createLoginIntent(context, accountType, authTokenType, requiredFeatures, options);
Bundle bundle = new Bundle();
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
accounts=accountManager.getAccountsByType(authTokenType)
Account[] accounts = accountManager.getAccountsByType(authTokenType);
bundle=createResponseBundle(token)
Bundle bundle = createResponseBundle(token);
accountManager=AccountManager.get(this.getApplicationContext())
AccountManager accountManager = AccountManager.get(this.getApplicationContext());
Account account = new Account(token.getUserName(), getAccountName());
Bundle bundle = new Bundle();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
GertHerbAuthenticator authenticator = new GertHerbAuthenticator(this);
fontId=getFontId(context,attrs)
int fontId = getFontId(context, attrs);
fontType=getFontType(fontId)
FontType fontType = getFontType(fontId);
typedArray=context.obtainStyledAttributes(attrs,R.styleable.CustomTextAppearance)
TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CustomTextAppearance);
typeface=createTypeFace(context,fontType)
Typeface typeface = createTypeFace(context, fontType);
info=context.getApplicationInfo()
ApplicationInfo info = context.getApplicationInfo();
name=activity.getTitle().toString()
String name = activity.getTitle().toString();
client=mServer.accept()
Socket client = mServer.accept();
boolean result;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
BufferedReader in = null;
request=in.readLine()
final String request = in.readLine();
String command;
String parameters;
index=request.indexOf(' ')
int index = request.indexOf(' ');
boolean result;
boolean success = true;
BufferedWriter out = null;
index=parameters.indexOf(' ')
int index = parameters.indexOf(' ');
code=parameters.substring(0,index)
final String code = parameters.substring(0, index);
int hashCode = (int) Long.parseLong(code, 16);
window=findWindow(hashCode)
final View window = findWindow(hashCode);
dispatch=ViewDebug.class.getDeclaredMethod("dispatchCommand",View.class,String.class,String.class,OutputStream.class)
final Method dispatch = ViewDebug.class.getDeclaredMethod("dispatchCommand",
                        View.class, String.class, String.class, OutputStream.class);
View window = null;
boolean result = true;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
boolean result = true;
String focusName = null;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
View focusedWindow = null;
BufferedWriter out = null;
boolean needWindowListUpdate = false;
boolean needFocusedWindowUpdate = false;
BetterAccountManager accountManager = new BetterAccountManager(this, getString(R.string.account_type), getString(R.string.token_type), null);
loginView=Views.findById(this,R.id.login_view)
LoginView loginView = Views.findById(this, R.id.login_view);
authorizationApi=new GithubApiFactory().createAuthorizationApi(credentials.username,credentials.password)
GithubApi authorizationApi = new GithubApiFactory().createAuthorizationApi(credentials.username, credentials.password);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
Endpoint endpoint = new Endpoint() {
            @Override
            public String getUrl() {
                return GITHUB_API_URL;
            }

            @Override
            public String getName() {
                return "Live";
            }
        };
interceptor=createAuthorizationRequestInterceptor(username,password)
RequestInterceptor interceptor = createAuthorizationRequestInterceptor(username, password);
restAdapter=createRestAdapter(endpoint,interceptor)
RestAdapter restAdapter = createRestAdapter(endpoint, interceptor);
Dummy dummy = new Dummy();
result=dummy.explodes()
boolean result = dummy.explodes();
String base64EncodedPublicKey = "CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE";
premiumPurchase=inventory.getPurchase(SKU_PREMIUM)
Purchase premiumPurchase = inventory.getPurchase(SKU_PREMIUM);
infiniteGasPurchase=inventory.getPurchase(SKU_INFINITE_GAS)
Purchase infiniteGasPurchase = inventory.getPurchase(SKU_INFINITE_GAS);
gasPurchase=inventory.getPurchase(SKU_GAS)
Purchase gasPurchase = inventory.getPurchase(SKU_GAS);
String payload = "";
String payload = "";
String payload = "";
payload=p.getDeveloperPayload()
String payload = p.getDeveloperPayload();
int index = mTank >= TANK_RES_IDS.length ? TANK_RES_IDS.length - 1 : mTank;
AlertDialog.Builder bld = new AlertDialog.Builder(this);
spe=getPreferences(MODE_PRIVATE).edit()
SharedPreferences.Editor spe = getPreferences(MODE_PRIVATE).edit();
sp=getPreferences(MODE_PRIVATE)
SharedPreferences sp = getPreferences(MODE_PRIVATE);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                                  + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                    | ((source[d + 1 + off] << 24) >>> 16)
                    | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                    | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                                   "-1002:Bad response received/" +
                                   "-1003:Purchase signature verification failed/" +
                                   "-1004:Send intent failed/" +
                                   "-1005:User cancelled/" +
                                   "-1006:Unknown purchase response/" +
                                   "-1007:Missing token/" +
                                   "-1008:Unknown error/" +
                                   "-1009:Subscriptions not available/" +
                                   "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(),
                    itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                        | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                        | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                            | ((source[d + 1 + off] << 24) >>> 16)
                            | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                            | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                "-1002:Bad response received/" +
                "-1003:Purchase signature verification failed/" +
                "-1004:Send intent failed/" +
                "-1005:User cancelled/" +
                "-1006:Unknown purchase response/" +
                "-1007:Missing token/" +
                "-1008:Unknown error/" +
                "-1009:Subscriptions not available/" +
                "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(), itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
responseCode=result.getResponse()
int responseCode = result.getResponse();
sku=purchase.getSku()
String sku = purchase.getSku();
skuDetails=inv.getSkuDetails(sku)
SkuDetails skuDetails = inv.getSkuDetails(sku);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
Button purchaseFiveButton = (Button) rootView.findViewById(R.id.fragment_main_button_purchase_five_coins);
xml=context.obtainStyledAttributes(attrs,R.styleable.LandingStrip)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.LandingStrip);
tabLayoutId=xml.getResourceId(R.styleable.LandingStrip_tabLayoutId,MISSING_TAB_LAYOUT_ID)
int tabLayoutId = xml.getResourceId(R.styleable.LandingStrip_tabLayoutId, MISSING_TAB_LAYOUT_ID);
indicatorColour=xml.getResourceId(R.styleable.LandingStrip_indicatorColor,DEFAULT_INDICATOR_COLOUR)
int indicatorColour = xml.getResourceId(R.styleable.LandingStrip_indicatorColor, DEFAULT_INDICATOR_COLOUR);
indicatorHeight=getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight,DEFAULT_INDICATOR_HEIGHT,xml)
int indicatorHeight = getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight, DEFAULT_INDICATOR_HEIGHT, xml);
tabsPaddingLeft=getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingLeft = getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding, DEFAULT_TABS_PADDING, xml);
tabsPaddingRight=getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingRight = getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding, DEFAULT_TABS_PADDING, xml);
MutableCoordinates drawCurrentTabCoordinates = new MutableCoordinates();
MutableCoordinates drawNextTabCoordinates = new MutableCoordinates();
MutableCoordinates drawMovingIndicatorCoordinates = new MutableCoordinates();
currentTab=tabsContainer.getTabAt(currentPosition)
View currentTab = tabsContainer.getTabAt(currentPosition);
currentTabStart=currentTab.getLeft()
float currentTabStart = currentTab.getLeft();
currentTabEnd=currentTab.getRight()
float currentTabEnd = currentTab.getRight();
nextTab=tabsContainer.getTabAt(currentPosition + 1)
View nextTab = tabsContainer.getTabAt(currentPosition + 1);
nextTabPositionOffset=getFractionFrom(pagePositionOffset)
float nextTabPositionOffset = getFractionFrom(pagePositionOffset);
indicatorStart=getIndicatorPosition(nextTab.getStart(),pagePositionOffset,currentTab.getStart(),nextTabPositionOffset)
float indicatorStart = getIndicatorPosition(nextTab.getStart(), pagePositionOffset, currentTab.getStart(), nextTabPositionOffset);
indicatorEnd=getIndicatorPosition(nextTab.getEnd(),pagePositionOffset,currentTab.getEnd(),nextTabPositionOffset)
float indicatorEnd = getIndicatorPosition(nextTab.getEnd(), pagePositionOffset, currentTab.getEnd(), nextTabPositionOffset);
height=getHeight()
int height = getHeight();
tabCount=pagerAdapter.getCount()
int tabCount = pagerAdapter.getCount();
title=pagerAdapter.getPageTitle(position)
CharSequence title = pagerAdapter.getPageTitle(position);
inflatedTabView=tabsContainer.inflateTab(layoutInflater,attributes.getTabLayoutId())
View inflatedTabView = tabsContainer.inflateTab(layoutInflater, attributes.getTabLayoutId());
int position = (int) view.getTag(TAG_KEY_POSITION);
scrollOffset=getHorizontalScrollOffset(position,positionOffset)
int scrollOffset = getHorizontalScrollOffset(position, positionOffset);
newScrollX=calculateScrollOffset(position,scrollOffset,positionOffset)
float newScrollX = calculateScrollOffset(position, scrollOffset, positionOffset);
tabWidth=tabsContainer.getTabAt(position).getWidth()
int tabWidth = tabsContainer.getTabAt(position).getWidth();
tabForPosition=tabsContainer.getTabAt(position)
View tabForPosition = tabsContainer.getTabAt(position);
float tabStartX = tabForPosition.getLeft() + scrollOffset;
int viewMiddleOffset = getTabParentWidth() / 2;
float tabCenterOffset = (tabForPosition.getRight() - tabForPosition.getLeft()) * 0.5F;
nextTabDelta=getNextTabDelta(position,pagerOffset,tabForPosition)
float nextTabDelta = getNextTabDelta(position, pagerOffset, tabForPosition);
LinearLayout tabsContainerView = new LinearLayout(context);
tab=getTabAt(index)
View tab = getTabAt(index);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
position=indicatorCoordinates.getStart()
float position = indicatorCoordinates.getStart();
lastTabOffset=((ViewGroup)getChildAt(0)).getChildAt(getChildCount() - 1).getWidth()
float lastTabOffset = ((ViewGroup) getChildAt(0)).getChildAt(getChildCount() - 1).getWidth();
frequency=getOneCycle(lastTabOffset)
float frequency = getOneCycle(lastTabOffset);
r=toHex(calculateColour(position,frequency,PHASE_RED,AMPLITUDE,CENTER_FREQUENCY))
String r = toHex(calculateColour(position, frequency, PHASE_RED, AMPLITUDE, CENTER_FREQUENCY));
g=toHex(calculateColour(position,frequency,PHASE_GREEN,AMPLITUDE,CENTER_FREQUENCY))
String g = toHex(calculateColour(position, frequency, PHASE_GREEN, AMPLITUDE, CENTER_FREQUENCY));
b=toHex(calculateColour(position,frequency,PHASE_BLUE,AMPLITUDE,CENTER_FREQUENCY))
String b = toHex(calculateColour(position, frequency, PHASE_BLUE, AMPLITUDE, CENTER_FREQUENCY));
height=getHeight()
int height = getHeight();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPagerFragment viewPagerFragment = new ViewPagerFragment();
Bundle bundle = new Bundle();
TextView view = (TextView) layoutInflater.inflate(R.layout.view_demo, container, false);
currentPosition=viewPagerAdapterState.getCurrentPosition()
int currentPosition = viewPagerAdapterState.getCurrentPosition();
view=getView(container,position)
View view = getView(container, position);
parcelableSparseArray=viewPagerAdapterState.get(position)
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
View view = (View) object;
SparseArray<Parcelable> viewState = new SparseArray<>();
position=entry.getValue()
int position = entry.getValue();
view=entry.getKey()
View view = entry.getKey();
bundle=in.readBundle()
Bundle bundle = in.readBundle();
Map<Integer, SparseArray<Parcelable>> viewStates = new HashMap<>(bundle.keySet().size());
sparseParcelableArray=bundle.getSparseParcelableArray(key)
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
primaryItemPosition=in.readInt()
int primaryItemPosition = in.readInt();
Bundle bundle = new Bundle();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
final TextView abText = (TextView) findViewById(R.id.ab_text);
final AyBe ayBe = new AyBe();
id=item.getItemId()
int id = item.getItemId();
callback=weakCallback.get()
AbTestingParamsLoadedCallback callback = weakCallback.get();
WeakReference<NoLeakActivity> weakNoLeakActivity = new WeakReference<NoLeakActivity>(noLeakActivity);
noLeakActivity=weakNoLeakActivity.get()
NoLeakActivity noLeakActivity = weakNoLeakActivity.get();
RecyclerView recyclerView = (RecyclerView) layoutInflater.inflate(R.layout.view_page, viewGroup, false);
itemView=layoutInflater.inflate(R.layout.view_item,parent,false)
View itemView = layoutInflater.inflate(R.layout.view_item, parent, false);
actual=foo.twice(HALF)
int actual = foo.twice(HALF);
int expected = WHOLE;
final float inverseRatio = 1f - ratio;
float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRatio);
float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRatio);
float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRatio);
hsv=node.getHsv()
float[] hsv = node.getHsv();
width=bitmap.getWidth()
final int width = bitmap.getWidth();
height=bitmap.getHeight()
final int height = bitmap.getHeight();
final int[] rgbPixels = new int[width * height];
final MedianCutQuantizer mcq = new MedianCutQuantizer(rgbPixels, NUM_COLORS);
primaryAccentColor=findPrimaryAccentColor()
final ColorNode primaryAccentColor = findPrimaryAccentColor();
secondaryAccentColor=findSecondaryAccentColor(primaryAccentColor)
final ColorNode secondaryAccentColor = findSecondaryAccentColor(primaryAccentColor);
tertiaryAccentColor=findTertiaryAccentColor(primaryAccentColor,secondaryAccentColor)
final int tertiaryAccentColor = findTertiaryAccentColor(
                primaryAccentColor, secondaryAccentColor);
primaryTextColor=findPrimaryTextColor(primaryAccentColor)
final int primaryTextColor = findPrimaryTextColor(primaryAccentColor);
secondaryTextColor=findSecondaryTextColor(primaryAccentColor)
final int secondaryTextColor = findSecondaryTextColor(primaryAccentColor);
final float primaryHue = primary.getHsv()[0];
final float candidateHue = candidate.getHsv()[0];
copy=Arrays.copyOf(palette,palette.length)
final MedianCutQuantizer.ColorNode[] copy = Arrays.copyOf(palette, palette.length);
maxCount=palette[0].getCount()
final float maxCount = palette[0].getCount();
lhsWeight=calculateWeight(lhs,maxCount)
final float lhsWeight = calculateWeight(lhs, maxCount);
rhsWeight=calculateWeight(rhs,maxCount)
final float rhsWeight = calculateWeight(rhs, maxCount);
float sum = 0;
float sumWeight = 0;
float value = values[i];
float weight = values[i + 1];
ColorHistogram colorHist = new ColorHistogram(pixels);
K=colorHist.getNumberOfColors()
int K = colorHist.getNumberOfColors();
ColorNode[] rCols = null;
rgb=colorHist.getColor(i)
int rgb = colorHist.getColor(i);
cnt=colorHist.getCount(i)
int cnt = colorHist.getCount(i);
ColorBox initialBox = new ColorBox(0, K - 1, 0);
List<ColorBox> colorSet = new ArrayList<ColorBox>();
int k = 1;
boolean done = false;
nextBox=findBoxToSplit(colorSet)
ColorBox nextBox = findBoxToSplit(colorSet);
newBox=nextBox.splitBox()
ColorBox newBox = nextBox.splitBox();
color=findClosestColor(pixels[i])
ColorNode color = findClosestColor(pixels[i]);
idx=findClosestColorIndex(rgb)
int idx = findClosestColorIndex(rgb);
red=Color.red(rgb)
int red = Color.red(rgb);
grn=Color.green(rgb)
int grn = Color.green(rgb);
blu=Color.blue(rgb)
int blu = Color.blue(rgb);
int minIdx = 0;
int minDistance = Integer.MAX_VALUE;
ColorNode color = quantColors[i];
d2=color.distance2(red,grn,blu)
int d2 = color.distance2(red, grn, blu);
ColorBox boxToSplit = null;
int minLevel = Integer.MAX_VALUE;
n=colorBoxes.size()
int n = colorBoxes.size();
ColorNode[] avgColors = new ColorNode[n];
int i = 0;
int dr = this.red - red;
int dg = this.grn - grn;
int db = this.blu - blu;
ColorNode color = imageColors[i];
int r = color.red;
int g = color.grn;
int b = color.blu;
dim=getLongestColorDimension()
ColorDimension dim = getLongestColorDimension();
med=findMedian(dim)
int med = findMedian(dim);
int nextLevel = level + 1;
ColorBox newBox = new ColorBox(med + 1, upper, nextLevel);
int rLength = rmax - rmin;
int gLength = gmax - gmin;
int bLength = bmax - bmin;
int half = count / 2;
int nPixels, median;
int rSum = 0;
int gSum = 0;
int bSum = 0;
int n = 0;
ColorNode ci = imageColors[i];
int cnt = ci.cnt;
double nd = n;
int avgRed = (int) (0.5 + rSum / nd);
int avgGrn = (int) (0.5 + gSum / nd);
int avgBlu = (int) (0.5 + bSum / nd);
s=this.getClass().getSimpleName()
String s = this.getClass().getSimpleName();
int i = 0;
int N = pixelsOrig.length;
int[] pixelsCpy = new int[N];
int k = -1;
int curColor = -1;
int nColors = k + 1;
id=item.getItemId()
int id = item.getItemId();
Intent intent = new Intent();
bitmap=((BitmapDrawable)imageView.getDrawable()).getBitmap()
Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap();
DominantColorCalculator dominantColorCalculator = new DominantColorCalculator(bitmap);
selectedImageUri=data.getData()
Uri selectedImageUri = data.getData();
selectedImagePath=getPath(selectedImageUri)
String selectedImagePath = getPath(selectedImageUri);
String[] projection = {MediaStore.Images.Media.DATA};
cursor=managedQuery(uri,projection,null,null,null)
Cursor cursor = managedQuery(uri, projection, null, null, null);
column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)
int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
LinearLayout rootView = (LinearLayout) inflater.inflate(R.layout.fragment_main, container, false);
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
preapprovalButton=payPal.getCheckoutButton(getActivity(),PayPal.BUTTON_194x37,CheckoutButton.TEXT_PAY)
CheckoutButton preapprovalButton = payPal.getCheckoutButton(getActivity(), PayPal.BUTTON_194x37, CheckoutButton.TEXT_PAY);
preapprovalIntent=payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY)
Intent preapprovalIntent = payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY);
String resultTitle = "";
String resultInfo = "";
String resultExtra = "";
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
PayPalPreapproval preapproval = new PayPalPreapproval();
preapproval=createPreapproval(preapprovalKey)
PayPalPreapproval preapproval = createPreapproval(preapprovalKey);
Bundle bundle = new Bundle();
int availableLength = maxLength;
StringBuilder stringBuilder = new StringBuilder(maxLength);
prefixAndSuffixLength=computeAppendedLengthIncludingSeparatorSpaces(prefix,suffix)
int prefixAndSuffixLength = computeAppendedLengthIncludingSeparatorSpaces(prefix, suffix);
urlLength=computeUrlLengthIncludingSeparatorSpace(url)
int urlLength = computeUrlLengthIncludingSeparatorSpace(url);
trimmedSubject=ellipsizeTextIfExceedsMaxLength(subject,availableLength)
String trimmedSubject = ellipsizeTextIfExceedsMaxLength(subject, availableLength);
int length = 0;
preferences=context.getSharedPreferences(MRU_PREFERENCES,Context.MODE_PRIVATE)
SharedPreferences preferences = context.getSharedPreferences(MRU_PREFERENCES, Context.MODE_PRIVATE);
args=getArguments()
Bundle args = getArguments();
themeResId=getThemeResIdIfProvidedIn(args)
int themeResId = getThemeResIdIfProvidedIn(args);
title=getTitleIfProvidedIn(args)
CharSequence title = getTitleIfProvidedIn(args);
builder=createDialogBuilder(themeResId).setCancelable(true).setView(dialogView)
AlertDialog.Builder builder = createDialogBuilder(themeResId)
                .setCancelable(true)
                .setView(dialogView);
inflater=getActivity().getLayoutInflater()
LayoutInflater inflater = getActivity().getLayoutInflater();
GridView gridView = (GridView) rootView.findViewById(R.id.ps__dialog_grid);
targetApps=extractTargetAppsFrom(args)
TargetApps targetApps = extractTargetAppsFrom(args);
allShareTargets=getAvailableShareTargets(sharingIntent)
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
priorityAppInfos=createPriorityResolveInfoList(targetApps,allShareTargets)
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
otherAppInfos=createOtherAppsResolveInfoList(priorityAppInfos,allShareTargets)
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
resolveInfos=targetApps.extractTargetResolveInfosFrom(allShareTargets)
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
mruResolveInfo=findMruResolveInfoIn(allShareTargets)
ResolveInfo mruResolveInfo = findMruResolveInfoIn(allShareTargets);
List<ResolveInfo> otherAppsInfos = new ArrayList<ResolveInfo>(allAppInfos);
mruPackageName=persister.getLastUsedTarget()
String mruPackageName = persister.getLastUsedTarget();
String packageName = resolveInfo.activityInfo.packageName;
packageManager=getActivity().getPackageManager()
PackageManager packageManager = getActivity().getPackageManager();
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
View buttonStrip = (View) showMoreButton.getParent();
gridView=getGridView()
GridView gridView = getGridView();
intent=wrapIntentWithExplicitTargetComponentForItem(position,sharingIntent)
Intent intent = wrapIntentWithExplicitTargetComponentForItem(position, sharingIntent);
Intent intent = new Intent(sharingIntent);
ActivityInfo activity = adapter.getItem(position).activityInfo;
ComponentName name = new ComponentName(activity.applicationInfo.packageName, activity.name);
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
PriorityShareDialog dialog = new PriorityShareDialog();
Bundle args = new Bundle();
sharingIntent=createSharingIntent()
Intent sharingIntent = createSharingIntent();
fragmentManager=activity.getFragmentManager()
FragmentManager fragmentManager = activity.getFragmentManager();
Intent intent = new Intent(Intent.ACTION_SEND);
dialog=new PriorityShareDialog.Builder().setTitle(title).setTargetApps(targetApps).setSharingIntent(sharingIntent).setOnPrepareSharingIntentListener(listener).setShowMostRecentlyUsed(showMostRecentlyUsed).build()
PriorityShareDialog dialog = new PriorityShareDialog.Builder()
                .setTitle(title)
                .setTargetApps(targetApps)
                .setSharingIntent(sharingIntent)
                .setOnPrepareSharingIntentListener(listener)
                .setShowMostRecentlyUsed(showMostRecentlyUsed)
                .build();
PrioritySharer prioritySharer = new PrioritySharer();
prioritySharer=build()
PrioritySharer prioritySharer = build();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
layoutInflater=LayoutInflater.from(context)
LayoutInflater layoutInflater = LayoutInflater.from(context);
iconSizePx=getIconSizePx(context.getResources())
int iconSizePx = getIconSizePx(context.getResources());
ArrayList<ResolveInfo> sortedList = new ArrayList<ResolveInfo>(resolveInfoList);
int otherAppsCountMaybe = showAllApps ? otherAppInfos.size() : 0;
firstOtherAppsItemPosition=priorityAppInfos.size()
int firstOtherAppsItemPosition = priorityAppInfos.size();
int offsetPosition = position - firstOtherAppsItemPosition;
TextView textView;
textView=initializeItemViewIfNecessary(convertView,R.layout.ps__grid_item_share,parent)
TextView textView = initializeItemViewIfNecessary(convertView, R.layout.ps__grid_item_share, parent);
info=getItem(position)
ResolveInfo info = getItem(position);
icon=info.loadIcon(packageManager)
Drawable icon = info.loadIcon(packageManager);
arraySize=in.readInt()
int arraySize = in.readInt();
String[] packageNames = new String[arraySize];
arraySize=targetPackages.size()
int arraySize = targetPackages.size();
String[] packagesArray = new String[arraySize];
SparseArray<ResolveInfo> matchedResolveInfos = new SparseArray<ResolveInfo>(targetPackages.size());
String packageName = info.activityInfo.packageName;
index=indexOfItemInto(packageName,targetPackages)
int index = indexOfItemInto(packageName, targetPackages);
sparseArraySize=sparseArray.size()
int sparseArraySize = sparseArray.size();
ArrayList<T> list = new ArrayList<T>(sparseArraySize);
int i = 0;
originalSubject=intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT)
CharSequence originalSubject = intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT);
String subject = originalSubject != null ? originalSubject.toString() : null;
composer=createComposer()
MessageComposer composer = createComposer();
component=intent.getComponent()
ComponentName component = intent.getComponent();
targetPackageName=component.getPackageName()
String targetPackageName = component.getPackageName();
adapter=ArrayAdapter.createFromResource(this,R.array.target_apps,android.R.layout.simple_spinner_item)
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
EditText text = (EditText) findViewById(R.id.text);
EditText title = (EditText) findViewById(R.id.title);
EditText mimeType = (EditText) findViewById(R.id.mime_type);
EditText dataUri = (EditText) findViewById(R.id.data_uri);
Switch showMostRecentlyUsed = (Switch) findViewById(R.id.show_most_recently_used);
uriString=dataUri.getText().toString()
String uriString = dataUri.getText().toString();
EditText text = (EditText) findViewById(R.id.text);
TextView textView = (TextView) convertView.findViewById(R.id.positionView);
colorView=convertView.findViewById(R.id.colorView)
View colorView = convertView.findViewById(R.id.colorView);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
offset=headerPlaceholder.getTop()
int offset = headerPlaceholder.getTop();
Integer item = COLORS[position];
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
firstVisiblePosition=grid.getFirstVisiblePosition()
int firstVisiblePosition = grid.getFirstVisiblePosition();
inflate=getViewForPosition(container,position)
View inflate = getViewForPosition(container, position);
id=item.getItemId()
int id = item.getItemId();
MyActivity activity = new MyActivity();
String manifestProperty = "../app/src/main/AndroidManifest.xml";
String resProperty = "../app/src/main/res";
cursor=resolver.query(uri,projection,selection,selectionArgs,null)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, null);
cursor=resolver.query(uri,projection,selection,selectionArgs,sortOrder)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, sortOrder);
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=richClass.setter(name)
Method setter = richClass.setter(name);
T obj;
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=methodsByName.get(name)
Method setter = methodsByName.get(name);
int type = TYPE_INT;
Class<?> t = setter.getParameterTypes()[0];
Class<?> t = setter.getParameterTypes()[0];
cursorType=cursor.getType(index)
final int cursorType = cursor.getType(index);
final Object obj;
s=f.getAnnotation(Mapper.class)
Mapper s = f.getAnnotation(Mapper.class);
mm=m.getAnnotation(Mapper.class)
Mapper mm = m.getAnnotation(Mapper.class);
methodName=StringUtil.asCamelifySetMethod(what)
String methodName = StringUtil.asCamelifySetMethod(what);
cursor=getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,null,null,null,null)
Cursor cursor = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
now=System.currentTimeMillis()
long now = System.currentTimeMillis();
List<Contact2> typedCursor = new CursorList<Contact2>(cursor, Contact2.class);
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[a-zA-Z0-9]+")
Pattern p = Pattern.compile("[a-zA-Z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[A-Z][a-z0-9]+")
Pattern p = Pattern.compile("[A-Z][a-z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
SurfaceView first = (SurfaceView) findViewById(R.id.firstSurface);
SurfaceView second = (SurfaceView) findViewById(R.id.secondSurface);
Intent pickVideo = new Intent(Intent.ACTION_PICK);
xml=context.obtainStyledAttributes(attrs,R.styleable.RelativeLayoutWithForeground)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.RelativeLayoutWithForeground);
int foregroundResId = INVALID_FOREGROUND_ID;
drawable=getDrawable(getResources(),foregroundResId)
Drawable drawable = getDrawable(getResources(), foregroundResId);
Bundle args = new Bundle();
enroll=mHotwordDetector.createEnrollIntent()
Intent enroll = mHotwordDetector.createEnrollIntent();

Diff of f5d17332f4329c509a9435d1a45ba39020e645c4 and acf80ecab6a74ef04ab8a5fcc607968c6c48574f:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 6
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision f5d17332f4329c509a9435d1a45ba39020e645c4 to acf80ecab6a74ef04ab8a5fcc607968c6c48574f


****Parsing for addition at revision acf80ecab6a74ef04ab8a5fcc607968c6c48574f****

Added ApplicationTest.java to .\/spikes\ repository source files.
Added DrawerActivity.java to .\/spikes\ repository source files.
Added EarthActivity.java to .\/spikes\ repository source files.
Added ProHaxDrawerActivity.java to .\/spikes\ repository source files.
Added SaturnActivity.java to .\/spikes\ repository source files.
Added LocalPlayerActivity.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added CastApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ComposeSmsActivity.java to .\/spikes\ repository source files.
Added HeadlessSmsSendService.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MmsReceiver.java to .\/spikes\ repository source files.
Added SmsReceiver.java to .\/spikes\ repository source files.
Added ExtendedDemoActivity.java to .\/spikes\ repository source files.
Added ExtendedDemoApplication.java to .\/spikes\ repository source files.
Added SimpleDemoActivity.java to .\/spikes\ repository source files.
Added SimpleDemoApplication.java to .\/spikes\ repository source files.
Added Binder.java to .\/spikes\ repository source files.
Added ConnectedClient.java to .\/spikes\ repository source files.
Added Connection.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnection.java to .\/spikes\ repository source files.
Added ServiceConnectionCallback.java to .\/spikes\ repository source files.
Added EasyCustomTabs.java to .\/spikes\ repository source files.
Added ActionButtonComposer.java to .\/spikes\ repository source files.
Added CloseButtonIconComposer.java to .\/spikes\ repository source files.
Added Composer.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilder.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigator.java to .\/spikes\ repository source files.
Added EasyCustomTabsWebNavigator.java to .\/spikes\ repository source files.
Added ExitAnimationsComposer.java to .\/spikes\ repository source files.
Added IntentCustomizer.java to .\/spikes\ repository source files.
Added MenuItemComposer.java to .\/spikes\ repository source files.
Added NavigationFallback.java to .\/spikes\ repository source files.
Added Navigator.java to .\/spikes\ repository source files.
Added ShowTitleComposer.java to .\/spikes\ repository source files.
Added StartAnimationsComposer.java to .\/spikes\ repository source files.
Added ToolbarColorComposer.java to .\/spikes\ repository source files.
Added UrlBarHidingComposer.java to .\/spikes\ repository source files.
Added WebNavigator.java to .\/spikes\ repository source files.
Added AvailableAppProvider.java to .\/spikes\ repository source files.
Added BestPackageFinder.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProvider.java to .\/spikes\ repository source files.
Added BinderTest.java to .\/spikes\ repository source files.
Added ConnectedClientTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnectionTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigatorTest.java to .\/spikes\ repository source files.
Added BestPackageFinderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProviderTest.java to .\/spikes\ repository source files.
Added ApiPagedChannelHistory.java to .\/spikes\ repository source files.
Added ApiPagedResponse.java to .\/spikes\ repository source files.
Added ChannelHistory.java to .\/spikes\ repository source files.
Added HistoryConverter.java to .\/spikes\ repository source files.
Added Runner.java to .\/spikes\ repository source files.
Added SlackHistoryFetcher.java to .\/spikes\ repository source files.
Added SlackWebService.java to .\/spikes\ repository source files.
Added ApiPagedResponseTest.java to .\/spikes\ repository source files.
Added MainActivityTest.java to .\/spikes\ repository source files.
Added LoremAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added BetterAccountManager.java to .\/spikes\ repository source files.
Added BetterAuthenticator.java to .\/spikes\ repository source files.
Added BetterAuthenticatorActivity.java to .\/spikes\ repository source files.
Added GertHerbAuthenticator.java to .\/spikes\ repository source files.
Added GertHerbAuthenticatorService.java to .\/spikes\ repository source files.
Added NoAccountException.java to .\/spikes\ repository source files.
Added ReactiveAuthenticatorActivity.java to .\/spikes\ repository source files.
Added Token.java to .\/spikes\ repository source files.
Added GertHerbActivity.java to .\/spikes\ repository source files.
Added GertHerbApplication.java to .\/spikes\ repository source files.
Added GertHerbAuthenticationActivity.java to .\/spikes\ repository source files.
Added TypefaceFactory.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added ViewServer.java to .\/spikes\ repository source files.
Added ViewServerManager.java to .\/spikes\ repository source files.
Added DeveloperError.java to .\/spikes\ repository source files.
Added HomeActivity.java to .\/spikes\ repository source files.
Added LoginActivity.java to .\/spikes\ repository source files.
Added LoginView.java to .\/spikes\ repository source files.
Added UserCredentials.java to .\/spikes\ repository source files.
Added FontButton.java to .\/spikes\ repository source files.
Added FontEditText.java to .\/spikes\ repository source files.
Added FontTextView.java to .\/spikes\ repository source files.
Added GithubApi.java to .\/spikes\ repository source files.
Added GithubApiFactory.java to .\/spikes\ repository source files.
Added TokenRequest.java to .\/spikes\ repository source files.
Added TokenResponse.java to .\/spikes\ repository source files.
Added Dummy.java to .\/spikes\ repository source files.
Added DummyTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MainFragment.java to .\/spikes\ repository source files.
Added Attributes.java to .\/spikes\ repository source files.
Added Coordinates.java to .\/spikes\ repository source files.
Added IndicatorCoordinatesCalculator.java to .\/spikes\ repository source files.
Added LandingStrip.java to .\/spikes\ repository source files.
Added MutableCoordinates.java to .\/spikes\ repository source files.
Added OnPagerAdapterChangedListener.java to .\/spikes\ repository source files.
Added PagerAdapterObserver.java to .\/spikes\ repository source files.
Added Scrollable.java to .\/spikes\ repository source files.
Added ScrollingPageChangeListener.java to .\/spikes\ repository source files.
Added State.java to .\/spikes\ repository source files.
Added TabsContainer.java to .\/spikes\ repository source files.
Added CustomLandingStrip.java to .\/spikes\ repository source files.
Added CustomTabActivity.java to .\/spikes\ repository source files.
Added ExampleRainbowLandingStrip.java to .\/spikes\ repository source files.
Added FixedWidthTabActivity.java to .\/spikes\ repository source files.
Added NoFragmentsSimpleTextTabActivity.java to .\/spikes\ repository source files.
Added Data.java to .\/spikes\ repository source files.
Added DemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added SmallDemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerFragment.java to .\/spikes\ repository source files.
Added DemoViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapterState.java to .\/spikes\ repository source files.
Added SimpleTextTabActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AbTestingParamsLoadedCallback.java to .\/spikes\ repository source files.
Added AyBe.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added WeakStartCallback.java to .\/spikes\ repository source files.
Added LeakActivity.java to .\/spikes\ repository source files.
Added NoLeakActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added Bar.java to .\/spikes\ repository source files.
Added Foo.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added FooTest.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added ColorScheme.java to .\/spikes\ repository source files.
Added ColorUtils.java to .\/spikes\ repository source files.
Added DominantColorCalculator.java to .\/spikes\ repository source files.
Added FloatUtils.java to .\/spikes\ repository source files.
Added MedianCutQuantizer.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added PayPalFragment.java to .\/spikes\ repository source files.
Added PayPalHelper.java to .\/spikes\ repository source files.
Added MaxLengthMessageComposer.java to .\/spikes\ repository source files.
Added MessageComposer.java to .\/spikes\ repository source files.
Added TwitterMessageComposer.java to .\/spikes\ repository source files.
Added DisabledMruPersister.java to .\/spikes\ repository source files.
Added MruPersister.java to .\/spikes\ repository source files.
Added SharedPreferencesMruPersister.java to .\/spikes\ repository source files.
Added OnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added PriorityShareDialog.java to .\/spikes\ repository source files.
Added PrioritySharer.java to .\/spikes\ repository source files.
Added ShareTargetsAdapter.java to .\/spikes\ repository source files.
Added SimpleOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added TargetApps.java to .\/spikes\ repository source files.
Added TwitterOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AdvancedActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SimpleActivity.java to .\/spikes\ repository source files.
Added LockingActivity.java to .\/spikes\ repository source files.
Added PostLockingActivity.java to .\/spikes\ repository source files.
Added PreLockingActivity.java to .\/spikes\ repository source files.
Added DummyAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added NovoStaggeredGridView.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SpikeApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SwipeableView.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MyClass.java to .\/spikes\ repository source files.
Added MyClassTest.java to .\/spikes\ repository source files.
Added MyAndroidClassTest.java to .\/spikes\ repository source files.
Added RobolectricGradleTestRunner.java to .\/spikes\ repository source files.
Added Mapper.java to .\/spikes\ repository source files.
Added Query.java to .\/spikes\ repository source files.
Added TypedResolver.java to .\/spikes\ repository source files.
Added CursorList.java to .\/spikes\ repository source files.
Added CursorListIterator.java to .\/spikes\ repository source files.
Added CursorMarshaller.java to .\/spikes\ repository source files.
Added EmptyListIterator.java to .\/spikes\ repository source files.
Added ReflectionCursorMarshaller.java to .\/spikes\ repository source files.
Added RichClass.java to .\/spikes\ repository source files.
Added Setter.java to .\/spikes\ repository source files.
Added Function.java to .\/spikes\ repository source files.
Added TypedElementLoader.java to .\/spikes\ repository source files.
Added TypedLoader.java to .\/spikes\ repository source files.
Added Marshaller.java to .\/spikes\ repository source files.
Added ObjectMapper.java to .\/spikes\ repository source files.
Added TypedActivity.java to .\/spikes\ repository source files.
Added StringUtil.java to .\/spikes\ repository source files.
Added MyObject.java to .\/spikes\ repository source files.
Added MediaPlayerSwitcherActivity.java to .\/spikes\ repository source files.
Added VideoPlayerService.java to .\/spikes\ repository source files.
Added RelativeLayoutWithForeground.java to .\/spikes\ repository source files.
Added DemoActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added RecognitionService.java to .\/spikes\ repository source files.
Added SessionService.java to .\/spikes\ repository source files.
Added SettingsActivity.java to .\/spikes\ repository source files.
Added SmartContextInteractionService.java to .\/spikes\ repository source files.
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
final DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close) {

            @Override
            public void onDrawerClosed(View drawerView) {
                super.onDrawerClosed(drawerView);
                // waiting for the drawer to close, then navigating seems to cause issue.
                // why wait for the drawer to close? jankiness.
                if (pendingNavigationClick != null) {
                    startActivity(pendingNavigationClick);
                    pendingNavigationClick = null;
                }
            }

        };
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close);
b=getIntent().getExtras()
Bundle b = getIntent().getExtras();
mShouldStartPlayback=b.getBoolean("shouldStart")
boolean mShouldStartPlayback = b.getBoolean("shouldStart");
startPosition=b.getInt("startPosition",0)
int startPosition = b.getInt("startPosition", 0);
currentPos=mVideoView.getCurrentPosition()
int currentPos = mVideoView.getCurrentPosition();
String msg;
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, mDisplaySize.y + getActionBar().getHeight());
mm=mSelectedMedia.getMetadata()
MediaMetadata mm = mSelectedMedia.getMetadata();
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, (int) (mDisplaySize.x * ASPECT_RATIO));
WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
width=display.getWidth()
int width = display.getWidth();
height=display.getHeight()
int height = display.getHeight();
int resourceId = 0;
String videoUrl = "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4#sthash.rJ5rPZy8.dpuf";
String title = "Jahre Philharmonie";
String description = "Awesome film you must watch!";
String author = "Blundell";
String thumbUrl = "http://www.ustream.tv/blog/wp-content/uploads/2013/10/simply-go-live.png";
MediaMetadata metadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE);
mediaInfo=new MediaInfo.Builder(videoUrl).setMetadata(metadata).setStreamType(MediaInfo.STREAM_TYPE_BUFFERED).setContentType("video/mp4").build()
MediaInfo mediaInfo = new MediaInfo.Builder(videoUrl)
                        .setMetadata(metadata)
                        .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)
                        .setContentType("video/mp4")
                        .build();
Intent intent = new Intent(MainActivity.this, LocalPlayerActivity.class);
preferences=getPreferences(MODE_PRIVATE)
SharedPreferences preferences = getPreferences(MODE_PRIVATE);
defaultSmsPackage=Telephony.Sms.getDefaultSmsPackage(this)
String defaultSmsPackage = Telephony.Sms.getDefaultSmsPackage(this);
Intent intent = new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
availableAppProvider=EasyCustomTabs.getInstance()
AvailableAppProvider availableAppProvider = EasyCustomTabs.getInstance();
ConnectedClient connectedClient = new ConnectedClient(client);
binder=Binder.newInstance()
Binder binder = Binder.newInstance();
List<Composer> composerList = new ArrayList<>();
customTabsSession=connection.newSession()
CustomTabsSession customTabsSession = connection.newSession();
CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(customTabsSession);
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
context=EasyCustomTabs.getInstance().getContext()
Context context = EasyCustomTabs.getInstance().getContext();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
packagesSupportingCustomTabs=getPackagesSupportingCustomTabs()
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
defaultPackage=getDefaultPackage()
String defaultPackage = getDefaultPackage();
defaultActivityInfo=packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK,0)
ResolveInfo defaultActivityInfo = packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK, 0);
String packageName = defaultActivityInfo.activityInfo.packageName;
resolvedInfoList=packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK,0)
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<String> packagesSupportingCustomTabs = new ArrayList<>();
Intent serviceIntent = new Intent();
bestPackageFinder=BestPackageFinder.newInstance()
BestPackageFinder bestPackageFinder = BestPackageFinder.newInstance();
packageName=bestPackageFinder.findBestPackage()
String packageName = bestPackageFinder.findBestPackage();
resolveInfo=createResolveInfoFor(packageName)
ResolveInfo resolveInfo = createResolveInfoFor(packageName);
ResolveInfo resolveInfo = new ResolveInfo();
List<ResolveInfo> resolveInfoList = new ArrayList<>();
defaultPackageResolveInfo=createResolveInfoFor(packageName)
ResolveInfo defaultPackageResolveInfo = createResolveInfoFor(packageName);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
oldestApiMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage oldestApiMessage = apiMessages.get(apiMessages.size() - 1);
String lastResponseEpochTime = oldestApiMessage.timeStamp;
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
latestMessage=latestMessages.get(latestMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage latestMessage = latestMessages.get(latestMessages.size() - 1);
latestMessageDateTime=convertToLocalDateTime(latestMessage.timeStamp)
LocalDateTime latestMessageDateTime = convertToLocalDateTime(latestMessage.timeStamp);
List<ChannelHistory.Message> messages = new ArrayList<>();
historyFrom=getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1))
LocalDateTime historyFrom = getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1));
historyTo=getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0))
LocalDateTime historyTo = getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0));
String text = apiMessage.text;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
lastMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage lastMessage = apiMessages.get(apiMessages.size() - 1);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
firstMessage=apiMessages.get(0)
ApiPagedChannelHistory.ApiMessage firstMessage = apiMessages.get(0);
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
String slackToken = args[0];
retrofit=new Retrofit.Builder().baseUrl("https://slack.com/api/").addConverterFactory(GsonConverterFactory.create()).build()
Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://slack.com/api/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();
slackWebService=retrofit.create(SlackWebService.class)
SlackWebService slackWebService = retrofit.create(SlackWebService.class);
slackHistoryFetcher=SlackHistoryFetcher.from(slackWebService,slackToken)
SlackHistoryFetcher slackHistoryFetcher = SlackHistoryFetcher.from(slackWebService, slackToken);
start=LocalDateTime.now()
LocalDateTime start = LocalDateTime.now();
end=LocalDateTime.now().minusDays(7)
LocalDateTime end = LocalDateTime.now().minusDays(7);
channelHistory=slackHistoryFetcher.getChannelHistory(start,end)
ChannelHistory channelHistory = slackHistoryFetcher.getChannelHistory(start, end);
HistoryConverter historyConverter = new HistoryConverter();
ApiPagedResponse apiPagedResponse = new ApiPagedResponse(start);
response=fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime())
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
apiPagedChannelHistory=response.body()
ApiPagedChannelHistory apiPagedChannelHistory = response.body();
channelHistory=slackWebService.getChannelHistory(slackToken,channel,lastResponseEpochTime,NUMBER_OF_RESULTS)
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
ApiPagedChannelHistory apiPagedChannelHistory = new ApiPagedChannelHistory();
ApiPagedChannelHistory.ApiMessage apiMessage = new ApiPagedChannelHistory.ApiMessage();
final TextView textView = new TextView(context);
emptyView=findViewById(R.id.empty_view)
View emptyView = findViewById(R.id.empty_view);
final Integer action = values[0];
LoremAdapter loremAdapter = new LoremAdapter();
accounts=accountManager.getAccountsByType(accountType)
Account[] accounts = accountManager.getAccountsByType(accountType);
Bundle result;
Bundle result;
Bundle result = new Bundle();
activity=createLoginIntent(context,accountType,authTokenType,requiredFeatures,options)
Intent activity = createLoginIntent(context, accountType, authTokenType, requiredFeatures, options);
Bundle bundle = new Bundle();
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
accounts=accountManager.getAccountsByType(authTokenType)
Account[] accounts = accountManager.getAccountsByType(authTokenType);
bundle=createResponseBundle(token)
Bundle bundle = createResponseBundle(token);
accountManager=AccountManager.get(this.getApplicationContext())
AccountManager accountManager = AccountManager.get(this.getApplicationContext());
Account account = new Account(token.getUserName(), getAccountName());
Bundle bundle = new Bundle();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
GertHerbAuthenticator authenticator = new GertHerbAuthenticator(this);
fontId=getFontId(context,attrs)
int fontId = getFontId(context, attrs);
fontType=getFontType(fontId)
FontType fontType = getFontType(fontId);
typedArray=context.obtainStyledAttributes(attrs,R.styleable.CustomTextAppearance)
TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CustomTextAppearance);
typeface=createTypeFace(context,fontType)
Typeface typeface = createTypeFace(context, fontType);
info=context.getApplicationInfo()
ApplicationInfo info = context.getApplicationInfo();
name=activity.getTitle().toString()
String name = activity.getTitle().toString();
client=mServer.accept()
Socket client = mServer.accept();
boolean result;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
BufferedReader in = null;
request=in.readLine()
final String request = in.readLine();
String command;
String parameters;
index=request.indexOf(' ')
int index = request.indexOf(' ');
boolean result;
boolean success = true;
BufferedWriter out = null;
index=parameters.indexOf(' ')
int index = parameters.indexOf(' ');
code=parameters.substring(0,index)
final String code = parameters.substring(0, index);
int hashCode = (int) Long.parseLong(code, 16);
window=findWindow(hashCode)
final View window = findWindow(hashCode);
dispatch=ViewDebug.class.getDeclaredMethod("dispatchCommand",View.class,String.class,String.class,OutputStream.class)
final Method dispatch = ViewDebug.class.getDeclaredMethod("dispatchCommand",
                        View.class, String.class, String.class, OutputStream.class);
View window = null;
boolean result = true;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
boolean result = true;
String focusName = null;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
View focusedWindow = null;
BufferedWriter out = null;
boolean needWindowListUpdate = false;
boolean needFocusedWindowUpdate = false;
BetterAccountManager accountManager = new BetterAccountManager(this, getString(R.string.account_type), getString(R.string.token_type), null);
loginView=Views.findById(this,R.id.login_view)
LoginView loginView = Views.findById(this, R.id.login_view);
authorizationApi=new GithubApiFactory().createAuthorizationApi(credentials.username,credentials.password)
GithubApi authorizationApi = new GithubApiFactory().createAuthorizationApi(credentials.username, credentials.password);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
Endpoint endpoint = new Endpoint() {
            @Override
            public String getUrl() {
                return GITHUB_API_URL;
            }

            @Override
            public String getName() {
                return "Live";
            }
        };
interceptor=createAuthorizationRequestInterceptor(username,password)
RequestInterceptor interceptor = createAuthorizationRequestInterceptor(username, password);
restAdapter=createRestAdapter(endpoint,interceptor)
RestAdapter restAdapter = createRestAdapter(endpoint, interceptor);
Dummy dummy = new Dummy();
result=dummy.explodes()
boolean result = dummy.explodes();
String base64EncodedPublicKey = "CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE";
premiumPurchase=inventory.getPurchase(SKU_PREMIUM)
Purchase premiumPurchase = inventory.getPurchase(SKU_PREMIUM);
infiniteGasPurchase=inventory.getPurchase(SKU_INFINITE_GAS)
Purchase infiniteGasPurchase = inventory.getPurchase(SKU_INFINITE_GAS);
gasPurchase=inventory.getPurchase(SKU_GAS)
Purchase gasPurchase = inventory.getPurchase(SKU_GAS);
String payload = "";
String payload = "";
String payload = "";
payload=p.getDeveloperPayload()
String payload = p.getDeveloperPayload();
int index = mTank >= TANK_RES_IDS.length ? TANK_RES_IDS.length - 1 : mTank;
AlertDialog.Builder bld = new AlertDialog.Builder(this);
spe=getPreferences(MODE_PRIVATE).edit()
SharedPreferences.Editor spe = getPreferences(MODE_PRIVATE).edit();
sp=getPreferences(MODE_PRIVATE)
SharedPreferences sp = getPreferences(MODE_PRIVATE);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                                  + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                    | ((source[d + 1 + off] << 24) >>> 16)
                    | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                    | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                                   "-1002:Bad response received/" +
                                   "-1003:Purchase signature verification failed/" +
                                   "-1004:Send intent failed/" +
                                   "-1005:User cancelled/" +
                                   "-1006:Unknown purchase response/" +
                                   "-1007:Missing token/" +
                                   "-1008:Unknown error/" +
                                   "-1009:Subscriptions not available/" +
                                   "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(),
                    itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                        | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                        | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                            | ((source[d + 1 + off] << 24) >>> 16)
                            | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                            | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                "-1002:Bad response received/" +
                "-1003:Purchase signature verification failed/" +
                "-1004:Send intent failed/" +
                "-1005:User cancelled/" +
                "-1006:Unknown purchase response/" +
                "-1007:Missing token/" +
                "-1008:Unknown error/" +
                "-1009:Subscriptions not available/" +
                "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(), itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
responseCode=result.getResponse()
int responseCode = result.getResponse();
sku=purchase.getSku()
String sku = purchase.getSku();
skuDetails=inv.getSkuDetails(sku)
SkuDetails skuDetails = inv.getSkuDetails(sku);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
Button purchaseFiveButton = (Button) rootView.findViewById(R.id.fragment_main_button_purchase_five_coins);
xml=context.obtainStyledAttributes(attrs,R.styleable.LandingStrip)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.LandingStrip);
tabLayoutId=xml.getResourceId(R.styleable.LandingStrip_tabLayoutId,MISSING_TAB_LAYOUT_ID)
int tabLayoutId = xml.getResourceId(R.styleable.LandingStrip_tabLayoutId, MISSING_TAB_LAYOUT_ID);
indicatorColour=xml.getResourceId(R.styleable.LandingStrip_indicatorColor,DEFAULT_INDICATOR_COLOUR)
int indicatorColour = xml.getResourceId(R.styleable.LandingStrip_indicatorColor, DEFAULT_INDICATOR_COLOUR);
indicatorHeight=getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight,DEFAULT_INDICATOR_HEIGHT,xml)
int indicatorHeight = getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight, DEFAULT_INDICATOR_HEIGHT, xml);
tabsPaddingLeft=getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingLeft = getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding, DEFAULT_TABS_PADDING, xml);
tabsPaddingRight=getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingRight = getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding, DEFAULT_TABS_PADDING, xml);
MutableCoordinates drawCurrentTabCoordinates = new MutableCoordinates();
MutableCoordinates drawNextTabCoordinates = new MutableCoordinates();
MutableCoordinates drawMovingIndicatorCoordinates = new MutableCoordinates();
currentTab=tabsContainer.getTabAt(currentPosition)
View currentTab = tabsContainer.getTabAt(currentPosition);
currentTabStart=currentTab.getLeft()
float currentTabStart = currentTab.getLeft();
currentTabEnd=currentTab.getRight()
float currentTabEnd = currentTab.getRight();
nextTab=tabsContainer.getTabAt(currentPosition + 1)
View nextTab = tabsContainer.getTabAt(currentPosition + 1);
nextTabPositionOffset=getFractionFrom(pagePositionOffset)
float nextTabPositionOffset = getFractionFrom(pagePositionOffset);
indicatorStart=getIndicatorPosition(nextTab.getStart(),pagePositionOffset,currentTab.getStart(),nextTabPositionOffset)
float indicatorStart = getIndicatorPosition(nextTab.getStart(), pagePositionOffset, currentTab.getStart(), nextTabPositionOffset);
indicatorEnd=getIndicatorPosition(nextTab.getEnd(),pagePositionOffset,currentTab.getEnd(),nextTabPositionOffset)
float indicatorEnd = getIndicatorPosition(nextTab.getEnd(), pagePositionOffset, currentTab.getEnd(), nextTabPositionOffset);
height=getHeight()
int height = getHeight();
tabCount=pagerAdapter.getCount()
int tabCount = pagerAdapter.getCount();
title=pagerAdapter.getPageTitle(position)
CharSequence title = pagerAdapter.getPageTitle(position);
inflatedTabView=tabsContainer.inflateTab(layoutInflater,attributes.getTabLayoutId())
View inflatedTabView = tabsContainer.inflateTab(layoutInflater, attributes.getTabLayoutId());
int position = (int) view.getTag(TAG_KEY_POSITION);
scrollOffset=getHorizontalScrollOffset(position,positionOffset)
int scrollOffset = getHorizontalScrollOffset(position, positionOffset);
newScrollX=calculateScrollOffset(position,scrollOffset,positionOffset)
float newScrollX = calculateScrollOffset(position, scrollOffset, positionOffset);
tabWidth=tabsContainer.getTabAt(position).getWidth()
int tabWidth = tabsContainer.getTabAt(position).getWidth();
tabForPosition=tabsContainer.getTabAt(position)
View tabForPosition = tabsContainer.getTabAt(position);
float tabStartX = tabForPosition.getLeft() + scrollOffset;
int viewMiddleOffset = getTabParentWidth() / 2;
float tabCenterOffset = (tabForPosition.getRight() - tabForPosition.getLeft()) * 0.5F;
nextTabDelta=getNextTabDelta(position,pagerOffset,tabForPosition)
float nextTabDelta = getNextTabDelta(position, pagerOffset, tabForPosition);
LinearLayout tabsContainerView = new LinearLayout(context);
tab=getTabAt(index)
View tab = getTabAt(index);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
position=indicatorCoordinates.getStart()
float position = indicatorCoordinates.getStart();
lastTabOffset=((ViewGroup)getChildAt(0)).getChildAt(getChildCount() - 1).getWidth()
float lastTabOffset = ((ViewGroup) getChildAt(0)).getChildAt(getChildCount() - 1).getWidth();
frequency=getOneCycle(lastTabOffset)
float frequency = getOneCycle(lastTabOffset);
r=toHex(calculateColour(position,frequency,PHASE_RED,AMPLITUDE,CENTER_FREQUENCY))
String r = toHex(calculateColour(position, frequency, PHASE_RED, AMPLITUDE, CENTER_FREQUENCY));
g=toHex(calculateColour(position,frequency,PHASE_GREEN,AMPLITUDE,CENTER_FREQUENCY))
String g = toHex(calculateColour(position, frequency, PHASE_GREEN, AMPLITUDE, CENTER_FREQUENCY));
b=toHex(calculateColour(position,frequency,PHASE_BLUE,AMPLITUDE,CENTER_FREQUENCY))
String b = toHex(calculateColour(position, frequency, PHASE_BLUE, AMPLITUDE, CENTER_FREQUENCY));
height=getHeight()
int height = getHeight();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPagerFragment viewPagerFragment = new ViewPagerFragment();
Bundle bundle = new Bundle();
TextView view = (TextView) layoutInflater.inflate(R.layout.view_demo, container, false);
currentPosition=viewPagerAdapterState.getCurrentPosition()
int currentPosition = viewPagerAdapterState.getCurrentPosition();
view=getView(container,position)
View view = getView(container, position);
parcelableSparseArray=viewPagerAdapterState.get(position)
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
View view = (View) object;
SparseArray<Parcelable> viewState = new SparseArray<>();
position=entry.getValue()
int position = entry.getValue();
view=entry.getKey()
View view = entry.getKey();
bundle=in.readBundle()
Bundle bundle = in.readBundle();
Map<Integer, SparseArray<Parcelable>> viewStates = new HashMap<>(bundle.keySet().size());
sparseParcelableArray=bundle.getSparseParcelableArray(key)
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
primaryItemPosition=in.readInt()
int primaryItemPosition = in.readInt();
Bundle bundle = new Bundle();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
final TextView abText = (TextView) findViewById(R.id.ab_text);
final AyBe ayBe = new AyBe();
id=item.getItemId()
int id = item.getItemId();
callback=weakCallback.get()
AbTestingParamsLoadedCallback callback = weakCallback.get();
WeakReference<NoLeakActivity> weakNoLeakActivity = new WeakReference<NoLeakActivity>(noLeakActivity);
noLeakActivity=weakNoLeakActivity.get()
NoLeakActivity noLeakActivity = weakNoLeakActivity.get();
RecyclerView recyclerView = (RecyclerView) layoutInflater.inflate(R.layout.view_page, viewGroup, false);
itemView=layoutInflater.inflate(R.layout.view_item,parent,false)
View itemView = layoutInflater.inflate(R.layout.view_item, parent, false);
actual=foo.twice(HALF)
int actual = foo.twice(HALF);
int expected = WHOLE;
final float inverseRatio = 1f - ratio;
float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRatio);
float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRatio);
float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRatio);
hsv=node.getHsv()
float[] hsv = node.getHsv();
width=bitmap.getWidth()
final int width = bitmap.getWidth();
height=bitmap.getHeight()
final int height = bitmap.getHeight();
final int[] rgbPixels = new int[width * height];
final MedianCutQuantizer mcq = new MedianCutQuantizer(rgbPixels, NUM_COLORS);
primaryAccentColor=findPrimaryAccentColor()
final ColorNode primaryAccentColor = findPrimaryAccentColor();
secondaryAccentColor=findSecondaryAccentColor(primaryAccentColor)
final ColorNode secondaryAccentColor = findSecondaryAccentColor(primaryAccentColor);
tertiaryAccentColor=findTertiaryAccentColor(primaryAccentColor,secondaryAccentColor)
final int tertiaryAccentColor = findTertiaryAccentColor(
                primaryAccentColor, secondaryAccentColor);
primaryTextColor=findPrimaryTextColor(primaryAccentColor)
final int primaryTextColor = findPrimaryTextColor(primaryAccentColor);
secondaryTextColor=findSecondaryTextColor(primaryAccentColor)
final int secondaryTextColor = findSecondaryTextColor(primaryAccentColor);
final float primaryHue = primary.getHsv()[0];
final float candidateHue = candidate.getHsv()[0];
copy=Arrays.copyOf(palette,palette.length)
final MedianCutQuantizer.ColorNode[] copy = Arrays.copyOf(palette, palette.length);
maxCount=palette[0].getCount()
final float maxCount = palette[0].getCount();
lhsWeight=calculateWeight(lhs,maxCount)
final float lhsWeight = calculateWeight(lhs, maxCount);
rhsWeight=calculateWeight(rhs,maxCount)
final float rhsWeight = calculateWeight(rhs, maxCount);
float sum = 0;
float sumWeight = 0;
float value = values[i];
float weight = values[i + 1];
ColorHistogram colorHist = new ColorHistogram(pixels);
K=colorHist.getNumberOfColors()
int K = colorHist.getNumberOfColors();
ColorNode[] rCols = null;
rgb=colorHist.getColor(i)
int rgb = colorHist.getColor(i);
cnt=colorHist.getCount(i)
int cnt = colorHist.getCount(i);
ColorBox initialBox = new ColorBox(0, K - 1, 0);
List<ColorBox> colorSet = new ArrayList<ColorBox>();
int k = 1;
boolean done = false;
nextBox=findBoxToSplit(colorSet)
ColorBox nextBox = findBoxToSplit(colorSet);
newBox=nextBox.splitBox()
ColorBox newBox = nextBox.splitBox();
color=findClosestColor(pixels[i])
ColorNode color = findClosestColor(pixels[i]);
idx=findClosestColorIndex(rgb)
int idx = findClosestColorIndex(rgb);
red=Color.red(rgb)
int red = Color.red(rgb);
grn=Color.green(rgb)
int grn = Color.green(rgb);
blu=Color.blue(rgb)
int blu = Color.blue(rgb);
int minIdx = 0;
int minDistance = Integer.MAX_VALUE;
ColorNode color = quantColors[i];
d2=color.distance2(red,grn,blu)
int d2 = color.distance2(red, grn, blu);
ColorBox boxToSplit = null;
int minLevel = Integer.MAX_VALUE;
n=colorBoxes.size()
int n = colorBoxes.size();
ColorNode[] avgColors = new ColorNode[n];
int i = 0;
int dr = this.red - red;
int dg = this.grn - grn;
int db = this.blu - blu;
ColorNode color = imageColors[i];
int r = color.red;
int g = color.grn;
int b = color.blu;
dim=getLongestColorDimension()
ColorDimension dim = getLongestColorDimension();
med=findMedian(dim)
int med = findMedian(dim);
int nextLevel = level + 1;
ColorBox newBox = new ColorBox(med + 1, upper, nextLevel);
int rLength = rmax - rmin;
int gLength = gmax - gmin;
int bLength = bmax - bmin;
int half = count / 2;
int nPixels, median;
int rSum = 0;
int gSum = 0;
int bSum = 0;
int n = 0;
ColorNode ci = imageColors[i];
int cnt = ci.cnt;
double nd = n;
int avgRed = (int) (0.5 + rSum / nd);
int avgGrn = (int) (0.5 + gSum / nd);
int avgBlu = (int) (0.5 + bSum / nd);
s=this.getClass().getSimpleName()
String s = this.getClass().getSimpleName();
int i = 0;
int N = pixelsOrig.length;
int[] pixelsCpy = new int[N];
int k = -1;
int curColor = -1;
int nColors = k + 1;
id=item.getItemId()
int id = item.getItemId();
Intent intent = new Intent();
bitmap=((BitmapDrawable)imageView.getDrawable()).getBitmap()
Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap();
DominantColorCalculator dominantColorCalculator = new DominantColorCalculator(bitmap);
selectedImageUri=data.getData()
Uri selectedImageUri = data.getData();
selectedImagePath=getPath(selectedImageUri)
String selectedImagePath = getPath(selectedImageUri);
String[] projection = {MediaStore.Images.Media.DATA};
cursor=managedQuery(uri,projection,null,null,null)
Cursor cursor = managedQuery(uri, projection, null, null, null);
column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)
int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
LinearLayout rootView = (LinearLayout) inflater.inflate(R.layout.fragment_main, container, false);
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
preapprovalButton=payPal.getCheckoutButton(getActivity(),PayPal.BUTTON_194x37,CheckoutButton.TEXT_PAY)
CheckoutButton preapprovalButton = payPal.getCheckoutButton(getActivity(), PayPal.BUTTON_194x37, CheckoutButton.TEXT_PAY);
preapprovalIntent=payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY)
Intent preapprovalIntent = payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY);
String resultTitle = "";
String resultInfo = "";
String resultExtra = "";
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
PayPalPreapproval preapproval = new PayPalPreapproval();
preapproval=createPreapproval(preapprovalKey)
PayPalPreapproval preapproval = createPreapproval(preapprovalKey);
Bundle bundle = new Bundle();
int availableLength = maxLength;
StringBuilder stringBuilder = new StringBuilder(maxLength);
prefixAndSuffixLength=computeAppendedLengthIncludingSeparatorSpaces(prefix,suffix)
int prefixAndSuffixLength = computeAppendedLengthIncludingSeparatorSpaces(prefix, suffix);
urlLength=computeUrlLengthIncludingSeparatorSpace(url)
int urlLength = computeUrlLengthIncludingSeparatorSpace(url);
trimmedSubject=ellipsizeTextIfExceedsMaxLength(subject,availableLength)
String trimmedSubject = ellipsizeTextIfExceedsMaxLength(subject, availableLength);
int length = 0;
preferences=context.getSharedPreferences(MRU_PREFERENCES,Context.MODE_PRIVATE)
SharedPreferences preferences = context.getSharedPreferences(MRU_PREFERENCES, Context.MODE_PRIVATE);
args=getArguments()
Bundle args = getArguments();
themeResId=getThemeResIdIfProvidedIn(args)
int themeResId = getThemeResIdIfProvidedIn(args);
title=getTitleIfProvidedIn(args)
CharSequence title = getTitleIfProvidedIn(args);
builder=createDialogBuilder(themeResId).setCancelable(true).setView(dialogView)
AlertDialog.Builder builder = createDialogBuilder(themeResId)
                .setCancelable(true)
                .setView(dialogView);
inflater=getActivity().getLayoutInflater()
LayoutInflater inflater = getActivity().getLayoutInflater();
GridView gridView = (GridView) rootView.findViewById(R.id.ps__dialog_grid);
targetApps=extractTargetAppsFrom(args)
TargetApps targetApps = extractTargetAppsFrom(args);
allShareTargets=getAvailableShareTargets(sharingIntent)
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
priorityAppInfos=createPriorityResolveInfoList(targetApps,allShareTargets)
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
otherAppInfos=createOtherAppsResolveInfoList(priorityAppInfos,allShareTargets)
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
resolveInfos=targetApps.extractTargetResolveInfosFrom(allShareTargets)
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
mruResolveInfo=findMruResolveInfoIn(allShareTargets)
ResolveInfo mruResolveInfo = findMruResolveInfoIn(allShareTargets);
List<ResolveInfo> otherAppsInfos = new ArrayList<ResolveInfo>(allAppInfos);
mruPackageName=persister.getLastUsedTarget()
String mruPackageName = persister.getLastUsedTarget();
String packageName = resolveInfo.activityInfo.packageName;
packageManager=getActivity().getPackageManager()
PackageManager packageManager = getActivity().getPackageManager();
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
View buttonStrip = (View) showMoreButton.getParent();
gridView=getGridView()
GridView gridView = getGridView();
intent=wrapIntentWithExplicitTargetComponentForItem(position,sharingIntent)
Intent intent = wrapIntentWithExplicitTargetComponentForItem(position, sharingIntent);
Intent intent = new Intent(sharingIntent);
ActivityInfo activity = adapter.getItem(position).activityInfo;
ComponentName name = new ComponentName(activity.applicationInfo.packageName, activity.name);
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
PriorityShareDialog dialog = new PriorityShareDialog();
Bundle args = new Bundle();
sharingIntent=createSharingIntent()
Intent sharingIntent = createSharingIntent();
fragmentManager=activity.getFragmentManager()
FragmentManager fragmentManager = activity.getFragmentManager();
Intent intent = new Intent(Intent.ACTION_SEND);
dialog=new PriorityShareDialog.Builder().setTitle(title).setTargetApps(targetApps).setSharingIntent(sharingIntent).setOnPrepareSharingIntentListener(listener).setShowMostRecentlyUsed(showMostRecentlyUsed).build()
PriorityShareDialog dialog = new PriorityShareDialog.Builder()
                .setTitle(title)
                .setTargetApps(targetApps)
                .setSharingIntent(sharingIntent)
                .setOnPrepareSharingIntentListener(listener)
                .setShowMostRecentlyUsed(showMostRecentlyUsed)
                .build();
PrioritySharer prioritySharer = new PrioritySharer();
prioritySharer=build()
PrioritySharer prioritySharer = build();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
layoutInflater=LayoutInflater.from(context)
LayoutInflater layoutInflater = LayoutInflater.from(context);
iconSizePx=getIconSizePx(context.getResources())
int iconSizePx = getIconSizePx(context.getResources());
ArrayList<ResolveInfo> sortedList = new ArrayList<ResolveInfo>(resolveInfoList);
int otherAppsCountMaybe = showAllApps ? otherAppInfos.size() : 0;
firstOtherAppsItemPosition=priorityAppInfos.size()
int firstOtherAppsItemPosition = priorityAppInfos.size();
int offsetPosition = position - firstOtherAppsItemPosition;
TextView textView;
textView=initializeItemViewIfNecessary(convertView,R.layout.ps__grid_item_share,parent)
TextView textView = initializeItemViewIfNecessary(convertView, R.layout.ps__grid_item_share, parent);
info=getItem(position)
ResolveInfo info = getItem(position);
icon=info.loadIcon(packageManager)
Drawable icon = info.loadIcon(packageManager);
arraySize=in.readInt()
int arraySize = in.readInt();
String[] packageNames = new String[arraySize];
arraySize=targetPackages.size()
int arraySize = targetPackages.size();
String[] packagesArray = new String[arraySize];
SparseArray<ResolveInfo> matchedResolveInfos = new SparseArray<ResolveInfo>(targetPackages.size());
String packageName = info.activityInfo.packageName;
index=indexOfItemInto(packageName,targetPackages)
int index = indexOfItemInto(packageName, targetPackages);
sparseArraySize=sparseArray.size()
int sparseArraySize = sparseArray.size();
ArrayList<T> list = new ArrayList<T>(sparseArraySize);
int i = 0;
originalSubject=intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT)
CharSequence originalSubject = intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT);
String subject = originalSubject != null ? originalSubject.toString() : null;
composer=createComposer()
MessageComposer composer = createComposer();
component=intent.getComponent()
ComponentName component = intent.getComponent();
targetPackageName=component.getPackageName()
String targetPackageName = component.getPackageName();
adapter=ArrayAdapter.createFromResource(this,R.array.target_apps,android.R.layout.simple_spinner_item)
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
EditText text = (EditText) findViewById(R.id.text);
EditText title = (EditText) findViewById(R.id.title);
EditText mimeType = (EditText) findViewById(R.id.mime_type);
EditText dataUri = (EditText) findViewById(R.id.data_uri);
Switch showMostRecentlyUsed = (Switch) findViewById(R.id.show_most_recently_used);
uriString=dataUri.getText().toString()
String uriString = dataUri.getText().toString();
EditText text = (EditText) findViewById(R.id.text);
TextView textView = (TextView) convertView.findViewById(R.id.positionView);
colorView=convertView.findViewById(R.id.colorView)
View colorView = convertView.findViewById(R.id.colorView);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
offset=headerPlaceholder.getTop()
int offset = headerPlaceholder.getTop();
Integer item = COLORS[position];
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
firstVisiblePosition=grid.getFirstVisiblePosition()
int firstVisiblePosition = grid.getFirstVisiblePosition();
inflate=getViewForPosition(container,position)
View inflate = getViewForPosition(container, position);
id=item.getItemId()
int id = item.getItemId();
MyActivity activity = new MyActivity();
String manifestProperty = "../app/src/main/AndroidManifest.xml";
String resProperty = "../app/src/main/res";
cursor=resolver.query(uri,projection,selection,selectionArgs,null)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, null);
cursor=resolver.query(uri,projection,selection,selectionArgs,sortOrder)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, sortOrder);
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=richClass.setter(name)
Method setter = richClass.setter(name);
T obj;
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=methodsByName.get(name)
Method setter = methodsByName.get(name);
int type = TYPE_INT;
Class<?> t = setter.getParameterTypes()[0];
Class<?> t = setter.getParameterTypes()[0];
cursorType=cursor.getType(index)
final int cursorType = cursor.getType(index);
final Object obj;
s=f.getAnnotation(Mapper.class)
Mapper s = f.getAnnotation(Mapper.class);
mm=m.getAnnotation(Mapper.class)
Mapper mm = m.getAnnotation(Mapper.class);
methodName=StringUtil.asCamelifySetMethod(what)
String methodName = StringUtil.asCamelifySetMethod(what);
cursor=getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,null,null,null,null)
Cursor cursor = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
now=System.currentTimeMillis()
long now = System.currentTimeMillis();
List<Contact2> typedCursor = new CursorList<Contact2>(cursor, Contact2.class);
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[a-zA-Z0-9]+")
Pattern p = Pattern.compile("[a-zA-Z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[A-Z][a-z0-9]+")
Pattern p = Pattern.compile("[A-Z][a-z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
SurfaceView first = (SurfaceView) findViewById(R.id.firstSurface);
SurfaceView second = (SurfaceView) findViewById(R.id.secondSurface);
Intent pickVideo = new Intent(Intent.ACTION_PICK);
xml=context.obtainStyledAttributes(attrs,R.styleable.RelativeLayoutWithForeground)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.RelativeLayoutWithForeground);
int foregroundResId = INVALID_FOREGROUND_ID;
drawable=getDrawable(getResources(),foregroundResId)
Drawable drawable = getDrawable(getResources(), foregroundResId);
Bundle args = new Bundle();
enroll=mHotwordDetector.createEnrollIntent()
Intent enroll = mHotwordDetector.createEnrollIntent();

Diff of acf80ecab6a74ef04ab8a5fcc607968c6c48574f and a2e75f9efa72c8f3e3a18ff08102736f04bc6a49:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 6
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision acf80ecab6a74ef04ab8a5fcc607968c6c48574f to a2e75f9efa72c8f3e3a18ff08102736f04bc6a49


****Parsing for addition at revision a2e75f9efa72c8f3e3a18ff08102736f04bc6a49****

Added ApplicationTest.java to .\/spikes\ repository source files.
Added DrawerActivity.java to .\/spikes\ repository source files.
Added EarthActivity.java to .\/spikes\ repository source files.
Added SaturnActivity.java to .\/spikes\ repository source files.
Added LocalPlayerActivity.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added CastApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ComposeSmsActivity.java to .\/spikes\ repository source files.
Added HeadlessSmsSendService.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MmsReceiver.java to .\/spikes\ repository source files.
Added SmsReceiver.java to .\/spikes\ repository source files.
Added ExtendedDemoActivity.java to .\/spikes\ repository source files.
Added ExtendedDemoApplication.java to .\/spikes\ repository source files.
Added SimpleDemoActivity.java to .\/spikes\ repository source files.
Added SimpleDemoApplication.java to .\/spikes\ repository source files.
Added Binder.java to .\/spikes\ repository source files.
Added ConnectedClient.java to .\/spikes\ repository source files.
Added Connection.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnection.java to .\/spikes\ repository source files.
Added ServiceConnectionCallback.java to .\/spikes\ repository source files.
Added EasyCustomTabs.java to .\/spikes\ repository source files.
Added ActionButtonComposer.java to .\/spikes\ repository source files.
Added CloseButtonIconComposer.java to .\/spikes\ repository source files.
Added Composer.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilder.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigator.java to .\/spikes\ repository source files.
Added EasyCustomTabsWebNavigator.java to .\/spikes\ repository source files.
Added ExitAnimationsComposer.java to .\/spikes\ repository source files.
Added IntentCustomizer.java to .\/spikes\ repository source files.
Added MenuItemComposer.java to .\/spikes\ repository source files.
Added NavigationFallback.java to .\/spikes\ repository source files.
Added Navigator.java to .\/spikes\ repository source files.
Added ShowTitleComposer.java to .\/spikes\ repository source files.
Added StartAnimationsComposer.java to .\/spikes\ repository source files.
Added ToolbarColorComposer.java to .\/spikes\ repository source files.
Added UrlBarHidingComposer.java to .\/spikes\ repository source files.
Added WebNavigator.java to .\/spikes\ repository source files.
Added AvailableAppProvider.java to .\/spikes\ repository source files.
Added BestPackageFinder.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProvider.java to .\/spikes\ repository source files.
Added BinderTest.java to .\/spikes\ repository source files.
Added ConnectedClientTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnectionTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigatorTest.java to .\/spikes\ repository source files.
Added BestPackageFinderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProviderTest.java to .\/spikes\ repository source files.
Added ApiPagedChannelHistory.java to .\/spikes\ repository source files.
Added ApiPagedResponse.java to .\/spikes\ repository source files.
Added ChannelHistory.java to .\/spikes\ repository source files.
Added HistoryConverter.java to .\/spikes\ repository source files.
Added Runner.java to .\/spikes\ repository source files.
Added SlackHistoryFetcher.java to .\/spikes\ repository source files.
Added SlackWebService.java to .\/spikes\ repository source files.
Added ApiPagedResponseTest.java to .\/spikes\ repository source files.
Added MainActivityTest.java to .\/spikes\ repository source files.
Added LoremAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added BetterAccountManager.java to .\/spikes\ repository source files.
Added BetterAuthenticator.java to .\/spikes\ repository source files.
Added BetterAuthenticatorActivity.java to .\/spikes\ repository source files.
Added GertHerbAuthenticator.java to .\/spikes\ repository source files.
Added GertHerbAuthenticatorService.java to .\/spikes\ repository source files.
Added NoAccountException.java to .\/spikes\ repository source files.
Added ReactiveAuthenticatorActivity.java to .\/spikes\ repository source files.
Added Token.java to .\/spikes\ repository source files.
Added GertHerbActivity.java to .\/spikes\ repository source files.
Added GertHerbApplication.java to .\/spikes\ repository source files.
Added GertHerbAuthenticationActivity.java to .\/spikes\ repository source files.
Added TypefaceFactory.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added ViewServer.java to .\/spikes\ repository source files.
Added ViewServerManager.java to .\/spikes\ repository source files.
Added DeveloperError.java to .\/spikes\ repository source files.
Added HomeActivity.java to .\/spikes\ repository source files.
Added LoginActivity.java to .\/spikes\ repository source files.
Added LoginView.java to .\/spikes\ repository source files.
Added UserCredentials.java to .\/spikes\ repository source files.
Added FontButton.java to .\/spikes\ repository source files.
Added FontEditText.java to .\/spikes\ repository source files.
Added FontTextView.java to .\/spikes\ repository source files.
Added GithubApi.java to .\/spikes\ repository source files.
Added GithubApiFactory.java to .\/spikes\ repository source files.
Added TokenRequest.java to .\/spikes\ repository source files.
Added TokenResponse.java to .\/spikes\ repository source files.
Added Dummy.java to .\/spikes\ repository source files.
Added DummyTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MainFragment.java to .\/spikes\ repository source files.
Added Attributes.java to .\/spikes\ repository source files.
Added Coordinates.java to .\/spikes\ repository source files.
Added IndicatorCoordinatesCalculator.java to .\/spikes\ repository source files.
Added LandingStrip.java to .\/spikes\ repository source files.
Added MutableCoordinates.java to .\/spikes\ repository source files.
Added OnPagerAdapterChangedListener.java to .\/spikes\ repository source files.
Added PagerAdapterObserver.java to .\/spikes\ repository source files.
Added Scrollable.java to .\/spikes\ repository source files.
Added ScrollingPageChangeListener.java to .\/spikes\ repository source files.
Added State.java to .\/spikes\ repository source files.
Added TabsContainer.java to .\/spikes\ repository source files.
Added CustomLandingStrip.java to .\/spikes\ repository source files.
Added CustomTabActivity.java to .\/spikes\ repository source files.
Added ExampleRainbowLandingStrip.java to .\/spikes\ repository source files.
Added FixedWidthTabActivity.java to .\/spikes\ repository source files.
Added NoFragmentsSimpleTextTabActivity.java to .\/spikes\ repository source files.
Added Data.java to .\/spikes\ repository source files.
Added DemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added SmallDemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerFragment.java to .\/spikes\ repository source files.
Added DemoViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapterState.java to .\/spikes\ repository source files.
Added SimpleTextTabActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AbTestingParamsLoadedCallback.java to .\/spikes\ repository source files.
Added AyBe.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added WeakStartCallback.java to .\/spikes\ repository source files.
Added LeakActivity.java to .\/spikes\ repository source files.
Added NoLeakActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added Bar.java to .\/spikes\ repository source files.
Added Foo.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added FooTest.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added ColorScheme.java to .\/spikes\ repository source files.
Added ColorUtils.java to .\/spikes\ repository source files.
Added DominantColorCalculator.java to .\/spikes\ repository source files.
Added FloatUtils.java to .\/spikes\ repository source files.
Added MedianCutQuantizer.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added PayPalFragment.java to .\/spikes\ repository source files.
Added PayPalHelper.java to .\/spikes\ repository source files.
Added MaxLengthMessageComposer.java to .\/spikes\ repository source files.
Added MessageComposer.java to .\/spikes\ repository source files.
Added TwitterMessageComposer.java to .\/spikes\ repository source files.
Added DisabledMruPersister.java to .\/spikes\ repository source files.
Added MruPersister.java to .\/spikes\ repository source files.
Added SharedPreferencesMruPersister.java to .\/spikes\ repository source files.
Added OnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added PriorityShareDialog.java to .\/spikes\ repository source files.
Added PrioritySharer.java to .\/spikes\ repository source files.
Added ShareTargetsAdapter.java to .\/spikes\ repository source files.
Added SimpleOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added TargetApps.java to .\/spikes\ repository source files.
Added TwitterOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AdvancedActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SimpleActivity.java to .\/spikes\ repository source files.
Added LockingActivity.java to .\/spikes\ repository source files.
Added PostLockingActivity.java to .\/spikes\ repository source files.
Added PreLockingActivity.java to .\/spikes\ repository source files.
Added DummyAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added NovoStaggeredGridView.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SpikeApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SwipeableView.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MyClass.java to .\/spikes\ repository source files.
Added MyClassTest.java to .\/spikes\ repository source files.
Added MyAndroidClassTest.java to .\/spikes\ repository source files.
Added RobolectricGradleTestRunner.java to .\/spikes\ repository source files.
Added Mapper.java to .\/spikes\ repository source files.
Added Query.java to .\/spikes\ repository source files.
Added TypedResolver.java to .\/spikes\ repository source files.
Added CursorList.java to .\/spikes\ repository source files.
Added CursorListIterator.java to .\/spikes\ repository source files.
Added CursorMarshaller.java to .\/spikes\ repository source files.
Added EmptyListIterator.java to .\/spikes\ repository source files.
Added ReflectionCursorMarshaller.java to .\/spikes\ repository source files.
Added RichClass.java to .\/spikes\ repository source files.
Added Setter.java to .\/spikes\ repository source files.
Added Function.java to .\/spikes\ repository source files.
Added TypedElementLoader.java to .\/spikes\ repository source files.
Added TypedLoader.java to .\/spikes\ repository source files.
Added Marshaller.java to .\/spikes\ repository source files.
Added ObjectMapper.java to .\/spikes\ repository source files.
Added TypedActivity.java to .\/spikes\ repository source files.
Added StringUtil.java to .\/spikes\ repository source files.
Added MyObject.java to .\/spikes\ repository source files.
Added MediaPlayerSwitcherActivity.java to .\/spikes\ repository source files.
Added VideoPlayerService.java to .\/spikes\ repository source files.
Added RelativeLayoutWithForeground.java to .\/spikes\ repository source files.
Added DemoActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added RecognitionService.java to .\/spikes\ repository source files.
Added SessionService.java to .\/spikes\ repository source files.
Added SettingsActivity.java to .\/spikes\ repository source files.
Added SmartContextInteractionService.java to .\/spikes\ repository source files.
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
final DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close) {

            @Override
            public void onDrawerClosed(View drawerView) {
                super.onDrawerClosed(drawerView);
                // waiting for the drawer to close, then navigating seems to cause issue.
                // why wait for the drawer to close? jankiness.
                if (pendingNavigationClick != null) {
                    startActivity(pendingNavigationClick);
                    pendingNavigationClick = null;
                }
            }

        };
b=getIntent().getExtras()
Bundle b = getIntent().getExtras();
mShouldStartPlayback=b.getBoolean("shouldStart")
boolean mShouldStartPlayback = b.getBoolean("shouldStart");
startPosition=b.getInt("startPosition",0)
int startPosition = b.getInt("startPosition", 0);
currentPos=mVideoView.getCurrentPosition()
int currentPos = mVideoView.getCurrentPosition();
String msg;
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, mDisplaySize.y + getActionBar().getHeight());
mm=mSelectedMedia.getMetadata()
MediaMetadata mm = mSelectedMedia.getMetadata();
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, (int) (mDisplaySize.x * ASPECT_RATIO));
WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
width=display.getWidth()
int width = display.getWidth();
height=display.getHeight()
int height = display.getHeight();
int resourceId = 0;
String videoUrl = "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4#sthash.rJ5rPZy8.dpuf";
String title = "Jahre Philharmonie";
String description = "Awesome film you must watch!";
String author = "Blundell";
String thumbUrl = "http://www.ustream.tv/blog/wp-content/uploads/2013/10/simply-go-live.png";
MediaMetadata metadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE);
mediaInfo=new MediaInfo.Builder(videoUrl).setMetadata(metadata).setStreamType(MediaInfo.STREAM_TYPE_BUFFERED).setContentType("video/mp4").build()
MediaInfo mediaInfo = new MediaInfo.Builder(videoUrl)
                        .setMetadata(metadata)
                        .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)
                        .setContentType("video/mp4")
                        .build();
Intent intent = new Intent(MainActivity.this, LocalPlayerActivity.class);
preferences=getPreferences(MODE_PRIVATE)
SharedPreferences preferences = getPreferences(MODE_PRIVATE);
defaultSmsPackage=Telephony.Sms.getDefaultSmsPackage(this)
String defaultSmsPackage = Telephony.Sms.getDefaultSmsPackage(this);
Intent intent = new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
availableAppProvider=EasyCustomTabs.getInstance()
AvailableAppProvider availableAppProvider = EasyCustomTabs.getInstance();
ConnectedClient connectedClient = new ConnectedClient(client);
binder=Binder.newInstance()
Binder binder = Binder.newInstance();
List<Composer> composerList = new ArrayList<>();
customTabsSession=connection.newSession()
CustomTabsSession customTabsSession = connection.newSession();
CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(customTabsSession);
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
context=EasyCustomTabs.getInstance().getContext()
Context context = EasyCustomTabs.getInstance().getContext();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
packagesSupportingCustomTabs=getPackagesSupportingCustomTabs()
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
defaultPackage=getDefaultPackage()
String defaultPackage = getDefaultPackage();
defaultActivityInfo=packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK,0)
ResolveInfo defaultActivityInfo = packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK, 0);
String packageName = defaultActivityInfo.activityInfo.packageName;
resolvedInfoList=packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK,0)
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<String> packagesSupportingCustomTabs = new ArrayList<>();
Intent serviceIntent = new Intent();
bestPackageFinder=BestPackageFinder.newInstance()
BestPackageFinder bestPackageFinder = BestPackageFinder.newInstance();
packageName=bestPackageFinder.findBestPackage()
String packageName = bestPackageFinder.findBestPackage();
resolveInfo=createResolveInfoFor(packageName)
ResolveInfo resolveInfo = createResolveInfoFor(packageName);
ResolveInfo resolveInfo = new ResolveInfo();
List<ResolveInfo> resolveInfoList = new ArrayList<>();
defaultPackageResolveInfo=createResolveInfoFor(packageName)
ResolveInfo defaultPackageResolveInfo = createResolveInfoFor(packageName);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
oldestApiMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage oldestApiMessage = apiMessages.get(apiMessages.size() - 1);
String lastResponseEpochTime = oldestApiMessage.timeStamp;
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
latestMessage=latestMessages.get(latestMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage latestMessage = latestMessages.get(latestMessages.size() - 1);
latestMessageDateTime=convertToLocalDateTime(latestMessage.timeStamp)
LocalDateTime latestMessageDateTime = convertToLocalDateTime(latestMessage.timeStamp);
List<ChannelHistory.Message> messages = new ArrayList<>();
historyFrom=getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1))
LocalDateTime historyFrom = getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1));
historyTo=getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0))
LocalDateTime historyTo = getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0));
String text = apiMessage.text;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
lastMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage lastMessage = apiMessages.get(apiMessages.size() - 1);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
firstMessage=apiMessages.get(0)
ApiPagedChannelHistory.ApiMessage firstMessage = apiMessages.get(0);
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
String slackToken = args[0];
retrofit=new Retrofit.Builder().baseUrl("https://slack.com/api/").addConverterFactory(GsonConverterFactory.create()).build()
Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://slack.com/api/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();
slackWebService=retrofit.create(SlackWebService.class)
SlackWebService slackWebService = retrofit.create(SlackWebService.class);
slackHistoryFetcher=SlackHistoryFetcher.from(slackWebService,slackToken)
SlackHistoryFetcher slackHistoryFetcher = SlackHistoryFetcher.from(slackWebService, slackToken);
start=LocalDateTime.now()
LocalDateTime start = LocalDateTime.now();
end=LocalDateTime.now().minusDays(7)
LocalDateTime end = LocalDateTime.now().minusDays(7);
channelHistory=slackHistoryFetcher.getChannelHistory(start,end)
ChannelHistory channelHistory = slackHistoryFetcher.getChannelHistory(start, end);
HistoryConverter historyConverter = new HistoryConverter();
ApiPagedResponse apiPagedResponse = new ApiPagedResponse(start);
response=fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime())
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
apiPagedChannelHistory=response.body()
ApiPagedChannelHistory apiPagedChannelHistory = response.body();
channelHistory=slackWebService.getChannelHistory(slackToken,channel,lastResponseEpochTime,NUMBER_OF_RESULTS)
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
ApiPagedChannelHistory apiPagedChannelHistory = new ApiPagedChannelHistory();
ApiPagedChannelHistory.ApiMessage apiMessage = new ApiPagedChannelHistory.ApiMessage();
final TextView textView = new TextView(context);
emptyView=findViewById(R.id.empty_view)
View emptyView = findViewById(R.id.empty_view);
final Integer action = values[0];
LoremAdapter loremAdapter = new LoremAdapter();
accounts=accountManager.getAccountsByType(accountType)
Account[] accounts = accountManager.getAccountsByType(accountType);
Bundle result;
Bundle result;
Bundle result = new Bundle();
activity=createLoginIntent(context,accountType,authTokenType,requiredFeatures,options)
Intent activity = createLoginIntent(context, accountType, authTokenType, requiredFeatures, options);
Bundle bundle = new Bundle();
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
accounts=accountManager.getAccountsByType(authTokenType)
Account[] accounts = accountManager.getAccountsByType(authTokenType);
bundle=createResponseBundle(token)
Bundle bundle = createResponseBundle(token);
accountManager=AccountManager.get(this.getApplicationContext())
AccountManager accountManager = AccountManager.get(this.getApplicationContext());
Account account = new Account(token.getUserName(), getAccountName());
Bundle bundle = new Bundle();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
GertHerbAuthenticator authenticator = new GertHerbAuthenticator(this);
fontId=getFontId(context,attrs)
int fontId = getFontId(context, attrs);
fontType=getFontType(fontId)
FontType fontType = getFontType(fontId);
typedArray=context.obtainStyledAttributes(attrs,R.styleable.CustomTextAppearance)
TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CustomTextAppearance);
typeface=createTypeFace(context,fontType)
Typeface typeface = createTypeFace(context, fontType);
info=context.getApplicationInfo()
ApplicationInfo info = context.getApplicationInfo();
name=activity.getTitle().toString()
String name = activity.getTitle().toString();
client=mServer.accept()
Socket client = mServer.accept();
boolean result;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
BufferedReader in = null;
request=in.readLine()
final String request = in.readLine();
String command;
String parameters;
index=request.indexOf(' ')
int index = request.indexOf(' ');
boolean result;
boolean success = true;
BufferedWriter out = null;
index=parameters.indexOf(' ')
int index = parameters.indexOf(' ');
code=parameters.substring(0,index)
final String code = parameters.substring(0, index);
int hashCode = (int) Long.parseLong(code, 16);
window=findWindow(hashCode)
final View window = findWindow(hashCode);
dispatch=ViewDebug.class.getDeclaredMethod("dispatchCommand",View.class,String.class,String.class,OutputStream.class)
final Method dispatch = ViewDebug.class.getDeclaredMethod("dispatchCommand",
                        View.class, String.class, String.class, OutputStream.class);
View window = null;
boolean result = true;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
boolean result = true;
String focusName = null;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
View focusedWindow = null;
BufferedWriter out = null;
boolean needWindowListUpdate = false;
boolean needFocusedWindowUpdate = false;
BetterAccountManager accountManager = new BetterAccountManager(this, getString(R.string.account_type), getString(R.string.token_type), null);
loginView=Views.findById(this,R.id.login_view)
LoginView loginView = Views.findById(this, R.id.login_view);
authorizationApi=new GithubApiFactory().createAuthorizationApi(credentials.username,credentials.password)
GithubApi authorizationApi = new GithubApiFactory().createAuthorizationApi(credentials.username, credentials.password);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
Endpoint endpoint = new Endpoint() {
            @Override
            public String getUrl() {
                return GITHUB_API_URL;
            }

            @Override
            public String getName() {
                return "Live";
            }
        };
interceptor=createAuthorizationRequestInterceptor(username,password)
RequestInterceptor interceptor = createAuthorizationRequestInterceptor(username, password);
restAdapter=createRestAdapter(endpoint,interceptor)
RestAdapter restAdapter = createRestAdapter(endpoint, interceptor);
Dummy dummy = new Dummy();
result=dummy.explodes()
boolean result = dummy.explodes();
String base64EncodedPublicKey = "CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE";
premiumPurchase=inventory.getPurchase(SKU_PREMIUM)
Purchase premiumPurchase = inventory.getPurchase(SKU_PREMIUM);
infiniteGasPurchase=inventory.getPurchase(SKU_INFINITE_GAS)
Purchase infiniteGasPurchase = inventory.getPurchase(SKU_INFINITE_GAS);
gasPurchase=inventory.getPurchase(SKU_GAS)
Purchase gasPurchase = inventory.getPurchase(SKU_GAS);
String payload = "";
String payload = "";
String payload = "";
payload=p.getDeveloperPayload()
String payload = p.getDeveloperPayload();
int index = mTank >= TANK_RES_IDS.length ? TANK_RES_IDS.length - 1 : mTank;
AlertDialog.Builder bld = new AlertDialog.Builder(this);
spe=getPreferences(MODE_PRIVATE).edit()
SharedPreferences.Editor spe = getPreferences(MODE_PRIVATE).edit();
sp=getPreferences(MODE_PRIVATE)
SharedPreferences sp = getPreferences(MODE_PRIVATE);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                                  + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                    | ((source[d + 1 + off] << 24) >>> 16)
                    | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                    | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                                   "-1002:Bad response received/" +
                                   "-1003:Purchase signature verification failed/" +
                                   "-1004:Send intent failed/" +
                                   "-1005:User cancelled/" +
                                   "-1006:Unknown purchase response/" +
                                   "-1007:Missing token/" +
                                   "-1008:Unknown error/" +
                                   "-1009:Subscriptions not available/" +
                                   "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(),
                    itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                        | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                        | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                            | ((source[d + 1 + off] << 24) >>> 16)
                            | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                            | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                "-1002:Bad response received/" +
                "-1003:Purchase signature verification failed/" +
                "-1004:Send intent failed/" +
                "-1005:User cancelled/" +
                "-1006:Unknown purchase response/" +
                "-1007:Missing token/" +
                "-1008:Unknown error/" +
                "-1009:Subscriptions not available/" +
                "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(), itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
responseCode=result.getResponse()
int responseCode = result.getResponse();
sku=purchase.getSku()
String sku = purchase.getSku();
skuDetails=inv.getSkuDetails(sku)
SkuDetails skuDetails = inv.getSkuDetails(sku);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
Button purchaseFiveButton = (Button) rootView.findViewById(R.id.fragment_main_button_purchase_five_coins);
xml=context.obtainStyledAttributes(attrs,R.styleable.LandingStrip)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.LandingStrip);
tabLayoutId=xml.getResourceId(R.styleable.LandingStrip_tabLayoutId,MISSING_TAB_LAYOUT_ID)
int tabLayoutId = xml.getResourceId(R.styleable.LandingStrip_tabLayoutId, MISSING_TAB_LAYOUT_ID);
indicatorColour=xml.getResourceId(R.styleable.LandingStrip_indicatorColor,DEFAULT_INDICATOR_COLOUR)
int indicatorColour = xml.getResourceId(R.styleable.LandingStrip_indicatorColor, DEFAULT_INDICATOR_COLOUR);
indicatorHeight=getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight,DEFAULT_INDICATOR_HEIGHT,xml)
int indicatorHeight = getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight, DEFAULT_INDICATOR_HEIGHT, xml);
tabsPaddingLeft=getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingLeft = getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding, DEFAULT_TABS_PADDING, xml);
tabsPaddingRight=getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingRight = getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding, DEFAULT_TABS_PADDING, xml);
MutableCoordinates drawCurrentTabCoordinates = new MutableCoordinates();
MutableCoordinates drawNextTabCoordinates = new MutableCoordinates();
MutableCoordinates drawMovingIndicatorCoordinates = new MutableCoordinates();
currentTab=tabsContainer.getTabAt(currentPosition)
View currentTab = tabsContainer.getTabAt(currentPosition);
currentTabStart=currentTab.getLeft()
float currentTabStart = currentTab.getLeft();
currentTabEnd=currentTab.getRight()
float currentTabEnd = currentTab.getRight();
nextTab=tabsContainer.getTabAt(currentPosition + 1)
View nextTab = tabsContainer.getTabAt(currentPosition + 1);
nextTabPositionOffset=getFractionFrom(pagePositionOffset)
float nextTabPositionOffset = getFractionFrom(pagePositionOffset);
indicatorStart=getIndicatorPosition(nextTab.getStart(),pagePositionOffset,currentTab.getStart(),nextTabPositionOffset)
float indicatorStart = getIndicatorPosition(nextTab.getStart(), pagePositionOffset, currentTab.getStart(), nextTabPositionOffset);
indicatorEnd=getIndicatorPosition(nextTab.getEnd(),pagePositionOffset,currentTab.getEnd(),nextTabPositionOffset)
float indicatorEnd = getIndicatorPosition(nextTab.getEnd(), pagePositionOffset, currentTab.getEnd(), nextTabPositionOffset);
height=getHeight()
int height = getHeight();
tabCount=pagerAdapter.getCount()
int tabCount = pagerAdapter.getCount();
title=pagerAdapter.getPageTitle(position)
CharSequence title = pagerAdapter.getPageTitle(position);
inflatedTabView=tabsContainer.inflateTab(layoutInflater,attributes.getTabLayoutId())
View inflatedTabView = tabsContainer.inflateTab(layoutInflater, attributes.getTabLayoutId());
int position = (int) view.getTag(TAG_KEY_POSITION);
scrollOffset=getHorizontalScrollOffset(position,positionOffset)
int scrollOffset = getHorizontalScrollOffset(position, positionOffset);
newScrollX=calculateScrollOffset(position,scrollOffset,positionOffset)
float newScrollX = calculateScrollOffset(position, scrollOffset, positionOffset);
tabWidth=tabsContainer.getTabAt(position).getWidth()
int tabWidth = tabsContainer.getTabAt(position).getWidth();
tabForPosition=tabsContainer.getTabAt(position)
View tabForPosition = tabsContainer.getTabAt(position);
float tabStartX = tabForPosition.getLeft() + scrollOffset;
int viewMiddleOffset = getTabParentWidth() / 2;
float tabCenterOffset = (tabForPosition.getRight() - tabForPosition.getLeft()) * 0.5F;
nextTabDelta=getNextTabDelta(position,pagerOffset,tabForPosition)
float nextTabDelta = getNextTabDelta(position, pagerOffset, tabForPosition);
LinearLayout tabsContainerView = new LinearLayout(context);
tab=getTabAt(index)
View tab = getTabAt(index);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
position=indicatorCoordinates.getStart()
float position = indicatorCoordinates.getStart();
lastTabOffset=((ViewGroup)getChildAt(0)).getChildAt(getChildCount() - 1).getWidth()
float lastTabOffset = ((ViewGroup) getChildAt(0)).getChildAt(getChildCount() - 1).getWidth();
frequency=getOneCycle(lastTabOffset)
float frequency = getOneCycle(lastTabOffset);
r=toHex(calculateColour(position,frequency,PHASE_RED,AMPLITUDE,CENTER_FREQUENCY))
String r = toHex(calculateColour(position, frequency, PHASE_RED, AMPLITUDE, CENTER_FREQUENCY));
g=toHex(calculateColour(position,frequency,PHASE_GREEN,AMPLITUDE,CENTER_FREQUENCY))
String g = toHex(calculateColour(position, frequency, PHASE_GREEN, AMPLITUDE, CENTER_FREQUENCY));
b=toHex(calculateColour(position,frequency,PHASE_BLUE,AMPLITUDE,CENTER_FREQUENCY))
String b = toHex(calculateColour(position, frequency, PHASE_BLUE, AMPLITUDE, CENTER_FREQUENCY));
height=getHeight()
int height = getHeight();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPagerFragment viewPagerFragment = new ViewPagerFragment();
Bundle bundle = new Bundle();
TextView view = (TextView) layoutInflater.inflate(R.layout.view_demo, container, false);
currentPosition=viewPagerAdapterState.getCurrentPosition()
int currentPosition = viewPagerAdapterState.getCurrentPosition();
view=getView(container,position)
View view = getView(container, position);
parcelableSparseArray=viewPagerAdapterState.get(position)
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
View view = (View) object;
SparseArray<Parcelable> viewState = new SparseArray<>();
position=entry.getValue()
int position = entry.getValue();
view=entry.getKey()
View view = entry.getKey();
bundle=in.readBundle()
Bundle bundle = in.readBundle();
Map<Integer, SparseArray<Parcelable>> viewStates = new HashMap<>(bundle.keySet().size());
sparseParcelableArray=bundle.getSparseParcelableArray(key)
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
primaryItemPosition=in.readInt()
int primaryItemPosition = in.readInt();
Bundle bundle = new Bundle();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
final TextView abText = (TextView) findViewById(R.id.ab_text);
final AyBe ayBe = new AyBe();
id=item.getItemId()
int id = item.getItemId();
callback=weakCallback.get()
AbTestingParamsLoadedCallback callback = weakCallback.get();
WeakReference<NoLeakActivity> weakNoLeakActivity = new WeakReference<NoLeakActivity>(noLeakActivity);
noLeakActivity=weakNoLeakActivity.get()
NoLeakActivity noLeakActivity = weakNoLeakActivity.get();
RecyclerView recyclerView = (RecyclerView) layoutInflater.inflate(R.layout.view_page, viewGroup, false);
itemView=layoutInflater.inflate(R.layout.view_item,parent,false)
View itemView = layoutInflater.inflate(R.layout.view_item, parent, false);
actual=foo.twice(HALF)
int actual = foo.twice(HALF);
int expected = WHOLE;
final float inverseRatio = 1f - ratio;
float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRatio);
float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRatio);
float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRatio);
hsv=node.getHsv()
float[] hsv = node.getHsv();
width=bitmap.getWidth()
final int width = bitmap.getWidth();
height=bitmap.getHeight()
final int height = bitmap.getHeight();
final int[] rgbPixels = new int[width * height];
final MedianCutQuantizer mcq = new MedianCutQuantizer(rgbPixels, NUM_COLORS);
primaryAccentColor=findPrimaryAccentColor()
final ColorNode primaryAccentColor = findPrimaryAccentColor();
secondaryAccentColor=findSecondaryAccentColor(primaryAccentColor)
final ColorNode secondaryAccentColor = findSecondaryAccentColor(primaryAccentColor);
tertiaryAccentColor=findTertiaryAccentColor(primaryAccentColor,secondaryAccentColor)
final int tertiaryAccentColor = findTertiaryAccentColor(
                primaryAccentColor, secondaryAccentColor);
primaryTextColor=findPrimaryTextColor(primaryAccentColor)
final int primaryTextColor = findPrimaryTextColor(primaryAccentColor);
secondaryTextColor=findSecondaryTextColor(primaryAccentColor)
final int secondaryTextColor = findSecondaryTextColor(primaryAccentColor);
final float primaryHue = primary.getHsv()[0];
final float candidateHue = candidate.getHsv()[0];
copy=Arrays.copyOf(palette,palette.length)
final MedianCutQuantizer.ColorNode[] copy = Arrays.copyOf(palette, palette.length);
maxCount=palette[0].getCount()
final float maxCount = palette[0].getCount();
lhsWeight=calculateWeight(lhs,maxCount)
final float lhsWeight = calculateWeight(lhs, maxCount);
rhsWeight=calculateWeight(rhs,maxCount)
final float rhsWeight = calculateWeight(rhs, maxCount);
float sum = 0;
float sumWeight = 0;
float value = values[i];
float weight = values[i + 1];
ColorHistogram colorHist = new ColorHistogram(pixels);
K=colorHist.getNumberOfColors()
int K = colorHist.getNumberOfColors();
ColorNode[] rCols = null;
rgb=colorHist.getColor(i)
int rgb = colorHist.getColor(i);
cnt=colorHist.getCount(i)
int cnt = colorHist.getCount(i);
ColorBox initialBox = new ColorBox(0, K - 1, 0);
List<ColorBox> colorSet = new ArrayList<ColorBox>();
int k = 1;
boolean done = false;
nextBox=findBoxToSplit(colorSet)
ColorBox nextBox = findBoxToSplit(colorSet);
newBox=nextBox.splitBox()
ColorBox newBox = nextBox.splitBox();
color=findClosestColor(pixels[i])
ColorNode color = findClosestColor(pixels[i]);
idx=findClosestColorIndex(rgb)
int idx = findClosestColorIndex(rgb);
red=Color.red(rgb)
int red = Color.red(rgb);
grn=Color.green(rgb)
int grn = Color.green(rgb);
blu=Color.blue(rgb)
int blu = Color.blue(rgb);
int minIdx = 0;
int minDistance = Integer.MAX_VALUE;
ColorNode color = quantColors[i];
d2=color.distance2(red,grn,blu)
int d2 = color.distance2(red, grn, blu);
ColorBox boxToSplit = null;
int minLevel = Integer.MAX_VALUE;
n=colorBoxes.size()
int n = colorBoxes.size();
ColorNode[] avgColors = new ColorNode[n];
int i = 0;
int dr = this.red - red;
int dg = this.grn - grn;
int db = this.blu - blu;
ColorNode color = imageColors[i];
int r = color.red;
int g = color.grn;
int b = color.blu;
dim=getLongestColorDimension()
ColorDimension dim = getLongestColorDimension();
med=findMedian(dim)
int med = findMedian(dim);
int nextLevel = level + 1;
ColorBox newBox = new ColorBox(med + 1, upper, nextLevel);
int rLength = rmax - rmin;
int gLength = gmax - gmin;
int bLength = bmax - bmin;
int half = count / 2;
int nPixels, median;
int rSum = 0;
int gSum = 0;
int bSum = 0;
int n = 0;
ColorNode ci = imageColors[i];
int cnt = ci.cnt;
double nd = n;
int avgRed = (int) (0.5 + rSum / nd);
int avgGrn = (int) (0.5 + gSum / nd);
int avgBlu = (int) (0.5 + bSum / nd);
s=this.getClass().getSimpleName()
String s = this.getClass().getSimpleName();
int i = 0;
int N = pixelsOrig.length;
int[] pixelsCpy = new int[N];
int k = -1;
int curColor = -1;
int nColors = k + 1;
id=item.getItemId()
int id = item.getItemId();
Intent intent = new Intent();
bitmap=((BitmapDrawable)imageView.getDrawable()).getBitmap()
Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap();
DominantColorCalculator dominantColorCalculator = new DominantColorCalculator(bitmap);
selectedImageUri=data.getData()
Uri selectedImageUri = data.getData();
selectedImagePath=getPath(selectedImageUri)
String selectedImagePath = getPath(selectedImageUri);
String[] projection = {MediaStore.Images.Media.DATA};
cursor=managedQuery(uri,projection,null,null,null)
Cursor cursor = managedQuery(uri, projection, null, null, null);
column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)
int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
LinearLayout rootView = (LinearLayout) inflater.inflate(R.layout.fragment_main, container, false);
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
preapprovalButton=payPal.getCheckoutButton(getActivity(),PayPal.BUTTON_194x37,CheckoutButton.TEXT_PAY)
CheckoutButton preapprovalButton = payPal.getCheckoutButton(getActivity(), PayPal.BUTTON_194x37, CheckoutButton.TEXT_PAY);
preapprovalIntent=payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY)
Intent preapprovalIntent = payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY);
String resultTitle = "";
String resultInfo = "";
String resultExtra = "";
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
PayPalPreapproval preapproval = new PayPalPreapproval();
preapproval=createPreapproval(preapprovalKey)
PayPalPreapproval preapproval = createPreapproval(preapprovalKey);
Bundle bundle = new Bundle();
int availableLength = maxLength;
StringBuilder stringBuilder = new StringBuilder(maxLength);
prefixAndSuffixLength=computeAppendedLengthIncludingSeparatorSpaces(prefix,suffix)
int prefixAndSuffixLength = computeAppendedLengthIncludingSeparatorSpaces(prefix, suffix);
urlLength=computeUrlLengthIncludingSeparatorSpace(url)
int urlLength = computeUrlLengthIncludingSeparatorSpace(url);
trimmedSubject=ellipsizeTextIfExceedsMaxLength(subject,availableLength)
String trimmedSubject = ellipsizeTextIfExceedsMaxLength(subject, availableLength);
int length = 0;
preferences=context.getSharedPreferences(MRU_PREFERENCES,Context.MODE_PRIVATE)
SharedPreferences preferences = context.getSharedPreferences(MRU_PREFERENCES, Context.MODE_PRIVATE);
args=getArguments()
Bundle args = getArguments();
themeResId=getThemeResIdIfProvidedIn(args)
int themeResId = getThemeResIdIfProvidedIn(args);
title=getTitleIfProvidedIn(args)
CharSequence title = getTitleIfProvidedIn(args);
builder=createDialogBuilder(themeResId).setCancelable(true).setView(dialogView)
AlertDialog.Builder builder = createDialogBuilder(themeResId)
                .setCancelable(true)
                .setView(dialogView);
inflater=getActivity().getLayoutInflater()
LayoutInflater inflater = getActivity().getLayoutInflater();
GridView gridView = (GridView) rootView.findViewById(R.id.ps__dialog_grid);
targetApps=extractTargetAppsFrom(args)
TargetApps targetApps = extractTargetAppsFrom(args);
allShareTargets=getAvailableShareTargets(sharingIntent)
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
priorityAppInfos=createPriorityResolveInfoList(targetApps,allShareTargets)
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
otherAppInfos=createOtherAppsResolveInfoList(priorityAppInfos,allShareTargets)
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
resolveInfos=targetApps.extractTargetResolveInfosFrom(allShareTargets)
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
mruResolveInfo=findMruResolveInfoIn(allShareTargets)
ResolveInfo mruResolveInfo = findMruResolveInfoIn(allShareTargets);
List<ResolveInfo> otherAppsInfos = new ArrayList<ResolveInfo>(allAppInfos);
mruPackageName=persister.getLastUsedTarget()
String mruPackageName = persister.getLastUsedTarget();
String packageName = resolveInfo.activityInfo.packageName;
packageManager=getActivity().getPackageManager()
PackageManager packageManager = getActivity().getPackageManager();
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
View buttonStrip = (View) showMoreButton.getParent();
gridView=getGridView()
GridView gridView = getGridView();
intent=wrapIntentWithExplicitTargetComponentForItem(position,sharingIntent)
Intent intent = wrapIntentWithExplicitTargetComponentForItem(position, sharingIntent);
Intent intent = new Intent(sharingIntent);
ActivityInfo activity = adapter.getItem(position).activityInfo;
ComponentName name = new ComponentName(activity.applicationInfo.packageName, activity.name);
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
PriorityShareDialog dialog = new PriorityShareDialog();
Bundle args = new Bundle();
sharingIntent=createSharingIntent()
Intent sharingIntent = createSharingIntent();
fragmentManager=activity.getFragmentManager()
FragmentManager fragmentManager = activity.getFragmentManager();
Intent intent = new Intent(Intent.ACTION_SEND);
dialog=new PriorityShareDialog.Builder().setTitle(title).setTargetApps(targetApps).setSharingIntent(sharingIntent).setOnPrepareSharingIntentListener(listener).setShowMostRecentlyUsed(showMostRecentlyUsed).build()
PriorityShareDialog dialog = new PriorityShareDialog.Builder()
                .setTitle(title)
                .setTargetApps(targetApps)
                .setSharingIntent(sharingIntent)
                .setOnPrepareSharingIntentListener(listener)
                .setShowMostRecentlyUsed(showMostRecentlyUsed)
                .build();
PrioritySharer prioritySharer = new PrioritySharer();
prioritySharer=build()
PrioritySharer prioritySharer = build();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
layoutInflater=LayoutInflater.from(context)
LayoutInflater layoutInflater = LayoutInflater.from(context);
iconSizePx=getIconSizePx(context.getResources())
int iconSizePx = getIconSizePx(context.getResources());
ArrayList<ResolveInfo> sortedList = new ArrayList<ResolveInfo>(resolveInfoList);
int otherAppsCountMaybe = showAllApps ? otherAppInfos.size() : 0;
firstOtherAppsItemPosition=priorityAppInfos.size()
int firstOtherAppsItemPosition = priorityAppInfos.size();
int offsetPosition = position - firstOtherAppsItemPosition;
TextView textView;
textView=initializeItemViewIfNecessary(convertView,R.layout.ps__grid_item_share,parent)
TextView textView = initializeItemViewIfNecessary(convertView, R.layout.ps__grid_item_share, parent);
info=getItem(position)
ResolveInfo info = getItem(position);
icon=info.loadIcon(packageManager)
Drawable icon = info.loadIcon(packageManager);
arraySize=in.readInt()
int arraySize = in.readInt();
String[] packageNames = new String[arraySize];
arraySize=targetPackages.size()
int arraySize = targetPackages.size();
String[] packagesArray = new String[arraySize];
SparseArray<ResolveInfo> matchedResolveInfos = new SparseArray<ResolveInfo>(targetPackages.size());
String packageName = info.activityInfo.packageName;
index=indexOfItemInto(packageName,targetPackages)
int index = indexOfItemInto(packageName, targetPackages);
sparseArraySize=sparseArray.size()
int sparseArraySize = sparseArray.size();
ArrayList<T> list = new ArrayList<T>(sparseArraySize);
int i = 0;
originalSubject=intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT)
CharSequence originalSubject = intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT);
String subject = originalSubject != null ? originalSubject.toString() : null;
composer=createComposer()
MessageComposer composer = createComposer();
component=intent.getComponent()
ComponentName component = intent.getComponent();
targetPackageName=component.getPackageName()
String targetPackageName = component.getPackageName();
adapter=ArrayAdapter.createFromResource(this,R.array.target_apps,android.R.layout.simple_spinner_item)
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
EditText text = (EditText) findViewById(R.id.text);
EditText title = (EditText) findViewById(R.id.title);
EditText mimeType = (EditText) findViewById(R.id.mime_type);
EditText dataUri = (EditText) findViewById(R.id.data_uri);
Switch showMostRecentlyUsed = (Switch) findViewById(R.id.show_most_recently_used);
uriString=dataUri.getText().toString()
String uriString = dataUri.getText().toString();
EditText text = (EditText) findViewById(R.id.text);
TextView textView = (TextView) convertView.findViewById(R.id.positionView);
colorView=convertView.findViewById(R.id.colorView)
View colorView = convertView.findViewById(R.id.colorView);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
offset=headerPlaceholder.getTop()
int offset = headerPlaceholder.getTop();
Integer item = COLORS[position];
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
firstVisiblePosition=grid.getFirstVisiblePosition()
int firstVisiblePosition = grid.getFirstVisiblePosition();
inflate=getViewForPosition(container,position)
View inflate = getViewForPosition(container, position);
id=item.getItemId()
int id = item.getItemId();
MyActivity activity = new MyActivity();
String manifestProperty = "../app/src/main/AndroidManifest.xml";
String resProperty = "../app/src/main/res";
cursor=resolver.query(uri,projection,selection,selectionArgs,null)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, null);
cursor=resolver.query(uri,projection,selection,selectionArgs,sortOrder)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, sortOrder);
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=richClass.setter(name)
Method setter = richClass.setter(name);
T obj;
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=methodsByName.get(name)
Method setter = methodsByName.get(name);
int type = TYPE_INT;
Class<?> t = setter.getParameterTypes()[0];
Class<?> t = setter.getParameterTypes()[0];
cursorType=cursor.getType(index)
final int cursorType = cursor.getType(index);
final Object obj;
s=f.getAnnotation(Mapper.class)
Mapper s = f.getAnnotation(Mapper.class);
mm=m.getAnnotation(Mapper.class)
Mapper mm = m.getAnnotation(Mapper.class);
methodName=StringUtil.asCamelifySetMethod(what)
String methodName = StringUtil.asCamelifySetMethod(what);
cursor=getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,null,null,null,null)
Cursor cursor = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
now=System.currentTimeMillis()
long now = System.currentTimeMillis();
List<Contact2> typedCursor = new CursorList<Contact2>(cursor, Contact2.class);
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[a-zA-Z0-9]+")
Pattern p = Pattern.compile("[a-zA-Z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[A-Z][a-z0-9]+")
Pattern p = Pattern.compile("[A-Z][a-z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
SurfaceView first = (SurfaceView) findViewById(R.id.firstSurface);
SurfaceView second = (SurfaceView) findViewById(R.id.secondSurface);
Intent pickVideo = new Intent(Intent.ACTION_PICK);
xml=context.obtainStyledAttributes(attrs,R.styleable.RelativeLayoutWithForeground)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.RelativeLayoutWithForeground);
int foregroundResId = INVALID_FOREGROUND_ID;
drawable=getDrawable(getResources(),foregroundResId)
Drawable drawable = getDrawable(getResources(), foregroundResId);
Bundle args = new Bundle();
enroll=mHotwordDetector.createEnrollIntent()
Intent enroll = mHotwordDetector.createEnrollIntent();

Diff of a2e75f9efa72c8f3e3a18ff08102736f04bc6a49 and 254259c6eeba5dc51bfa0753e5f670f797bc00d8:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 6
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision a2e75f9efa72c8f3e3a18ff08102736f04bc6a49 to 254259c6eeba5dc51bfa0753e5f670f797bc00d8


****Parsing for addition at revision 254259c6eeba5dc51bfa0753e5f670f797bc00d8****

Added ApplicationTest.java to .\/spikes\ repository source files.
Added DrawerActivity.java to .\/spikes\ repository source files.
Added EarthActivity.java to .\/spikes\ repository source files.
Added SaturnActivity.java to .\/spikes\ repository source files.
Added LocalPlayerActivity.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added CastApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ComposeSmsActivity.java to .\/spikes\ repository source files.
Added HeadlessSmsSendService.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MmsReceiver.java to .\/spikes\ repository source files.
Added SmsReceiver.java to .\/spikes\ repository source files.
Added ExtendedDemoActivity.java to .\/spikes\ repository source files.
Added ExtendedDemoApplication.java to .\/spikes\ repository source files.
Added SimpleDemoActivity.java to .\/spikes\ repository source files.
Added SimpleDemoApplication.java to .\/spikes\ repository source files.
Added Binder.java to .\/spikes\ repository source files.
Added ConnectedClient.java to .\/spikes\ repository source files.
Added Connection.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnection.java to .\/spikes\ repository source files.
Added ServiceConnectionCallback.java to .\/spikes\ repository source files.
Added EasyCustomTabs.java to .\/spikes\ repository source files.
Added ActionButtonComposer.java to .\/spikes\ repository source files.
Added CloseButtonIconComposer.java to .\/spikes\ repository source files.
Added Composer.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilder.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigator.java to .\/spikes\ repository source files.
Added EasyCustomTabsWebNavigator.java to .\/spikes\ repository source files.
Added ExitAnimationsComposer.java to .\/spikes\ repository source files.
Added IntentCustomizer.java to .\/spikes\ repository source files.
Added MenuItemComposer.java to .\/spikes\ repository source files.
Added NavigationFallback.java to .\/spikes\ repository source files.
Added Navigator.java to .\/spikes\ repository source files.
Added ShowTitleComposer.java to .\/spikes\ repository source files.
Added StartAnimationsComposer.java to .\/spikes\ repository source files.
Added ToolbarColorComposer.java to .\/spikes\ repository source files.
Added UrlBarHidingComposer.java to .\/spikes\ repository source files.
Added WebNavigator.java to .\/spikes\ repository source files.
Added AvailableAppProvider.java to .\/spikes\ repository source files.
Added BestPackageFinder.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProvider.java to .\/spikes\ repository source files.
Added BinderTest.java to .\/spikes\ repository source files.
Added ConnectedClientTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnectionTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigatorTest.java to .\/spikes\ repository source files.
Added BestPackageFinderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProviderTest.java to .\/spikes\ repository source files.
Added ApiPagedChannelHistory.java to .\/spikes\ repository source files.
Added ApiPagedResponse.java to .\/spikes\ repository source files.
Added ChannelHistory.java to .\/spikes\ repository source files.
Added HistoryConverter.java to .\/spikes\ repository source files.
Added Runner.java to .\/spikes\ repository source files.
Added SlackHistoryFetcher.java to .\/spikes\ repository source files.
Added SlackWebService.java to .\/spikes\ repository source files.
Added ApiPagedResponseTest.java to .\/spikes\ repository source files.
Added MainActivityTest.java to .\/spikes\ repository source files.
Added LoremAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added BetterAccountManager.java to .\/spikes\ repository source files.
Added BetterAuthenticator.java to .\/spikes\ repository source files.
Added BetterAuthenticatorActivity.java to .\/spikes\ repository source files.
Added GertHerbAuthenticator.java to .\/spikes\ repository source files.
Added GertHerbAuthenticatorService.java to .\/spikes\ repository source files.
Added NoAccountException.java to .\/spikes\ repository source files.
Added ReactiveAuthenticatorActivity.java to .\/spikes\ repository source files.
Added Token.java to .\/spikes\ repository source files.
Added GertHerbActivity.java to .\/spikes\ repository source files.
Added GertHerbApplication.java to .\/spikes\ repository source files.
Added GertHerbAuthenticationActivity.java to .\/spikes\ repository source files.
Added TypefaceFactory.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added ViewServer.java to .\/spikes\ repository source files.
Added ViewServerManager.java to .\/spikes\ repository source files.
Added DeveloperError.java to .\/spikes\ repository source files.
Added HomeActivity.java to .\/spikes\ repository source files.
Added LoginActivity.java to .\/spikes\ repository source files.
Added LoginView.java to .\/spikes\ repository source files.
Added UserCredentials.java to .\/spikes\ repository source files.
Added FontButton.java to .\/spikes\ repository source files.
Added FontEditText.java to .\/spikes\ repository source files.
Added FontTextView.java to .\/spikes\ repository source files.
Added GithubApi.java to .\/spikes\ repository source files.
Added GithubApiFactory.java to .\/spikes\ repository source files.
Added TokenRequest.java to .\/spikes\ repository source files.
Added TokenResponse.java to .\/spikes\ repository source files.
Added Dummy.java to .\/spikes\ repository source files.
Added DummyTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MainFragment.java to .\/spikes\ repository source files.
Added Attributes.java to .\/spikes\ repository source files.
Added Coordinates.java to .\/spikes\ repository source files.
Added IndicatorCoordinatesCalculator.java to .\/spikes\ repository source files.
Added LandingStrip.java to .\/spikes\ repository source files.
Added MutableCoordinates.java to .\/spikes\ repository source files.
Added OnPagerAdapterChangedListener.java to .\/spikes\ repository source files.
Added PagerAdapterObserver.java to .\/spikes\ repository source files.
Added Scrollable.java to .\/spikes\ repository source files.
Added ScrollingPageChangeListener.java to .\/spikes\ repository source files.
Added State.java to .\/spikes\ repository source files.
Added TabsContainer.java to .\/spikes\ repository source files.
Added CustomLandingStrip.java to .\/spikes\ repository source files.
Added CustomTabActivity.java to .\/spikes\ repository source files.
Added ExampleRainbowLandingStrip.java to .\/spikes\ repository source files.
Added FixedWidthTabActivity.java to .\/spikes\ repository source files.
Added NoFragmentsSimpleTextTabActivity.java to .\/spikes\ repository source files.
Added Data.java to .\/spikes\ repository source files.
Added DemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added SmallDemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerFragment.java to .\/spikes\ repository source files.
Added DemoViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapterState.java to .\/spikes\ repository source files.
Added SimpleTextTabActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AbTestingParamsLoadedCallback.java to .\/spikes\ repository source files.
Added AyBe.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added WeakStartCallback.java to .\/spikes\ repository source files.
Added LeakActivity.java to .\/spikes\ repository source files.
Added NoLeakActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added Bar.java to .\/spikes\ repository source files.
Added Foo.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added FooTest.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added ColorScheme.java to .\/spikes\ repository source files.
Added ColorUtils.java to .\/spikes\ repository source files.
Added DominantColorCalculator.java to .\/spikes\ repository source files.
Added FloatUtils.java to .\/spikes\ repository source files.
Added MedianCutQuantizer.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added PayPalFragment.java to .\/spikes\ repository source files.
Added PayPalHelper.java to .\/spikes\ repository source files.
Added MaxLengthMessageComposer.java to .\/spikes\ repository source files.
Added MessageComposer.java to .\/spikes\ repository source files.
Added TwitterMessageComposer.java to .\/spikes\ repository source files.
Added DisabledMruPersister.java to .\/spikes\ repository source files.
Added MruPersister.java to .\/spikes\ repository source files.
Added SharedPreferencesMruPersister.java to .\/spikes\ repository source files.
Added OnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added PriorityShareDialog.java to .\/spikes\ repository source files.
Added PrioritySharer.java to .\/spikes\ repository source files.
Added ShareTargetsAdapter.java to .\/spikes\ repository source files.
Added SimpleOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added TargetApps.java to .\/spikes\ repository source files.
Added TwitterOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AdvancedActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SimpleActivity.java to .\/spikes\ repository source files.
Added LockingActivity.java to .\/spikes\ repository source files.
Added PostLockingActivity.java to .\/spikes\ repository source files.
Added PreLockingActivity.java to .\/spikes\ repository source files.
Added DummyAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added NovoStaggeredGridView.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SpikeApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SwipeableView.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MyClass.java to .\/spikes\ repository source files.
Added MyClassTest.java to .\/spikes\ repository source files.
Added MyAndroidClassTest.java to .\/spikes\ repository source files.
Added RobolectricGradleTestRunner.java to .\/spikes\ repository source files.
Added Mapper.java to .\/spikes\ repository source files.
Added Query.java to .\/spikes\ repository source files.
Added TypedResolver.java to .\/spikes\ repository source files.
Added CursorList.java to .\/spikes\ repository source files.
Added CursorListIterator.java to .\/spikes\ repository source files.
Added CursorMarshaller.java to .\/spikes\ repository source files.
Added EmptyListIterator.java to .\/spikes\ repository source files.
Added ReflectionCursorMarshaller.java to .\/spikes\ repository source files.
Added RichClass.java to .\/spikes\ repository source files.
Added Setter.java to .\/spikes\ repository source files.
Added Function.java to .\/spikes\ repository source files.
Added TypedElementLoader.java to .\/spikes\ repository source files.
Added TypedLoader.java to .\/spikes\ repository source files.
Added Marshaller.java to .\/spikes\ repository source files.
Added ObjectMapper.java to .\/spikes\ repository source files.
Added TypedActivity.java to .\/spikes\ repository source files.
Added StringUtil.java to .\/spikes\ repository source files.
Added MyObject.java to .\/spikes\ repository source files.
Added MediaPlayerSwitcherActivity.java to .\/spikes\ repository source files.
Added VideoPlayerService.java to .\/spikes\ repository source files.
Added RelativeLayoutWithForeground.java to .\/spikes\ repository source files.
Added DemoActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added RecognitionService.java to .\/spikes\ repository source files.
Added SessionService.java to .\/spikes\ repository source files.
Added SettingsActivity.java to .\/spikes\ repository source files.
Added SmartContextInteractionService.java to .\/spikes\ repository source files.
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
final DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close) {

            @Override
            public void onDrawerClosed(View drawerView) {
                super.onDrawerClosed(drawerView);
                // waiting for the drawer to close, then navigating seems to cause issue.
                // why wait for the drawer to close? jankiness.
                if (pendingNavigationClick != null) {
                    startActivity(pendingNavigationClick);
                    pendingNavigationClick = null;
                }
            }

        };
b=getIntent().getExtras()
Bundle b = getIntent().getExtras();
mShouldStartPlayback=b.getBoolean("shouldStart")
boolean mShouldStartPlayback = b.getBoolean("shouldStart");
startPosition=b.getInt("startPosition",0)
int startPosition = b.getInt("startPosition", 0);
currentPos=mVideoView.getCurrentPosition()
int currentPos = mVideoView.getCurrentPosition();
String msg;
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, mDisplaySize.y + getActionBar().getHeight());
mm=mSelectedMedia.getMetadata()
MediaMetadata mm = mSelectedMedia.getMetadata();
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, (int) (mDisplaySize.x * ASPECT_RATIO));
WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
width=display.getWidth()
int width = display.getWidth();
height=display.getHeight()
int height = display.getHeight();
int resourceId = 0;
String videoUrl = "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4#sthash.rJ5rPZy8.dpuf";
String title = "Jahre Philharmonie";
String description = "Awesome film you must watch!";
String author = "Blundell";
String thumbUrl = "http://www.ustream.tv/blog/wp-content/uploads/2013/10/simply-go-live.png";
MediaMetadata metadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE);
mediaInfo=new MediaInfo.Builder(videoUrl).setMetadata(metadata).setStreamType(MediaInfo.STREAM_TYPE_BUFFERED).setContentType("video/mp4").build()
MediaInfo mediaInfo = new MediaInfo.Builder(videoUrl)
                        .setMetadata(metadata)
                        .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)
                        .setContentType("video/mp4")
                        .build();
Intent intent = new Intent(MainActivity.this, LocalPlayerActivity.class);
preferences=getPreferences(MODE_PRIVATE)
SharedPreferences preferences = getPreferences(MODE_PRIVATE);
defaultSmsPackage=Telephony.Sms.getDefaultSmsPackage(this)
String defaultSmsPackage = Telephony.Sms.getDefaultSmsPackage(this);
Intent intent = new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
availableAppProvider=EasyCustomTabs.getInstance()
AvailableAppProvider availableAppProvider = EasyCustomTabs.getInstance();
ConnectedClient connectedClient = new ConnectedClient(client);
binder=Binder.newInstance()
Binder binder = Binder.newInstance();
List<Composer> composerList = new ArrayList<>();
customTabsSession=connection.newSession()
CustomTabsSession customTabsSession = connection.newSession();
CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(customTabsSession);
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
context=EasyCustomTabs.getInstance().getContext()
Context context = EasyCustomTabs.getInstance().getContext();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
packagesSupportingCustomTabs=getPackagesSupportingCustomTabs()
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
defaultPackage=getDefaultPackage()
String defaultPackage = getDefaultPackage();
defaultActivityInfo=packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK,0)
ResolveInfo defaultActivityInfo = packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK, 0);
String packageName = defaultActivityInfo.activityInfo.packageName;
resolvedInfoList=packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK,0)
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<String> packagesSupportingCustomTabs = new ArrayList<>();
Intent serviceIntent = new Intent();
bestPackageFinder=BestPackageFinder.newInstance()
BestPackageFinder bestPackageFinder = BestPackageFinder.newInstance();
packageName=bestPackageFinder.findBestPackage()
String packageName = bestPackageFinder.findBestPackage();
resolveInfo=createResolveInfoFor(packageName)
ResolveInfo resolveInfo = createResolveInfoFor(packageName);
ResolveInfo resolveInfo = new ResolveInfo();
List<ResolveInfo> resolveInfoList = new ArrayList<>();
defaultPackageResolveInfo=createResolveInfoFor(packageName)
ResolveInfo defaultPackageResolveInfo = createResolveInfoFor(packageName);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
oldestApiMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage oldestApiMessage = apiMessages.get(apiMessages.size() - 1);
String lastResponseEpochTime = oldestApiMessage.timeStamp;
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
latestMessage=latestMessages.get(latestMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage latestMessage = latestMessages.get(latestMessages.size() - 1);
latestMessageDateTime=convertToLocalDateTime(latestMessage.timeStamp)
LocalDateTime latestMessageDateTime = convertToLocalDateTime(latestMessage.timeStamp);
List<ChannelHistory.Message> messages = new ArrayList<>();
historyFrom=getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1))
LocalDateTime historyFrom = getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1));
historyTo=getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0))
LocalDateTime historyTo = getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0));
String text = apiMessage.text;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
lastMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage lastMessage = apiMessages.get(apiMessages.size() - 1);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
firstMessage=apiMessages.get(0)
ApiPagedChannelHistory.ApiMessage firstMessage = apiMessages.get(0);
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
String slackToken = args[0];
retrofit=new Retrofit.Builder().baseUrl("https://slack.com/api/").addConverterFactory(GsonConverterFactory.create()).build()
Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://slack.com/api/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();
slackWebService=retrofit.create(SlackWebService.class)
SlackWebService slackWebService = retrofit.create(SlackWebService.class);
slackHistoryFetcher=SlackHistoryFetcher.from(slackWebService,slackToken)
SlackHistoryFetcher slackHistoryFetcher = SlackHistoryFetcher.from(slackWebService, slackToken);
start=LocalDateTime.now()
LocalDateTime start = LocalDateTime.now();
end=LocalDateTime.now().minusDays(7)
LocalDateTime end = LocalDateTime.now().minusDays(7);
channelHistory=slackHistoryFetcher.getChannelHistory(start,end)
ChannelHistory channelHistory = slackHistoryFetcher.getChannelHistory(start, end);
HistoryConverter historyConverter = new HistoryConverter();
ApiPagedResponse apiPagedResponse = new ApiPagedResponse(start);
response=fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime())
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
apiPagedChannelHistory=response.body()
ApiPagedChannelHistory apiPagedChannelHistory = response.body();
channelHistory=slackWebService.getChannelHistory(slackToken,channel,lastResponseEpochTime,NUMBER_OF_RESULTS)
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
ApiPagedChannelHistory apiPagedChannelHistory = new ApiPagedChannelHistory();
ApiPagedChannelHistory.ApiMessage apiMessage = new ApiPagedChannelHistory.ApiMessage();
final TextView textView = new TextView(context);
emptyView=findViewById(R.id.empty_view)
View emptyView = findViewById(R.id.empty_view);
final Integer action = values[0];
LoremAdapter loremAdapter = new LoremAdapter();
accounts=accountManager.getAccountsByType(accountType)
Account[] accounts = accountManager.getAccountsByType(accountType);
Bundle result;
Bundle result;
Bundle result = new Bundle();
activity=createLoginIntent(context,accountType,authTokenType,requiredFeatures,options)
Intent activity = createLoginIntent(context, accountType, authTokenType, requiredFeatures, options);
Bundle bundle = new Bundle();
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
accounts=accountManager.getAccountsByType(authTokenType)
Account[] accounts = accountManager.getAccountsByType(authTokenType);
bundle=createResponseBundle(token)
Bundle bundle = createResponseBundle(token);
accountManager=AccountManager.get(this.getApplicationContext())
AccountManager accountManager = AccountManager.get(this.getApplicationContext());
Account account = new Account(token.getUserName(), getAccountName());
Bundle bundle = new Bundle();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
GertHerbAuthenticator authenticator = new GertHerbAuthenticator(this);
fontId=getFontId(context,attrs)
int fontId = getFontId(context, attrs);
fontType=getFontType(fontId)
FontType fontType = getFontType(fontId);
typedArray=context.obtainStyledAttributes(attrs,R.styleable.CustomTextAppearance)
TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CustomTextAppearance);
typeface=createTypeFace(context,fontType)
Typeface typeface = createTypeFace(context, fontType);
info=context.getApplicationInfo()
ApplicationInfo info = context.getApplicationInfo();
name=activity.getTitle().toString()
String name = activity.getTitle().toString();
client=mServer.accept()
Socket client = mServer.accept();
boolean result;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
BufferedReader in = null;
request=in.readLine()
final String request = in.readLine();
String command;
String parameters;
index=request.indexOf(' ')
int index = request.indexOf(' ');
boolean result;
boolean success = true;
BufferedWriter out = null;
index=parameters.indexOf(' ')
int index = parameters.indexOf(' ');
code=parameters.substring(0,index)
final String code = parameters.substring(0, index);
int hashCode = (int) Long.parseLong(code, 16);
window=findWindow(hashCode)
final View window = findWindow(hashCode);
dispatch=ViewDebug.class.getDeclaredMethod("dispatchCommand",View.class,String.class,String.class,OutputStream.class)
final Method dispatch = ViewDebug.class.getDeclaredMethod("dispatchCommand",
                        View.class, String.class, String.class, OutputStream.class);
View window = null;
boolean result = true;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
boolean result = true;
String focusName = null;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
View focusedWindow = null;
BufferedWriter out = null;
boolean needWindowListUpdate = false;
boolean needFocusedWindowUpdate = false;
BetterAccountManager accountManager = new BetterAccountManager(this, getString(R.string.account_type), getString(R.string.token_type), null);
loginView=Views.findById(this,R.id.login_view)
LoginView loginView = Views.findById(this, R.id.login_view);
authorizationApi=new GithubApiFactory().createAuthorizationApi(credentials.username,credentials.password)
GithubApi authorizationApi = new GithubApiFactory().createAuthorizationApi(credentials.username, credentials.password);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
Endpoint endpoint = new Endpoint() {
            @Override
            public String getUrl() {
                return GITHUB_API_URL;
            }

            @Override
            public String getName() {
                return "Live";
            }
        };
interceptor=createAuthorizationRequestInterceptor(username,password)
RequestInterceptor interceptor = createAuthorizationRequestInterceptor(username, password);
restAdapter=createRestAdapter(endpoint,interceptor)
RestAdapter restAdapter = createRestAdapter(endpoint, interceptor);
Dummy dummy = new Dummy();
result=dummy.explodes()
boolean result = dummy.explodes();
String base64EncodedPublicKey = "CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE";
premiumPurchase=inventory.getPurchase(SKU_PREMIUM)
Purchase premiumPurchase = inventory.getPurchase(SKU_PREMIUM);
infiniteGasPurchase=inventory.getPurchase(SKU_INFINITE_GAS)
Purchase infiniteGasPurchase = inventory.getPurchase(SKU_INFINITE_GAS);
gasPurchase=inventory.getPurchase(SKU_GAS)
Purchase gasPurchase = inventory.getPurchase(SKU_GAS);
String payload = "";
String payload = "";
String payload = "";
payload=p.getDeveloperPayload()
String payload = p.getDeveloperPayload();
int index = mTank >= TANK_RES_IDS.length ? TANK_RES_IDS.length - 1 : mTank;
AlertDialog.Builder bld = new AlertDialog.Builder(this);
spe=getPreferences(MODE_PRIVATE).edit()
SharedPreferences.Editor spe = getPreferences(MODE_PRIVATE).edit();
sp=getPreferences(MODE_PRIVATE)
SharedPreferences sp = getPreferences(MODE_PRIVATE);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                                  + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                    | ((source[d + 1 + off] << 24) >>> 16)
                    | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                    | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                                   "-1002:Bad response received/" +
                                   "-1003:Purchase signature verification failed/" +
                                   "-1004:Send intent failed/" +
                                   "-1005:User cancelled/" +
                                   "-1006:Unknown purchase response/" +
                                   "-1007:Missing token/" +
                                   "-1008:Unknown error/" +
                                   "-1009:Subscriptions not available/" +
                                   "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(),
                    itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                        | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                        | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                            | ((source[d + 1 + off] << 24) >>> 16)
                            | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                            | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                "-1002:Bad response received/" +
                "-1003:Purchase signature verification failed/" +
                "-1004:Send intent failed/" +
                "-1005:User cancelled/" +
                "-1006:Unknown purchase response/" +
                "-1007:Missing token/" +
                "-1008:Unknown error/" +
                "-1009:Subscriptions not available/" +
                "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(), itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
responseCode=result.getResponse()
int responseCode = result.getResponse();
sku=purchase.getSku()
String sku = purchase.getSku();
skuDetails=inv.getSkuDetails(sku)
SkuDetails skuDetails = inv.getSkuDetails(sku);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
Button purchaseFiveButton = (Button) rootView.findViewById(R.id.fragment_main_button_purchase_five_coins);
xml=context.obtainStyledAttributes(attrs,R.styleable.LandingStrip)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.LandingStrip);
tabLayoutId=xml.getResourceId(R.styleable.LandingStrip_tabLayoutId,MISSING_TAB_LAYOUT_ID)
int tabLayoutId = xml.getResourceId(R.styleable.LandingStrip_tabLayoutId, MISSING_TAB_LAYOUT_ID);
indicatorColour=xml.getResourceId(R.styleable.LandingStrip_indicatorColor,DEFAULT_INDICATOR_COLOUR)
int indicatorColour = xml.getResourceId(R.styleable.LandingStrip_indicatorColor, DEFAULT_INDICATOR_COLOUR);
indicatorHeight=getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight,DEFAULT_INDICATOR_HEIGHT,xml)
int indicatorHeight = getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight, DEFAULT_INDICATOR_HEIGHT, xml);
tabsPaddingLeft=getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingLeft = getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding, DEFAULT_TABS_PADDING, xml);
tabsPaddingRight=getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingRight = getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding, DEFAULT_TABS_PADDING, xml);
MutableCoordinates drawCurrentTabCoordinates = new MutableCoordinates();
MutableCoordinates drawNextTabCoordinates = new MutableCoordinates();
MutableCoordinates drawMovingIndicatorCoordinates = new MutableCoordinates();
currentTab=tabsContainer.getTabAt(currentPosition)
View currentTab = tabsContainer.getTabAt(currentPosition);
currentTabStart=currentTab.getLeft()
float currentTabStart = currentTab.getLeft();
currentTabEnd=currentTab.getRight()
float currentTabEnd = currentTab.getRight();
nextTab=tabsContainer.getTabAt(currentPosition + 1)
View nextTab = tabsContainer.getTabAt(currentPosition + 1);
nextTabPositionOffset=getFractionFrom(pagePositionOffset)
float nextTabPositionOffset = getFractionFrom(pagePositionOffset);
indicatorStart=getIndicatorPosition(nextTab.getStart(),pagePositionOffset,currentTab.getStart(),nextTabPositionOffset)
float indicatorStart = getIndicatorPosition(nextTab.getStart(), pagePositionOffset, currentTab.getStart(), nextTabPositionOffset);
indicatorEnd=getIndicatorPosition(nextTab.getEnd(),pagePositionOffset,currentTab.getEnd(),nextTabPositionOffset)
float indicatorEnd = getIndicatorPosition(nextTab.getEnd(), pagePositionOffset, currentTab.getEnd(), nextTabPositionOffset);
height=getHeight()
int height = getHeight();
tabCount=pagerAdapter.getCount()
int tabCount = pagerAdapter.getCount();
title=pagerAdapter.getPageTitle(position)
CharSequence title = pagerAdapter.getPageTitle(position);
inflatedTabView=tabsContainer.inflateTab(layoutInflater,attributes.getTabLayoutId())
View inflatedTabView = tabsContainer.inflateTab(layoutInflater, attributes.getTabLayoutId());
int position = (int) view.getTag(TAG_KEY_POSITION);
scrollOffset=getHorizontalScrollOffset(position,positionOffset)
int scrollOffset = getHorizontalScrollOffset(position, positionOffset);
newScrollX=calculateScrollOffset(position,scrollOffset,positionOffset)
float newScrollX = calculateScrollOffset(position, scrollOffset, positionOffset);
tabWidth=tabsContainer.getTabAt(position).getWidth()
int tabWidth = tabsContainer.getTabAt(position).getWidth();
tabForPosition=tabsContainer.getTabAt(position)
View tabForPosition = tabsContainer.getTabAt(position);
float tabStartX = tabForPosition.getLeft() + scrollOffset;
int viewMiddleOffset = getTabParentWidth() / 2;
float tabCenterOffset = (tabForPosition.getRight() - tabForPosition.getLeft()) * 0.5F;
nextTabDelta=getNextTabDelta(position,pagerOffset,tabForPosition)
float nextTabDelta = getNextTabDelta(position, pagerOffset, tabForPosition);
LinearLayout tabsContainerView = new LinearLayout(context);
tab=getTabAt(index)
View tab = getTabAt(index);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
position=indicatorCoordinates.getStart()
float position = indicatorCoordinates.getStart();
lastTabOffset=((ViewGroup)getChildAt(0)).getChildAt(getChildCount() - 1).getWidth()
float lastTabOffset = ((ViewGroup) getChildAt(0)).getChildAt(getChildCount() - 1).getWidth();
frequency=getOneCycle(lastTabOffset)
float frequency = getOneCycle(lastTabOffset);
r=toHex(calculateColour(position,frequency,PHASE_RED,AMPLITUDE,CENTER_FREQUENCY))
String r = toHex(calculateColour(position, frequency, PHASE_RED, AMPLITUDE, CENTER_FREQUENCY));
g=toHex(calculateColour(position,frequency,PHASE_GREEN,AMPLITUDE,CENTER_FREQUENCY))
String g = toHex(calculateColour(position, frequency, PHASE_GREEN, AMPLITUDE, CENTER_FREQUENCY));
b=toHex(calculateColour(position,frequency,PHASE_BLUE,AMPLITUDE,CENTER_FREQUENCY))
String b = toHex(calculateColour(position, frequency, PHASE_BLUE, AMPLITUDE, CENTER_FREQUENCY));
height=getHeight()
int height = getHeight();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPagerFragment viewPagerFragment = new ViewPagerFragment();
Bundle bundle = new Bundle();
TextView view = (TextView) layoutInflater.inflate(R.layout.view_demo, container, false);
currentPosition=viewPagerAdapterState.getCurrentPosition()
int currentPosition = viewPagerAdapterState.getCurrentPosition();
view=getView(container,position)
View view = getView(container, position);
parcelableSparseArray=viewPagerAdapterState.get(position)
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
View view = (View) object;
SparseArray<Parcelable> viewState = new SparseArray<>();
position=entry.getValue()
int position = entry.getValue();
view=entry.getKey()
View view = entry.getKey();
bundle=in.readBundle()
Bundle bundle = in.readBundle();
Map<Integer, SparseArray<Parcelable>> viewStates = new HashMap<>(bundle.keySet().size());
sparseParcelableArray=bundle.getSparseParcelableArray(key)
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
primaryItemPosition=in.readInt()
int primaryItemPosition = in.readInt();
Bundle bundle = new Bundle();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
final TextView abText = (TextView) findViewById(R.id.ab_text);
final AyBe ayBe = new AyBe();
id=item.getItemId()
int id = item.getItemId();
callback=weakCallback.get()
AbTestingParamsLoadedCallback callback = weakCallback.get();
WeakReference<NoLeakActivity> weakNoLeakActivity = new WeakReference<NoLeakActivity>(noLeakActivity);
noLeakActivity=weakNoLeakActivity.get()
NoLeakActivity noLeakActivity = weakNoLeakActivity.get();
RecyclerView recyclerView = (RecyclerView) layoutInflater.inflate(R.layout.view_page, viewGroup, false);
itemView=layoutInflater.inflate(R.layout.view_item,parent,false)
View itemView = layoutInflater.inflate(R.layout.view_item, parent, false);
actual=foo.twice(HALF)
int actual = foo.twice(HALF);
int expected = WHOLE;
final float inverseRatio = 1f - ratio;
float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRatio);
float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRatio);
float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRatio);
hsv=node.getHsv()
float[] hsv = node.getHsv();
width=bitmap.getWidth()
final int width = bitmap.getWidth();
height=bitmap.getHeight()
final int height = bitmap.getHeight();
final int[] rgbPixels = new int[width * height];
final MedianCutQuantizer mcq = new MedianCutQuantizer(rgbPixels, NUM_COLORS);
primaryAccentColor=findPrimaryAccentColor()
final ColorNode primaryAccentColor = findPrimaryAccentColor();
secondaryAccentColor=findSecondaryAccentColor(primaryAccentColor)
final ColorNode secondaryAccentColor = findSecondaryAccentColor(primaryAccentColor);
tertiaryAccentColor=findTertiaryAccentColor(primaryAccentColor,secondaryAccentColor)
final int tertiaryAccentColor = findTertiaryAccentColor(
                primaryAccentColor, secondaryAccentColor);
primaryTextColor=findPrimaryTextColor(primaryAccentColor)
final int primaryTextColor = findPrimaryTextColor(primaryAccentColor);
secondaryTextColor=findSecondaryTextColor(primaryAccentColor)
final int secondaryTextColor = findSecondaryTextColor(primaryAccentColor);
final float primaryHue = primary.getHsv()[0];
final float candidateHue = candidate.getHsv()[0];
copy=Arrays.copyOf(palette,palette.length)
final MedianCutQuantizer.ColorNode[] copy = Arrays.copyOf(palette, palette.length);
maxCount=palette[0].getCount()
final float maxCount = palette[0].getCount();
lhsWeight=calculateWeight(lhs,maxCount)
final float lhsWeight = calculateWeight(lhs, maxCount);
rhsWeight=calculateWeight(rhs,maxCount)
final float rhsWeight = calculateWeight(rhs, maxCount);
float sum = 0;
float sumWeight = 0;
float value = values[i];
float weight = values[i + 1];
ColorHistogram colorHist = new ColorHistogram(pixels);
K=colorHist.getNumberOfColors()
int K = colorHist.getNumberOfColors();
ColorNode[] rCols = null;
rgb=colorHist.getColor(i)
int rgb = colorHist.getColor(i);
cnt=colorHist.getCount(i)
int cnt = colorHist.getCount(i);
ColorBox initialBox = new ColorBox(0, K - 1, 0);
List<ColorBox> colorSet = new ArrayList<ColorBox>();
int k = 1;
boolean done = false;
nextBox=findBoxToSplit(colorSet)
ColorBox nextBox = findBoxToSplit(colorSet);
newBox=nextBox.splitBox()
ColorBox newBox = nextBox.splitBox();
color=findClosestColor(pixels[i])
ColorNode color = findClosestColor(pixels[i]);
idx=findClosestColorIndex(rgb)
int idx = findClosestColorIndex(rgb);
red=Color.red(rgb)
int red = Color.red(rgb);
grn=Color.green(rgb)
int grn = Color.green(rgb);
blu=Color.blue(rgb)
int blu = Color.blue(rgb);
int minIdx = 0;
int minDistance = Integer.MAX_VALUE;
ColorNode color = quantColors[i];
d2=color.distance2(red,grn,blu)
int d2 = color.distance2(red, grn, blu);
ColorBox boxToSplit = null;
int minLevel = Integer.MAX_VALUE;
n=colorBoxes.size()
int n = colorBoxes.size();
ColorNode[] avgColors = new ColorNode[n];
int i = 0;
int dr = this.red - red;
int dg = this.grn - grn;
int db = this.blu - blu;
ColorNode color = imageColors[i];
int r = color.red;
int g = color.grn;
int b = color.blu;
dim=getLongestColorDimension()
ColorDimension dim = getLongestColorDimension();
med=findMedian(dim)
int med = findMedian(dim);
int nextLevel = level + 1;
ColorBox newBox = new ColorBox(med + 1, upper, nextLevel);
int rLength = rmax - rmin;
int gLength = gmax - gmin;
int bLength = bmax - bmin;
int half = count / 2;
int nPixels, median;
int rSum = 0;
int gSum = 0;
int bSum = 0;
int n = 0;
ColorNode ci = imageColors[i];
int cnt = ci.cnt;
double nd = n;
int avgRed = (int) (0.5 + rSum / nd);
int avgGrn = (int) (0.5 + gSum / nd);
int avgBlu = (int) (0.5 + bSum / nd);
s=this.getClass().getSimpleName()
String s = this.getClass().getSimpleName();
int i = 0;
int N = pixelsOrig.length;
int[] pixelsCpy = new int[N];
int k = -1;
int curColor = -1;
int nColors = k + 1;
id=item.getItemId()
int id = item.getItemId();
Intent intent = new Intent();
bitmap=((BitmapDrawable)imageView.getDrawable()).getBitmap()
Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap();
DominantColorCalculator dominantColorCalculator = new DominantColorCalculator(bitmap);
selectedImageUri=data.getData()
Uri selectedImageUri = data.getData();
selectedImagePath=getPath(selectedImageUri)
String selectedImagePath = getPath(selectedImageUri);
String[] projection = {MediaStore.Images.Media.DATA};
cursor=managedQuery(uri,projection,null,null,null)
Cursor cursor = managedQuery(uri, projection, null, null, null);
column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)
int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
LinearLayout rootView = (LinearLayout) inflater.inflate(R.layout.fragment_main, container, false);
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
preapprovalButton=payPal.getCheckoutButton(getActivity(),PayPal.BUTTON_194x37,CheckoutButton.TEXT_PAY)
CheckoutButton preapprovalButton = payPal.getCheckoutButton(getActivity(), PayPal.BUTTON_194x37, CheckoutButton.TEXT_PAY);
preapprovalIntent=payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY)
Intent preapprovalIntent = payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY);
String resultTitle = "";
String resultInfo = "";
String resultExtra = "";
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
PayPalPreapproval preapproval = new PayPalPreapproval();
preapproval=createPreapproval(preapprovalKey)
PayPalPreapproval preapproval = createPreapproval(preapprovalKey);
Bundle bundle = new Bundle();
int availableLength = maxLength;
StringBuilder stringBuilder = new StringBuilder(maxLength);
prefixAndSuffixLength=computeAppendedLengthIncludingSeparatorSpaces(prefix,suffix)
int prefixAndSuffixLength = computeAppendedLengthIncludingSeparatorSpaces(prefix, suffix);
urlLength=computeUrlLengthIncludingSeparatorSpace(url)
int urlLength = computeUrlLengthIncludingSeparatorSpace(url);
trimmedSubject=ellipsizeTextIfExceedsMaxLength(subject,availableLength)
String trimmedSubject = ellipsizeTextIfExceedsMaxLength(subject, availableLength);
int length = 0;
preferences=context.getSharedPreferences(MRU_PREFERENCES,Context.MODE_PRIVATE)
SharedPreferences preferences = context.getSharedPreferences(MRU_PREFERENCES, Context.MODE_PRIVATE);
args=getArguments()
Bundle args = getArguments();
themeResId=getThemeResIdIfProvidedIn(args)
int themeResId = getThemeResIdIfProvidedIn(args);
title=getTitleIfProvidedIn(args)
CharSequence title = getTitleIfProvidedIn(args);
builder=createDialogBuilder(themeResId).setCancelable(true).setView(dialogView)
AlertDialog.Builder builder = createDialogBuilder(themeResId)
                .setCancelable(true)
                .setView(dialogView);
inflater=getActivity().getLayoutInflater()
LayoutInflater inflater = getActivity().getLayoutInflater();
GridView gridView = (GridView) rootView.findViewById(R.id.ps__dialog_grid);
targetApps=extractTargetAppsFrom(args)
TargetApps targetApps = extractTargetAppsFrom(args);
allShareTargets=getAvailableShareTargets(sharingIntent)
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
priorityAppInfos=createPriorityResolveInfoList(targetApps,allShareTargets)
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
otherAppInfos=createOtherAppsResolveInfoList(priorityAppInfos,allShareTargets)
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
resolveInfos=targetApps.extractTargetResolveInfosFrom(allShareTargets)
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
mruResolveInfo=findMruResolveInfoIn(allShareTargets)
ResolveInfo mruResolveInfo = findMruResolveInfoIn(allShareTargets);
List<ResolveInfo> otherAppsInfos = new ArrayList<ResolveInfo>(allAppInfos);
mruPackageName=persister.getLastUsedTarget()
String mruPackageName = persister.getLastUsedTarget();
String packageName = resolveInfo.activityInfo.packageName;
packageManager=getActivity().getPackageManager()
PackageManager packageManager = getActivity().getPackageManager();
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
View buttonStrip = (View) showMoreButton.getParent();
gridView=getGridView()
GridView gridView = getGridView();
intent=wrapIntentWithExplicitTargetComponentForItem(position,sharingIntent)
Intent intent = wrapIntentWithExplicitTargetComponentForItem(position, sharingIntent);
Intent intent = new Intent(sharingIntent);
ActivityInfo activity = adapter.getItem(position).activityInfo;
ComponentName name = new ComponentName(activity.applicationInfo.packageName, activity.name);
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
PriorityShareDialog dialog = new PriorityShareDialog();
Bundle args = new Bundle();
sharingIntent=createSharingIntent()
Intent sharingIntent = createSharingIntent();
fragmentManager=activity.getFragmentManager()
FragmentManager fragmentManager = activity.getFragmentManager();
Intent intent = new Intent(Intent.ACTION_SEND);
dialog=new PriorityShareDialog.Builder().setTitle(title).setTargetApps(targetApps).setSharingIntent(sharingIntent).setOnPrepareSharingIntentListener(listener).setShowMostRecentlyUsed(showMostRecentlyUsed).build()
PriorityShareDialog dialog = new PriorityShareDialog.Builder()
                .setTitle(title)
                .setTargetApps(targetApps)
                .setSharingIntent(sharingIntent)
                .setOnPrepareSharingIntentListener(listener)
                .setShowMostRecentlyUsed(showMostRecentlyUsed)
                .build();
PrioritySharer prioritySharer = new PrioritySharer();
prioritySharer=build()
PrioritySharer prioritySharer = build();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
layoutInflater=LayoutInflater.from(context)
LayoutInflater layoutInflater = LayoutInflater.from(context);
iconSizePx=getIconSizePx(context.getResources())
int iconSizePx = getIconSizePx(context.getResources());
ArrayList<ResolveInfo> sortedList = new ArrayList<ResolveInfo>(resolveInfoList);
int otherAppsCountMaybe = showAllApps ? otherAppInfos.size() : 0;
firstOtherAppsItemPosition=priorityAppInfos.size()
int firstOtherAppsItemPosition = priorityAppInfos.size();
int offsetPosition = position - firstOtherAppsItemPosition;
TextView textView;
textView=initializeItemViewIfNecessary(convertView,R.layout.ps__grid_item_share,parent)
TextView textView = initializeItemViewIfNecessary(convertView, R.layout.ps__grid_item_share, parent);
info=getItem(position)
ResolveInfo info = getItem(position);
icon=info.loadIcon(packageManager)
Drawable icon = info.loadIcon(packageManager);
arraySize=in.readInt()
int arraySize = in.readInt();
String[] packageNames = new String[arraySize];
arraySize=targetPackages.size()
int arraySize = targetPackages.size();
String[] packagesArray = new String[arraySize];
SparseArray<ResolveInfo> matchedResolveInfos = new SparseArray<ResolveInfo>(targetPackages.size());
String packageName = info.activityInfo.packageName;
index=indexOfItemInto(packageName,targetPackages)
int index = indexOfItemInto(packageName, targetPackages);
sparseArraySize=sparseArray.size()
int sparseArraySize = sparseArray.size();
ArrayList<T> list = new ArrayList<T>(sparseArraySize);
int i = 0;
originalSubject=intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT)
CharSequence originalSubject = intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT);
String subject = originalSubject != null ? originalSubject.toString() : null;
composer=createComposer()
MessageComposer composer = createComposer();
component=intent.getComponent()
ComponentName component = intent.getComponent();
targetPackageName=component.getPackageName()
String targetPackageName = component.getPackageName();
adapter=ArrayAdapter.createFromResource(this,R.array.target_apps,android.R.layout.simple_spinner_item)
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
EditText text = (EditText) findViewById(R.id.text);
EditText title = (EditText) findViewById(R.id.title);
EditText mimeType = (EditText) findViewById(R.id.mime_type);
EditText dataUri = (EditText) findViewById(R.id.data_uri);
Switch showMostRecentlyUsed = (Switch) findViewById(R.id.show_most_recently_used);
uriString=dataUri.getText().toString()
String uriString = dataUri.getText().toString();
EditText text = (EditText) findViewById(R.id.text);
TextView textView = (TextView) convertView.findViewById(R.id.positionView);
colorView=convertView.findViewById(R.id.colorView)
View colorView = convertView.findViewById(R.id.colorView);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
offset=headerPlaceholder.getTop()
int offset = headerPlaceholder.getTop();
Integer item = COLORS[position];
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
firstVisiblePosition=grid.getFirstVisiblePosition()
int firstVisiblePosition = grid.getFirstVisiblePosition();
inflate=getViewForPosition(container,position)
View inflate = getViewForPosition(container, position);
id=item.getItemId()
int id = item.getItemId();
MyActivity activity = new MyActivity();
String manifestProperty = "../app/src/main/AndroidManifest.xml";
String resProperty = "../app/src/main/res";
cursor=resolver.query(uri,projection,selection,selectionArgs,null)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, null);
cursor=resolver.query(uri,projection,selection,selectionArgs,sortOrder)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, sortOrder);
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=richClass.setter(name)
Method setter = richClass.setter(name);
T obj;
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=methodsByName.get(name)
Method setter = methodsByName.get(name);
int type = TYPE_INT;
Class<?> t = setter.getParameterTypes()[0];
Class<?> t = setter.getParameterTypes()[0];
cursorType=cursor.getType(index)
final int cursorType = cursor.getType(index);
final Object obj;
s=f.getAnnotation(Mapper.class)
Mapper s = f.getAnnotation(Mapper.class);
mm=m.getAnnotation(Mapper.class)
Mapper mm = m.getAnnotation(Mapper.class);
methodName=StringUtil.asCamelifySetMethod(what)
String methodName = StringUtil.asCamelifySetMethod(what);
cursor=getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,null,null,null,null)
Cursor cursor = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
now=System.currentTimeMillis()
long now = System.currentTimeMillis();
List<Contact2> typedCursor = new CursorList<Contact2>(cursor, Contact2.class);
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[a-zA-Z0-9]+")
Pattern p = Pattern.compile("[a-zA-Z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[A-Z][a-z0-9]+")
Pattern p = Pattern.compile("[A-Z][a-z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
SurfaceView first = (SurfaceView) findViewById(R.id.firstSurface);
SurfaceView second = (SurfaceView) findViewById(R.id.secondSurface);
Intent pickVideo = new Intent(Intent.ACTION_PICK);
xml=context.obtainStyledAttributes(attrs,R.styleable.RelativeLayoutWithForeground)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.RelativeLayoutWithForeground);
int foregroundResId = INVALID_FOREGROUND_ID;
drawable=getDrawable(getResources(),foregroundResId)
Drawable drawable = getDrawable(getResources(), foregroundResId);
Bundle args = new Bundle();
enroll=mHotwordDetector.createEnrollIntent()
Intent enroll = mHotwordDetector.createEnrollIntent();

Diff of 254259c6eeba5dc51bfa0753e5f670f797bc00d8 and 08c3fdd5c648ea9bbbb1438ec7b11670f555dc9c:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 6
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 254259c6eeba5dc51bfa0753e5f670f797bc00d8 to 08c3fdd5c648ea9bbbb1438ec7b11670f555dc9c


****Parsing for addition at revision 08c3fdd5c648ea9bbbb1438ec7b11670f555dc9c****

Added ApplicationTest.java to .\/spikes\ repository source files.
Added DrawerActivity.java to .\/spikes\ repository source files.
Added EarthActivity.java to .\/spikes\ repository source files.
Added SaturnActivity.java to .\/spikes\ repository source files.
Added LocalPlayerActivity.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added CastApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ComposeSmsActivity.java to .\/spikes\ repository source files.
Added HeadlessSmsSendService.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MmsReceiver.java to .\/spikes\ repository source files.
Added SmsReceiver.java to .\/spikes\ repository source files.
Added ExtendedDemoActivity.java to .\/spikes\ repository source files.
Added ExtendedDemoApplication.java to .\/spikes\ repository source files.
Added SimpleDemoActivity.java to .\/spikes\ repository source files.
Added SimpleDemoApplication.java to .\/spikes\ repository source files.
Added Binder.java to .\/spikes\ repository source files.
Added ConnectedClient.java to .\/spikes\ repository source files.
Added Connection.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnection.java to .\/spikes\ repository source files.
Added ServiceConnectionCallback.java to .\/spikes\ repository source files.
Added EasyCustomTabs.java to .\/spikes\ repository source files.
Added ActionButtonComposer.java to .\/spikes\ repository source files.
Added CloseButtonIconComposer.java to .\/spikes\ repository source files.
Added Composer.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilder.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigator.java to .\/spikes\ repository source files.
Added EasyCustomTabsWebNavigator.java to .\/spikes\ repository source files.
Added ExitAnimationsComposer.java to .\/spikes\ repository source files.
Added IntentCustomizer.java to .\/spikes\ repository source files.
Added MenuItemComposer.java to .\/spikes\ repository source files.
Added NavigationFallback.java to .\/spikes\ repository source files.
Added Navigator.java to .\/spikes\ repository source files.
Added ShowTitleComposer.java to .\/spikes\ repository source files.
Added StartAnimationsComposer.java to .\/spikes\ repository source files.
Added ToolbarColorComposer.java to .\/spikes\ repository source files.
Added UrlBarHidingComposer.java to .\/spikes\ repository source files.
Added WebNavigator.java to .\/spikes\ repository source files.
Added AvailableAppProvider.java to .\/spikes\ repository source files.
Added BestPackageFinder.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProvider.java to .\/spikes\ repository source files.
Added BinderTest.java to .\/spikes\ repository source files.
Added ConnectedClientTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnectionTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigatorTest.java to .\/spikes\ repository source files.
Added BestPackageFinderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProviderTest.java to .\/spikes\ repository source files.
Added ApiPagedChannelHistory.java to .\/spikes\ repository source files.
Added ApiPagedResponse.java to .\/spikes\ repository source files.
Added ChannelHistory.java to .\/spikes\ repository source files.
Added HistoryConverter.java to .\/spikes\ repository source files.
Added Runner.java to .\/spikes\ repository source files.
Added SlackHistoryFetcher.java to .\/spikes\ repository source files.
Added SlackWebService.java to .\/spikes\ repository source files.
Added ApiPagedResponseTest.java to .\/spikes\ repository source files.
Added MainActivityTest.java to .\/spikes\ repository source files.
Added LoremAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added BetterAccountManager.java to .\/spikes\ repository source files.
Added BetterAuthenticator.java to .\/spikes\ repository source files.
Added BetterAuthenticatorActivity.java to .\/spikes\ repository source files.
Added GertHerbAuthenticator.java to .\/spikes\ repository source files.
Added GertHerbAuthenticatorService.java to .\/spikes\ repository source files.
Added NoAccountException.java to .\/spikes\ repository source files.
Added ReactiveAuthenticatorActivity.java to .\/spikes\ repository source files.
Added Token.java to .\/spikes\ repository source files.
Added GertHerbActivity.java to .\/spikes\ repository source files.
Added GertHerbApplication.java to .\/spikes\ repository source files.
Added GertHerbAuthenticationActivity.java to .\/spikes\ repository source files.
Added TypefaceFactory.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added ViewServer.java to .\/spikes\ repository source files.
Added ViewServerManager.java to .\/spikes\ repository source files.
Added DeveloperError.java to .\/spikes\ repository source files.
Added HomeActivity.java to .\/spikes\ repository source files.
Added LoginActivity.java to .\/spikes\ repository source files.
Added LoginView.java to .\/spikes\ repository source files.
Added UserCredentials.java to .\/spikes\ repository source files.
Added FontButton.java to .\/spikes\ repository source files.
Added FontEditText.java to .\/spikes\ repository source files.
Added FontTextView.java to .\/spikes\ repository source files.
Added GithubApi.java to .\/spikes\ repository source files.
Added GithubApiFactory.java to .\/spikes\ repository source files.
Added TokenRequest.java to .\/spikes\ repository source files.
Added TokenResponse.java to .\/spikes\ repository source files.
Added Dummy.java to .\/spikes\ repository source files.
Added DummyTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MainFragment.java to .\/spikes\ repository source files.
Added Attributes.java to .\/spikes\ repository source files.
Added Coordinates.java to .\/spikes\ repository source files.
Added IndicatorCoordinatesCalculator.java to .\/spikes\ repository source files.
Added LandingStrip.java to .\/spikes\ repository source files.
Added MutableCoordinates.java to .\/spikes\ repository source files.
Added OnPagerAdapterChangedListener.java to .\/spikes\ repository source files.
Added PagerAdapterObserver.java to .\/spikes\ repository source files.
Added Scrollable.java to .\/spikes\ repository source files.
Added ScrollingPageChangeListener.java to .\/spikes\ repository source files.
Added State.java to .\/spikes\ repository source files.
Added TabsContainer.java to .\/spikes\ repository source files.
Added CustomLandingStrip.java to .\/spikes\ repository source files.
Added CustomTabActivity.java to .\/spikes\ repository source files.
Added ExampleRainbowLandingStrip.java to .\/spikes\ repository source files.
Added FixedWidthTabActivity.java to .\/spikes\ repository source files.
Added NoFragmentsSimpleTextTabActivity.java to .\/spikes\ repository source files.
Added Data.java to .\/spikes\ repository source files.
Added DemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added SmallDemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerFragment.java to .\/spikes\ repository source files.
Added DemoViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapterState.java to .\/spikes\ repository source files.
Added SimpleTextTabActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AbTestingParamsLoadedCallback.java to .\/spikes\ repository source files.
Added AyBe.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added WeakStartCallback.java to .\/spikes\ repository source files.
Added LeakActivity.java to .\/spikes\ repository source files.
Added NoLeakActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added Bar.java to .\/spikes\ repository source files.
Added Foo.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added FooTest.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added ColorScheme.java to .\/spikes\ repository source files.
Added ColorUtils.java to .\/spikes\ repository source files.
Added DominantColorCalculator.java to .\/spikes\ repository source files.
Added FloatUtils.java to .\/spikes\ repository source files.
Added MedianCutQuantizer.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added PayPalFragment.java to .\/spikes\ repository source files.
Added PayPalHelper.java to .\/spikes\ repository source files.
Added MaxLengthMessageComposer.java to .\/spikes\ repository source files.
Added MessageComposer.java to .\/spikes\ repository source files.
Added TwitterMessageComposer.java to .\/spikes\ repository source files.
Added DisabledMruPersister.java to .\/spikes\ repository source files.
Added MruPersister.java to .\/spikes\ repository source files.
Added SharedPreferencesMruPersister.java to .\/spikes\ repository source files.
Added OnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added PriorityShareDialog.java to .\/spikes\ repository source files.
Added PrioritySharer.java to .\/spikes\ repository source files.
Added ShareTargetsAdapter.java to .\/spikes\ repository source files.
Added SimpleOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added TargetApps.java to .\/spikes\ repository source files.
Added TwitterOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AdvancedActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SimpleActivity.java to .\/spikes\ repository source files.
Added LockingActivity.java to .\/spikes\ repository source files.
Added PostLockingActivity.java to .\/spikes\ repository source files.
Added PreLockingActivity.java to .\/spikes\ repository source files.
Added DummyAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added NovoStaggeredGridView.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SpikeApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SwipeableView.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MyClass.java to .\/spikes\ repository source files.
Added MyClassTest.java to .\/spikes\ repository source files.
Added MyAndroidClassTest.java to .\/spikes\ repository source files.
Added RobolectricGradleTestRunner.java to .\/spikes\ repository source files.
Added Mapper.java to .\/spikes\ repository source files.
Added Query.java to .\/spikes\ repository source files.
Added TypedResolver.java to .\/spikes\ repository source files.
Added CursorList.java to .\/spikes\ repository source files.
Added CursorListIterator.java to .\/spikes\ repository source files.
Added CursorMarshaller.java to .\/spikes\ repository source files.
Added EmptyListIterator.java to .\/spikes\ repository source files.
Added ReflectionCursorMarshaller.java to .\/spikes\ repository source files.
Added RichClass.java to .\/spikes\ repository source files.
Added Setter.java to .\/spikes\ repository source files.
Added Function.java to .\/spikes\ repository source files.
Added TypedElementLoader.java to .\/spikes\ repository source files.
Added TypedLoader.java to .\/spikes\ repository source files.
Added Marshaller.java to .\/spikes\ repository source files.
Added ObjectMapper.java to .\/spikes\ repository source files.
Added TypedActivity.java to .\/spikes\ repository source files.
Added StringUtil.java to .\/spikes\ repository source files.
Added MyObject.java to .\/spikes\ repository source files.
Added MediaPlayerSwitcherActivity.java to .\/spikes\ repository source files.
Added VideoPlayerService.java to .\/spikes\ repository source files.
Added RelativeLayoutWithForeground.java to .\/spikes\ repository source files.
Added DemoActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added RecognitionService.java to .\/spikes\ repository source files.
Added SessionService.java to .\/spikes\ repository source files.
Added SettingsActivity.java to .\/spikes\ repository source files.
Added SmartContextInteractionService.java to .\/spikes\ repository source files.
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
ListView listView = (ListView) findViewById(R.id.left_drawer);
DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close);
b=getIntent().getExtras()
Bundle b = getIntent().getExtras();
mShouldStartPlayback=b.getBoolean("shouldStart")
boolean mShouldStartPlayback = b.getBoolean("shouldStart");
startPosition=b.getInt("startPosition",0)
int startPosition = b.getInt("startPosition", 0);
currentPos=mVideoView.getCurrentPosition()
int currentPos = mVideoView.getCurrentPosition();
String msg;
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, mDisplaySize.y + getActionBar().getHeight());
mm=mSelectedMedia.getMetadata()
MediaMetadata mm = mSelectedMedia.getMetadata();
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, (int) (mDisplaySize.x * ASPECT_RATIO));
WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
width=display.getWidth()
int width = display.getWidth();
height=display.getHeight()
int height = display.getHeight();
int resourceId = 0;
String videoUrl = "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4#sthash.rJ5rPZy8.dpuf";
String title = "Jahre Philharmonie";
String description = "Awesome film you must watch!";
String author = "Blundell";
String thumbUrl = "http://www.ustream.tv/blog/wp-content/uploads/2013/10/simply-go-live.png";
MediaMetadata metadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE);
mediaInfo=new MediaInfo.Builder(videoUrl).setMetadata(metadata).setStreamType(MediaInfo.STREAM_TYPE_BUFFERED).setContentType("video/mp4").build()
MediaInfo mediaInfo = new MediaInfo.Builder(videoUrl)
                        .setMetadata(metadata)
                        .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)
                        .setContentType("video/mp4")
                        .build();
Intent intent = new Intent(MainActivity.this, LocalPlayerActivity.class);
preferences=getPreferences(MODE_PRIVATE)
SharedPreferences preferences = getPreferences(MODE_PRIVATE);
defaultSmsPackage=Telephony.Sms.getDefaultSmsPackage(this)
String defaultSmsPackage = Telephony.Sms.getDefaultSmsPackage(this);
Intent intent = new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
availableAppProvider=EasyCustomTabs.getInstance()
AvailableAppProvider availableAppProvider = EasyCustomTabs.getInstance();
ConnectedClient connectedClient = new ConnectedClient(client);
binder=Binder.newInstance()
Binder binder = Binder.newInstance();
List<Composer> composerList = new ArrayList<>();
customTabsSession=connection.newSession()
CustomTabsSession customTabsSession = connection.newSession();
CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(customTabsSession);
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
context=EasyCustomTabs.getInstance().getContext()
Context context = EasyCustomTabs.getInstance().getContext();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
packagesSupportingCustomTabs=getPackagesSupportingCustomTabs()
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
defaultPackage=getDefaultPackage()
String defaultPackage = getDefaultPackage();
defaultActivityInfo=packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK,0)
ResolveInfo defaultActivityInfo = packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK, 0);
String packageName = defaultActivityInfo.activityInfo.packageName;
resolvedInfoList=packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK,0)
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<String> packagesSupportingCustomTabs = new ArrayList<>();
Intent serviceIntent = new Intent();
bestPackageFinder=BestPackageFinder.newInstance()
BestPackageFinder bestPackageFinder = BestPackageFinder.newInstance();
packageName=bestPackageFinder.findBestPackage()
String packageName = bestPackageFinder.findBestPackage();
resolveInfo=createResolveInfoFor(packageName)
ResolveInfo resolveInfo = createResolveInfoFor(packageName);
ResolveInfo resolveInfo = new ResolveInfo();
List<ResolveInfo> resolveInfoList = new ArrayList<>();
defaultPackageResolveInfo=createResolveInfoFor(packageName)
ResolveInfo defaultPackageResolveInfo = createResolveInfoFor(packageName);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
oldestApiMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage oldestApiMessage = apiMessages.get(apiMessages.size() - 1);
String lastResponseEpochTime = oldestApiMessage.timeStamp;
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
latestMessage=latestMessages.get(latestMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage latestMessage = latestMessages.get(latestMessages.size() - 1);
latestMessageDateTime=convertToLocalDateTime(latestMessage.timeStamp)
LocalDateTime latestMessageDateTime = convertToLocalDateTime(latestMessage.timeStamp);
List<ChannelHistory.Message> messages = new ArrayList<>();
historyFrom=getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1))
LocalDateTime historyFrom = getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1));
historyTo=getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0))
LocalDateTime historyTo = getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0));
String text = apiMessage.text;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
lastMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage lastMessage = apiMessages.get(apiMessages.size() - 1);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
firstMessage=apiMessages.get(0)
ApiPagedChannelHistory.ApiMessage firstMessage = apiMessages.get(0);
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
String slackToken = args[0];
retrofit=new Retrofit.Builder().baseUrl("https://slack.com/api/").addConverterFactory(GsonConverterFactory.create()).build()
Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://slack.com/api/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();
slackWebService=retrofit.create(SlackWebService.class)
SlackWebService slackWebService = retrofit.create(SlackWebService.class);
slackHistoryFetcher=SlackHistoryFetcher.from(slackWebService,slackToken)
SlackHistoryFetcher slackHistoryFetcher = SlackHistoryFetcher.from(slackWebService, slackToken);
start=LocalDateTime.now()
LocalDateTime start = LocalDateTime.now();
end=LocalDateTime.now().minusDays(7)
LocalDateTime end = LocalDateTime.now().minusDays(7);
channelHistory=slackHistoryFetcher.getChannelHistory(start,end)
ChannelHistory channelHistory = slackHistoryFetcher.getChannelHistory(start, end);
HistoryConverter historyConverter = new HistoryConverter();
ApiPagedResponse apiPagedResponse = new ApiPagedResponse(start);
response=fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime())
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
apiPagedChannelHistory=response.body()
ApiPagedChannelHistory apiPagedChannelHistory = response.body();
channelHistory=slackWebService.getChannelHistory(slackToken,channel,lastResponseEpochTime,NUMBER_OF_RESULTS)
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
ApiPagedChannelHistory apiPagedChannelHistory = new ApiPagedChannelHistory();
ApiPagedChannelHistory.ApiMessage apiMessage = new ApiPagedChannelHistory.ApiMessage();
final TextView textView = new TextView(context);
emptyView=findViewById(R.id.empty_view)
View emptyView = findViewById(R.id.empty_view);
final Integer action = values[0];
LoremAdapter loremAdapter = new LoremAdapter();
accounts=accountManager.getAccountsByType(accountType)
Account[] accounts = accountManager.getAccountsByType(accountType);
Bundle result;
Bundle result;
Bundle result = new Bundle();
activity=createLoginIntent(context,accountType,authTokenType,requiredFeatures,options)
Intent activity = createLoginIntent(context, accountType, authTokenType, requiredFeatures, options);
Bundle bundle = new Bundle();
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
accounts=accountManager.getAccountsByType(authTokenType)
Account[] accounts = accountManager.getAccountsByType(authTokenType);
bundle=createResponseBundle(token)
Bundle bundle = createResponseBundle(token);
accountManager=AccountManager.get(this.getApplicationContext())
AccountManager accountManager = AccountManager.get(this.getApplicationContext());
Account account = new Account(token.getUserName(), getAccountName());
Bundle bundle = new Bundle();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
GertHerbAuthenticator authenticator = new GertHerbAuthenticator(this);
fontId=getFontId(context,attrs)
int fontId = getFontId(context, attrs);
fontType=getFontType(fontId)
FontType fontType = getFontType(fontId);
typedArray=context.obtainStyledAttributes(attrs,R.styleable.CustomTextAppearance)
TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CustomTextAppearance);
typeface=createTypeFace(context,fontType)
Typeface typeface = createTypeFace(context, fontType);
info=context.getApplicationInfo()
ApplicationInfo info = context.getApplicationInfo();
name=activity.getTitle().toString()
String name = activity.getTitle().toString();
client=mServer.accept()
Socket client = mServer.accept();
boolean result;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
BufferedReader in = null;
request=in.readLine()
final String request = in.readLine();
String command;
String parameters;
index=request.indexOf(' ')
int index = request.indexOf(' ');
boolean result;
boolean success = true;
BufferedWriter out = null;
index=parameters.indexOf(' ')
int index = parameters.indexOf(' ');
code=parameters.substring(0,index)
final String code = parameters.substring(0, index);
int hashCode = (int) Long.parseLong(code, 16);
window=findWindow(hashCode)
final View window = findWindow(hashCode);
dispatch=ViewDebug.class.getDeclaredMethod("dispatchCommand",View.class,String.class,String.class,OutputStream.class)
final Method dispatch = ViewDebug.class.getDeclaredMethod("dispatchCommand",
                        View.class, String.class, String.class, OutputStream.class);
View window = null;
boolean result = true;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
boolean result = true;
String focusName = null;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
View focusedWindow = null;
BufferedWriter out = null;
boolean needWindowListUpdate = false;
boolean needFocusedWindowUpdate = false;
BetterAccountManager accountManager = new BetterAccountManager(this, getString(R.string.account_type), getString(R.string.token_type), null);
loginView=Views.findById(this,R.id.login_view)
LoginView loginView = Views.findById(this, R.id.login_view);
authorizationApi=new GithubApiFactory().createAuthorizationApi(credentials.username,credentials.password)
GithubApi authorizationApi = new GithubApiFactory().createAuthorizationApi(credentials.username, credentials.password);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
Endpoint endpoint = new Endpoint() {
            @Override
            public String getUrl() {
                return GITHUB_API_URL;
            }

            @Override
            public String getName() {
                return "Live";
            }
        };
interceptor=createAuthorizationRequestInterceptor(username,password)
RequestInterceptor interceptor = createAuthorizationRequestInterceptor(username, password);
restAdapter=createRestAdapter(endpoint,interceptor)
RestAdapter restAdapter = createRestAdapter(endpoint, interceptor);
Dummy dummy = new Dummy();
result=dummy.explodes()
boolean result = dummy.explodes();
String base64EncodedPublicKey = "CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE";
premiumPurchase=inventory.getPurchase(SKU_PREMIUM)
Purchase premiumPurchase = inventory.getPurchase(SKU_PREMIUM);
infiniteGasPurchase=inventory.getPurchase(SKU_INFINITE_GAS)
Purchase infiniteGasPurchase = inventory.getPurchase(SKU_INFINITE_GAS);
gasPurchase=inventory.getPurchase(SKU_GAS)
Purchase gasPurchase = inventory.getPurchase(SKU_GAS);
String payload = "";
String payload = "";
String payload = "";
payload=p.getDeveloperPayload()
String payload = p.getDeveloperPayload();
int index = mTank >= TANK_RES_IDS.length ? TANK_RES_IDS.length - 1 : mTank;
AlertDialog.Builder bld = new AlertDialog.Builder(this);
spe=getPreferences(MODE_PRIVATE).edit()
SharedPreferences.Editor spe = getPreferences(MODE_PRIVATE).edit();
sp=getPreferences(MODE_PRIVATE)
SharedPreferences sp = getPreferences(MODE_PRIVATE);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                                  + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                    | ((source[d + 1 + off] << 24) >>> 16)
                    | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                    | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                                   "-1002:Bad response received/" +
                                   "-1003:Purchase signature verification failed/" +
                                   "-1004:Send intent failed/" +
                                   "-1005:User cancelled/" +
                                   "-1006:Unknown purchase response/" +
                                   "-1007:Missing token/" +
                                   "-1008:Unknown error/" +
                                   "-1009:Subscriptions not available/" +
                                   "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(),
                    itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                        | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                        | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                            | ((source[d + 1 + off] << 24) >>> 16)
                            | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                            | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                "-1002:Bad response received/" +
                "-1003:Purchase signature verification failed/" +
                "-1004:Send intent failed/" +
                "-1005:User cancelled/" +
                "-1006:Unknown purchase response/" +
                "-1007:Missing token/" +
                "-1008:Unknown error/" +
                "-1009:Subscriptions not available/" +
                "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(), itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
responseCode=result.getResponse()
int responseCode = result.getResponse();
sku=purchase.getSku()
String sku = purchase.getSku();
skuDetails=inv.getSkuDetails(sku)
SkuDetails skuDetails = inv.getSkuDetails(sku);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
Button purchaseFiveButton = (Button) rootView.findViewById(R.id.fragment_main_button_purchase_five_coins);
xml=context.obtainStyledAttributes(attrs,R.styleable.LandingStrip)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.LandingStrip);
tabLayoutId=xml.getResourceId(R.styleable.LandingStrip_tabLayoutId,MISSING_TAB_LAYOUT_ID)
int tabLayoutId = xml.getResourceId(R.styleable.LandingStrip_tabLayoutId, MISSING_TAB_LAYOUT_ID);
indicatorColour=xml.getResourceId(R.styleable.LandingStrip_indicatorColor,DEFAULT_INDICATOR_COLOUR)
int indicatorColour = xml.getResourceId(R.styleable.LandingStrip_indicatorColor, DEFAULT_INDICATOR_COLOUR);
indicatorHeight=getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight,DEFAULT_INDICATOR_HEIGHT,xml)
int indicatorHeight = getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight, DEFAULT_INDICATOR_HEIGHT, xml);
tabsPaddingLeft=getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingLeft = getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding, DEFAULT_TABS_PADDING, xml);
tabsPaddingRight=getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingRight = getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding, DEFAULT_TABS_PADDING, xml);
MutableCoordinates drawCurrentTabCoordinates = new MutableCoordinates();
MutableCoordinates drawNextTabCoordinates = new MutableCoordinates();
MutableCoordinates drawMovingIndicatorCoordinates = new MutableCoordinates();
currentTab=tabsContainer.getTabAt(currentPosition)
View currentTab = tabsContainer.getTabAt(currentPosition);
currentTabStart=currentTab.getLeft()
float currentTabStart = currentTab.getLeft();
currentTabEnd=currentTab.getRight()
float currentTabEnd = currentTab.getRight();
nextTab=tabsContainer.getTabAt(currentPosition + 1)
View nextTab = tabsContainer.getTabAt(currentPosition + 1);
nextTabPositionOffset=getFractionFrom(pagePositionOffset)
float nextTabPositionOffset = getFractionFrom(pagePositionOffset);
indicatorStart=getIndicatorPosition(nextTab.getStart(),pagePositionOffset,currentTab.getStart(),nextTabPositionOffset)
float indicatorStart = getIndicatorPosition(nextTab.getStart(), pagePositionOffset, currentTab.getStart(), nextTabPositionOffset);
indicatorEnd=getIndicatorPosition(nextTab.getEnd(),pagePositionOffset,currentTab.getEnd(),nextTabPositionOffset)
float indicatorEnd = getIndicatorPosition(nextTab.getEnd(), pagePositionOffset, currentTab.getEnd(), nextTabPositionOffset);
height=getHeight()
int height = getHeight();
tabCount=pagerAdapter.getCount()
int tabCount = pagerAdapter.getCount();
title=pagerAdapter.getPageTitle(position)
CharSequence title = pagerAdapter.getPageTitle(position);
inflatedTabView=tabsContainer.inflateTab(layoutInflater,attributes.getTabLayoutId())
View inflatedTabView = tabsContainer.inflateTab(layoutInflater, attributes.getTabLayoutId());
int position = (int) view.getTag(TAG_KEY_POSITION);
scrollOffset=getHorizontalScrollOffset(position,positionOffset)
int scrollOffset = getHorizontalScrollOffset(position, positionOffset);
newScrollX=calculateScrollOffset(position,scrollOffset,positionOffset)
float newScrollX = calculateScrollOffset(position, scrollOffset, positionOffset);
tabWidth=tabsContainer.getTabAt(position).getWidth()
int tabWidth = tabsContainer.getTabAt(position).getWidth();
tabForPosition=tabsContainer.getTabAt(position)
View tabForPosition = tabsContainer.getTabAt(position);
float tabStartX = tabForPosition.getLeft() + scrollOffset;
int viewMiddleOffset = getTabParentWidth() / 2;
float tabCenterOffset = (tabForPosition.getRight() - tabForPosition.getLeft()) * 0.5F;
nextTabDelta=getNextTabDelta(position,pagerOffset,tabForPosition)
float nextTabDelta = getNextTabDelta(position, pagerOffset, tabForPosition);
LinearLayout tabsContainerView = new LinearLayout(context);
tab=getTabAt(index)
View tab = getTabAt(index);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
position=indicatorCoordinates.getStart()
float position = indicatorCoordinates.getStart();
lastTabOffset=((ViewGroup)getChildAt(0)).getChildAt(getChildCount() - 1).getWidth()
float lastTabOffset = ((ViewGroup) getChildAt(0)).getChildAt(getChildCount() - 1).getWidth();
frequency=getOneCycle(lastTabOffset)
float frequency = getOneCycle(lastTabOffset);
r=toHex(calculateColour(position,frequency,PHASE_RED,AMPLITUDE,CENTER_FREQUENCY))
String r = toHex(calculateColour(position, frequency, PHASE_RED, AMPLITUDE, CENTER_FREQUENCY));
g=toHex(calculateColour(position,frequency,PHASE_GREEN,AMPLITUDE,CENTER_FREQUENCY))
String g = toHex(calculateColour(position, frequency, PHASE_GREEN, AMPLITUDE, CENTER_FREQUENCY));
b=toHex(calculateColour(position,frequency,PHASE_BLUE,AMPLITUDE,CENTER_FREQUENCY))
String b = toHex(calculateColour(position, frequency, PHASE_BLUE, AMPLITUDE, CENTER_FREQUENCY));
height=getHeight()
int height = getHeight();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPagerFragment viewPagerFragment = new ViewPagerFragment();
Bundle bundle = new Bundle();
TextView view = (TextView) layoutInflater.inflate(R.layout.view_demo, container, false);
currentPosition=viewPagerAdapterState.getCurrentPosition()
int currentPosition = viewPagerAdapterState.getCurrentPosition();
view=getView(container,position)
View view = getView(container, position);
parcelableSparseArray=viewPagerAdapterState.get(position)
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
View view = (View) object;
SparseArray<Parcelable> viewState = new SparseArray<>();
position=entry.getValue()
int position = entry.getValue();
view=entry.getKey()
View view = entry.getKey();
bundle=in.readBundle()
Bundle bundle = in.readBundle();
Map<Integer, SparseArray<Parcelable>> viewStates = new HashMap<>(bundle.keySet().size());
sparseParcelableArray=bundle.getSparseParcelableArray(key)
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
primaryItemPosition=in.readInt()
int primaryItemPosition = in.readInt();
Bundle bundle = new Bundle();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
final TextView abText = (TextView) findViewById(R.id.ab_text);
final AyBe ayBe = new AyBe();
id=item.getItemId()
int id = item.getItemId();
callback=weakCallback.get()
AbTestingParamsLoadedCallback callback = weakCallback.get();
WeakReference<NoLeakActivity> weakNoLeakActivity = new WeakReference<NoLeakActivity>(noLeakActivity);
noLeakActivity=weakNoLeakActivity.get()
NoLeakActivity noLeakActivity = weakNoLeakActivity.get();
RecyclerView recyclerView = (RecyclerView) layoutInflater.inflate(R.layout.view_page, viewGroup, false);
itemView=layoutInflater.inflate(R.layout.view_item,parent,false)
View itemView = layoutInflater.inflate(R.layout.view_item, parent, false);
actual=foo.twice(HALF)
int actual = foo.twice(HALF);
int expected = WHOLE;
final float inverseRatio = 1f - ratio;
float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRatio);
float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRatio);
float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRatio);
hsv=node.getHsv()
float[] hsv = node.getHsv();
width=bitmap.getWidth()
final int width = bitmap.getWidth();
height=bitmap.getHeight()
final int height = bitmap.getHeight();
final int[] rgbPixels = new int[width * height];
final MedianCutQuantizer mcq = new MedianCutQuantizer(rgbPixels, NUM_COLORS);
primaryAccentColor=findPrimaryAccentColor()
final ColorNode primaryAccentColor = findPrimaryAccentColor();
secondaryAccentColor=findSecondaryAccentColor(primaryAccentColor)
final ColorNode secondaryAccentColor = findSecondaryAccentColor(primaryAccentColor);
tertiaryAccentColor=findTertiaryAccentColor(primaryAccentColor,secondaryAccentColor)
final int tertiaryAccentColor = findTertiaryAccentColor(
                primaryAccentColor, secondaryAccentColor);
primaryTextColor=findPrimaryTextColor(primaryAccentColor)
final int primaryTextColor = findPrimaryTextColor(primaryAccentColor);
secondaryTextColor=findSecondaryTextColor(primaryAccentColor)
final int secondaryTextColor = findSecondaryTextColor(primaryAccentColor);
final float primaryHue = primary.getHsv()[0];
final float candidateHue = candidate.getHsv()[0];
copy=Arrays.copyOf(palette,palette.length)
final MedianCutQuantizer.ColorNode[] copy = Arrays.copyOf(palette, palette.length);
maxCount=palette[0].getCount()
final float maxCount = palette[0].getCount();
lhsWeight=calculateWeight(lhs,maxCount)
final float lhsWeight = calculateWeight(lhs, maxCount);
rhsWeight=calculateWeight(rhs,maxCount)
final float rhsWeight = calculateWeight(rhs, maxCount);
float sum = 0;
float sumWeight = 0;
float value = values[i];
float weight = values[i + 1];
ColorHistogram colorHist = new ColorHistogram(pixels);
K=colorHist.getNumberOfColors()
int K = colorHist.getNumberOfColors();
ColorNode[] rCols = null;
rgb=colorHist.getColor(i)
int rgb = colorHist.getColor(i);
cnt=colorHist.getCount(i)
int cnt = colorHist.getCount(i);
ColorBox initialBox = new ColorBox(0, K - 1, 0);
List<ColorBox> colorSet = new ArrayList<ColorBox>();
int k = 1;
boolean done = false;
nextBox=findBoxToSplit(colorSet)
ColorBox nextBox = findBoxToSplit(colorSet);
newBox=nextBox.splitBox()
ColorBox newBox = nextBox.splitBox();
color=findClosestColor(pixels[i])
ColorNode color = findClosestColor(pixels[i]);
idx=findClosestColorIndex(rgb)
int idx = findClosestColorIndex(rgb);
red=Color.red(rgb)
int red = Color.red(rgb);
grn=Color.green(rgb)
int grn = Color.green(rgb);
blu=Color.blue(rgb)
int blu = Color.blue(rgb);
int minIdx = 0;
int minDistance = Integer.MAX_VALUE;
ColorNode color = quantColors[i];
d2=color.distance2(red,grn,blu)
int d2 = color.distance2(red, grn, blu);
ColorBox boxToSplit = null;
int minLevel = Integer.MAX_VALUE;
n=colorBoxes.size()
int n = colorBoxes.size();
ColorNode[] avgColors = new ColorNode[n];
int i = 0;
int dr = this.red - red;
int dg = this.grn - grn;
int db = this.blu - blu;
ColorNode color = imageColors[i];
int r = color.red;
int g = color.grn;
int b = color.blu;
dim=getLongestColorDimension()
ColorDimension dim = getLongestColorDimension();
med=findMedian(dim)
int med = findMedian(dim);
int nextLevel = level + 1;
ColorBox newBox = new ColorBox(med + 1, upper, nextLevel);
int rLength = rmax - rmin;
int gLength = gmax - gmin;
int bLength = bmax - bmin;
int half = count / 2;
int nPixels, median;
int rSum = 0;
int gSum = 0;
int bSum = 0;
int n = 0;
ColorNode ci = imageColors[i];
int cnt = ci.cnt;
double nd = n;
int avgRed = (int) (0.5 + rSum / nd);
int avgGrn = (int) (0.5 + gSum / nd);
int avgBlu = (int) (0.5 + bSum / nd);
s=this.getClass().getSimpleName()
String s = this.getClass().getSimpleName();
int i = 0;
int N = pixelsOrig.length;
int[] pixelsCpy = new int[N];
int k = -1;
int curColor = -1;
int nColors = k + 1;
id=item.getItemId()
int id = item.getItemId();
Intent intent = new Intent();
bitmap=((BitmapDrawable)imageView.getDrawable()).getBitmap()
Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap();
DominantColorCalculator dominantColorCalculator = new DominantColorCalculator(bitmap);
selectedImageUri=data.getData()
Uri selectedImageUri = data.getData();
selectedImagePath=getPath(selectedImageUri)
String selectedImagePath = getPath(selectedImageUri);
String[] projection = {MediaStore.Images.Media.DATA};
cursor=managedQuery(uri,projection,null,null,null)
Cursor cursor = managedQuery(uri, projection, null, null, null);
column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)
int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
LinearLayout rootView = (LinearLayout) inflater.inflate(R.layout.fragment_main, container, false);
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
preapprovalButton=payPal.getCheckoutButton(getActivity(),PayPal.BUTTON_194x37,CheckoutButton.TEXT_PAY)
CheckoutButton preapprovalButton = payPal.getCheckoutButton(getActivity(), PayPal.BUTTON_194x37, CheckoutButton.TEXT_PAY);
preapprovalIntent=payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY)
Intent preapprovalIntent = payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY);
String resultTitle = "";
String resultInfo = "";
String resultExtra = "";
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
PayPalPreapproval preapproval = new PayPalPreapproval();
preapproval=createPreapproval(preapprovalKey)
PayPalPreapproval preapproval = createPreapproval(preapprovalKey);
Bundle bundle = new Bundle();
int availableLength = maxLength;
StringBuilder stringBuilder = new StringBuilder(maxLength);
prefixAndSuffixLength=computeAppendedLengthIncludingSeparatorSpaces(prefix,suffix)
int prefixAndSuffixLength = computeAppendedLengthIncludingSeparatorSpaces(prefix, suffix);
urlLength=computeUrlLengthIncludingSeparatorSpace(url)
int urlLength = computeUrlLengthIncludingSeparatorSpace(url);
trimmedSubject=ellipsizeTextIfExceedsMaxLength(subject,availableLength)
String trimmedSubject = ellipsizeTextIfExceedsMaxLength(subject, availableLength);
int length = 0;
preferences=context.getSharedPreferences(MRU_PREFERENCES,Context.MODE_PRIVATE)
SharedPreferences preferences = context.getSharedPreferences(MRU_PREFERENCES, Context.MODE_PRIVATE);
args=getArguments()
Bundle args = getArguments();
themeResId=getThemeResIdIfProvidedIn(args)
int themeResId = getThemeResIdIfProvidedIn(args);
title=getTitleIfProvidedIn(args)
CharSequence title = getTitleIfProvidedIn(args);
builder=createDialogBuilder(themeResId).setCancelable(true).setView(dialogView)
AlertDialog.Builder builder = createDialogBuilder(themeResId)
                .setCancelable(true)
                .setView(dialogView);
inflater=getActivity().getLayoutInflater()
LayoutInflater inflater = getActivity().getLayoutInflater();
GridView gridView = (GridView) rootView.findViewById(R.id.ps__dialog_grid);
targetApps=extractTargetAppsFrom(args)
TargetApps targetApps = extractTargetAppsFrom(args);
allShareTargets=getAvailableShareTargets(sharingIntent)
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
priorityAppInfos=createPriorityResolveInfoList(targetApps,allShareTargets)
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
otherAppInfos=createOtherAppsResolveInfoList(priorityAppInfos,allShareTargets)
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
resolveInfos=targetApps.extractTargetResolveInfosFrom(allShareTargets)
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
mruResolveInfo=findMruResolveInfoIn(allShareTargets)
ResolveInfo mruResolveInfo = findMruResolveInfoIn(allShareTargets);
List<ResolveInfo> otherAppsInfos = new ArrayList<ResolveInfo>(allAppInfos);
mruPackageName=persister.getLastUsedTarget()
String mruPackageName = persister.getLastUsedTarget();
String packageName = resolveInfo.activityInfo.packageName;
packageManager=getActivity().getPackageManager()
PackageManager packageManager = getActivity().getPackageManager();
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
View buttonStrip = (View) showMoreButton.getParent();
gridView=getGridView()
GridView gridView = getGridView();
intent=wrapIntentWithExplicitTargetComponentForItem(position,sharingIntent)
Intent intent = wrapIntentWithExplicitTargetComponentForItem(position, sharingIntent);
Intent intent = new Intent(sharingIntent);
ActivityInfo activity = adapter.getItem(position).activityInfo;
ComponentName name = new ComponentName(activity.applicationInfo.packageName, activity.name);
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
PriorityShareDialog dialog = new PriorityShareDialog();
Bundle args = new Bundle();
sharingIntent=createSharingIntent()
Intent sharingIntent = createSharingIntent();
fragmentManager=activity.getFragmentManager()
FragmentManager fragmentManager = activity.getFragmentManager();
Intent intent = new Intent(Intent.ACTION_SEND);
dialog=new PriorityShareDialog.Builder().setTitle(title).setTargetApps(targetApps).setSharingIntent(sharingIntent).setOnPrepareSharingIntentListener(listener).setShowMostRecentlyUsed(showMostRecentlyUsed).build()
PriorityShareDialog dialog = new PriorityShareDialog.Builder()
                .setTitle(title)
                .setTargetApps(targetApps)
                .setSharingIntent(sharingIntent)
                .setOnPrepareSharingIntentListener(listener)
                .setShowMostRecentlyUsed(showMostRecentlyUsed)
                .build();
PrioritySharer prioritySharer = new PrioritySharer();
prioritySharer=build()
PrioritySharer prioritySharer = build();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
layoutInflater=LayoutInflater.from(context)
LayoutInflater layoutInflater = LayoutInflater.from(context);
iconSizePx=getIconSizePx(context.getResources())
int iconSizePx = getIconSizePx(context.getResources());
ArrayList<ResolveInfo> sortedList = new ArrayList<ResolveInfo>(resolveInfoList);
int otherAppsCountMaybe = showAllApps ? otherAppInfos.size() : 0;
firstOtherAppsItemPosition=priorityAppInfos.size()
int firstOtherAppsItemPosition = priorityAppInfos.size();
int offsetPosition = position - firstOtherAppsItemPosition;
TextView textView;
textView=initializeItemViewIfNecessary(convertView,R.layout.ps__grid_item_share,parent)
TextView textView = initializeItemViewIfNecessary(convertView, R.layout.ps__grid_item_share, parent);
info=getItem(position)
ResolveInfo info = getItem(position);
icon=info.loadIcon(packageManager)
Drawable icon = info.loadIcon(packageManager);
arraySize=in.readInt()
int arraySize = in.readInt();
String[] packageNames = new String[arraySize];
arraySize=targetPackages.size()
int arraySize = targetPackages.size();
String[] packagesArray = new String[arraySize];
SparseArray<ResolveInfo> matchedResolveInfos = new SparseArray<ResolveInfo>(targetPackages.size());
String packageName = info.activityInfo.packageName;
index=indexOfItemInto(packageName,targetPackages)
int index = indexOfItemInto(packageName, targetPackages);
sparseArraySize=sparseArray.size()
int sparseArraySize = sparseArray.size();
ArrayList<T> list = new ArrayList<T>(sparseArraySize);
int i = 0;
originalSubject=intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT)
CharSequence originalSubject = intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT);
String subject = originalSubject != null ? originalSubject.toString() : null;
composer=createComposer()
MessageComposer composer = createComposer();
component=intent.getComponent()
ComponentName component = intent.getComponent();
targetPackageName=component.getPackageName()
String targetPackageName = component.getPackageName();
adapter=ArrayAdapter.createFromResource(this,R.array.target_apps,android.R.layout.simple_spinner_item)
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
EditText text = (EditText) findViewById(R.id.text);
EditText title = (EditText) findViewById(R.id.title);
EditText mimeType = (EditText) findViewById(R.id.mime_type);
EditText dataUri = (EditText) findViewById(R.id.data_uri);
Switch showMostRecentlyUsed = (Switch) findViewById(R.id.show_most_recently_used);
uriString=dataUri.getText().toString()
String uriString = dataUri.getText().toString();
EditText text = (EditText) findViewById(R.id.text);
TextView textView = (TextView) convertView.findViewById(R.id.positionView);
colorView=convertView.findViewById(R.id.colorView)
View colorView = convertView.findViewById(R.id.colorView);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
offset=headerPlaceholder.getTop()
int offset = headerPlaceholder.getTop();
Integer item = COLORS[position];
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
firstVisiblePosition=grid.getFirstVisiblePosition()
int firstVisiblePosition = grid.getFirstVisiblePosition();
inflate=getViewForPosition(container,position)
View inflate = getViewForPosition(container, position);
id=item.getItemId()
int id = item.getItemId();
MyActivity activity = new MyActivity();
String manifestProperty = "../app/src/main/AndroidManifest.xml";
String resProperty = "../app/src/main/res";
cursor=resolver.query(uri,projection,selection,selectionArgs,null)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, null);
cursor=resolver.query(uri,projection,selection,selectionArgs,sortOrder)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, sortOrder);
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=richClass.setter(name)
Method setter = richClass.setter(name);
T obj;
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=methodsByName.get(name)
Method setter = methodsByName.get(name);
int type = TYPE_INT;
Class<?> t = setter.getParameterTypes()[0];
Class<?> t = setter.getParameterTypes()[0];
cursorType=cursor.getType(index)
final int cursorType = cursor.getType(index);
final Object obj;
s=f.getAnnotation(Mapper.class)
Mapper s = f.getAnnotation(Mapper.class);
mm=m.getAnnotation(Mapper.class)
Mapper mm = m.getAnnotation(Mapper.class);
methodName=StringUtil.asCamelifySetMethod(what)
String methodName = StringUtil.asCamelifySetMethod(what);
cursor=getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,null,null,null,null)
Cursor cursor = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
now=System.currentTimeMillis()
long now = System.currentTimeMillis();
List<Contact2> typedCursor = new CursorList<Contact2>(cursor, Contact2.class);
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[a-zA-Z0-9]+")
Pattern p = Pattern.compile("[a-zA-Z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[A-Z][a-z0-9]+")
Pattern p = Pattern.compile("[A-Z][a-z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
SurfaceView first = (SurfaceView) findViewById(R.id.firstSurface);
SurfaceView second = (SurfaceView) findViewById(R.id.secondSurface);
Intent pickVideo = new Intent(Intent.ACTION_PICK);
xml=context.obtainStyledAttributes(attrs,R.styleable.RelativeLayoutWithForeground)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.RelativeLayoutWithForeground);
int foregroundResId = INVALID_FOREGROUND_ID;
drawable=getDrawable(getResources(),foregroundResId)
Drawable drawable = getDrawable(getResources(), foregroundResId);
Bundle args = new Bundle();
enroll=mHotwordDetector.createEnrollIntent()
Intent enroll = mHotwordDetector.createEnrollIntent();

Diff of 08c3fdd5c648ea9bbbb1438ec7b11670f555dc9c and f4cfba2ebd9e1b1c72b90f723ea32493af78ae48:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 6
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 08c3fdd5c648ea9bbbb1438ec7b11670f555dc9c to f4cfba2ebd9e1b1c72b90f723ea32493af78ae48


****Parsing for addition at revision f4cfba2ebd9e1b1c72b90f723ea32493af78ae48****

Added ApplicationTest.java to .\/spikes\ repository source files.
Added DrawerActivity.java to .\/spikes\ repository source files.
Added EarthActivity.java to .\/spikes\ repository source files.
Added SaturnActivity.java to .\/spikes\ repository source files.
Added LocalPlayerActivity.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added CastApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ComposeSmsActivity.java to .\/spikes\ repository source files.
Added HeadlessSmsSendService.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MmsReceiver.java to .\/spikes\ repository source files.
Added SmsReceiver.java to .\/spikes\ repository source files.
Added ExtendedDemoActivity.java to .\/spikes\ repository source files.
Added ExtendedDemoApplication.java to .\/spikes\ repository source files.
Added SimpleDemoActivity.java to .\/spikes\ repository source files.
Added SimpleDemoApplication.java to .\/spikes\ repository source files.
Added Binder.java to .\/spikes\ repository source files.
Added ConnectedClient.java to .\/spikes\ repository source files.
Added Connection.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnection.java to .\/spikes\ repository source files.
Added ServiceConnectionCallback.java to .\/spikes\ repository source files.
Added EasyCustomTabs.java to .\/spikes\ repository source files.
Added ActionButtonComposer.java to .\/spikes\ repository source files.
Added CloseButtonIconComposer.java to .\/spikes\ repository source files.
Added Composer.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilder.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigator.java to .\/spikes\ repository source files.
Added EasyCustomTabsWebNavigator.java to .\/spikes\ repository source files.
Added ExitAnimationsComposer.java to .\/spikes\ repository source files.
Added IntentCustomizer.java to .\/spikes\ repository source files.
Added MenuItemComposer.java to .\/spikes\ repository source files.
Added NavigationFallback.java to .\/spikes\ repository source files.
Added Navigator.java to .\/spikes\ repository source files.
Added ShowTitleComposer.java to .\/spikes\ repository source files.
Added StartAnimationsComposer.java to .\/spikes\ repository source files.
Added ToolbarColorComposer.java to .\/spikes\ repository source files.
Added UrlBarHidingComposer.java to .\/spikes\ repository source files.
Added WebNavigator.java to .\/spikes\ repository source files.
Added AvailableAppProvider.java to .\/spikes\ repository source files.
Added BestPackageFinder.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProvider.java to .\/spikes\ repository source files.
Added BinderTest.java to .\/spikes\ repository source files.
Added ConnectedClientTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnectionTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigatorTest.java to .\/spikes\ repository source files.
Added BestPackageFinderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProviderTest.java to .\/spikes\ repository source files.
Added ApiPagedChannelHistory.java to .\/spikes\ repository source files.
Added ApiPagedResponse.java to .\/spikes\ repository source files.
Added ChannelHistory.java to .\/spikes\ repository source files.
Added HistoryConverter.java to .\/spikes\ repository source files.
Added Runner.java to .\/spikes\ repository source files.
Added SlackHistoryFetcher.java to .\/spikes\ repository source files.
Added SlackWebService.java to .\/spikes\ repository source files.
Added ApiPagedResponseTest.java to .\/spikes\ repository source files.
Added MainActivityTest.java to .\/spikes\ repository source files.
Added LoremAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added BetterAccountManager.java to .\/spikes\ repository source files.
Added BetterAuthenticator.java to .\/spikes\ repository source files.
Added BetterAuthenticatorActivity.java to .\/spikes\ repository source files.
Added GertHerbAuthenticator.java to .\/spikes\ repository source files.
Added GertHerbAuthenticatorService.java to .\/spikes\ repository source files.
Added NoAccountException.java to .\/spikes\ repository source files.
Added ReactiveAuthenticatorActivity.java to .\/spikes\ repository source files.
Added Token.java to .\/spikes\ repository source files.
Added GertHerbActivity.java to .\/spikes\ repository source files.
Added GertHerbApplication.java to .\/spikes\ repository source files.
Added GertHerbAuthenticationActivity.java to .\/spikes\ repository source files.
Added TypefaceFactory.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added ViewServer.java to .\/spikes\ repository source files.
Added ViewServerManager.java to .\/spikes\ repository source files.
Added DeveloperError.java to .\/spikes\ repository source files.
Added HomeActivity.java to .\/spikes\ repository source files.
Added LoginActivity.java to .\/spikes\ repository source files.
Added LoginView.java to .\/spikes\ repository source files.
Added UserCredentials.java to .\/spikes\ repository source files.
Added FontButton.java to .\/spikes\ repository source files.
Added FontEditText.java to .\/spikes\ repository source files.
Added FontTextView.java to .\/spikes\ repository source files.
Added GithubApi.java to .\/spikes\ repository source files.
Added GithubApiFactory.java to .\/spikes\ repository source files.
Added TokenRequest.java to .\/spikes\ repository source files.
Added TokenResponse.java to .\/spikes\ repository source files.
Added Dummy.java to .\/spikes\ repository source files.
Added DummyTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MainFragment.java to .\/spikes\ repository source files.
Added Attributes.java to .\/spikes\ repository source files.
Added Coordinates.java to .\/spikes\ repository source files.
Added IndicatorCoordinatesCalculator.java to .\/spikes\ repository source files.
Added LandingStrip.java to .\/spikes\ repository source files.
Added MutableCoordinates.java to .\/spikes\ repository source files.
Added OnPagerAdapterChangedListener.java to .\/spikes\ repository source files.
Added PagerAdapterObserver.java to .\/spikes\ repository source files.
Added Scrollable.java to .\/spikes\ repository source files.
Added ScrollingPageChangeListener.java to .\/spikes\ repository source files.
Added State.java to .\/spikes\ repository source files.
Added TabsContainer.java to .\/spikes\ repository source files.
Added CustomLandingStrip.java to .\/spikes\ repository source files.
Added CustomTabActivity.java to .\/spikes\ repository source files.
Added ExampleRainbowLandingStrip.java to .\/spikes\ repository source files.
Added FixedWidthTabActivity.java to .\/spikes\ repository source files.
Added NoFragmentsSimpleTextTabActivity.java to .\/spikes\ repository source files.
Added Data.java to .\/spikes\ repository source files.
Added DemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added SmallDemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerFragment.java to .\/spikes\ repository source files.
Added DemoViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapterState.java to .\/spikes\ repository source files.
Added SimpleTextTabActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AbTestingParamsLoadedCallback.java to .\/spikes\ repository source files.
Added AyBe.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added WeakStartCallback.java to .\/spikes\ repository source files.
Added LeakActivity.java to .\/spikes\ repository source files.
Added NoLeakActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added Bar.java to .\/spikes\ repository source files.
Added Foo.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added FooTest.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added ColorScheme.java to .\/spikes\ repository source files.
Added ColorUtils.java to .\/spikes\ repository source files.
Added DominantColorCalculator.java to .\/spikes\ repository source files.
Added FloatUtils.java to .\/spikes\ repository source files.
Added MedianCutQuantizer.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added PayPalFragment.java to .\/spikes\ repository source files.
Added PayPalHelper.java to .\/spikes\ repository source files.
Added MaxLengthMessageComposer.java to .\/spikes\ repository source files.
Added MessageComposer.java to .\/spikes\ repository source files.
Added TwitterMessageComposer.java to .\/spikes\ repository source files.
Added DisabledMruPersister.java to .\/spikes\ repository source files.
Added MruPersister.java to .\/spikes\ repository source files.
Added SharedPreferencesMruPersister.java to .\/spikes\ repository source files.
Added OnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added PriorityShareDialog.java to .\/spikes\ repository source files.
Added PrioritySharer.java to .\/spikes\ repository source files.
Added ShareTargetsAdapter.java to .\/spikes\ repository source files.
Added SimpleOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added TargetApps.java to .\/spikes\ repository source files.
Added TwitterOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AdvancedActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SimpleActivity.java to .\/spikes\ repository source files.
Added LockingActivity.java to .\/spikes\ repository source files.
Added PostLockingActivity.java to .\/spikes\ repository source files.
Added PreLockingActivity.java to .\/spikes\ repository source files.
Added DummyAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added NovoStaggeredGridView.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SpikeApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SwipeableView.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MyClass.java to .\/spikes\ repository source files.
Added MyClassTest.java to .\/spikes\ repository source files.
Added MyAndroidClassTest.java to .\/spikes\ repository source files.
Added RobolectricGradleTestRunner.java to .\/spikes\ repository source files.
Added Mapper.java to .\/spikes\ repository source files.
Added Query.java to .\/spikes\ repository source files.
Added TypedResolver.java to .\/spikes\ repository source files.
Added CursorList.java to .\/spikes\ repository source files.
Added CursorListIterator.java to .\/spikes\ repository source files.
Added CursorMarshaller.java to .\/spikes\ repository source files.
Added EmptyListIterator.java to .\/spikes\ repository source files.
Added ReflectionCursorMarshaller.java to .\/spikes\ repository source files.
Added RichClass.java to .\/spikes\ repository source files.
Added Setter.java to .\/spikes\ repository source files.
Added Function.java to .\/spikes\ repository source files.
Added TypedElementLoader.java to .\/spikes\ repository source files.
Added TypedLoader.java to .\/spikes\ repository source files.
Added Marshaller.java to .\/spikes\ repository source files.
Added ObjectMapper.java to .\/spikes\ repository source files.
Added TypedActivity.java to .\/spikes\ repository source files.
Added StringUtil.java to .\/spikes\ repository source files.
Added MyObject.java to .\/spikes\ repository source files.
Added MediaPlayerSwitcherActivity.java to .\/spikes\ repository source files.
Added VideoPlayerService.java to .\/spikes\ repository source files.
Added RelativeLayoutWithForeground.java to .\/spikes\ repository source files.
Added DemoActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added RecognitionService.java to .\/spikes\ repository source files.
Added SessionService.java to .\/spikes\ repository source files.
Added SettingsActivity.java to .\/spikes\ repository source files.
Added SmartContextInteractionService.java to .\/spikes\ repository source files.
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
String[] planetTitles = new String[]{"Earth", "Saturn"};
ListView listView = (ListView) findViewById(R.id.left_drawer);
DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close);
b=getIntent().getExtras()
Bundle b = getIntent().getExtras();
mShouldStartPlayback=b.getBoolean("shouldStart")
boolean mShouldStartPlayback = b.getBoolean("shouldStart");
startPosition=b.getInt("startPosition",0)
int startPosition = b.getInt("startPosition", 0);
currentPos=mVideoView.getCurrentPosition()
int currentPos = mVideoView.getCurrentPosition();
String msg;
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, mDisplaySize.y + getActionBar().getHeight());
mm=mSelectedMedia.getMetadata()
MediaMetadata mm = mSelectedMedia.getMetadata();
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, (int) (mDisplaySize.x * ASPECT_RATIO));
WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
width=display.getWidth()
int width = display.getWidth();
height=display.getHeight()
int height = display.getHeight();
int resourceId = 0;
String videoUrl = "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4#sthash.rJ5rPZy8.dpuf";
String title = "Jahre Philharmonie";
String description = "Awesome film you must watch!";
String author = "Blundell";
String thumbUrl = "http://www.ustream.tv/blog/wp-content/uploads/2013/10/simply-go-live.png";
MediaMetadata metadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE);
mediaInfo=new MediaInfo.Builder(videoUrl).setMetadata(metadata).setStreamType(MediaInfo.STREAM_TYPE_BUFFERED).setContentType("video/mp4").build()
MediaInfo mediaInfo = new MediaInfo.Builder(videoUrl)
                        .setMetadata(metadata)
                        .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)
                        .setContentType("video/mp4")
                        .build();
Intent intent = new Intent(MainActivity.this, LocalPlayerActivity.class);
preferences=getPreferences(MODE_PRIVATE)
SharedPreferences preferences = getPreferences(MODE_PRIVATE);
defaultSmsPackage=Telephony.Sms.getDefaultSmsPackage(this)
String defaultSmsPackage = Telephony.Sms.getDefaultSmsPackage(this);
Intent intent = new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
availableAppProvider=EasyCustomTabs.getInstance()
AvailableAppProvider availableAppProvider = EasyCustomTabs.getInstance();
ConnectedClient connectedClient = new ConnectedClient(client);
binder=Binder.newInstance()
Binder binder = Binder.newInstance();
List<Composer> composerList = new ArrayList<>();
customTabsSession=connection.newSession()
CustomTabsSession customTabsSession = connection.newSession();
CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(customTabsSession);
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
context=EasyCustomTabs.getInstance().getContext()
Context context = EasyCustomTabs.getInstance().getContext();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
packagesSupportingCustomTabs=getPackagesSupportingCustomTabs()
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
defaultPackage=getDefaultPackage()
String defaultPackage = getDefaultPackage();
defaultActivityInfo=packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK,0)
ResolveInfo defaultActivityInfo = packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK, 0);
String packageName = defaultActivityInfo.activityInfo.packageName;
resolvedInfoList=packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK,0)
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<String> packagesSupportingCustomTabs = new ArrayList<>();
Intent serviceIntent = new Intent();
bestPackageFinder=BestPackageFinder.newInstance()
BestPackageFinder bestPackageFinder = BestPackageFinder.newInstance();
packageName=bestPackageFinder.findBestPackage()
String packageName = bestPackageFinder.findBestPackage();
resolveInfo=createResolveInfoFor(packageName)
ResolveInfo resolveInfo = createResolveInfoFor(packageName);
ResolveInfo resolveInfo = new ResolveInfo();
List<ResolveInfo> resolveInfoList = new ArrayList<>();
defaultPackageResolveInfo=createResolveInfoFor(packageName)
ResolveInfo defaultPackageResolveInfo = createResolveInfoFor(packageName);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
oldestApiMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage oldestApiMessage = apiMessages.get(apiMessages.size() - 1);
String lastResponseEpochTime = oldestApiMessage.timeStamp;
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
latestMessage=latestMessages.get(latestMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage latestMessage = latestMessages.get(latestMessages.size() - 1);
latestMessageDateTime=convertToLocalDateTime(latestMessage.timeStamp)
LocalDateTime latestMessageDateTime = convertToLocalDateTime(latestMessage.timeStamp);
List<ChannelHistory.Message> messages = new ArrayList<>();
historyFrom=getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1))
LocalDateTime historyFrom = getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1));
historyTo=getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0))
LocalDateTime historyTo = getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0));
String text = apiMessage.text;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
lastMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage lastMessage = apiMessages.get(apiMessages.size() - 1);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
firstMessage=apiMessages.get(0)
ApiPagedChannelHistory.ApiMessage firstMessage = apiMessages.get(0);
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
String slackToken = args[0];
retrofit=new Retrofit.Builder().baseUrl("https://slack.com/api/").addConverterFactory(GsonConverterFactory.create()).build()
Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://slack.com/api/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();
slackWebService=retrofit.create(SlackWebService.class)
SlackWebService slackWebService = retrofit.create(SlackWebService.class);
slackHistoryFetcher=SlackHistoryFetcher.from(slackWebService,slackToken)
SlackHistoryFetcher slackHistoryFetcher = SlackHistoryFetcher.from(slackWebService, slackToken);
start=LocalDateTime.now()
LocalDateTime start = LocalDateTime.now();
end=LocalDateTime.now().minusDays(7)
LocalDateTime end = LocalDateTime.now().minusDays(7);
channelHistory=slackHistoryFetcher.getChannelHistory(start,end)
ChannelHistory channelHistory = slackHistoryFetcher.getChannelHistory(start, end);
HistoryConverter historyConverter = new HistoryConverter();
ApiPagedResponse apiPagedResponse = new ApiPagedResponse(start);
response=fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime())
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
apiPagedChannelHistory=response.body()
ApiPagedChannelHistory apiPagedChannelHistory = response.body();
channelHistory=slackWebService.getChannelHistory(slackToken,channel,lastResponseEpochTime,NUMBER_OF_RESULTS)
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
ApiPagedChannelHistory apiPagedChannelHistory = new ApiPagedChannelHistory();
ApiPagedChannelHistory.ApiMessage apiMessage = new ApiPagedChannelHistory.ApiMessage();
final TextView textView = new TextView(context);
emptyView=findViewById(R.id.empty_view)
View emptyView = findViewById(R.id.empty_view);
final Integer action = values[0];
LoremAdapter loremAdapter = new LoremAdapter();
accounts=accountManager.getAccountsByType(accountType)
Account[] accounts = accountManager.getAccountsByType(accountType);
Bundle result;
Bundle result;
Bundle result = new Bundle();
activity=createLoginIntent(context,accountType,authTokenType,requiredFeatures,options)
Intent activity = createLoginIntent(context, accountType, authTokenType, requiredFeatures, options);
Bundle bundle = new Bundle();
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
accounts=accountManager.getAccountsByType(authTokenType)
Account[] accounts = accountManager.getAccountsByType(authTokenType);
bundle=createResponseBundle(token)
Bundle bundle = createResponseBundle(token);
accountManager=AccountManager.get(this.getApplicationContext())
AccountManager accountManager = AccountManager.get(this.getApplicationContext());
Account account = new Account(token.getUserName(), getAccountName());
Bundle bundle = new Bundle();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
GertHerbAuthenticator authenticator = new GertHerbAuthenticator(this);
fontId=getFontId(context,attrs)
int fontId = getFontId(context, attrs);
fontType=getFontType(fontId)
FontType fontType = getFontType(fontId);
typedArray=context.obtainStyledAttributes(attrs,R.styleable.CustomTextAppearance)
TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CustomTextAppearance);
typeface=createTypeFace(context,fontType)
Typeface typeface = createTypeFace(context, fontType);
info=context.getApplicationInfo()
ApplicationInfo info = context.getApplicationInfo();
name=activity.getTitle().toString()
String name = activity.getTitle().toString();
client=mServer.accept()
Socket client = mServer.accept();
boolean result;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
BufferedReader in = null;
request=in.readLine()
final String request = in.readLine();
String command;
String parameters;
index=request.indexOf(' ')
int index = request.indexOf(' ');
boolean result;
boolean success = true;
BufferedWriter out = null;
index=parameters.indexOf(' ')
int index = parameters.indexOf(' ');
code=parameters.substring(0,index)
final String code = parameters.substring(0, index);
int hashCode = (int) Long.parseLong(code, 16);
window=findWindow(hashCode)
final View window = findWindow(hashCode);
dispatch=ViewDebug.class.getDeclaredMethod("dispatchCommand",View.class,String.class,String.class,OutputStream.class)
final Method dispatch = ViewDebug.class.getDeclaredMethod("dispatchCommand",
                        View.class, String.class, String.class, OutputStream.class);
View window = null;
boolean result = true;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
boolean result = true;
String focusName = null;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
View focusedWindow = null;
BufferedWriter out = null;
boolean needWindowListUpdate = false;
boolean needFocusedWindowUpdate = false;
BetterAccountManager accountManager = new BetterAccountManager(this, getString(R.string.account_type), getString(R.string.token_type), null);
loginView=Views.findById(this,R.id.login_view)
LoginView loginView = Views.findById(this, R.id.login_view);
authorizationApi=new GithubApiFactory().createAuthorizationApi(credentials.username,credentials.password)
GithubApi authorizationApi = new GithubApiFactory().createAuthorizationApi(credentials.username, credentials.password);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
Endpoint endpoint = new Endpoint() {
            @Override
            public String getUrl() {
                return GITHUB_API_URL;
            }

            @Override
            public String getName() {
                return "Live";
            }
        };
interceptor=createAuthorizationRequestInterceptor(username,password)
RequestInterceptor interceptor = createAuthorizationRequestInterceptor(username, password);
restAdapter=createRestAdapter(endpoint,interceptor)
RestAdapter restAdapter = createRestAdapter(endpoint, interceptor);
Dummy dummy = new Dummy();
result=dummy.explodes()
boolean result = dummy.explodes();
String base64EncodedPublicKey = "CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE";
premiumPurchase=inventory.getPurchase(SKU_PREMIUM)
Purchase premiumPurchase = inventory.getPurchase(SKU_PREMIUM);
infiniteGasPurchase=inventory.getPurchase(SKU_INFINITE_GAS)
Purchase infiniteGasPurchase = inventory.getPurchase(SKU_INFINITE_GAS);
gasPurchase=inventory.getPurchase(SKU_GAS)
Purchase gasPurchase = inventory.getPurchase(SKU_GAS);
String payload = "";
String payload = "";
String payload = "";
payload=p.getDeveloperPayload()
String payload = p.getDeveloperPayload();
int index = mTank >= TANK_RES_IDS.length ? TANK_RES_IDS.length - 1 : mTank;
AlertDialog.Builder bld = new AlertDialog.Builder(this);
spe=getPreferences(MODE_PRIVATE).edit()
SharedPreferences.Editor spe = getPreferences(MODE_PRIVATE).edit();
sp=getPreferences(MODE_PRIVATE)
SharedPreferences sp = getPreferences(MODE_PRIVATE);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                                  + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                    | ((source[d + 1 + off] << 24) >>> 16)
                    | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                    | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                                   "-1002:Bad response received/" +
                                   "-1003:Purchase signature verification failed/" +
                                   "-1004:Send intent failed/" +
                                   "-1005:User cancelled/" +
                                   "-1006:Unknown purchase response/" +
                                   "-1007:Missing token/" +
                                   "-1008:Unknown error/" +
                                   "-1009:Subscriptions not available/" +
                                   "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(),
                    itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                        | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                        | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                            | ((source[d + 1 + off] << 24) >>> 16)
                            | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                            | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                "-1002:Bad response received/" +
                "-1003:Purchase signature verification failed/" +
                "-1004:Send intent failed/" +
                "-1005:User cancelled/" +
                "-1006:Unknown purchase response/" +
                "-1007:Missing token/" +
                "-1008:Unknown error/" +
                "-1009:Subscriptions not available/" +
                "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(), itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
responseCode=result.getResponse()
int responseCode = result.getResponse();
sku=purchase.getSku()
String sku = purchase.getSku();
skuDetails=inv.getSkuDetails(sku)
SkuDetails skuDetails = inv.getSkuDetails(sku);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
Button purchaseFiveButton = (Button) rootView.findViewById(R.id.fragment_main_button_purchase_five_coins);
xml=context.obtainStyledAttributes(attrs,R.styleable.LandingStrip)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.LandingStrip);
tabLayoutId=xml.getResourceId(R.styleable.LandingStrip_tabLayoutId,MISSING_TAB_LAYOUT_ID)
int tabLayoutId = xml.getResourceId(R.styleable.LandingStrip_tabLayoutId, MISSING_TAB_LAYOUT_ID);
indicatorColour=xml.getResourceId(R.styleable.LandingStrip_indicatorColor,DEFAULT_INDICATOR_COLOUR)
int indicatorColour = xml.getResourceId(R.styleable.LandingStrip_indicatorColor, DEFAULT_INDICATOR_COLOUR);
indicatorHeight=getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight,DEFAULT_INDICATOR_HEIGHT,xml)
int indicatorHeight = getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight, DEFAULT_INDICATOR_HEIGHT, xml);
tabsPaddingLeft=getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingLeft = getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding, DEFAULT_TABS_PADDING, xml);
tabsPaddingRight=getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingRight = getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding, DEFAULT_TABS_PADDING, xml);
MutableCoordinates drawCurrentTabCoordinates = new MutableCoordinates();
MutableCoordinates drawNextTabCoordinates = new MutableCoordinates();
MutableCoordinates drawMovingIndicatorCoordinates = new MutableCoordinates();
currentTab=tabsContainer.getTabAt(currentPosition)
View currentTab = tabsContainer.getTabAt(currentPosition);
currentTabStart=currentTab.getLeft()
float currentTabStart = currentTab.getLeft();
currentTabEnd=currentTab.getRight()
float currentTabEnd = currentTab.getRight();
nextTab=tabsContainer.getTabAt(currentPosition + 1)
View nextTab = tabsContainer.getTabAt(currentPosition + 1);
nextTabPositionOffset=getFractionFrom(pagePositionOffset)
float nextTabPositionOffset = getFractionFrom(pagePositionOffset);
indicatorStart=getIndicatorPosition(nextTab.getStart(),pagePositionOffset,currentTab.getStart(),nextTabPositionOffset)
float indicatorStart = getIndicatorPosition(nextTab.getStart(), pagePositionOffset, currentTab.getStart(), nextTabPositionOffset);
indicatorEnd=getIndicatorPosition(nextTab.getEnd(),pagePositionOffset,currentTab.getEnd(),nextTabPositionOffset)
float indicatorEnd = getIndicatorPosition(nextTab.getEnd(), pagePositionOffset, currentTab.getEnd(), nextTabPositionOffset);
height=getHeight()
int height = getHeight();
tabCount=pagerAdapter.getCount()
int tabCount = pagerAdapter.getCount();
title=pagerAdapter.getPageTitle(position)
CharSequence title = pagerAdapter.getPageTitle(position);
inflatedTabView=tabsContainer.inflateTab(layoutInflater,attributes.getTabLayoutId())
View inflatedTabView = tabsContainer.inflateTab(layoutInflater, attributes.getTabLayoutId());
int position = (int) view.getTag(TAG_KEY_POSITION);
scrollOffset=getHorizontalScrollOffset(position,positionOffset)
int scrollOffset = getHorizontalScrollOffset(position, positionOffset);
newScrollX=calculateScrollOffset(position,scrollOffset,positionOffset)
float newScrollX = calculateScrollOffset(position, scrollOffset, positionOffset);
tabWidth=tabsContainer.getTabAt(position).getWidth()
int tabWidth = tabsContainer.getTabAt(position).getWidth();
tabForPosition=tabsContainer.getTabAt(position)
View tabForPosition = tabsContainer.getTabAt(position);
float tabStartX = tabForPosition.getLeft() + scrollOffset;
int viewMiddleOffset = getTabParentWidth() / 2;
float tabCenterOffset = (tabForPosition.getRight() - tabForPosition.getLeft()) * 0.5F;
nextTabDelta=getNextTabDelta(position,pagerOffset,tabForPosition)
float nextTabDelta = getNextTabDelta(position, pagerOffset, tabForPosition);
LinearLayout tabsContainerView = new LinearLayout(context);
tab=getTabAt(index)
View tab = getTabAt(index);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
position=indicatorCoordinates.getStart()
float position = indicatorCoordinates.getStart();
lastTabOffset=((ViewGroup)getChildAt(0)).getChildAt(getChildCount() - 1).getWidth()
float lastTabOffset = ((ViewGroup) getChildAt(0)).getChildAt(getChildCount() - 1).getWidth();
frequency=getOneCycle(lastTabOffset)
float frequency = getOneCycle(lastTabOffset);
r=toHex(calculateColour(position,frequency,PHASE_RED,AMPLITUDE,CENTER_FREQUENCY))
String r = toHex(calculateColour(position, frequency, PHASE_RED, AMPLITUDE, CENTER_FREQUENCY));
g=toHex(calculateColour(position,frequency,PHASE_GREEN,AMPLITUDE,CENTER_FREQUENCY))
String g = toHex(calculateColour(position, frequency, PHASE_GREEN, AMPLITUDE, CENTER_FREQUENCY));
b=toHex(calculateColour(position,frequency,PHASE_BLUE,AMPLITUDE,CENTER_FREQUENCY))
String b = toHex(calculateColour(position, frequency, PHASE_BLUE, AMPLITUDE, CENTER_FREQUENCY));
height=getHeight()
int height = getHeight();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPagerFragment viewPagerFragment = new ViewPagerFragment();
Bundle bundle = new Bundle();
TextView view = (TextView) layoutInflater.inflate(R.layout.view_demo, container, false);
currentPosition=viewPagerAdapterState.getCurrentPosition()
int currentPosition = viewPagerAdapterState.getCurrentPosition();
view=getView(container,position)
View view = getView(container, position);
parcelableSparseArray=viewPagerAdapterState.get(position)
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
View view = (View) object;
SparseArray<Parcelable> viewState = new SparseArray<>();
position=entry.getValue()
int position = entry.getValue();
view=entry.getKey()
View view = entry.getKey();
bundle=in.readBundle()
Bundle bundle = in.readBundle();
Map<Integer, SparseArray<Parcelable>> viewStates = new HashMap<>(bundle.keySet().size());
sparseParcelableArray=bundle.getSparseParcelableArray(key)
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
primaryItemPosition=in.readInt()
int primaryItemPosition = in.readInt();
Bundle bundle = new Bundle();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
final TextView abText = (TextView) findViewById(R.id.ab_text);
final AyBe ayBe = new AyBe();
id=item.getItemId()
int id = item.getItemId();
callback=weakCallback.get()
AbTestingParamsLoadedCallback callback = weakCallback.get();
WeakReference<NoLeakActivity> weakNoLeakActivity = new WeakReference<NoLeakActivity>(noLeakActivity);
noLeakActivity=weakNoLeakActivity.get()
NoLeakActivity noLeakActivity = weakNoLeakActivity.get();
RecyclerView recyclerView = (RecyclerView) layoutInflater.inflate(R.layout.view_page, viewGroup, false);
itemView=layoutInflater.inflate(R.layout.view_item,parent,false)
View itemView = layoutInflater.inflate(R.layout.view_item, parent, false);
actual=foo.twice(HALF)
int actual = foo.twice(HALF);
int expected = WHOLE;
final float inverseRatio = 1f - ratio;
float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRatio);
float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRatio);
float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRatio);
hsv=node.getHsv()
float[] hsv = node.getHsv();
width=bitmap.getWidth()
final int width = bitmap.getWidth();
height=bitmap.getHeight()
final int height = bitmap.getHeight();
final int[] rgbPixels = new int[width * height];
final MedianCutQuantizer mcq = new MedianCutQuantizer(rgbPixels, NUM_COLORS);
primaryAccentColor=findPrimaryAccentColor()
final ColorNode primaryAccentColor = findPrimaryAccentColor();
secondaryAccentColor=findSecondaryAccentColor(primaryAccentColor)
final ColorNode secondaryAccentColor = findSecondaryAccentColor(primaryAccentColor);
tertiaryAccentColor=findTertiaryAccentColor(primaryAccentColor,secondaryAccentColor)
final int tertiaryAccentColor = findTertiaryAccentColor(
                primaryAccentColor, secondaryAccentColor);
primaryTextColor=findPrimaryTextColor(primaryAccentColor)
final int primaryTextColor = findPrimaryTextColor(primaryAccentColor);
secondaryTextColor=findSecondaryTextColor(primaryAccentColor)
final int secondaryTextColor = findSecondaryTextColor(primaryAccentColor);
final float primaryHue = primary.getHsv()[0];
final float candidateHue = candidate.getHsv()[0];
copy=Arrays.copyOf(palette,palette.length)
final MedianCutQuantizer.ColorNode[] copy = Arrays.copyOf(palette, palette.length);
maxCount=palette[0].getCount()
final float maxCount = palette[0].getCount();
lhsWeight=calculateWeight(lhs,maxCount)
final float lhsWeight = calculateWeight(lhs, maxCount);
rhsWeight=calculateWeight(rhs,maxCount)
final float rhsWeight = calculateWeight(rhs, maxCount);
float sum = 0;
float sumWeight = 0;
float value = values[i];
float weight = values[i + 1];
ColorHistogram colorHist = new ColorHistogram(pixels);
K=colorHist.getNumberOfColors()
int K = colorHist.getNumberOfColors();
ColorNode[] rCols = null;
rgb=colorHist.getColor(i)
int rgb = colorHist.getColor(i);
cnt=colorHist.getCount(i)
int cnt = colorHist.getCount(i);
ColorBox initialBox = new ColorBox(0, K - 1, 0);
List<ColorBox> colorSet = new ArrayList<ColorBox>();
int k = 1;
boolean done = false;
nextBox=findBoxToSplit(colorSet)
ColorBox nextBox = findBoxToSplit(colorSet);
newBox=nextBox.splitBox()
ColorBox newBox = nextBox.splitBox();
color=findClosestColor(pixels[i])
ColorNode color = findClosestColor(pixels[i]);
idx=findClosestColorIndex(rgb)
int idx = findClosestColorIndex(rgb);
red=Color.red(rgb)
int red = Color.red(rgb);
grn=Color.green(rgb)
int grn = Color.green(rgb);
blu=Color.blue(rgb)
int blu = Color.blue(rgb);
int minIdx = 0;
int minDistance = Integer.MAX_VALUE;
ColorNode color = quantColors[i];
d2=color.distance2(red,grn,blu)
int d2 = color.distance2(red, grn, blu);
ColorBox boxToSplit = null;
int minLevel = Integer.MAX_VALUE;
n=colorBoxes.size()
int n = colorBoxes.size();
ColorNode[] avgColors = new ColorNode[n];
int i = 0;
int dr = this.red - red;
int dg = this.grn - grn;
int db = this.blu - blu;
ColorNode color = imageColors[i];
int r = color.red;
int g = color.grn;
int b = color.blu;
dim=getLongestColorDimension()
ColorDimension dim = getLongestColorDimension();
med=findMedian(dim)
int med = findMedian(dim);
int nextLevel = level + 1;
ColorBox newBox = new ColorBox(med + 1, upper, nextLevel);
int rLength = rmax - rmin;
int gLength = gmax - gmin;
int bLength = bmax - bmin;
int half = count / 2;
int nPixels, median;
int rSum = 0;
int gSum = 0;
int bSum = 0;
int n = 0;
ColorNode ci = imageColors[i];
int cnt = ci.cnt;
double nd = n;
int avgRed = (int) (0.5 + rSum / nd);
int avgGrn = (int) (0.5 + gSum / nd);
int avgBlu = (int) (0.5 + bSum / nd);
s=this.getClass().getSimpleName()
String s = this.getClass().getSimpleName();
int i = 0;
int N = pixelsOrig.length;
int[] pixelsCpy = new int[N];
int k = -1;
int curColor = -1;
int nColors = k + 1;
id=item.getItemId()
int id = item.getItemId();
Intent intent = new Intent();
bitmap=((BitmapDrawable)imageView.getDrawable()).getBitmap()
Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap();
DominantColorCalculator dominantColorCalculator = new DominantColorCalculator(bitmap);
selectedImageUri=data.getData()
Uri selectedImageUri = data.getData();
selectedImagePath=getPath(selectedImageUri)
String selectedImagePath = getPath(selectedImageUri);
String[] projection = {MediaStore.Images.Media.DATA};
cursor=managedQuery(uri,projection,null,null,null)
Cursor cursor = managedQuery(uri, projection, null, null, null);
column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)
int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
LinearLayout rootView = (LinearLayout) inflater.inflate(R.layout.fragment_main, container, false);
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
preapprovalButton=payPal.getCheckoutButton(getActivity(),PayPal.BUTTON_194x37,CheckoutButton.TEXT_PAY)
CheckoutButton preapprovalButton = payPal.getCheckoutButton(getActivity(), PayPal.BUTTON_194x37, CheckoutButton.TEXT_PAY);
preapprovalIntent=payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY)
Intent preapprovalIntent = payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY);
String resultTitle = "";
String resultInfo = "";
String resultExtra = "";
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
PayPalPreapproval preapproval = new PayPalPreapproval();
preapproval=createPreapproval(preapprovalKey)
PayPalPreapproval preapproval = createPreapproval(preapprovalKey);
Bundle bundle = new Bundle();
int availableLength = maxLength;
StringBuilder stringBuilder = new StringBuilder(maxLength);
prefixAndSuffixLength=computeAppendedLengthIncludingSeparatorSpaces(prefix,suffix)
int prefixAndSuffixLength = computeAppendedLengthIncludingSeparatorSpaces(prefix, suffix);
urlLength=computeUrlLengthIncludingSeparatorSpace(url)
int urlLength = computeUrlLengthIncludingSeparatorSpace(url);
trimmedSubject=ellipsizeTextIfExceedsMaxLength(subject,availableLength)
String trimmedSubject = ellipsizeTextIfExceedsMaxLength(subject, availableLength);
int length = 0;
preferences=context.getSharedPreferences(MRU_PREFERENCES,Context.MODE_PRIVATE)
SharedPreferences preferences = context.getSharedPreferences(MRU_PREFERENCES, Context.MODE_PRIVATE);
args=getArguments()
Bundle args = getArguments();
themeResId=getThemeResIdIfProvidedIn(args)
int themeResId = getThemeResIdIfProvidedIn(args);
title=getTitleIfProvidedIn(args)
CharSequence title = getTitleIfProvidedIn(args);
builder=createDialogBuilder(themeResId).setCancelable(true).setView(dialogView)
AlertDialog.Builder builder = createDialogBuilder(themeResId)
                .setCancelable(true)
                .setView(dialogView);
inflater=getActivity().getLayoutInflater()
LayoutInflater inflater = getActivity().getLayoutInflater();
GridView gridView = (GridView) rootView.findViewById(R.id.ps__dialog_grid);
targetApps=extractTargetAppsFrom(args)
TargetApps targetApps = extractTargetAppsFrom(args);
allShareTargets=getAvailableShareTargets(sharingIntent)
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
priorityAppInfos=createPriorityResolveInfoList(targetApps,allShareTargets)
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
otherAppInfos=createOtherAppsResolveInfoList(priorityAppInfos,allShareTargets)
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
resolveInfos=targetApps.extractTargetResolveInfosFrom(allShareTargets)
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
mruResolveInfo=findMruResolveInfoIn(allShareTargets)
ResolveInfo mruResolveInfo = findMruResolveInfoIn(allShareTargets);
List<ResolveInfo> otherAppsInfos = new ArrayList<ResolveInfo>(allAppInfos);
mruPackageName=persister.getLastUsedTarget()
String mruPackageName = persister.getLastUsedTarget();
String packageName = resolveInfo.activityInfo.packageName;
packageManager=getActivity().getPackageManager()
PackageManager packageManager = getActivity().getPackageManager();
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
View buttonStrip = (View) showMoreButton.getParent();
gridView=getGridView()
GridView gridView = getGridView();
intent=wrapIntentWithExplicitTargetComponentForItem(position,sharingIntent)
Intent intent = wrapIntentWithExplicitTargetComponentForItem(position, sharingIntent);
Intent intent = new Intent(sharingIntent);
ActivityInfo activity = adapter.getItem(position).activityInfo;
ComponentName name = new ComponentName(activity.applicationInfo.packageName, activity.name);
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
PriorityShareDialog dialog = new PriorityShareDialog();
Bundle args = new Bundle();
sharingIntent=createSharingIntent()
Intent sharingIntent = createSharingIntent();
fragmentManager=activity.getFragmentManager()
FragmentManager fragmentManager = activity.getFragmentManager();
Intent intent = new Intent(Intent.ACTION_SEND);
dialog=new PriorityShareDialog.Builder().setTitle(title).setTargetApps(targetApps).setSharingIntent(sharingIntent).setOnPrepareSharingIntentListener(listener).setShowMostRecentlyUsed(showMostRecentlyUsed).build()
PriorityShareDialog dialog = new PriorityShareDialog.Builder()
                .setTitle(title)
                .setTargetApps(targetApps)
                .setSharingIntent(sharingIntent)
                .setOnPrepareSharingIntentListener(listener)
                .setShowMostRecentlyUsed(showMostRecentlyUsed)
                .build();
PrioritySharer prioritySharer = new PrioritySharer();
prioritySharer=build()
PrioritySharer prioritySharer = build();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
layoutInflater=LayoutInflater.from(context)
LayoutInflater layoutInflater = LayoutInflater.from(context);
iconSizePx=getIconSizePx(context.getResources())
int iconSizePx = getIconSizePx(context.getResources());
ArrayList<ResolveInfo> sortedList = new ArrayList<ResolveInfo>(resolveInfoList);
int otherAppsCountMaybe = showAllApps ? otherAppInfos.size() : 0;
firstOtherAppsItemPosition=priorityAppInfos.size()
int firstOtherAppsItemPosition = priorityAppInfos.size();
int offsetPosition = position - firstOtherAppsItemPosition;
TextView textView;
textView=initializeItemViewIfNecessary(convertView,R.layout.ps__grid_item_share,parent)
TextView textView = initializeItemViewIfNecessary(convertView, R.layout.ps__grid_item_share, parent);
info=getItem(position)
ResolveInfo info = getItem(position);
icon=info.loadIcon(packageManager)
Drawable icon = info.loadIcon(packageManager);
arraySize=in.readInt()
int arraySize = in.readInt();
String[] packageNames = new String[arraySize];
arraySize=targetPackages.size()
int arraySize = targetPackages.size();
String[] packagesArray = new String[arraySize];
SparseArray<ResolveInfo> matchedResolveInfos = new SparseArray<ResolveInfo>(targetPackages.size());
String packageName = info.activityInfo.packageName;
index=indexOfItemInto(packageName,targetPackages)
int index = indexOfItemInto(packageName, targetPackages);
sparseArraySize=sparseArray.size()
int sparseArraySize = sparseArray.size();
ArrayList<T> list = new ArrayList<T>(sparseArraySize);
int i = 0;
originalSubject=intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT)
CharSequence originalSubject = intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT);
String subject = originalSubject != null ? originalSubject.toString() : null;
composer=createComposer()
MessageComposer composer = createComposer();
component=intent.getComponent()
ComponentName component = intent.getComponent();
targetPackageName=component.getPackageName()
String targetPackageName = component.getPackageName();
adapter=ArrayAdapter.createFromResource(this,R.array.target_apps,android.R.layout.simple_spinner_item)
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
EditText text = (EditText) findViewById(R.id.text);
EditText title = (EditText) findViewById(R.id.title);
EditText mimeType = (EditText) findViewById(R.id.mime_type);
EditText dataUri = (EditText) findViewById(R.id.data_uri);
Switch showMostRecentlyUsed = (Switch) findViewById(R.id.show_most_recently_used);
uriString=dataUri.getText().toString()
String uriString = dataUri.getText().toString();
EditText text = (EditText) findViewById(R.id.text);
TextView textView = (TextView) convertView.findViewById(R.id.positionView);
colorView=convertView.findViewById(R.id.colorView)
View colorView = convertView.findViewById(R.id.colorView);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
offset=headerPlaceholder.getTop()
int offset = headerPlaceholder.getTop();
Integer item = COLORS[position];
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
firstVisiblePosition=grid.getFirstVisiblePosition()
int firstVisiblePosition = grid.getFirstVisiblePosition();
inflate=getViewForPosition(container,position)
View inflate = getViewForPosition(container, position);
id=item.getItemId()
int id = item.getItemId();
MyActivity activity = new MyActivity();
String manifestProperty = "../app/src/main/AndroidManifest.xml";
String resProperty = "../app/src/main/res";
cursor=resolver.query(uri,projection,selection,selectionArgs,null)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, null);
cursor=resolver.query(uri,projection,selection,selectionArgs,sortOrder)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, sortOrder);
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=richClass.setter(name)
Method setter = richClass.setter(name);
T obj;
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=methodsByName.get(name)
Method setter = methodsByName.get(name);
int type = TYPE_INT;
Class<?> t = setter.getParameterTypes()[0];
Class<?> t = setter.getParameterTypes()[0];
cursorType=cursor.getType(index)
final int cursorType = cursor.getType(index);
final Object obj;
s=f.getAnnotation(Mapper.class)
Mapper s = f.getAnnotation(Mapper.class);
mm=m.getAnnotation(Mapper.class)
Mapper mm = m.getAnnotation(Mapper.class);
methodName=StringUtil.asCamelifySetMethod(what)
String methodName = StringUtil.asCamelifySetMethod(what);
cursor=getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,null,null,null,null)
Cursor cursor = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
now=System.currentTimeMillis()
long now = System.currentTimeMillis();
List<Contact2> typedCursor = new CursorList<Contact2>(cursor, Contact2.class);
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[a-zA-Z0-9]+")
Pattern p = Pattern.compile("[a-zA-Z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[A-Z][a-z0-9]+")
Pattern p = Pattern.compile("[A-Z][a-z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
SurfaceView first = (SurfaceView) findViewById(R.id.firstSurface);
SurfaceView second = (SurfaceView) findViewById(R.id.secondSurface);
Intent pickVideo = new Intent(Intent.ACTION_PICK);
xml=context.obtainStyledAttributes(attrs,R.styleable.RelativeLayoutWithForeground)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.RelativeLayoutWithForeground);
int foregroundResId = INVALID_FOREGROUND_ID;
drawable=getDrawable(getResources(),foregroundResId)
Drawable drawable = getDrawable(getResources(), foregroundResId);
Bundle args = new Bundle();
enroll=mHotwordDetector.createEnrollIntent()
Intent enroll = mHotwordDetector.createEnrollIntent();

Diff of f4cfba2ebd9e1b1c72b90f723ea32493af78ae48 and 43448a01947c8a8733fb3812a946ae27c7fb2c8f:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 6
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision f4cfba2ebd9e1b1c72b90f723ea32493af78ae48 to 43448a01947c8a8733fb3812a946ae27c7fb2c8f


****Parsing for addition at revision 43448a01947c8a8733fb3812a946ae27c7fb2c8f****

Added ApplicationTest.java to .\/spikes\ repository source files.
Added DrawerActivity.java to .\/spikes\ repository source files.
Added EarthActivity.java to .\/spikes\ repository source files.
Added SaturnActivity.java to .\/spikes\ repository source files.
Added LocalPlayerActivity.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added CastApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ComposeSmsActivity.java to .\/spikes\ repository source files.
Added HeadlessSmsSendService.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MmsReceiver.java to .\/spikes\ repository source files.
Added SmsReceiver.java to .\/spikes\ repository source files.
Added ExtendedDemoActivity.java to .\/spikes\ repository source files.
Added ExtendedDemoApplication.java to .\/spikes\ repository source files.
Added SimpleDemoActivity.java to .\/spikes\ repository source files.
Added SimpleDemoApplication.java to .\/spikes\ repository source files.
Added Binder.java to .\/spikes\ repository source files.
Added ConnectedClient.java to .\/spikes\ repository source files.
Added Connection.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnection.java to .\/spikes\ repository source files.
Added ServiceConnectionCallback.java to .\/spikes\ repository source files.
Added EasyCustomTabs.java to .\/spikes\ repository source files.
Added ActionButtonComposer.java to .\/spikes\ repository source files.
Added CloseButtonIconComposer.java to .\/spikes\ repository source files.
Added Composer.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilder.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigator.java to .\/spikes\ repository source files.
Added EasyCustomTabsWebNavigator.java to .\/spikes\ repository source files.
Added ExitAnimationsComposer.java to .\/spikes\ repository source files.
Added IntentCustomizer.java to .\/spikes\ repository source files.
Added MenuItemComposer.java to .\/spikes\ repository source files.
Added NavigationFallback.java to .\/spikes\ repository source files.
Added Navigator.java to .\/spikes\ repository source files.
Added ShowTitleComposer.java to .\/spikes\ repository source files.
Added StartAnimationsComposer.java to .\/spikes\ repository source files.
Added ToolbarColorComposer.java to .\/spikes\ repository source files.
Added UrlBarHidingComposer.java to .\/spikes\ repository source files.
Added WebNavigator.java to .\/spikes\ repository source files.
Added AvailableAppProvider.java to .\/spikes\ repository source files.
Added BestPackageFinder.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProvider.java to .\/spikes\ repository source files.
Added BinderTest.java to .\/spikes\ repository source files.
Added ConnectedClientTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnectionTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigatorTest.java to .\/spikes\ repository source files.
Added BestPackageFinderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProviderTest.java to .\/spikes\ repository source files.
Added ApiPagedChannelHistory.java to .\/spikes\ repository source files.
Added ApiPagedResponse.java to .\/spikes\ repository source files.
Added ChannelHistory.java to .\/spikes\ repository source files.
Added HistoryConverter.java to .\/spikes\ repository source files.
Added Runner.java to .\/spikes\ repository source files.
Added SlackHistoryFetcher.java to .\/spikes\ repository source files.
Added SlackWebService.java to .\/spikes\ repository source files.
Added ApiPagedResponseTest.java to .\/spikes\ repository source files.
Added MainActivityTest.java to .\/spikes\ repository source files.
Added LoremAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added BetterAccountManager.java to .\/spikes\ repository source files.
Added BetterAuthenticator.java to .\/spikes\ repository source files.
Added BetterAuthenticatorActivity.java to .\/spikes\ repository source files.
Added GertHerbAuthenticator.java to .\/spikes\ repository source files.
Added GertHerbAuthenticatorService.java to .\/spikes\ repository source files.
Added NoAccountException.java to .\/spikes\ repository source files.
Added ReactiveAuthenticatorActivity.java to .\/spikes\ repository source files.
Added Token.java to .\/spikes\ repository source files.
Added GertHerbActivity.java to .\/spikes\ repository source files.
Added GertHerbApplication.java to .\/spikes\ repository source files.
Added GertHerbAuthenticationActivity.java to .\/spikes\ repository source files.
Added TypefaceFactory.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added ViewServer.java to .\/spikes\ repository source files.
Added ViewServerManager.java to .\/spikes\ repository source files.
Added DeveloperError.java to .\/spikes\ repository source files.
Added HomeActivity.java to .\/spikes\ repository source files.
Added LoginActivity.java to .\/spikes\ repository source files.
Added LoginView.java to .\/spikes\ repository source files.
Added UserCredentials.java to .\/spikes\ repository source files.
Added FontButton.java to .\/spikes\ repository source files.
Added FontEditText.java to .\/spikes\ repository source files.
Added FontTextView.java to .\/spikes\ repository source files.
Added GithubApi.java to .\/spikes\ repository source files.
Added GithubApiFactory.java to .\/spikes\ repository source files.
Added TokenRequest.java to .\/spikes\ repository source files.
Added TokenResponse.java to .\/spikes\ repository source files.
Added Dummy.java to .\/spikes\ repository source files.
Added DummyTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MainFragment.java to .\/spikes\ repository source files.
Added Attributes.java to .\/spikes\ repository source files.
Added Coordinates.java to .\/spikes\ repository source files.
Added IndicatorCoordinatesCalculator.java to .\/spikes\ repository source files.
Added LandingStrip.java to .\/spikes\ repository source files.
Added MutableCoordinates.java to .\/spikes\ repository source files.
Added OnPagerAdapterChangedListener.java to .\/spikes\ repository source files.
Added PagerAdapterObserver.java to .\/spikes\ repository source files.
Added Scrollable.java to .\/spikes\ repository source files.
Added ScrollingPageChangeListener.java to .\/spikes\ repository source files.
Added State.java to .\/spikes\ repository source files.
Added TabsContainer.java to .\/spikes\ repository source files.
Added CustomLandingStrip.java to .\/spikes\ repository source files.
Added CustomTabActivity.java to .\/spikes\ repository source files.
Added ExampleRainbowLandingStrip.java to .\/spikes\ repository source files.
Added FixedWidthTabActivity.java to .\/spikes\ repository source files.
Added NoFragmentsSimpleTextTabActivity.java to .\/spikes\ repository source files.
Added Data.java to .\/spikes\ repository source files.
Added DemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added SmallDemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerFragment.java to .\/spikes\ repository source files.
Added DemoViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapterState.java to .\/spikes\ repository source files.
Added SimpleTextTabActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AbTestingParamsLoadedCallback.java to .\/spikes\ repository source files.
Added AyBe.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added WeakStartCallback.java to .\/spikes\ repository source files.
Added LeakActivity.java to .\/spikes\ repository source files.
Added NoLeakActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added Bar.java to .\/spikes\ repository source files.
Added Foo.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added FooTest.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added ColorScheme.java to .\/spikes\ repository source files.
Added ColorUtils.java to .\/spikes\ repository source files.
Added DominantColorCalculator.java to .\/spikes\ repository source files.
Added FloatUtils.java to .\/spikes\ repository source files.
Added MedianCutQuantizer.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added PayPalFragment.java to .\/spikes\ repository source files.
Added PayPalHelper.java to .\/spikes\ repository source files.
Added MaxLengthMessageComposer.java to .\/spikes\ repository source files.
Added MessageComposer.java to .\/spikes\ repository source files.
Added TwitterMessageComposer.java to .\/spikes\ repository source files.
Added DisabledMruPersister.java to .\/spikes\ repository source files.
Added MruPersister.java to .\/spikes\ repository source files.
Added SharedPreferencesMruPersister.java to .\/spikes\ repository source files.
Added OnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added PriorityShareDialog.java to .\/spikes\ repository source files.
Added PrioritySharer.java to .\/spikes\ repository source files.
Added ShareTargetsAdapter.java to .\/spikes\ repository source files.
Added SimpleOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added TargetApps.java to .\/spikes\ repository source files.
Added TwitterOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AdvancedActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SimpleActivity.java to .\/spikes\ repository source files.
Added LockingActivity.java to .\/spikes\ repository source files.
Added PostLockingActivity.java to .\/spikes\ repository source files.
Added PreLockingActivity.java to .\/spikes\ repository source files.
Added DummyAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added NovoStaggeredGridView.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SpikeApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SwipeableView.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MyClass.java to .\/spikes\ repository source files.
Added MyClassTest.java to .\/spikes\ repository source files.
Added MyAndroidClassTest.java to .\/spikes\ repository source files.
Added RobolectricGradleTestRunner.java to .\/spikes\ repository source files.
Added Mapper.java to .\/spikes\ repository source files.
Added Query.java to .\/spikes\ repository source files.
Added TypedResolver.java to .\/spikes\ repository source files.
Added CursorList.java to .\/spikes\ repository source files.
Added CursorListIterator.java to .\/spikes\ repository source files.
Added CursorMarshaller.java to .\/spikes\ repository source files.
Added EmptyListIterator.java to .\/spikes\ repository source files.
Added ReflectionCursorMarshaller.java to .\/spikes\ repository source files.
Added RichClass.java to .\/spikes\ repository source files.
Added Setter.java to .\/spikes\ repository source files.
Added Function.java to .\/spikes\ repository source files.
Added TypedElementLoader.java to .\/spikes\ repository source files.
Added TypedLoader.java to .\/spikes\ repository source files.
Added Marshaller.java to .\/spikes\ repository source files.
Added ObjectMapper.java to .\/spikes\ repository source files.
Added TypedActivity.java to .\/spikes\ repository source files.
Added StringUtil.java to .\/spikes\ repository source files.
Added MyObject.java to .\/spikes\ repository source files.
Added MediaPlayerSwitcherActivity.java to .\/spikes\ repository source files.
Added VideoPlayerService.java to .\/spikes\ repository source files.
Added RelativeLayoutWithForeground.java to .\/spikes\ repository source files.
Added DemoActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added RecognitionService.java to .\/spikes\ repository source files.
Added SessionService.java to .\/spikes\ repository source files.
Added SettingsActivity.java to .\/spikes\ repository source files.
Added SmartContextInteractionService.java to .\/spikes\ repository source files.
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
String[] planetTitles = new String[]{"Earth", "Saturn"};
DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
ListView listView = (ListView) findViewById(R.id.left_drawer);
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close);
b=getIntent().getExtras()
Bundle b = getIntent().getExtras();
mShouldStartPlayback=b.getBoolean("shouldStart")
boolean mShouldStartPlayback = b.getBoolean("shouldStart");
startPosition=b.getInt("startPosition",0)
int startPosition = b.getInt("startPosition", 0);
currentPos=mVideoView.getCurrentPosition()
int currentPos = mVideoView.getCurrentPosition();
String msg;
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, mDisplaySize.y + getActionBar().getHeight());
mm=mSelectedMedia.getMetadata()
MediaMetadata mm = mSelectedMedia.getMetadata();
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, (int) (mDisplaySize.x * ASPECT_RATIO));
WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
width=display.getWidth()
int width = display.getWidth();
height=display.getHeight()
int height = display.getHeight();
int resourceId = 0;
String videoUrl = "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4#sthash.rJ5rPZy8.dpuf";
String title = "Jahre Philharmonie";
String description = "Awesome film you must watch!";
String author = "Blundell";
String thumbUrl = "http://www.ustream.tv/blog/wp-content/uploads/2013/10/simply-go-live.png";
MediaMetadata metadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE);
mediaInfo=new MediaInfo.Builder(videoUrl).setMetadata(metadata).setStreamType(MediaInfo.STREAM_TYPE_BUFFERED).setContentType("video/mp4").build()
MediaInfo mediaInfo = new MediaInfo.Builder(videoUrl)
                        .setMetadata(metadata)
                        .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)
                        .setContentType("video/mp4")
                        .build();
Intent intent = new Intent(MainActivity.this, LocalPlayerActivity.class);
preferences=getPreferences(MODE_PRIVATE)
SharedPreferences preferences = getPreferences(MODE_PRIVATE);
defaultSmsPackage=Telephony.Sms.getDefaultSmsPackage(this)
String defaultSmsPackage = Telephony.Sms.getDefaultSmsPackage(this);
Intent intent = new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
availableAppProvider=EasyCustomTabs.getInstance()
AvailableAppProvider availableAppProvider = EasyCustomTabs.getInstance();
ConnectedClient connectedClient = new ConnectedClient(client);
binder=Binder.newInstance()
Binder binder = Binder.newInstance();
List<Composer> composerList = new ArrayList<>();
customTabsSession=connection.newSession()
CustomTabsSession customTabsSession = connection.newSession();
CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(customTabsSession);
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
context=EasyCustomTabs.getInstance().getContext()
Context context = EasyCustomTabs.getInstance().getContext();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
packagesSupportingCustomTabs=getPackagesSupportingCustomTabs()
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
defaultPackage=getDefaultPackage()
String defaultPackage = getDefaultPackage();
defaultActivityInfo=packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK,0)
ResolveInfo defaultActivityInfo = packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK, 0);
String packageName = defaultActivityInfo.activityInfo.packageName;
resolvedInfoList=packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK,0)
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<String> packagesSupportingCustomTabs = new ArrayList<>();
Intent serviceIntent = new Intent();
bestPackageFinder=BestPackageFinder.newInstance()
BestPackageFinder bestPackageFinder = BestPackageFinder.newInstance();
packageName=bestPackageFinder.findBestPackage()
String packageName = bestPackageFinder.findBestPackage();
resolveInfo=createResolveInfoFor(packageName)
ResolveInfo resolveInfo = createResolveInfoFor(packageName);
ResolveInfo resolveInfo = new ResolveInfo();
List<ResolveInfo> resolveInfoList = new ArrayList<>();
defaultPackageResolveInfo=createResolveInfoFor(packageName)
ResolveInfo defaultPackageResolveInfo = createResolveInfoFor(packageName);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
oldestApiMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage oldestApiMessage = apiMessages.get(apiMessages.size() - 1);
String lastResponseEpochTime = oldestApiMessage.timeStamp;
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
latestMessage=latestMessages.get(latestMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage latestMessage = latestMessages.get(latestMessages.size() - 1);
latestMessageDateTime=convertToLocalDateTime(latestMessage.timeStamp)
LocalDateTime latestMessageDateTime = convertToLocalDateTime(latestMessage.timeStamp);
List<ChannelHistory.Message> messages = new ArrayList<>();
historyFrom=getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1))
LocalDateTime historyFrom = getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1));
historyTo=getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0))
LocalDateTime historyTo = getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0));
String text = apiMessage.text;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
lastMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage lastMessage = apiMessages.get(apiMessages.size() - 1);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
firstMessage=apiMessages.get(0)
ApiPagedChannelHistory.ApiMessage firstMessage = apiMessages.get(0);
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
String slackToken = args[0];
retrofit=new Retrofit.Builder().baseUrl("https://slack.com/api/").addConverterFactory(GsonConverterFactory.create()).build()
Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://slack.com/api/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();
slackWebService=retrofit.create(SlackWebService.class)
SlackWebService slackWebService = retrofit.create(SlackWebService.class);
slackHistoryFetcher=SlackHistoryFetcher.from(slackWebService,slackToken)
SlackHistoryFetcher slackHistoryFetcher = SlackHistoryFetcher.from(slackWebService, slackToken);
start=LocalDateTime.now()
LocalDateTime start = LocalDateTime.now();
end=LocalDateTime.now().minusDays(7)
LocalDateTime end = LocalDateTime.now().minusDays(7);
channelHistory=slackHistoryFetcher.getChannelHistory(start,end)
ChannelHistory channelHistory = slackHistoryFetcher.getChannelHistory(start, end);
HistoryConverter historyConverter = new HistoryConverter();
ApiPagedResponse apiPagedResponse = new ApiPagedResponse(start);
response=fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime())
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
apiPagedChannelHistory=response.body()
ApiPagedChannelHistory apiPagedChannelHistory = response.body();
channelHistory=slackWebService.getChannelHistory(slackToken,channel,lastResponseEpochTime,NUMBER_OF_RESULTS)
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
ApiPagedChannelHistory apiPagedChannelHistory = new ApiPagedChannelHistory();
ApiPagedChannelHistory.ApiMessage apiMessage = new ApiPagedChannelHistory.ApiMessage();
final TextView textView = new TextView(context);
emptyView=findViewById(R.id.empty_view)
View emptyView = findViewById(R.id.empty_view);
final Integer action = values[0];
LoremAdapter loremAdapter = new LoremAdapter();
accounts=accountManager.getAccountsByType(accountType)
Account[] accounts = accountManager.getAccountsByType(accountType);
Bundle result;
Bundle result;
Bundle result = new Bundle();
activity=createLoginIntent(context,accountType,authTokenType,requiredFeatures,options)
Intent activity = createLoginIntent(context, accountType, authTokenType, requiredFeatures, options);
Bundle bundle = new Bundle();
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
accounts=accountManager.getAccountsByType(authTokenType)
Account[] accounts = accountManager.getAccountsByType(authTokenType);
bundle=createResponseBundle(token)
Bundle bundle = createResponseBundle(token);
accountManager=AccountManager.get(this.getApplicationContext())
AccountManager accountManager = AccountManager.get(this.getApplicationContext());
Account account = new Account(token.getUserName(), getAccountName());
Bundle bundle = new Bundle();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
GertHerbAuthenticator authenticator = new GertHerbAuthenticator(this);
fontId=getFontId(context,attrs)
int fontId = getFontId(context, attrs);
fontType=getFontType(fontId)
FontType fontType = getFontType(fontId);
typedArray=context.obtainStyledAttributes(attrs,R.styleable.CustomTextAppearance)
TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CustomTextAppearance);
typeface=createTypeFace(context,fontType)
Typeface typeface = createTypeFace(context, fontType);
info=context.getApplicationInfo()
ApplicationInfo info = context.getApplicationInfo();
name=activity.getTitle().toString()
String name = activity.getTitle().toString();
client=mServer.accept()
Socket client = mServer.accept();
boolean result;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
BufferedReader in = null;
request=in.readLine()
final String request = in.readLine();
String command;
String parameters;
index=request.indexOf(' ')
int index = request.indexOf(' ');
boolean result;
boolean success = true;
BufferedWriter out = null;
index=parameters.indexOf(' ')
int index = parameters.indexOf(' ');
code=parameters.substring(0,index)
final String code = parameters.substring(0, index);
int hashCode = (int) Long.parseLong(code, 16);
window=findWindow(hashCode)
final View window = findWindow(hashCode);
dispatch=ViewDebug.class.getDeclaredMethod("dispatchCommand",View.class,String.class,String.class,OutputStream.class)
final Method dispatch = ViewDebug.class.getDeclaredMethod("dispatchCommand",
                        View.class, String.class, String.class, OutputStream.class);
View window = null;
boolean result = true;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
boolean result = true;
String focusName = null;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
View focusedWindow = null;
BufferedWriter out = null;
boolean needWindowListUpdate = false;
boolean needFocusedWindowUpdate = false;
BetterAccountManager accountManager = new BetterAccountManager(this, getString(R.string.account_type), getString(R.string.token_type), null);
loginView=Views.findById(this,R.id.login_view)
LoginView loginView = Views.findById(this, R.id.login_view);
authorizationApi=new GithubApiFactory().createAuthorizationApi(credentials.username,credentials.password)
GithubApi authorizationApi = new GithubApiFactory().createAuthorizationApi(credentials.username, credentials.password);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
Endpoint endpoint = new Endpoint() {
            @Override
            public String getUrl() {
                return GITHUB_API_URL;
            }

            @Override
            public String getName() {
                return "Live";
            }
        };
interceptor=createAuthorizationRequestInterceptor(username,password)
RequestInterceptor interceptor = createAuthorizationRequestInterceptor(username, password);
restAdapter=createRestAdapter(endpoint,interceptor)
RestAdapter restAdapter = createRestAdapter(endpoint, interceptor);
Dummy dummy = new Dummy();
result=dummy.explodes()
boolean result = dummy.explodes();
String base64EncodedPublicKey = "CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE";
premiumPurchase=inventory.getPurchase(SKU_PREMIUM)
Purchase premiumPurchase = inventory.getPurchase(SKU_PREMIUM);
infiniteGasPurchase=inventory.getPurchase(SKU_INFINITE_GAS)
Purchase infiniteGasPurchase = inventory.getPurchase(SKU_INFINITE_GAS);
gasPurchase=inventory.getPurchase(SKU_GAS)
Purchase gasPurchase = inventory.getPurchase(SKU_GAS);
String payload = "";
String payload = "";
String payload = "";
payload=p.getDeveloperPayload()
String payload = p.getDeveloperPayload();
int index = mTank >= TANK_RES_IDS.length ? TANK_RES_IDS.length - 1 : mTank;
AlertDialog.Builder bld = new AlertDialog.Builder(this);
spe=getPreferences(MODE_PRIVATE).edit()
SharedPreferences.Editor spe = getPreferences(MODE_PRIVATE).edit();
sp=getPreferences(MODE_PRIVATE)
SharedPreferences sp = getPreferences(MODE_PRIVATE);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                                  + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                    | ((source[d + 1 + off] << 24) >>> 16)
                    | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                    | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                                   "-1002:Bad response received/" +
                                   "-1003:Purchase signature verification failed/" +
                                   "-1004:Send intent failed/" +
                                   "-1005:User cancelled/" +
                                   "-1006:Unknown purchase response/" +
                                   "-1007:Missing token/" +
                                   "-1008:Unknown error/" +
                                   "-1009:Subscriptions not available/" +
                                   "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(),
                    itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                        | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                        | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                            | ((source[d + 1 + off] << 24) >>> 16)
                            | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                            | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                "-1002:Bad response received/" +
                "-1003:Purchase signature verification failed/" +
                "-1004:Send intent failed/" +
                "-1005:User cancelled/" +
                "-1006:Unknown purchase response/" +
                "-1007:Missing token/" +
                "-1008:Unknown error/" +
                "-1009:Subscriptions not available/" +
                "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(), itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
responseCode=result.getResponse()
int responseCode = result.getResponse();
sku=purchase.getSku()
String sku = purchase.getSku();
skuDetails=inv.getSkuDetails(sku)
SkuDetails skuDetails = inv.getSkuDetails(sku);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
Button purchaseFiveButton = (Button) rootView.findViewById(R.id.fragment_main_button_purchase_five_coins);
xml=context.obtainStyledAttributes(attrs,R.styleable.LandingStrip)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.LandingStrip);
tabLayoutId=xml.getResourceId(R.styleable.LandingStrip_tabLayoutId,MISSING_TAB_LAYOUT_ID)
int tabLayoutId = xml.getResourceId(R.styleable.LandingStrip_tabLayoutId, MISSING_TAB_LAYOUT_ID);
indicatorColour=xml.getResourceId(R.styleable.LandingStrip_indicatorColor,DEFAULT_INDICATOR_COLOUR)
int indicatorColour = xml.getResourceId(R.styleable.LandingStrip_indicatorColor, DEFAULT_INDICATOR_COLOUR);
indicatorHeight=getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight,DEFAULT_INDICATOR_HEIGHT,xml)
int indicatorHeight = getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight, DEFAULT_INDICATOR_HEIGHT, xml);
tabsPaddingLeft=getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingLeft = getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding, DEFAULT_TABS_PADDING, xml);
tabsPaddingRight=getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingRight = getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding, DEFAULT_TABS_PADDING, xml);
MutableCoordinates drawCurrentTabCoordinates = new MutableCoordinates();
MutableCoordinates drawNextTabCoordinates = new MutableCoordinates();
MutableCoordinates drawMovingIndicatorCoordinates = new MutableCoordinates();
currentTab=tabsContainer.getTabAt(currentPosition)
View currentTab = tabsContainer.getTabAt(currentPosition);
currentTabStart=currentTab.getLeft()
float currentTabStart = currentTab.getLeft();
currentTabEnd=currentTab.getRight()
float currentTabEnd = currentTab.getRight();
nextTab=tabsContainer.getTabAt(currentPosition + 1)
View nextTab = tabsContainer.getTabAt(currentPosition + 1);
nextTabPositionOffset=getFractionFrom(pagePositionOffset)
float nextTabPositionOffset = getFractionFrom(pagePositionOffset);
indicatorStart=getIndicatorPosition(nextTab.getStart(),pagePositionOffset,currentTab.getStart(),nextTabPositionOffset)
float indicatorStart = getIndicatorPosition(nextTab.getStart(), pagePositionOffset, currentTab.getStart(), nextTabPositionOffset);
indicatorEnd=getIndicatorPosition(nextTab.getEnd(),pagePositionOffset,currentTab.getEnd(),nextTabPositionOffset)
float indicatorEnd = getIndicatorPosition(nextTab.getEnd(), pagePositionOffset, currentTab.getEnd(), nextTabPositionOffset);
height=getHeight()
int height = getHeight();
tabCount=pagerAdapter.getCount()
int tabCount = pagerAdapter.getCount();
title=pagerAdapter.getPageTitle(position)
CharSequence title = pagerAdapter.getPageTitle(position);
inflatedTabView=tabsContainer.inflateTab(layoutInflater,attributes.getTabLayoutId())
View inflatedTabView = tabsContainer.inflateTab(layoutInflater, attributes.getTabLayoutId());
int position = (int) view.getTag(TAG_KEY_POSITION);
scrollOffset=getHorizontalScrollOffset(position,positionOffset)
int scrollOffset = getHorizontalScrollOffset(position, positionOffset);
newScrollX=calculateScrollOffset(position,scrollOffset,positionOffset)
float newScrollX = calculateScrollOffset(position, scrollOffset, positionOffset);
tabWidth=tabsContainer.getTabAt(position).getWidth()
int tabWidth = tabsContainer.getTabAt(position).getWidth();
tabForPosition=tabsContainer.getTabAt(position)
View tabForPosition = tabsContainer.getTabAt(position);
float tabStartX = tabForPosition.getLeft() + scrollOffset;
int viewMiddleOffset = getTabParentWidth() / 2;
float tabCenterOffset = (tabForPosition.getRight() - tabForPosition.getLeft()) * 0.5F;
nextTabDelta=getNextTabDelta(position,pagerOffset,tabForPosition)
float nextTabDelta = getNextTabDelta(position, pagerOffset, tabForPosition);
LinearLayout tabsContainerView = new LinearLayout(context);
tab=getTabAt(index)
View tab = getTabAt(index);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
position=indicatorCoordinates.getStart()
float position = indicatorCoordinates.getStart();
lastTabOffset=((ViewGroup)getChildAt(0)).getChildAt(getChildCount() - 1).getWidth()
float lastTabOffset = ((ViewGroup) getChildAt(0)).getChildAt(getChildCount() - 1).getWidth();
frequency=getOneCycle(lastTabOffset)
float frequency = getOneCycle(lastTabOffset);
r=toHex(calculateColour(position,frequency,PHASE_RED,AMPLITUDE,CENTER_FREQUENCY))
String r = toHex(calculateColour(position, frequency, PHASE_RED, AMPLITUDE, CENTER_FREQUENCY));
g=toHex(calculateColour(position,frequency,PHASE_GREEN,AMPLITUDE,CENTER_FREQUENCY))
String g = toHex(calculateColour(position, frequency, PHASE_GREEN, AMPLITUDE, CENTER_FREQUENCY));
b=toHex(calculateColour(position,frequency,PHASE_BLUE,AMPLITUDE,CENTER_FREQUENCY))
String b = toHex(calculateColour(position, frequency, PHASE_BLUE, AMPLITUDE, CENTER_FREQUENCY));
height=getHeight()
int height = getHeight();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPagerFragment viewPagerFragment = new ViewPagerFragment();
Bundle bundle = new Bundle();
TextView view = (TextView) layoutInflater.inflate(R.layout.view_demo, container, false);
currentPosition=viewPagerAdapterState.getCurrentPosition()
int currentPosition = viewPagerAdapterState.getCurrentPosition();
view=getView(container,position)
View view = getView(container, position);
parcelableSparseArray=viewPagerAdapterState.get(position)
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
View view = (View) object;
SparseArray<Parcelable> viewState = new SparseArray<>();
position=entry.getValue()
int position = entry.getValue();
view=entry.getKey()
View view = entry.getKey();
bundle=in.readBundle()
Bundle bundle = in.readBundle();
Map<Integer, SparseArray<Parcelable>> viewStates = new HashMap<>(bundle.keySet().size());
sparseParcelableArray=bundle.getSparseParcelableArray(key)
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
primaryItemPosition=in.readInt()
int primaryItemPosition = in.readInt();
Bundle bundle = new Bundle();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
final TextView abText = (TextView) findViewById(R.id.ab_text);
final AyBe ayBe = new AyBe();
id=item.getItemId()
int id = item.getItemId();
callback=weakCallback.get()
AbTestingParamsLoadedCallback callback = weakCallback.get();
WeakReference<NoLeakActivity> weakNoLeakActivity = new WeakReference<NoLeakActivity>(noLeakActivity);
noLeakActivity=weakNoLeakActivity.get()
NoLeakActivity noLeakActivity = weakNoLeakActivity.get();
RecyclerView recyclerView = (RecyclerView) layoutInflater.inflate(R.layout.view_page, viewGroup, false);
itemView=layoutInflater.inflate(R.layout.view_item,parent,false)
View itemView = layoutInflater.inflate(R.layout.view_item, parent, false);
actual=foo.twice(HALF)
int actual = foo.twice(HALF);
int expected = WHOLE;
final float inverseRatio = 1f - ratio;
float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRatio);
float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRatio);
float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRatio);
hsv=node.getHsv()
float[] hsv = node.getHsv();
width=bitmap.getWidth()
final int width = bitmap.getWidth();
height=bitmap.getHeight()
final int height = bitmap.getHeight();
final int[] rgbPixels = new int[width * height];
final MedianCutQuantizer mcq = new MedianCutQuantizer(rgbPixels, NUM_COLORS);
primaryAccentColor=findPrimaryAccentColor()
final ColorNode primaryAccentColor = findPrimaryAccentColor();
secondaryAccentColor=findSecondaryAccentColor(primaryAccentColor)
final ColorNode secondaryAccentColor = findSecondaryAccentColor(primaryAccentColor);
tertiaryAccentColor=findTertiaryAccentColor(primaryAccentColor,secondaryAccentColor)
final int tertiaryAccentColor = findTertiaryAccentColor(
                primaryAccentColor, secondaryAccentColor);
primaryTextColor=findPrimaryTextColor(primaryAccentColor)
final int primaryTextColor = findPrimaryTextColor(primaryAccentColor);
secondaryTextColor=findSecondaryTextColor(primaryAccentColor)
final int secondaryTextColor = findSecondaryTextColor(primaryAccentColor);
final float primaryHue = primary.getHsv()[0];
final float candidateHue = candidate.getHsv()[0];
copy=Arrays.copyOf(palette,palette.length)
final MedianCutQuantizer.ColorNode[] copy = Arrays.copyOf(palette, palette.length);
maxCount=palette[0].getCount()
final float maxCount = palette[0].getCount();
lhsWeight=calculateWeight(lhs,maxCount)
final float lhsWeight = calculateWeight(lhs, maxCount);
rhsWeight=calculateWeight(rhs,maxCount)
final float rhsWeight = calculateWeight(rhs, maxCount);
float sum = 0;
float sumWeight = 0;
float value = values[i];
float weight = values[i + 1];
ColorHistogram colorHist = new ColorHistogram(pixels);
K=colorHist.getNumberOfColors()
int K = colorHist.getNumberOfColors();
ColorNode[] rCols = null;
rgb=colorHist.getColor(i)
int rgb = colorHist.getColor(i);
cnt=colorHist.getCount(i)
int cnt = colorHist.getCount(i);
ColorBox initialBox = new ColorBox(0, K - 1, 0);
List<ColorBox> colorSet = new ArrayList<ColorBox>();
int k = 1;
boolean done = false;
nextBox=findBoxToSplit(colorSet)
ColorBox nextBox = findBoxToSplit(colorSet);
newBox=nextBox.splitBox()
ColorBox newBox = nextBox.splitBox();
color=findClosestColor(pixels[i])
ColorNode color = findClosestColor(pixels[i]);
idx=findClosestColorIndex(rgb)
int idx = findClosestColorIndex(rgb);
red=Color.red(rgb)
int red = Color.red(rgb);
grn=Color.green(rgb)
int grn = Color.green(rgb);
blu=Color.blue(rgb)
int blu = Color.blue(rgb);
int minIdx = 0;
int minDistance = Integer.MAX_VALUE;
ColorNode color = quantColors[i];
d2=color.distance2(red,grn,blu)
int d2 = color.distance2(red, grn, blu);
ColorBox boxToSplit = null;
int minLevel = Integer.MAX_VALUE;
n=colorBoxes.size()
int n = colorBoxes.size();
ColorNode[] avgColors = new ColorNode[n];
int i = 0;
int dr = this.red - red;
int dg = this.grn - grn;
int db = this.blu - blu;
ColorNode color = imageColors[i];
int r = color.red;
int g = color.grn;
int b = color.blu;
dim=getLongestColorDimension()
ColorDimension dim = getLongestColorDimension();
med=findMedian(dim)
int med = findMedian(dim);
int nextLevel = level + 1;
ColorBox newBox = new ColorBox(med + 1, upper, nextLevel);
int rLength = rmax - rmin;
int gLength = gmax - gmin;
int bLength = bmax - bmin;
int half = count / 2;
int nPixels, median;
int rSum = 0;
int gSum = 0;
int bSum = 0;
int n = 0;
ColorNode ci = imageColors[i];
int cnt = ci.cnt;
double nd = n;
int avgRed = (int) (0.5 + rSum / nd);
int avgGrn = (int) (0.5 + gSum / nd);
int avgBlu = (int) (0.5 + bSum / nd);
s=this.getClass().getSimpleName()
String s = this.getClass().getSimpleName();
int i = 0;
int N = pixelsOrig.length;
int[] pixelsCpy = new int[N];
int k = -1;
int curColor = -1;
int nColors = k + 1;
id=item.getItemId()
int id = item.getItemId();
Intent intent = new Intent();
bitmap=((BitmapDrawable)imageView.getDrawable()).getBitmap()
Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap();
DominantColorCalculator dominantColorCalculator = new DominantColorCalculator(bitmap);
selectedImageUri=data.getData()
Uri selectedImageUri = data.getData();
selectedImagePath=getPath(selectedImageUri)
String selectedImagePath = getPath(selectedImageUri);
String[] projection = {MediaStore.Images.Media.DATA};
cursor=managedQuery(uri,projection,null,null,null)
Cursor cursor = managedQuery(uri, projection, null, null, null);
column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)
int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
LinearLayout rootView = (LinearLayout) inflater.inflate(R.layout.fragment_main, container, false);
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
preapprovalButton=payPal.getCheckoutButton(getActivity(),PayPal.BUTTON_194x37,CheckoutButton.TEXT_PAY)
CheckoutButton preapprovalButton = payPal.getCheckoutButton(getActivity(), PayPal.BUTTON_194x37, CheckoutButton.TEXT_PAY);
preapprovalIntent=payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY)
Intent preapprovalIntent = payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY);
String resultTitle = "";
String resultInfo = "";
String resultExtra = "";
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
PayPalPreapproval preapproval = new PayPalPreapproval();
preapproval=createPreapproval(preapprovalKey)
PayPalPreapproval preapproval = createPreapproval(preapprovalKey);
Bundle bundle = new Bundle();
int availableLength = maxLength;
StringBuilder stringBuilder = new StringBuilder(maxLength);
prefixAndSuffixLength=computeAppendedLengthIncludingSeparatorSpaces(prefix,suffix)
int prefixAndSuffixLength = computeAppendedLengthIncludingSeparatorSpaces(prefix, suffix);
urlLength=computeUrlLengthIncludingSeparatorSpace(url)
int urlLength = computeUrlLengthIncludingSeparatorSpace(url);
trimmedSubject=ellipsizeTextIfExceedsMaxLength(subject,availableLength)
String trimmedSubject = ellipsizeTextIfExceedsMaxLength(subject, availableLength);
int length = 0;
preferences=context.getSharedPreferences(MRU_PREFERENCES,Context.MODE_PRIVATE)
SharedPreferences preferences = context.getSharedPreferences(MRU_PREFERENCES, Context.MODE_PRIVATE);
args=getArguments()
Bundle args = getArguments();
themeResId=getThemeResIdIfProvidedIn(args)
int themeResId = getThemeResIdIfProvidedIn(args);
title=getTitleIfProvidedIn(args)
CharSequence title = getTitleIfProvidedIn(args);
builder=createDialogBuilder(themeResId).setCancelable(true).setView(dialogView)
AlertDialog.Builder builder = createDialogBuilder(themeResId)
                .setCancelable(true)
                .setView(dialogView);
inflater=getActivity().getLayoutInflater()
LayoutInflater inflater = getActivity().getLayoutInflater();
GridView gridView = (GridView) rootView.findViewById(R.id.ps__dialog_grid);
targetApps=extractTargetAppsFrom(args)
TargetApps targetApps = extractTargetAppsFrom(args);
allShareTargets=getAvailableShareTargets(sharingIntent)
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
priorityAppInfos=createPriorityResolveInfoList(targetApps,allShareTargets)
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
otherAppInfos=createOtherAppsResolveInfoList(priorityAppInfos,allShareTargets)
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
resolveInfos=targetApps.extractTargetResolveInfosFrom(allShareTargets)
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
mruResolveInfo=findMruResolveInfoIn(allShareTargets)
ResolveInfo mruResolveInfo = findMruResolveInfoIn(allShareTargets);
List<ResolveInfo> otherAppsInfos = new ArrayList<ResolveInfo>(allAppInfos);
mruPackageName=persister.getLastUsedTarget()
String mruPackageName = persister.getLastUsedTarget();
String packageName = resolveInfo.activityInfo.packageName;
packageManager=getActivity().getPackageManager()
PackageManager packageManager = getActivity().getPackageManager();
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
View buttonStrip = (View) showMoreButton.getParent();
gridView=getGridView()
GridView gridView = getGridView();
intent=wrapIntentWithExplicitTargetComponentForItem(position,sharingIntent)
Intent intent = wrapIntentWithExplicitTargetComponentForItem(position, sharingIntent);
Intent intent = new Intent(sharingIntent);
ActivityInfo activity = adapter.getItem(position).activityInfo;
ComponentName name = new ComponentName(activity.applicationInfo.packageName, activity.name);
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
PriorityShareDialog dialog = new PriorityShareDialog();
Bundle args = new Bundle();
sharingIntent=createSharingIntent()
Intent sharingIntent = createSharingIntent();
fragmentManager=activity.getFragmentManager()
FragmentManager fragmentManager = activity.getFragmentManager();
Intent intent = new Intent(Intent.ACTION_SEND);
dialog=new PriorityShareDialog.Builder().setTitle(title).setTargetApps(targetApps).setSharingIntent(sharingIntent).setOnPrepareSharingIntentListener(listener).setShowMostRecentlyUsed(showMostRecentlyUsed).build()
PriorityShareDialog dialog = new PriorityShareDialog.Builder()
                .setTitle(title)
                .setTargetApps(targetApps)
                .setSharingIntent(sharingIntent)
                .setOnPrepareSharingIntentListener(listener)
                .setShowMostRecentlyUsed(showMostRecentlyUsed)
                .build();
PrioritySharer prioritySharer = new PrioritySharer();
prioritySharer=build()
PrioritySharer prioritySharer = build();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
layoutInflater=LayoutInflater.from(context)
LayoutInflater layoutInflater = LayoutInflater.from(context);
iconSizePx=getIconSizePx(context.getResources())
int iconSizePx = getIconSizePx(context.getResources());
ArrayList<ResolveInfo> sortedList = new ArrayList<ResolveInfo>(resolveInfoList);
int otherAppsCountMaybe = showAllApps ? otherAppInfos.size() : 0;
firstOtherAppsItemPosition=priorityAppInfos.size()
int firstOtherAppsItemPosition = priorityAppInfos.size();
int offsetPosition = position - firstOtherAppsItemPosition;
TextView textView;
textView=initializeItemViewIfNecessary(convertView,R.layout.ps__grid_item_share,parent)
TextView textView = initializeItemViewIfNecessary(convertView, R.layout.ps__grid_item_share, parent);
info=getItem(position)
ResolveInfo info = getItem(position);
icon=info.loadIcon(packageManager)
Drawable icon = info.loadIcon(packageManager);
arraySize=in.readInt()
int arraySize = in.readInt();
String[] packageNames = new String[arraySize];
arraySize=targetPackages.size()
int arraySize = targetPackages.size();
String[] packagesArray = new String[arraySize];
SparseArray<ResolveInfo> matchedResolveInfos = new SparseArray<ResolveInfo>(targetPackages.size());
String packageName = info.activityInfo.packageName;
index=indexOfItemInto(packageName,targetPackages)
int index = indexOfItemInto(packageName, targetPackages);
sparseArraySize=sparseArray.size()
int sparseArraySize = sparseArray.size();
ArrayList<T> list = new ArrayList<T>(sparseArraySize);
int i = 0;
originalSubject=intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT)
CharSequence originalSubject = intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT);
String subject = originalSubject != null ? originalSubject.toString() : null;
composer=createComposer()
MessageComposer composer = createComposer();
component=intent.getComponent()
ComponentName component = intent.getComponent();
targetPackageName=component.getPackageName()
String targetPackageName = component.getPackageName();
adapter=ArrayAdapter.createFromResource(this,R.array.target_apps,android.R.layout.simple_spinner_item)
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
EditText text = (EditText) findViewById(R.id.text);
EditText title = (EditText) findViewById(R.id.title);
EditText mimeType = (EditText) findViewById(R.id.mime_type);
EditText dataUri = (EditText) findViewById(R.id.data_uri);
Switch showMostRecentlyUsed = (Switch) findViewById(R.id.show_most_recently_used);
uriString=dataUri.getText().toString()
String uriString = dataUri.getText().toString();
EditText text = (EditText) findViewById(R.id.text);
TextView textView = (TextView) convertView.findViewById(R.id.positionView);
colorView=convertView.findViewById(R.id.colorView)
View colorView = convertView.findViewById(R.id.colorView);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
offset=headerPlaceholder.getTop()
int offset = headerPlaceholder.getTop();
Integer item = COLORS[position];
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
firstVisiblePosition=grid.getFirstVisiblePosition()
int firstVisiblePosition = grid.getFirstVisiblePosition();
inflate=getViewForPosition(container,position)
View inflate = getViewForPosition(container, position);
id=item.getItemId()
int id = item.getItemId();
MyActivity activity = new MyActivity();
String manifestProperty = "../app/src/main/AndroidManifest.xml";
String resProperty = "../app/src/main/res";
cursor=resolver.query(uri,projection,selection,selectionArgs,null)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, null);
cursor=resolver.query(uri,projection,selection,selectionArgs,sortOrder)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, sortOrder);
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=richClass.setter(name)
Method setter = richClass.setter(name);
T obj;
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=methodsByName.get(name)
Method setter = methodsByName.get(name);
int type = TYPE_INT;
Class<?> t = setter.getParameterTypes()[0];
Class<?> t = setter.getParameterTypes()[0];
cursorType=cursor.getType(index)
final int cursorType = cursor.getType(index);
final Object obj;
s=f.getAnnotation(Mapper.class)
Mapper s = f.getAnnotation(Mapper.class);
mm=m.getAnnotation(Mapper.class)
Mapper mm = m.getAnnotation(Mapper.class);
methodName=StringUtil.asCamelifySetMethod(what)
String methodName = StringUtil.asCamelifySetMethod(what);
cursor=getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,null,null,null,null)
Cursor cursor = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
now=System.currentTimeMillis()
long now = System.currentTimeMillis();
List<Contact2> typedCursor = new CursorList<Contact2>(cursor, Contact2.class);
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[a-zA-Z0-9]+")
Pattern p = Pattern.compile("[a-zA-Z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[A-Z][a-z0-9]+")
Pattern p = Pattern.compile("[A-Z][a-z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
SurfaceView first = (SurfaceView) findViewById(R.id.firstSurface);
SurfaceView second = (SurfaceView) findViewById(R.id.secondSurface);
Intent pickVideo = new Intent(Intent.ACTION_PICK);
xml=context.obtainStyledAttributes(attrs,R.styleable.RelativeLayoutWithForeground)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.RelativeLayoutWithForeground);
int foregroundResId = INVALID_FOREGROUND_ID;
drawable=getDrawable(getResources(),foregroundResId)
Drawable drawable = getDrawable(getResources(), foregroundResId);
Bundle args = new Bundle();
enroll=mHotwordDetector.createEnrollIntent()
Intent enroll = mHotwordDetector.createEnrollIntent();

Diff of 43448a01947c8a8733fb3812a946ae27c7fb2c8f and 6d9706b9c60269c9d428d64ef987e9a800f87d74:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 6
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 43448a01947c8a8733fb3812a946ae27c7fb2c8f to 6d9706b9c60269c9d428d64ef987e9a800f87d74


****Parsing for addition at revision 6d9706b9c60269c9d428d64ef987e9a800f87d74****

Added ApplicationTest.java to .\/spikes\ repository source files.
Added DrawerActivity.java to .\/spikes\ repository source files.
Added EarthActivity.java to .\/spikes\ repository source files.
Added SaturnActivity.java to .\/spikes\ repository source files.
Added LocalPlayerActivity.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added CastApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ComposeSmsActivity.java to .\/spikes\ repository source files.
Added HeadlessSmsSendService.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MmsReceiver.java to .\/spikes\ repository source files.
Added SmsReceiver.java to .\/spikes\ repository source files.
Added ExtendedDemoActivity.java to .\/spikes\ repository source files.
Added ExtendedDemoApplication.java to .\/spikes\ repository source files.
Added SimpleDemoActivity.java to .\/spikes\ repository source files.
Added SimpleDemoApplication.java to .\/spikes\ repository source files.
Added Binder.java to .\/spikes\ repository source files.
Added ConnectedClient.java to .\/spikes\ repository source files.
Added Connection.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnection.java to .\/spikes\ repository source files.
Added ServiceConnectionCallback.java to .\/spikes\ repository source files.
Added EasyCustomTabs.java to .\/spikes\ repository source files.
Added ActionButtonComposer.java to .\/spikes\ repository source files.
Added CloseButtonIconComposer.java to .\/spikes\ repository source files.
Added Composer.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilder.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigator.java to .\/spikes\ repository source files.
Added EasyCustomTabsWebNavigator.java to .\/spikes\ repository source files.
Added ExitAnimationsComposer.java to .\/spikes\ repository source files.
Added IntentCustomizer.java to .\/spikes\ repository source files.
Added MenuItemComposer.java to .\/spikes\ repository source files.
Added NavigationFallback.java to .\/spikes\ repository source files.
Added Navigator.java to .\/spikes\ repository source files.
Added ShowTitleComposer.java to .\/spikes\ repository source files.
Added StartAnimationsComposer.java to .\/spikes\ repository source files.
Added ToolbarColorComposer.java to .\/spikes\ repository source files.
Added UrlBarHidingComposer.java to .\/spikes\ repository source files.
Added WebNavigator.java to .\/spikes\ repository source files.
Added AvailableAppProvider.java to .\/spikes\ repository source files.
Added BestPackageFinder.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProvider.java to .\/spikes\ repository source files.
Added BinderTest.java to .\/spikes\ repository source files.
Added ConnectedClientTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnectionTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigatorTest.java to .\/spikes\ repository source files.
Added BestPackageFinderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProviderTest.java to .\/spikes\ repository source files.
Added ApiPagedChannelHistory.java to .\/spikes\ repository source files.
Added ApiPagedResponse.java to .\/spikes\ repository source files.
Added ChannelHistory.java to .\/spikes\ repository source files.
Added HistoryConverter.java to .\/spikes\ repository source files.
Added Runner.java to .\/spikes\ repository source files.
Added SlackHistoryFetcher.java to .\/spikes\ repository source files.
Added SlackWebService.java to .\/spikes\ repository source files.
Added ApiPagedResponseTest.java to .\/spikes\ repository source files.
Added MainActivityTest.java to .\/spikes\ repository source files.
Added LoremAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added BetterAccountManager.java to .\/spikes\ repository source files.
Added BetterAuthenticator.java to .\/spikes\ repository source files.
Added BetterAuthenticatorActivity.java to .\/spikes\ repository source files.
Added GertHerbAuthenticator.java to .\/spikes\ repository source files.
Added GertHerbAuthenticatorService.java to .\/spikes\ repository source files.
Added NoAccountException.java to .\/spikes\ repository source files.
Added ReactiveAuthenticatorActivity.java to .\/spikes\ repository source files.
Added Token.java to .\/spikes\ repository source files.
Added GertHerbActivity.java to .\/spikes\ repository source files.
Added GertHerbApplication.java to .\/spikes\ repository source files.
Added GertHerbAuthenticationActivity.java to .\/spikes\ repository source files.
Added TypefaceFactory.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added ViewServer.java to .\/spikes\ repository source files.
Added ViewServerManager.java to .\/spikes\ repository source files.
Added DeveloperError.java to .\/spikes\ repository source files.
Added HomeActivity.java to .\/spikes\ repository source files.
Added LoginActivity.java to .\/spikes\ repository source files.
Added LoginView.java to .\/spikes\ repository source files.
Added UserCredentials.java to .\/spikes\ repository source files.
Added FontButton.java to .\/spikes\ repository source files.
Added FontEditText.java to .\/spikes\ repository source files.
Added FontTextView.java to .\/spikes\ repository source files.
Added GithubApi.java to .\/spikes\ repository source files.
Added GithubApiFactory.java to .\/spikes\ repository source files.
Added TokenRequest.java to .\/spikes\ repository source files.
Added TokenResponse.java to .\/spikes\ repository source files.
Added Dummy.java to .\/spikes\ repository source files.
Added DummyTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MainFragment.java to .\/spikes\ repository source files.
Added Attributes.java to .\/spikes\ repository source files.
Added Coordinates.java to .\/spikes\ repository source files.
Added IndicatorCoordinatesCalculator.java to .\/spikes\ repository source files.
Added LandingStrip.java to .\/spikes\ repository source files.
Added MutableCoordinates.java to .\/spikes\ repository source files.
Added OnPagerAdapterChangedListener.java to .\/spikes\ repository source files.
Added PagerAdapterObserver.java to .\/spikes\ repository source files.
Added Scrollable.java to .\/spikes\ repository source files.
Added ScrollingPageChangeListener.java to .\/spikes\ repository source files.
Added State.java to .\/spikes\ repository source files.
Added TabsContainer.java to .\/spikes\ repository source files.
Added CustomLandingStrip.java to .\/spikes\ repository source files.
Added CustomTabActivity.java to .\/spikes\ repository source files.
Added ExampleRainbowLandingStrip.java to .\/spikes\ repository source files.
Added FixedWidthTabActivity.java to .\/spikes\ repository source files.
Added NoFragmentsSimpleTextTabActivity.java to .\/spikes\ repository source files.
Added Data.java to .\/spikes\ repository source files.
Added DemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added SmallDemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerFragment.java to .\/spikes\ repository source files.
Added DemoViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapterState.java to .\/spikes\ repository source files.
Added SimpleTextTabActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AbTestingParamsLoadedCallback.java to .\/spikes\ repository source files.
Added AyBe.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added WeakStartCallback.java to .\/spikes\ repository source files.
Added LeakActivity.java to .\/spikes\ repository source files.
Added NoLeakActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added Bar.java to .\/spikes\ repository source files.
Added Foo.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added FooTest.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added ColorScheme.java to .\/spikes\ repository source files.
Added ColorUtils.java to .\/spikes\ repository source files.
Added DominantColorCalculator.java to .\/spikes\ repository source files.
Added FloatUtils.java to .\/spikes\ repository source files.
Added MedianCutQuantizer.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added PayPalFragment.java to .\/spikes\ repository source files.
Added PayPalHelper.java to .\/spikes\ repository source files.
Added MaxLengthMessageComposer.java to .\/spikes\ repository source files.
Added MessageComposer.java to .\/spikes\ repository source files.
Added TwitterMessageComposer.java to .\/spikes\ repository source files.
Added DisabledMruPersister.java to .\/spikes\ repository source files.
Added MruPersister.java to .\/spikes\ repository source files.
Added SharedPreferencesMruPersister.java to .\/spikes\ repository source files.
Added OnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added PriorityShareDialog.java to .\/spikes\ repository source files.
Added PrioritySharer.java to .\/spikes\ repository source files.
Added ShareTargetsAdapter.java to .\/spikes\ repository source files.
Added SimpleOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added TargetApps.java to .\/spikes\ repository source files.
Added TwitterOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AdvancedActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SimpleActivity.java to .\/spikes\ repository source files.
Added LockingActivity.java to .\/spikes\ repository source files.
Added PostLockingActivity.java to .\/spikes\ repository source files.
Added PreLockingActivity.java to .\/spikes\ repository source files.
Added DummyAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added NovoStaggeredGridView.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SpikeApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SwipeableView.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MyClass.java to .\/spikes\ repository source files.
Added MyClassTest.java to .\/spikes\ repository source files.
Added MyAndroidClassTest.java to .\/spikes\ repository source files.
Added RobolectricGradleTestRunner.java to .\/spikes\ repository source files.
Added Mapper.java to .\/spikes\ repository source files.
Added Query.java to .\/spikes\ repository source files.
Added TypedResolver.java to .\/spikes\ repository source files.
Added CursorList.java to .\/spikes\ repository source files.
Added CursorListIterator.java to .\/spikes\ repository source files.
Added CursorMarshaller.java to .\/spikes\ repository source files.
Added EmptyListIterator.java to .\/spikes\ repository source files.
Added ReflectionCursorMarshaller.java to .\/spikes\ repository source files.
Added RichClass.java to .\/spikes\ repository source files.
Added Setter.java to .\/spikes\ repository source files.
Added Function.java to .\/spikes\ repository source files.
Added TypedElementLoader.java to .\/spikes\ repository source files.
Added TypedLoader.java to .\/spikes\ repository source files.
Added Marshaller.java to .\/spikes\ repository source files.
Added ObjectMapper.java to .\/spikes\ repository source files.
Added TypedActivity.java to .\/spikes\ repository source files.
Added StringUtil.java to .\/spikes\ repository source files.
Added MyObject.java to .\/spikes\ repository source files.
Added MediaPlayerSwitcherActivity.java to .\/spikes\ repository source files.
Added VideoPlayerService.java to .\/spikes\ repository source files.
Added RelativeLayoutWithForeground.java to .\/spikes\ repository source files.
Added DemoActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added RecognitionService.java to .\/spikes\ repository source files.
Added SessionService.java to .\/spikes\ repository source files.
Added SettingsActivity.java to .\/spikes\ repository source files.
Added SmartContextInteractionService.java to .\/spikes\ repository source files.
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
String[] planetTitles = new String[]{"Earth", "Saturn"};
DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
ListView listView = (ListView) findViewById(R.id.left_drawer);
Intent intent;
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close);
b=getIntent().getExtras()
Bundle b = getIntent().getExtras();
mShouldStartPlayback=b.getBoolean("shouldStart")
boolean mShouldStartPlayback = b.getBoolean("shouldStart");
startPosition=b.getInt("startPosition",0)
int startPosition = b.getInt("startPosition", 0);
currentPos=mVideoView.getCurrentPosition()
int currentPos = mVideoView.getCurrentPosition();
String msg;
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, mDisplaySize.y + getActionBar().getHeight());
mm=mSelectedMedia.getMetadata()
MediaMetadata mm = mSelectedMedia.getMetadata();
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, (int) (mDisplaySize.x * ASPECT_RATIO));
WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
width=display.getWidth()
int width = display.getWidth();
height=display.getHeight()
int height = display.getHeight();
int resourceId = 0;
String videoUrl = "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4#sthash.rJ5rPZy8.dpuf";
String title = "Jahre Philharmonie";
String description = "Awesome film you must watch!";
String author = "Blundell";
String thumbUrl = "http://www.ustream.tv/blog/wp-content/uploads/2013/10/simply-go-live.png";
MediaMetadata metadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE);
mediaInfo=new MediaInfo.Builder(videoUrl).setMetadata(metadata).setStreamType(MediaInfo.STREAM_TYPE_BUFFERED).setContentType("video/mp4").build()
MediaInfo mediaInfo = new MediaInfo.Builder(videoUrl)
                        .setMetadata(metadata)
                        .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)
                        .setContentType("video/mp4")
                        .build();
Intent intent = new Intent(MainActivity.this, LocalPlayerActivity.class);
preferences=getPreferences(MODE_PRIVATE)
SharedPreferences preferences = getPreferences(MODE_PRIVATE);
defaultSmsPackage=Telephony.Sms.getDefaultSmsPackage(this)
String defaultSmsPackage = Telephony.Sms.getDefaultSmsPackage(this);
Intent intent = new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
availableAppProvider=EasyCustomTabs.getInstance()
AvailableAppProvider availableAppProvider = EasyCustomTabs.getInstance();
ConnectedClient connectedClient = new ConnectedClient(client);
binder=Binder.newInstance()
Binder binder = Binder.newInstance();
List<Composer> composerList = new ArrayList<>();
customTabsSession=connection.newSession()
CustomTabsSession customTabsSession = connection.newSession();
CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(customTabsSession);
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
context=EasyCustomTabs.getInstance().getContext()
Context context = EasyCustomTabs.getInstance().getContext();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
packagesSupportingCustomTabs=getPackagesSupportingCustomTabs()
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
defaultPackage=getDefaultPackage()
String defaultPackage = getDefaultPackage();
defaultActivityInfo=packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK,0)
ResolveInfo defaultActivityInfo = packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK, 0);
String packageName = defaultActivityInfo.activityInfo.packageName;
resolvedInfoList=packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK,0)
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<String> packagesSupportingCustomTabs = new ArrayList<>();
Intent serviceIntent = new Intent();
bestPackageFinder=BestPackageFinder.newInstance()
BestPackageFinder bestPackageFinder = BestPackageFinder.newInstance();
packageName=bestPackageFinder.findBestPackage()
String packageName = bestPackageFinder.findBestPackage();
resolveInfo=createResolveInfoFor(packageName)
ResolveInfo resolveInfo = createResolveInfoFor(packageName);
ResolveInfo resolveInfo = new ResolveInfo();
List<ResolveInfo> resolveInfoList = new ArrayList<>();
defaultPackageResolveInfo=createResolveInfoFor(packageName)
ResolveInfo defaultPackageResolveInfo = createResolveInfoFor(packageName);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
oldestApiMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage oldestApiMessage = apiMessages.get(apiMessages.size() - 1);
String lastResponseEpochTime = oldestApiMessage.timeStamp;
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
latestMessage=latestMessages.get(latestMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage latestMessage = latestMessages.get(latestMessages.size() - 1);
latestMessageDateTime=convertToLocalDateTime(latestMessage.timeStamp)
LocalDateTime latestMessageDateTime = convertToLocalDateTime(latestMessage.timeStamp);
List<ChannelHistory.Message> messages = new ArrayList<>();
historyFrom=getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1))
LocalDateTime historyFrom = getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1));
historyTo=getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0))
LocalDateTime historyTo = getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0));
String text = apiMessage.text;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
lastMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage lastMessage = apiMessages.get(apiMessages.size() - 1);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
firstMessage=apiMessages.get(0)
ApiPagedChannelHistory.ApiMessage firstMessage = apiMessages.get(0);
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
String slackToken = args[0];
retrofit=new Retrofit.Builder().baseUrl("https://slack.com/api/").addConverterFactory(GsonConverterFactory.create()).build()
Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://slack.com/api/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();
slackWebService=retrofit.create(SlackWebService.class)
SlackWebService slackWebService = retrofit.create(SlackWebService.class);
slackHistoryFetcher=SlackHistoryFetcher.from(slackWebService,slackToken)
SlackHistoryFetcher slackHistoryFetcher = SlackHistoryFetcher.from(slackWebService, slackToken);
start=LocalDateTime.now()
LocalDateTime start = LocalDateTime.now();
end=LocalDateTime.now().minusDays(7)
LocalDateTime end = LocalDateTime.now().minusDays(7);
channelHistory=slackHistoryFetcher.getChannelHistory(start,end)
ChannelHistory channelHistory = slackHistoryFetcher.getChannelHistory(start, end);
HistoryConverter historyConverter = new HistoryConverter();
ApiPagedResponse apiPagedResponse = new ApiPagedResponse(start);
response=fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime())
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
apiPagedChannelHistory=response.body()
ApiPagedChannelHistory apiPagedChannelHistory = response.body();
channelHistory=slackWebService.getChannelHistory(slackToken,channel,lastResponseEpochTime,NUMBER_OF_RESULTS)
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
ApiPagedChannelHistory apiPagedChannelHistory = new ApiPagedChannelHistory();
ApiPagedChannelHistory.ApiMessage apiMessage = new ApiPagedChannelHistory.ApiMessage();
final TextView textView = new TextView(context);
emptyView=findViewById(R.id.empty_view)
View emptyView = findViewById(R.id.empty_view);
final Integer action = values[0];
LoremAdapter loremAdapter = new LoremAdapter();
accounts=accountManager.getAccountsByType(accountType)
Account[] accounts = accountManager.getAccountsByType(accountType);
Bundle result;
Bundle result;
Bundle result = new Bundle();
activity=createLoginIntent(context,accountType,authTokenType,requiredFeatures,options)
Intent activity = createLoginIntent(context, accountType, authTokenType, requiredFeatures, options);
Bundle bundle = new Bundle();
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
accounts=accountManager.getAccountsByType(authTokenType)
Account[] accounts = accountManager.getAccountsByType(authTokenType);
bundle=createResponseBundle(token)
Bundle bundle = createResponseBundle(token);
accountManager=AccountManager.get(this.getApplicationContext())
AccountManager accountManager = AccountManager.get(this.getApplicationContext());
Account account = new Account(token.getUserName(), getAccountName());
Bundle bundle = new Bundle();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
GertHerbAuthenticator authenticator = new GertHerbAuthenticator(this);
fontId=getFontId(context,attrs)
int fontId = getFontId(context, attrs);
fontType=getFontType(fontId)
FontType fontType = getFontType(fontId);
typedArray=context.obtainStyledAttributes(attrs,R.styleable.CustomTextAppearance)
TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CustomTextAppearance);
typeface=createTypeFace(context,fontType)
Typeface typeface = createTypeFace(context, fontType);
info=context.getApplicationInfo()
ApplicationInfo info = context.getApplicationInfo();
name=activity.getTitle().toString()
String name = activity.getTitle().toString();
client=mServer.accept()
Socket client = mServer.accept();
boolean result;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
BufferedReader in = null;
request=in.readLine()
final String request = in.readLine();
String command;
String parameters;
index=request.indexOf(' ')
int index = request.indexOf(' ');
boolean result;
boolean success = true;
BufferedWriter out = null;
index=parameters.indexOf(' ')
int index = parameters.indexOf(' ');
code=parameters.substring(0,index)
final String code = parameters.substring(0, index);
int hashCode = (int) Long.parseLong(code, 16);
window=findWindow(hashCode)
final View window = findWindow(hashCode);
dispatch=ViewDebug.class.getDeclaredMethod("dispatchCommand",View.class,String.class,String.class,OutputStream.class)
final Method dispatch = ViewDebug.class.getDeclaredMethod("dispatchCommand",
                        View.class, String.class, String.class, OutputStream.class);
View window = null;
boolean result = true;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
boolean result = true;
String focusName = null;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
View focusedWindow = null;
BufferedWriter out = null;
boolean needWindowListUpdate = false;
boolean needFocusedWindowUpdate = false;
BetterAccountManager accountManager = new BetterAccountManager(this, getString(R.string.account_type), getString(R.string.token_type), null);
loginView=Views.findById(this,R.id.login_view)
LoginView loginView = Views.findById(this, R.id.login_view);
authorizationApi=new GithubApiFactory().createAuthorizationApi(credentials.username,credentials.password)
GithubApi authorizationApi = new GithubApiFactory().createAuthorizationApi(credentials.username, credentials.password);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
Endpoint endpoint = new Endpoint() {
            @Override
            public String getUrl() {
                return GITHUB_API_URL;
            }

            @Override
            public String getName() {
                return "Live";
            }
        };
interceptor=createAuthorizationRequestInterceptor(username,password)
RequestInterceptor interceptor = createAuthorizationRequestInterceptor(username, password);
restAdapter=createRestAdapter(endpoint,interceptor)
RestAdapter restAdapter = createRestAdapter(endpoint, interceptor);
Dummy dummy = new Dummy();
result=dummy.explodes()
boolean result = dummy.explodes();
String base64EncodedPublicKey = "CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE";
premiumPurchase=inventory.getPurchase(SKU_PREMIUM)
Purchase premiumPurchase = inventory.getPurchase(SKU_PREMIUM);
infiniteGasPurchase=inventory.getPurchase(SKU_INFINITE_GAS)
Purchase infiniteGasPurchase = inventory.getPurchase(SKU_INFINITE_GAS);
gasPurchase=inventory.getPurchase(SKU_GAS)
Purchase gasPurchase = inventory.getPurchase(SKU_GAS);
String payload = "";
String payload = "";
String payload = "";
payload=p.getDeveloperPayload()
String payload = p.getDeveloperPayload();
int index = mTank >= TANK_RES_IDS.length ? TANK_RES_IDS.length - 1 : mTank;
AlertDialog.Builder bld = new AlertDialog.Builder(this);
spe=getPreferences(MODE_PRIVATE).edit()
SharedPreferences.Editor spe = getPreferences(MODE_PRIVATE).edit();
sp=getPreferences(MODE_PRIVATE)
SharedPreferences sp = getPreferences(MODE_PRIVATE);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                                  + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                    | ((source[d + 1 + off] << 24) >>> 16)
                    | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                    | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                                   "-1002:Bad response received/" +
                                   "-1003:Purchase signature verification failed/" +
                                   "-1004:Send intent failed/" +
                                   "-1005:User cancelled/" +
                                   "-1006:Unknown purchase response/" +
                                   "-1007:Missing token/" +
                                   "-1008:Unknown error/" +
                                   "-1009:Subscriptions not available/" +
                                   "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(),
                    itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                        | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                        | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                            | ((source[d + 1 + off] << 24) >>> 16)
                            | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                            | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                "-1002:Bad response received/" +
                "-1003:Purchase signature verification failed/" +
                "-1004:Send intent failed/" +
                "-1005:User cancelled/" +
                "-1006:Unknown purchase response/" +
                "-1007:Missing token/" +
                "-1008:Unknown error/" +
                "-1009:Subscriptions not available/" +
                "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(), itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
responseCode=result.getResponse()
int responseCode = result.getResponse();
sku=purchase.getSku()
String sku = purchase.getSku();
skuDetails=inv.getSkuDetails(sku)
SkuDetails skuDetails = inv.getSkuDetails(sku);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
Button purchaseFiveButton = (Button) rootView.findViewById(R.id.fragment_main_button_purchase_five_coins);
xml=context.obtainStyledAttributes(attrs,R.styleable.LandingStrip)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.LandingStrip);
tabLayoutId=xml.getResourceId(R.styleable.LandingStrip_tabLayoutId,MISSING_TAB_LAYOUT_ID)
int tabLayoutId = xml.getResourceId(R.styleable.LandingStrip_tabLayoutId, MISSING_TAB_LAYOUT_ID);
indicatorColour=xml.getResourceId(R.styleable.LandingStrip_indicatorColor,DEFAULT_INDICATOR_COLOUR)
int indicatorColour = xml.getResourceId(R.styleable.LandingStrip_indicatorColor, DEFAULT_INDICATOR_COLOUR);
indicatorHeight=getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight,DEFAULT_INDICATOR_HEIGHT,xml)
int indicatorHeight = getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight, DEFAULT_INDICATOR_HEIGHT, xml);
tabsPaddingLeft=getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingLeft = getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding, DEFAULT_TABS_PADDING, xml);
tabsPaddingRight=getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingRight = getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding, DEFAULT_TABS_PADDING, xml);
MutableCoordinates drawCurrentTabCoordinates = new MutableCoordinates();
MutableCoordinates drawNextTabCoordinates = new MutableCoordinates();
MutableCoordinates drawMovingIndicatorCoordinates = new MutableCoordinates();
currentTab=tabsContainer.getTabAt(currentPosition)
View currentTab = tabsContainer.getTabAt(currentPosition);
currentTabStart=currentTab.getLeft()
float currentTabStart = currentTab.getLeft();
currentTabEnd=currentTab.getRight()
float currentTabEnd = currentTab.getRight();
nextTab=tabsContainer.getTabAt(currentPosition + 1)
View nextTab = tabsContainer.getTabAt(currentPosition + 1);
nextTabPositionOffset=getFractionFrom(pagePositionOffset)
float nextTabPositionOffset = getFractionFrom(pagePositionOffset);
indicatorStart=getIndicatorPosition(nextTab.getStart(),pagePositionOffset,currentTab.getStart(),nextTabPositionOffset)
float indicatorStart = getIndicatorPosition(nextTab.getStart(), pagePositionOffset, currentTab.getStart(), nextTabPositionOffset);
indicatorEnd=getIndicatorPosition(nextTab.getEnd(),pagePositionOffset,currentTab.getEnd(),nextTabPositionOffset)
float indicatorEnd = getIndicatorPosition(nextTab.getEnd(), pagePositionOffset, currentTab.getEnd(), nextTabPositionOffset);
height=getHeight()
int height = getHeight();
tabCount=pagerAdapter.getCount()
int tabCount = pagerAdapter.getCount();
title=pagerAdapter.getPageTitle(position)
CharSequence title = pagerAdapter.getPageTitle(position);
inflatedTabView=tabsContainer.inflateTab(layoutInflater,attributes.getTabLayoutId())
View inflatedTabView = tabsContainer.inflateTab(layoutInflater, attributes.getTabLayoutId());
int position = (int) view.getTag(TAG_KEY_POSITION);
scrollOffset=getHorizontalScrollOffset(position,positionOffset)
int scrollOffset = getHorizontalScrollOffset(position, positionOffset);
newScrollX=calculateScrollOffset(position,scrollOffset,positionOffset)
float newScrollX = calculateScrollOffset(position, scrollOffset, positionOffset);
tabWidth=tabsContainer.getTabAt(position).getWidth()
int tabWidth = tabsContainer.getTabAt(position).getWidth();
tabForPosition=tabsContainer.getTabAt(position)
View tabForPosition = tabsContainer.getTabAt(position);
float tabStartX = tabForPosition.getLeft() + scrollOffset;
int viewMiddleOffset = getTabParentWidth() / 2;
float tabCenterOffset = (tabForPosition.getRight() - tabForPosition.getLeft()) * 0.5F;
nextTabDelta=getNextTabDelta(position,pagerOffset,tabForPosition)
float nextTabDelta = getNextTabDelta(position, pagerOffset, tabForPosition);
LinearLayout tabsContainerView = new LinearLayout(context);
tab=getTabAt(index)
View tab = getTabAt(index);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
position=indicatorCoordinates.getStart()
float position = indicatorCoordinates.getStart();
lastTabOffset=((ViewGroup)getChildAt(0)).getChildAt(getChildCount() - 1).getWidth()
float lastTabOffset = ((ViewGroup) getChildAt(0)).getChildAt(getChildCount() - 1).getWidth();
frequency=getOneCycle(lastTabOffset)
float frequency = getOneCycle(lastTabOffset);
r=toHex(calculateColour(position,frequency,PHASE_RED,AMPLITUDE,CENTER_FREQUENCY))
String r = toHex(calculateColour(position, frequency, PHASE_RED, AMPLITUDE, CENTER_FREQUENCY));
g=toHex(calculateColour(position,frequency,PHASE_GREEN,AMPLITUDE,CENTER_FREQUENCY))
String g = toHex(calculateColour(position, frequency, PHASE_GREEN, AMPLITUDE, CENTER_FREQUENCY));
b=toHex(calculateColour(position,frequency,PHASE_BLUE,AMPLITUDE,CENTER_FREQUENCY))
String b = toHex(calculateColour(position, frequency, PHASE_BLUE, AMPLITUDE, CENTER_FREQUENCY));
height=getHeight()
int height = getHeight();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPagerFragment viewPagerFragment = new ViewPagerFragment();
Bundle bundle = new Bundle();
TextView view = (TextView) layoutInflater.inflate(R.layout.view_demo, container, false);
currentPosition=viewPagerAdapterState.getCurrentPosition()
int currentPosition = viewPagerAdapterState.getCurrentPosition();
view=getView(container,position)
View view = getView(container, position);
parcelableSparseArray=viewPagerAdapterState.get(position)
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
View view = (View) object;
SparseArray<Parcelable> viewState = new SparseArray<>();
position=entry.getValue()
int position = entry.getValue();
view=entry.getKey()
View view = entry.getKey();
bundle=in.readBundle()
Bundle bundle = in.readBundle();
Map<Integer, SparseArray<Parcelable>> viewStates = new HashMap<>(bundle.keySet().size());
sparseParcelableArray=bundle.getSparseParcelableArray(key)
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
primaryItemPosition=in.readInt()
int primaryItemPosition = in.readInt();
Bundle bundle = new Bundle();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
final TextView abText = (TextView) findViewById(R.id.ab_text);
final AyBe ayBe = new AyBe();
id=item.getItemId()
int id = item.getItemId();
callback=weakCallback.get()
AbTestingParamsLoadedCallback callback = weakCallback.get();
WeakReference<NoLeakActivity> weakNoLeakActivity = new WeakReference<NoLeakActivity>(noLeakActivity);
noLeakActivity=weakNoLeakActivity.get()
NoLeakActivity noLeakActivity = weakNoLeakActivity.get();
RecyclerView recyclerView = (RecyclerView) layoutInflater.inflate(R.layout.view_page, viewGroup, false);
itemView=layoutInflater.inflate(R.layout.view_item,parent,false)
View itemView = layoutInflater.inflate(R.layout.view_item, parent, false);
actual=foo.twice(HALF)
int actual = foo.twice(HALF);
int expected = WHOLE;
final float inverseRatio = 1f - ratio;
float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRatio);
float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRatio);
float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRatio);
hsv=node.getHsv()
float[] hsv = node.getHsv();
width=bitmap.getWidth()
final int width = bitmap.getWidth();
height=bitmap.getHeight()
final int height = bitmap.getHeight();
final int[] rgbPixels = new int[width * height];
final MedianCutQuantizer mcq = new MedianCutQuantizer(rgbPixels, NUM_COLORS);
primaryAccentColor=findPrimaryAccentColor()
final ColorNode primaryAccentColor = findPrimaryAccentColor();
secondaryAccentColor=findSecondaryAccentColor(primaryAccentColor)
final ColorNode secondaryAccentColor = findSecondaryAccentColor(primaryAccentColor);
tertiaryAccentColor=findTertiaryAccentColor(primaryAccentColor,secondaryAccentColor)
final int tertiaryAccentColor = findTertiaryAccentColor(
                primaryAccentColor, secondaryAccentColor);
primaryTextColor=findPrimaryTextColor(primaryAccentColor)
final int primaryTextColor = findPrimaryTextColor(primaryAccentColor);
secondaryTextColor=findSecondaryTextColor(primaryAccentColor)
final int secondaryTextColor = findSecondaryTextColor(primaryAccentColor);
final float primaryHue = primary.getHsv()[0];
final float candidateHue = candidate.getHsv()[0];
copy=Arrays.copyOf(palette,palette.length)
final MedianCutQuantizer.ColorNode[] copy = Arrays.copyOf(palette, palette.length);
maxCount=palette[0].getCount()
final float maxCount = palette[0].getCount();
lhsWeight=calculateWeight(lhs,maxCount)
final float lhsWeight = calculateWeight(lhs, maxCount);
rhsWeight=calculateWeight(rhs,maxCount)
final float rhsWeight = calculateWeight(rhs, maxCount);
float sum = 0;
float sumWeight = 0;
float value = values[i];
float weight = values[i + 1];
ColorHistogram colorHist = new ColorHistogram(pixels);
K=colorHist.getNumberOfColors()
int K = colorHist.getNumberOfColors();
ColorNode[] rCols = null;
rgb=colorHist.getColor(i)
int rgb = colorHist.getColor(i);
cnt=colorHist.getCount(i)
int cnt = colorHist.getCount(i);
ColorBox initialBox = new ColorBox(0, K - 1, 0);
List<ColorBox> colorSet = new ArrayList<ColorBox>();
int k = 1;
boolean done = false;
nextBox=findBoxToSplit(colorSet)
ColorBox nextBox = findBoxToSplit(colorSet);
newBox=nextBox.splitBox()
ColorBox newBox = nextBox.splitBox();
color=findClosestColor(pixels[i])
ColorNode color = findClosestColor(pixels[i]);
idx=findClosestColorIndex(rgb)
int idx = findClosestColorIndex(rgb);
red=Color.red(rgb)
int red = Color.red(rgb);
grn=Color.green(rgb)
int grn = Color.green(rgb);
blu=Color.blue(rgb)
int blu = Color.blue(rgb);
int minIdx = 0;
int minDistance = Integer.MAX_VALUE;
ColorNode color = quantColors[i];
d2=color.distance2(red,grn,blu)
int d2 = color.distance2(red, grn, blu);
ColorBox boxToSplit = null;
int minLevel = Integer.MAX_VALUE;
n=colorBoxes.size()
int n = colorBoxes.size();
ColorNode[] avgColors = new ColorNode[n];
int i = 0;
int dr = this.red - red;
int dg = this.grn - grn;
int db = this.blu - blu;
ColorNode color = imageColors[i];
int r = color.red;
int g = color.grn;
int b = color.blu;
dim=getLongestColorDimension()
ColorDimension dim = getLongestColorDimension();
med=findMedian(dim)
int med = findMedian(dim);
int nextLevel = level + 1;
ColorBox newBox = new ColorBox(med + 1, upper, nextLevel);
int rLength = rmax - rmin;
int gLength = gmax - gmin;
int bLength = bmax - bmin;
int half = count / 2;
int nPixels, median;
int rSum = 0;
int gSum = 0;
int bSum = 0;
int n = 0;
ColorNode ci = imageColors[i];
int cnt = ci.cnt;
double nd = n;
int avgRed = (int) (0.5 + rSum / nd);
int avgGrn = (int) (0.5 + gSum / nd);
int avgBlu = (int) (0.5 + bSum / nd);
s=this.getClass().getSimpleName()
String s = this.getClass().getSimpleName();
int i = 0;
int N = pixelsOrig.length;
int[] pixelsCpy = new int[N];
int k = -1;
int curColor = -1;
int nColors = k + 1;
id=item.getItemId()
int id = item.getItemId();
Intent intent = new Intent();
bitmap=((BitmapDrawable)imageView.getDrawable()).getBitmap()
Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap();
DominantColorCalculator dominantColorCalculator = new DominantColorCalculator(bitmap);
selectedImageUri=data.getData()
Uri selectedImageUri = data.getData();
selectedImagePath=getPath(selectedImageUri)
String selectedImagePath = getPath(selectedImageUri);
String[] projection = {MediaStore.Images.Media.DATA};
cursor=managedQuery(uri,projection,null,null,null)
Cursor cursor = managedQuery(uri, projection, null, null, null);
column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)
int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
LinearLayout rootView = (LinearLayout) inflater.inflate(R.layout.fragment_main, container, false);
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
preapprovalButton=payPal.getCheckoutButton(getActivity(),PayPal.BUTTON_194x37,CheckoutButton.TEXT_PAY)
CheckoutButton preapprovalButton = payPal.getCheckoutButton(getActivity(), PayPal.BUTTON_194x37, CheckoutButton.TEXT_PAY);
preapprovalIntent=payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY)
Intent preapprovalIntent = payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY);
String resultTitle = "";
String resultInfo = "";
String resultExtra = "";
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
PayPalPreapproval preapproval = new PayPalPreapproval();
preapproval=createPreapproval(preapprovalKey)
PayPalPreapproval preapproval = createPreapproval(preapprovalKey);
Bundle bundle = new Bundle();
int availableLength = maxLength;
StringBuilder stringBuilder = new StringBuilder(maxLength);
prefixAndSuffixLength=computeAppendedLengthIncludingSeparatorSpaces(prefix,suffix)
int prefixAndSuffixLength = computeAppendedLengthIncludingSeparatorSpaces(prefix, suffix);
urlLength=computeUrlLengthIncludingSeparatorSpace(url)
int urlLength = computeUrlLengthIncludingSeparatorSpace(url);
trimmedSubject=ellipsizeTextIfExceedsMaxLength(subject,availableLength)
String trimmedSubject = ellipsizeTextIfExceedsMaxLength(subject, availableLength);
int length = 0;
preferences=context.getSharedPreferences(MRU_PREFERENCES,Context.MODE_PRIVATE)
SharedPreferences preferences = context.getSharedPreferences(MRU_PREFERENCES, Context.MODE_PRIVATE);
args=getArguments()
Bundle args = getArguments();
themeResId=getThemeResIdIfProvidedIn(args)
int themeResId = getThemeResIdIfProvidedIn(args);
title=getTitleIfProvidedIn(args)
CharSequence title = getTitleIfProvidedIn(args);
builder=createDialogBuilder(themeResId).setCancelable(true).setView(dialogView)
AlertDialog.Builder builder = createDialogBuilder(themeResId)
                .setCancelable(true)
                .setView(dialogView);
inflater=getActivity().getLayoutInflater()
LayoutInflater inflater = getActivity().getLayoutInflater();
GridView gridView = (GridView) rootView.findViewById(R.id.ps__dialog_grid);
targetApps=extractTargetAppsFrom(args)
TargetApps targetApps = extractTargetAppsFrom(args);
allShareTargets=getAvailableShareTargets(sharingIntent)
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
priorityAppInfos=createPriorityResolveInfoList(targetApps,allShareTargets)
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
otherAppInfos=createOtherAppsResolveInfoList(priorityAppInfos,allShareTargets)
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
resolveInfos=targetApps.extractTargetResolveInfosFrom(allShareTargets)
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
mruResolveInfo=findMruResolveInfoIn(allShareTargets)
ResolveInfo mruResolveInfo = findMruResolveInfoIn(allShareTargets);
List<ResolveInfo> otherAppsInfos = new ArrayList<ResolveInfo>(allAppInfos);
mruPackageName=persister.getLastUsedTarget()
String mruPackageName = persister.getLastUsedTarget();
String packageName = resolveInfo.activityInfo.packageName;
packageManager=getActivity().getPackageManager()
PackageManager packageManager = getActivity().getPackageManager();
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
View buttonStrip = (View) showMoreButton.getParent();
gridView=getGridView()
GridView gridView = getGridView();
intent=wrapIntentWithExplicitTargetComponentForItem(position,sharingIntent)
Intent intent = wrapIntentWithExplicitTargetComponentForItem(position, sharingIntent);
Intent intent = new Intent(sharingIntent);
ActivityInfo activity = adapter.getItem(position).activityInfo;
ComponentName name = new ComponentName(activity.applicationInfo.packageName, activity.name);
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
PriorityShareDialog dialog = new PriorityShareDialog();
Bundle args = new Bundle();
sharingIntent=createSharingIntent()
Intent sharingIntent = createSharingIntent();
fragmentManager=activity.getFragmentManager()
FragmentManager fragmentManager = activity.getFragmentManager();
Intent intent = new Intent(Intent.ACTION_SEND);
dialog=new PriorityShareDialog.Builder().setTitle(title).setTargetApps(targetApps).setSharingIntent(sharingIntent).setOnPrepareSharingIntentListener(listener).setShowMostRecentlyUsed(showMostRecentlyUsed).build()
PriorityShareDialog dialog = new PriorityShareDialog.Builder()
                .setTitle(title)
                .setTargetApps(targetApps)
                .setSharingIntent(sharingIntent)
                .setOnPrepareSharingIntentListener(listener)
                .setShowMostRecentlyUsed(showMostRecentlyUsed)
                .build();
PrioritySharer prioritySharer = new PrioritySharer();
prioritySharer=build()
PrioritySharer prioritySharer = build();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
layoutInflater=LayoutInflater.from(context)
LayoutInflater layoutInflater = LayoutInflater.from(context);
iconSizePx=getIconSizePx(context.getResources())
int iconSizePx = getIconSizePx(context.getResources());
ArrayList<ResolveInfo> sortedList = new ArrayList<ResolveInfo>(resolveInfoList);
int otherAppsCountMaybe = showAllApps ? otherAppInfos.size() : 0;
firstOtherAppsItemPosition=priorityAppInfos.size()
int firstOtherAppsItemPosition = priorityAppInfos.size();
int offsetPosition = position - firstOtherAppsItemPosition;
TextView textView;
textView=initializeItemViewIfNecessary(convertView,R.layout.ps__grid_item_share,parent)
TextView textView = initializeItemViewIfNecessary(convertView, R.layout.ps__grid_item_share, parent);
info=getItem(position)
ResolveInfo info = getItem(position);
icon=info.loadIcon(packageManager)
Drawable icon = info.loadIcon(packageManager);
arraySize=in.readInt()
int arraySize = in.readInt();
String[] packageNames = new String[arraySize];
arraySize=targetPackages.size()
int arraySize = targetPackages.size();
String[] packagesArray = new String[arraySize];
SparseArray<ResolveInfo> matchedResolveInfos = new SparseArray<ResolveInfo>(targetPackages.size());
String packageName = info.activityInfo.packageName;
index=indexOfItemInto(packageName,targetPackages)
int index = indexOfItemInto(packageName, targetPackages);
sparseArraySize=sparseArray.size()
int sparseArraySize = sparseArray.size();
ArrayList<T> list = new ArrayList<T>(sparseArraySize);
int i = 0;
originalSubject=intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT)
CharSequence originalSubject = intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT);
String subject = originalSubject != null ? originalSubject.toString() : null;
composer=createComposer()
MessageComposer composer = createComposer();
component=intent.getComponent()
ComponentName component = intent.getComponent();
targetPackageName=component.getPackageName()
String targetPackageName = component.getPackageName();
adapter=ArrayAdapter.createFromResource(this,R.array.target_apps,android.R.layout.simple_spinner_item)
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
EditText text = (EditText) findViewById(R.id.text);
EditText title = (EditText) findViewById(R.id.title);
EditText mimeType = (EditText) findViewById(R.id.mime_type);
EditText dataUri = (EditText) findViewById(R.id.data_uri);
Switch showMostRecentlyUsed = (Switch) findViewById(R.id.show_most_recently_used);
uriString=dataUri.getText().toString()
String uriString = dataUri.getText().toString();
EditText text = (EditText) findViewById(R.id.text);
TextView textView = (TextView) convertView.findViewById(R.id.positionView);
colorView=convertView.findViewById(R.id.colorView)
View colorView = convertView.findViewById(R.id.colorView);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
offset=headerPlaceholder.getTop()
int offset = headerPlaceholder.getTop();
Integer item = COLORS[position];
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
firstVisiblePosition=grid.getFirstVisiblePosition()
int firstVisiblePosition = grid.getFirstVisiblePosition();
inflate=getViewForPosition(container,position)
View inflate = getViewForPosition(container, position);
id=item.getItemId()
int id = item.getItemId();
MyActivity activity = new MyActivity();
String manifestProperty = "../app/src/main/AndroidManifest.xml";
String resProperty = "../app/src/main/res";
cursor=resolver.query(uri,projection,selection,selectionArgs,null)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, null);
cursor=resolver.query(uri,projection,selection,selectionArgs,sortOrder)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, sortOrder);
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=richClass.setter(name)
Method setter = richClass.setter(name);
T obj;
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=methodsByName.get(name)
Method setter = methodsByName.get(name);
int type = TYPE_INT;
Class<?> t = setter.getParameterTypes()[0];
Class<?> t = setter.getParameterTypes()[0];
cursorType=cursor.getType(index)
final int cursorType = cursor.getType(index);
final Object obj;
s=f.getAnnotation(Mapper.class)
Mapper s = f.getAnnotation(Mapper.class);
mm=m.getAnnotation(Mapper.class)
Mapper mm = m.getAnnotation(Mapper.class);
methodName=StringUtil.asCamelifySetMethod(what)
String methodName = StringUtil.asCamelifySetMethod(what);
cursor=getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,null,null,null,null)
Cursor cursor = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
now=System.currentTimeMillis()
long now = System.currentTimeMillis();
List<Contact2> typedCursor = new CursorList<Contact2>(cursor, Contact2.class);
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[a-zA-Z0-9]+")
Pattern p = Pattern.compile("[a-zA-Z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[A-Z][a-z0-9]+")
Pattern p = Pattern.compile("[A-Z][a-z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
SurfaceView first = (SurfaceView) findViewById(R.id.firstSurface);
SurfaceView second = (SurfaceView) findViewById(R.id.secondSurface);
Intent pickVideo = new Intent(Intent.ACTION_PICK);
xml=context.obtainStyledAttributes(attrs,R.styleable.RelativeLayoutWithForeground)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.RelativeLayoutWithForeground);
int foregroundResId = INVALID_FOREGROUND_ID;
drawable=getDrawable(getResources(),foregroundResId)
Drawable drawable = getDrawable(getResources(), foregroundResId);
Bundle args = new Bundle();
enroll=mHotwordDetector.createEnrollIntent()
Intent enroll = mHotwordDetector.createEnrollIntent();

Diff of 6d9706b9c60269c9d428d64ef987e9a800f87d74 and 56b97c2a6636e5c3da204423d6e84fd786108db1:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 6
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 6d9706b9c60269c9d428d64ef987e9a800f87d74 to 56b97c2a6636e5c3da204423d6e84fd786108db1

************Analysis complete************
Added generics to repository novoda/spikes = 5

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 6
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null

****Parsing for addition at revision a76c42b912d02373d031c7f8cce82a13957c68c9****

Added ApplicationTest.java to .\/spikes\ repository source files.
Added DrawerActivity.java to .\/spikes\ repository source files.
Added EarthActivity.java to .\/spikes\ repository source files.
Added SaturnActivity.java to .\/spikes\ repository source files.
Added LocalPlayerActivity.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added CastApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ComposeSmsActivity.java to .\/spikes\ repository source files.
Added HeadlessSmsSendService.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MmsReceiver.java to .\/spikes\ repository source files.
Added SmsReceiver.java to .\/spikes\ repository source files.
Added ExtendedDemoActivity.java to .\/spikes\ repository source files.
Added ExtendedDemoApplication.java to .\/spikes\ repository source files.
Added SimpleDemoActivity.java to .\/spikes\ repository source files.
Added SimpleDemoApplication.java to .\/spikes\ repository source files.
Added Binder.java to .\/spikes\ repository source files.
Added ConnectedClient.java to .\/spikes\ repository source files.
Added Connection.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnection.java to .\/spikes\ repository source files.
Added ServiceConnectionCallback.java to .\/spikes\ repository source files.
Added EasyCustomTabs.java to .\/spikes\ repository source files.
Added ActionButtonComposer.java to .\/spikes\ repository source files.
Added CloseButtonIconComposer.java to .\/spikes\ repository source files.
Added Composer.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilder.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigator.java to .\/spikes\ repository source files.
Added EasyCustomTabsWebNavigator.java to .\/spikes\ repository source files.
Added ExitAnimationsComposer.java to .\/spikes\ repository source files.
Added IntentCustomizer.java to .\/spikes\ repository source files.
Added MenuItemComposer.java to .\/spikes\ repository source files.
Added NavigationFallback.java to .\/spikes\ repository source files.
Added Navigator.java to .\/spikes\ repository source files.
Added ShowTitleComposer.java to .\/spikes\ repository source files.
Added StartAnimationsComposer.java to .\/spikes\ repository source files.
Added ToolbarColorComposer.java to .\/spikes\ repository source files.
Added UrlBarHidingComposer.java to .\/spikes\ repository source files.
Added WebNavigator.java to .\/spikes\ repository source files.
Added AvailableAppProvider.java to .\/spikes\ repository source files.
Added BestPackageFinder.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProvider.java to .\/spikes\ repository source files.
Added BinderTest.java to .\/spikes\ repository source files.
Added ConnectedClientTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnectionTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigatorTest.java to .\/spikes\ repository source files.
Added BestPackageFinderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProviderTest.java to .\/spikes\ repository source files.
Added ApiPagedChannelHistory.java to .\/spikes\ repository source files.
Added ApiPagedResponse.java to .\/spikes\ repository source files.
Added ChannelHistory.java to .\/spikes\ repository source files.
Added HistoryConverter.java to .\/spikes\ repository source files.
Added Runner.java to .\/spikes\ repository source files.
Added SlackHistoryFetcher.java to .\/spikes\ repository source files.
Added SlackWebService.java to .\/spikes\ repository source files.
Added ApiPagedResponseTest.java to .\/spikes\ repository source files.
Added MainActivityTest.java to .\/spikes\ repository source files.
Added LoremAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added BetterAccountManager.java to .\/spikes\ repository source files.
Added BetterAuthenticator.java to .\/spikes\ repository source files.
Added BetterAuthenticatorActivity.java to .\/spikes\ repository source files.
Added GertHerbAuthenticator.java to .\/spikes\ repository source files.
Added GertHerbAuthenticatorService.java to .\/spikes\ repository source files.
Added NoAccountException.java to .\/spikes\ repository source files.
Added ReactiveAuthenticatorActivity.java to .\/spikes\ repository source files.
Added Token.java to .\/spikes\ repository source files.
Added GertHerbActivity.java to .\/spikes\ repository source files.
Added GertHerbApplication.java to .\/spikes\ repository source files.
Added GertHerbAuthenticationActivity.java to .\/spikes\ repository source files.
Added TypefaceFactory.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added ViewServer.java to .\/spikes\ repository source files.
Added ViewServerManager.java to .\/spikes\ repository source files.
Added DeveloperError.java to .\/spikes\ repository source files.
Added HomeActivity.java to .\/spikes\ repository source files.
Added LoginActivity.java to .\/spikes\ repository source files.
Added LoginView.java to .\/spikes\ repository source files.
Added UserCredentials.java to .\/spikes\ repository source files.
Added FontButton.java to .\/spikes\ repository source files.
Added FontEditText.java to .\/spikes\ repository source files.
Added FontTextView.java to .\/spikes\ repository source files.
Added GithubApi.java to .\/spikes\ repository source files.
Added GithubApiFactory.java to .\/spikes\ repository source files.
Added TokenRequest.java to .\/spikes\ repository source files.
Added TokenResponse.java to .\/spikes\ repository source files.
Added Dummy.java to .\/spikes\ repository source files.
Added DummyTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MainFragment.java to .\/spikes\ repository source files.
Added Attributes.java to .\/spikes\ repository source files.
Added Coordinates.java to .\/spikes\ repository source files.
Added IndicatorCoordinatesCalculator.java to .\/spikes\ repository source files.
Added LandingStrip.java to .\/spikes\ repository source files.
Added MutableCoordinates.java to .\/spikes\ repository source files.
Added OnPagerAdapterChangedListener.java to .\/spikes\ repository source files.
Added PagerAdapterObserver.java to .\/spikes\ repository source files.
Added Scrollable.java to .\/spikes\ repository source files.
Added ScrollingPageChangeListener.java to .\/spikes\ repository source files.
Added State.java to .\/spikes\ repository source files.
Added TabsContainer.java to .\/spikes\ repository source files.
Added CustomLandingStrip.java to .\/spikes\ repository source files.
Added CustomTabActivity.java to .\/spikes\ repository source files.
Added ExampleRainbowLandingStrip.java to .\/spikes\ repository source files.
Added FixedWidthTabActivity.java to .\/spikes\ repository source files.
Added NoFragmentsSimpleTextTabActivity.java to .\/spikes\ repository source files.
Added Data.java to .\/spikes\ repository source files.
Added DemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added SmallDemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerFragment.java to .\/spikes\ repository source files.
Added DemoViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapterState.java to .\/spikes\ repository source files.
Added SimpleTextTabActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AbTestingParamsLoadedCallback.java to .\/spikes\ repository source files.
Added AyBe.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added WeakStartCallback.java to .\/spikes\ repository source files.
Added LeakActivity.java to .\/spikes\ repository source files.
Added NoLeakActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added Bar.java to .\/spikes\ repository source files.
Added Foo.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added FooTest.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added ColorScheme.java to .\/spikes\ repository source files.
Added ColorUtils.java to .\/spikes\ repository source files.
Added DominantColorCalculator.java to .\/spikes\ repository source files.
Added FloatUtils.java to .\/spikes\ repository source files.
Added MedianCutQuantizer.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added PayPalFragment.java to .\/spikes\ repository source files.
Added PayPalHelper.java to .\/spikes\ repository source files.
Added MaxLengthMessageComposer.java to .\/spikes\ repository source files.
Added MessageComposer.java to .\/spikes\ repository source files.
Added TwitterMessageComposer.java to .\/spikes\ repository source files.
Added DisabledMruPersister.java to .\/spikes\ repository source files.
Added MruPersister.java to .\/spikes\ repository source files.
Added SharedPreferencesMruPersister.java to .\/spikes\ repository source files.
Added OnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added PriorityShareDialog.java to .\/spikes\ repository source files.
Added PrioritySharer.java to .\/spikes\ repository source files.
Added ShareTargetsAdapter.java to .\/spikes\ repository source files.
Added SimpleOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added TargetApps.java to .\/spikes\ repository source files.
Added TwitterOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AdvancedActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SimpleActivity.java to .\/spikes\ repository source files.
Added LockingActivity.java to .\/spikes\ repository source files.
Added PostLockingActivity.java to .\/spikes\ repository source files.
Added PreLockingActivity.java to .\/spikes\ repository source files.
Added DummyAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added NovoStaggeredGridView.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SpikeApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SwipeableView.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MyClass.java to .\/spikes\ repository source files.
Added MyClassTest.java to .\/spikes\ repository source files.
Added MyAndroidClassTest.java to .\/spikes\ repository source files.
Added RobolectricGradleTestRunner.java to .\/spikes\ repository source files.
Added Mapper.java to .\/spikes\ repository source files.
Added Query.java to .\/spikes\ repository source files.
Added TypedResolver.java to .\/spikes\ repository source files.
Added CursorList.java to .\/spikes\ repository source files.
Added CursorListIterator.java to .\/spikes\ repository source files.
Added CursorMarshaller.java to .\/spikes\ repository source files.
Added EmptyListIterator.java to .\/spikes\ repository source files.
Added ReflectionCursorMarshaller.java to .\/spikes\ repository source files.
Added RichClass.java to .\/spikes\ repository source files.
Added Setter.java to .\/spikes\ repository source files.
Added Function.java to .\/spikes\ repository source files.
Added TypedElementLoader.java to .\/spikes\ repository source files.
Added TypedLoader.java to .\/spikes\ repository source files.
Added Marshaller.java to .\/spikes\ repository source files.
Added ObjectMapper.java to .\/spikes\ repository source files.
Added TypedActivity.java to .\/spikes\ repository source files.
Added StringUtil.java to .\/spikes\ repository source files.
Added MyObject.java to .\/spikes\ repository source files.
Added MediaPlayerSwitcherActivity.java to .\/spikes\ repository source files.
Added VideoPlayerService.java to .\/spikes\ repository source files.
Added RelativeLayoutWithForeground.java to .\/spikes\ repository source files.
Added DemoActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added RecognitionService.java to .\/spikes\ repository source files.
Added SessionService.java to .\/spikes\ repository source files.
Added SettingsActivity.java to .\/spikes\ repository source files.
Added SmartContextInteractionService.java to .\/spikes\ repository source files.

 Generics pattern public class ApplicationTest was added at revision a76c42b912d02373d031c7f8cce82a13957c68c9

ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
String[] planetTitles = new String[]{"Earth", "Saturn"};
DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
ListView drawerList = (ListView) findViewById(R.id.left_drawer);
Intent intent;
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close);
b=getIntent().getExtras()
Bundle b = getIntent().getExtras();
mShouldStartPlayback=b.getBoolean("shouldStart")
boolean mShouldStartPlayback = b.getBoolean("shouldStart");
startPosition=b.getInt("startPosition",0)
int startPosition = b.getInt("startPosition", 0);
currentPos=mVideoView.getCurrentPosition()
int currentPos = mVideoView.getCurrentPosition();
String msg;
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, mDisplaySize.y + getActionBar().getHeight());
mm=mSelectedMedia.getMetadata()
MediaMetadata mm = mSelectedMedia.getMetadata();
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, (int) (mDisplaySize.x * ASPECT_RATIO));
WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
width=display.getWidth()
int width = display.getWidth();
height=display.getHeight()
int height = display.getHeight();
int resourceId = 0;
String videoUrl = "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4#sthash.rJ5rPZy8.dpuf";
String title = "Jahre Philharmonie";
String description = "Awesome film you must watch!";
String author = "Blundell";
String thumbUrl = "http://www.ustream.tv/blog/wp-content/uploads/2013/10/simply-go-live.png";
MediaMetadata metadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE);
mediaInfo=new MediaInfo.Builder(videoUrl).setMetadata(metadata).setStreamType(MediaInfo.STREAM_TYPE_BUFFERED).setContentType("video/mp4").build()
MediaInfo mediaInfo = new MediaInfo.Builder(videoUrl)
                        .setMetadata(metadata)
                        .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)
                        .setContentType("video/mp4")
                        .build();
Intent intent = new Intent(MainActivity.this, LocalPlayerActivity.class);

 Generics pattern public class MainActivity was added at revision a76c42b912d02373d031c7f8cce82a13957c68c9

preferences=getPreferences(MODE_PRIVATE)
SharedPreferences preferences = getPreferences(MODE_PRIVATE);
defaultSmsPackage=Telephony.Sms.getDefaultSmsPackage(this)
String defaultSmsPackage = Telephony.Sms.getDefaultSmsPackage(this);
Intent intent = new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);

 Generics pattern public class MainActivity was added at revision a76c42b912d02373d031c7f8cce82a13957c68c9

intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
availableAppProvider=EasyCustomTabs.getInstance()
AvailableAppProvider availableAppProvider = EasyCustomTabs.getInstance();
ConnectedClient connectedClient = new ConnectedClient(client);
binder=Binder.newInstance()
Binder binder = Binder.newInstance();
List<Composer> composerList = new ArrayList<>();
customTabsSession=connection.newSession()
CustomTabsSession customTabsSession = connection.newSession();
CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(customTabsSession);
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
context=EasyCustomTabs.getInstance().getContext()
Context context = EasyCustomTabs.getInstance().getContext();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
packagesSupportingCustomTabs=getPackagesSupportingCustomTabs()
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
defaultPackage=getDefaultPackage()
String defaultPackage = getDefaultPackage();
defaultActivityInfo=packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK,0)
ResolveInfo defaultActivityInfo = packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK, 0);
String packageName = defaultActivityInfo.activityInfo.packageName;
resolvedInfoList=packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK,0)
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<String> packagesSupportingCustomTabs = new ArrayList<>();
Intent serviceIntent = new Intent();
bestPackageFinder=BestPackageFinder.newInstance()
BestPackageFinder bestPackageFinder = BestPackageFinder.newInstance();
packageName=bestPackageFinder.findBestPackage()
String packageName = bestPackageFinder.findBestPackage();
resolveInfo=createResolveInfoFor(packageName)
ResolveInfo resolveInfo = createResolveInfoFor(packageName);
ResolveInfo resolveInfo = new ResolveInfo();
List<ResolveInfo> resolveInfoList = new ArrayList<>();
defaultPackageResolveInfo=createResolveInfoFor(packageName)
ResolveInfo defaultPackageResolveInfo = createResolveInfoFor(packageName);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
oldestApiMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage oldestApiMessage = apiMessages.get(apiMessages.size() - 1);
String lastResponseEpochTime = oldestApiMessage.timeStamp;
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
latestMessage=latestMessages.get(latestMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage latestMessage = latestMessages.get(latestMessages.size() - 1);
latestMessageDateTime=convertToLocalDateTime(latestMessage.timeStamp)
LocalDateTime latestMessageDateTime = convertToLocalDateTime(latestMessage.timeStamp);
List<ChannelHistory.Message> messages = new ArrayList<>();
historyFrom=getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1))
LocalDateTime historyFrom = getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1));
historyTo=getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0))
LocalDateTime historyTo = getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0));
String text = apiMessage.text;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
lastMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage lastMessage = apiMessages.get(apiMessages.size() - 1);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
firstMessage=apiMessages.get(0)
ApiPagedChannelHistory.ApiMessage firstMessage = apiMessages.get(0);
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
String slackToken = args[0];
retrofit=new Retrofit.Builder().baseUrl("https://slack.com/api/").addConverterFactory(GsonConverterFactory.create()).build()
Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://slack.com/api/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();
slackWebService=retrofit.create(SlackWebService.class)
SlackWebService slackWebService = retrofit.create(SlackWebService.class);
slackHistoryFetcher=SlackHistoryFetcher.from(slackWebService,slackToken)
SlackHistoryFetcher slackHistoryFetcher = SlackHistoryFetcher.from(slackWebService, slackToken);
start=LocalDateTime.now()
LocalDateTime start = LocalDateTime.now();
end=LocalDateTime.now().minusDays(7)
LocalDateTime end = LocalDateTime.now().minusDays(7);
channelHistory=slackHistoryFetcher.getChannelHistory(start,end)
ChannelHistory channelHistory = slackHistoryFetcher.getChannelHistory(start, end);
HistoryConverter historyConverter = new HistoryConverter();
ApiPagedResponse apiPagedResponse = new ApiPagedResponse(start);
response=fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime())
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
apiPagedChannelHistory=response.body()
ApiPagedChannelHistory apiPagedChannelHistory = response.body();
channelHistory=slackWebService.getChannelHistory(slackToken,channel,lastResponseEpochTime,NUMBER_OF_RESULTS)
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
ApiPagedChannelHistory apiPagedChannelHistory = new ApiPagedChannelHistory();
ApiPagedChannelHistory.ApiMessage apiMessage = new ApiPagedChannelHistory.ApiMessage();
final TextView textView = new TextView(context);
emptyView=findViewById(R.id.empty_view)
View emptyView = findViewById(R.id.empty_view);
final Integer action = values[0];
LoremAdapter loremAdapter = new LoremAdapter();

 Generics pattern public class MainActivity was added at revision a76c42b912d02373d031c7f8cce82a13957c68c9

accounts=accountManager.getAccountsByType(accountType)
Account[] accounts = accountManager.getAccountsByType(accountType);
Bundle result;
Bundle result;
Bundle result = new Bundle();
activity=createLoginIntent(context,accountType,authTokenType,requiredFeatures,options)
Intent activity = createLoginIntent(context, accountType, authTokenType, requiredFeatures, options);
Bundle bundle = new Bundle();
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
accounts=accountManager.getAccountsByType(authTokenType)
Account[] accounts = accountManager.getAccountsByType(authTokenType);
bundle=createResponseBundle(token)
Bundle bundle = createResponseBundle(token);
accountManager=AccountManager.get(this.getApplicationContext())
AccountManager accountManager = AccountManager.get(this.getApplicationContext());
Account account = new Account(token.getUserName(), getAccountName());
Bundle bundle = new Bundle();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
GertHerbAuthenticator authenticator = new GertHerbAuthenticator(this);
fontId=getFontId(context,attrs)
int fontId = getFontId(context, attrs);
fontType=getFontType(fontId)
FontType fontType = getFontType(fontId);
typedArray=context.obtainStyledAttributes(attrs,R.styleable.CustomTextAppearance)
TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CustomTextAppearance);
typeface=createTypeFace(context,fontType)
Typeface typeface = createTypeFace(context, fontType);
info=context.getApplicationInfo()
ApplicationInfo info = context.getApplicationInfo();
name=activity.getTitle().toString()
String name = activity.getTitle().toString();
client=mServer.accept()
Socket client = mServer.accept();
boolean result;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
BufferedReader in = null;
request=in.readLine()
final String request = in.readLine();
String command;
String parameters;
index=request.indexOf(' ')
int index = request.indexOf(' ');
boolean result;
boolean success = true;
BufferedWriter out = null;
index=parameters.indexOf(' ')
int index = parameters.indexOf(' ');
code=parameters.substring(0,index)
final String code = parameters.substring(0, index);
int hashCode = (int) Long.parseLong(code, 16);
window=findWindow(hashCode)
final View window = findWindow(hashCode);
dispatch=ViewDebug.class.getDeclaredMethod("dispatchCommand",View.class,String.class,String.class,OutputStream.class)
final Method dispatch = ViewDebug.class.getDeclaredMethod("dispatchCommand",
                        View.class, String.class, String.class, OutputStream.class);
View window = null;
boolean result = true;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
boolean result = true;
String focusName = null;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
View focusedWindow = null;
BufferedWriter out = null;
boolean needWindowListUpdate = false;
boolean needFocusedWindowUpdate = false;
BetterAccountManager accountManager = new BetterAccountManager(this, getString(R.string.account_type), getString(R.string.token_type), null);
loginView=Views.findById(this,R.id.login_view)
LoginView loginView = Views.findById(this, R.id.login_view);
authorizationApi=new GithubApiFactory().createAuthorizationApi(credentials.username,credentials.password)
GithubApi authorizationApi = new GithubApiFactory().createAuthorizationApi(credentials.username, credentials.password);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
Endpoint endpoint = new Endpoint() {
            @Override
            public String getUrl() {
                return GITHUB_API_URL;
            }

            @Override
            public String getName() {
                return "Live";
            }
        };
interceptor=createAuthorizationRequestInterceptor(username,password)
RequestInterceptor interceptor = createAuthorizationRequestInterceptor(username, password);
restAdapter=createRestAdapter(endpoint,interceptor)
RestAdapter restAdapter = createRestAdapter(endpoint, interceptor);
Dummy dummy = new Dummy();
result=dummy.explodes()
boolean result = dummy.explodes();
String base64EncodedPublicKey = "CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE";
premiumPurchase=inventory.getPurchase(SKU_PREMIUM)
Purchase premiumPurchase = inventory.getPurchase(SKU_PREMIUM);
infiniteGasPurchase=inventory.getPurchase(SKU_INFINITE_GAS)
Purchase infiniteGasPurchase = inventory.getPurchase(SKU_INFINITE_GAS);
gasPurchase=inventory.getPurchase(SKU_GAS)
Purchase gasPurchase = inventory.getPurchase(SKU_GAS);
String payload = "";
String payload = "";
String payload = "";
payload=p.getDeveloperPayload()
String payload = p.getDeveloperPayload();
int index = mTank >= TANK_RES_IDS.length ? TANK_RES_IDS.length - 1 : mTank;
AlertDialog.Builder bld = new AlertDialog.Builder(this);
spe=getPreferences(MODE_PRIVATE).edit()
SharedPreferences.Editor spe = getPreferences(MODE_PRIVATE).edit();
sp=getPreferences(MODE_PRIVATE)
SharedPreferences sp = getPreferences(MODE_PRIVATE);

 Generics pattern public class MainActivity was added at revision a76c42b912d02373d031c7f8cce82a13957c68c9

int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                                  + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                    | ((source[d + 1 + off] << 24) >>> 16)
                    | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                    | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                                   "-1002:Bad response received/" +
                                   "-1003:Purchase signature verification failed/" +
                                   "-1004:Send intent failed/" +
                                   "-1005:User cancelled/" +
                                   "-1006:Unknown purchase response/" +
                                   "-1007:Missing token/" +
                                   "-1008:Unknown error/" +
                                   "-1009:Subscriptions not available/" +
                                   "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(),
                    itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                        | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                        | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                            | ((source[d + 1 + off] << 24) >>> 16)
                            | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                            | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                "-1002:Bad response received/" +
                "-1003:Purchase signature verification failed/" +
                "-1004:Send intent failed/" +
                "-1005:User cancelled/" +
                "-1006:Unknown purchase response/" +
                "-1007:Missing token/" +
                "-1008:Unknown error/" +
                "-1009:Subscriptions not available/" +
                "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(), itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);

 Generics pattern public class MainActivity was added at revision a76c42b912d02373d031c7f8cce82a13957c68c9

responseCode=result.getResponse()
int responseCode = result.getResponse();
sku=purchase.getSku()
String sku = purchase.getSku();
skuDetails=inv.getSkuDetails(sku)
SkuDetails skuDetails = inv.getSkuDetails(sku);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
Button purchaseFiveButton = (Button) rootView.findViewById(R.id.fragment_main_button_purchase_five_coins);
xml=context.obtainStyledAttributes(attrs,R.styleable.LandingStrip)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.LandingStrip);
tabLayoutId=xml.getResourceId(R.styleable.LandingStrip_tabLayoutId,MISSING_TAB_LAYOUT_ID)
int tabLayoutId = xml.getResourceId(R.styleable.LandingStrip_tabLayoutId, MISSING_TAB_LAYOUT_ID);
indicatorColour=xml.getResourceId(R.styleable.LandingStrip_indicatorColor,DEFAULT_INDICATOR_COLOUR)
int indicatorColour = xml.getResourceId(R.styleable.LandingStrip_indicatorColor, DEFAULT_INDICATOR_COLOUR);
indicatorHeight=getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight,DEFAULT_INDICATOR_HEIGHT,xml)
int indicatorHeight = getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight, DEFAULT_INDICATOR_HEIGHT, xml);
tabsPaddingLeft=getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingLeft = getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding, DEFAULT_TABS_PADDING, xml);
tabsPaddingRight=getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingRight = getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding, DEFAULT_TABS_PADDING, xml);
MutableCoordinates drawCurrentTabCoordinates = new MutableCoordinates();
MutableCoordinates drawNextTabCoordinates = new MutableCoordinates();
MutableCoordinates drawMovingIndicatorCoordinates = new MutableCoordinates();
currentTab=tabsContainer.getTabAt(currentPosition)
View currentTab = tabsContainer.getTabAt(currentPosition);
currentTabStart=currentTab.getLeft()
float currentTabStart = currentTab.getLeft();
currentTabEnd=currentTab.getRight()
float currentTabEnd = currentTab.getRight();
nextTab=tabsContainer.getTabAt(currentPosition + 1)
View nextTab = tabsContainer.getTabAt(currentPosition + 1);
nextTabPositionOffset=getFractionFrom(pagePositionOffset)
float nextTabPositionOffset = getFractionFrom(pagePositionOffset);
indicatorStart=getIndicatorPosition(nextTab.getStart(),pagePositionOffset,currentTab.getStart(),nextTabPositionOffset)
float indicatorStart = getIndicatorPosition(nextTab.getStart(), pagePositionOffset, currentTab.getStart(), nextTabPositionOffset);
indicatorEnd=getIndicatorPosition(nextTab.getEnd(),pagePositionOffset,currentTab.getEnd(),nextTabPositionOffset)
float indicatorEnd = getIndicatorPosition(nextTab.getEnd(), pagePositionOffset, currentTab.getEnd(), nextTabPositionOffset);
height=getHeight()
int height = getHeight();
tabCount=pagerAdapter.getCount()
int tabCount = pagerAdapter.getCount();
title=pagerAdapter.getPageTitle(position)
CharSequence title = pagerAdapter.getPageTitle(position);
inflatedTabView=tabsContainer.inflateTab(layoutInflater,attributes.getTabLayoutId())
View inflatedTabView = tabsContainer.inflateTab(layoutInflater, attributes.getTabLayoutId());
int position = (int) view.getTag(TAG_KEY_POSITION);
scrollOffset=getHorizontalScrollOffset(position,positionOffset)
int scrollOffset = getHorizontalScrollOffset(position, positionOffset);
newScrollX=calculateScrollOffset(position,scrollOffset,positionOffset)
float newScrollX = calculateScrollOffset(position, scrollOffset, positionOffset);
tabWidth=tabsContainer.getTabAt(position).getWidth()
int tabWidth = tabsContainer.getTabAt(position).getWidth();
tabForPosition=tabsContainer.getTabAt(position)
View tabForPosition = tabsContainer.getTabAt(position);
float tabStartX = tabForPosition.getLeft() + scrollOffset;
int viewMiddleOffset = getTabParentWidth() / 2;
float tabCenterOffset = (tabForPosition.getRight() - tabForPosition.getLeft()) * 0.5F;
nextTabDelta=getNextTabDelta(position,pagerOffset,tabForPosition)
float nextTabDelta = getNextTabDelta(position, pagerOffset, tabForPosition);
LinearLayout tabsContainerView = new LinearLayout(context);
tab=getTabAt(index)
View tab = getTabAt(index);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
position=indicatorCoordinates.getStart()
float position = indicatorCoordinates.getStart();
lastTabOffset=((ViewGroup)getChildAt(0)).getChildAt(getChildCount() - 1).getWidth()
float lastTabOffset = ((ViewGroup) getChildAt(0)).getChildAt(getChildCount() - 1).getWidth();
frequency=getOneCycle(lastTabOffset)
float frequency = getOneCycle(lastTabOffset);
r=toHex(calculateColour(position,frequency,PHASE_RED,AMPLITUDE,CENTER_FREQUENCY))
String r = toHex(calculateColour(position, frequency, PHASE_RED, AMPLITUDE, CENTER_FREQUENCY));
g=toHex(calculateColour(position,frequency,PHASE_GREEN,AMPLITUDE,CENTER_FREQUENCY))
String g = toHex(calculateColour(position, frequency, PHASE_GREEN, AMPLITUDE, CENTER_FREQUENCY));
b=toHex(calculateColour(position,frequency,PHASE_BLUE,AMPLITUDE,CENTER_FREQUENCY))
String b = toHex(calculateColour(position, frequency, PHASE_BLUE, AMPLITUDE, CENTER_FREQUENCY));
height=getHeight()
int height = getHeight();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);

 Generics pattern public class FixedWidthTabActivity was added at revision a76c42b912d02373d031c7f8cce82a13957c68c9

ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);

 Generics pattern public class SmallDemoFragmentPagerAdapter was added at revision a76c42b912d02373d031c7f8cce82a13957c68c9

ViewPagerFragment viewPagerFragment = new ViewPagerFragment();
Bundle bundle = new Bundle();
TextView view = (TextView) layoutInflater.inflate(R.layout.view_demo, container, false);
currentPosition=viewPagerAdapterState.getCurrentPosition()
int currentPosition = viewPagerAdapterState.getCurrentPosition();
view=getView(container,position)
View view = getView(container, position);
parcelableSparseArray=viewPagerAdapterState.get(position)
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
View view = (View) object;
SparseArray<Parcelable> viewState = new SparseArray<>();
position=entry.getValue()
int position = entry.getValue();
view=entry.getKey()
View view = entry.getKey();
bundle=in.readBundle()
Bundle bundle = in.readBundle();
Map<Integer, SparseArray<Parcelable>> viewStates = new HashMap<>(bundle.keySet().size());
sparseParcelableArray=bundle.getSparseParcelableArray(key)
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
primaryItemPosition=in.readInt()
int primaryItemPosition = in.readInt();
Bundle bundle = new Bundle();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);

 Generics pattern public class ApplicationTest was added at revision a76c42b912d02373d031c7f8cce82a13957c68c9

final TextView abText = (TextView) findViewById(R.id.ab_text);
final AyBe ayBe = new AyBe();
id=item.getItemId()
int id = item.getItemId();

 Generics pattern public class MainActivity was added at revision a76c42b912d02373d031c7f8cce82a13957c68c9

callback=weakCallback.get()
AbTestingParamsLoadedCallback callback = weakCallback.get();
WeakReference<NoLeakActivity> weakNoLeakActivity = new WeakReference<NoLeakActivity>(noLeakActivity);
noLeakActivity=weakNoLeakActivity.get()
NoLeakActivity noLeakActivity = weakNoLeakActivity.get();

 Generics pattern public class ApplicationTest was added at revision a76c42b912d02373d031c7f8cce82a13957c68c9

RecyclerView recyclerView = (RecyclerView) layoutInflater.inflate(R.layout.view_page, viewGroup, false);
itemView=layoutInflater.inflate(R.layout.view_item,parent,false)
View itemView = layoutInflater.inflate(R.layout.view_item, parent, false);
actual=foo.twice(HALF)
int actual = foo.twice(HALF);
int expected = WHOLE;

 Generics pattern public class ApplicationTest was added at revision a76c42b912d02373d031c7f8cce82a13957c68c9

final float inverseRatio = 1f - ratio;
float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRatio);
float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRatio);
float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRatio);
hsv=node.getHsv()
float[] hsv = node.getHsv();
width=bitmap.getWidth()
final int width = bitmap.getWidth();
height=bitmap.getHeight()
final int height = bitmap.getHeight();
final int[] rgbPixels = new int[width * height];
final MedianCutQuantizer mcq = new MedianCutQuantizer(rgbPixels, NUM_COLORS);
primaryAccentColor=findPrimaryAccentColor()
final ColorNode primaryAccentColor = findPrimaryAccentColor();
secondaryAccentColor=findSecondaryAccentColor(primaryAccentColor)
final ColorNode secondaryAccentColor = findSecondaryAccentColor(primaryAccentColor);
tertiaryAccentColor=findTertiaryAccentColor(primaryAccentColor,secondaryAccentColor)
final int tertiaryAccentColor = findTertiaryAccentColor(
                primaryAccentColor, secondaryAccentColor);
primaryTextColor=findPrimaryTextColor(primaryAccentColor)
final int primaryTextColor = findPrimaryTextColor(primaryAccentColor);
secondaryTextColor=findSecondaryTextColor(primaryAccentColor)
final int secondaryTextColor = findSecondaryTextColor(primaryAccentColor);
final float primaryHue = primary.getHsv()[0];
final float candidateHue = candidate.getHsv()[0];
copy=Arrays.copyOf(palette,palette.length)
final MedianCutQuantizer.ColorNode[] copy = Arrays.copyOf(palette, palette.length);
maxCount=palette[0].getCount()
final float maxCount = palette[0].getCount();
lhsWeight=calculateWeight(lhs,maxCount)
final float lhsWeight = calculateWeight(lhs, maxCount);
rhsWeight=calculateWeight(rhs,maxCount)
final float rhsWeight = calculateWeight(rhs, maxCount);
float sum = 0;
float sumWeight = 0;
float value = values[i];
float weight = values[i + 1];
ColorHistogram colorHist = new ColorHistogram(pixels);
K=colorHist.getNumberOfColors()
int K = colorHist.getNumberOfColors();
ColorNode[] rCols = null;
rgb=colorHist.getColor(i)
int rgb = colorHist.getColor(i);
cnt=colorHist.getCount(i)
int cnt = colorHist.getCount(i);
ColorBox initialBox = new ColorBox(0, K - 1, 0);
List<ColorBox> colorSet = new ArrayList<ColorBox>();
int k = 1;
boolean done = false;
nextBox=findBoxToSplit(colorSet)
ColorBox nextBox = findBoxToSplit(colorSet);
newBox=nextBox.splitBox()
ColorBox newBox = nextBox.splitBox();
color=findClosestColor(pixels[i])
ColorNode color = findClosestColor(pixels[i]);
idx=findClosestColorIndex(rgb)
int idx = findClosestColorIndex(rgb);
red=Color.red(rgb)
int red = Color.red(rgb);
grn=Color.green(rgb)
int grn = Color.green(rgb);
blu=Color.blue(rgb)
int blu = Color.blue(rgb);
int minIdx = 0;
int minDistance = Integer.MAX_VALUE;
ColorNode color = quantColors[i];
d2=color.distance2(red,grn,blu)
int d2 = color.distance2(red, grn, blu);
ColorBox boxToSplit = null;
int minLevel = Integer.MAX_VALUE;
n=colorBoxes.size()
int n = colorBoxes.size();
ColorNode[] avgColors = new ColorNode[n];
int i = 0;
int dr = this.red - red;
int dg = this.grn - grn;
int db = this.blu - blu;
ColorNode color = imageColors[i];
int r = color.red;
int g = color.grn;
int b = color.blu;
dim=getLongestColorDimension()
ColorDimension dim = getLongestColorDimension();
med=findMedian(dim)
int med = findMedian(dim);
int nextLevel = level + 1;
ColorBox newBox = new ColorBox(med + 1, upper, nextLevel);
int rLength = rmax - rmin;
int gLength = gmax - gmin;
int bLength = bmax - bmin;
int half = count / 2;
int nPixels, median;
int rSum = 0;
int gSum = 0;
int bSum = 0;
int n = 0;
ColorNode ci = imageColors[i];
int cnt = ci.cnt;
double nd = n;
int avgRed = (int) (0.5 + rSum / nd);
int avgGrn = (int) (0.5 + gSum / nd);
int avgBlu = (int) (0.5 + bSum / nd);
s=this.getClass().getSimpleName()
String s = this.getClass().getSimpleName();
int i = 0;
int N = pixelsOrig.length;
int[] pixelsCpy = new int[N];
int k = -1;
int curColor = -1;
int nColors = k + 1;
id=item.getItemId()
int id = item.getItemId();
Intent intent = new Intent();
bitmap=((BitmapDrawable)imageView.getDrawable()).getBitmap()
Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap();
DominantColorCalculator dominantColorCalculator = new DominantColorCalculator(bitmap);
selectedImageUri=data.getData()
Uri selectedImageUri = data.getData();
selectedImagePath=getPath(selectedImageUri)
String selectedImagePath = getPath(selectedImageUri);
String[] projection = {MediaStore.Images.Media.DATA};
cursor=managedQuery(uri,projection,null,null,null)
Cursor cursor = managedQuery(uri, projection, null, null, null);
column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)
int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);

 Generics pattern public class MainActivity was added at revision a76c42b912d02373d031c7f8cce82a13957c68c9

LinearLayout rootView = (LinearLayout) inflater.inflate(R.layout.fragment_main, container, false);
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
preapprovalButton=payPal.getCheckoutButton(getActivity(),PayPal.BUTTON_194x37,CheckoutButton.TEXT_PAY)
CheckoutButton preapprovalButton = payPal.getCheckoutButton(getActivity(), PayPal.BUTTON_194x37, CheckoutButton.TEXT_PAY);
preapprovalIntent=payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY)
Intent preapprovalIntent = payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY);
String resultTitle = "";
String resultInfo = "";
String resultExtra = "";
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
PayPalPreapproval preapproval = new PayPalPreapproval();
preapproval=createPreapproval(preapprovalKey)
PayPalPreapproval preapproval = createPreapproval(preapprovalKey);
Bundle bundle = new Bundle();
int availableLength = maxLength;
StringBuilder stringBuilder = new StringBuilder(maxLength);
prefixAndSuffixLength=computeAppendedLengthIncludingSeparatorSpaces(prefix,suffix)
int prefixAndSuffixLength = computeAppendedLengthIncludingSeparatorSpaces(prefix, suffix);
urlLength=computeUrlLengthIncludingSeparatorSpace(url)
int urlLength = computeUrlLengthIncludingSeparatorSpace(url);
trimmedSubject=ellipsizeTextIfExceedsMaxLength(subject,availableLength)
String trimmedSubject = ellipsizeTextIfExceedsMaxLength(subject, availableLength);
int length = 0;
preferences=context.getSharedPreferences(MRU_PREFERENCES,Context.MODE_PRIVATE)
SharedPreferences preferences = context.getSharedPreferences(MRU_PREFERENCES, Context.MODE_PRIVATE);
args=getArguments()
Bundle args = getArguments();
themeResId=getThemeResIdIfProvidedIn(args)
int themeResId = getThemeResIdIfProvidedIn(args);
title=getTitleIfProvidedIn(args)
CharSequence title = getTitleIfProvidedIn(args);
builder=createDialogBuilder(themeResId).setCancelable(true).setView(dialogView)
AlertDialog.Builder builder = createDialogBuilder(themeResId)
                .setCancelable(true)
                .setView(dialogView);
inflater=getActivity().getLayoutInflater()
LayoutInflater inflater = getActivity().getLayoutInflater();
GridView gridView = (GridView) rootView.findViewById(R.id.ps__dialog_grid);
targetApps=extractTargetAppsFrom(args)
TargetApps targetApps = extractTargetAppsFrom(args);
allShareTargets=getAvailableShareTargets(sharingIntent)
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
priorityAppInfos=createPriorityResolveInfoList(targetApps,allShareTargets)
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
otherAppInfos=createOtherAppsResolveInfoList(priorityAppInfos,allShareTargets)
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
resolveInfos=targetApps.extractTargetResolveInfosFrom(allShareTargets)
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
mruResolveInfo=findMruResolveInfoIn(allShareTargets)
ResolveInfo mruResolveInfo = findMruResolveInfoIn(allShareTargets);
List<ResolveInfo> otherAppsInfos = new ArrayList<ResolveInfo>(allAppInfos);
mruPackageName=persister.getLastUsedTarget()
String mruPackageName = persister.getLastUsedTarget();
String packageName = resolveInfo.activityInfo.packageName;
packageManager=getActivity().getPackageManager()
PackageManager packageManager = getActivity().getPackageManager();
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
View buttonStrip = (View) showMoreButton.getParent();
gridView=getGridView()
GridView gridView = getGridView();
intent=wrapIntentWithExplicitTargetComponentForItem(position,sharingIntent)
Intent intent = wrapIntentWithExplicitTargetComponentForItem(position, sharingIntent);
Intent intent = new Intent(sharingIntent);
ActivityInfo activity = adapter.getItem(position).activityInfo;
ComponentName name = new ComponentName(activity.applicationInfo.packageName, activity.name);
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
PriorityShareDialog dialog = new PriorityShareDialog();
Bundle args = new Bundle();
sharingIntent=createSharingIntent()
Intent sharingIntent = createSharingIntent();
fragmentManager=activity.getFragmentManager()
FragmentManager fragmentManager = activity.getFragmentManager();
Intent intent = new Intent(Intent.ACTION_SEND);
dialog=new PriorityShareDialog.Builder().setTitle(title).setTargetApps(targetApps).setSharingIntent(sharingIntent).setOnPrepareSharingIntentListener(listener).setShowMostRecentlyUsed(showMostRecentlyUsed).build()
PriorityShareDialog dialog = new PriorityShareDialog.Builder()
                .setTitle(title)
                .setTargetApps(targetApps)
                .setSharingIntent(sharingIntent)
                .setOnPrepareSharingIntentListener(listener)
                .setShowMostRecentlyUsed(showMostRecentlyUsed)
                .build();
PrioritySharer prioritySharer = new PrioritySharer();
prioritySharer=build()
PrioritySharer prioritySharer = build();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
layoutInflater=LayoutInflater.from(context)
LayoutInflater layoutInflater = LayoutInflater.from(context);
iconSizePx=getIconSizePx(context.getResources())
int iconSizePx = getIconSizePx(context.getResources());
ArrayList<ResolveInfo> sortedList = new ArrayList<ResolveInfo>(resolveInfoList);
int otherAppsCountMaybe = showAllApps ? otherAppInfos.size() : 0;
firstOtherAppsItemPosition=priorityAppInfos.size()
int firstOtherAppsItemPosition = priorityAppInfos.size();
int offsetPosition = position - firstOtherAppsItemPosition;
TextView textView;
textView=initializeItemViewIfNecessary(convertView,R.layout.ps__grid_item_share,parent)
TextView textView = initializeItemViewIfNecessary(convertView, R.layout.ps__grid_item_share, parent);
info=getItem(position)
ResolveInfo info = getItem(position);
icon=info.loadIcon(packageManager)
Drawable icon = info.loadIcon(packageManager);
arraySize=in.readInt()
int arraySize = in.readInt();
String[] packageNames = new String[arraySize];
arraySize=targetPackages.size()
int arraySize = targetPackages.size();
String[] packagesArray = new String[arraySize];
SparseArray<ResolveInfo> matchedResolveInfos = new SparseArray<ResolveInfo>(targetPackages.size());
String packageName = info.activityInfo.packageName;
index=indexOfItemInto(packageName,targetPackages)
int index = indexOfItemInto(packageName, targetPackages);
sparseArraySize=sparseArray.size()
int sparseArraySize = sparseArray.size();
ArrayList<T> list = new ArrayList<T>(sparseArraySize);
int i = 0;
originalSubject=intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT)
CharSequence originalSubject = intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT);
String subject = originalSubject != null ? originalSubject.toString() : null;
composer=createComposer()
MessageComposer composer = createComposer();
component=intent.getComponent()
ComponentName component = intent.getComponent();
targetPackageName=component.getPackageName()
String targetPackageName = component.getPackageName();

 Generics pattern public class ApplicationTest was added at revision a76c42b912d02373d031c7f8cce82a13957c68c9

adapter=ArrayAdapter.createFromResource(this,R.array.target_apps,android.R.layout.simple_spinner_item)
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
EditText text = (EditText) findViewById(R.id.text);
EditText title = (EditText) findViewById(R.id.title);
EditText mimeType = (EditText) findViewById(R.id.mime_type);
EditText dataUri = (EditText) findViewById(R.id.data_uri);
Switch showMostRecentlyUsed = (Switch) findViewById(R.id.show_most_recently_used);
uriString=dataUri.getText().toString()
String uriString = dataUri.getText().toString();

 Generics pattern public class MainActivity was added at revision a76c42b912d02373d031c7f8cce82a13957c68c9

EditText text = (EditText) findViewById(R.id.text);
TextView textView = (TextView) convertView.findViewById(R.id.positionView);
colorView=convertView.findViewById(R.id.colorView)
View colorView = convertView.findViewById(R.id.colorView);

 Generics pattern public class MainActivity was added at revision a76c42b912d02373d031c7f8cce82a13957c68c9


 Generics pattern public class MainActivity was added at revision a76c42b912d02373d031c7f8cce82a13957c68c9

rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
offset=headerPlaceholder.getTop()
int offset = headerPlaceholder.getTop();
Integer item = COLORS[position];

 Generics pattern public class MainActivity was added at revision a76c42b912d02373d031c7f8cce82a13957c68c9

rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
firstVisiblePosition=grid.getFirstVisiblePosition()
int firstVisiblePosition = grid.getFirstVisiblePosition();

 Generics pattern public class MainActivity was added at revision a76c42b912d02373d031c7f8cce82a13957c68c9


 Generics pattern public class MainActivity was added at revision a76c42b912d02373d031c7f8cce82a13957c68c9

inflate=getViewForPosition(container,position)
View inflate = getViewForPosition(container, position);

 Generics pattern public class ApplicationTest was added at revision a76c42b912d02373d031c7f8cce82a13957c68c9

id=item.getItemId()
int id = item.getItemId();
MyActivity activity = new MyActivity();
String manifestProperty = "../app/src/main/AndroidManifest.xml";
String resProperty = "../app/src/main/res";
cursor=resolver.query(uri,projection,selection,selectionArgs,null)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, null);
cursor=resolver.query(uri,projection,selection,selectionArgs,sortOrder)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, sortOrder);
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=richClass.setter(name)
Method setter = richClass.setter(name);
T obj;
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=methodsByName.get(name)
Method setter = methodsByName.get(name);
int type = TYPE_INT;
Class<?> t = setter.getParameterTypes()[0];
Class<?> t = setter.getParameterTypes()[0];
cursorType=cursor.getType(index)
final int cursorType = cursor.getType(index);
final Object obj;
s=f.getAnnotation(Mapper.class)
Mapper s = f.getAnnotation(Mapper.class);
mm=m.getAnnotation(Mapper.class)
Mapper mm = m.getAnnotation(Mapper.class);
methodName=StringUtil.asCamelifySetMethod(what)
String methodName = StringUtil.asCamelifySetMethod(what);
cursor=getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,null,null,null,null)
Cursor cursor = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
now=System.currentTimeMillis()
long now = System.currentTimeMillis();
List<Contact2> typedCursor = new CursorList<Contact2>(cursor, Contact2.class);
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[a-zA-Z0-9]+")
Pattern p = Pattern.compile("[a-zA-Z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[A-Z][a-z0-9]+")
Pattern p = Pattern.compile("[A-Z][a-z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
SurfaceView first = (SurfaceView) findViewById(R.id.firstSurface);
SurfaceView second = (SurfaceView) findViewById(R.id.secondSurface);
Intent pickVideo = new Intent(Intent.ACTION_PICK);
xml=context.obtainStyledAttributes(attrs,R.styleable.RelativeLayoutWithForeground)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.RelativeLayoutWithForeground);
int foregroundResId = INVALID_FOREGROUND_ID;
drawable=getDrawable(getResources(),foregroundResId)
Drawable drawable = getDrawable(getResources(), foregroundResId);

 Generics pattern public class ApplicationTest was added at revision a76c42b912d02373d031c7f8cce82a13957c68c9


 Generics pattern public class MainActivity was added at revision a76c42b912d02373d031c7f8cce82a13957c68c9


 Generics pattern public class RecognitionService was added at revision a76c42b912d02373d031c7f8cce82a13957c68c9


 Generics pattern public class SessionService was added at revision a76c42b912d02373d031c7f8cce82a13957c68c9


 Generics pattern public class SettingsActivity was added at revision a76c42b912d02373d031c7f8cce82a13957c68c9

Bundle args = new Bundle();
enroll=mHotwordDetector.createEnrollIntent()
Intent enroll = mHotwordDetector.createEnrollIntent();

 Generics pattern public class SmartContextInteractionService was added at revision a76c42b912d02373d031c7f8cce82a13957c68c9


Diff of a76c42b912d02373d031c7f8cce82a13957c68c9 and 6722fa6e1ba728ee56d25047683b46bf3976afbe:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 33
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null
GitAPIException thrown!
Cannot revert commit 'a76c42b912d02373d031c7f8cce82a13957c68c9' because it has 2 parents, only commits with exactly one parent are supported

****Parsing for addition at revision 6722fa6e1ba728ee56d25047683b46bf3976afbe****

Added ApplicationTest.java to .\/spikes\ repository source files.
Added DrawerActivity.java to .\/spikes\ repository source files.
Added EarthActivity.java to .\/spikes\ repository source files.
Added SaturnActivity.java to .\/spikes\ repository source files.
Added LocalPlayerActivity.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added CastApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ComposeSmsActivity.java to .\/spikes\ repository source files.
Added HeadlessSmsSendService.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MmsReceiver.java to .\/spikes\ repository source files.
Added SmsReceiver.java to .\/spikes\ repository source files.
Added ExtendedDemoActivity.java to .\/spikes\ repository source files.
Added ExtendedDemoApplication.java to .\/spikes\ repository source files.
Added SimpleDemoActivity.java to .\/spikes\ repository source files.
Added SimpleDemoApplication.java to .\/spikes\ repository source files.
Added Binder.java to .\/spikes\ repository source files.
Added ConnectedClient.java to .\/spikes\ repository source files.
Added Connection.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnection.java to .\/spikes\ repository source files.
Added ServiceConnectionCallback.java to .\/spikes\ repository source files.
Added EasyCustomTabs.java to .\/spikes\ repository source files.
Added ActionButtonComposer.java to .\/spikes\ repository source files.
Added CloseButtonIconComposer.java to .\/spikes\ repository source files.
Added Composer.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilder.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigator.java to .\/spikes\ repository source files.
Added EasyCustomTabsWebNavigator.java to .\/spikes\ repository source files.
Added ExitAnimationsComposer.java to .\/spikes\ repository source files.
Added IntentCustomizer.java to .\/spikes\ repository source files.
Added MenuItemComposer.java to .\/spikes\ repository source files.
Added NavigationFallback.java to .\/spikes\ repository source files.
Added Navigator.java to .\/spikes\ repository source files.
Added ShowTitleComposer.java to .\/spikes\ repository source files.
Added StartAnimationsComposer.java to .\/spikes\ repository source files.
Added ToolbarColorComposer.java to .\/spikes\ repository source files.
Added UrlBarHidingComposer.java to .\/spikes\ repository source files.
Added WebNavigator.java to .\/spikes\ repository source files.
Added AvailableAppProvider.java to .\/spikes\ repository source files.
Added BestPackageFinder.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProvider.java to .\/spikes\ repository source files.
Added BinderTest.java to .\/spikes\ repository source files.
Added ConnectedClientTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnectionTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigatorTest.java to .\/spikes\ repository source files.
Added BestPackageFinderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProviderTest.java to .\/spikes\ repository source files.
Added ApiPagedChannelHistory.java to .\/spikes\ repository source files.
Added ApiPagedResponse.java to .\/spikes\ repository source files.
Added ChannelHistory.java to .\/spikes\ repository source files.
Added HistoryConverter.java to .\/spikes\ repository source files.
Added Runner.java to .\/spikes\ repository source files.
Added SlackHistoryFetcher.java to .\/spikes\ repository source files.
Added SlackWebService.java to .\/spikes\ repository source files.
Added ApiPagedResponseTest.java to .\/spikes\ repository source files.
Added MainActivityTest.java to .\/spikes\ repository source files.
Added LoremAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added BetterAccountManager.java to .\/spikes\ repository source files.
Added BetterAuthenticator.java to .\/spikes\ repository source files.
Added BetterAuthenticatorActivity.java to .\/spikes\ repository source files.
Added GertHerbAuthenticator.java to .\/spikes\ repository source files.
Added GertHerbAuthenticatorService.java to .\/spikes\ repository source files.
Added NoAccountException.java to .\/spikes\ repository source files.
Added ReactiveAuthenticatorActivity.java to .\/spikes\ repository source files.
Added Token.java to .\/spikes\ repository source files.
Added GertHerbActivity.java to .\/spikes\ repository source files.
Added GertHerbApplication.java to .\/spikes\ repository source files.
Added GertHerbAuthenticationActivity.java to .\/spikes\ repository source files.
Added TypefaceFactory.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added ViewServer.java to .\/spikes\ repository source files.
Added ViewServerManager.java to .\/spikes\ repository source files.
Added DeveloperError.java to .\/spikes\ repository source files.
Added HomeActivity.java to .\/spikes\ repository source files.
Added LoginActivity.java to .\/spikes\ repository source files.
Added LoginView.java to .\/spikes\ repository source files.
Added UserCredentials.java to .\/spikes\ repository source files.
Added FontButton.java to .\/spikes\ repository source files.
Added FontEditText.java to .\/spikes\ repository source files.
Added FontTextView.java to .\/spikes\ repository source files.
Added GithubApi.java to .\/spikes\ repository source files.
Added GithubApiFactory.java to .\/spikes\ repository source files.
Added TokenRequest.java to .\/spikes\ repository source files.
Added TokenResponse.java to .\/spikes\ repository source files.
Added Dummy.java to .\/spikes\ repository source files.
Added DummyTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MainFragment.java to .\/spikes\ repository source files.
Added Attributes.java to .\/spikes\ repository source files.
Added Coordinates.java to .\/spikes\ repository source files.
Added IndicatorCoordinatesCalculator.java to .\/spikes\ repository source files.
Added LandingStrip.java to .\/spikes\ repository source files.
Added MutableCoordinates.java to .\/spikes\ repository source files.
Added OnPagerAdapterChangedListener.java to .\/spikes\ repository source files.
Added PagerAdapterObserver.java to .\/spikes\ repository source files.
Added Scrollable.java to .\/spikes\ repository source files.
Added ScrollingPageChangeListener.java to .\/spikes\ repository source files.
Added State.java to .\/spikes\ repository source files.
Added TabsContainer.java to .\/spikes\ repository source files.
Added CustomLandingStrip.java to .\/spikes\ repository source files.
Added CustomTabActivity.java to .\/spikes\ repository source files.
Added ExampleRainbowLandingStrip.java to .\/spikes\ repository source files.
Added FixedWidthTabActivity.java to .\/spikes\ repository source files.
Added NoFragmentsSimpleTextTabActivity.java to .\/spikes\ repository source files.
Added Data.java to .\/spikes\ repository source files.
Added DemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added SmallDemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerFragment.java to .\/spikes\ repository source files.
Added DemoViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapterState.java to .\/spikes\ repository source files.
Added SimpleTextTabActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AbTestingParamsLoadedCallback.java to .\/spikes\ repository source files.
Added AyBe.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added WeakStartCallback.java to .\/spikes\ repository source files.
Added LeakActivity.java to .\/spikes\ repository source files.
Added NoLeakActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added Bar.java to .\/spikes\ repository source files.
Added Foo.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added FooTest.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added ColorScheme.java to .\/spikes\ repository source files.
Added ColorUtils.java to .\/spikes\ repository source files.
Added DominantColorCalculator.java to .\/spikes\ repository source files.
Added FloatUtils.java to .\/spikes\ repository source files.
Added MedianCutQuantizer.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added PayPalFragment.java to .\/spikes\ repository source files.
Added PayPalHelper.java to .\/spikes\ repository source files.
Added MaxLengthMessageComposer.java to .\/spikes\ repository source files.
Added MessageComposer.java to .\/spikes\ repository source files.
Added TwitterMessageComposer.java to .\/spikes\ repository source files.
Added DisabledMruPersister.java to .\/spikes\ repository source files.
Added MruPersister.java to .\/spikes\ repository source files.
Added SharedPreferencesMruPersister.java to .\/spikes\ repository source files.
Added OnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added PriorityShareDialog.java to .\/spikes\ repository source files.
Added PrioritySharer.java to .\/spikes\ repository source files.
Added ShareTargetsAdapter.java to .\/spikes\ repository source files.
Added SimpleOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added TargetApps.java to .\/spikes\ repository source files.
Added TwitterOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AdvancedActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SimpleActivity.java to .\/spikes\ repository source files.
Added LockingActivity.java to .\/spikes\ repository source files.
Added PostLockingActivity.java to .\/spikes\ repository source files.
Added PreLockingActivity.java to .\/spikes\ repository source files.
Added DummyAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added NovoStaggeredGridView.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SpikeApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SwipeableView.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MyClass.java to .\/spikes\ repository source files.
Added MyClassTest.java to .\/spikes\ repository source files.
Added MyAndroidClassTest.java to .\/spikes\ repository source files.
Added RobolectricGradleTestRunner.java to .\/spikes\ repository source files.
Added Mapper.java to .\/spikes\ repository source files.
Added Query.java to .\/spikes\ repository source files.
Added TypedResolver.java to .\/spikes\ repository source files.
Added CursorList.java to .\/spikes\ repository source files.
Added CursorListIterator.java to .\/spikes\ repository source files.
Added CursorMarshaller.java to .\/spikes\ repository source files.
Added EmptyListIterator.java to .\/spikes\ repository source files.
Added ReflectionCursorMarshaller.java to .\/spikes\ repository source files.
Added RichClass.java to .\/spikes\ repository source files.
Added Setter.java to .\/spikes\ repository source files.
Added Function.java to .\/spikes\ repository source files.
Added TypedElementLoader.java to .\/spikes\ repository source files.
Added TypedLoader.java to .\/spikes\ repository source files.
Added Marshaller.java to .\/spikes\ repository source files.
Added ObjectMapper.java to .\/spikes\ repository source files.
Added TypedActivity.java to .\/spikes\ repository source files.
Added StringUtil.java to .\/spikes\ repository source files.
Added MyObject.java to .\/spikes\ repository source files.
Added MediaPlayerSwitcherActivity.java to .\/spikes\ repository source files.
Added VideoPlayerService.java to .\/spikes\ repository source files.
Added RelativeLayoutWithForeground.java to .\/spikes\ repository source files.
Added DemoActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added RecognitionService.java to .\/spikes\ repository source files.
Added SessionService.java to .\/spikes\ repository source files.
Added SettingsActivity.java to .\/spikes\ repository source files.
Added SmartContextInteractionService.java to .\/spikes\ repository source files.
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
String[] planetTitles = new String[]{"Earth", "Saturn"};
DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
ListView drawerList = (ListView) findViewById(R.id.left_drawer);
Intent intent;
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close);
b=getIntent().getExtras()
Bundle b = getIntent().getExtras();
mShouldStartPlayback=b.getBoolean("shouldStart")
boolean mShouldStartPlayback = b.getBoolean("shouldStart");
startPosition=b.getInt("startPosition",0)
int startPosition = b.getInt("startPosition", 0);
currentPos=mVideoView.getCurrentPosition()
int currentPos = mVideoView.getCurrentPosition();
String msg;
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, mDisplaySize.y + getActionBar().getHeight());
mm=mSelectedMedia.getMetadata()
MediaMetadata mm = mSelectedMedia.getMetadata();
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, (int) (mDisplaySize.x * ASPECT_RATIO));
WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
width=display.getWidth()
int width = display.getWidth();
height=display.getHeight()
int height = display.getHeight();
int resourceId = 0;
String videoUrl = "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4#sthash.rJ5rPZy8.dpuf";
String title = "Jahre Philharmonie";
String description = "Awesome film you must watch!";
String author = "Blundell";
String thumbUrl = "http://www.ustream.tv/blog/wp-content/uploads/2013/10/simply-go-live.png";
MediaMetadata metadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE);
mediaInfo=new MediaInfo.Builder(videoUrl).setMetadata(metadata).setStreamType(MediaInfo.STREAM_TYPE_BUFFERED).setContentType("video/mp4").build()
MediaInfo mediaInfo = new MediaInfo.Builder(videoUrl)
                        .setMetadata(metadata)
                        .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)
                        .setContentType("video/mp4")
                        .build();
Intent intent = new Intent(MainActivity.this, LocalPlayerActivity.class);
preferences=getPreferences(MODE_PRIVATE)
SharedPreferences preferences = getPreferences(MODE_PRIVATE);
defaultSmsPackage=Telephony.Sms.getDefaultSmsPackage(this)
String defaultSmsPackage = Telephony.Sms.getDefaultSmsPackage(this);
Intent intent = new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
availableAppProvider=EasyCustomTabs.getInstance()
AvailableAppProvider availableAppProvider = EasyCustomTabs.getInstance();
ConnectedClient connectedClient = new ConnectedClient(client);
binder=Binder.newInstance()
Binder binder = Binder.newInstance();
List<Composer> composerList = new ArrayList<>();
customTabsSession=connection.newSession()
CustomTabsSession customTabsSession = connection.newSession();
CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(customTabsSession);
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
context=EasyCustomTabs.getInstance().getContext()
Context context = EasyCustomTabs.getInstance().getContext();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
packagesSupportingCustomTabs=getPackagesSupportingCustomTabs()
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
defaultPackage=getDefaultPackage()
String defaultPackage = getDefaultPackage();
defaultActivityInfo=packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK,0)
ResolveInfo defaultActivityInfo = packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK, 0);
String packageName = defaultActivityInfo.activityInfo.packageName;
resolvedInfoList=packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK,0)
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<String> packagesSupportingCustomTabs = new ArrayList<>();
Intent serviceIntent = new Intent();
bestPackageFinder=BestPackageFinder.newInstance()
BestPackageFinder bestPackageFinder = BestPackageFinder.newInstance();
packageName=bestPackageFinder.findBestPackage()
String packageName = bestPackageFinder.findBestPackage();
resolveInfo=createResolveInfoFor(packageName)
ResolveInfo resolveInfo = createResolveInfoFor(packageName);
ResolveInfo resolveInfo = new ResolveInfo();
List<ResolveInfo> resolveInfoList = new ArrayList<>();
defaultPackageResolveInfo=createResolveInfoFor(packageName)
ResolveInfo defaultPackageResolveInfo = createResolveInfoFor(packageName);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
oldestApiMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage oldestApiMessage = apiMessages.get(apiMessages.size() - 1);
String lastResponseEpochTime = oldestApiMessage.timeStamp;
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
latestMessage=latestMessages.get(latestMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage latestMessage = latestMessages.get(latestMessages.size() - 1);
latestMessageDateTime=convertToLocalDateTime(latestMessage.timeStamp)
LocalDateTime latestMessageDateTime = convertToLocalDateTime(latestMessage.timeStamp);
List<ChannelHistory.Message> messages = new ArrayList<>();
historyFrom=getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1))
LocalDateTime historyFrom = getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1));
historyTo=getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0))
LocalDateTime historyTo = getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0));
String text = apiMessage.text;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
lastMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage lastMessage = apiMessages.get(apiMessages.size() - 1);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
firstMessage=apiMessages.get(0)
ApiPagedChannelHistory.ApiMessage firstMessage = apiMessages.get(0);
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
String slackToken = args[0];
retrofit=new Retrofit.Builder().baseUrl("https://slack.com/api/").addConverterFactory(GsonConverterFactory.create()).build()
Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://slack.com/api/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();
slackWebService=retrofit.create(SlackWebService.class)
SlackWebService slackWebService = retrofit.create(SlackWebService.class);
slackHistoryFetcher=SlackHistoryFetcher.from(slackWebService,slackToken)
SlackHistoryFetcher slackHistoryFetcher = SlackHistoryFetcher.from(slackWebService, slackToken);
start=LocalDateTime.now()
LocalDateTime start = LocalDateTime.now();
end=LocalDateTime.now().minusDays(7)
LocalDateTime end = LocalDateTime.now().minusDays(7);
channelHistory=slackHistoryFetcher.getChannelHistory(start,end)
ChannelHistory channelHistory = slackHistoryFetcher.getChannelHistory(start, end);
HistoryConverter historyConverter = new HistoryConverter();
ApiPagedResponse apiPagedResponse = new ApiPagedResponse(start);
response=fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime())
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
apiPagedChannelHistory=response.body()
ApiPagedChannelHistory apiPagedChannelHistory = response.body();
channelHistory=slackWebService.getChannelHistory(slackToken,channel,lastResponseEpochTime,NUMBER_OF_RESULTS)
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
ApiPagedChannelHistory apiPagedChannelHistory = new ApiPagedChannelHistory();
ApiPagedChannelHistory.ApiMessage apiMessage = new ApiPagedChannelHistory.ApiMessage();
final TextView textView = new TextView(context);
emptyView=findViewById(R.id.empty_view)
View emptyView = findViewById(R.id.empty_view);
final Integer action = values[0];
LoremAdapter loremAdapter = new LoremAdapter();
accounts=accountManager.getAccountsByType(accountType)
Account[] accounts = accountManager.getAccountsByType(accountType);
Bundle result;
Bundle result;
Bundle result = new Bundle();
activity=createLoginIntent(context,accountType,authTokenType,requiredFeatures,options)
Intent activity = createLoginIntent(context, accountType, authTokenType, requiredFeatures, options);
Bundle bundle = new Bundle();
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
accounts=accountManager.getAccountsByType(authTokenType)
Account[] accounts = accountManager.getAccountsByType(authTokenType);
bundle=createResponseBundle(token)
Bundle bundle = createResponseBundle(token);
accountManager=AccountManager.get(this.getApplicationContext())
AccountManager accountManager = AccountManager.get(this.getApplicationContext());
Account account = new Account(token.getUserName(), getAccountName());
Bundle bundle = new Bundle();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
GertHerbAuthenticator authenticator = new GertHerbAuthenticator(this);
fontId=getFontId(context,attrs)
int fontId = getFontId(context, attrs);
fontType=getFontType(fontId)
FontType fontType = getFontType(fontId);
typedArray=context.obtainStyledAttributes(attrs,R.styleable.CustomTextAppearance)
TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CustomTextAppearance);
typeface=createTypeFace(context,fontType)
Typeface typeface = createTypeFace(context, fontType);
info=context.getApplicationInfo()
ApplicationInfo info = context.getApplicationInfo();
name=activity.getTitle().toString()
String name = activity.getTitle().toString();
client=mServer.accept()
Socket client = mServer.accept();
boolean result;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
BufferedReader in = null;
request=in.readLine()
final String request = in.readLine();
String command;
String parameters;
index=request.indexOf(' ')
int index = request.indexOf(' ');
boolean result;
boolean success = true;
BufferedWriter out = null;
index=parameters.indexOf(' ')
int index = parameters.indexOf(' ');
code=parameters.substring(0,index)
final String code = parameters.substring(0, index);
int hashCode = (int) Long.parseLong(code, 16);
window=findWindow(hashCode)
final View window = findWindow(hashCode);
dispatch=ViewDebug.class.getDeclaredMethod("dispatchCommand",View.class,String.class,String.class,OutputStream.class)
final Method dispatch = ViewDebug.class.getDeclaredMethod("dispatchCommand",
                        View.class, String.class, String.class, OutputStream.class);
View window = null;
boolean result = true;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
boolean result = true;
String focusName = null;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
View focusedWindow = null;
BufferedWriter out = null;
boolean needWindowListUpdate = false;
boolean needFocusedWindowUpdate = false;
BetterAccountManager accountManager = new BetterAccountManager(this, getString(R.string.account_type), getString(R.string.token_type), null);
loginView=Views.findById(this,R.id.login_view)
LoginView loginView = Views.findById(this, R.id.login_view);
authorizationApi=new GithubApiFactory().createAuthorizationApi(credentials.username,credentials.password)
GithubApi authorizationApi = new GithubApiFactory().createAuthorizationApi(credentials.username, credentials.password);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
Endpoint endpoint = new Endpoint() {
            @Override
            public String getUrl() {
                return GITHUB_API_URL;
            }

            @Override
            public String getName() {
                return "Live";
            }
        };
interceptor=createAuthorizationRequestInterceptor(username,password)
RequestInterceptor interceptor = createAuthorizationRequestInterceptor(username, password);
restAdapter=createRestAdapter(endpoint,interceptor)
RestAdapter restAdapter = createRestAdapter(endpoint, interceptor);
Dummy dummy = new Dummy();
result=dummy.explodes()
boolean result = dummy.explodes();
String base64EncodedPublicKey = "CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE";
premiumPurchase=inventory.getPurchase(SKU_PREMIUM)
Purchase premiumPurchase = inventory.getPurchase(SKU_PREMIUM);
infiniteGasPurchase=inventory.getPurchase(SKU_INFINITE_GAS)
Purchase infiniteGasPurchase = inventory.getPurchase(SKU_INFINITE_GAS);
gasPurchase=inventory.getPurchase(SKU_GAS)
Purchase gasPurchase = inventory.getPurchase(SKU_GAS);
String payload = "";
String payload = "";
String payload = "";
payload=p.getDeveloperPayload()
String payload = p.getDeveloperPayload();
int index = mTank >= TANK_RES_IDS.length ? TANK_RES_IDS.length - 1 : mTank;
AlertDialog.Builder bld = new AlertDialog.Builder(this);
spe=getPreferences(MODE_PRIVATE).edit()
SharedPreferences.Editor spe = getPreferences(MODE_PRIVATE).edit();
sp=getPreferences(MODE_PRIVATE)
SharedPreferences sp = getPreferences(MODE_PRIVATE);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                                  + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                    | ((source[d + 1 + off] << 24) >>> 16)
                    | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                    | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                                   "-1002:Bad response received/" +
                                   "-1003:Purchase signature verification failed/" +
                                   "-1004:Send intent failed/" +
                                   "-1005:User cancelled/" +
                                   "-1006:Unknown purchase response/" +
                                   "-1007:Missing token/" +
                                   "-1008:Unknown error/" +
                                   "-1009:Subscriptions not available/" +
                                   "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(),
                    itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                        | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                        | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                            | ((source[d + 1 + off] << 24) >>> 16)
                            | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                            | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                "-1002:Bad response received/" +
                "-1003:Purchase signature verification failed/" +
                "-1004:Send intent failed/" +
                "-1005:User cancelled/" +
                "-1006:Unknown purchase response/" +
                "-1007:Missing token/" +
                "-1008:Unknown error/" +
                "-1009:Subscriptions not available/" +
                "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(), itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
responseCode=result.getResponse()
int responseCode = result.getResponse();
sku=purchase.getSku()
String sku = purchase.getSku();
skuDetails=inv.getSkuDetails(sku)
SkuDetails skuDetails = inv.getSkuDetails(sku);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
Button purchaseFiveButton = (Button) rootView.findViewById(R.id.fragment_main_button_purchase_five_coins);
xml=context.obtainStyledAttributes(attrs,R.styleable.LandingStrip)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.LandingStrip);
tabLayoutId=xml.getResourceId(R.styleable.LandingStrip_tabLayoutId,MISSING_TAB_LAYOUT_ID)
int tabLayoutId = xml.getResourceId(R.styleable.LandingStrip_tabLayoutId, MISSING_TAB_LAYOUT_ID);
indicatorColour=xml.getResourceId(R.styleable.LandingStrip_indicatorColor,DEFAULT_INDICATOR_COLOUR)
int indicatorColour = xml.getResourceId(R.styleable.LandingStrip_indicatorColor, DEFAULT_INDICATOR_COLOUR);
indicatorHeight=getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight,DEFAULT_INDICATOR_HEIGHT,xml)
int indicatorHeight = getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight, DEFAULT_INDICATOR_HEIGHT, xml);
tabsPaddingLeft=getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingLeft = getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding, DEFAULT_TABS_PADDING, xml);
tabsPaddingRight=getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingRight = getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding, DEFAULT_TABS_PADDING, xml);
MutableCoordinates drawCurrentTabCoordinates = new MutableCoordinates();
MutableCoordinates drawNextTabCoordinates = new MutableCoordinates();
MutableCoordinates drawMovingIndicatorCoordinates = new MutableCoordinates();
currentTab=tabsContainer.getTabAt(currentPosition)
View currentTab = tabsContainer.getTabAt(currentPosition);
currentTabStart=currentTab.getLeft()
float currentTabStart = currentTab.getLeft();
currentTabEnd=currentTab.getRight()
float currentTabEnd = currentTab.getRight();
nextTab=tabsContainer.getTabAt(currentPosition + 1)
View nextTab = tabsContainer.getTabAt(currentPosition + 1);
nextTabPositionOffset=getFractionFrom(pagePositionOffset)
float nextTabPositionOffset = getFractionFrom(pagePositionOffset);
indicatorStart=getIndicatorPosition(nextTab.getStart(),pagePositionOffset,currentTab.getStart(),nextTabPositionOffset)
float indicatorStart = getIndicatorPosition(nextTab.getStart(), pagePositionOffset, currentTab.getStart(), nextTabPositionOffset);
indicatorEnd=getIndicatorPosition(nextTab.getEnd(),pagePositionOffset,currentTab.getEnd(),nextTabPositionOffset)
float indicatorEnd = getIndicatorPosition(nextTab.getEnd(), pagePositionOffset, currentTab.getEnd(), nextTabPositionOffset);
height=getHeight()
int height = getHeight();
tabCount=pagerAdapter.getCount()
int tabCount = pagerAdapter.getCount();
title=pagerAdapter.getPageTitle(position)
CharSequence title = pagerAdapter.getPageTitle(position);
inflatedTabView=tabsContainer.inflateTab(layoutInflater,attributes.getTabLayoutId())
View inflatedTabView = tabsContainer.inflateTab(layoutInflater, attributes.getTabLayoutId());
int position = (int) view.getTag(TAG_KEY_POSITION);
scrollOffset=getHorizontalScrollOffset(position,positionOffset)
int scrollOffset = getHorizontalScrollOffset(position, positionOffset);
newScrollX=calculateScrollOffset(position,scrollOffset,positionOffset)
float newScrollX = calculateScrollOffset(position, scrollOffset, positionOffset);
tabWidth=tabsContainer.getTabAt(position).getWidth()
int tabWidth = tabsContainer.getTabAt(position).getWidth();
tabForPosition=tabsContainer.getTabAt(position)
View tabForPosition = tabsContainer.getTabAt(position);
float tabStartX = tabForPosition.getLeft() + scrollOffset;
int viewMiddleOffset = getTabParentWidth() / 2;
float tabCenterOffset = (tabForPosition.getRight() - tabForPosition.getLeft()) * 0.5F;
nextTabDelta=getNextTabDelta(position,pagerOffset,tabForPosition)
float nextTabDelta = getNextTabDelta(position, pagerOffset, tabForPosition);
LinearLayout tabsContainerView = new LinearLayout(context);
tab=getTabAt(index)
View tab = getTabAt(index);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
position=indicatorCoordinates.getStart()
float position = indicatorCoordinates.getStart();
lastTabOffset=((ViewGroup)getChildAt(0)).getChildAt(getChildCount() - 1).getWidth()
float lastTabOffset = ((ViewGroup) getChildAt(0)).getChildAt(getChildCount() - 1).getWidth();
frequency=getOneCycle(lastTabOffset)
float frequency = getOneCycle(lastTabOffset);
r=toHex(calculateColour(position,frequency,PHASE_RED,AMPLITUDE,CENTER_FREQUENCY))
String r = toHex(calculateColour(position, frequency, PHASE_RED, AMPLITUDE, CENTER_FREQUENCY));
g=toHex(calculateColour(position,frequency,PHASE_GREEN,AMPLITUDE,CENTER_FREQUENCY))
String g = toHex(calculateColour(position, frequency, PHASE_GREEN, AMPLITUDE, CENTER_FREQUENCY));
b=toHex(calculateColour(position,frequency,PHASE_BLUE,AMPLITUDE,CENTER_FREQUENCY))
String b = toHex(calculateColour(position, frequency, PHASE_BLUE, AMPLITUDE, CENTER_FREQUENCY));
height=getHeight()
int height = getHeight();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPagerFragment viewPagerFragment = new ViewPagerFragment();
Bundle bundle = new Bundle();
TextView view = (TextView) layoutInflater.inflate(R.layout.view_demo, container, false);
currentPosition=viewPagerAdapterState.getCurrentPosition()
int currentPosition = viewPagerAdapterState.getCurrentPosition();
view=getView(container,position)
View view = getView(container, position);
parcelableSparseArray=viewPagerAdapterState.get(position)
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
View view = (View) object;
SparseArray<Parcelable> viewState = new SparseArray<>();
position=entry.getValue()
int position = entry.getValue();
view=entry.getKey()
View view = entry.getKey();
bundle=in.readBundle()
Bundle bundle = in.readBundle();
Map<Integer, SparseArray<Parcelable>> viewStates = new HashMap<>(bundle.keySet().size());
sparseParcelableArray=bundle.getSparseParcelableArray(key)
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
primaryItemPosition=in.readInt()
int primaryItemPosition = in.readInt();
Bundle bundle = new Bundle();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
final TextView abText = (TextView) findViewById(R.id.ab_text);
final AyBe ayBe = new AyBe();
id=item.getItemId()
int id = item.getItemId();
callback=weakCallback.get()
AbTestingParamsLoadedCallback callback = weakCallback.get();
WeakReference<NoLeakActivity> weakNoLeakActivity = new WeakReference<NoLeakActivity>(noLeakActivity);
noLeakActivity=weakNoLeakActivity.get()
NoLeakActivity noLeakActivity = weakNoLeakActivity.get();
RecyclerView recyclerView = (RecyclerView) layoutInflater.inflate(R.layout.view_page, viewGroup, false);
itemView=layoutInflater.inflate(R.layout.view_item,parent,false)
View itemView = layoutInflater.inflate(R.layout.view_item, parent, false);
actual=foo.twice(HALF)
int actual = foo.twice(HALF);
int expected = WHOLE;
final float inverseRatio = 1f - ratio;
float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRatio);
float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRatio);
float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRatio);
hsv=node.getHsv()
float[] hsv = node.getHsv();
width=bitmap.getWidth()
final int width = bitmap.getWidth();
height=bitmap.getHeight()
final int height = bitmap.getHeight();
final int[] rgbPixels = new int[width * height];
final MedianCutQuantizer mcq = new MedianCutQuantizer(rgbPixels, NUM_COLORS);
primaryAccentColor=findPrimaryAccentColor()
final ColorNode primaryAccentColor = findPrimaryAccentColor();
secondaryAccentColor=findSecondaryAccentColor(primaryAccentColor)
final ColorNode secondaryAccentColor = findSecondaryAccentColor(primaryAccentColor);
tertiaryAccentColor=findTertiaryAccentColor(primaryAccentColor,secondaryAccentColor)
final int tertiaryAccentColor = findTertiaryAccentColor(
                primaryAccentColor, secondaryAccentColor);
primaryTextColor=findPrimaryTextColor(primaryAccentColor)
final int primaryTextColor = findPrimaryTextColor(primaryAccentColor);
secondaryTextColor=findSecondaryTextColor(primaryAccentColor)
final int secondaryTextColor = findSecondaryTextColor(primaryAccentColor);
final float primaryHue = primary.getHsv()[0];
final float candidateHue = candidate.getHsv()[0];
copy=Arrays.copyOf(palette,palette.length)
final MedianCutQuantizer.ColorNode[] copy = Arrays.copyOf(palette, palette.length);
maxCount=palette[0].getCount()
final float maxCount = palette[0].getCount();
lhsWeight=calculateWeight(lhs,maxCount)
final float lhsWeight = calculateWeight(lhs, maxCount);
rhsWeight=calculateWeight(rhs,maxCount)
final float rhsWeight = calculateWeight(rhs, maxCount);
float sum = 0;
float sumWeight = 0;
float value = values[i];
float weight = values[i + 1];
ColorHistogram colorHist = new ColorHistogram(pixels);
K=colorHist.getNumberOfColors()
int K = colorHist.getNumberOfColors();
ColorNode[] rCols = null;
rgb=colorHist.getColor(i)
int rgb = colorHist.getColor(i);
cnt=colorHist.getCount(i)
int cnt = colorHist.getCount(i);
ColorBox initialBox = new ColorBox(0, K - 1, 0);
List<ColorBox> colorSet = new ArrayList<ColorBox>();
int k = 1;
boolean done = false;
nextBox=findBoxToSplit(colorSet)
ColorBox nextBox = findBoxToSplit(colorSet);
newBox=nextBox.splitBox()
ColorBox newBox = nextBox.splitBox();
color=findClosestColor(pixels[i])
ColorNode color = findClosestColor(pixels[i]);
idx=findClosestColorIndex(rgb)
int idx = findClosestColorIndex(rgb);
red=Color.red(rgb)
int red = Color.red(rgb);
grn=Color.green(rgb)
int grn = Color.green(rgb);
blu=Color.blue(rgb)
int blu = Color.blue(rgb);
int minIdx = 0;
int minDistance = Integer.MAX_VALUE;
ColorNode color = quantColors[i];
d2=color.distance2(red,grn,blu)
int d2 = color.distance2(red, grn, blu);
ColorBox boxToSplit = null;
int minLevel = Integer.MAX_VALUE;
n=colorBoxes.size()
int n = colorBoxes.size();
ColorNode[] avgColors = new ColorNode[n];
int i = 0;
int dr = this.red - red;
int dg = this.grn - grn;
int db = this.blu - blu;
ColorNode color = imageColors[i];
int r = color.red;
int g = color.grn;
int b = color.blu;
dim=getLongestColorDimension()
ColorDimension dim = getLongestColorDimension();
med=findMedian(dim)
int med = findMedian(dim);
int nextLevel = level + 1;
ColorBox newBox = new ColorBox(med + 1, upper, nextLevel);
int rLength = rmax - rmin;
int gLength = gmax - gmin;
int bLength = bmax - bmin;
int half = count / 2;
int nPixels, median;
int rSum = 0;
int gSum = 0;
int bSum = 0;
int n = 0;
ColorNode ci = imageColors[i];
int cnt = ci.cnt;
double nd = n;
int avgRed = (int) (0.5 + rSum / nd);
int avgGrn = (int) (0.5 + gSum / nd);
int avgBlu = (int) (0.5 + bSum / nd);
s=this.getClass().getSimpleName()
String s = this.getClass().getSimpleName();
int i = 0;
int N = pixelsOrig.length;
int[] pixelsCpy = new int[N];
int k = -1;
int curColor = -1;
int nColors = k + 1;
id=item.getItemId()
int id = item.getItemId();
Intent intent = new Intent();
bitmap=((BitmapDrawable)imageView.getDrawable()).getBitmap()
Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap();
DominantColorCalculator dominantColorCalculator = new DominantColorCalculator(bitmap);
selectedImageUri=data.getData()
Uri selectedImageUri = data.getData();
selectedImagePath=getPath(selectedImageUri)
String selectedImagePath = getPath(selectedImageUri);
String[] projection = {MediaStore.Images.Media.DATA};
cursor=managedQuery(uri,projection,null,null,null)
Cursor cursor = managedQuery(uri, projection, null, null, null);
column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)
int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
LinearLayout rootView = (LinearLayout) inflater.inflate(R.layout.fragment_main, container, false);
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
preapprovalButton=payPal.getCheckoutButton(getActivity(),PayPal.BUTTON_194x37,CheckoutButton.TEXT_PAY)
CheckoutButton preapprovalButton = payPal.getCheckoutButton(getActivity(), PayPal.BUTTON_194x37, CheckoutButton.TEXT_PAY);
preapprovalIntent=payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY)
Intent preapprovalIntent = payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY);
String resultTitle = "";
String resultInfo = "";
String resultExtra = "";
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
PayPalPreapproval preapproval = new PayPalPreapproval();
preapproval=createPreapproval(preapprovalKey)
PayPalPreapproval preapproval = createPreapproval(preapprovalKey);
Bundle bundle = new Bundle();
int availableLength = maxLength;
StringBuilder stringBuilder = new StringBuilder(maxLength);
prefixAndSuffixLength=computeAppendedLengthIncludingSeparatorSpaces(prefix,suffix)
int prefixAndSuffixLength = computeAppendedLengthIncludingSeparatorSpaces(prefix, suffix);
urlLength=computeUrlLengthIncludingSeparatorSpace(url)
int urlLength = computeUrlLengthIncludingSeparatorSpace(url);
trimmedSubject=ellipsizeTextIfExceedsMaxLength(subject,availableLength)
String trimmedSubject = ellipsizeTextIfExceedsMaxLength(subject, availableLength);
int length = 0;
preferences=context.getSharedPreferences(MRU_PREFERENCES,Context.MODE_PRIVATE)
SharedPreferences preferences = context.getSharedPreferences(MRU_PREFERENCES, Context.MODE_PRIVATE);
args=getArguments()
Bundle args = getArguments();
themeResId=getThemeResIdIfProvidedIn(args)
int themeResId = getThemeResIdIfProvidedIn(args);
title=getTitleIfProvidedIn(args)
CharSequence title = getTitleIfProvidedIn(args);
builder=createDialogBuilder(themeResId).setCancelable(true).setView(dialogView)
AlertDialog.Builder builder = createDialogBuilder(themeResId)
                .setCancelable(true)
                .setView(dialogView);
inflater=getActivity().getLayoutInflater()
LayoutInflater inflater = getActivity().getLayoutInflater();
GridView gridView = (GridView) rootView.findViewById(R.id.ps__dialog_grid);
targetApps=extractTargetAppsFrom(args)
TargetApps targetApps = extractTargetAppsFrom(args);
allShareTargets=getAvailableShareTargets(sharingIntent)
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
priorityAppInfos=createPriorityResolveInfoList(targetApps,allShareTargets)
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
otherAppInfos=createOtherAppsResolveInfoList(priorityAppInfos,allShareTargets)
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
resolveInfos=targetApps.extractTargetResolveInfosFrom(allShareTargets)
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
mruResolveInfo=findMruResolveInfoIn(allShareTargets)
ResolveInfo mruResolveInfo = findMruResolveInfoIn(allShareTargets);
List<ResolveInfo> otherAppsInfos = new ArrayList<ResolveInfo>(allAppInfos);
mruPackageName=persister.getLastUsedTarget()
String mruPackageName = persister.getLastUsedTarget();
String packageName = resolveInfo.activityInfo.packageName;
packageManager=getActivity().getPackageManager()
PackageManager packageManager = getActivity().getPackageManager();
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
View buttonStrip = (View) showMoreButton.getParent();
gridView=getGridView()
GridView gridView = getGridView();
intent=wrapIntentWithExplicitTargetComponentForItem(position,sharingIntent)
Intent intent = wrapIntentWithExplicitTargetComponentForItem(position, sharingIntent);
Intent intent = new Intent(sharingIntent);
ActivityInfo activity = adapter.getItem(position).activityInfo;
ComponentName name = new ComponentName(activity.applicationInfo.packageName, activity.name);
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
PriorityShareDialog dialog = new PriorityShareDialog();
Bundle args = new Bundle();
sharingIntent=createSharingIntent()
Intent sharingIntent = createSharingIntent();
fragmentManager=activity.getFragmentManager()
FragmentManager fragmentManager = activity.getFragmentManager();
Intent intent = new Intent(Intent.ACTION_SEND);
dialog=new PriorityShareDialog.Builder().setTitle(title).setTargetApps(targetApps).setSharingIntent(sharingIntent).setOnPrepareSharingIntentListener(listener).setShowMostRecentlyUsed(showMostRecentlyUsed).build()
PriorityShareDialog dialog = new PriorityShareDialog.Builder()
                .setTitle(title)
                .setTargetApps(targetApps)
                .setSharingIntent(sharingIntent)
                .setOnPrepareSharingIntentListener(listener)
                .setShowMostRecentlyUsed(showMostRecentlyUsed)
                .build();
PrioritySharer prioritySharer = new PrioritySharer();
prioritySharer=build()
PrioritySharer prioritySharer = build();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
layoutInflater=LayoutInflater.from(context)
LayoutInflater layoutInflater = LayoutInflater.from(context);
iconSizePx=getIconSizePx(context.getResources())
int iconSizePx = getIconSizePx(context.getResources());
ArrayList<ResolveInfo> sortedList = new ArrayList<ResolveInfo>(resolveInfoList);
int otherAppsCountMaybe = showAllApps ? otherAppInfos.size() : 0;
firstOtherAppsItemPosition=priorityAppInfos.size()
int firstOtherAppsItemPosition = priorityAppInfos.size();
int offsetPosition = position - firstOtherAppsItemPosition;
TextView textView;
textView=initializeItemViewIfNecessary(convertView,R.layout.ps__grid_item_share,parent)
TextView textView = initializeItemViewIfNecessary(convertView, R.layout.ps__grid_item_share, parent);
info=getItem(position)
ResolveInfo info = getItem(position);
icon=info.loadIcon(packageManager)
Drawable icon = info.loadIcon(packageManager);
arraySize=in.readInt()
int arraySize = in.readInt();
String[] packageNames = new String[arraySize];
arraySize=targetPackages.size()
int arraySize = targetPackages.size();
String[] packagesArray = new String[arraySize];
SparseArray<ResolveInfo> matchedResolveInfos = new SparseArray<ResolveInfo>(targetPackages.size());
String packageName = info.activityInfo.packageName;
index=indexOfItemInto(packageName,targetPackages)
int index = indexOfItemInto(packageName, targetPackages);
sparseArraySize=sparseArray.size()
int sparseArraySize = sparseArray.size();
ArrayList<T> list = new ArrayList<T>(sparseArraySize);
int i = 0;
originalSubject=intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT)
CharSequence originalSubject = intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT);
String subject = originalSubject != null ? originalSubject.toString() : null;
composer=createComposer()
MessageComposer composer = createComposer();
component=intent.getComponent()
ComponentName component = intent.getComponent();
targetPackageName=component.getPackageName()
String targetPackageName = component.getPackageName();
adapter=ArrayAdapter.createFromResource(this,R.array.target_apps,android.R.layout.simple_spinner_item)
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
EditText text = (EditText) findViewById(R.id.text);
EditText title = (EditText) findViewById(R.id.title);
EditText mimeType = (EditText) findViewById(R.id.mime_type);
EditText dataUri = (EditText) findViewById(R.id.data_uri);
Switch showMostRecentlyUsed = (Switch) findViewById(R.id.show_most_recently_used);
uriString=dataUri.getText().toString()
String uriString = dataUri.getText().toString();
EditText text = (EditText) findViewById(R.id.text);
TextView textView = (TextView) convertView.findViewById(R.id.positionView);
colorView=convertView.findViewById(R.id.colorView)
View colorView = convertView.findViewById(R.id.colorView);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
offset=headerPlaceholder.getTop()
int offset = headerPlaceholder.getTop();
Integer item = COLORS[position];
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
firstVisiblePosition=grid.getFirstVisiblePosition()
int firstVisiblePosition = grid.getFirstVisiblePosition();
inflate=getViewForPosition(container,position)
View inflate = getViewForPosition(container, position);
id=item.getItemId()
int id = item.getItemId();
MyActivity activity = new MyActivity();
String manifestProperty = "../app/src/main/AndroidManifest.xml";
String resProperty = "../app/src/main/res";
cursor=resolver.query(uri,projection,selection,selectionArgs,null)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, null);
cursor=resolver.query(uri,projection,selection,selectionArgs,sortOrder)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, sortOrder);
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=richClass.setter(name)
Method setter = richClass.setter(name);
T obj;
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=methodsByName.get(name)
Method setter = methodsByName.get(name);
int type = TYPE_INT;
Class<?> t = setter.getParameterTypes()[0];
Class<?> t = setter.getParameterTypes()[0];
cursorType=cursor.getType(index)
final int cursorType = cursor.getType(index);
final Object obj;
s=f.getAnnotation(Mapper.class)
Mapper s = f.getAnnotation(Mapper.class);
mm=m.getAnnotation(Mapper.class)
Mapper mm = m.getAnnotation(Mapper.class);
methodName=StringUtil.asCamelifySetMethod(what)
String methodName = StringUtil.asCamelifySetMethod(what);
cursor=getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,null,null,null,null)
Cursor cursor = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
now=System.currentTimeMillis()
long now = System.currentTimeMillis();
List<Contact2> typedCursor = new CursorList<Contact2>(cursor, Contact2.class);
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[a-zA-Z0-9]+")
Pattern p = Pattern.compile("[a-zA-Z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[A-Z][a-z0-9]+")
Pattern p = Pattern.compile("[A-Z][a-z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
SurfaceView first = (SurfaceView) findViewById(R.id.firstSurface);
SurfaceView second = (SurfaceView) findViewById(R.id.secondSurface);
Intent pickVideo = new Intent(Intent.ACTION_PICK);
xml=context.obtainStyledAttributes(attrs,R.styleable.RelativeLayoutWithForeground)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.RelativeLayoutWithForeground);
int foregroundResId = INVALID_FOREGROUND_ID;
drawable=getDrawable(getResources(),foregroundResId)
Drawable drawable = getDrawable(getResources(), foregroundResId);
Bundle args = new Bundle();
enroll=mHotwordDetector.createEnrollIntent()
Intent enroll = mHotwordDetector.createEnrollIntent();

Diff of 6722fa6e1ba728ee56d25047683b46bf3976afbe and 27a1816e90a6f1eeedda00552c75db5c261b5bd4:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 33
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 6722fa6e1ba728ee56d25047683b46bf3976afbe to 27a1816e90a6f1eeedda00552c75db5c261b5bd4

************Analysis complete************
Added generics to repository novoda/spikes = 32

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 33
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 32

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 33
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 32

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 33
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 32

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 33
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 32

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 33
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 32

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 33
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 32

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 33
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 32

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 33
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 32

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 33
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 32

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 33
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 32

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 33
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 32

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 33
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 32

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 33
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 32

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 33
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 32

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 33
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null

****Parsing for addition at revision a4dd36af4682d330d683879244b7fc8075d26ec1****

Added ApplicationTest.java to .\/spikes\ repository source files.
Added DrawerActivity.java to .\/spikes\ repository source files.
Added EarthActivity.java to .\/spikes\ repository source files.
Added SaturnActivity.java to .\/spikes\ repository source files.
Added LocalPlayerActivity.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added CastApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ComposeSmsActivity.java to .\/spikes\ repository source files.
Added HeadlessSmsSendService.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MmsReceiver.java to .\/spikes\ repository source files.
Added SmsReceiver.java to .\/spikes\ repository source files.
Added ExtendedDemoActivity.java to .\/spikes\ repository source files.
Added ExtendedDemoApplication.java to .\/spikes\ repository source files.
Added SimpleDemoActivity.java to .\/spikes\ repository source files.
Added SimpleDemoApplication.java to .\/spikes\ repository source files.
Added Binder.java to .\/spikes\ repository source files.
Added ConnectedClient.java to .\/spikes\ repository source files.
Added Connection.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnection.java to .\/spikes\ repository source files.
Added ServiceConnectionCallback.java to .\/spikes\ repository source files.
Added EasyCustomTabs.java to .\/spikes\ repository source files.
Added ActionButtonComposer.java to .\/spikes\ repository source files.
Added CloseButtonIconComposer.java to .\/spikes\ repository source files.
Added Composer.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilder.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigator.java to .\/spikes\ repository source files.
Added EasyCustomTabsWebNavigator.java to .\/spikes\ repository source files.
Added ExitAnimationsComposer.java to .\/spikes\ repository source files.
Added IntentCustomizer.java to .\/spikes\ repository source files.
Added MenuItemComposer.java to .\/spikes\ repository source files.
Added NavigationFallback.java to .\/spikes\ repository source files.
Added Navigator.java to .\/spikes\ repository source files.
Added ShowTitleComposer.java to .\/spikes\ repository source files.
Added StartAnimationsComposer.java to .\/spikes\ repository source files.
Added ToolbarColorComposer.java to .\/spikes\ repository source files.
Added UrlBarHidingComposer.java to .\/spikes\ repository source files.
Added WebNavigator.java to .\/spikes\ repository source files.
Added AvailableAppProvider.java to .\/spikes\ repository source files.
Added BestPackageFinder.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProvider.java to .\/spikes\ repository source files.
Added BinderTest.java to .\/spikes\ repository source files.
Added ConnectedClientTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnectionTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigatorTest.java to .\/spikes\ repository source files.
Added BestPackageFinderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProviderTest.java to .\/spikes\ repository source files.
Added ApiPagedChannelHistory.java to .\/spikes\ repository source files.
Added ApiPagedResponse.java to .\/spikes\ repository source files.
Added ChannelHistory.java to .\/spikes\ repository source files.
Added HistoryConverter.java to .\/spikes\ repository source files.
Added Runner.java to .\/spikes\ repository source files.
Added SlackHistoryFetcher.java to .\/spikes\ repository source files.
Added SlackWebService.java to .\/spikes\ repository source files.
Added ApiPagedResponseTest.java to .\/spikes\ repository source files.
Added MainActivityTest.java to .\/spikes\ repository source files.
Added LoremAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added BetterAccountManager.java to .\/spikes\ repository source files.
Added BetterAuthenticator.java to .\/spikes\ repository source files.
Added BetterAuthenticatorActivity.java to .\/spikes\ repository source files.
Added GertHerbAuthenticator.java to .\/spikes\ repository source files.
Added GertHerbAuthenticatorService.java to .\/spikes\ repository source files.
Added NoAccountException.java to .\/spikes\ repository source files.
Added ReactiveAuthenticatorActivity.java to .\/spikes\ repository source files.
Added Token.java to .\/spikes\ repository source files.
Added GertHerbActivity.java to .\/spikes\ repository source files.
Added GertHerbApplication.java to .\/spikes\ repository source files.
Added GertHerbAuthenticationActivity.java to .\/spikes\ repository source files.
Added TypefaceFactory.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added ViewServer.java to .\/spikes\ repository source files.
Added ViewServerManager.java to .\/spikes\ repository source files.
Added DeveloperError.java to .\/spikes\ repository source files.
Added HomeActivity.java to .\/spikes\ repository source files.
Added LoginActivity.java to .\/spikes\ repository source files.
Added LoginView.java to .\/spikes\ repository source files.
Added UserCredentials.java to .\/spikes\ repository source files.
Added FontButton.java to .\/spikes\ repository source files.
Added FontEditText.java to .\/spikes\ repository source files.
Added FontTextView.java to .\/spikes\ repository source files.
Added GithubApi.java to .\/spikes\ repository source files.
Added GithubApiFactory.java to .\/spikes\ repository source files.
Added TokenRequest.java to .\/spikes\ repository source files.
Added TokenResponse.java to .\/spikes\ repository source files.
Added Dummy.java to .\/spikes\ repository source files.
Added DummyTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MainFragment.java to .\/spikes\ repository source files.
Added Attributes.java to .\/spikes\ repository source files.
Added Coordinates.java to .\/spikes\ repository source files.
Added IndicatorCoordinatesCalculator.java to .\/spikes\ repository source files.
Added LandingStrip.java to .\/spikes\ repository source files.
Added MutableCoordinates.java to .\/spikes\ repository source files.
Added OnPagerAdapterChangedListener.java to .\/spikes\ repository source files.
Added PagerAdapterObserver.java to .\/spikes\ repository source files.
Added Scrollable.java to .\/spikes\ repository source files.
Added ScrollingPageChangeListener.java to .\/spikes\ repository source files.
Added State.java to .\/spikes\ repository source files.
Added TabsContainer.java to .\/spikes\ repository source files.
Added CustomLandingStrip.java to .\/spikes\ repository source files.
Added CustomTabActivity.java to .\/spikes\ repository source files.
Added ExampleRainbowLandingStrip.java to .\/spikes\ repository source files.
Added FixedWidthTabActivity.java to .\/spikes\ repository source files.
Added NoFragmentsSimpleTextTabActivity.java to .\/spikes\ repository source files.
Added Data.java to .\/spikes\ repository source files.
Added DemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added SmallDemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerFragment.java to .\/spikes\ repository source files.
Added DemoViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapterState.java to .\/spikes\ repository source files.
Added SimpleTextTabActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AbTestingParamsLoadedCallback.java to .\/spikes\ repository source files.
Added AyBe.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added WeakStartCallback.java to .\/spikes\ repository source files.
Added LeakActivity.java to .\/spikes\ repository source files.
Added NoLeakActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added ColorScheme.java to .\/spikes\ repository source files.
Added ColorUtils.java to .\/spikes\ repository source files.
Added DominantColorCalculator.java to .\/spikes\ repository source files.
Added FloatUtils.java to .\/spikes\ repository source files.
Added MedianCutQuantizer.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added PayPalFragment.java to .\/spikes\ repository source files.
Added PayPalHelper.java to .\/spikes\ repository source files.
Added MaxLengthMessageComposer.java to .\/spikes\ repository source files.
Added MessageComposer.java to .\/spikes\ repository source files.
Added TwitterMessageComposer.java to .\/spikes\ repository source files.
Added DisabledMruPersister.java to .\/spikes\ repository source files.
Added MruPersister.java to .\/spikes\ repository source files.
Added SharedPreferencesMruPersister.java to .\/spikes\ repository source files.
Added OnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added PriorityShareDialog.java to .\/spikes\ repository source files.
Added PrioritySharer.java to .\/spikes\ repository source files.
Added ShareTargetsAdapter.java to .\/spikes\ repository source files.
Added SimpleOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added TargetApps.java to .\/spikes\ repository source files.
Added TwitterOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AdvancedActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SimpleActivity.java to .\/spikes\ repository source files.
Added LockingActivity.java to .\/spikes\ repository source files.
Added PostLockingActivity.java to .\/spikes\ repository source files.
Added PreLockingActivity.java to .\/spikes\ repository source files.
Added DummyAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added NovoStaggeredGridView.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SpikeApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SwipeableView.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MyClass.java to .\/spikes\ repository source files.
Added MyClassTest.java to .\/spikes\ repository source files.
Added MyAndroidClassTest.java to .\/spikes\ repository source files.
Added RobolectricGradleTestRunner.java to .\/spikes\ repository source files.
Added Mapper.java to .\/spikes\ repository source files.
Added Query.java to .\/spikes\ repository source files.
Added TypedResolver.java to .\/spikes\ repository source files.
Added CursorList.java to .\/spikes\ repository source files.
Added CursorListIterator.java to .\/spikes\ repository source files.
Added CursorMarshaller.java to .\/spikes\ repository source files.
Added EmptyListIterator.java to .\/spikes\ repository source files.
Added ReflectionCursorMarshaller.java to .\/spikes\ repository source files.
Added RichClass.java to .\/spikes\ repository source files.
Added Setter.java to .\/spikes\ repository source files.
Added Function.java to .\/spikes\ repository source files.
Added TypedElementLoader.java to .\/spikes\ repository source files.
Added TypedLoader.java to .\/spikes\ repository source files.
Added Marshaller.java to .\/spikes\ repository source files.
Added ObjectMapper.java to .\/spikes\ repository source files.
Added TypedActivity.java to .\/spikes\ repository source files.
Added StringUtil.java to .\/spikes\ repository source files.
Added MyObject.java to .\/spikes\ repository source files.
Added MediaPlayerSwitcherActivity.java to .\/spikes\ repository source files.
Added VideoPlayerService.java to .\/spikes\ repository source files.
Added DemoActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added RecognitionService.java to .\/spikes\ repository source files.
Added SessionService.java to .\/spikes\ repository source files.
Added SettingsActivity.java to .\/spikes\ repository source files.
Added SmartContextInteractionService.java to .\/spikes\ repository source files.
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
String[] planetTitles = new String[]{"Earth", "Saturn"};
DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
ListView drawerList = (ListView) findViewById(R.id.left_drawer);
Intent intent;
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close);
b=getIntent().getExtras()
Bundle b = getIntent().getExtras();
mShouldStartPlayback=b.getBoolean("shouldStart")
boolean mShouldStartPlayback = b.getBoolean("shouldStart");
startPosition=b.getInt("startPosition",0)
int startPosition = b.getInt("startPosition", 0);
currentPos=mVideoView.getCurrentPosition()
int currentPos = mVideoView.getCurrentPosition();
String msg;
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, mDisplaySize.y + getActionBar().getHeight());
mm=mSelectedMedia.getMetadata()
MediaMetadata mm = mSelectedMedia.getMetadata();
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, (int) (mDisplaySize.x * ASPECT_RATIO));
WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
width=display.getWidth()
int width = display.getWidth();
height=display.getHeight()
int height = display.getHeight();
int resourceId = 0;
String videoUrl = "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4#sthash.rJ5rPZy8.dpuf";
String title = "Jahre Philharmonie";
String description = "Awesome film you must watch!";
String author = "Blundell";
String thumbUrl = "http://www.ustream.tv/blog/wp-content/uploads/2013/10/simply-go-live.png";
MediaMetadata metadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE);
mediaInfo=new MediaInfo.Builder(videoUrl).setMetadata(metadata).setStreamType(MediaInfo.STREAM_TYPE_BUFFERED).setContentType("video/mp4").build()
MediaInfo mediaInfo = new MediaInfo.Builder(videoUrl)
                        .setMetadata(metadata)
                        .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)
                        .setContentType("video/mp4")
                        .build();
Intent intent = new Intent(MainActivity.this, LocalPlayerActivity.class);
preferences=getPreferences(MODE_PRIVATE)
SharedPreferences preferences = getPreferences(MODE_PRIVATE);
defaultSmsPackage=Telephony.Sms.getDefaultSmsPackage(this)
String defaultSmsPackage = Telephony.Sms.getDefaultSmsPackage(this);
Intent intent = new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
availableAppProvider=EasyCustomTabs.getInstance()
AvailableAppProvider availableAppProvider = EasyCustomTabs.getInstance();
ConnectedClient connectedClient = new ConnectedClient(client);
binder=Binder.newInstance()
Binder binder = Binder.newInstance();
List<Composer> composerList = new ArrayList<>();
customTabsSession=connection.newSession()
CustomTabsSession customTabsSession = connection.newSession();
CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(customTabsSession);
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
context=EasyCustomTabs.getInstance().getContext()
Context context = EasyCustomTabs.getInstance().getContext();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
packagesSupportingCustomTabs=getPackagesSupportingCustomTabs()
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
defaultPackage=getDefaultPackage()
String defaultPackage = getDefaultPackage();
defaultActivityInfo=packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK,0)
ResolveInfo defaultActivityInfo = packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK, 0);
String packageName = defaultActivityInfo.activityInfo.packageName;
resolvedInfoList=packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK,0)
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<String> packagesSupportingCustomTabs = new ArrayList<>();
Intent serviceIntent = new Intent();
bestPackageFinder=BestPackageFinder.newInstance()
BestPackageFinder bestPackageFinder = BestPackageFinder.newInstance();
packageName=bestPackageFinder.findBestPackage()
String packageName = bestPackageFinder.findBestPackage();
resolveInfo=createResolveInfoFor(packageName)
ResolveInfo resolveInfo = createResolveInfoFor(packageName);
ResolveInfo resolveInfo = new ResolveInfo();
List<ResolveInfo> resolveInfoList = new ArrayList<>();
defaultPackageResolveInfo=createResolveInfoFor(packageName)
ResolveInfo defaultPackageResolveInfo = createResolveInfoFor(packageName);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
oldestApiMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage oldestApiMessage = apiMessages.get(apiMessages.size() - 1);
String lastResponseEpochTime = oldestApiMessage.timeStamp;
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
latestMessage=latestMessages.get(latestMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage latestMessage = latestMessages.get(latestMessages.size() - 1);
latestMessageDateTime=convertToLocalDateTime(latestMessage.timeStamp)
LocalDateTime latestMessageDateTime = convertToLocalDateTime(latestMessage.timeStamp);
List<ChannelHistory.Message> messages = new ArrayList<>();
historyFrom=getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1))
LocalDateTime historyFrom = getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1));
historyTo=getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0))
LocalDateTime historyTo = getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0));
String text = apiMessage.text;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
lastMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage lastMessage = apiMessages.get(apiMessages.size() - 1);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
firstMessage=apiMessages.get(0)
ApiPagedChannelHistory.ApiMessage firstMessage = apiMessages.get(0);
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
String slackToken = args[0];
retrofit=new Retrofit.Builder().baseUrl("https://slack.com/api/").addConverterFactory(GsonConverterFactory.create()).build()
Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://slack.com/api/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();
slackWebService=retrofit.create(SlackWebService.class)
SlackWebService slackWebService = retrofit.create(SlackWebService.class);
slackHistoryFetcher=SlackHistoryFetcher.from(slackWebService,slackToken)
SlackHistoryFetcher slackHistoryFetcher = SlackHistoryFetcher.from(slackWebService, slackToken);
start=LocalDateTime.now()
LocalDateTime start = LocalDateTime.now();
end=LocalDateTime.now().minusDays(7)
LocalDateTime end = LocalDateTime.now().minusDays(7);
channelHistory=slackHistoryFetcher.getChannelHistory(start,end)
ChannelHistory channelHistory = slackHistoryFetcher.getChannelHistory(start, end);
HistoryConverter historyConverter = new HistoryConverter();
ApiPagedResponse apiPagedResponse = new ApiPagedResponse(start);
response=fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime())
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
apiPagedChannelHistory=response.body()
ApiPagedChannelHistory apiPagedChannelHistory = response.body();
channelHistory=slackWebService.getChannelHistory(slackToken,channel,lastResponseEpochTime,NUMBER_OF_RESULTS)
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
ApiPagedChannelHistory apiPagedChannelHistory = new ApiPagedChannelHistory();
ApiPagedChannelHistory.ApiMessage apiMessage = new ApiPagedChannelHistory.ApiMessage();
final TextView textView = new TextView(context);
emptyView=findViewById(R.id.empty_view)
View emptyView = findViewById(R.id.empty_view);
final Integer action = values[0];
LoremAdapter loremAdapter = new LoremAdapter();
accounts=accountManager.getAccountsByType(accountType)
Account[] accounts = accountManager.getAccountsByType(accountType);
Bundle result;
Bundle result;
Bundle result = new Bundle();
activity=createLoginIntent(context,accountType,authTokenType,requiredFeatures,options)
Intent activity = createLoginIntent(context, accountType, authTokenType, requiredFeatures, options);
Bundle bundle = new Bundle();
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
accounts=accountManager.getAccountsByType(authTokenType)
Account[] accounts = accountManager.getAccountsByType(authTokenType);
bundle=createResponseBundle(token)
Bundle bundle = createResponseBundle(token);
accountManager=AccountManager.get(this.getApplicationContext())
AccountManager accountManager = AccountManager.get(this.getApplicationContext());
Account account = new Account(token.getUserName(), getAccountName());
Bundle bundle = new Bundle();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
GertHerbAuthenticator authenticator = new GertHerbAuthenticator(this);
fontId=getFontId(context,attrs)
int fontId = getFontId(context, attrs);
fontType=getFontType(fontId)
FontType fontType = getFontType(fontId);
typedArray=context.obtainStyledAttributes(attrs,R.styleable.CustomTextAppearance)
TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CustomTextAppearance);
typeface=createTypeFace(context,fontType)
Typeface typeface = createTypeFace(context, fontType);
info=context.getApplicationInfo()
ApplicationInfo info = context.getApplicationInfo();
name=activity.getTitle().toString()
String name = activity.getTitle().toString();
client=mServer.accept()
Socket client = mServer.accept();
boolean result;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
BufferedReader in = null;
request=in.readLine()
final String request = in.readLine();
String command;
String parameters;
index=request.indexOf(' ')
int index = request.indexOf(' ');
boolean result;
boolean success = true;
BufferedWriter out = null;
index=parameters.indexOf(' ')
int index = parameters.indexOf(' ');
code=parameters.substring(0,index)
final String code = parameters.substring(0, index);
int hashCode = (int) Long.parseLong(code, 16);
window=findWindow(hashCode)
final View window = findWindow(hashCode);
dispatch=ViewDebug.class.getDeclaredMethod("dispatchCommand",View.class,String.class,String.class,OutputStream.class)
final Method dispatch = ViewDebug.class.getDeclaredMethod("dispatchCommand",
                        View.class, String.class, String.class, OutputStream.class);
View window = null;
boolean result = true;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
boolean result = true;
String focusName = null;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
View focusedWindow = null;
BufferedWriter out = null;
boolean needWindowListUpdate = false;
boolean needFocusedWindowUpdate = false;
BetterAccountManager accountManager = new BetterAccountManager(this, getString(R.string.account_type), getString(R.string.token_type), null);
loginView=Views.findById(this,R.id.login_view)
LoginView loginView = Views.findById(this, R.id.login_view);
authorizationApi=new GithubApiFactory().createAuthorizationApi(credentials.username,credentials.password)
GithubApi authorizationApi = new GithubApiFactory().createAuthorizationApi(credentials.username, credentials.password);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
Endpoint endpoint = new Endpoint() {
            @Override
            public String getUrl() {
                return GITHUB_API_URL;
            }

            @Override
            public String getName() {
                return "Live";
            }
        };
interceptor=createAuthorizationRequestInterceptor(username,password)
RequestInterceptor interceptor = createAuthorizationRequestInterceptor(username, password);
restAdapter=createRestAdapter(endpoint,interceptor)
RestAdapter restAdapter = createRestAdapter(endpoint, interceptor);
Dummy dummy = new Dummy();
result=dummy.explodes()
boolean result = dummy.explodes();
String base64EncodedPublicKey = "CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE";
premiumPurchase=inventory.getPurchase(SKU_PREMIUM)
Purchase premiumPurchase = inventory.getPurchase(SKU_PREMIUM);
infiniteGasPurchase=inventory.getPurchase(SKU_INFINITE_GAS)
Purchase infiniteGasPurchase = inventory.getPurchase(SKU_INFINITE_GAS);
gasPurchase=inventory.getPurchase(SKU_GAS)
Purchase gasPurchase = inventory.getPurchase(SKU_GAS);
String payload = "";
String payload = "";
String payload = "";
payload=p.getDeveloperPayload()
String payload = p.getDeveloperPayload();
int index = mTank >= TANK_RES_IDS.length ? TANK_RES_IDS.length - 1 : mTank;
AlertDialog.Builder bld = new AlertDialog.Builder(this);
spe=getPreferences(MODE_PRIVATE).edit()
SharedPreferences.Editor spe = getPreferences(MODE_PRIVATE).edit();
sp=getPreferences(MODE_PRIVATE)
SharedPreferences sp = getPreferences(MODE_PRIVATE);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                                  + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                    | ((source[d + 1 + off] << 24) >>> 16)
                    | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                    | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                                   "-1002:Bad response received/" +
                                   "-1003:Purchase signature verification failed/" +
                                   "-1004:Send intent failed/" +
                                   "-1005:User cancelled/" +
                                   "-1006:Unknown purchase response/" +
                                   "-1007:Missing token/" +
                                   "-1008:Unknown error/" +
                                   "-1009:Subscriptions not available/" +
                                   "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(),
                    itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                        | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                        | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                            | ((source[d + 1 + off] << 24) >>> 16)
                            | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                            | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                "-1002:Bad response received/" +
                "-1003:Purchase signature verification failed/" +
                "-1004:Send intent failed/" +
                "-1005:User cancelled/" +
                "-1006:Unknown purchase response/" +
                "-1007:Missing token/" +
                "-1008:Unknown error/" +
                "-1009:Subscriptions not available/" +
                "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(), itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
responseCode=result.getResponse()
int responseCode = result.getResponse();
sku=purchase.getSku()
String sku = purchase.getSku();
skuDetails=inv.getSkuDetails(sku)
SkuDetails skuDetails = inv.getSkuDetails(sku);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
Button purchaseFiveButton = (Button) rootView.findViewById(R.id.fragment_main_button_purchase_five_coins);
xml=context.obtainStyledAttributes(attrs,R.styleable.LandingStrip)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.LandingStrip);
tabLayoutId=xml.getResourceId(R.styleable.LandingStrip_tabLayoutId,MISSING_TAB_LAYOUT_ID)
int tabLayoutId = xml.getResourceId(R.styleable.LandingStrip_tabLayoutId, MISSING_TAB_LAYOUT_ID);
indicatorColour=xml.getResourceId(R.styleable.LandingStrip_indicatorColor,DEFAULT_INDICATOR_COLOUR)
int indicatorColour = xml.getResourceId(R.styleable.LandingStrip_indicatorColor, DEFAULT_INDICATOR_COLOUR);
indicatorHeight=getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight,DEFAULT_INDICATOR_HEIGHT,xml)
int indicatorHeight = getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight, DEFAULT_INDICATOR_HEIGHT, xml);
tabsPaddingLeft=getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingLeft = getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding, DEFAULT_TABS_PADDING, xml);
tabsPaddingRight=getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingRight = getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding, DEFAULT_TABS_PADDING, xml);
MutableCoordinates drawCurrentTabCoordinates = new MutableCoordinates();
MutableCoordinates drawNextTabCoordinates = new MutableCoordinates();
MutableCoordinates drawMovingIndicatorCoordinates = new MutableCoordinates();
currentTab=tabsContainer.getTabAt(currentPosition)
View currentTab = tabsContainer.getTabAt(currentPosition);
currentTabStart=currentTab.getLeft()
float currentTabStart = currentTab.getLeft();
currentTabEnd=currentTab.getRight()
float currentTabEnd = currentTab.getRight();
nextTab=tabsContainer.getTabAt(currentPosition + 1)
View nextTab = tabsContainer.getTabAt(currentPosition + 1);
nextTabPositionOffset=getFractionFrom(pagePositionOffset)
float nextTabPositionOffset = getFractionFrom(pagePositionOffset);
indicatorStart=getIndicatorPosition(nextTab.getStart(),pagePositionOffset,currentTab.getStart(),nextTabPositionOffset)
float indicatorStart = getIndicatorPosition(nextTab.getStart(), pagePositionOffset, currentTab.getStart(), nextTabPositionOffset);
indicatorEnd=getIndicatorPosition(nextTab.getEnd(),pagePositionOffset,currentTab.getEnd(),nextTabPositionOffset)
float indicatorEnd = getIndicatorPosition(nextTab.getEnd(), pagePositionOffset, currentTab.getEnd(), nextTabPositionOffset);
height=getHeight()
int height = getHeight();
tabCount=pagerAdapter.getCount()
int tabCount = pagerAdapter.getCount();
title=pagerAdapter.getPageTitle(position)
CharSequence title = pagerAdapter.getPageTitle(position);
inflatedTabView=tabsContainer.inflateTab(layoutInflater,attributes.getTabLayoutId())
View inflatedTabView = tabsContainer.inflateTab(layoutInflater, attributes.getTabLayoutId());
int position = (int) view.getTag(TAG_KEY_POSITION);
scrollOffset=getHorizontalScrollOffset(position,positionOffset)
int scrollOffset = getHorizontalScrollOffset(position, positionOffset);
newScrollX=calculateScrollOffset(position,scrollOffset,positionOffset)
float newScrollX = calculateScrollOffset(position, scrollOffset, positionOffset);
tabWidth=tabsContainer.getTabAt(position).getWidth()
int tabWidth = tabsContainer.getTabAt(position).getWidth();
tabForPosition=tabsContainer.getTabAt(position)
View tabForPosition = tabsContainer.getTabAt(position);
float tabStartX = tabForPosition.getLeft() + scrollOffset;
int viewMiddleOffset = getTabParentWidth() / 2;
float tabCenterOffset = (tabForPosition.getRight() - tabForPosition.getLeft()) * 0.5F;
nextTabDelta=getNextTabDelta(position,pagerOffset,tabForPosition)
float nextTabDelta = getNextTabDelta(position, pagerOffset, tabForPosition);
LinearLayout tabsContainerView = new LinearLayout(context);
tab=getTabAt(index)
View tab = getTabAt(index);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
position=indicatorCoordinates.getStart()
float position = indicatorCoordinates.getStart();
lastTabOffset=((ViewGroup)getChildAt(0)).getChildAt(getChildCount() - 1).getWidth()
float lastTabOffset = ((ViewGroup) getChildAt(0)).getChildAt(getChildCount() - 1).getWidth();
frequency=getOneCycle(lastTabOffset)
float frequency = getOneCycle(lastTabOffset);
r=toHex(calculateColour(position,frequency,PHASE_RED,AMPLITUDE,CENTER_FREQUENCY))
String r = toHex(calculateColour(position, frequency, PHASE_RED, AMPLITUDE, CENTER_FREQUENCY));
g=toHex(calculateColour(position,frequency,PHASE_GREEN,AMPLITUDE,CENTER_FREQUENCY))
String g = toHex(calculateColour(position, frequency, PHASE_GREEN, AMPLITUDE, CENTER_FREQUENCY));
b=toHex(calculateColour(position,frequency,PHASE_BLUE,AMPLITUDE,CENTER_FREQUENCY))
String b = toHex(calculateColour(position, frequency, PHASE_BLUE, AMPLITUDE, CENTER_FREQUENCY));
height=getHeight()
int height = getHeight();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPagerFragment viewPagerFragment = new ViewPagerFragment();
Bundle bundle = new Bundle();
TextView view = (TextView) layoutInflater.inflate(R.layout.view_demo, container, false);
currentPosition=viewPagerAdapterState.getCurrentPosition()
int currentPosition = viewPagerAdapterState.getCurrentPosition();
view=getView(container,position)
View view = getView(container, position);
parcelableSparseArray=viewPagerAdapterState.get(position)
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
View view = (View) object;
SparseArray<Parcelable> viewState = new SparseArray<>();
position=entry.getValue()
int position = entry.getValue();
view=entry.getKey()
View view = entry.getKey();
bundle=in.readBundle()
Bundle bundle = in.readBundle();
Map<Integer, SparseArray<Parcelable>> viewStates = new HashMap<>(bundle.keySet().size());
sparseParcelableArray=bundle.getSparseParcelableArray(key)
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
primaryItemPosition=in.readInt()
int primaryItemPosition = in.readInt();
Bundle bundle = new Bundle();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
final TextView abText = (TextView) findViewById(R.id.ab_text);
final AyBe ayBe = new AyBe();
id=item.getItemId()
int id = item.getItemId();
callback=weakCallback.get()
AbTestingParamsLoadedCallback callback = weakCallback.get();
WeakReference<NoLeakActivity> weakNoLeakActivity = new WeakReference<NoLeakActivity>(noLeakActivity);
noLeakActivity=weakNoLeakActivity.get()
NoLeakActivity noLeakActivity = weakNoLeakActivity.get();
final float inverseRatio = 1f - ratio;
float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRatio);
float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRatio);
float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRatio);
hsv=node.getHsv()
float[] hsv = node.getHsv();
width=bitmap.getWidth()
final int width = bitmap.getWidth();
height=bitmap.getHeight()
final int height = bitmap.getHeight();
final int[] rgbPixels = new int[width * height];
final MedianCutQuantizer mcq = new MedianCutQuantizer(rgbPixels, NUM_COLORS);
primaryAccentColor=findPrimaryAccentColor()
final ColorNode primaryAccentColor = findPrimaryAccentColor();
secondaryAccentColor=findSecondaryAccentColor(primaryAccentColor)
final ColorNode secondaryAccentColor = findSecondaryAccentColor(primaryAccentColor);
tertiaryAccentColor=findTertiaryAccentColor(primaryAccentColor,secondaryAccentColor)
final int tertiaryAccentColor = findTertiaryAccentColor(
                primaryAccentColor, secondaryAccentColor);
primaryTextColor=findPrimaryTextColor(primaryAccentColor)
final int primaryTextColor = findPrimaryTextColor(primaryAccentColor);
secondaryTextColor=findSecondaryTextColor(primaryAccentColor)
final int secondaryTextColor = findSecondaryTextColor(primaryAccentColor);
final float primaryHue = primary.getHsv()[0];
final float candidateHue = candidate.getHsv()[0];
copy=Arrays.copyOf(palette,palette.length)
final MedianCutQuantizer.ColorNode[] copy = Arrays.copyOf(palette, palette.length);
maxCount=palette[0].getCount()
final float maxCount = palette[0].getCount();
lhsWeight=calculateWeight(lhs,maxCount)
final float lhsWeight = calculateWeight(lhs, maxCount);
rhsWeight=calculateWeight(rhs,maxCount)
final float rhsWeight = calculateWeight(rhs, maxCount);
float sum = 0;
float sumWeight = 0;
float value = values[i];
float weight = values[i + 1];
ColorHistogram colorHist = new ColorHistogram(pixels);
K=colorHist.getNumberOfColors()
int K = colorHist.getNumberOfColors();
ColorNode[] rCols = null;
rgb=colorHist.getColor(i)
int rgb = colorHist.getColor(i);
cnt=colorHist.getCount(i)
int cnt = colorHist.getCount(i);
ColorBox initialBox = new ColorBox(0, K - 1, 0);
List<ColorBox> colorSet = new ArrayList<ColorBox>();
int k = 1;
boolean done = false;
nextBox=findBoxToSplit(colorSet)
ColorBox nextBox = findBoxToSplit(colorSet);
newBox=nextBox.splitBox()
ColorBox newBox = nextBox.splitBox();
color=findClosestColor(pixels[i])
ColorNode color = findClosestColor(pixels[i]);
idx=findClosestColorIndex(rgb)
int idx = findClosestColorIndex(rgb);
red=Color.red(rgb)
int red = Color.red(rgb);
grn=Color.green(rgb)
int grn = Color.green(rgb);
blu=Color.blue(rgb)
int blu = Color.blue(rgb);
int minIdx = 0;
int minDistance = Integer.MAX_VALUE;
ColorNode color = quantColors[i];
d2=color.distance2(red,grn,blu)
int d2 = color.distance2(red, grn, blu);
ColorBox boxToSplit = null;
int minLevel = Integer.MAX_VALUE;
n=colorBoxes.size()
int n = colorBoxes.size();
ColorNode[] avgColors = new ColorNode[n];
int i = 0;
int dr = this.red - red;
int dg = this.grn - grn;
int db = this.blu - blu;
ColorNode color = imageColors[i];
int r = color.red;
int g = color.grn;
int b = color.blu;
dim=getLongestColorDimension()
ColorDimension dim = getLongestColorDimension();
med=findMedian(dim)
int med = findMedian(dim);
int nextLevel = level + 1;
ColorBox newBox = new ColorBox(med + 1, upper, nextLevel);
int rLength = rmax - rmin;
int gLength = gmax - gmin;
int bLength = bmax - bmin;
int half = count / 2;
int nPixels, median;
int rSum = 0;
int gSum = 0;
int bSum = 0;
int n = 0;
ColorNode ci = imageColors[i];
int cnt = ci.cnt;
double nd = n;
int avgRed = (int) (0.5 + rSum / nd);
int avgGrn = (int) (0.5 + gSum / nd);
int avgBlu = (int) (0.5 + bSum / nd);
s=this.getClass().getSimpleName()
String s = this.getClass().getSimpleName();
int i = 0;
int N = pixelsOrig.length;
int[] pixelsCpy = new int[N];
int k = -1;
int curColor = -1;
int nColors = k + 1;
id=item.getItemId()
int id = item.getItemId();
Intent intent = new Intent();
bitmap=((BitmapDrawable)imageView.getDrawable()).getBitmap()
Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap();
DominantColorCalculator dominantColorCalculator = new DominantColorCalculator(bitmap);
selectedImageUri=data.getData()
Uri selectedImageUri = data.getData();
selectedImagePath=getPath(selectedImageUri)
String selectedImagePath = getPath(selectedImageUri);
String[] projection = {MediaStore.Images.Media.DATA};
cursor=managedQuery(uri,projection,null,null,null)
Cursor cursor = managedQuery(uri, projection, null, null, null);
column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)
int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
LinearLayout rootView = (LinearLayout) inflater.inflate(R.layout.fragment_main, container, false);
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
preapprovalButton=payPal.getCheckoutButton(getActivity(),PayPal.BUTTON_194x37,CheckoutButton.TEXT_PAY)
CheckoutButton preapprovalButton = payPal.getCheckoutButton(getActivity(), PayPal.BUTTON_194x37, CheckoutButton.TEXT_PAY);
preapprovalIntent=payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY)
Intent preapprovalIntent = payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY);
String resultTitle = "";
String resultInfo = "";
String resultExtra = "";
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
PayPalPreapproval preapproval = new PayPalPreapproval();
preapproval=createPreapproval(preapprovalKey)
PayPalPreapproval preapproval = createPreapproval(preapprovalKey);
Bundle bundle = new Bundle();
int availableLength = maxLength;
StringBuilder stringBuilder = new StringBuilder(maxLength);
prefixAndSuffixLength=computeAppendedLengthIncludingSeparatorSpaces(prefix,suffix)
int prefixAndSuffixLength = computeAppendedLengthIncludingSeparatorSpaces(prefix, suffix);
urlLength=computeUrlLengthIncludingSeparatorSpace(url)
int urlLength = computeUrlLengthIncludingSeparatorSpace(url);
trimmedSubject=ellipsizeTextIfExceedsMaxLength(subject,availableLength)
String trimmedSubject = ellipsizeTextIfExceedsMaxLength(subject, availableLength);
int length = 0;
preferences=context.getSharedPreferences(MRU_PREFERENCES,Context.MODE_PRIVATE)
SharedPreferences preferences = context.getSharedPreferences(MRU_PREFERENCES, Context.MODE_PRIVATE);
args=getArguments()
Bundle args = getArguments();
themeResId=getThemeResIdIfProvidedIn(args)
int themeResId = getThemeResIdIfProvidedIn(args);
title=getTitleIfProvidedIn(args)
CharSequence title = getTitleIfProvidedIn(args);
builder=createDialogBuilder(themeResId).setCancelable(true).setView(dialogView)
AlertDialog.Builder builder = createDialogBuilder(themeResId)
                .setCancelable(true)
                .setView(dialogView);
inflater=getActivity().getLayoutInflater()
LayoutInflater inflater = getActivity().getLayoutInflater();
GridView gridView = (GridView) rootView.findViewById(R.id.ps__dialog_grid);
targetApps=extractTargetAppsFrom(args)
TargetApps targetApps = extractTargetAppsFrom(args);
allShareTargets=getAvailableShareTargets(sharingIntent)
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
priorityAppInfos=createPriorityResolveInfoList(targetApps,allShareTargets)
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
otherAppInfos=createOtherAppsResolveInfoList(priorityAppInfos,allShareTargets)
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
resolveInfos=targetApps.extractTargetResolveInfosFrom(allShareTargets)
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
mruResolveInfo=findMruResolveInfoIn(allShareTargets)
ResolveInfo mruResolveInfo = findMruResolveInfoIn(allShareTargets);
List<ResolveInfo> otherAppsInfos = new ArrayList<ResolveInfo>(allAppInfos);
mruPackageName=persister.getLastUsedTarget()
String mruPackageName = persister.getLastUsedTarget();
String packageName = resolveInfo.activityInfo.packageName;
packageManager=getActivity().getPackageManager()
PackageManager packageManager = getActivity().getPackageManager();
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
View buttonStrip = (View) showMoreButton.getParent();
gridView=getGridView()
GridView gridView = getGridView();
intent=wrapIntentWithExplicitTargetComponentForItem(position,sharingIntent)
Intent intent = wrapIntentWithExplicitTargetComponentForItem(position, sharingIntent);
Intent intent = new Intent(sharingIntent);
ActivityInfo activity = adapter.getItem(position).activityInfo;
ComponentName name = new ComponentName(activity.applicationInfo.packageName, activity.name);
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
PriorityShareDialog dialog = new PriorityShareDialog();
Bundle args = new Bundle();
sharingIntent=createSharingIntent()
Intent sharingIntent = createSharingIntent();
fragmentManager=activity.getFragmentManager()
FragmentManager fragmentManager = activity.getFragmentManager();
Intent intent = new Intent(Intent.ACTION_SEND);
dialog=new PriorityShareDialog.Builder().setTitle(title).setTargetApps(targetApps).setSharingIntent(sharingIntent).setOnPrepareSharingIntentListener(listener).setShowMostRecentlyUsed(showMostRecentlyUsed).build()
PriorityShareDialog dialog = new PriorityShareDialog.Builder()
                .setTitle(title)
                .setTargetApps(targetApps)
                .setSharingIntent(sharingIntent)
                .setOnPrepareSharingIntentListener(listener)
                .setShowMostRecentlyUsed(showMostRecentlyUsed)
                .build();
PrioritySharer prioritySharer = new PrioritySharer();
prioritySharer=build()
PrioritySharer prioritySharer = build();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
layoutInflater=LayoutInflater.from(context)
LayoutInflater layoutInflater = LayoutInflater.from(context);
iconSizePx=getIconSizePx(context.getResources())
int iconSizePx = getIconSizePx(context.getResources());
ArrayList<ResolveInfo> sortedList = new ArrayList<ResolveInfo>(resolveInfoList);
int otherAppsCountMaybe = showAllApps ? otherAppInfos.size() : 0;
firstOtherAppsItemPosition=priorityAppInfos.size()
int firstOtherAppsItemPosition = priorityAppInfos.size();
int offsetPosition = position - firstOtherAppsItemPosition;
TextView textView;
textView=initializeItemViewIfNecessary(convertView,R.layout.ps__grid_item_share,parent)
TextView textView = initializeItemViewIfNecessary(convertView, R.layout.ps__grid_item_share, parent);
info=getItem(position)
ResolveInfo info = getItem(position);
icon=info.loadIcon(packageManager)
Drawable icon = info.loadIcon(packageManager);
arraySize=in.readInt()
int arraySize = in.readInt();
String[] packageNames = new String[arraySize];
arraySize=targetPackages.size()
int arraySize = targetPackages.size();
String[] packagesArray = new String[arraySize];
SparseArray<ResolveInfo> matchedResolveInfos = new SparseArray<ResolveInfo>(targetPackages.size());
String packageName = info.activityInfo.packageName;
index=indexOfItemInto(packageName,targetPackages)
int index = indexOfItemInto(packageName, targetPackages);
sparseArraySize=sparseArray.size()
int sparseArraySize = sparseArray.size();
ArrayList<T> list = new ArrayList<T>(sparseArraySize);
int i = 0;
originalSubject=intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT)
CharSequence originalSubject = intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT);
String subject = originalSubject != null ? originalSubject.toString() : null;
composer=createComposer()
MessageComposer composer = createComposer();
component=intent.getComponent()
ComponentName component = intent.getComponent();
targetPackageName=component.getPackageName()
String targetPackageName = component.getPackageName();
adapter=ArrayAdapter.createFromResource(this,R.array.target_apps,android.R.layout.simple_spinner_item)
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
EditText text = (EditText) findViewById(R.id.text);
EditText title = (EditText) findViewById(R.id.title);
EditText mimeType = (EditText) findViewById(R.id.mime_type);
EditText dataUri = (EditText) findViewById(R.id.data_uri);
Switch showMostRecentlyUsed = (Switch) findViewById(R.id.show_most_recently_used);
uriString=dataUri.getText().toString()
String uriString = dataUri.getText().toString();
EditText text = (EditText) findViewById(R.id.text);
TextView textView = (TextView) convertView.findViewById(R.id.positionView);
colorView=convertView.findViewById(R.id.colorView)
View colorView = convertView.findViewById(R.id.colorView);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
offset=headerPlaceholder.getTop()
int offset = headerPlaceholder.getTop();
Integer item = COLORS[position];
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
firstVisiblePosition=grid.getFirstVisiblePosition()
int firstVisiblePosition = grid.getFirstVisiblePosition();
inflate=getViewForPosition(container,position)
View inflate = getViewForPosition(container, position);
id=item.getItemId()
int id = item.getItemId();
MyActivity activity = new MyActivity();
String manifestProperty = "../app/src/main/AndroidManifest.xml";
String resProperty = "../app/src/main/res";
cursor=resolver.query(uri,projection,selection,selectionArgs,null)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, null);
cursor=resolver.query(uri,projection,selection,selectionArgs,sortOrder)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, sortOrder);
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=richClass.setter(name)
Method setter = richClass.setter(name);
T obj;
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=methodsByName.get(name)
Method setter = methodsByName.get(name);
int type = TYPE_INT;
Class<?> t = setter.getParameterTypes()[0];
Class<?> t = setter.getParameterTypes()[0];
cursorType=cursor.getType(index)
final int cursorType = cursor.getType(index);
final Object obj;
s=f.getAnnotation(Mapper.class)
Mapper s = f.getAnnotation(Mapper.class);
mm=m.getAnnotation(Mapper.class)
Mapper mm = m.getAnnotation(Mapper.class);
methodName=StringUtil.asCamelifySetMethod(what)
String methodName = StringUtil.asCamelifySetMethod(what);
cursor=getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,null,null,null,null)
Cursor cursor = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
now=System.currentTimeMillis()
long now = System.currentTimeMillis();
List<Contact2> typedCursor = new CursorList<Contact2>(cursor, Contact2.class);
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[a-zA-Z0-9]+")
Pattern p = Pattern.compile("[a-zA-Z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[A-Z][a-z0-9]+")
Pattern p = Pattern.compile("[A-Z][a-z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
SurfaceView first = (SurfaceView) findViewById(R.id.firstSurface);
SurfaceView second = (SurfaceView) findViewById(R.id.secondSurface);
Intent pickVideo = new Intent(Intent.ACTION_PICK);
Bundle args = new Bundle();
enroll=mHotwordDetector.createEnrollIntent()
Intent enroll = mHotwordDetector.createEnrollIntent();

Diff of a4dd36af4682d330d683879244b7fc8075d26ec1 and feb8422a7e9e63f8924b0506f78a38c869f98339:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 33
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision a4dd36af4682d330d683879244b7fc8075d26ec1 to feb8422a7e9e63f8924b0506f78a38c869f98339

************Analysis complete************
Added generics to repository novoda/spikes = 32

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 33
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 32

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 33
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 32

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 33
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 32

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 33
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null

****Parsing for addition at revision f8ada24723a674bda778a165c0dd4b185b568761****

Added ApplicationTest.java to .\/spikes\ repository source files.
Added DrawerActivity.java to .\/spikes\ repository source files.
Added EarthActivity.java to .\/spikes\ repository source files.
Added SaturnActivity.java to .\/spikes\ repository source files.
Added LocalPlayerActivity.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added CastApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ComposeSmsActivity.java to .\/spikes\ repository source files.
Added HeadlessSmsSendService.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MmsReceiver.java to .\/spikes\ repository source files.
Added SmsReceiver.java to .\/spikes\ repository source files.
Added ExtendedDemoActivity.java to .\/spikes\ repository source files.
Added ExtendedDemoApplication.java to .\/spikes\ repository source files.
Added SimpleDemoActivity.java to .\/spikes\ repository source files.
Added SimpleDemoApplication.java to .\/spikes\ repository source files.
Added Binder.java to .\/spikes\ repository source files.
Added ConnectedClient.java to .\/spikes\ repository source files.
Added Connection.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnection.java to .\/spikes\ repository source files.
Added ServiceConnectionCallback.java to .\/spikes\ repository source files.
Added EasyCustomTabs.java to .\/spikes\ repository source files.
Added ActionButtonComposer.java to .\/spikes\ repository source files.
Added CloseButtonIconComposer.java to .\/spikes\ repository source files.
Added Composer.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilder.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigator.java to .\/spikes\ repository source files.
Added EasyCustomTabsWebNavigator.java to .\/spikes\ repository source files.
Added ExitAnimationsComposer.java to .\/spikes\ repository source files.
Added IntentCustomizer.java to .\/spikes\ repository source files.
Added MenuItemComposer.java to .\/spikes\ repository source files.
Added NavigationFallback.java to .\/spikes\ repository source files.
Added Navigator.java to .\/spikes\ repository source files.
Added ShowTitleComposer.java to .\/spikes\ repository source files.
Added StartAnimationsComposer.java to .\/spikes\ repository source files.
Added ToolbarColorComposer.java to .\/spikes\ repository source files.
Added UrlBarHidingComposer.java to .\/spikes\ repository source files.
Added WebNavigator.java to .\/spikes\ repository source files.
Added AvailableAppProvider.java to .\/spikes\ repository source files.
Added BestPackageFinder.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProvider.java to .\/spikes\ repository source files.
Added BinderTest.java to .\/spikes\ repository source files.
Added ConnectedClientTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnectionTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigatorTest.java to .\/spikes\ repository source files.
Added BestPackageFinderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProviderTest.java to .\/spikes\ repository source files.
Added ApiPagedChannelHistory.java to .\/spikes\ repository source files.
Added ApiPagedResponse.java to .\/spikes\ repository source files.
Added ChannelHistory.java to .\/spikes\ repository source files.
Added HistoryConverter.java to .\/spikes\ repository source files.
Added Runner.java to .\/spikes\ repository source files.
Added SlackHistoryFetcher.java to .\/spikes\ repository source files.
Added SlackWebService.java to .\/spikes\ repository source files.
Added ApiPagedResponseTest.java to .\/spikes\ repository source files.
Added MainActivityTest.java to .\/spikes\ repository source files.
Added LoremAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added BetterAccountManager.java to .\/spikes\ repository source files.
Added BetterAuthenticator.java to .\/spikes\ repository source files.
Added BetterAuthenticatorActivity.java to .\/spikes\ repository source files.
Added GertHerbAuthenticator.java to .\/spikes\ repository source files.
Added GertHerbAuthenticatorService.java to .\/spikes\ repository source files.
Added NoAccountException.java to .\/spikes\ repository source files.
Added ReactiveAuthenticatorActivity.java to .\/spikes\ repository source files.
Added Token.java to .\/spikes\ repository source files.
Added GertHerbActivity.java to .\/spikes\ repository source files.
Added GertHerbApplication.java to .\/spikes\ repository source files.
Added GertHerbAuthenticationActivity.java to .\/spikes\ repository source files.
Added TypefaceFactory.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added ViewServer.java to .\/spikes\ repository source files.
Added ViewServerManager.java to .\/spikes\ repository source files.
Added DeveloperError.java to .\/spikes\ repository source files.
Added HomeActivity.java to .\/spikes\ repository source files.
Added LoginActivity.java to .\/spikes\ repository source files.
Added LoginView.java to .\/spikes\ repository source files.
Added UserCredentials.java to .\/spikes\ repository source files.
Added FontButton.java to .\/spikes\ repository source files.
Added FontEditText.java to .\/spikes\ repository source files.
Added FontTextView.java to .\/spikes\ repository source files.
Added GithubApi.java to .\/spikes\ repository source files.
Added GithubApiFactory.java to .\/spikes\ repository source files.
Added TokenRequest.java to .\/spikes\ repository source files.
Added TokenResponse.java to .\/spikes\ repository source files.
Added Dummy.java to .\/spikes\ repository source files.
Added DummyTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MainFragment.java to .\/spikes\ repository source files.
Added Attributes.java to .\/spikes\ repository source files.
Added Coordinates.java to .\/spikes\ repository source files.
Added IndicatorCoordinatesCalculator.java to .\/spikes\ repository source files.
Added LandingStrip.java to .\/spikes\ repository source files.
Added MutableCoordinates.java to .\/spikes\ repository source files.
Added OnPagerAdapterChangedListener.java to .\/spikes\ repository source files.
Added PagerAdapterObserver.java to .\/spikes\ repository source files.
Added Scrollable.java to .\/spikes\ repository source files.
Added ScrollingPageChangeListener.java to .\/spikes\ repository source files.
Added State.java to .\/spikes\ repository source files.
Added TabsContainer.java to .\/spikes\ repository source files.
Added CustomLandingStrip.java to .\/spikes\ repository source files.
Added CustomTabActivity.java to .\/spikes\ repository source files.
Added ExampleRainbowLandingStrip.java to .\/spikes\ repository source files.
Added FixedWidthTabActivity.java to .\/spikes\ repository source files.
Added NoFragmentsSimpleTextTabActivity.java to .\/spikes\ repository source files.
Added Data.java to .\/spikes\ repository source files.
Added DemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added SmallDemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerFragment.java to .\/spikes\ repository source files.
Added DemoViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapterState.java to .\/spikes\ repository source files.
Added SimpleTextTabActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AbTestingParamsLoadedCallback.java to .\/spikes\ repository source files.
Added AyBe.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added WeakStartCallback.java to .\/spikes\ repository source files.
Added LeakActivity.java to .\/spikes\ repository source files.
Added NoLeakActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added ColorScheme.java to .\/spikes\ repository source files.
Added ColorUtils.java to .\/spikes\ repository source files.
Added DominantColorCalculator.java to .\/spikes\ repository source files.
Added FloatUtils.java to .\/spikes\ repository source files.
Added MedianCutQuantizer.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added PayPalFragment.java to .\/spikes\ repository source files.
Added PayPalHelper.java to .\/spikes\ repository source files.
Added MaxLengthMessageComposer.java to .\/spikes\ repository source files.
Added MessageComposer.java to .\/spikes\ repository source files.
Added TwitterMessageComposer.java to .\/spikes\ repository source files.
Added DisabledMruPersister.java to .\/spikes\ repository source files.
Added MruPersister.java to .\/spikes\ repository source files.
Added SharedPreferencesMruPersister.java to .\/spikes\ repository source files.
Added OnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added PriorityShareDialog.java to .\/spikes\ repository source files.
Added PrioritySharer.java to .\/spikes\ repository source files.
Added ShareTargetsAdapter.java to .\/spikes\ repository source files.
Added SimpleOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added TargetApps.java to .\/spikes\ repository source files.
Added TwitterOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AdvancedActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SimpleActivity.java to .\/spikes\ repository source files.
Added LockingActivity.java to .\/spikes\ repository source files.
Added PostLockingActivity.java to .\/spikes\ repository source files.
Added PreLockingActivity.java to .\/spikes\ repository source files.
Added DummyAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added NovoStaggeredGridView.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SpikeApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SwipeableView.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MyClass.java to .\/spikes\ repository source files.
Added MyClassTest.java to .\/spikes\ repository source files.
Added MyAndroidClassTest.java to .\/spikes\ repository source files.
Added RobolectricGradleTestRunner.java to .\/spikes\ repository source files.
Added Mapper.java to .\/spikes\ repository source files.
Added Query.java to .\/spikes\ repository source files.
Added TypedResolver.java to .\/spikes\ repository source files.
Added CursorList.java to .\/spikes\ repository source files.
Added CursorListIterator.java to .\/spikes\ repository source files.
Added CursorMarshaller.java to .\/spikes\ repository source files.
Added EmptyListIterator.java to .\/spikes\ repository source files.
Added ReflectionCursorMarshaller.java to .\/spikes\ repository source files.
Added RichClass.java to .\/spikes\ repository source files.
Added Setter.java to .\/spikes\ repository source files.
Added Function.java to .\/spikes\ repository source files.
Added TypedElementLoader.java to .\/spikes\ repository source files.
Added TypedLoader.java to .\/spikes\ repository source files.
Added Marshaller.java to .\/spikes\ repository source files.
Added ObjectMapper.java to .\/spikes\ repository source files.
Added TypedActivity.java to .\/spikes\ repository source files.
Added StringUtil.java to .\/spikes\ repository source files.
Added MyObject.java to .\/spikes\ repository source files.
Added MediaPlayerSwitcherActivity.java to .\/spikes\ repository source files.
Added VideoPlayerService.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added RecognitionService.java to .\/spikes\ repository source files.
Added SessionService.java to .\/spikes\ repository source files.
Added SettingsActivity.java to .\/spikes\ repository source files.
Added SmartContextInteractionService.java to .\/spikes\ repository source files.
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
String[] planetTitles = new String[]{"Earth", "Saturn"};
DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
ListView drawerList = (ListView) findViewById(R.id.left_drawer);
Intent intent;
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close);
b=getIntent().getExtras()
Bundle b = getIntent().getExtras();
mShouldStartPlayback=b.getBoolean("shouldStart")
boolean mShouldStartPlayback = b.getBoolean("shouldStart");
startPosition=b.getInt("startPosition",0)
int startPosition = b.getInt("startPosition", 0);
currentPos=mVideoView.getCurrentPosition()
int currentPos = mVideoView.getCurrentPosition();
String msg;
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, mDisplaySize.y + getActionBar().getHeight());
mm=mSelectedMedia.getMetadata()
MediaMetadata mm = mSelectedMedia.getMetadata();
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, (int) (mDisplaySize.x * ASPECT_RATIO));
WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
width=display.getWidth()
int width = display.getWidth();
height=display.getHeight()
int height = display.getHeight();
int resourceId = 0;
String videoUrl = "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4#sthash.rJ5rPZy8.dpuf";
String title = "Jahre Philharmonie";
String description = "Awesome film you must watch!";
String author = "Blundell";
String thumbUrl = "http://www.ustream.tv/blog/wp-content/uploads/2013/10/simply-go-live.png";
MediaMetadata metadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE);
mediaInfo=new MediaInfo.Builder(videoUrl).setMetadata(metadata).setStreamType(MediaInfo.STREAM_TYPE_BUFFERED).setContentType("video/mp4").build()
MediaInfo mediaInfo = new MediaInfo.Builder(videoUrl)
                        .setMetadata(metadata)
                        .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)
                        .setContentType("video/mp4")
                        .build();
Intent intent = new Intent(MainActivity.this, LocalPlayerActivity.class);
preferences=getPreferences(MODE_PRIVATE)
SharedPreferences preferences = getPreferences(MODE_PRIVATE);
defaultSmsPackage=Telephony.Sms.getDefaultSmsPackage(this)
String defaultSmsPackage = Telephony.Sms.getDefaultSmsPackage(this);
Intent intent = new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
availableAppProvider=EasyCustomTabs.getInstance()
AvailableAppProvider availableAppProvider = EasyCustomTabs.getInstance();
ConnectedClient connectedClient = new ConnectedClient(client);
binder=Binder.newInstance()
Binder binder = Binder.newInstance();
List<Composer> composerList = new ArrayList<>();
customTabsSession=connection.newSession()
CustomTabsSession customTabsSession = connection.newSession();
CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(customTabsSession);
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
context=EasyCustomTabs.getInstance().getContext()
Context context = EasyCustomTabs.getInstance().getContext();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
packagesSupportingCustomTabs=getPackagesSupportingCustomTabs()
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
defaultPackage=getDefaultPackage()
String defaultPackage = getDefaultPackage();
defaultActivityInfo=packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK,0)
ResolveInfo defaultActivityInfo = packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK, 0);
String packageName = defaultActivityInfo.activityInfo.packageName;
resolvedInfoList=packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK,0)
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<String> packagesSupportingCustomTabs = new ArrayList<>();
Intent serviceIntent = new Intent();
bestPackageFinder=BestPackageFinder.newInstance()
BestPackageFinder bestPackageFinder = BestPackageFinder.newInstance();
packageName=bestPackageFinder.findBestPackage()
String packageName = bestPackageFinder.findBestPackage();
resolveInfo=createResolveInfoFor(packageName)
ResolveInfo resolveInfo = createResolveInfoFor(packageName);
ResolveInfo resolveInfo = new ResolveInfo();
List<ResolveInfo> resolveInfoList = new ArrayList<>();
defaultPackageResolveInfo=createResolveInfoFor(packageName)
ResolveInfo defaultPackageResolveInfo = createResolveInfoFor(packageName);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
oldestApiMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage oldestApiMessage = apiMessages.get(apiMessages.size() - 1);
String lastResponseEpochTime = oldestApiMessage.timeStamp;
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
latestMessage=latestMessages.get(latestMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage latestMessage = latestMessages.get(latestMessages.size() - 1);
latestMessageDateTime=convertToLocalDateTime(latestMessage.timeStamp)
LocalDateTime latestMessageDateTime = convertToLocalDateTime(latestMessage.timeStamp);
List<ChannelHistory.Message> messages = new ArrayList<>();
historyFrom=getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1))
LocalDateTime historyFrom = getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1));
historyTo=getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0))
LocalDateTime historyTo = getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0));
String text = apiMessage.text;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
lastMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage lastMessage = apiMessages.get(apiMessages.size() - 1);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
firstMessage=apiMessages.get(0)
ApiPagedChannelHistory.ApiMessage firstMessage = apiMessages.get(0);
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
String slackToken = args[0];
retrofit=new Retrofit.Builder().baseUrl("https://slack.com/api/").addConverterFactory(GsonConverterFactory.create()).build()
Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://slack.com/api/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();
slackWebService=retrofit.create(SlackWebService.class)
SlackWebService slackWebService = retrofit.create(SlackWebService.class);
slackHistoryFetcher=SlackHistoryFetcher.from(slackWebService,slackToken)
SlackHistoryFetcher slackHistoryFetcher = SlackHistoryFetcher.from(slackWebService, slackToken);
start=LocalDateTime.now()
LocalDateTime start = LocalDateTime.now();
end=LocalDateTime.now().minusDays(7)
LocalDateTime end = LocalDateTime.now().minusDays(7);
channelHistory=slackHistoryFetcher.getChannelHistory(start,end)
ChannelHistory channelHistory = slackHistoryFetcher.getChannelHistory(start, end);
HistoryConverter historyConverter = new HistoryConverter();
ApiPagedResponse apiPagedResponse = new ApiPagedResponse(start);
response=fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime())
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
apiPagedChannelHistory=response.body()
ApiPagedChannelHistory apiPagedChannelHistory = response.body();
channelHistory=slackWebService.getChannelHistory(slackToken,channel,lastResponseEpochTime,NUMBER_OF_RESULTS)
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
ApiPagedChannelHistory apiPagedChannelHistory = new ApiPagedChannelHistory();
ApiPagedChannelHistory.ApiMessage apiMessage = new ApiPagedChannelHistory.ApiMessage();
final TextView textView = new TextView(context);
emptyView=findViewById(R.id.empty_view)
View emptyView = findViewById(R.id.empty_view);
final Integer action = values[0];
LoremAdapter loremAdapter = new LoremAdapter();
accounts=accountManager.getAccountsByType(accountType)
Account[] accounts = accountManager.getAccountsByType(accountType);
Bundle result;
Bundle result;
Bundle result = new Bundle();
activity=createLoginIntent(context,accountType,authTokenType,requiredFeatures,options)
Intent activity = createLoginIntent(context, accountType, authTokenType, requiredFeatures, options);
Bundle bundle = new Bundle();
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
accounts=accountManager.getAccountsByType(authTokenType)
Account[] accounts = accountManager.getAccountsByType(authTokenType);
bundle=createResponseBundle(token)
Bundle bundle = createResponseBundle(token);
accountManager=AccountManager.get(this.getApplicationContext())
AccountManager accountManager = AccountManager.get(this.getApplicationContext());
Account account = new Account(token.getUserName(), getAccountName());
Bundle bundle = new Bundle();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
GertHerbAuthenticator authenticator = new GertHerbAuthenticator(this);
fontId=getFontId(context,attrs)
int fontId = getFontId(context, attrs);
fontType=getFontType(fontId)
FontType fontType = getFontType(fontId);
typedArray=context.obtainStyledAttributes(attrs,R.styleable.CustomTextAppearance)
TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CustomTextAppearance);
typeface=createTypeFace(context,fontType)
Typeface typeface = createTypeFace(context, fontType);
info=context.getApplicationInfo()
ApplicationInfo info = context.getApplicationInfo();
name=activity.getTitle().toString()
String name = activity.getTitle().toString();
client=mServer.accept()
Socket client = mServer.accept();
boolean result;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
BufferedReader in = null;
request=in.readLine()
final String request = in.readLine();
String command;
String parameters;
index=request.indexOf(' ')
int index = request.indexOf(' ');
boolean result;
boolean success = true;
BufferedWriter out = null;
index=parameters.indexOf(' ')
int index = parameters.indexOf(' ');
code=parameters.substring(0,index)
final String code = parameters.substring(0, index);
int hashCode = (int) Long.parseLong(code, 16);
window=findWindow(hashCode)
final View window = findWindow(hashCode);
dispatch=ViewDebug.class.getDeclaredMethod("dispatchCommand",View.class,String.class,String.class,OutputStream.class)
final Method dispatch = ViewDebug.class.getDeclaredMethod("dispatchCommand",
                        View.class, String.class, String.class, OutputStream.class);
View window = null;
boolean result = true;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
boolean result = true;
String focusName = null;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
View focusedWindow = null;
BufferedWriter out = null;
boolean needWindowListUpdate = false;
boolean needFocusedWindowUpdate = false;
BetterAccountManager accountManager = new BetterAccountManager(this, getString(R.string.account_type), getString(R.string.token_type), null);
loginView=Views.findById(this,R.id.login_view)
LoginView loginView = Views.findById(this, R.id.login_view);
authorizationApi=new GithubApiFactory().createAuthorizationApi(credentials.username,credentials.password)
GithubApi authorizationApi = new GithubApiFactory().createAuthorizationApi(credentials.username, credentials.password);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
Endpoint endpoint = new Endpoint() {
            @Override
            public String getUrl() {
                return GITHUB_API_URL;
            }

            @Override
            public String getName() {
                return "Live";
            }
        };
interceptor=createAuthorizationRequestInterceptor(username,password)
RequestInterceptor interceptor = createAuthorizationRequestInterceptor(username, password);
restAdapter=createRestAdapter(endpoint,interceptor)
RestAdapter restAdapter = createRestAdapter(endpoint, interceptor);
Dummy dummy = new Dummy();
result=dummy.explodes()
boolean result = dummy.explodes();
String base64EncodedPublicKey = "CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE";
premiumPurchase=inventory.getPurchase(SKU_PREMIUM)
Purchase premiumPurchase = inventory.getPurchase(SKU_PREMIUM);
infiniteGasPurchase=inventory.getPurchase(SKU_INFINITE_GAS)
Purchase infiniteGasPurchase = inventory.getPurchase(SKU_INFINITE_GAS);
gasPurchase=inventory.getPurchase(SKU_GAS)
Purchase gasPurchase = inventory.getPurchase(SKU_GAS);
String payload = "";
String payload = "";
String payload = "";
payload=p.getDeveloperPayload()
String payload = p.getDeveloperPayload();
int index = mTank >= TANK_RES_IDS.length ? TANK_RES_IDS.length - 1 : mTank;
AlertDialog.Builder bld = new AlertDialog.Builder(this);
spe=getPreferences(MODE_PRIVATE).edit()
SharedPreferences.Editor spe = getPreferences(MODE_PRIVATE).edit();
sp=getPreferences(MODE_PRIVATE)
SharedPreferences sp = getPreferences(MODE_PRIVATE);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                                  + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                    | ((source[d + 1 + off] << 24) >>> 16)
                    | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                    | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                                   "-1002:Bad response received/" +
                                   "-1003:Purchase signature verification failed/" +
                                   "-1004:Send intent failed/" +
                                   "-1005:User cancelled/" +
                                   "-1006:Unknown purchase response/" +
                                   "-1007:Missing token/" +
                                   "-1008:Unknown error/" +
                                   "-1009:Subscriptions not available/" +
                                   "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(),
                    itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                        | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                        | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                            | ((source[d + 1 + off] << 24) >>> 16)
                            | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                            | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                "-1002:Bad response received/" +
                "-1003:Purchase signature verification failed/" +
                "-1004:Send intent failed/" +
                "-1005:User cancelled/" +
                "-1006:Unknown purchase response/" +
                "-1007:Missing token/" +
                "-1008:Unknown error/" +
                "-1009:Subscriptions not available/" +
                "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(), itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
responseCode=result.getResponse()
int responseCode = result.getResponse();
sku=purchase.getSku()
String sku = purchase.getSku();
skuDetails=inv.getSkuDetails(sku)
SkuDetails skuDetails = inv.getSkuDetails(sku);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
Button purchaseFiveButton = (Button) rootView.findViewById(R.id.fragment_main_button_purchase_five_coins);
xml=context.obtainStyledAttributes(attrs,R.styleable.LandingStrip)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.LandingStrip);
tabLayoutId=xml.getResourceId(R.styleable.LandingStrip_tabLayoutId,MISSING_TAB_LAYOUT_ID)
int tabLayoutId = xml.getResourceId(R.styleable.LandingStrip_tabLayoutId, MISSING_TAB_LAYOUT_ID);
indicatorColour=xml.getResourceId(R.styleable.LandingStrip_indicatorColor,DEFAULT_INDICATOR_COLOUR)
int indicatorColour = xml.getResourceId(R.styleable.LandingStrip_indicatorColor, DEFAULT_INDICATOR_COLOUR);
indicatorHeight=getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight,DEFAULT_INDICATOR_HEIGHT,xml)
int indicatorHeight = getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight, DEFAULT_INDICATOR_HEIGHT, xml);
tabsPaddingLeft=getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingLeft = getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding, DEFAULT_TABS_PADDING, xml);
tabsPaddingRight=getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingRight = getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding, DEFAULT_TABS_PADDING, xml);
MutableCoordinates drawCurrentTabCoordinates = new MutableCoordinates();
MutableCoordinates drawNextTabCoordinates = new MutableCoordinates();
MutableCoordinates drawMovingIndicatorCoordinates = new MutableCoordinates();
currentTab=tabsContainer.getTabAt(currentPosition)
View currentTab = tabsContainer.getTabAt(currentPosition);
currentTabStart=currentTab.getLeft()
float currentTabStart = currentTab.getLeft();
currentTabEnd=currentTab.getRight()
float currentTabEnd = currentTab.getRight();
nextTab=tabsContainer.getTabAt(currentPosition + 1)
View nextTab = tabsContainer.getTabAt(currentPosition + 1);
nextTabPositionOffset=getFractionFrom(pagePositionOffset)
float nextTabPositionOffset = getFractionFrom(pagePositionOffset);
indicatorStart=getIndicatorPosition(nextTab.getStart(),pagePositionOffset,currentTab.getStart(),nextTabPositionOffset)
float indicatorStart = getIndicatorPosition(nextTab.getStart(), pagePositionOffset, currentTab.getStart(), nextTabPositionOffset);
indicatorEnd=getIndicatorPosition(nextTab.getEnd(),pagePositionOffset,currentTab.getEnd(),nextTabPositionOffset)
float indicatorEnd = getIndicatorPosition(nextTab.getEnd(), pagePositionOffset, currentTab.getEnd(), nextTabPositionOffset);
height=getHeight()
int height = getHeight();
tabCount=pagerAdapter.getCount()
int tabCount = pagerAdapter.getCount();
title=pagerAdapter.getPageTitle(position)
CharSequence title = pagerAdapter.getPageTitle(position);
inflatedTabView=tabsContainer.inflateTab(layoutInflater,attributes.getTabLayoutId())
View inflatedTabView = tabsContainer.inflateTab(layoutInflater, attributes.getTabLayoutId());
int position = (int) view.getTag(TAG_KEY_POSITION);
scrollOffset=getHorizontalScrollOffset(position,positionOffset)
int scrollOffset = getHorizontalScrollOffset(position, positionOffset);
newScrollX=calculateScrollOffset(position,scrollOffset,positionOffset)
float newScrollX = calculateScrollOffset(position, scrollOffset, positionOffset);
tabWidth=tabsContainer.getTabAt(position).getWidth()
int tabWidth = tabsContainer.getTabAt(position).getWidth();
tabForPosition=tabsContainer.getTabAt(position)
View tabForPosition = tabsContainer.getTabAt(position);
float tabStartX = tabForPosition.getLeft() + scrollOffset;
int viewMiddleOffset = getTabParentWidth() / 2;
float tabCenterOffset = (tabForPosition.getRight() - tabForPosition.getLeft()) * 0.5F;
nextTabDelta=getNextTabDelta(position,pagerOffset,tabForPosition)
float nextTabDelta = getNextTabDelta(position, pagerOffset, tabForPosition);
LinearLayout tabsContainerView = new LinearLayout(context);
tab=getTabAt(index)
View tab = getTabAt(index);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
position=indicatorCoordinates.getStart()
float position = indicatorCoordinates.getStart();
lastTabOffset=((ViewGroup)getChildAt(0)).getChildAt(getChildCount() - 1).getWidth()
float lastTabOffset = ((ViewGroup) getChildAt(0)).getChildAt(getChildCount() - 1).getWidth();
frequency=getOneCycle(lastTabOffset)
float frequency = getOneCycle(lastTabOffset);
r=toHex(calculateColour(position,frequency,PHASE_RED,AMPLITUDE,CENTER_FREQUENCY))
String r = toHex(calculateColour(position, frequency, PHASE_RED, AMPLITUDE, CENTER_FREQUENCY));
g=toHex(calculateColour(position,frequency,PHASE_GREEN,AMPLITUDE,CENTER_FREQUENCY))
String g = toHex(calculateColour(position, frequency, PHASE_GREEN, AMPLITUDE, CENTER_FREQUENCY));
b=toHex(calculateColour(position,frequency,PHASE_BLUE,AMPLITUDE,CENTER_FREQUENCY))
String b = toHex(calculateColour(position, frequency, PHASE_BLUE, AMPLITUDE, CENTER_FREQUENCY));
height=getHeight()
int height = getHeight();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPagerFragment viewPagerFragment = new ViewPagerFragment();
Bundle bundle = new Bundle();
TextView view = (TextView) layoutInflater.inflate(R.layout.view_demo, container, false);
currentPosition=viewPagerAdapterState.getCurrentPosition()
int currentPosition = viewPagerAdapterState.getCurrentPosition();
view=getView(container,position)
View view = getView(container, position);
parcelableSparseArray=viewPagerAdapterState.get(position)
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
View view = (View) object;
SparseArray<Parcelable> viewState = new SparseArray<>();
position=entry.getValue()
int position = entry.getValue();
view=entry.getKey()
View view = entry.getKey();
bundle=in.readBundle()
Bundle bundle = in.readBundle();
Map<Integer, SparseArray<Parcelable>> viewStates = new HashMap<>(bundle.keySet().size());
sparseParcelableArray=bundle.getSparseParcelableArray(key)
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
primaryItemPosition=in.readInt()
int primaryItemPosition = in.readInt();
Bundle bundle = new Bundle();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
final TextView abText = (TextView) findViewById(R.id.ab_text);
final AyBe ayBe = new AyBe();
id=item.getItemId()
int id = item.getItemId();
callback=weakCallback.get()
AbTestingParamsLoadedCallback callback = weakCallback.get();
WeakReference<NoLeakActivity> weakNoLeakActivity = new WeakReference<NoLeakActivity>(noLeakActivity);
noLeakActivity=weakNoLeakActivity.get()
NoLeakActivity noLeakActivity = weakNoLeakActivity.get();
final float inverseRatio = 1f - ratio;
float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRatio);
float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRatio);
float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRatio);
hsv=node.getHsv()
float[] hsv = node.getHsv();
width=bitmap.getWidth()
final int width = bitmap.getWidth();
height=bitmap.getHeight()
final int height = bitmap.getHeight();
final int[] rgbPixels = new int[width * height];
final MedianCutQuantizer mcq = new MedianCutQuantizer(rgbPixels, NUM_COLORS);
primaryAccentColor=findPrimaryAccentColor()
final ColorNode primaryAccentColor = findPrimaryAccentColor();
secondaryAccentColor=findSecondaryAccentColor(primaryAccentColor)
final ColorNode secondaryAccentColor = findSecondaryAccentColor(primaryAccentColor);
tertiaryAccentColor=findTertiaryAccentColor(primaryAccentColor,secondaryAccentColor)
final int tertiaryAccentColor = findTertiaryAccentColor(
                primaryAccentColor, secondaryAccentColor);
primaryTextColor=findPrimaryTextColor(primaryAccentColor)
final int primaryTextColor = findPrimaryTextColor(primaryAccentColor);
secondaryTextColor=findSecondaryTextColor(primaryAccentColor)
final int secondaryTextColor = findSecondaryTextColor(primaryAccentColor);
final float primaryHue = primary.getHsv()[0];
final float candidateHue = candidate.getHsv()[0];
copy=Arrays.copyOf(palette,palette.length)
final MedianCutQuantizer.ColorNode[] copy = Arrays.copyOf(palette, palette.length);
maxCount=palette[0].getCount()
final float maxCount = palette[0].getCount();
lhsWeight=calculateWeight(lhs,maxCount)
final float lhsWeight = calculateWeight(lhs, maxCount);
rhsWeight=calculateWeight(rhs,maxCount)
final float rhsWeight = calculateWeight(rhs, maxCount);
float sum = 0;
float sumWeight = 0;
float value = values[i];
float weight = values[i + 1];
ColorHistogram colorHist = new ColorHistogram(pixels);
K=colorHist.getNumberOfColors()
int K = colorHist.getNumberOfColors();
ColorNode[] rCols = null;
rgb=colorHist.getColor(i)
int rgb = colorHist.getColor(i);
cnt=colorHist.getCount(i)
int cnt = colorHist.getCount(i);
ColorBox initialBox = new ColorBox(0, K - 1, 0);
List<ColorBox> colorSet = new ArrayList<ColorBox>();
int k = 1;
boolean done = false;
nextBox=findBoxToSplit(colorSet)
ColorBox nextBox = findBoxToSplit(colorSet);
newBox=nextBox.splitBox()
ColorBox newBox = nextBox.splitBox();
color=findClosestColor(pixels[i])
ColorNode color = findClosestColor(pixels[i]);
idx=findClosestColorIndex(rgb)
int idx = findClosestColorIndex(rgb);
red=Color.red(rgb)
int red = Color.red(rgb);
grn=Color.green(rgb)
int grn = Color.green(rgb);
blu=Color.blue(rgb)
int blu = Color.blue(rgb);
int minIdx = 0;
int minDistance = Integer.MAX_VALUE;
ColorNode color = quantColors[i];
d2=color.distance2(red,grn,blu)
int d2 = color.distance2(red, grn, blu);
ColorBox boxToSplit = null;
int minLevel = Integer.MAX_VALUE;
n=colorBoxes.size()
int n = colorBoxes.size();
ColorNode[] avgColors = new ColorNode[n];
int i = 0;
int dr = this.red - red;
int dg = this.grn - grn;
int db = this.blu - blu;
ColorNode color = imageColors[i];
int r = color.red;
int g = color.grn;
int b = color.blu;
dim=getLongestColorDimension()
ColorDimension dim = getLongestColorDimension();
med=findMedian(dim)
int med = findMedian(dim);
int nextLevel = level + 1;
ColorBox newBox = new ColorBox(med + 1, upper, nextLevel);
int rLength = rmax - rmin;
int gLength = gmax - gmin;
int bLength = bmax - bmin;
int half = count / 2;
int nPixels, median;
int rSum = 0;
int gSum = 0;
int bSum = 0;
int n = 0;
ColorNode ci = imageColors[i];
int cnt = ci.cnt;
double nd = n;
int avgRed = (int) (0.5 + rSum / nd);
int avgGrn = (int) (0.5 + gSum / nd);
int avgBlu = (int) (0.5 + bSum / nd);
s=this.getClass().getSimpleName()
String s = this.getClass().getSimpleName();
int i = 0;
int N = pixelsOrig.length;
int[] pixelsCpy = new int[N];
int k = -1;
int curColor = -1;
int nColors = k + 1;
id=item.getItemId()
int id = item.getItemId();
Intent intent = new Intent();
bitmap=((BitmapDrawable)imageView.getDrawable()).getBitmap()
Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap();
DominantColorCalculator dominantColorCalculator = new DominantColorCalculator(bitmap);
selectedImageUri=data.getData()
Uri selectedImageUri = data.getData();
selectedImagePath=getPath(selectedImageUri)
String selectedImagePath = getPath(selectedImageUri);
String[] projection = {MediaStore.Images.Media.DATA};
cursor=managedQuery(uri,projection,null,null,null)
Cursor cursor = managedQuery(uri, projection, null, null, null);
column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)
int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
LinearLayout rootView = (LinearLayout) inflater.inflate(R.layout.fragment_main, container, false);
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
preapprovalButton=payPal.getCheckoutButton(getActivity(),PayPal.BUTTON_194x37,CheckoutButton.TEXT_PAY)
CheckoutButton preapprovalButton = payPal.getCheckoutButton(getActivity(), PayPal.BUTTON_194x37, CheckoutButton.TEXT_PAY);
preapprovalIntent=payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY)
Intent preapprovalIntent = payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY);
String resultTitle = "";
String resultInfo = "";
String resultExtra = "";
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
PayPalPreapproval preapproval = new PayPalPreapproval();
preapproval=createPreapproval(preapprovalKey)
PayPalPreapproval preapproval = createPreapproval(preapprovalKey);
Bundle bundle = new Bundle();
int availableLength = maxLength;
StringBuilder stringBuilder = new StringBuilder(maxLength);
prefixAndSuffixLength=computeAppendedLengthIncludingSeparatorSpaces(prefix,suffix)
int prefixAndSuffixLength = computeAppendedLengthIncludingSeparatorSpaces(prefix, suffix);
urlLength=computeUrlLengthIncludingSeparatorSpace(url)
int urlLength = computeUrlLengthIncludingSeparatorSpace(url);
trimmedSubject=ellipsizeTextIfExceedsMaxLength(subject,availableLength)
String trimmedSubject = ellipsizeTextIfExceedsMaxLength(subject, availableLength);
int length = 0;
preferences=context.getSharedPreferences(MRU_PREFERENCES,Context.MODE_PRIVATE)
SharedPreferences preferences = context.getSharedPreferences(MRU_PREFERENCES, Context.MODE_PRIVATE);
args=getArguments()
Bundle args = getArguments();
themeResId=getThemeResIdIfProvidedIn(args)
int themeResId = getThemeResIdIfProvidedIn(args);
title=getTitleIfProvidedIn(args)
CharSequence title = getTitleIfProvidedIn(args);
builder=createDialogBuilder(themeResId).setCancelable(true).setView(dialogView)
AlertDialog.Builder builder = createDialogBuilder(themeResId)
                .setCancelable(true)
                .setView(dialogView);
inflater=getActivity().getLayoutInflater()
LayoutInflater inflater = getActivity().getLayoutInflater();
GridView gridView = (GridView) rootView.findViewById(R.id.ps__dialog_grid);
targetApps=extractTargetAppsFrom(args)
TargetApps targetApps = extractTargetAppsFrom(args);
allShareTargets=getAvailableShareTargets(sharingIntent)
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
priorityAppInfos=createPriorityResolveInfoList(targetApps,allShareTargets)
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
otherAppInfos=createOtherAppsResolveInfoList(priorityAppInfos,allShareTargets)
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
resolveInfos=targetApps.extractTargetResolveInfosFrom(allShareTargets)
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
mruResolveInfo=findMruResolveInfoIn(allShareTargets)
ResolveInfo mruResolveInfo = findMruResolveInfoIn(allShareTargets);
List<ResolveInfo> otherAppsInfos = new ArrayList<ResolveInfo>(allAppInfos);
mruPackageName=persister.getLastUsedTarget()
String mruPackageName = persister.getLastUsedTarget();
String packageName = resolveInfo.activityInfo.packageName;
packageManager=getActivity().getPackageManager()
PackageManager packageManager = getActivity().getPackageManager();
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
View buttonStrip = (View) showMoreButton.getParent();
gridView=getGridView()
GridView gridView = getGridView();
intent=wrapIntentWithExplicitTargetComponentForItem(position,sharingIntent)
Intent intent = wrapIntentWithExplicitTargetComponentForItem(position, sharingIntent);
Intent intent = new Intent(sharingIntent);
ActivityInfo activity = adapter.getItem(position).activityInfo;
ComponentName name = new ComponentName(activity.applicationInfo.packageName, activity.name);
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
PriorityShareDialog dialog = new PriorityShareDialog();
Bundle args = new Bundle();
sharingIntent=createSharingIntent()
Intent sharingIntent = createSharingIntent();
fragmentManager=activity.getFragmentManager()
FragmentManager fragmentManager = activity.getFragmentManager();
Intent intent = new Intent(Intent.ACTION_SEND);
dialog=new PriorityShareDialog.Builder().setTitle(title).setTargetApps(targetApps).setSharingIntent(sharingIntent).setOnPrepareSharingIntentListener(listener).setShowMostRecentlyUsed(showMostRecentlyUsed).build()
PriorityShareDialog dialog = new PriorityShareDialog.Builder()
                .setTitle(title)
                .setTargetApps(targetApps)
                .setSharingIntent(sharingIntent)
                .setOnPrepareSharingIntentListener(listener)
                .setShowMostRecentlyUsed(showMostRecentlyUsed)
                .build();
PrioritySharer prioritySharer = new PrioritySharer();
prioritySharer=build()
PrioritySharer prioritySharer = build();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
layoutInflater=LayoutInflater.from(context)
LayoutInflater layoutInflater = LayoutInflater.from(context);
iconSizePx=getIconSizePx(context.getResources())
int iconSizePx = getIconSizePx(context.getResources());
ArrayList<ResolveInfo> sortedList = new ArrayList<ResolveInfo>(resolveInfoList);
int otherAppsCountMaybe = showAllApps ? otherAppInfos.size() : 0;
firstOtherAppsItemPosition=priorityAppInfos.size()
int firstOtherAppsItemPosition = priorityAppInfos.size();
int offsetPosition = position - firstOtherAppsItemPosition;
TextView textView;
textView=initializeItemViewIfNecessary(convertView,R.layout.ps__grid_item_share,parent)
TextView textView = initializeItemViewIfNecessary(convertView, R.layout.ps__grid_item_share, parent);
info=getItem(position)
ResolveInfo info = getItem(position);
icon=info.loadIcon(packageManager)
Drawable icon = info.loadIcon(packageManager);
arraySize=in.readInt()
int arraySize = in.readInt();
String[] packageNames = new String[arraySize];
arraySize=targetPackages.size()
int arraySize = targetPackages.size();
String[] packagesArray = new String[arraySize];
SparseArray<ResolveInfo> matchedResolveInfos = new SparseArray<ResolveInfo>(targetPackages.size());
String packageName = info.activityInfo.packageName;
index=indexOfItemInto(packageName,targetPackages)
int index = indexOfItemInto(packageName, targetPackages);
sparseArraySize=sparseArray.size()
int sparseArraySize = sparseArray.size();
ArrayList<T> list = new ArrayList<T>(sparseArraySize);
int i = 0;
originalSubject=intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT)
CharSequence originalSubject = intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT);
String subject = originalSubject != null ? originalSubject.toString() : null;
composer=createComposer()
MessageComposer composer = createComposer();
component=intent.getComponent()
ComponentName component = intent.getComponent();
targetPackageName=component.getPackageName()
String targetPackageName = component.getPackageName();
adapter=ArrayAdapter.createFromResource(this,R.array.target_apps,android.R.layout.simple_spinner_item)
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
EditText text = (EditText) findViewById(R.id.text);
EditText title = (EditText) findViewById(R.id.title);
EditText mimeType = (EditText) findViewById(R.id.mime_type);
EditText dataUri = (EditText) findViewById(R.id.data_uri);
Switch showMostRecentlyUsed = (Switch) findViewById(R.id.show_most_recently_used);
uriString=dataUri.getText().toString()
String uriString = dataUri.getText().toString();
EditText text = (EditText) findViewById(R.id.text);
TextView textView = (TextView) convertView.findViewById(R.id.positionView);
colorView=convertView.findViewById(R.id.colorView)
View colorView = convertView.findViewById(R.id.colorView);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
offset=headerPlaceholder.getTop()
int offset = headerPlaceholder.getTop();
Integer item = COLORS[position];
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
firstVisiblePosition=grid.getFirstVisiblePosition()
int firstVisiblePosition = grid.getFirstVisiblePosition();
inflate=getViewForPosition(container,position)
View inflate = getViewForPosition(container, position);
id=item.getItemId()
int id = item.getItemId();
MyActivity activity = new MyActivity();
String manifestProperty = "../app/src/main/AndroidManifest.xml";
String resProperty = "../app/src/main/res";
cursor=resolver.query(uri,projection,selection,selectionArgs,null)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, null);
cursor=resolver.query(uri,projection,selection,selectionArgs,sortOrder)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, sortOrder);
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=richClass.setter(name)
Method setter = richClass.setter(name);
T obj;
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=methodsByName.get(name)
Method setter = methodsByName.get(name);
int type = TYPE_INT;
Class<?> t = setter.getParameterTypes()[0];
Class<?> t = setter.getParameterTypes()[0];
cursorType=cursor.getType(index)
final int cursorType = cursor.getType(index);
final Object obj;
s=f.getAnnotation(Mapper.class)
Mapper s = f.getAnnotation(Mapper.class);
mm=m.getAnnotation(Mapper.class)
Mapper mm = m.getAnnotation(Mapper.class);
methodName=StringUtil.asCamelifySetMethod(what)
String methodName = StringUtil.asCamelifySetMethod(what);
cursor=getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,null,null,null,null)
Cursor cursor = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
now=System.currentTimeMillis()
long now = System.currentTimeMillis();
List<Contact2> typedCursor = new CursorList<Contact2>(cursor, Contact2.class);
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[a-zA-Z0-9]+")
Pattern p = Pattern.compile("[a-zA-Z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[A-Z][a-z0-9]+")
Pattern p = Pattern.compile("[A-Z][a-z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
SurfaceView first = (SurfaceView) findViewById(R.id.firstSurface);
SurfaceView second = (SurfaceView) findViewById(R.id.secondSurface);
Intent pickVideo = new Intent(Intent.ACTION_PICK);
Bundle args = new Bundle();
enroll=mHotwordDetector.createEnrollIntent()
Intent enroll = mHotwordDetector.createEnrollIntent();

Diff of f8ada24723a674bda778a165c0dd4b185b568761 and c4a31c81f82f157d9e9e2ec2fe7f64caf853aa49:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 33
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision f8ada24723a674bda778a165c0dd4b185b568761 to c4a31c81f82f157d9e9e2ec2fe7f64caf853aa49


****Parsing for addition at revision c4a31c81f82f157d9e9e2ec2fe7f64caf853aa49****

Added ApplicationTest.java to .\/spikes\ repository source files.
Added DrawerActivity.java to .\/spikes\ repository source files.
Added EarthActivity.java to .\/spikes\ repository source files.
Added SaturnActivity.java to .\/spikes\ repository source files.
Added LocalPlayerActivity.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added CastApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ComposeSmsActivity.java to .\/spikes\ repository source files.
Added HeadlessSmsSendService.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MmsReceiver.java to .\/spikes\ repository source files.
Added SmsReceiver.java to .\/spikes\ repository source files.
Added ExtendedDemoActivity.java to .\/spikes\ repository source files.
Added ExtendedDemoApplication.java to .\/spikes\ repository source files.
Added SimpleDemoActivity.java to .\/spikes\ repository source files.
Added SimpleDemoApplication.java to .\/spikes\ repository source files.
Added Binder.java to .\/spikes\ repository source files.
Added ConnectedClient.java to .\/spikes\ repository source files.
Added Connection.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnection.java to .\/spikes\ repository source files.
Added ServiceConnectionCallback.java to .\/spikes\ repository source files.
Added EasyCustomTabs.java to .\/spikes\ repository source files.
Added ActionButtonComposer.java to .\/spikes\ repository source files.
Added CloseButtonIconComposer.java to .\/spikes\ repository source files.
Added Composer.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilder.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigator.java to .\/spikes\ repository source files.
Added EasyCustomTabsWebNavigator.java to .\/spikes\ repository source files.
Added ExitAnimationsComposer.java to .\/spikes\ repository source files.
Added IntentCustomizer.java to .\/spikes\ repository source files.
Added MenuItemComposer.java to .\/spikes\ repository source files.
Added NavigationFallback.java to .\/spikes\ repository source files.
Added Navigator.java to .\/spikes\ repository source files.
Added ShowTitleComposer.java to .\/spikes\ repository source files.
Added StartAnimationsComposer.java to .\/spikes\ repository source files.
Added ToolbarColorComposer.java to .\/spikes\ repository source files.
Added UrlBarHidingComposer.java to .\/spikes\ repository source files.
Added WebNavigator.java to .\/spikes\ repository source files.
Added AvailableAppProvider.java to .\/spikes\ repository source files.
Added BestPackageFinder.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProvider.java to .\/spikes\ repository source files.
Added BinderTest.java to .\/spikes\ repository source files.
Added ConnectedClientTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnectionTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigatorTest.java to .\/spikes\ repository source files.
Added BestPackageFinderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProviderTest.java to .\/spikes\ repository source files.
Added ApiPagedChannelHistory.java to .\/spikes\ repository source files.
Added ApiPagedResponse.java to .\/spikes\ repository source files.
Added ChannelHistory.java to .\/spikes\ repository source files.
Added HistoryConverter.java to .\/spikes\ repository source files.
Added Runner.java to .\/spikes\ repository source files.
Added SlackHistoryFetcher.java to .\/spikes\ repository source files.
Added SlackWebService.java to .\/spikes\ repository source files.
Added ApiPagedResponseTest.java to .\/spikes\ repository source files.
Added MainActivityTest.java to .\/spikes\ repository source files.
Added LoremAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added BetterAccountManager.java to .\/spikes\ repository source files.
Added BetterAuthenticator.java to .\/spikes\ repository source files.
Added BetterAuthenticatorActivity.java to .\/spikes\ repository source files.
Added GertHerbAuthenticator.java to .\/spikes\ repository source files.
Added GertHerbAuthenticatorService.java to .\/spikes\ repository source files.
Added NoAccountException.java to .\/spikes\ repository source files.
Added ReactiveAuthenticatorActivity.java to .\/spikes\ repository source files.
Added Token.java to .\/spikes\ repository source files.
Added GertHerbActivity.java to .\/spikes\ repository source files.
Added GertHerbApplication.java to .\/spikes\ repository source files.
Added GertHerbAuthenticationActivity.java to .\/spikes\ repository source files.
Added TypefaceFactory.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added ViewServer.java to .\/spikes\ repository source files.
Added ViewServerManager.java to .\/spikes\ repository source files.
Added DeveloperError.java to .\/spikes\ repository source files.
Added HomeActivity.java to .\/spikes\ repository source files.
Added LoginActivity.java to .\/spikes\ repository source files.
Added LoginView.java to .\/spikes\ repository source files.
Added UserCredentials.java to .\/spikes\ repository source files.
Added FontButton.java to .\/spikes\ repository source files.
Added FontEditText.java to .\/spikes\ repository source files.
Added FontTextView.java to .\/spikes\ repository source files.
Added GithubApi.java to .\/spikes\ repository source files.
Added GithubApiFactory.java to .\/spikes\ repository source files.
Added TokenRequest.java to .\/spikes\ repository source files.
Added TokenResponse.java to .\/spikes\ repository source files.
Added Dummy.java to .\/spikes\ repository source files.
Added DummyTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MainFragment.java to .\/spikes\ repository source files.
Added Attributes.java to .\/spikes\ repository source files.
Added Coordinates.java to .\/spikes\ repository source files.
Added IndicatorCoordinatesCalculator.java to .\/spikes\ repository source files.
Added LandingStrip.java to .\/spikes\ repository source files.
Added MutableCoordinates.java to .\/spikes\ repository source files.
Added OnPagerAdapterChangedListener.java to .\/spikes\ repository source files.
Added PagerAdapterObserver.java to .\/spikes\ repository source files.
Added Scrollable.java to .\/spikes\ repository source files.
Added ScrollingPageChangeListener.java to .\/spikes\ repository source files.
Added State.java to .\/spikes\ repository source files.
Added TabsContainer.java to .\/spikes\ repository source files.
Added CustomLandingStrip.java to .\/spikes\ repository source files.
Added CustomTabActivity.java to .\/spikes\ repository source files.
Added ExampleRainbowLandingStrip.java to .\/spikes\ repository source files.
Added FixedWidthTabActivity.java to .\/spikes\ repository source files.
Added NoFragmentsSimpleTextTabActivity.java to .\/spikes\ repository source files.
Added Data.java to .\/spikes\ repository source files.
Added DemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added SmallDemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerFragment.java to .\/spikes\ repository source files.
Added DemoViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapterState.java to .\/spikes\ repository source files.
Added SimpleTextTabActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AbTestingParamsLoadedCallback.java to .\/spikes\ repository source files.
Added AyBe.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added WeakStartCallback.java to .\/spikes\ repository source files.
Added LeakActivity.java to .\/spikes\ repository source files.
Added NoLeakActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added ColorScheme.java to .\/spikes\ repository source files.
Added ColorUtils.java to .\/spikes\ repository source files.
Added DominantColorCalculator.java to .\/spikes\ repository source files.
Added FloatUtils.java to .\/spikes\ repository source files.
Added MedianCutQuantizer.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added PayPalFragment.java to .\/spikes\ repository source files.
Added PayPalHelper.java to .\/spikes\ repository source files.
Added MaxLengthMessageComposer.java to .\/spikes\ repository source files.
Added MessageComposer.java to .\/spikes\ repository source files.
Added TwitterMessageComposer.java to .\/spikes\ repository source files.
Added DisabledMruPersister.java to .\/spikes\ repository source files.
Added MruPersister.java to .\/spikes\ repository source files.
Added SharedPreferencesMruPersister.java to .\/spikes\ repository source files.
Added OnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added PriorityShareDialog.java to .\/spikes\ repository source files.
Added PrioritySharer.java to .\/spikes\ repository source files.
Added ShareTargetsAdapter.java to .\/spikes\ repository source files.
Added SimpleOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added TargetApps.java to .\/spikes\ repository source files.
Added TwitterOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AdvancedActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SimpleActivity.java to .\/spikes\ repository source files.
Added LockingActivity.java to .\/spikes\ repository source files.
Added PostLockingActivity.java to .\/spikes\ repository source files.
Added PreLockingActivity.java to .\/spikes\ repository source files.
Added DummyAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added NovoStaggeredGridView.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SpikeApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SwipeableView.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MyClass.java to .\/spikes\ repository source files.
Added MyClassTest.java to .\/spikes\ repository source files.
Added MyAndroidClassTest.java to .\/spikes\ repository source files.
Added RobolectricGradleTestRunner.java to .\/spikes\ repository source files.
Added Mapper.java to .\/spikes\ repository source files.
Added Query.java to .\/spikes\ repository source files.
Added TypedResolver.java to .\/spikes\ repository source files.
Added CursorList.java to .\/spikes\ repository source files.
Added CursorListIterator.java to .\/spikes\ repository source files.
Added CursorMarshaller.java to .\/spikes\ repository source files.
Added EmptyListIterator.java to .\/spikes\ repository source files.
Added ReflectionCursorMarshaller.java to .\/spikes\ repository source files.
Added RichClass.java to .\/spikes\ repository source files.
Added Setter.java to .\/spikes\ repository source files.
Added Function.java to .\/spikes\ repository source files.
Added TypedElementLoader.java to .\/spikes\ repository source files.
Added TypedLoader.java to .\/spikes\ repository source files.
Added Marshaller.java to .\/spikes\ repository source files.
Added ObjectMapper.java to .\/spikes\ repository source files.
Added TypedActivity.java to .\/spikes\ repository source files.
Added StringUtil.java to .\/spikes\ repository source files.
Added MyObject.java to .\/spikes\ repository source files.
Added MediaPlayerSwitcherActivity.java to .\/spikes\ repository source files.
Added VideoPlayerService.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added RecognitionService.java to .\/spikes\ repository source files.
Added SessionService.java to .\/spikes\ repository source files.
Added SettingsActivity.java to .\/spikes\ repository source files.
Added SmartContextInteractionService.java to .\/spikes\ repository source files.
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
String[] planetTitles = new String[]{"Earth", "Saturn"};
DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
ListView drawerList = (ListView) findViewById(R.id.left_drawer);
Intent intent;
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close);
b=getIntent().getExtras()
Bundle b = getIntent().getExtras();
mShouldStartPlayback=b.getBoolean("shouldStart")
boolean mShouldStartPlayback = b.getBoolean("shouldStart");
startPosition=b.getInt("startPosition",0)
int startPosition = b.getInt("startPosition", 0);
currentPos=mVideoView.getCurrentPosition()
int currentPos = mVideoView.getCurrentPosition();
String msg;
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, mDisplaySize.y + getActionBar().getHeight());
mm=mSelectedMedia.getMetadata()
MediaMetadata mm = mSelectedMedia.getMetadata();
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, (int) (mDisplaySize.x * ASPECT_RATIO));
WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
width=display.getWidth()
int width = display.getWidth();
height=display.getHeight()
int height = display.getHeight();
int resourceId = 0;
String videoUrl = "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4#sthash.rJ5rPZy8.dpuf";
String title = "Jahre Philharmonie";
String description = "Awesome film you must watch!";
String author = "Blundell";
String thumbUrl = "http://www.ustream.tv/blog/wp-content/uploads/2013/10/simply-go-live.png";
MediaMetadata metadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE);
mediaInfo=new MediaInfo.Builder(videoUrl).setMetadata(metadata).setStreamType(MediaInfo.STREAM_TYPE_BUFFERED).setContentType("video/mp4").build()
MediaInfo mediaInfo = new MediaInfo.Builder(videoUrl)
                        .setMetadata(metadata)
                        .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)
                        .setContentType("video/mp4")
                        .build();
Intent intent = new Intent(MainActivity.this, LocalPlayerActivity.class);
preferences=getPreferences(MODE_PRIVATE)
SharedPreferences preferences = getPreferences(MODE_PRIVATE);
defaultSmsPackage=Telephony.Sms.getDefaultSmsPackage(this)
String defaultSmsPackage = Telephony.Sms.getDefaultSmsPackage(this);
Intent intent = new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
availableAppProvider=EasyCustomTabs.getInstance()
AvailableAppProvider availableAppProvider = EasyCustomTabs.getInstance();
ConnectedClient connectedClient = new ConnectedClient(client);
binder=Binder.newInstance()
Binder binder = Binder.newInstance();
List<Composer> composerList = new ArrayList<>();
customTabsSession=connection.newSession()
CustomTabsSession customTabsSession = connection.newSession();
CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(customTabsSession);
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
context=EasyCustomTabs.getInstance().getContext()
Context context = EasyCustomTabs.getInstance().getContext();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
packagesSupportingCustomTabs=getPackagesSupportingCustomTabs()
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
defaultPackage=getDefaultPackage()
String defaultPackage = getDefaultPackage();
defaultActivityInfo=packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK,0)
ResolveInfo defaultActivityInfo = packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK, 0);
String packageName = defaultActivityInfo.activityInfo.packageName;
resolvedInfoList=packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK,0)
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<String> packagesSupportingCustomTabs = new ArrayList<>();
Intent serviceIntent = new Intent();
bestPackageFinder=BestPackageFinder.newInstance()
BestPackageFinder bestPackageFinder = BestPackageFinder.newInstance();
packageName=bestPackageFinder.findBestPackage()
String packageName = bestPackageFinder.findBestPackage();
resolveInfo=createResolveInfoFor(packageName)
ResolveInfo resolveInfo = createResolveInfoFor(packageName);
ResolveInfo resolveInfo = new ResolveInfo();
List<ResolveInfo> resolveInfoList = new ArrayList<>();
defaultPackageResolveInfo=createResolveInfoFor(packageName)
ResolveInfo defaultPackageResolveInfo = createResolveInfoFor(packageName);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
oldestApiMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage oldestApiMessage = apiMessages.get(apiMessages.size() - 1);
String lastResponseEpochTime = oldestApiMessage.timeStamp;
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
latestMessage=latestMessages.get(latestMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage latestMessage = latestMessages.get(latestMessages.size() - 1);
latestMessageDateTime=convertToLocalDateTime(latestMessage.timeStamp)
LocalDateTime latestMessageDateTime = convertToLocalDateTime(latestMessage.timeStamp);
List<ChannelHistory.Message> messages = new ArrayList<>();
historyFrom=getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1))
LocalDateTime historyFrom = getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1));
historyTo=getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0))
LocalDateTime historyTo = getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0));
String text = apiMessage.text;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
lastMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage lastMessage = apiMessages.get(apiMessages.size() - 1);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
firstMessage=apiMessages.get(0)
ApiPagedChannelHistory.ApiMessage firstMessage = apiMessages.get(0);
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
String slackToken = args[0];
retrofit=new Retrofit.Builder().baseUrl("https://slack.com/api/").addConverterFactory(GsonConverterFactory.create()).build()
Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://slack.com/api/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();
slackWebService=retrofit.create(SlackWebService.class)
SlackWebService slackWebService = retrofit.create(SlackWebService.class);
slackHistoryFetcher=SlackHistoryFetcher.from(slackWebService,slackToken)
SlackHistoryFetcher slackHistoryFetcher = SlackHistoryFetcher.from(slackWebService, slackToken);
start=LocalDateTime.now()
LocalDateTime start = LocalDateTime.now();
end=LocalDateTime.now().minusDays(7)
LocalDateTime end = LocalDateTime.now().minusDays(7);
channelHistory=slackHistoryFetcher.getChannelHistory(start,end)
ChannelHistory channelHistory = slackHistoryFetcher.getChannelHistory(start, end);
HistoryConverter historyConverter = new HistoryConverter();
ApiPagedResponse apiPagedResponse = new ApiPagedResponse(start);
response=fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime())
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
apiPagedChannelHistory=response.body()
ApiPagedChannelHistory apiPagedChannelHistory = response.body();
channelHistory=slackWebService.getChannelHistory(slackToken,channel,lastResponseEpochTime,NUMBER_OF_RESULTS)
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
ApiPagedChannelHistory apiPagedChannelHistory = new ApiPagedChannelHistory();
ApiPagedChannelHistory.ApiMessage apiMessage = new ApiPagedChannelHistory.ApiMessage();
final TextView textView = new TextView(context);
emptyView=findViewById(R.id.empty_view)
View emptyView = findViewById(R.id.empty_view);
final Integer action = values[0];
LoremAdapter loremAdapter = new LoremAdapter();
accounts=accountManager.getAccountsByType(accountType)
Account[] accounts = accountManager.getAccountsByType(accountType);
Bundle result;
Bundle result;
Bundle result = new Bundle();
activity=createLoginIntent(context,accountType,authTokenType,requiredFeatures,options)
Intent activity = createLoginIntent(context, accountType, authTokenType, requiredFeatures, options);
Bundle bundle = new Bundle();
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
accounts=accountManager.getAccountsByType(authTokenType)
Account[] accounts = accountManager.getAccountsByType(authTokenType);
bundle=createResponseBundle(token)
Bundle bundle = createResponseBundle(token);
accountManager=AccountManager.get(this.getApplicationContext())
AccountManager accountManager = AccountManager.get(this.getApplicationContext());
Account account = new Account(token.getUserName(), getAccountName());
Bundle bundle = new Bundle();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
GertHerbAuthenticator authenticator = new GertHerbAuthenticator(this);
fontId=getFontId(context,attrs)
int fontId = getFontId(context, attrs);
fontType=getFontType(fontId)
FontType fontType = getFontType(fontId);
typedArray=context.obtainStyledAttributes(attrs,R.styleable.CustomTextAppearance)
TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CustomTextAppearance);
typeface=createTypeFace(context,fontType)
Typeface typeface = createTypeFace(context, fontType);
info=context.getApplicationInfo()
ApplicationInfo info = context.getApplicationInfo();
name=activity.getTitle().toString()
String name = activity.getTitle().toString();
client=mServer.accept()
Socket client = mServer.accept();
boolean result;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
BufferedReader in = null;
request=in.readLine()
final String request = in.readLine();
String command;
String parameters;
index=request.indexOf(' ')
int index = request.indexOf(' ');
boolean result;
boolean success = true;
BufferedWriter out = null;
index=parameters.indexOf(' ')
int index = parameters.indexOf(' ');
code=parameters.substring(0,index)
final String code = parameters.substring(0, index);
int hashCode = (int) Long.parseLong(code, 16);
window=findWindow(hashCode)
final View window = findWindow(hashCode);
dispatch=ViewDebug.class.getDeclaredMethod("dispatchCommand",View.class,String.class,String.class,OutputStream.class)
final Method dispatch = ViewDebug.class.getDeclaredMethod("dispatchCommand",
                        View.class, String.class, String.class, OutputStream.class);
View window = null;
boolean result = true;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
boolean result = true;
String focusName = null;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
View focusedWindow = null;
BufferedWriter out = null;
boolean needWindowListUpdate = false;
boolean needFocusedWindowUpdate = false;
BetterAccountManager accountManager = new BetterAccountManager(this, getString(R.string.account_type), getString(R.string.token_type), null);
loginView=Views.findById(this,R.id.login_view)
LoginView loginView = Views.findById(this, R.id.login_view);
authorizationApi=new GithubApiFactory().createAuthorizationApi(credentials.username,credentials.password)
GithubApi authorizationApi = new GithubApiFactory().createAuthorizationApi(credentials.username, credentials.password);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
Endpoint endpoint = new Endpoint() {
            @Override
            public String getUrl() {
                return GITHUB_API_URL;
            }

            @Override
            public String getName() {
                return "Live";
            }
        };
interceptor=createAuthorizationRequestInterceptor(username,password)
RequestInterceptor interceptor = createAuthorizationRequestInterceptor(username, password);
restAdapter=createRestAdapter(endpoint,interceptor)
RestAdapter restAdapter = createRestAdapter(endpoint, interceptor);
Dummy dummy = new Dummy();
result=dummy.explodes()
boolean result = dummy.explodes();
String base64EncodedPublicKey = "CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE";
premiumPurchase=inventory.getPurchase(SKU_PREMIUM)
Purchase premiumPurchase = inventory.getPurchase(SKU_PREMIUM);
infiniteGasPurchase=inventory.getPurchase(SKU_INFINITE_GAS)
Purchase infiniteGasPurchase = inventory.getPurchase(SKU_INFINITE_GAS);
gasPurchase=inventory.getPurchase(SKU_GAS)
Purchase gasPurchase = inventory.getPurchase(SKU_GAS);
String payload = "";
String payload = "";
String payload = "";
payload=p.getDeveloperPayload()
String payload = p.getDeveloperPayload();
int index = mTank >= TANK_RES_IDS.length ? TANK_RES_IDS.length - 1 : mTank;
AlertDialog.Builder bld = new AlertDialog.Builder(this);
spe=getPreferences(MODE_PRIVATE).edit()
SharedPreferences.Editor spe = getPreferences(MODE_PRIVATE).edit();
sp=getPreferences(MODE_PRIVATE)
SharedPreferences sp = getPreferences(MODE_PRIVATE);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                                  + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                    | ((source[d + 1 + off] << 24) >>> 16)
                    | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                    | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                                   "-1002:Bad response received/" +
                                   "-1003:Purchase signature verification failed/" +
                                   "-1004:Send intent failed/" +
                                   "-1005:User cancelled/" +
                                   "-1006:Unknown purchase response/" +
                                   "-1007:Missing token/" +
                                   "-1008:Unknown error/" +
                                   "-1009:Subscriptions not available/" +
                                   "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(),
                    itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                        | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                        | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                            | ((source[d + 1 + off] << 24) >>> 16)
                            | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                            | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                "-1002:Bad response received/" +
                "-1003:Purchase signature verification failed/" +
                "-1004:Send intent failed/" +
                "-1005:User cancelled/" +
                "-1006:Unknown purchase response/" +
                "-1007:Missing token/" +
                "-1008:Unknown error/" +
                "-1009:Subscriptions not available/" +
                "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(), itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
responseCode=result.getResponse()
int responseCode = result.getResponse();
sku=purchase.getSku()
String sku = purchase.getSku();
skuDetails=inv.getSkuDetails(sku)
SkuDetails skuDetails = inv.getSkuDetails(sku);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
Button purchaseFiveButton = (Button) rootView.findViewById(R.id.fragment_main_button_purchase_five_coins);
xml=context.obtainStyledAttributes(attrs,R.styleable.LandingStrip)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.LandingStrip);
tabLayoutId=xml.getResourceId(R.styleable.LandingStrip_tabLayoutId,MISSING_TAB_LAYOUT_ID)
int tabLayoutId = xml.getResourceId(R.styleable.LandingStrip_tabLayoutId, MISSING_TAB_LAYOUT_ID);
indicatorColour=xml.getResourceId(R.styleable.LandingStrip_indicatorColor,DEFAULT_INDICATOR_COLOUR)
int indicatorColour = xml.getResourceId(R.styleable.LandingStrip_indicatorColor, DEFAULT_INDICATOR_COLOUR);
indicatorHeight=getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight,DEFAULT_INDICATOR_HEIGHT,xml)
int indicatorHeight = getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight, DEFAULT_INDICATOR_HEIGHT, xml);
tabsPaddingLeft=getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingLeft = getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding, DEFAULT_TABS_PADDING, xml);
tabsPaddingRight=getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingRight = getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding, DEFAULT_TABS_PADDING, xml);
MutableCoordinates drawCurrentTabCoordinates = new MutableCoordinates();
MutableCoordinates drawNextTabCoordinates = new MutableCoordinates();
MutableCoordinates drawMovingIndicatorCoordinates = new MutableCoordinates();
currentTab=tabsContainer.getTabAt(currentPosition)
View currentTab = tabsContainer.getTabAt(currentPosition);
currentTabStart=currentTab.getLeft()
float currentTabStart = currentTab.getLeft();
currentTabEnd=currentTab.getRight()
float currentTabEnd = currentTab.getRight();
nextTab=tabsContainer.getTabAt(currentPosition + 1)
View nextTab = tabsContainer.getTabAt(currentPosition + 1);
nextTabPositionOffset=getFractionFrom(pagePositionOffset)
float nextTabPositionOffset = getFractionFrom(pagePositionOffset);
indicatorStart=getIndicatorPosition(nextTab.getStart(),pagePositionOffset,currentTab.getStart(),nextTabPositionOffset)
float indicatorStart = getIndicatorPosition(nextTab.getStart(), pagePositionOffset, currentTab.getStart(), nextTabPositionOffset);
indicatorEnd=getIndicatorPosition(nextTab.getEnd(),pagePositionOffset,currentTab.getEnd(),nextTabPositionOffset)
float indicatorEnd = getIndicatorPosition(nextTab.getEnd(), pagePositionOffset, currentTab.getEnd(), nextTabPositionOffset);
height=getHeight()
int height = getHeight();
tabCount=pagerAdapter.getCount()
int tabCount = pagerAdapter.getCount();
title=pagerAdapter.getPageTitle(position)
CharSequence title = pagerAdapter.getPageTitle(position);
inflatedTabView=tabsContainer.inflateTab(layoutInflater,attributes.getTabLayoutId())
View inflatedTabView = tabsContainer.inflateTab(layoutInflater, attributes.getTabLayoutId());
int position = (int) view.getTag(TAG_KEY_POSITION);
scrollOffset=getHorizontalScrollOffset(position,positionOffset)
int scrollOffset = getHorizontalScrollOffset(position, positionOffset);
newScrollX=calculateScrollOffset(position,scrollOffset,positionOffset)
float newScrollX = calculateScrollOffset(position, scrollOffset, positionOffset);
tabWidth=tabsContainer.getTabAt(position).getWidth()
int tabWidth = tabsContainer.getTabAt(position).getWidth();
tabForPosition=tabsContainer.getTabAt(position)
View tabForPosition = tabsContainer.getTabAt(position);
float tabStartX = tabForPosition.getLeft() + scrollOffset;
int viewMiddleOffset = getTabParentWidth() / 2;
float tabCenterOffset = (tabForPosition.getRight() - tabForPosition.getLeft()) * 0.5F;
nextTabDelta=getNextTabDelta(position,pagerOffset,tabForPosition)
float nextTabDelta = getNextTabDelta(position, pagerOffset, tabForPosition);
LinearLayout tabsContainerView = new LinearLayout(context);
tab=getTabAt(index)
View tab = getTabAt(index);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
position=indicatorCoordinates.getStart()
float position = indicatorCoordinates.getStart();
lastTabOffset=((ViewGroup)getChildAt(0)).getChildAt(getChildCount() - 1).getWidth()
float lastTabOffset = ((ViewGroup) getChildAt(0)).getChildAt(getChildCount() - 1).getWidth();
frequency=getOneCycle(lastTabOffset)
float frequency = getOneCycle(lastTabOffset);
r=toHex(calculateColour(position,frequency,PHASE_RED,AMPLITUDE,CENTER_FREQUENCY))
String r = toHex(calculateColour(position, frequency, PHASE_RED, AMPLITUDE, CENTER_FREQUENCY));
g=toHex(calculateColour(position,frequency,PHASE_GREEN,AMPLITUDE,CENTER_FREQUENCY))
String g = toHex(calculateColour(position, frequency, PHASE_GREEN, AMPLITUDE, CENTER_FREQUENCY));
b=toHex(calculateColour(position,frequency,PHASE_BLUE,AMPLITUDE,CENTER_FREQUENCY))
String b = toHex(calculateColour(position, frequency, PHASE_BLUE, AMPLITUDE, CENTER_FREQUENCY));
height=getHeight()
int height = getHeight();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPagerFragment viewPagerFragment = new ViewPagerFragment();
Bundle bundle = new Bundle();
TextView view = (TextView) layoutInflater.inflate(R.layout.view_demo, container, false);
currentPosition=viewPagerAdapterState.getCurrentPosition()
int currentPosition = viewPagerAdapterState.getCurrentPosition();
view=getView(container,position)
View view = getView(container, position);
parcelableSparseArray=viewPagerAdapterState.get(position)
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
View view = (View) object;
SparseArray<Parcelable> viewState = new SparseArray<>();
position=entry.getValue()
int position = entry.getValue();
view=entry.getKey()
View view = entry.getKey();
bundle=in.readBundle()
Bundle bundle = in.readBundle();
Map<Integer, SparseArray<Parcelable>> viewStates = new HashMap<>(bundle.keySet().size());
sparseParcelableArray=bundle.getSparseParcelableArray(key)
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
primaryItemPosition=in.readInt()
int primaryItemPosition = in.readInt();
Bundle bundle = new Bundle();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
final TextView abText = (TextView) findViewById(R.id.ab_text);
final AyBe ayBe = new AyBe();
id=item.getItemId()
int id = item.getItemId();
callback=weakCallback.get()
AbTestingParamsLoadedCallback callback = weakCallback.get();
WeakReference<NoLeakActivity> weakNoLeakActivity = new WeakReference<NoLeakActivity>(noLeakActivity);
noLeakActivity=weakNoLeakActivity.get()
NoLeakActivity noLeakActivity = weakNoLeakActivity.get();
final float inverseRatio = 1f - ratio;
float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRatio);
float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRatio);
float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRatio);
hsv=node.getHsv()
float[] hsv = node.getHsv();
width=bitmap.getWidth()
final int width = bitmap.getWidth();
height=bitmap.getHeight()
final int height = bitmap.getHeight();
final int[] rgbPixels = new int[width * height];
final MedianCutQuantizer mcq = new MedianCutQuantizer(rgbPixels, NUM_COLORS);
primaryAccentColor=findPrimaryAccentColor()
final ColorNode primaryAccentColor = findPrimaryAccentColor();
secondaryAccentColor=findSecondaryAccentColor(primaryAccentColor)
final ColorNode secondaryAccentColor = findSecondaryAccentColor(primaryAccentColor);
tertiaryAccentColor=findTertiaryAccentColor(primaryAccentColor,secondaryAccentColor)
final int tertiaryAccentColor = findTertiaryAccentColor(
                primaryAccentColor, secondaryAccentColor);
primaryTextColor=findPrimaryTextColor(primaryAccentColor)
final int primaryTextColor = findPrimaryTextColor(primaryAccentColor);
secondaryTextColor=findSecondaryTextColor(primaryAccentColor)
final int secondaryTextColor = findSecondaryTextColor(primaryAccentColor);
final float primaryHue = primary.getHsv()[0];
final float candidateHue = candidate.getHsv()[0];
copy=Arrays.copyOf(palette,palette.length)
final MedianCutQuantizer.ColorNode[] copy = Arrays.copyOf(palette, palette.length);
maxCount=palette[0].getCount()
final float maxCount = palette[0].getCount();
lhsWeight=calculateWeight(lhs,maxCount)
final float lhsWeight = calculateWeight(lhs, maxCount);
rhsWeight=calculateWeight(rhs,maxCount)
final float rhsWeight = calculateWeight(rhs, maxCount);
float sum = 0;
float sumWeight = 0;
float value = values[i];
float weight = values[i + 1];
ColorHistogram colorHist = new ColorHistogram(pixels);
K=colorHist.getNumberOfColors()
int K = colorHist.getNumberOfColors();
ColorNode[] rCols = null;
rgb=colorHist.getColor(i)
int rgb = colorHist.getColor(i);
cnt=colorHist.getCount(i)
int cnt = colorHist.getCount(i);
ColorBox initialBox = new ColorBox(0, K - 1, 0);
List<ColorBox> colorSet = new ArrayList<ColorBox>();
int k = 1;
boolean done = false;
nextBox=findBoxToSplit(colorSet)
ColorBox nextBox = findBoxToSplit(colorSet);
newBox=nextBox.splitBox()
ColorBox newBox = nextBox.splitBox();
color=findClosestColor(pixels[i])
ColorNode color = findClosestColor(pixels[i]);
idx=findClosestColorIndex(rgb)
int idx = findClosestColorIndex(rgb);
red=Color.red(rgb)
int red = Color.red(rgb);
grn=Color.green(rgb)
int grn = Color.green(rgb);
blu=Color.blue(rgb)
int blu = Color.blue(rgb);
int minIdx = 0;
int minDistance = Integer.MAX_VALUE;
ColorNode color = quantColors[i];
d2=color.distance2(red,grn,blu)
int d2 = color.distance2(red, grn, blu);
ColorBox boxToSplit = null;
int minLevel = Integer.MAX_VALUE;
n=colorBoxes.size()
int n = colorBoxes.size();
ColorNode[] avgColors = new ColorNode[n];
int i = 0;
int dr = this.red - red;
int dg = this.grn - grn;
int db = this.blu - blu;
ColorNode color = imageColors[i];
int r = color.red;
int g = color.grn;
int b = color.blu;
dim=getLongestColorDimension()
ColorDimension dim = getLongestColorDimension();
med=findMedian(dim)
int med = findMedian(dim);
int nextLevel = level + 1;
ColorBox newBox = new ColorBox(med + 1, upper, nextLevel);
int rLength = rmax - rmin;
int gLength = gmax - gmin;
int bLength = bmax - bmin;
int half = count / 2;
int nPixels, median;
int rSum = 0;
int gSum = 0;
int bSum = 0;
int n = 0;
ColorNode ci = imageColors[i];
int cnt = ci.cnt;
double nd = n;
int avgRed = (int) (0.5 + rSum / nd);
int avgGrn = (int) (0.5 + gSum / nd);
int avgBlu = (int) (0.5 + bSum / nd);
s=this.getClass().getSimpleName()
String s = this.getClass().getSimpleName();
int i = 0;
int N = pixelsOrig.length;
int[] pixelsCpy = new int[N];
int k = -1;
int curColor = -1;
int nColors = k + 1;
id=item.getItemId()
int id = item.getItemId();
Intent intent = new Intent();
bitmap=((BitmapDrawable)imageView.getDrawable()).getBitmap()
Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap();
DominantColorCalculator dominantColorCalculator = new DominantColorCalculator(bitmap);
selectedImageUri=data.getData()
Uri selectedImageUri = data.getData();
selectedImagePath=getPath(selectedImageUri)
String selectedImagePath = getPath(selectedImageUri);
String[] projection = {MediaStore.Images.Media.DATA};
cursor=managedQuery(uri,projection,null,null,null)
Cursor cursor = managedQuery(uri, projection, null, null, null);
column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)
int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
LinearLayout rootView = (LinearLayout) inflater.inflate(R.layout.fragment_main, container, false);
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
preapprovalButton=payPal.getCheckoutButton(getActivity(),PayPal.BUTTON_194x37,CheckoutButton.TEXT_PAY)
CheckoutButton preapprovalButton = payPal.getCheckoutButton(getActivity(), PayPal.BUTTON_194x37, CheckoutButton.TEXT_PAY);
preapprovalIntent=payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY)
Intent preapprovalIntent = payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY);
String resultTitle = "";
String resultInfo = "";
String resultExtra = "";
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
PayPalPreapproval preapproval = new PayPalPreapproval();
preapproval=createPreapproval(preapprovalKey)
PayPalPreapproval preapproval = createPreapproval(preapprovalKey);
Bundle bundle = new Bundle();
int availableLength = maxLength;
StringBuilder stringBuilder = new StringBuilder(maxLength);
prefixAndSuffixLength=computeAppendedLengthIncludingSeparatorSpaces(prefix,suffix)
int prefixAndSuffixLength = computeAppendedLengthIncludingSeparatorSpaces(prefix, suffix);
urlLength=computeUrlLengthIncludingSeparatorSpace(url)
int urlLength = computeUrlLengthIncludingSeparatorSpace(url);
trimmedSubject=ellipsizeTextIfExceedsMaxLength(subject,availableLength)
String trimmedSubject = ellipsizeTextIfExceedsMaxLength(subject, availableLength);
int length = 0;
preferences=context.getSharedPreferences(MRU_PREFERENCES,Context.MODE_PRIVATE)
SharedPreferences preferences = context.getSharedPreferences(MRU_PREFERENCES, Context.MODE_PRIVATE);
args=getArguments()
Bundle args = getArguments();
themeResId=getThemeResIdIfProvidedIn(args)
int themeResId = getThemeResIdIfProvidedIn(args);
title=getTitleIfProvidedIn(args)
CharSequence title = getTitleIfProvidedIn(args);
builder=createDialogBuilder(themeResId).setCancelable(true).setView(dialogView)
AlertDialog.Builder builder = createDialogBuilder(themeResId)
                .setCancelable(true)
                .setView(dialogView);
inflater=getActivity().getLayoutInflater()
LayoutInflater inflater = getActivity().getLayoutInflater();
GridView gridView = (GridView) rootView.findViewById(R.id.ps__dialog_grid);
targetApps=extractTargetAppsFrom(args)
TargetApps targetApps = extractTargetAppsFrom(args);
allShareTargets=getAvailableShareTargets(sharingIntent)
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
priorityAppInfos=createPriorityResolveInfoList(targetApps,allShareTargets)
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
otherAppInfos=createOtherAppsResolveInfoList(priorityAppInfos,allShareTargets)
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
resolveInfos=targetApps.extractTargetResolveInfosFrom(allShareTargets)
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
mruResolveInfo=findMruResolveInfoIn(allShareTargets)
ResolveInfo mruResolveInfo = findMruResolveInfoIn(allShareTargets);
List<ResolveInfo> otherAppsInfos = new ArrayList<ResolveInfo>(allAppInfos);
mruPackageName=persister.getLastUsedTarget()
String mruPackageName = persister.getLastUsedTarget();
String packageName = resolveInfo.activityInfo.packageName;
packageManager=getActivity().getPackageManager()
PackageManager packageManager = getActivity().getPackageManager();
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
View buttonStrip = (View) showMoreButton.getParent();
gridView=getGridView()
GridView gridView = getGridView();
intent=wrapIntentWithExplicitTargetComponentForItem(position,sharingIntent)
Intent intent = wrapIntentWithExplicitTargetComponentForItem(position, sharingIntent);
Intent intent = new Intent(sharingIntent);
ActivityInfo activity = adapter.getItem(position).activityInfo;
ComponentName name = new ComponentName(activity.applicationInfo.packageName, activity.name);
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
PriorityShareDialog dialog = new PriorityShareDialog();
Bundle args = new Bundle();
sharingIntent=createSharingIntent()
Intent sharingIntent = createSharingIntent();
fragmentManager=activity.getFragmentManager()
FragmentManager fragmentManager = activity.getFragmentManager();
Intent intent = new Intent(Intent.ACTION_SEND);
dialog=new PriorityShareDialog.Builder().setTitle(title).setTargetApps(targetApps).setSharingIntent(sharingIntent).setOnPrepareSharingIntentListener(listener).setShowMostRecentlyUsed(showMostRecentlyUsed).build()
PriorityShareDialog dialog = new PriorityShareDialog.Builder()
                .setTitle(title)
                .setTargetApps(targetApps)
                .setSharingIntent(sharingIntent)
                .setOnPrepareSharingIntentListener(listener)
                .setShowMostRecentlyUsed(showMostRecentlyUsed)
                .build();
PrioritySharer prioritySharer = new PrioritySharer();
prioritySharer=build()
PrioritySharer prioritySharer = build();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
layoutInflater=LayoutInflater.from(context)
LayoutInflater layoutInflater = LayoutInflater.from(context);
iconSizePx=getIconSizePx(context.getResources())
int iconSizePx = getIconSizePx(context.getResources());
ArrayList<ResolveInfo> sortedList = new ArrayList<ResolveInfo>(resolveInfoList);
int otherAppsCountMaybe = showAllApps ? otherAppInfos.size() : 0;
firstOtherAppsItemPosition=priorityAppInfos.size()
int firstOtherAppsItemPosition = priorityAppInfos.size();
int offsetPosition = position - firstOtherAppsItemPosition;
TextView textView;
textView=initializeItemViewIfNecessary(convertView,R.layout.ps__grid_item_share,parent)
TextView textView = initializeItemViewIfNecessary(convertView, R.layout.ps__grid_item_share, parent);
info=getItem(position)
ResolveInfo info = getItem(position);
icon=info.loadIcon(packageManager)
Drawable icon = info.loadIcon(packageManager);
arraySize=in.readInt()
int arraySize = in.readInt();
String[] packageNames = new String[arraySize];
arraySize=targetPackages.size()
int arraySize = targetPackages.size();
String[] packagesArray = new String[arraySize];
SparseArray<ResolveInfo> matchedResolveInfos = new SparseArray<ResolveInfo>(targetPackages.size());
String packageName = info.activityInfo.packageName;
index=indexOfItemInto(packageName,targetPackages)
int index = indexOfItemInto(packageName, targetPackages);
sparseArraySize=sparseArray.size()
int sparseArraySize = sparseArray.size();
ArrayList<T> list = new ArrayList<T>(sparseArraySize);
int i = 0;
originalSubject=intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT)
CharSequence originalSubject = intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT);
String subject = originalSubject != null ? originalSubject.toString() : null;
composer=createComposer()
MessageComposer composer = createComposer();
component=intent.getComponent()
ComponentName component = intent.getComponent();
targetPackageName=component.getPackageName()
String targetPackageName = component.getPackageName();
adapter=ArrayAdapter.createFromResource(this,R.array.target_apps,android.R.layout.simple_spinner_item)
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
EditText text = (EditText) findViewById(R.id.text);
EditText title = (EditText) findViewById(R.id.title);
EditText mimeType = (EditText) findViewById(R.id.mime_type);
EditText dataUri = (EditText) findViewById(R.id.data_uri);
Switch showMostRecentlyUsed = (Switch) findViewById(R.id.show_most_recently_used);
uriString=dataUri.getText().toString()
String uriString = dataUri.getText().toString();
EditText text = (EditText) findViewById(R.id.text);
TextView textView = (TextView) convertView.findViewById(R.id.positionView);
colorView=convertView.findViewById(R.id.colorView)
View colorView = convertView.findViewById(R.id.colorView);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
offset=headerPlaceholder.getTop()
int offset = headerPlaceholder.getTop();
Integer item = COLORS[position];
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
firstVisiblePosition=grid.getFirstVisiblePosition()
int firstVisiblePosition = grid.getFirstVisiblePosition();
inflate=getViewForPosition(container,position)
View inflate = getViewForPosition(container, position);
id=item.getItemId()
int id = item.getItemId();
MyActivity activity = new MyActivity();
String manifestProperty = "../app/src/main/AndroidManifest.xml";
String resProperty = "../app/src/main/res";
cursor=resolver.query(uri,projection,selection,selectionArgs,null)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, null);
cursor=resolver.query(uri,projection,selection,selectionArgs,sortOrder)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, sortOrder);
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=richClass.setter(name)
Method setter = richClass.setter(name);
T obj;
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=methodsByName.get(name)
Method setter = methodsByName.get(name);
int type = TYPE_INT;
Class<?> t = setter.getParameterTypes()[0];
Class<?> t = setter.getParameterTypes()[0];
cursorType=cursor.getType(index)
final int cursorType = cursor.getType(index);
final Object obj;
s=f.getAnnotation(Mapper.class)
Mapper s = f.getAnnotation(Mapper.class);
mm=m.getAnnotation(Mapper.class)
Mapper mm = m.getAnnotation(Mapper.class);
methodName=StringUtil.asCamelifySetMethod(what)
String methodName = StringUtil.asCamelifySetMethod(what);
cursor=getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,null,null,null,null)
Cursor cursor = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
now=System.currentTimeMillis()
long now = System.currentTimeMillis();
List<Contact2> typedCursor = new CursorList<Contact2>(cursor, Contact2.class);
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[a-zA-Z0-9]+")
Pattern p = Pattern.compile("[a-zA-Z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[A-Z][a-z0-9]+")
Pattern p = Pattern.compile("[A-Z][a-z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
SurfaceView first = (SurfaceView) findViewById(R.id.firstSurface);
SurfaceView second = (SurfaceView) findViewById(R.id.secondSurface);
Intent pickVideo = new Intent(Intent.ACTION_PICK);
Bundle args = new Bundle();
enroll=mHotwordDetector.createEnrollIntent()
Intent enroll = mHotwordDetector.createEnrollIntent();

Diff of c4a31c81f82f157d9e9e2ec2fe7f64caf853aa49 and ac2ff40e72c4380c82c525432a45d5c24bc8b7d5:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 33
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision c4a31c81f82f157d9e9e2ec2fe7f64caf853aa49 to ac2ff40e72c4380c82c525432a45d5c24bc8b7d5


****Parsing for addition at revision ac2ff40e72c4380c82c525432a45d5c24bc8b7d5****

Added ApplicationTest.java to .\/spikes\ repository source files.
Added DrawerActivity.java to .\/spikes\ repository source files.
Added EarthActivity.java to .\/spikes\ repository source files.
Added SaturnActivity.java to .\/spikes\ repository source files.
Added LocalPlayerActivity.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added CastApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ComposeSmsActivity.java to .\/spikes\ repository source files.
Added HeadlessSmsSendService.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MmsReceiver.java to .\/spikes\ repository source files.
Added SmsReceiver.java to .\/spikes\ repository source files.
Added ExtendedDemoActivity.java to .\/spikes\ repository source files.
Added ExtendedDemoApplication.java to .\/spikes\ repository source files.
Added SimpleDemoActivity.java to .\/spikes\ repository source files.
Added SimpleDemoApplication.java to .\/spikes\ repository source files.
Added Binder.java to .\/spikes\ repository source files.
Added ConnectedClient.java to .\/spikes\ repository source files.
Added Connection.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnection.java to .\/spikes\ repository source files.
Added ServiceConnectionCallback.java to .\/spikes\ repository source files.
Added EasyCustomTabs.java to .\/spikes\ repository source files.
Added ActionButtonComposer.java to .\/spikes\ repository source files.
Added CloseButtonIconComposer.java to .\/spikes\ repository source files.
Added Composer.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilder.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigator.java to .\/spikes\ repository source files.
Added EasyCustomTabsWebNavigator.java to .\/spikes\ repository source files.
Added ExitAnimationsComposer.java to .\/spikes\ repository source files.
Added IntentCustomizer.java to .\/spikes\ repository source files.
Added MenuItemComposer.java to .\/spikes\ repository source files.
Added NavigationFallback.java to .\/spikes\ repository source files.
Added Navigator.java to .\/spikes\ repository source files.
Added ShowTitleComposer.java to .\/spikes\ repository source files.
Added StartAnimationsComposer.java to .\/spikes\ repository source files.
Added ToolbarColorComposer.java to .\/spikes\ repository source files.
Added UrlBarHidingComposer.java to .\/spikes\ repository source files.
Added WebNavigator.java to .\/spikes\ repository source files.
Added AvailableAppProvider.java to .\/spikes\ repository source files.
Added BestPackageFinder.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProvider.java to .\/spikes\ repository source files.
Added BinderTest.java to .\/spikes\ repository source files.
Added ConnectedClientTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnectionTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigatorTest.java to .\/spikes\ repository source files.
Added BestPackageFinderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProviderTest.java to .\/spikes\ repository source files.
Added ApiPagedChannelHistory.java to .\/spikes\ repository source files.
Added ApiPagedResponse.java to .\/spikes\ repository source files.
Added ChannelHistory.java to .\/spikes\ repository source files.
Added HistoryConverter.java to .\/spikes\ repository source files.
Added Runner.java to .\/spikes\ repository source files.
Added SlackHistoryFetcher.java to .\/spikes\ repository source files.
Added SlackWebService.java to .\/spikes\ repository source files.
Added ApiPagedResponseTest.java to .\/spikes\ repository source files.
Added MainActivityTest.java to .\/spikes\ repository source files.
Added LoremAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added BetterAccountManager.java to .\/spikes\ repository source files.
Added BetterAuthenticator.java to .\/spikes\ repository source files.
Added BetterAuthenticatorActivity.java to .\/spikes\ repository source files.
Added GertHerbAuthenticator.java to .\/spikes\ repository source files.
Added GertHerbAuthenticatorService.java to .\/spikes\ repository source files.
Added NoAccountException.java to .\/spikes\ repository source files.
Added ReactiveAuthenticatorActivity.java to .\/spikes\ repository source files.
Added Token.java to .\/spikes\ repository source files.
Added GertHerbActivity.java to .\/spikes\ repository source files.
Added GertHerbApplication.java to .\/spikes\ repository source files.
Added GertHerbAuthenticationActivity.java to .\/spikes\ repository source files.
Added TypefaceFactory.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added ViewServer.java to .\/spikes\ repository source files.
Added ViewServerManager.java to .\/spikes\ repository source files.
Added DeveloperError.java to .\/spikes\ repository source files.
Added HomeActivity.java to .\/spikes\ repository source files.
Added LoginActivity.java to .\/spikes\ repository source files.
Added LoginView.java to .\/spikes\ repository source files.
Added UserCredentials.java to .\/spikes\ repository source files.
Added FontButton.java to .\/spikes\ repository source files.
Added FontEditText.java to .\/spikes\ repository source files.
Added FontTextView.java to .\/spikes\ repository source files.
Added GithubApi.java to .\/spikes\ repository source files.
Added GithubApiFactory.java to .\/spikes\ repository source files.
Added TokenRequest.java to .\/spikes\ repository source files.
Added TokenResponse.java to .\/spikes\ repository source files.
Added Dummy.java to .\/spikes\ repository source files.
Added DummyTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MainFragment.java to .\/spikes\ repository source files.
Added Attributes.java to .\/spikes\ repository source files.
Added Coordinates.java to .\/spikes\ repository source files.
Added IndicatorCoordinatesCalculator.java to .\/spikes\ repository source files.
Added LandingStrip.java to .\/spikes\ repository source files.
Added MutableCoordinates.java to .\/spikes\ repository source files.
Added OnPagerAdapterChangedListener.java to .\/spikes\ repository source files.
Added PagerAdapterObserver.java to .\/spikes\ repository source files.
Added Scrollable.java to .\/spikes\ repository source files.
Added ScrollingPageChangeListener.java to .\/spikes\ repository source files.
Added State.java to .\/spikes\ repository source files.
Added TabsContainer.java to .\/spikes\ repository source files.
Added CustomLandingStrip.java to .\/spikes\ repository source files.
Added CustomTabActivity.java to .\/spikes\ repository source files.
Added ExampleRainbowLandingStrip.java to .\/spikes\ repository source files.
Added FixedWidthTabActivity.java to .\/spikes\ repository source files.
Added NoFragmentsSimpleTextTabActivity.java to .\/spikes\ repository source files.
Added Data.java to .\/spikes\ repository source files.
Added DemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added SmallDemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerFragment.java to .\/spikes\ repository source files.
Added DemoViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapterState.java to .\/spikes\ repository source files.
Added SimpleTextTabActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AbTestingParamsLoadedCallback.java to .\/spikes\ repository source files.
Added AyBe.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added WeakStartCallback.java to .\/spikes\ repository source files.
Added LeakActivity.java to .\/spikes\ repository source files.
Added NoLeakActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added ColorScheme.java to .\/spikes\ repository source files.
Added ColorUtils.java to .\/spikes\ repository source files.
Added DominantColorCalculator.java to .\/spikes\ repository source files.
Added FloatUtils.java to .\/spikes\ repository source files.
Added MedianCutQuantizer.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added PayPalFragment.java to .\/spikes\ repository source files.
Added PayPalHelper.java to .\/spikes\ repository source files.
Added MaxLengthMessageComposer.java to .\/spikes\ repository source files.
Added MessageComposer.java to .\/spikes\ repository source files.
Added TwitterMessageComposer.java to .\/spikes\ repository source files.
Added DisabledMruPersister.java to .\/spikes\ repository source files.
Added MruPersister.java to .\/spikes\ repository source files.
Added SharedPreferencesMruPersister.java to .\/spikes\ repository source files.
Added OnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added PriorityShareDialog.java to .\/spikes\ repository source files.
Added PrioritySharer.java to .\/spikes\ repository source files.
Added ShareTargetsAdapter.java to .\/spikes\ repository source files.
Added SimpleOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added TargetApps.java to .\/spikes\ repository source files.
Added TwitterOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AdvancedActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SimpleActivity.java to .\/spikes\ repository source files.
Added LockingActivity.java to .\/spikes\ repository source files.
Added PostLockingActivity.java to .\/spikes\ repository source files.
Added PreLockingActivity.java to .\/spikes\ repository source files.
Added DummyAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added NovoStaggeredGridView.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SpikeApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SwipeableView.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MyClass.java to .\/spikes\ repository source files.
Added MyClassTest.java to .\/spikes\ repository source files.
Added MyAndroidClassTest.java to .\/spikes\ repository source files.
Added RobolectricGradleTestRunner.java to .\/spikes\ repository source files.
Added Mapper.java to .\/spikes\ repository source files.
Added Query.java to .\/spikes\ repository source files.
Added TypedResolver.java to .\/spikes\ repository source files.
Added CursorList.java to .\/spikes\ repository source files.
Added CursorListIterator.java to .\/spikes\ repository source files.
Added CursorMarshaller.java to .\/spikes\ repository source files.
Added EmptyListIterator.java to .\/spikes\ repository source files.
Added ReflectionCursorMarshaller.java to .\/spikes\ repository source files.
Added RichClass.java to .\/spikes\ repository source files.
Added Setter.java to .\/spikes\ repository source files.
Added Function.java to .\/spikes\ repository source files.
Added TypedElementLoader.java to .\/spikes\ repository source files.
Added TypedLoader.java to .\/spikes\ repository source files.
Added Marshaller.java to .\/spikes\ repository source files.
Added ObjectMapper.java to .\/spikes\ repository source files.
Added TypedActivity.java to .\/spikes\ repository source files.
Added StringUtil.java to .\/spikes\ repository source files.
Added MyObject.java to .\/spikes\ repository source files.
Added MediaPlayerSwitcherActivity.java to .\/spikes\ repository source files.
Added VideoPlayerService.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added RecognitionService.java to .\/spikes\ repository source files.
Added SessionService.java to .\/spikes\ repository source files.
Added SettingsActivity.java to .\/spikes\ repository source files.
Added SmartContextInteractionService.java to .\/spikes\ repository source files.
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
String[] planetTitles = new String[]{"Earth", "Saturn"};
DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
ListView drawerList = (ListView) findViewById(R.id.left_drawer);
Intent intent;
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close);
b=getIntent().getExtras()
Bundle b = getIntent().getExtras();
mShouldStartPlayback=b.getBoolean("shouldStart")
boolean mShouldStartPlayback = b.getBoolean("shouldStart");
startPosition=b.getInt("startPosition",0)
int startPosition = b.getInt("startPosition", 0);
currentPos=mVideoView.getCurrentPosition()
int currentPos = mVideoView.getCurrentPosition();
String msg;
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, mDisplaySize.y + getActionBar().getHeight());
mm=mSelectedMedia.getMetadata()
MediaMetadata mm = mSelectedMedia.getMetadata();
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, (int) (mDisplaySize.x * ASPECT_RATIO));
WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
width=display.getWidth()
int width = display.getWidth();
height=display.getHeight()
int height = display.getHeight();
int resourceId = 0;
String videoUrl = "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4#sthash.rJ5rPZy8.dpuf";
String title = "Jahre Philharmonie";
String description = "Awesome film you must watch!";
String author = "Blundell";
String thumbUrl = "http://www.ustream.tv/blog/wp-content/uploads/2013/10/simply-go-live.png";
MediaMetadata metadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE);
mediaInfo=new MediaInfo.Builder(videoUrl).setMetadata(metadata).setStreamType(MediaInfo.STREAM_TYPE_BUFFERED).setContentType("video/mp4").build()
MediaInfo mediaInfo = new MediaInfo.Builder(videoUrl)
                        .setMetadata(metadata)
                        .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)
                        .setContentType("video/mp4")
                        .build();
Intent intent = new Intent(MainActivity.this, LocalPlayerActivity.class);
preferences=getPreferences(MODE_PRIVATE)
SharedPreferences preferences = getPreferences(MODE_PRIVATE);
defaultSmsPackage=Telephony.Sms.getDefaultSmsPackage(this)
String defaultSmsPackage = Telephony.Sms.getDefaultSmsPackage(this);
Intent intent = new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
availableAppProvider=EasyCustomTabs.getInstance()
AvailableAppProvider availableAppProvider = EasyCustomTabs.getInstance();
ConnectedClient connectedClient = new ConnectedClient(client);
binder=Binder.newInstance()
Binder binder = Binder.newInstance();
List<Composer> composerList = new ArrayList<>();
customTabsSession=connection.newSession()
CustomTabsSession customTabsSession = connection.newSession();
CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(customTabsSession);
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
context=EasyCustomTabs.getInstance().getContext()
Context context = EasyCustomTabs.getInstance().getContext();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
packagesSupportingCustomTabs=getPackagesSupportingCustomTabs()
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
defaultPackage=getDefaultPackage()
String defaultPackage = getDefaultPackage();
defaultActivityInfo=packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK,0)
ResolveInfo defaultActivityInfo = packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK, 0);
String packageName = defaultActivityInfo.activityInfo.packageName;
resolvedInfoList=packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK,0)
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<String> packagesSupportingCustomTabs = new ArrayList<>();
Intent serviceIntent = new Intent();
bestPackageFinder=BestPackageFinder.newInstance()
BestPackageFinder bestPackageFinder = BestPackageFinder.newInstance();
packageName=bestPackageFinder.findBestPackage()
String packageName = bestPackageFinder.findBestPackage();
resolveInfo=createResolveInfoFor(packageName)
ResolveInfo resolveInfo = createResolveInfoFor(packageName);
ResolveInfo resolveInfo = new ResolveInfo();
List<ResolveInfo> resolveInfoList = new ArrayList<>();
defaultPackageResolveInfo=createResolveInfoFor(packageName)
ResolveInfo defaultPackageResolveInfo = createResolveInfoFor(packageName);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
oldestApiMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage oldestApiMessage = apiMessages.get(apiMessages.size() - 1);
String lastResponseEpochTime = oldestApiMessage.timeStamp;
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
latestMessage=latestMessages.get(latestMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage latestMessage = latestMessages.get(latestMessages.size() - 1);
latestMessageDateTime=convertToLocalDateTime(latestMessage.timeStamp)
LocalDateTime latestMessageDateTime = convertToLocalDateTime(latestMessage.timeStamp);
List<ChannelHistory.Message> messages = new ArrayList<>();
historyFrom=getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1))
LocalDateTime historyFrom = getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1));
historyTo=getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0))
LocalDateTime historyTo = getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0));
String text = apiMessage.text;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
lastMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage lastMessage = apiMessages.get(apiMessages.size() - 1);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
firstMessage=apiMessages.get(0)
ApiPagedChannelHistory.ApiMessage firstMessage = apiMessages.get(0);
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
String slackToken = args[0];
retrofit=new Retrofit.Builder().baseUrl("https://slack.com/api/").addConverterFactory(GsonConverterFactory.create()).build()
Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://slack.com/api/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();
slackWebService=retrofit.create(SlackWebService.class)
SlackWebService slackWebService = retrofit.create(SlackWebService.class);
slackHistoryFetcher=SlackHistoryFetcher.from(slackWebService,slackToken)
SlackHistoryFetcher slackHistoryFetcher = SlackHistoryFetcher.from(slackWebService, slackToken);
start=LocalDateTime.now()
LocalDateTime start = LocalDateTime.now();
end=LocalDateTime.now().minusDays(7)
LocalDateTime end = LocalDateTime.now().minusDays(7);
channelHistory=slackHistoryFetcher.getChannelHistory(start,end)
ChannelHistory channelHistory = slackHistoryFetcher.getChannelHistory(start, end);
HistoryConverter historyConverter = new HistoryConverter();
ApiPagedResponse apiPagedResponse = new ApiPagedResponse(start);
response=fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime())
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
apiPagedChannelHistory=response.body()
ApiPagedChannelHistory apiPagedChannelHistory = response.body();
channelHistory=slackWebService.getChannelHistory(slackToken,channel,lastResponseEpochTime,NUMBER_OF_RESULTS)
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
ApiPagedChannelHistory apiPagedChannelHistory = new ApiPagedChannelHistory();
ApiPagedChannelHistory.ApiMessage apiMessage = new ApiPagedChannelHistory.ApiMessage();
final TextView textView = new TextView(context);
emptyView=findViewById(R.id.empty_view)
View emptyView = findViewById(R.id.empty_view);
final Integer action = values[0];
LoremAdapter loremAdapter = new LoremAdapter();
accounts=accountManager.getAccountsByType(accountType)
Account[] accounts = accountManager.getAccountsByType(accountType);
Bundle result;
Bundle result;
Bundle result = new Bundle();
activity=createLoginIntent(context,accountType,authTokenType,requiredFeatures,options)
Intent activity = createLoginIntent(context, accountType, authTokenType, requiredFeatures, options);
Bundle bundle = new Bundle();
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
accounts=accountManager.getAccountsByType(authTokenType)
Account[] accounts = accountManager.getAccountsByType(authTokenType);
bundle=createResponseBundle(token)
Bundle bundle = createResponseBundle(token);
accountManager=AccountManager.get(this.getApplicationContext())
AccountManager accountManager = AccountManager.get(this.getApplicationContext());
Account account = new Account(token.getUserName(), getAccountName());
Bundle bundle = new Bundle();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
GertHerbAuthenticator authenticator = new GertHerbAuthenticator(this);
fontId=getFontId(context,attrs)
int fontId = getFontId(context, attrs);
fontType=getFontType(fontId)
FontType fontType = getFontType(fontId);
typedArray=context.obtainStyledAttributes(attrs,R.styleable.CustomTextAppearance)
TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CustomTextAppearance);
typeface=createTypeFace(context,fontType)
Typeface typeface = createTypeFace(context, fontType);
info=context.getApplicationInfo()
ApplicationInfo info = context.getApplicationInfo();
name=activity.getTitle().toString()
String name = activity.getTitle().toString();
client=mServer.accept()
Socket client = mServer.accept();
boolean result;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
BufferedReader in = null;
request=in.readLine()
final String request = in.readLine();
String command;
String parameters;
index=request.indexOf(' ')
int index = request.indexOf(' ');
boolean result;
boolean success = true;
BufferedWriter out = null;
index=parameters.indexOf(' ')
int index = parameters.indexOf(' ');
code=parameters.substring(0,index)
final String code = parameters.substring(0, index);
int hashCode = (int) Long.parseLong(code, 16);
window=findWindow(hashCode)
final View window = findWindow(hashCode);
dispatch=ViewDebug.class.getDeclaredMethod("dispatchCommand",View.class,String.class,String.class,OutputStream.class)
final Method dispatch = ViewDebug.class.getDeclaredMethod("dispatchCommand",
                        View.class, String.class, String.class, OutputStream.class);
View window = null;
boolean result = true;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
boolean result = true;
String focusName = null;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
View focusedWindow = null;
BufferedWriter out = null;
boolean needWindowListUpdate = false;
boolean needFocusedWindowUpdate = false;
BetterAccountManager accountManager = new BetterAccountManager(this, getString(R.string.account_type), getString(R.string.token_type), null);
loginView=Views.findById(this,R.id.login_view)
LoginView loginView = Views.findById(this, R.id.login_view);
authorizationApi=new GithubApiFactory().createAuthorizationApi(credentials.username,credentials.password)
GithubApi authorizationApi = new GithubApiFactory().createAuthorizationApi(credentials.username, credentials.password);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
Endpoint endpoint = new Endpoint() {
            @Override
            public String getUrl() {
                return GITHUB_API_URL;
            }

            @Override
            public String getName() {
                return "Live";
            }
        };
interceptor=createAuthorizationRequestInterceptor(username,password)
RequestInterceptor interceptor = createAuthorizationRequestInterceptor(username, password);
restAdapter=createRestAdapter(endpoint,interceptor)
RestAdapter restAdapter = createRestAdapter(endpoint, interceptor);
Dummy dummy = new Dummy();
result=dummy.explodes()
boolean result = dummy.explodes();
String base64EncodedPublicKey = "CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE";
premiumPurchase=inventory.getPurchase(SKU_PREMIUM)
Purchase premiumPurchase = inventory.getPurchase(SKU_PREMIUM);
infiniteGasPurchase=inventory.getPurchase(SKU_INFINITE_GAS)
Purchase infiniteGasPurchase = inventory.getPurchase(SKU_INFINITE_GAS);
gasPurchase=inventory.getPurchase(SKU_GAS)
Purchase gasPurchase = inventory.getPurchase(SKU_GAS);
String payload = "";
String payload = "";
String payload = "";
payload=p.getDeveloperPayload()
String payload = p.getDeveloperPayload();
int index = mTank >= TANK_RES_IDS.length ? TANK_RES_IDS.length - 1 : mTank;
AlertDialog.Builder bld = new AlertDialog.Builder(this);
spe=getPreferences(MODE_PRIVATE).edit()
SharedPreferences.Editor spe = getPreferences(MODE_PRIVATE).edit();
sp=getPreferences(MODE_PRIVATE)
SharedPreferences sp = getPreferences(MODE_PRIVATE);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                                  + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                    | ((source[d + 1 + off] << 24) >>> 16)
                    | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                    | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                                   "-1002:Bad response received/" +
                                   "-1003:Purchase signature verification failed/" +
                                   "-1004:Send intent failed/" +
                                   "-1005:User cancelled/" +
                                   "-1006:Unknown purchase response/" +
                                   "-1007:Missing token/" +
                                   "-1008:Unknown error/" +
                                   "-1009:Subscriptions not available/" +
                                   "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(),
                    itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                        | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                        | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                            | ((source[d + 1 + off] << 24) >>> 16)
                            | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                            | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                "-1002:Bad response received/" +
                "-1003:Purchase signature verification failed/" +
                "-1004:Send intent failed/" +
                "-1005:User cancelled/" +
                "-1006:Unknown purchase response/" +
                "-1007:Missing token/" +
                "-1008:Unknown error/" +
                "-1009:Subscriptions not available/" +
                "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(), itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
responseCode=result.getResponse()
int responseCode = result.getResponse();
sku=purchase.getSku()
String sku = purchase.getSku();
skuDetails=inv.getSkuDetails(sku)
SkuDetails skuDetails = inv.getSkuDetails(sku);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
Button purchaseFiveButton = (Button) rootView.findViewById(R.id.fragment_main_button_purchase_five_coins);
xml=context.obtainStyledAttributes(attrs,R.styleable.LandingStrip)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.LandingStrip);
tabLayoutId=xml.getResourceId(R.styleable.LandingStrip_tabLayoutId,MISSING_TAB_LAYOUT_ID)
int tabLayoutId = xml.getResourceId(R.styleable.LandingStrip_tabLayoutId, MISSING_TAB_LAYOUT_ID);
indicatorColour=xml.getResourceId(R.styleable.LandingStrip_indicatorColor,DEFAULT_INDICATOR_COLOUR)
int indicatorColour = xml.getResourceId(R.styleable.LandingStrip_indicatorColor, DEFAULT_INDICATOR_COLOUR);
indicatorHeight=getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight,DEFAULT_INDICATOR_HEIGHT,xml)
int indicatorHeight = getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight, DEFAULT_INDICATOR_HEIGHT, xml);
tabsPaddingLeft=getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingLeft = getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding, DEFAULT_TABS_PADDING, xml);
tabsPaddingRight=getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingRight = getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding, DEFAULT_TABS_PADDING, xml);
MutableCoordinates drawCurrentTabCoordinates = new MutableCoordinates();
MutableCoordinates drawNextTabCoordinates = new MutableCoordinates();
MutableCoordinates drawMovingIndicatorCoordinates = new MutableCoordinates();
currentTab=tabsContainer.getTabAt(currentPosition)
View currentTab = tabsContainer.getTabAt(currentPosition);
currentTabStart=currentTab.getLeft()
float currentTabStart = currentTab.getLeft();
currentTabEnd=currentTab.getRight()
float currentTabEnd = currentTab.getRight();
nextTab=tabsContainer.getTabAt(currentPosition + 1)
View nextTab = tabsContainer.getTabAt(currentPosition + 1);
nextTabPositionOffset=getFractionFrom(pagePositionOffset)
float nextTabPositionOffset = getFractionFrom(pagePositionOffset);
indicatorStart=getIndicatorPosition(nextTab.getStart(),pagePositionOffset,currentTab.getStart(),nextTabPositionOffset)
float indicatorStart = getIndicatorPosition(nextTab.getStart(), pagePositionOffset, currentTab.getStart(), nextTabPositionOffset);
indicatorEnd=getIndicatorPosition(nextTab.getEnd(),pagePositionOffset,currentTab.getEnd(),nextTabPositionOffset)
float indicatorEnd = getIndicatorPosition(nextTab.getEnd(), pagePositionOffset, currentTab.getEnd(), nextTabPositionOffset);
height=getHeight()
int height = getHeight();
tabCount=pagerAdapter.getCount()
int tabCount = pagerAdapter.getCount();
title=pagerAdapter.getPageTitle(position)
CharSequence title = pagerAdapter.getPageTitle(position);
inflatedTabView=tabsContainer.inflateTab(layoutInflater,attributes.getTabLayoutId())
View inflatedTabView = tabsContainer.inflateTab(layoutInflater, attributes.getTabLayoutId());
int position = (int) view.getTag(TAG_KEY_POSITION);
scrollOffset=getHorizontalScrollOffset(position,positionOffset)
int scrollOffset = getHorizontalScrollOffset(position, positionOffset);
newScrollX=calculateScrollOffset(position,scrollOffset,positionOffset)
float newScrollX = calculateScrollOffset(position, scrollOffset, positionOffset);
tabWidth=tabsContainer.getTabAt(position).getWidth()
int tabWidth = tabsContainer.getTabAt(position).getWidth();
tabForPosition=tabsContainer.getTabAt(position)
View tabForPosition = tabsContainer.getTabAt(position);
float tabStartX = tabForPosition.getLeft() + scrollOffset;
int viewMiddleOffset = getTabParentWidth() / 2;
float tabCenterOffset = (tabForPosition.getRight() - tabForPosition.getLeft()) * 0.5F;
nextTabDelta=getNextTabDelta(position,pagerOffset,tabForPosition)
float nextTabDelta = getNextTabDelta(position, pagerOffset, tabForPosition);
LinearLayout tabsContainerView = new LinearLayout(context);
tab=getTabAt(index)
View tab = getTabAt(index);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
position=indicatorCoordinates.getStart()
float position = indicatorCoordinates.getStart();
lastTabOffset=((ViewGroup)getChildAt(0)).getChildAt(getChildCount() - 1).getWidth()
float lastTabOffset = ((ViewGroup) getChildAt(0)).getChildAt(getChildCount() - 1).getWidth();
frequency=getOneCycle(lastTabOffset)
float frequency = getOneCycle(lastTabOffset);
r=toHex(calculateColour(position,frequency,PHASE_RED,AMPLITUDE,CENTER_FREQUENCY))
String r = toHex(calculateColour(position, frequency, PHASE_RED, AMPLITUDE, CENTER_FREQUENCY));
g=toHex(calculateColour(position,frequency,PHASE_GREEN,AMPLITUDE,CENTER_FREQUENCY))
String g = toHex(calculateColour(position, frequency, PHASE_GREEN, AMPLITUDE, CENTER_FREQUENCY));
b=toHex(calculateColour(position,frequency,PHASE_BLUE,AMPLITUDE,CENTER_FREQUENCY))
String b = toHex(calculateColour(position, frequency, PHASE_BLUE, AMPLITUDE, CENTER_FREQUENCY));
height=getHeight()
int height = getHeight();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPagerFragment viewPagerFragment = new ViewPagerFragment();
Bundle bundle = new Bundle();
TextView view = (TextView) layoutInflater.inflate(R.layout.view_demo, container, false);
currentPosition=viewPagerAdapterState.getCurrentPosition()
int currentPosition = viewPagerAdapterState.getCurrentPosition();
view=getView(container,position)
View view = getView(container, position);
parcelableSparseArray=viewPagerAdapterState.get(position)
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
View view = (View) object;
SparseArray<Parcelable> viewState = new SparseArray<>();
position=entry.getValue()
int position = entry.getValue();
view=entry.getKey()
View view = entry.getKey();
bundle=in.readBundle()
Bundle bundle = in.readBundle();
Map<Integer, SparseArray<Parcelable>> viewStates = new HashMap<>(bundle.keySet().size());
sparseParcelableArray=bundle.getSparseParcelableArray(key)
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
primaryItemPosition=in.readInt()
int primaryItemPosition = in.readInt();
Bundle bundle = new Bundle();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
final TextView abText = (TextView) findViewById(R.id.ab_text);
final AyBe ayBe = new AyBe();
id=item.getItemId()
int id = item.getItemId();
callback=weakCallback.get()
AbTestingParamsLoadedCallback callback = weakCallback.get();
WeakReference<NoLeakActivity> weakNoLeakActivity = new WeakReference<NoLeakActivity>(noLeakActivity);
noLeakActivity=weakNoLeakActivity.get()
NoLeakActivity noLeakActivity = weakNoLeakActivity.get();
final float inverseRatio = 1f - ratio;
float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRatio);
float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRatio);
float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRatio);
hsv=node.getHsv()
float[] hsv = node.getHsv();
width=bitmap.getWidth()
final int width = bitmap.getWidth();
height=bitmap.getHeight()
final int height = bitmap.getHeight();
final int[] rgbPixels = new int[width * height];
final MedianCutQuantizer mcq = new MedianCutQuantizer(rgbPixels, NUM_COLORS);
primaryAccentColor=findPrimaryAccentColor()
final ColorNode primaryAccentColor = findPrimaryAccentColor();
secondaryAccentColor=findSecondaryAccentColor(primaryAccentColor)
final ColorNode secondaryAccentColor = findSecondaryAccentColor(primaryAccentColor);
tertiaryAccentColor=findTertiaryAccentColor(primaryAccentColor,secondaryAccentColor)
final int tertiaryAccentColor = findTertiaryAccentColor(
                primaryAccentColor, secondaryAccentColor);
primaryTextColor=findPrimaryTextColor(primaryAccentColor)
final int primaryTextColor = findPrimaryTextColor(primaryAccentColor);
secondaryTextColor=findSecondaryTextColor(primaryAccentColor)
final int secondaryTextColor = findSecondaryTextColor(primaryAccentColor);
final float primaryHue = primary.getHsv()[0];
final float candidateHue = candidate.getHsv()[0];
copy=Arrays.copyOf(palette,palette.length)
final MedianCutQuantizer.ColorNode[] copy = Arrays.copyOf(palette, palette.length);
maxCount=palette[0].getCount()
final float maxCount = palette[0].getCount();
lhsWeight=calculateWeight(lhs,maxCount)
final float lhsWeight = calculateWeight(lhs, maxCount);
rhsWeight=calculateWeight(rhs,maxCount)
final float rhsWeight = calculateWeight(rhs, maxCount);
float sum = 0;
float sumWeight = 0;
float value = values[i];
float weight = values[i + 1];
ColorHistogram colorHist = new ColorHistogram(pixels);
K=colorHist.getNumberOfColors()
int K = colorHist.getNumberOfColors();
ColorNode[] rCols = null;
rgb=colorHist.getColor(i)
int rgb = colorHist.getColor(i);
cnt=colorHist.getCount(i)
int cnt = colorHist.getCount(i);
ColorBox initialBox = new ColorBox(0, K - 1, 0);
List<ColorBox> colorSet = new ArrayList<ColorBox>();
int k = 1;
boolean done = false;
nextBox=findBoxToSplit(colorSet)
ColorBox nextBox = findBoxToSplit(colorSet);
newBox=nextBox.splitBox()
ColorBox newBox = nextBox.splitBox();
color=findClosestColor(pixels[i])
ColorNode color = findClosestColor(pixels[i]);
idx=findClosestColorIndex(rgb)
int idx = findClosestColorIndex(rgb);
red=Color.red(rgb)
int red = Color.red(rgb);
grn=Color.green(rgb)
int grn = Color.green(rgb);
blu=Color.blue(rgb)
int blu = Color.blue(rgb);
int minIdx = 0;
int minDistance = Integer.MAX_VALUE;
ColorNode color = quantColors[i];
d2=color.distance2(red,grn,blu)
int d2 = color.distance2(red, grn, blu);
ColorBox boxToSplit = null;
int minLevel = Integer.MAX_VALUE;
n=colorBoxes.size()
int n = colorBoxes.size();
ColorNode[] avgColors = new ColorNode[n];
int i = 0;
int dr = this.red - red;
int dg = this.grn - grn;
int db = this.blu - blu;
ColorNode color = imageColors[i];
int r = color.red;
int g = color.grn;
int b = color.blu;
dim=getLongestColorDimension()
ColorDimension dim = getLongestColorDimension();
med=findMedian(dim)
int med = findMedian(dim);
int nextLevel = level + 1;
ColorBox newBox = new ColorBox(med + 1, upper, nextLevel);
int rLength = rmax - rmin;
int gLength = gmax - gmin;
int bLength = bmax - bmin;
int half = count / 2;
int nPixels, median;
int rSum = 0;
int gSum = 0;
int bSum = 0;
int n = 0;
ColorNode ci = imageColors[i];
int cnt = ci.cnt;
double nd = n;
int avgRed = (int) (0.5 + rSum / nd);
int avgGrn = (int) (0.5 + gSum / nd);
int avgBlu = (int) (0.5 + bSum / nd);
s=this.getClass().getSimpleName()
String s = this.getClass().getSimpleName();
int i = 0;
int N = pixelsOrig.length;
int[] pixelsCpy = new int[N];
int k = -1;
int curColor = -1;
int nColors = k + 1;
id=item.getItemId()
int id = item.getItemId();
Intent intent = new Intent();
bitmap=((BitmapDrawable)imageView.getDrawable()).getBitmap()
Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap();
DominantColorCalculator dominantColorCalculator = new DominantColorCalculator(bitmap);
selectedImageUri=data.getData()
Uri selectedImageUri = data.getData();
selectedImagePath=getPath(selectedImageUri)
String selectedImagePath = getPath(selectedImageUri);
String[] projection = {MediaStore.Images.Media.DATA};
cursor=managedQuery(uri,projection,null,null,null)
Cursor cursor = managedQuery(uri, projection, null, null, null);
column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)
int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
LinearLayout rootView = (LinearLayout) inflater.inflate(R.layout.fragment_main, container, false);
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
preapprovalButton=payPal.getCheckoutButton(getActivity(),PayPal.BUTTON_194x37,CheckoutButton.TEXT_PAY)
CheckoutButton preapprovalButton = payPal.getCheckoutButton(getActivity(), PayPal.BUTTON_194x37, CheckoutButton.TEXT_PAY);
preapprovalIntent=payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY)
Intent preapprovalIntent = payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY);
String resultTitle = "";
String resultInfo = "";
String resultExtra = "";
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
PayPalPreapproval preapproval = new PayPalPreapproval();
preapproval=createPreapproval(preapprovalKey)
PayPalPreapproval preapproval = createPreapproval(preapprovalKey);
Bundle bundle = new Bundle();
int availableLength = maxLength;
StringBuilder stringBuilder = new StringBuilder(maxLength);
prefixAndSuffixLength=computeAppendedLengthIncludingSeparatorSpaces(prefix,suffix)
int prefixAndSuffixLength = computeAppendedLengthIncludingSeparatorSpaces(prefix, suffix);
urlLength=computeUrlLengthIncludingSeparatorSpace(url)
int urlLength = computeUrlLengthIncludingSeparatorSpace(url);
trimmedSubject=ellipsizeTextIfExceedsMaxLength(subject,availableLength)
String trimmedSubject = ellipsizeTextIfExceedsMaxLength(subject, availableLength);
int length = 0;
preferences=context.getSharedPreferences(MRU_PREFERENCES,Context.MODE_PRIVATE)
SharedPreferences preferences = context.getSharedPreferences(MRU_PREFERENCES, Context.MODE_PRIVATE);
args=getArguments()
Bundle args = getArguments();
themeResId=getThemeResIdIfProvidedIn(args)
int themeResId = getThemeResIdIfProvidedIn(args);
title=getTitleIfProvidedIn(args)
CharSequence title = getTitleIfProvidedIn(args);
builder=createDialogBuilder(themeResId).setCancelable(true).setView(dialogView)
AlertDialog.Builder builder = createDialogBuilder(themeResId)
                .setCancelable(true)
                .setView(dialogView);
inflater=getActivity().getLayoutInflater()
LayoutInflater inflater = getActivity().getLayoutInflater();
GridView gridView = (GridView) rootView.findViewById(R.id.ps__dialog_grid);
targetApps=extractTargetAppsFrom(args)
TargetApps targetApps = extractTargetAppsFrom(args);
allShareTargets=getAvailableShareTargets(sharingIntent)
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
priorityAppInfos=createPriorityResolveInfoList(targetApps,allShareTargets)
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
otherAppInfos=createOtherAppsResolveInfoList(priorityAppInfos,allShareTargets)
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
resolveInfos=targetApps.extractTargetResolveInfosFrom(allShareTargets)
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
mruResolveInfo=findMruResolveInfoIn(allShareTargets)
ResolveInfo mruResolveInfo = findMruResolveInfoIn(allShareTargets);
List<ResolveInfo> otherAppsInfos = new ArrayList<ResolveInfo>(allAppInfos);
mruPackageName=persister.getLastUsedTarget()
String mruPackageName = persister.getLastUsedTarget();
String packageName = resolveInfo.activityInfo.packageName;
packageManager=getActivity().getPackageManager()
PackageManager packageManager = getActivity().getPackageManager();
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
View buttonStrip = (View) showMoreButton.getParent();
gridView=getGridView()
GridView gridView = getGridView();
intent=wrapIntentWithExplicitTargetComponentForItem(position,sharingIntent)
Intent intent = wrapIntentWithExplicitTargetComponentForItem(position, sharingIntent);
Intent intent = new Intent(sharingIntent);
ActivityInfo activity = adapter.getItem(position).activityInfo;
ComponentName name = new ComponentName(activity.applicationInfo.packageName, activity.name);
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
PriorityShareDialog dialog = new PriorityShareDialog();
Bundle args = new Bundle();
sharingIntent=createSharingIntent()
Intent sharingIntent = createSharingIntent();
fragmentManager=activity.getFragmentManager()
FragmentManager fragmentManager = activity.getFragmentManager();
Intent intent = new Intent(Intent.ACTION_SEND);
dialog=new PriorityShareDialog.Builder().setTitle(title).setTargetApps(targetApps).setSharingIntent(sharingIntent).setOnPrepareSharingIntentListener(listener).setShowMostRecentlyUsed(showMostRecentlyUsed).build()
PriorityShareDialog dialog = new PriorityShareDialog.Builder()
                .setTitle(title)
                .setTargetApps(targetApps)
                .setSharingIntent(sharingIntent)
                .setOnPrepareSharingIntentListener(listener)
                .setShowMostRecentlyUsed(showMostRecentlyUsed)
                .build();
PrioritySharer prioritySharer = new PrioritySharer();
prioritySharer=build()
PrioritySharer prioritySharer = build();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
layoutInflater=LayoutInflater.from(context)
LayoutInflater layoutInflater = LayoutInflater.from(context);
iconSizePx=getIconSizePx(context.getResources())
int iconSizePx = getIconSizePx(context.getResources());
ArrayList<ResolveInfo> sortedList = new ArrayList<ResolveInfo>(resolveInfoList);
int otherAppsCountMaybe = showAllApps ? otherAppInfos.size() : 0;
firstOtherAppsItemPosition=priorityAppInfos.size()
int firstOtherAppsItemPosition = priorityAppInfos.size();
int offsetPosition = position - firstOtherAppsItemPosition;
TextView textView;
textView=initializeItemViewIfNecessary(convertView,R.layout.ps__grid_item_share,parent)
TextView textView = initializeItemViewIfNecessary(convertView, R.layout.ps__grid_item_share, parent);
info=getItem(position)
ResolveInfo info = getItem(position);
icon=info.loadIcon(packageManager)
Drawable icon = info.loadIcon(packageManager);
arraySize=in.readInt()
int arraySize = in.readInt();
String[] packageNames = new String[arraySize];
arraySize=targetPackages.size()
int arraySize = targetPackages.size();
String[] packagesArray = new String[arraySize];
SparseArray<ResolveInfo> matchedResolveInfos = new SparseArray<ResolveInfo>(targetPackages.size());
String packageName = info.activityInfo.packageName;
index=indexOfItemInto(packageName,targetPackages)
int index = indexOfItemInto(packageName, targetPackages);
sparseArraySize=sparseArray.size()
int sparseArraySize = sparseArray.size();
ArrayList<T> list = new ArrayList<T>(sparseArraySize);
int i = 0;
originalSubject=intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT)
CharSequence originalSubject = intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT);
String subject = originalSubject != null ? originalSubject.toString() : null;
composer=createComposer()
MessageComposer composer = createComposer();
component=intent.getComponent()
ComponentName component = intent.getComponent();
targetPackageName=component.getPackageName()
String targetPackageName = component.getPackageName();
adapter=ArrayAdapter.createFromResource(this,R.array.target_apps,android.R.layout.simple_spinner_item)
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
EditText text = (EditText) findViewById(R.id.text);
EditText title = (EditText) findViewById(R.id.title);
EditText mimeType = (EditText) findViewById(R.id.mime_type);
EditText dataUri = (EditText) findViewById(R.id.data_uri);
Switch showMostRecentlyUsed = (Switch) findViewById(R.id.show_most_recently_used);
uriString=dataUri.getText().toString()
String uriString = dataUri.getText().toString();
EditText text = (EditText) findViewById(R.id.text);
TextView textView = (TextView) convertView.findViewById(R.id.positionView);
colorView=convertView.findViewById(R.id.colorView)
View colorView = convertView.findViewById(R.id.colorView);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
offset=headerPlaceholder.getTop()
int offset = headerPlaceholder.getTop();
Integer item = COLORS[position];
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
firstVisiblePosition=grid.getFirstVisiblePosition()
int firstVisiblePosition = grid.getFirstVisiblePosition();
inflate=getViewForPosition(container,position)
View inflate = getViewForPosition(container, position);
id=item.getItemId()
int id = item.getItemId();
MyActivity activity = new MyActivity();
String manifestProperty = "../app/src/main/AndroidManifest.xml";
String resProperty = "../app/src/main/res";
cursor=resolver.query(uri,projection,selection,selectionArgs,null)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, null);
cursor=resolver.query(uri,projection,selection,selectionArgs,sortOrder)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, sortOrder);
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=richClass.setter(name)
Method setter = richClass.setter(name);
T obj;
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=methodsByName.get(name)
Method setter = methodsByName.get(name);
int type = TYPE_INT;
Class<?> t = setter.getParameterTypes()[0];
Class<?> t = setter.getParameterTypes()[0];
cursorType=cursor.getType(index)
final int cursorType = cursor.getType(index);
final Object obj;
s=f.getAnnotation(Mapper.class)
Mapper s = f.getAnnotation(Mapper.class);
mm=m.getAnnotation(Mapper.class)
Mapper mm = m.getAnnotation(Mapper.class);
methodName=StringUtil.asCamelifySetMethod(what)
String methodName = StringUtil.asCamelifySetMethod(what);
cursor=getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,null,null,null,null)
Cursor cursor = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
now=System.currentTimeMillis()
long now = System.currentTimeMillis();
List<Contact2> typedCursor = new CursorList<Contact2>(cursor, Contact2.class);
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[a-zA-Z0-9]+")
Pattern p = Pattern.compile("[a-zA-Z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[A-Z][a-z0-9]+")
Pattern p = Pattern.compile("[A-Z][a-z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
SurfaceView first = (SurfaceView) findViewById(R.id.firstSurface);
SurfaceView second = (SurfaceView) findViewById(R.id.secondSurface);
Intent pickVideo = new Intent(Intent.ACTION_PICK);
Bundle args = new Bundle();
enroll=mHotwordDetector.createEnrollIntent()
Intent enroll = mHotwordDetector.createEnrollIntent();

Diff of ac2ff40e72c4380c82c525432a45d5c24bc8b7d5 and 5a781f8f85e93ca37a87a8d381adfbfcb0e477a3:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 33
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision ac2ff40e72c4380c82c525432a45d5c24bc8b7d5 to 5a781f8f85e93ca37a87a8d381adfbfcb0e477a3


****Parsing for addition at revision 5a781f8f85e93ca37a87a8d381adfbfcb0e477a3****

Added ApplicationTest.java to .\/spikes\ repository source files.
Added DrawerActivity.java to .\/spikes\ repository source files.
Added EarthActivity.java to .\/spikes\ repository source files.
Added SaturnActivity.java to .\/spikes\ repository source files.
Added LocalPlayerActivity.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added CastApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ComposeSmsActivity.java to .\/spikes\ repository source files.
Added HeadlessSmsSendService.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MmsReceiver.java to .\/spikes\ repository source files.
Added SmsReceiver.java to .\/spikes\ repository source files.
Added ExtendedDemoActivity.java to .\/spikes\ repository source files.
Added ExtendedDemoApplication.java to .\/spikes\ repository source files.
Added SimpleDemoActivity.java to .\/spikes\ repository source files.
Added SimpleDemoApplication.java to .\/spikes\ repository source files.
Added Binder.java to .\/spikes\ repository source files.
Added ConnectedClient.java to .\/spikes\ repository source files.
Added Connection.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnection.java to .\/spikes\ repository source files.
Added ServiceConnectionCallback.java to .\/spikes\ repository source files.
Added EasyCustomTabs.java to .\/spikes\ repository source files.
Added ActionButtonComposer.java to .\/spikes\ repository source files.
Added CloseButtonIconComposer.java to .\/spikes\ repository source files.
Added Composer.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilder.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigator.java to .\/spikes\ repository source files.
Added EasyCustomTabsWebNavigator.java to .\/spikes\ repository source files.
Added ExitAnimationsComposer.java to .\/spikes\ repository source files.
Added IntentCustomizer.java to .\/spikes\ repository source files.
Added MenuItemComposer.java to .\/spikes\ repository source files.
Added NavigationFallback.java to .\/spikes\ repository source files.
Added Navigator.java to .\/spikes\ repository source files.
Added ShowTitleComposer.java to .\/spikes\ repository source files.
Added StartAnimationsComposer.java to .\/spikes\ repository source files.
Added ToolbarColorComposer.java to .\/spikes\ repository source files.
Added UrlBarHidingComposer.java to .\/spikes\ repository source files.
Added WebNavigator.java to .\/spikes\ repository source files.
Added AvailableAppProvider.java to .\/spikes\ repository source files.
Added BestPackageFinder.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProvider.java to .\/spikes\ repository source files.
Added BinderTest.java to .\/spikes\ repository source files.
Added ConnectedClientTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnectionTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigatorTest.java to .\/spikes\ repository source files.
Added BestPackageFinderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProviderTest.java to .\/spikes\ repository source files.
Added ApiPagedChannelHistory.java to .\/spikes\ repository source files.
Added ApiPagedResponse.java to .\/spikes\ repository source files.
Added ChannelHistory.java to .\/spikes\ repository source files.
Added HistoryConverter.java to .\/spikes\ repository source files.
Added Runner.java to .\/spikes\ repository source files.
Added SlackHistoryFetcher.java to .\/spikes\ repository source files.
Added SlackWebService.java to .\/spikes\ repository source files.
Added ApiPagedResponseTest.java to .\/spikes\ repository source files.
Added MainActivityTest.java to .\/spikes\ repository source files.
Added LoremAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added BetterAccountManager.java to .\/spikes\ repository source files.
Added BetterAuthenticator.java to .\/spikes\ repository source files.
Added BetterAuthenticatorActivity.java to .\/spikes\ repository source files.
Added GertHerbAuthenticator.java to .\/spikes\ repository source files.
Added GertHerbAuthenticatorService.java to .\/spikes\ repository source files.
Added NoAccountException.java to .\/spikes\ repository source files.
Added ReactiveAuthenticatorActivity.java to .\/spikes\ repository source files.
Added Token.java to .\/spikes\ repository source files.
Added GertHerbActivity.java to .\/spikes\ repository source files.
Added GertHerbApplication.java to .\/spikes\ repository source files.
Added GertHerbAuthenticationActivity.java to .\/spikes\ repository source files.
Added TypefaceFactory.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added ViewServer.java to .\/spikes\ repository source files.
Added ViewServerManager.java to .\/spikes\ repository source files.
Added DeveloperError.java to .\/spikes\ repository source files.
Added HomeActivity.java to .\/spikes\ repository source files.
Added LoginActivity.java to .\/spikes\ repository source files.
Added LoginView.java to .\/spikes\ repository source files.
Added UserCredentials.java to .\/spikes\ repository source files.
Added FontButton.java to .\/spikes\ repository source files.
Added FontEditText.java to .\/spikes\ repository source files.
Added FontTextView.java to .\/spikes\ repository source files.
Added GithubApi.java to .\/spikes\ repository source files.
Added GithubApiFactory.java to .\/spikes\ repository source files.
Added TokenRequest.java to .\/spikes\ repository source files.
Added TokenResponse.java to .\/spikes\ repository source files.
Added Dummy.java to .\/spikes\ repository source files.
Added DummyTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MainFragment.java to .\/spikes\ repository source files.
Added Attributes.java to .\/spikes\ repository source files.
Added Coordinates.java to .\/spikes\ repository source files.
Added IndicatorCoordinatesCalculator.java to .\/spikes\ repository source files.
Added LandingStrip.java to .\/spikes\ repository source files.
Added MutableCoordinates.java to .\/spikes\ repository source files.
Added OnPagerAdapterChangedListener.java to .\/spikes\ repository source files.
Added PagerAdapterObserver.java to .\/spikes\ repository source files.
Added Scrollable.java to .\/spikes\ repository source files.
Added ScrollingPageChangeListener.java to .\/spikes\ repository source files.
Added State.java to .\/spikes\ repository source files.
Added TabsContainer.java to .\/spikes\ repository source files.
Added CustomLandingStrip.java to .\/spikes\ repository source files.
Added CustomTabActivity.java to .\/spikes\ repository source files.
Added ExampleRainbowLandingStrip.java to .\/spikes\ repository source files.
Added FixedWidthTabActivity.java to .\/spikes\ repository source files.
Added NoFragmentsSimpleTextTabActivity.java to .\/spikes\ repository source files.
Added Data.java to .\/spikes\ repository source files.
Added DemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added SmallDemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerFragment.java to .\/spikes\ repository source files.
Added DemoViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapterState.java to .\/spikes\ repository source files.
Added SimpleTextTabActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AbTestingParamsLoadedCallback.java to .\/spikes\ repository source files.
Added AyBe.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added WeakStartCallback.java to .\/spikes\ repository source files.
Added LeakActivity.java to .\/spikes\ repository source files.
Added NoLeakActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added ColorScheme.java to .\/spikes\ repository source files.
Added ColorUtils.java to .\/spikes\ repository source files.
Added DominantColorCalculator.java to .\/spikes\ repository source files.
Added FloatUtils.java to .\/spikes\ repository source files.
Added MedianCutQuantizer.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added PayPalFragment.java to .\/spikes\ repository source files.
Added PayPalHelper.java to .\/spikes\ repository source files.
Added MaxLengthMessageComposer.java to .\/spikes\ repository source files.
Added MessageComposer.java to .\/spikes\ repository source files.
Added TwitterMessageComposer.java to .\/spikes\ repository source files.
Added DisabledMruPersister.java to .\/spikes\ repository source files.
Added MruPersister.java to .\/spikes\ repository source files.
Added SharedPreferencesMruPersister.java to .\/spikes\ repository source files.
Added OnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added PriorityShareDialog.java to .\/spikes\ repository source files.
Added PrioritySharer.java to .\/spikes\ repository source files.
Added ShareTargetsAdapter.java to .\/spikes\ repository source files.
Added SimpleOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added TargetApps.java to .\/spikes\ repository source files.
Added TwitterOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AdvancedActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SimpleActivity.java to .\/spikes\ repository source files.
Added LockingActivity.java to .\/spikes\ repository source files.
Added PostLockingActivity.java to .\/spikes\ repository source files.
Added PreLockingActivity.java to .\/spikes\ repository source files.
Added DummyAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added NovoStaggeredGridView.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SpikeApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SwipeableView.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MyClass.java to .\/spikes\ repository source files.
Added MyClassTest.java to .\/spikes\ repository source files.
Added MyAndroidClassTest.java to .\/spikes\ repository source files.
Added RobolectricGradleTestRunner.java to .\/spikes\ repository source files.
Added Mapper.java to .\/spikes\ repository source files.
Added Query.java to .\/spikes\ repository source files.
Added TypedResolver.java to .\/spikes\ repository source files.
Added CursorList.java to .\/spikes\ repository source files.
Added CursorListIterator.java to .\/spikes\ repository source files.
Added CursorMarshaller.java to .\/spikes\ repository source files.
Added EmptyListIterator.java to .\/spikes\ repository source files.
Added ReflectionCursorMarshaller.java to .\/spikes\ repository source files.
Added RichClass.java to .\/spikes\ repository source files.
Added Setter.java to .\/spikes\ repository source files.
Added Function.java to .\/spikes\ repository source files.
Added TypedElementLoader.java to .\/spikes\ repository source files.
Added TypedLoader.java to .\/spikes\ repository source files.
Added Marshaller.java to .\/spikes\ repository source files.
Added ObjectMapper.java to .\/spikes\ repository source files.
Added TypedActivity.java to .\/spikes\ repository source files.
Added StringUtil.java to .\/spikes\ repository source files.
Added MyObject.java to .\/spikes\ repository source files.
Added MediaPlayerSwitcherActivity.java to .\/spikes\ repository source files.
Added VideoPlayerService.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added RecognitionService.java to .\/spikes\ repository source files.
Added SessionService.java to .\/spikes\ repository source files.
Added SettingsActivity.java to .\/spikes\ repository source files.
Added SmartContextInteractionService.java to .\/spikes\ repository source files.
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
String[] planetTitles = new String[]{"Earth", "Saturn"};
DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
ListView drawerList = (ListView) findViewById(R.id.left_drawer);
Intent intent;
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close);
b=getIntent().getExtras()
Bundle b = getIntent().getExtras();
mShouldStartPlayback=b.getBoolean("shouldStart")
boolean mShouldStartPlayback = b.getBoolean("shouldStart");
startPosition=b.getInt("startPosition",0)
int startPosition = b.getInt("startPosition", 0);
currentPos=mVideoView.getCurrentPosition()
int currentPos = mVideoView.getCurrentPosition();
String msg;
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, mDisplaySize.y + getActionBar().getHeight());
mm=mSelectedMedia.getMetadata()
MediaMetadata mm = mSelectedMedia.getMetadata();
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, (int) (mDisplaySize.x * ASPECT_RATIO));
WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
width=display.getWidth()
int width = display.getWidth();
height=display.getHeight()
int height = display.getHeight();
int resourceId = 0;
String videoUrl = "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4#sthash.rJ5rPZy8.dpuf";
String title = "Jahre Philharmonie";
String description = "Awesome film you must watch!";
String author = "Blundell";
String thumbUrl = "http://www.ustream.tv/blog/wp-content/uploads/2013/10/simply-go-live.png";
MediaMetadata metadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE);
mediaInfo=new MediaInfo.Builder(videoUrl).setMetadata(metadata).setStreamType(MediaInfo.STREAM_TYPE_BUFFERED).setContentType("video/mp4").build()
MediaInfo mediaInfo = new MediaInfo.Builder(videoUrl)
                        .setMetadata(metadata)
                        .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)
                        .setContentType("video/mp4")
                        .build();
Intent intent = new Intent(MainActivity.this, LocalPlayerActivity.class);
preferences=getPreferences(MODE_PRIVATE)
SharedPreferences preferences = getPreferences(MODE_PRIVATE);
defaultSmsPackage=Telephony.Sms.getDefaultSmsPackage(this)
String defaultSmsPackage = Telephony.Sms.getDefaultSmsPackage(this);
Intent intent = new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
availableAppProvider=EasyCustomTabs.getInstance()
AvailableAppProvider availableAppProvider = EasyCustomTabs.getInstance();
ConnectedClient connectedClient = new ConnectedClient(client);
binder=Binder.newInstance()
Binder binder = Binder.newInstance();
List<Composer> composerList = new ArrayList<>();
customTabsSession=connection.newSession()
CustomTabsSession customTabsSession = connection.newSession();
CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(customTabsSession);
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
context=EasyCustomTabs.getInstance().getContext()
Context context = EasyCustomTabs.getInstance().getContext();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
packagesSupportingCustomTabs=getPackagesSupportingCustomTabs()
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
defaultPackage=getDefaultPackage()
String defaultPackage = getDefaultPackage();
defaultActivityInfo=packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK,0)
ResolveInfo defaultActivityInfo = packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK, 0);
String packageName = defaultActivityInfo.activityInfo.packageName;
resolvedInfoList=packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK,0)
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<String> packagesSupportingCustomTabs = new ArrayList<>();
Intent serviceIntent = new Intent();
bestPackageFinder=BestPackageFinder.newInstance()
BestPackageFinder bestPackageFinder = BestPackageFinder.newInstance();
packageName=bestPackageFinder.findBestPackage()
String packageName = bestPackageFinder.findBestPackage();
resolveInfo=createResolveInfoFor(packageName)
ResolveInfo resolveInfo = createResolveInfoFor(packageName);
ResolveInfo resolveInfo = new ResolveInfo();
List<ResolveInfo> resolveInfoList = new ArrayList<>();
defaultPackageResolveInfo=createResolveInfoFor(packageName)
ResolveInfo defaultPackageResolveInfo = createResolveInfoFor(packageName);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
oldestApiMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage oldestApiMessage = apiMessages.get(apiMessages.size() - 1);
String lastResponseEpochTime = oldestApiMessage.timeStamp;
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
latestMessage=latestMessages.get(latestMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage latestMessage = latestMessages.get(latestMessages.size() - 1);
latestMessageDateTime=convertToLocalDateTime(latestMessage.timeStamp)
LocalDateTime latestMessageDateTime = convertToLocalDateTime(latestMessage.timeStamp);
List<ChannelHistory.Message> messages = new ArrayList<>();
historyFrom=getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1))
LocalDateTime historyFrom = getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1));
historyTo=getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0))
LocalDateTime historyTo = getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0));
String text = apiMessage.text;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
lastMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage lastMessage = apiMessages.get(apiMessages.size() - 1);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
firstMessage=apiMessages.get(0)
ApiPagedChannelHistory.ApiMessage firstMessage = apiMessages.get(0);
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
String slackToken = args[0];
retrofit=new Retrofit.Builder().baseUrl("https://slack.com/api/").addConverterFactory(GsonConverterFactory.create()).build()
Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://slack.com/api/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();
slackWebService=retrofit.create(SlackWebService.class)
SlackWebService slackWebService = retrofit.create(SlackWebService.class);
slackHistoryFetcher=SlackHistoryFetcher.from(slackWebService,slackToken)
SlackHistoryFetcher slackHistoryFetcher = SlackHistoryFetcher.from(slackWebService, slackToken);
start=LocalDateTime.now()
LocalDateTime start = LocalDateTime.now();
end=LocalDateTime.now().minusDays(7)
LocalDateTime end = LocalDateTime.now().minusDays(7);
channelHistory=slackHistoryFetcher.getChannelHistory(start,end)
ChannelHistory channelHistory = slackHistoryFetcher.getChannelHistory(start, end);
HistoryConverter historyConverter = new HistoryConverter();
ApiPagedResponse apiPagedResponse = new ApiPagedResponse(start);
response=fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime())
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
apiPagedChannelHistory=response.body()
ApiPagedChannelHistory apiPagedChannelHistory = response.body();
channelHistory=slackWebService.getChannelHistory(slackToken,channel,lastResponseEpochTime,NUMBER_OF_RESULTS)
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
ApiPagedChannelHistory apiPagedChannelHistory = new ApiPagedChannelHistory();
ApiPagedChannelHistory.ApiMessage apiMessage = new ApiPagedChannelHistory.ApiMessage();
final TextView textView = new TextView(context);
emptyView=findViewById(R.id.empty_view)
View emptyView = findViewById(R.id.empty_view);
final Integer action = values[0];
LoremAdapter loremAdapter = new LoremAdapter();
accounts=accountManager.getAccountsByType(accountType)
Account[] accounts = accountManager.getAccountsByType(accountType);
Bundle result;
Bundle result;
Bundle result = new Bundle();
activity=createLoginIntent(context,accountType,authTokenType,requiredFeatures,options)
Intent activity = createLoginIntent(context, accountType, authTokenType, requiredFeatures, options);
Bundle bundle = new Bundle();
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
accounts=accountManager.getAccountsByType(authTokenType)
Account[] accounts = accountManager.getAccountsByType(authTokenType);
bundle=createResponseBundle(token)
Bundle bundle = createResponseBundle(token);
accountManager=AccountManager.get(this.getApplicationContext())
AccountManager accountManager = AccountManager.get(this.getApplicationContext());
Account account = new Account(token.getUserName(), getAccountName());
Bundle bundle = new Bundle();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
GertHerbAuthenticator authenticator = new GertHerbAuthenticator(this);
fontId=getFontId(context,attrs)
int fontId = getFontId(context, attrs);
fontType=getFontType(fontId)
FontType fontType = getFontType(fontId);
typedArray=context.obtainStyledAttributes(attrs,R.styleable.CustomTextAppearance)
TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CustomTextAppearance);
typeface=createTypeFace(context,fontType)
Typeface typeface = createTypeFace(context, fontType);
info=context.getApplicationInfo()
ApplicationInfo info = context.getApplicationInfo();
name=activity.getTitle().toString()
String name = activity.getTitle().toString();
client=mServer.accept()
Socket client = mServer.accept();
boolean result;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
BufferedReader in = null;
request=in.readLine()
final String request = in.readLine();
String command;
String parameters;
index=request.indexOf(' ')
int index = request.indexOf(' ');
boolean result;
boolean success = true;
BufferedWriter out = null;
index=parameters.indexOf(' ')
int index = parameters.indexOf(' ');
code=parameters.substring(0,index)
final String code = parameters.substring(0, index);
int hashCode = (int) Long.parseLong(code, 16);
window=findWindow(hashCode)
final View window = findWindow(hashCode);
dispatch=ViewDebug.class.getDeclaredMethod("dispatchCommand",View.class,String.class,String.class,OutputStream.class)
final Method dispatch = ViewDebug.class.getDeclaredMethod("dispatchCommand",
                        View.class, String.class, String.class, OutputStream.class);
View window = null;
boolean result = true;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
boolean result = true;
String focusName = null;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
View focusedWindow = null;
BufferedWriter out = null;
boolean needWindowListUpdate = false;
boolean needFocusedWindowUpdate = false;
BetterAccountManager accountManager = new BetterAccountManager(this, getString(R.string.account_type), getString(R.string.token_type), null);
loginView=Views.findById(this,R.id.login_view)
LoginView loginView = Views.findById(this, R.id.login_view);
authorizationApi=new GithubApiFactory().createAuthorizationApi(credentials.username,credentials.password)
GithubApi authorizationApi = new GithubApiFactory().createAuthorizationApi(credentials.username, credentials.password);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
Endpoint endpoint = new Endpoint() {
            @Override
            public String getUrl() {
                return GITHUB_API_URL;
            }

            @Override
            public String getName() {
                return "Live";
            }
        };
interceptor=createAuthorizationRequestInterceptor(username,password)
RequestInterceptor interceptor = createAuthorizationRequestInterceptor(username, password);
restAdapter=createRestAdapter(endpoint,interceptor)
RestAdapter restAdapter = createRestAdapter(endpoint, interceptor);
Dummy dummy = new Dummy();
result=dummy.explodes()
boolean result = dummy.explodes();
String base64EncodedPublicKey = "CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE";
premiumPurchase=inventory.getPurchase(SKU_PREMIUM)
Purchase premiumPurchase = inventory.getPurchase(SKU_PREMIUM);
infiniteGasPurchase=inventory.getPurchase(SKU_INFINITE_GAS)
Purchase infiniteGasPurchase = inventory.getPurchase(SKU_INFINITE_GAS);
gasPurchase=inventory.getPurchase(SKU_GAS)
Purchase gasPurchase = inventory.getPurchase(SKU_GAS);
String payload = "";
String payload = "";
String payload = "";
payload=p.getDeveloperPayload()
String payload = p.getDeveloperPayload();
int index = mTank >= TANK_RES_IDS.length ? TANK_RES_IDS.length - 1 : mTank;
AlertDialog.Builder bld = new AlertDialog.Builder(this);
spe=getPreferences(MODE_PRIVATE).edit()
SharedPreferences.Editor spe = getPreferences(MODE_PRIVATE).edit();
sp=getPreferences(MODE_PRIVATE)
SharedPreferences sp = getPreferences(MODE_PRIVATE);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                                  + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                    | ((source[d + 1 + off] << 24) >>> 16)
                    | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                    | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                                   "-1002:Bad response received/" +
                                   "-1003:Purchase signature verification failed/" +
                                   "-1004:Send intent failed/" +
                                   "-1005:User cancelled/" +
                                   "-1006:Unknown purchase response/" +
                                   "-1007:Missing token/" +
                                   "-1008:Unknown error/" +
                                   "-1009:Subscriptions not available/" +
                                   "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(),
                    itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                        | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                        | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                            | ((source[d + 1 + off] << 24) >>> 16)
                            | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                            | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                "-1002:Bad response received/" +
                "-1003:Purchase signature verification failed/" +
                "-1004:Send intent failed/" +
                "-1005:User cancelled/" +
                "-1006:Unknown purchase response/" +
                "-1007:Missing token/" +
                "-1008:Unknown error/" +
                "-1009:Subscriptions not available/" +
                "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(), itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
responseCode=result.getResponse()
int responseCode = result.getResponse();
sku=purchase.getSku()
String sku = purchase.getSku();
skuDetails=inv.getSkuDetails(sku)
SkuDetails skuDetails = inv.getSkuDetails(sku);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
Button purchaseFiveButton = (Button) rootView.findViewById(R.id.fragment_main_button_purchase_five_coins);
xml=context.obtainStyledAttributes(attrs,R.styleable.LandingStrip)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.LandingStrip);
tabLayoutId=xml.getResourceId(R.styleable.LandingStrip_tabLayoutId,MISSING_TAB_LAYOUT_ID)
int tabLayoutId = xml.getResourceId(R.styleable.LandingStrip_tabLayoutId, MISSING_TAB_LAYOUT_ID);
indicatorColour=xml.getResourceId(R.styleable.LandingStrip_indicatorColor,DEFAULT_INDICATOR_COLOUR)
int indicatorColour = xml.getResourceId(R.styleable.LandingStrip_indicatorColor, DEFAULT_INDICATOR_COLOUR);
indicatorHeight=getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight,DEFAULT_INDICATOR_HEIGHT,xml)
int indicatorHeight = getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight, DEFAULT_INDICATOR_HEIGHT, xml);
tabsPaddingLeft=getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingLeft = getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding, DEFAULT_TABS_PADDING, xml);
tabsPaddingRight=getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingRight = getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding, DEFAULT_TABS_PADDING, xml);
MutableCoordinates drawCurrentTabCoordinates = new MutableCoordinates();
MutableCoordinates drawNextTabCoordinates = new MutableCoordinates();
MutableCoordinates drawMovingIndicatorCoordinates = new MutableCoordinates();
currentTab=tabsContainer.getTabAt(currentPosition)
View currentTab = tabsContainer.getTabAt(currentPosition);
currentTabStart=currentTab.getLeft()
float currentTabStart = currentTab.getLeft();
currentTabEnd=currentTab.getRight()
float currentTabEnd = currentTab.getRight();
nextTab=tabsContainer.getTabAt(currentPosition + 1)
View nextTab = tabsContainer.getTabAt(currentPosition + 1);
nextTabPositionOffset=getFractionFrom(pagePositionOffset)
float nextTabPositionOffset = getFractionFrom(pagePositionOffset);
indicatorStart=getIndicatorPosition(nextTab.getStart(),pagePositionOffset,currentTab.getStart(),nextTabPositionOffset)
float indicatorStart = getIndicatorPosition(nextTab.getStart(), pagePositionOffset, currentTab.getStart(), nextTabPositionOffset);
indicatorEnd=getIndicatorPosition(nextTab.getEnd(),pagePositionOffset,currentTab.getEnd(),nextTabPositionOffset)
float indicatorEnd = getIndicatorPosition(nextTab.getEnd(), pagePositionOffset, currentTab.getEnd(), nextTabPositionOffset);
height=getHeight()
int height = getHeight();
tabCount=pagerAdapter.getCount()
int tabCount = pagerAdapter.getCount();
title=pagerAdapter.getPageTitle(position)
CharSequence title = pagerAdapter.getPageTitle(position);
inflatedTabView=tabsContainer.inflateTab(layoutInflater,attributes.getTabLayoutId())
View inflatedTabView = tabsContainer.inflateTab(layoutInflater, attributes.getTabLayoutId());
int position = (int) view.getTag(TAG_KEY_POSITION);
scrollOffset=getHorizontalScrollOffset(position,positionOffset)
int scrollOffset = getHorizontalScrollOffset(position, positionOffset);
newScrollX=calculateScrollOffset(position,scrollOffset,positionOffset)
float newScrollX = calculateScrollOffset(position, scrollOffset, positionOffset);
tabWidth=tabsContainer.getTabAt(position).getWidth()
int tabWidth = tabsContainer.getTabAt(position).getWidth();
tabForPosition=tabsContainer.getTabAt(position)
View tabForPosition = tabsContainer.getTabAt(position);
float tabStartX = tabForPosition.getLeft() + scrollOffset;
int viewMiddleOffset = getTabParentWidth() / 2;
float tabCenterOffset = (tabForPosition.getRight() - tabForPosition.getLeft()) * 0.5F;
nextTabDelta=getNextTabDelta(position,pagerOffset,tabForPosition)
float nextTabDelta = getNextTabDelta(position, pagerOffset, tabForPosition);
LinearLayout tabsContainerView = new LinearLayout(context);
tab=getTabAt(index)
View tab = getTabAt(index);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
position=indicatorCoordinates.getStart()
float position = indicatorCoordinates.getStart();
lastTabOffset=((ViewGroup)getChildAt(0)).getChildAt(getChildCount() - 1).getWidth()
float lastTabOffset = ((ViewGroup) getChildAt(0)).getChildAt(getChildCount() - 1).getWidth();
frequency=getOneCycle(lastTabOffset)
float frequency = getOneCycle(lastTabOffset);
r=toHex(calculateColour(position,frequency,PHASE_RED,AMPLITUDE,CENTER_FREQUENCY))
String r = toHex(calculateColour(position, frequency, PHASE_RED, AMPLITUDE, CENTER_FREQUENCY));
g=toHex(calculateColour(position,frequency,PHASE_GREEN,AMPLITUDE,CENTER_FREQUENCY))
String g = toHex(calculateColour(position, frequency, PHASE_GREEN, AMPLITUDE, CENTER_FREQUENCY));
b=toHex(calculateColour(position,frequency,PHASE_BLUE,AMPLITUDE,CENTER_FREQUENCY))
String b = toHex(calculateColour(position, frequency, PHASE_BLUE, AMPLITUDE, CENTER_FREQUENCY));
height=getHeight()
int height = getHeight();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPagerFragment viewPagerFragment = new ViewPagerFragment();
Bundle bundle = new Bundle();
TextView view = (TextView) layoutInflater.inflate(R.layout.view_demo, container, false);
currentPosition=viewPagerAdapterState.getCurrentPosition()
int currentPosition = viewPagerAdapterState.getCurrentPosition();
view=getView(container,position)
View view = getView(container, position);
parcelableSparseArray=viewPagerAdapterState.get(position)
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
View view = (View) object;
SparseArray<Parcelable> viewState = new SparseArray<>();
position=entry.getValue()
int position = entry.getValue();
view=entry.getKey()
View view = entry.getKey();
bundle=in.readBundle()
Bundle bundle = in.readBundle();
Map<Integer, SparseArray<Parcelable>> viewStates = new HashMap<>(bundle.keySet().size());
sparseParcelableArray=bundle.getSparseParcelableArray(key)
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
primaryItemPosition=in.readInt()
int primaryItemPosition = in.readInt();
Bundle bundle = new Bundle();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
final TextView abText = (TextView) findViewById(R.id.ab_text);
final AyBe ayBe = new AyBe();
id=item.getItemId()
int id = item.getItemId();
callback=weakCallback.get()
AbTestingParamsLoadedCallback callback = weakCallback.get();
WeakReference<NoLeakActivity> weakNoLeakActivity = new WeakReference<NoLeakActivity>(noLeakActivity);
noLeakActivity=weakNoLeakActivity.get()
NoLeakActivity noLeakActivity = weakNoLeakActivity.get();
final float inverseRatio = 1f - ratio;
float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRatio);
float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRatio);
float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRatio);
hsv=node.getHsv()
float[] hsv = node.getHsv();
width=bitmap.getWidth()
final int width = bitmap.getWidth();
height=bitmap.getHeight()
final int height = bitmap.getHeight();
final int[] rgbPixels = new int[width * height];
final MedianCutQuantizer mcq = new MedianCutQuantizer(rgbPixels, NUM_COLORS);
primaryAccentColor=findPrimaryAccentColor()
final ColorNode primaryAccentColor = findPrimaryAccentColor();
secondaryAccentColor=findSecondaryAccentColor(primaryAccentColor)
final ColorNode secondaryAccentColor = findSecondaryAccentColor(primaryAccentColor);
tertiaryAccentColor=findTertiaryAccentColor(primaryAccentColor,secondaryAccentColor)
final int tertiaryAccentColor = findTertiaryAccentColor(
                primaryAccentColor, secondaryAccentColor);
primaryTextColor=findPrimaryTextColor(primaryAccentColor)
final int primaryTextColor = findPrimaryTextColor(primaryAccentColor);
secondaryTextColor=findSecondaryTextColor(primaryAccentColor)
final int secondaryTextColor = findSecondaryTextColor(primaryAccentColor);
final float primaryHue = primary.getHsv()[0];
final float candidateHue = candidate.getHsv()[0];
copy=Arrays.copyOf(palette,palette.length)
final MedianCutQuantizer.ColorNode[] copy = Arrays.copyOf(palette, palette.length);
maxCount=palette[0].getCount()
final float maxCount = palette[0].getCount();
lhsWeight=calculateWeight(lhs,maxCount)
final float lhsWeight = calculateWeight(lhs, maxCount);
rhsWeight=calculateWeight(rhs,maxCount)
final float rhsWeight = calculateWeight(rhs, maxCount);
float sum = 0;
float sumWeight = 0;
float value = values[i];
float weight = values[i + 1];
ColorHistogram colorHist = new ColorHistogram(pixels);
K=colorHist.getNumberOfColors()
int K = colorHist.getNumberOfColors();
ColorNode[] rCols = null;
rgb=colorHist.getColor(i)
int rgb = colorHist.getColor(i);
cnt=colorHist.getCount(i)
int cnt = colorHist.getCount(i);
ColorBox initialBox = new ColorBox(0, K - 1, 0);
List<ColorBox> colorSet = new ArrayList<ColorBox>();
int k = 1;
boolean done = false;
nextBox=findBoxToSplit(colorSet)
ColorBox nextBox = findBoxToSplit(colorSet);
newBox=nextBox.splitBox()
ColorBox newBox = nextBox.splitBox();
color=findClosestColor(pixels[i])
ColorNode color = findClosestColor(pixels[i]);
idx=findClosestColorIndex(rgb)
int idx = findClosestColorIndex(rgb);
red=Color.red(rgb)
int red = Color.red(rgb);
grn=Color.green(rgb)
int grn = Color.green(rgb);
blu=Color.blue(rgb)
int blu = Color.blue(rgb);
int minIdx = 0;
int minDistance = Integer.MAX_VALUE;
ColorNode color = quantColors[i];
d2=color.distance2(red,grn,blu)
int d2 = color.distance2(red, grn, blu);
ColorBox boxToSplit = null;
int minLevel = Integer.MAX_VALUE;
n=colorBoxes.size()
int n = colorBoxes.size();
ColorNode[] avgColors = new ColorNode[n];
int i = 0;
int dr = this.red - red;
int dg = this.grn - grn;
int db = this.blu - blu;
ColorNode color = imageColors[i];
int r = color.red;
int g = color.grn;
int b = color.blu;
dim=getLongestColorDimension()
ColorDimension dim = getLongestColorDimension();
med=findMedian(dim)
int med = findMedian(dim);
int nextLevel = level + 1;
ColorBox newBox = new ColorBox(med + 1, upper, nextLevel);
int rLength = rmax - rmin;
int gLength = gmax - gmin;
int bLength = bmax - bmin;
int half = count / 2;
int nPixels, median;
int rSum = 0;
int gSum = 0;
int bSum = 0;
int n = 0;
ColorNode ci = imageColors[i];
int cnt = ci.cnt;
double nd = n;
int avgRed = (int) (0.5 + rSum / nd);
int avgGrn = (int) (0.5 + gSum / nd);
int avgBlu = (int) (0.5 + bSum / nd);
s=this.getClass().getSimpleName()
String s = this.getClass().getSimpleName();
int i = 0;
int N = pixelsOrig.length;
int[] pixelsCpy = new int[N];
int k = -1;
int curColor = -1;
int nColors = k + 1;
id=item.getItemId()
int id = item.getItemId();
Intent intent = new Intent();
bitmap=((BitmapDrawable)imageView.getDrawable()).getBitmap()
Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap();
DominantColorCalculator dominantColorCalculator = new DominantColorCalculator(bitmap);
selectedImageUri=data.getData()
Uri selectedImageUri = data.getData();
selectedImagePath=getPath(selectedImageUri)
String selectedImagePath = getPath(selectedImageUri);
String[] projection = {MediaStore.Images.Media.DATA};
cursor=managedQuery(uri,projection,null,null,null)
Cursor cursor = managedQuery(uri, projection, null, null, null);
column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)
int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
LinearLayout rootView = (LinearLayout) inflater.inflate(R.layout.fragment_main, container, false);
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
preapprovalButton=payPal.getCheckoutButton(getActivity(),PayPal.BUTTON_194x37,CheckoutButton.TEXT_PAY)
CheckoutButton preapprovalButton = payPal.getCheckoutButton(getActivity(), PayPal.BUTTON_194x37, CheckoutButton.TEXT_PAY);
preapprovalIntent=payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY)
Intent preapprovalIntent = payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY);
String resultTitle = "";
String resultInfo = "";
String resultExtra = "";
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
PayPalPreapproval preapproval = new PayPalPreapproval();
preapproval=createPreapproval(preapprovalKey)
PayPalPreapproval preapproval = createPreapproval(preapprovalKey);
Bundle bundle = new Bundle();
int availableLength = maxLength;
StringBuilder stringBuilder = new StringBuilder(maxLength);
prefixAndSuffixLength=computeAppendedLengthIncludingSeparatorSpaces(prefix,suffix)
int prefixAndSuffixLength = computeAppendedLengthIncludingSeparatorSpaces(prefix, suffix);
urlLength=computeUrlLengthIncludingSeparatorSpace(url)
int urlLength = computeUrlLengthIncludingSeparatorSpace(url);
trimmedSubject=ellipsizeTextIfExceedsMaxLength(subject,availableLength)
String trimmedSubject = ellipsizeTextIfExceedsMaxLength(subject, availableLength);
int length = 0;
preferences=context.getSharedPreferences(MRU_PREFERENCES,Context.MODE_PRIVATE)
SharedPreferences preferences = context.getSharedPreferences(MRU_PREFERENCES, Context.MODE_PRIVATE);
args=getArguments()
Bundle args = getArguments();
themeResId=getThemeResIdIfProvidedIn(args)
int themeResId = getThemeResIdIfProvidedIn(args);
title=getTitleIfProvidedIn(args)
CharSequence title = getTitleIfProvidedIn(args);
builder=createDialogBuilder(themeResId).setCancelable(true).setView(dialogView)
AlertDialog.Builder builder = createDialogBuilder(themeResId)
                .setCancelable(true)
                .setView(dialogView);
inflater=getActivity().getLayoutInflater()
LayoutInflater inflater = getActivity().getLayoutInflater();
GridView gridView = (GridView) rootView.findViewById(R.id.ps__dialog_grid);
targetApps=extractTargetAppsFrom(args)
TargetApps targetApps = extractTargetAppsFrom(args);
allShareTargets=getAvailableShareTargets(sharingIntent)
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
priorityAppInfos=createPriorityResolveInfoList(targetApps,allShareTargets)
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
otherAppInfos=createOtherAppsResolveInfoList(priorityAppInfos,allShareTargets)
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
resolveInfos=targetApps.extractTargetResolveInfosFrom(allShareTargets)
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
mruResolveInfo=findMruResolveInfoIn(allShareTargets)
ResolveInfo mruResolveInfo = findMruResolveInfoIn(allShareTargets);
List<ResolveInfo> otherAppsInfos = new ArrayList<ResolveInfo>(allAppInfos);
mruPackageName=persister.getLastUsedTarget()
String mruPackageName = persister.getLastUsedTarget();
String packageName = resolveInfo.activityInfo.packageName;
packageManager=getActivity().getPackageManager()
PackageManager packageManager = getActivity().getPackageManager();
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
View buttonStrip = (View) showMoreButton.getParent();
gridView=getGridView()
GridView gridView = getGridView();
intent=wrapIntentWithExplicitTargetComponentForItem(position,sharingIntent)
Intent intent = wrapIntentWithExplicitTargetComponentForItem(position, sharingIntent);
Intent intent = new Intent(sharingIntent);
ActivityInfo activity = adapter.getItem(position).activityInfo;
ComponentName name = new ComponentName(activity.applicationInfo.packageName, activity.name);
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
PriorityShareDialog dialog = new PriorityShareDialog();
Bundle args = new Bundle();
sharingIntent=createSharingIntent()
Intent sharingIntent = createSharingIntent();
fragmentManager=activity.getFragmentManager()
FragmentManager fragmentManager = activity.getFragmentManager();
Intent intent = new Intent(Intent.ACTION_SEND);
dialog=new PriorityShareDialog.Builder().setTitle(title).setTargetApps(targetApps).setSharingIntent(sharingIntent).setOnPrepareSharingIntentListener(listener).setShowMostRecentlyUsed(showMostRecentlyUsed).build()
PriorityShareDialog dialog = new PriorityShareDialog.Builder()
                .setTitle(title)
                .setTargetApps(targetApps)
                .setSharingIntent(sharingIntent)
                .setOnPrepareSharingIntentListener(listener)
                .setShowMostRecentlyUsed(showMostRecentlyUsed)
                .build();
PrioritySharer prioritySharer = new PrioritySharer();
prioritySharer=build()
PrioritySharer prioritySharer = build();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
layoutInflater=LayoutInflater.from(context)
LayoutInflater layoutInflater = LayoutInflater.from(context);
iconSizePx=getIconSizePx(context.getResources())
int iconSizePx = getIconSizePx(context.getResources());
ArrayList<ResolveInfo> sortedList = new ArrayList<ResolveInfo>(resolveInfoList);
int otherAppsCountMaybe = showAllApps ? otherAppInfos.size() : 0;
firstOtherAppsItemPosition=priorityAppInfos.size()
int firstOtherAppsItemPosition = priorityAppInfos.size();
int offsetPosition = position - firstOtherAppsItemPosition;
TextView textView;
textView=initializeItemViewIfNecessary(convertView,R.layout.ps__grid_item_share,parent)
TextView textView = initializeItemViewIfNecessary(convertView, R.layout.ps__grid_item_share, parent);
info=getItem(position)
ResolveInfo info = getItem(position);
icon=info.loadIcon(packageManager)
Drawable icon = info.loadIcon(packageManager);
arraySize=in.readInt()
int arraySize = in.readInt();
String[] packageNames = new String[arraySize];
arraySize=targetPackages.size()
int arraySize = targetPackages.size();
String[] packagesArray = new String[arraySize];
SparseArray<ResolveInfo> matchedResolveInfos = new SparseArray<ResolveInfo>(targetPackages.size());
String packageName = info.activityInfo.packageName;
index=indexOfItemInto(packageName,targetPackages)
int index = indexOfItemInto(packageName, targetPackages);
sparseArraySize=sparseArray.size()
int sparseArraySize = sparseArray.size();
ArrayList<T> list = new ArrayList<T>(sparseArraySize);
int i = 0;
originalSubject=intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT)
CharSequence originalSubject = intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT);
String subject = originalSubject != null ? originalSubject.toString() : null;
composer=createComposer()
MessageComposer composer = createComposer();
component=intent.getComponent()
ComponentName component = intent.getComponent();
targetPackageName=component.getPackageName()
String targetPackageName = component.getPackageName();
adapter=ArrayAdapter.createFromResource(this,R.array.target_apps,android.R.layout.simple_spinner_item)
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
EditText text = (EditText) findViewById(R.id.text);
EditText title = (EditText) findViewById(R.id.title);
EditText mimeType = (EditText) findViewById(R.id.mime_type);
EditText dataUri = (EditText) findViewById(R.id.data_uri);
Switch showMostRecentlyUsed = (Switch) findViewById(R.id.show_most_recently_used);
uriString=dataUri.getText().toString()
String uriString = dataUri.getText().toString();
EditText text = (EditText) findViewById(R.id.text);
TextView textView = (TextView) convertView.findViewById(R.id.positionView);
colorView=convertView.findViewById(R.id.colorView)
View colorView = convertView.findViewById(R.id.colorView);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
offset=headerPlaceholder.getTop()
int offset = headerPlaceholder.getTop();
Integer item = COLORS[position];
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
firstVisiblePosition=grid.getFirstVisiblePosition()
int firstVisiblePosition = grid.getFirstVisiblePosition();
inflate=getViewForPosition(container,position)
View inflate = getViewForPosition(container, position);
id=item.getItemId()
int id = item.getItemId();
MyActivity activity = new MyActivity();
String manifestProperty = "../app/src/main/AndroidManifest.xml";
String resProperty = "../app/src/main/res";
cursor=resolver.query(uri,projection,selection,selectionArgs,null)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, null);
cursor=resolver.query(uri,projection,selection,selectionArgs,sortOrder)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, sortOrder);
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=richClass.setter(name)
Method setter = richClass.setter(name);
T obj;
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=methodsByName.get(name)
Method setter = methodsByName.get(name);
int type = TYPE_INT;
Class<?> t = setter.getParameterTypes()[0];
Class<?> t = setter.getParameterTypes()[0];
cursorType=cursor.getType(index)
final int cursorType = cursor.getType(index);
final Object obj;
s=f.getAnnotation(Mapper.class)
Mapper s = f.getAnnotation(Mapper.class);
mm=m.getAnnotation(Mapper.class)
Mapper mm = m.getAnnotation(Mapper.class);
methodName=StringUtil.asCamelifySetMethod(what)
String methodName = StringUtil.asCamelifySetMethod(what);
cursor=getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,null,null,null,null)
Cursor cursor = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
now=System.currentTimeMillis()
long now = System.currentTimeMillis();
List<Contact2> typedCursor = new CursorList<Contact2>(cursor, Contact2.class);
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[a-zA-Z0-9]+")
Pattern p = Pattern.compile("[a-zA-Z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[A-Z][a-z0-9]+")
Pattern p = Pattern.compile("[A-Z][a-z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
SurfaceView first = (SurfaceView) findViewById(R.id.firstSurface);
SurfaceView second = (SurfaceView) findViewById(R.id.secondSurface);
Intent pickVideo = new Intent(Intent.ACTION_PICK);
Bundle args = new Bundle();
enroll=mHotwordDetector.createEnrollIntent()
Intent enroll = mHotwordDetector.createEnrollIntent();

Diff of 5a781f8f85e93ca37a87a8d381adfbfcb0e477a3 and 46f721e4d3d549e0a3b622b0e598f8cf1c455502:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 33
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 5a781f8f85e93ca37a87a8d381adfbfcb0e477a3 to 46f721e4d3d549e0a3b622b0e598f8cf1c455502


****Parsing for addition at revision 46f721e4d3d549e0a3b622b0e598f8cf1c455502****

Added ApplicationTest.java to .\/spikes\ repository source files.
Added DrawerActivity.java to .\/spikes\ repository source files.
Added EarthActivity.java to .\/spikes\ repository source files.
Added SaturnActivity.java to .\/spikes\ repository source files.
Added LocalPlayerActivity.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added CastApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ComposeSmsActivity.java to .\/spikes\ repository source files.
Added HeadlessSmsSendService.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MmsReceiver.java to .\/spikes\ repository source files.
Added SmsReceiver.java to .\/spikes\ repository source files.
Added ExtendedDemoActivity.java to .\/spikes\ repository source files.
Added ExtendedDemoApplication.java to .\/spikes\ repository source files.
Added SimpleDemoActivity.java to .\/spikes\ repository source files.
Added SimpleDemoApplication.java to .\/spikes\ repository source files.
Added Binder.java to .\/spikes\ repository source files.
Added ConnectedClient.java to .\/spikes\ repository source files.
Added Connection.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnection.java to .\/spikes\ repository source files.
Added ServiceConnectionCallback.java to .\/spikes\ repository source files.
Added EasyCustomTabs.java to .\/spikes\ repository source files.
Added ActionButtonComposer.java to .\/spikes\ repository source files.
Added CloseButtonIconComposer.java to .\/spikes\ repository source files.
Added Composer.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilder.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigator.java to .\/spikes\ repository source files.
Added EasyCustomTabsWebNavigator.java to .\/spikes\ repository source files.
Added ExitAnimationsComposer.java to .\/spikes\ repository source files.
Added IntentCustomizer.java to .\/spikes\ repository source files.
Added MenuItemComposer.java to .\/spikes\ repository source files.
Added NavigationFallback.java to .\/spikes\ repository source files.
Added Navigator.java to .\/spikes\ repository source files.
Added ShowTitleComposer.java to .\/spikes\ repository source files.
Added StartAnimationsComposer.java to .\/spikes\ repository source files.
Added ToolbarColorComposer.java to .\/spikes\ repository source files.
Added UrlBarHidingComposer.java to .\/spikes\ repository source files.
Added WebNavigator.java to .\/spikes\ repository source files.
Added AvailableAppProvider.java to .\/spikes\ repository source files.
Added BestPackageFinder.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProvider.java to .\/spikes\ repository source files.
Added BinderTest.java to .\/spikes\ repository source files.
Added ConnectedClientTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnectionTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigatorTest.java to .\/spikes\ repository source files.
Added BestPackageFinderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProviderTest.java to .\/spikes\ repository source files.
Added ApiPagedChannelHistory.java to .\/spikes\ repository source files.
Added ApiPagedResponse.java to .\/spikes\ repository source files.
Added ChannelHistory.java to .\/spikes\ repository source files.
Added HistoryConverter.java to .\/spikes\ repository source files.
Added Runner.java to .\/spikes\ repository source files.
Added SlackHistoryFetcher.java to .\/spikes\ repository source files.
Added SlackWebService.java to .\/spikes\ repository source files.
Added ApiPagedResponseTest.java to .\/spikes\ repository source files.
Added MainActivityTest.java to .\/spikes\ repository source files.
Added LoremAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added BetterAccountManager.java to .\/spikes\ repository source files.
Added BetterAuthenticator.java to .\/spikes\ repository source files.
Added BetterAuthenticatorActivity.java to .\/spikes\ repository source files.
Added GertHerbAuthenticator.java to .\/spikes\ repository source files.
Added GertHerbAuthenticatorService.java to .\/spikes\ repository source files.
Added NoAccountException.java to .\/spikes\ repository source files.
Added ReactiveAuthenticatorActivity.java to .\/spikes\ repository source files.
Added Token.java to .\/spikes\ repository source files.
Added GertHerbActivity.java to .\/spikes\ repository source files.
Added GertHerbApplication.java to .\/spikes\ repository source files.
Added GertHerbAuthenticationActivity.java to .\/spikes\ repository source files.
Added TypefaceFactory.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added ViewServer.java to .\/spikes\ repository source files.
Added ViewServerManager.java to .\/spikes\ repository source files.
Added DeveloperError.java to .\/spikes\ repository source files.
Added HomeActivity.java to .\/spikes\ repository source files.
Added LoginActivity.java to .\/spikes\ repository source files.
Added LoginView.java to .\/spikes\ repository source files.
Added UserCredentials.java to .\/spikes\ repository source files.
Added FontButton.java to .\/spikes\ repository source files.
Added FontEditText.java to .\/spikes\ repository source files.
Added FontTextView.java to .\/spikes\ repository source files.
Added GithubApi.java to .\/spikes\ repository source files.
Added GithubApiFactory.java to .\/spikes\ repository source files.
Added TokenRequest.java to .\/spikes\ repository source files.
Added TokenResponse.java to .\/spikes\ repository source files.
Added Dummy.java to .\/spikes\ repository source files.
Added DummyTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MainFragment.java to .\/spikes\ repository source files.
Added Attributes.java to .\/spikes\ repository source files.
Added Coordinates.java to .\/spikes\ repository source files.
Added IndicatorCoordinatesCalculator.java to .\/spikes\ repository source files.
Added LandingStrip.java to .\/spikes\ repository source files.
Added MutableCoordinates.java to .\/spikes\ repository source files.
Added OnPagerAdapterChangedListener.java to .\/spikes\ repository source files.
Added PagerAdapterObserver.java to .\/spikes\ repository source files.
Added Scrollable.java to .\/spikes\ repository source files.
Added ScrollingPageChangeListener.java to .\/spikes\ repository source files.
Added State.java to .\/spikes\ repository source files.
Added TabsContainer.java to .\/spikes\ repository source files.
Added CustomLandingStrip.java to .\/spikes\ repository source files.
Added CustomTabActivity.java to .\/spikes\ repository source files.
Added ExampleRainbowLandingStrip.java to .\/spikes\ repository source files.
Added FixedWidthTabActivity.java to .\/spikes\ repository source files.
Added NoFragmentsSimpleTextTabActivity.java to .\/spikes\ repository source files.
Added Data.java to .\/spikes\ repository source files.
Added DemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added SmallDemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerFragment.java to .\/spikes\ repository source files.
Added DemoViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapterState.java to .\/spikes\ repository source files.
Added SimpleTextTabActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AbTestingParamsLoadedCallback.java to .\/spikes\ repository source files.
Added AyBe.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added WeakStartCallback.java to .\/spikes\ repository source files.
Added LeakActivity.java to .\/spikes\ repository source files.
Added NoLeakActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added ColorScheme.java to .\/spikes\ repository source files.
Added ColorUtils.java to .\/spikes\ repository source files.
Added DominantColorCalculator.java to .\/spikes\ repository source files.
Added FloatUtils.java to .\/spikes\ repository source files.
Added MedianCutQuantizer.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added PayPalFragment.java to .\/spikes\ repository source files.
Added PayPalHelper.java to .\/spikes\ repository source files.
Added MaxLengthMessageComposer.java to .\/spikes\ repository source files.
Added MessageComposer.java to .\/spikes\ repository source files.
Added TwitterMessageComposer.java to .\/spikes\ repository source files.
Added DisabledMruPersister.java to .\/spikes\ repository source files.
Added MruPersister.java to .\/spikes\ repository source files.
Added SharedPreferencesMruPersister.java to .\/spikes\ repository source files.
Added OnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added PriorityShareDialog.java to .\/spikes\ repository source files.
Added PrioritySharer.java to .\/spikes\ repository source files.
Added ShareTargetsAdapter.java to .\/spikes\ repository source files.
Added SimpleOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added TargetApps.java to .\/spikes\ repository source files.
Added TwitterOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AdvancedActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SimpleActivity.java to .\/spikes\ repository source files.
Added LockingActivity.java to .\/spikes\ repository source files.
Added PostLockingActivity.java to .\/spikes\ repository source files.
Added PreLockingActivity.java to .\/spikes\ repository source files.
Added DummyAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added NovoStaggeredGridView.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SpikeApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SwipeableView.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MyClass.java to .\/spikes\ repository source files.
Added MyClassTest.java to .\/spikes\ repository source files.
Added MyAndroidClassTest.java to .\/spikes\ repository source files.
Added RobolectricGradleTestRunner.java to .\/spikes\ repository source files.
Added Mapper.java to .\/spikes\ repository source files.
Added Query.java to .\/spikes\ repository source files.
Added TypedResolver.java to .\/spikes\ repository source files.
Added CursorList.java to .\/spikes\ repository source files.
Added CursorListIterator.java to .\/spikes\ repository source files.
Added CursorMarshaller.java to .\/spikes\ repository source files.
Added EmptyListIterator.java to .\/spikes\ repository source files.
Added ReflectionCursorMarshaller.java to .\/spikes\ repository source files.
Added RichClass.java to .\/spikes\ repository source files.
Added Setter.java to .\/spikes\ repository source files.
Added Function.java to .\/spikes\ repository source files.
Added TypedElementLoader.java to .\/spikes\ repository source files.
Added TypedLoader.java to .\/spikes\ repository source files.
Added Marshaller.java to .\/spikes\ repository source files.
Added ObjectMapper.java to .\/spikes\ repository source files.
Added TypedActivity.java to .\/spikes\ repository source files.
Added StringUtil.java to .\/spikes\ repository source files.
Added MyObject.java to .\/spikes\ repository source files.
Added MediaPlayerSwitcherActivity.java to .\/spikes\ repository source files.
Added VideoPlayerService.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added RecognitionService.java to .\/spikes\ repository source files.
Added SessionService.java to .\/spikes\ repository source files.
Added SettingsActivity.java to .\/spikes\ repository source files.
Added SmartContextInteractionService.java to .\/spikes\ repository source files.
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
String[] planetTitles = new String[]{"Earth", "Saturn"};
DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
ListView drawerList = (ListView) findViewById(R.id.left_drawer);
Intent intent;
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close);
b=getIntent().getExtras()
Bundle b = getIntent().getExtras();
mShouldStartPlayback=b.getBoolean("shouldStart")
boolean mShouldStartPlayback = b.getBoolean("shouldStart");
startPosition=b.getInt("startPosition",0)
int startPosition = b.getInt("startPosition", 0);
currentPos=mVideoView.getCurrentPosition()
int currentPos = mVideoView.getCurrentPosition();
String msg;
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, mDisplaySize.y + getActionBar().getHeight());
mm=mSelectedMedia.getMetadata()
MediaMetadata mm = mSelectedMedia.getMetadata();
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, (int) (mDisplaySize.x * ASPECT_RATIO));
WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
width=display.getWidth()
int width = display.getWidth();
height=display.getHeight()
int height = display.getHeight();
int resourceId = 0;
String videoUrl = "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4#sthash.rJ5rPZy8.dpuf";
String title = "Jahre Philharmonie";
String description = "Awesome film you must watch!";
String author = "Blundell";
String thumbUrl = "http://www.ustream.tv/blog/wp-content/uploads/2013/10/simply-go-live.png";
MediaMetadata metadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE);
mediaInfo=new MediaInfo.Builder(videoUrl).setMetadata(metadata).setStreamType(MediaInfo.STREAM_TYPE_BUFFERED).setContentType("video/mp4").build()
MediaInfo mediaInfo = new MediaInfo.Builder(videoUrl)
                        .setMetadata(metadata)
                        .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)
                        .setContentType("video/mp4")
                        .build();
Intent intent = new Intent(MainActivity.this, LocalPlayerActivity.class);
preferences=getPreferences(MODE_PRIVATE)
SharedPreferences preferences = getPreferences(MODE_PRIVATE);
defaultSmsPackage=Telephony.Sms.getDefaultSmsPackage(this)
String defaultSmsPackage = Telephony.Sms.getDefaultSmsPackage(this);
Intent intent = new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
availableAppProvider=EasyCustomTabs.getInstance()
AvailableAppProvider availableAppProvider = EasyCustomTabs.getInstance();
ConnectedClient connectedClient = new ConnectedClient(client);
binder=Binder.newInstance()
Binder binder = Binder.newInstance();
List<Composer> composerList = new ArrayList<>();
customTabsSession=connection.newSession()
CustomTabsSession customTabsSession = connection.newSession();
CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(customTabsSession);
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
context=EasyCustomTabs.getInstance().getContext()
Context context = EasyCustomTabs.getInstance().getContext();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
packagesSupportingCustomTabs=getPackagesSupportingCustomTabs()
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
defaultPackage=getDefaultPackage()
String defaultPackage = getDefaultPackage();
defaultActivityInfo=packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK,0)
ResolveInfo defaultActivityInfo = packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK, 0);
String packageName = defaultActivityInfo.activityInfo.packageName;
resolvedInfoList=packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK,0)
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<String> packagesSupportingCustomTabs = new ArrayList<>();
Intent serviceIntent = new Intent();
bestPackageFinder=BestPackageFinder.newInstance()
BestPackageFinder bestPackageFinder = BestPackageFinder.newInstance();
packageName=bestPackageFinder.findBestPackage()
String packageName = bestPackageFinder.findBestPackage();
resolveInfo=createResolveInfoFor(packageName)
ResolveInfo resolveInfo = createResolveInfoFor(packageName);
ResolveInfo resolveInfo = new ResolveInfo();
List<ResolveInfo> resolveInfoList = new ArrayList<>();
defaultPackageResolveInfo=createResolveInfoFor(packageName)
ResolveInfo defaultPackageResolveInfo = createResolveInfoFor(packageName);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
oldestApiMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage oldestApiMessage = apiMessages.get(apiMessages.size() - 1);
String lastResponseEpochTime = oldestApiMessage.timeStamp;
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
latestMessage=latestMessages.get(latestMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage latestMessage = latestMessages.get(latestMessages.size() - 1);
latestMessageDateTime=convertToLocalDateTime(latestMessage.timeStamp)
LocalDateTime latestMessageDateTime = convertToLocalDateTime(latestMessage.timeStamp);
List<ChannelHistory.Message> messages = new ArrayList<>();
historyFrom=getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1))
LocalDateTime historyFrom = getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1));
historyTo=getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0))
LocalDateTime historyTo = getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0));
String text = apiMessage.text;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
lastMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage lastMessage = apiMessages.get(apiMessages.size() - 1);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
firstMessage=apiMessages.get(0)
ApiPagedChannelHistory.ApiMessage firstMessage = apiMessages.get(0);
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
String slackToken = args[0];
retrofit=new Retrofit.Builder().baseUrl("https://slack.com/api/").addConverterFactory(GsonConverterFactory.create()).build()
Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://slack.com/api/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();
slackWebService=retrofit.create(SlackWebService.class)
SlackWebService slackWebService = retrofit.create(SlackWebService.class);
slackHistoryFetcher=SlackHistoryFetcher.from(slackWebService,slackToken)
SlackHistoryFetcher slackHistoryFetcher = SlackHistoryFetcher.from(slackWebService, slackToken);
start=LocalDateTime.now()
LocalDateTime start = LocalDateTime.now();
end=LocalDateTime.now().minusDays(7)
LocalDateTime end = LocalDateTime.now().minusDays(7);
channelHistory=slackHistoryFetcher.getChannelHistory(start,end)
ChannelHistory channelHistory = slackHistoryFetcher.getChannelHistory(start, end);
HistoryConverter historyConverter = new HistoryConverter();
ApiPagedResponse apiPagedResponse = new ApiPagedResponse(start);
response=fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime())
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
apiPagedChannelHistory=response.body()
ApiPagedChannelHistory apiPagedChannelHistory = response.body();
channelHistory=slackWebService.getChannelHistory(slackToken,channel,lastResponseEpochTime,NUMBER_OF_RESULTS)
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
ApiPagedChannelHistory apiPagedChannelHistory = new ApiPagedChannelHistory();
ApiPagedChannelHistory.ApiMessage apiMessage = new ApiPagedChannelHistory.ApiMessage();
final TextView textView = new TextView(context);
emptyView=findViewById(R.id.empty_view)
View emptyView = findViewById(R.id.empty_view);
final Integer action = values[0];
LoremAdapter loremAdapter = new LoremAdapter();
accounts=accountManager.getAccountsByType(accountType)
Account[] accounts = accountManager.getAccountsByType(accountType);
Bundle result;
Bundle result;
Bundle result = new Bundle();
activity=createLoginIntent(context,accountType,authTokenType,requiredFeatures,options)
Intent activity = createLoginIntent(context, accountType, authTokenType, requiredFeatures, options);
Bundle bundle = new Bundle();
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
accounts=accountManager.getAccountsByType(authTokenType)
Account[] accounts = accountManager.getAccountsByType(authTokenType);
bundle=createResponseBundle(token)
Bundle bundle = createResponseBundle(token);
accountManager=AccountManager.get(this.getApplicationContext())
AccountManager accountManager = AccountManager.get(this.getApplicationContext());
Account account = new Account(token.getUserName(), getAccountName());
Bundle bundle = new Bundle();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
GertHerbAuthenticator authenticator = new GertHerbAuthenticator(this);
fontId=getFontId(context,attrs)
int fontId = getFontId(context, attrs);
fontType=getFontType(fontId)
FontType fontType = getFontType(fontId);
typedArray=context.obtainStyledAttributes(attrs,R.styleable.CustomTextAppearance)
TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CustomTextAppearance);
typeface=createTypeFace(context,fontType)
Typeface typeface = createTypeFace(context, fontType);
info=context.getApplicationInfo()
ApplicationInfo info = context.getApplicationInfo();
name=activity.getTitle().toString()
String name = activity.getTitle().toString();
client=mServer.accept()
Socket client = mServer.accept();
boolean result;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
BufferedReader in = null;
request=in.readLine()
final String request = in.readLine();
String command;
String parameters;
index=request.indexOf(' ')
int index = request.indexOf(' ');
boolean result;
boolean success = true;
BufferedWriter out = null;
index=parameters.indexOf(' ')
int index = parameters.indexOf(' ');
code=parameters.substring(0,index)
final String code = parameters.substring(0, index);
int hashCode = (int) Long.parseLong(code, 16);
window=findWindow(hashCode)
final View window = findWindow(hashCode);
dispatch=ViewDebug.class.getDeclaredMethod("dispatchCommand",View.class,String.class,String.class,OutputStream.class)
final Method dispatch = ViewDebug.class.getDeclaredMethod("dispatchCommand",
                        View.class, String.class, String.class, OutputStream.class);
View window = null;
boolean result = true;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
boolean result = true;
String focusName = null;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
View focusedWindow = null;
BufferedWriter out = null;
boolean needWindowListUpdate = false;
boolean needFocusedWindowUpdate = false;
BetterAccountManager accountManager = new BetterAccountManager(this, getString(R.string.account_type), getString(R.string.token_type), null);
loginView=Views.findById(this,R.id.login_view)
LoginView loginView = Views.findById(this, R.id.login_view);
authorizationApi=new GithubApiFactory().createAuthorizationApi(credentials.username,credentials.password)
GithubApi authorizationApi = new GithubApiFactory().createAuthorizationApi(credentials.username, credentials.password);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
Endpoint endpoint = new Endpoint() {
            @Override
            public String getUrl() {
                return GITHUB_API_URL;
            }

            @Override
            public String getName() {
                return "Live";
            }
        };
interceptor=createAuthorizationRequestInterceptor(username,password)
RequestInterceptor interceptor = createAuthorizationRequestInterceptor(username, password);
restAdapter=createRestAdapter(endpoint,interceptor)
RestAdapter restAdapter = createRestAdapter(endpoint, interceptor);
Dummy dummy = new Dummy();
result=dummy.explodes()
boolean result = dummy.explodes();
String base64EncodedPublicKey = "CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE";
premiumPurchase=inventory.getPurchase(SKU_PREMIUM)
Purchase premiumPurchase = inventory.getPurchase(SKU_PREMIUM);
infiniteGasPurchase=inventory.getPurchase(SKU_INFINITE_GAS)
Purchase infiniteGasPurchase = inventory.getPurchase(SKU_INFINITE_GAS);
gasPurchase=inventory.getPurchase(SKU_GAS)
Purchase gasPurchase = inventory.getPurchase(SKU_GAS);
String payload = "";
String payload = "";
String payload = "";
payload=p.getDeveloperPayload()
String payload = p.getDeveloperPayload();
int index = mTank >= TANK_RES_IDS.length ? TANK_RES_IDS.length - 1 : mTank;
AlertDialog.Builder bld = new AlertDialog.Builder(this);
spe=getPreferences(MODE_PRIVATE).edit()
SharedPreferences.Editor spe = getPreferences(MODE_PRIVATE).edit();
sp=getPreferences(MODE_PRIVATE)
SharedPreferences sp = getPreferences(MODE_PRIVATE);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                                  + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                    | ((source[d + 1 + off] << 24) >>> 16)
                    | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                    | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                                   "-1002:Bad response received/" +
                                   "-1003:Purchase signature verification failed/" +
                                   "-1004:Send intent failed/" +
                                   "-1005:User cancelled/" +
                                   "-1006:Unknown purchase response/" +
                                   "-1007:Missing token/" +
                                   "-1008:Unknown error/" +
                                   "-1009:Subscriptions not available/" +
                                   "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(),
                    itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                        | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                        | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                            | ((source[d + 1 + off] << 24) >>> 16)
                            | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                            | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                "-1002:Bad response received/" +
                "-1003:Purchase signature verification failed/" +
                "-1004:Send intent failed/" +
                "-1005:User cancelled/" +
                "-1006:Unknown purchase response/" +
                "-1007:Missing token/" +
                "-1008:Unknown error/" +
                "-1009:Subscriptions not available/" +
                "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(), itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
responseCode=result.getResponse()
int responseCode = result.getResponse();
sku=purchase.getSku()
String sku = purchase.getSku();
skuDetails=inv.getSkuDetails(sku)
SkuDetails skuDetails = inv.getSkuDetails(sku);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
Button purchaseFiveButton = (Button) rootView.findViewById(R.id.fragment_main_button_purchase_five_coins);
xml=context.obtainStyledAttributes(attrs,R.styleable.LandingStrip)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.LandingStrip);
tabLayoutId=xml.getResourceId(R.styleable.LandingStrip_tabLayoutId,MISSING_TAB_LAYOUT_ID)
int tabLayoutId = xml.getResourceId(R.styleable.LandingStrip_tabLayoutId, MISSING_TAB_LAYOUT_ID);
indicatorColour=xml.getResourceId(R.styleable.LandingStrip_indicatorColor,DEFAULT_INDICATOR_COLOUR)
int indicatorColour = xml.getResourceId(R.styleable.LandingStrip_indicatorColor, DEFAULT_INDICATOR_COLOUR);
indicatorHeight=getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight,DEFAULT_INDICATOR_HEIGHT,xml)
int indicatorHeight = getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight, DEFAULT_INDICATOR_HEIGHT, xml);
tabsPaddingLeft=getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingLeft = getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding, DEFAULT_TABS_PADDING, xml);
tabsPaddingRight=getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingRight = getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding, DEFAULT_TABS_PADDING, xml);
MutableCoordinates drawCurrentTabCoordinates = new MutableCoordinates();
MutableCoordinates drawNextTabCoordinates = new MutableCoordinates();
MutableCoordinates drawMovingIndicatorCoordinates = new MutableCoordinates();
currentTab=tabsContainer.getTabAt(currentPosition)
View currentTab = tabsContainer.getTabAt(currentPosition);
currentTabStart=currentTab.getLeft()
float currentTabStart = currentTab.getLeft();
currentTabEnd=currentTab.getRight()
float currentTabEnd = currentTab.getRight();
nextTab=tabsContainer.getTabAt(currentPosition + 1)
View nextTab = tabsContainer.getTabAt(currentPosition + 1);
nextTabPositionOffset=getFractionFrom(pagePositionOffset)
float nextTabPositionOffset = getFractionFrom(pagePositionOffset);
indicatorStart=getIndicatorPosition(nextTab.getStart(),pagePositionOffset,currentTab.getStart(),nextTabPositionOffset)
float indicatorStart = getIndicatorPosition(nextTab.getStart(), pagePositionOffset, currentTab.getStart(), nextTabPositionOffset);
indicatorEnd=getIndicatorPosition(nextTab.getEnd(),pagePositionOffset,currentTab.getEnd(),nextTabPositionOffset)
float indicatorEnd = getIndicatorPosition(nextTab.getEnd(), pagePositionOffset, currentTab.getEnd(), nextTabPositionOffset);
height=getHeight()
int height = getHeight();
tabCount=pagerAdapter.getCount()
int tabCount = pagerAdapter.getCount();
title=pagerAdapter.getPageTitle(position)
CharSequence title = pagerAdapter.getPageTitle(position);
inflatedTabView=tabsContainer.inflateTab(layoutInflater,attributes.getTabLayoutId())
View inflatedTabView = tabsContainer.inflateTab(layoutInflater, attributes.getTabLayoutId());
int position = (int) view.getTag(TAG_KEY_POSITION);
scrollOffset=getHorizontalScrollOffset(position,positionOffset)
int scrollOffset = getHorizontalScrollOffset(position, positionOffset);
newScrollX=calculateScrollOffset(position,scrollOffset,positionOffset)
float newScrollX = calculateScrollOffset(position, scrollOffset, positionOffset);
tabWidth=tabsContainer.getTabAt(position).getWidth()
int tabWidth = tabsContainer.getTabAt(position).getWidth();
tabForPosition=tabsContainer.getTabAt(position)
View tabForPosition = tabsContainer.getTabAt(position);
float tabStartX = tabForPosition.getLeft() + scrollOffset;
int viewMiddleOffset = getTabParentWidth() / 2;
float tabCenterOffset = (tabForPosition.getRight() - tabForPosition.getLeft()) * 0.5F;
nextTabDelta=getNextTabDelta(position,pagerOffset,tabForPosition)
float nextTabDelta = getNextTabDelta(position, pagerOffset, tabForPosition);
LinearLayout tabsContainerView = new LinearLayout(context);
tab=getTabAt(index)
View tab = getTabAt(index);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
position=indicatorCoordinates.getStart()
float position = indicatorCoordinates.getStart();
lastTabOffset=((ViewGroup)getChildAt(0)).getChildAt(getChildCount() - 1).getWidth()
float lastTabOffset = ((ViewGroup) getChildAt(0)).getChildAt(getChildCount() - 1).getWidth();
frequency=getOneCycle(lastTabOffset)
float frequency = getOneCycle(lastTabOffset);
r=toHex(calculateColour(position,frequency,PHASE_RED,AMPLITUDE,CENTER_FREQUENCY))
String r = toHex(calculateColour(position, frequency, PHASE_RED, AMPLITUDE, CENTER_FREQUENCY));
g=toHex(calculateColour(position,frequency,PHASE_GREEN,AMPLITUDE,CENTER_FREQUENCY))
String g = toHex(calculateColour(position, frequency, PHASE_GREEN, AMPLITUDE, CENTER_FREQUENCY));
b=toHex(calculateColour(position,frequency,PHASE_BLUE,AMPLITUDE,CENTER_FREQUENCY))
String b = toHex(calculateColour(position, frequency, PHASE_BLUE, AMPLITUDE, CENTER_FREQUENCY));
height=getHeight()
int height = getHeight();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPagerFragment viewPagerFragment = new ViewPagerFragment();
Bundle bundle = new Bundle();
TextView view = (TextView) layoutInflater.inflate(R.layout.view_demo, container, false);
currentPosition=viewPagerAdapterState.getCurrentPosition()
int currentPosition = viewPagerAdapterState.getCurrentPosition();
view=getView(container,position)
View view = getView(container, position);
parcelableSparseArray=viewPagerAdapterState.get(position)
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
View view = (View) object;
SparseArray<Parcelable> viewState = new SparseArray<>();
position=entry.getValue()
int position = entry.getValue();
view=entry.getKey()
View view = entry.getKey();
bundle=in.readBundle()
Bundle bundle = in.readBundle();
Map<Integer, SparseArray<Parcelable>> viewStates = new HashMap<>(bundle.keySet().size());
sparseParcelableArray=bundle.getSparseParcelableArray(key)
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
primaryItemPosition=in.readInt()
int primaryItemPosition = in.readInt();
Bundle bundle = new Bundle();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
final TextView abText = (TextView) findViewById(R.id.ab_text);
final AyBe ayBe = new AyBe();
id=item.getItemId()
int id = item.getItemId();
callback=weakCallback.get()
AbTestingParamsLoadedCallback callback = weakCallback.get();
WeakReference<NoLeakActivity> weakNoLeakActivity = new WeakReference<NoLeakActivity>(noLeakActivity);
noLeakActivity=weakNoLeakActivity.get()
NoLeakActivity noLeakActivity = weakNoLeakActivity.get();
final float inverseRatio = 1f - ratio;
float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRatio);
float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRatio);
float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRatio);
hsv=node.getHsv()
float[] hsv = node.getHsv();
width=bitmap.getWidth()
final int width = bitmap.getWidth();
height=bitmap.getHeight()
final int height = bitmap.getHeight();
final int[] rgbPixels = new int[width * height];
final MedianCutQuantizer mcq = new MedianCutQuantizer(rgbPixels, NUM_COLORS);
primaryAccentColor=findPrimaryAccentColor()
final ColorNode primaryAccentColor = findPrimaryAccentColor();
secondaryAccentColor=findSecondaryAccentColor(primaryAccentColor)
final ColorNode secondaryAccentColor = findSecondaryAccentColor(primaryAccentColor);
tertiaryAccentColor=findTertiaryAccentColor(primaryAccentColor,secondaryAccentColor)
final int tertiaryAccentColor = findTertiaryAccentColor(
                primaryAccentColor, secondaryAccentColor);
primaryTextColor=findPrimaryTextColor(primaryAccentColor)
final int primaryTextColor = findPrimaryTextColor(primaryAccentColor);
secondaryTextColor=findSecondaryTextColor(primaryAccentColor)
final int secondaryTextColor = findSecondaryTextColor(primaryAccentColor);
final float primaryHue = primary.getHsv()[0];
final float candidateHue = candidate.getHsv()[0];
copy=Arrays.copyOf(palette,palette.length)
final MedianCutQuantizer.ColorNode[] copy = Arrays.copyOf(palette, palette.length);
maxCount=palette[0].getCount()
final float maxCount = palette[0].getCount();
lhsWeight=calculateWeight(lhs,maxCount)
final float lhsWeight = calculateWeight(lhs, maxCount);
rhsWeight=calculateWeight(rhs,maxCount)
final float rhsWeight = calculateWeight(rhs, maxCount);
float sum = 0;
float sumWeight = 0;
float value = values[i];
float weight = values[i + 1];
ColorHistogram colorHist = new ColorHistogram(pixels);
K=colorHist.getNumberOfColors()
int K = colorHist.getNumberOfColors();
ColorNode[] rCols = null;
rgb=colorHist.getColor(i)
int rgb = colorHist.getColor(i);
cnt=colorHist.getCount(i)
int cnt = colorHist.getCount(i);
ColorBox initialBox = new ColorBox(0, K - 1, 0);
List<ColorBox> colorSet = new ArrayList<ColorBox>();
int k = 1;
boolean done = false;
nextBox=findBoxToSplit(colorSet)
ColorBox nextBox = findBoxToSplit(colorSet);
newBox=nextBox.splitBox()
ColorBox newBox = nextBox.splitBox();
color=findClosestColor(pixels[i])
ColorNode color = findClosestColor(pixels[i]);
idx=findClosestColorIndex(rgb)
int idx = findClosestColorIndex(rgb);
red=Color.red(rgb)
int red = Color.red(rgb);
grn=Color.green(rgb)
int grn = Color.green(rgb);
blu=Color.blue(rgb)
int blu = Color.blue(rgb);
int minIdx = 0;
int minDistance = Integer.MAX_VALUE;
ColorNode color = quantColors[i];
d2=color.distance2(red,grn,blu)
int d2 = color.distance2(red, grn, blu);
ColorBox boxToSplit = null;
int minLevel = Integer.MAX_VALUE;
n=colorBoxes.size()
int n = colorBoxes.size();
ColorNode[] avgColors = new ColorNode[n];
int i = 0;
int dr = this.red - red;
int dg = this.grn - grn;
int db = this.blu - blu;
ColorNode color = imageColors[i];
int r = color.red;
int g = color.grn;
int b = color.blu;
dim=getLongestColorDimension()
ColorDimension dim = getLongestColorDimension();
med=findMedian(dim)
int med = findMedian(dim);
int nextLevel = level + 1;
ColorBox newBox = new ColorBox(med + 1, upper, nextLevel);
int rLength = rmax - rmin;
int gLength = gmax - gmin;
int bLength = bmax - bmin;
int half = count / 2;
int nPixels, median;
int rSum = 0;
int gSum = 0;
int bSum = 0;
int n = 0;
ColorNode ci = imageColors[i];
int cnt = ci.cnt;
double nd = n;
int avgRed = (int) (0.5 + rSum / nd);
int avgGrn = (int) (0.5 + gSum / nd);
int avgBlu = (int) (0.5 + bSum / nd);
s=this.getClass().getSimpleName()
String s = this.getClass().getSimpleName();
int i = 0;
int N = pixelsOrig.length;
int[] pixelsCpy = new int[N];
int k = -1;
int curColor = -1;
int nColors = k + 1;
id=item.getItemId()
int id = item.getItemId();
Intent intent = new Intent();
bitmap=((BitmapDrawable)imageView.getDrawable()).getBitmap()
Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap();
DominantColorCalculator dominantColorCalculator = new DominantColorCalculator(bitmap);
selectedImageUri=data.getData()
Uri selectedImageUri = data.getData();
selectedImagePath=getPath(selectedImageUri)
String selectedImagePath = getPath(selectedImageUri);
String[] projection = {MediaStore.Images.Media.DATA};
cursor=managedQuery(uri,projection,null,null,null)
Cursor cursor = managedQuery(uri, projection, null, null, null);
column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)
int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
LinearLayout rootView = (LinearLayout) inflater.inflate(R.layout.fragment_main, container, false);
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
preapprovalButton=payPal.getCheckoutButton(getActivity(),PayPal.BUTTON_194x37,CheckoutButton.TEXT_PAY)
CheckoutButton preapprovalButton = payPal.getCheckoutButton(getActivity(), PayPal.BUTTON_194x37, CheckoutButton.TEXT_PAY);
preapprovalIntent=payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY)
Intent preapprovalIntent = payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY);
String resultTitle = "";
String resultInfo = "";
String resultExtra = "";
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
PayPalPreapproval preapproval = new PayPalPreapproval();
preapproval=createPreapproval(preapprovalKey)
PayPalPreapproval preapproval = createPreapproval(preapprovalKey);
Bundle bundle = new Bundle();
int availableLength = maxLength;
StringBuilder stringBuilder = new StringBuilder(maxLength);
prefixAndSuffixLength=computeAppendedLengthIncludingSeparatorSpaces(prefix,suffix)
int prefixAndSuffixLength = computeAppendedLengthIncludingSeparatorSpaces(prefix, suffix);
urlLength=computeUrlLengthIncludingSeparatorSpace(url)
int urlLength = computeUrlLengthIncludingSeparatorSpace(url);
trimmedSubject=ellipsizeTextIfExceedsMaxLength(subject,availableLength)
String trimmedSubject = ellipsizeTextIfExceedsMaxLength(subject, availableLength);
int length = 0;
preferences=context.getSharedPreferences(MRU_PREFERENCES,Context.MODE_PRIVATE)
SharedPreferences preferences = context.getSharedPreferences(MRU_PREFERENCES, Context.MODE_PRIVATE);
args=getArguments()
Bundle args = getArguments();
themeResId=getThemeResIdIfProvidedIn(args)
int themeResId = getThemeResIdIfProvidedIn(args);
title=getTitleIfProvidedIn(args)
CharSequence title = getTitleIfProvidedIn(args);
builder=createDialogBuilder(themeResId).setCancelable(true).setView(dialogView)
AlertDialog.Builder builder = createDialogBuilder(themeResId)
                .setCancelable(true)
                .setView(dialogView);
inflater=getActivity().getLayoutInflater()
LayoutInflater inflater = getActivity().getLayoutInflater();
GridView gridView = (GridView) rootView.findViewById(R.id.ps__dialog_grid);
targetApps=extractTargetAppsFrom(args)
TargetApps targetApps = extractTargetAppsFrom(args);
allShareTargets=getAvailableShareTargets(sharingIntent)
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
priorityAppInfos=createPriorityResolveInfoList(targetApps,allShareTargets)
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
otherAppInfos=createOtherAppsResolveInfoList(priorityAppInfos,allShareTargets)
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
resolveInfos=targetApps.extractTargetResolveInfosFrom(allShareTargets)
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
mruResolveInfo=findMruResolveInfoIn(allShareTargets)
ResolveInfo mruResolveInfo = findMruResolveInfoIn(allShareTargets);
List<ResolveInfo> otherAppsInfos = new ArrayList<ResolveInfo>(allAppInfos);
mruPackageName=persister.getLastUsedTarget()
String mruPackageName = persister.getLastUsedTarget();
String packageName = resolveInfo.activityInfo.packageName;
packageManager=getActivity().getPackageManager()
PackageManager packageManager = getActivity().getPackageManager();
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
View buttonStrip = (View) showMoreButton.getParent();
gridView=getGridView()
GridView gridView = getGridView();
intent=wrapIntentWithExplicitTargetComponentForItem(position,sharingIntent)
Intent intent = wrapIntentWithExplicitTargetComponentForItem(position, sharingIntent);
Intent intent = new Intent(sharingIntent);
ActivityInfo activity = adapter.getItem(position).activityInfo;
ComponentName name = new ComponentName(activity.applicationInfo.packageName, activity.name);
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
PriorityShareDialog dialog = new PriorityShareDialog();
Bundle args = new Bundle();
sharingIntent=createSharingIntent()
Intent sharingIntent = createSharingIntent();
fragmentManager=activity.getFragmentManager()
FragmentManager fragmentManager = activity.getFragmentManager();
Intent intent = new Intent(Intent.ACTION_SEND);
dialog=new PriorityShareDialog.Builder().setTitle(title).setTargetApps(targetApps).setSharingIntent(sharingIntent).setOnPrepareSharingIntentListener(listener).setShowMostRecentlyUsed(showMostRecentlyUsed).build()
PriorityShareDialog dialog = new PriorityShareDialog.Builder()
                .setTitle(title)
                .setTargetApps(targetApps)
                .setSharingIntent(sharingIntent)
                .setOnPrepareSharingIntentListener(listener)
                .setShowMostRecentlyUsed(showMostRecentlyUsed)
                .build();
PrioritySharer prioritySharer = new PrioritySharer();
prioritySharer=build()
PrioritySharer prioritySharer = build();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
layoutInflater=LayoutInflater.from(context)
LayoutInflater layoutInflater = LayoutInflater.from(context);
iconSizePx=getIconSizePx(context.getResources())
int iconSizePx = getIconSizePx(context.getResources());
ArrayList<ResolveInfo> sortedList = new ArrayList<ResolveInfo>(resolveInfoList);
int otherAppsCountMaybe = showAllApps ? otherAppInfos.size() : 0;
firstOtherAppsItemPosition=priorityAppInfos.size()
int firstOtherAppsItemPosition = priorityAppInfos.size();
int offsetPosition = position - firstOtherAppsItemPosition;
TextView textView;
textView=initializeItemViewIfNecessary(convertView,R.layout.ps__grid_item_share,parent)
TextView textView = initializeItemViewIfNecessary(convertView, R.layout.ps__grid_item_share, parent);
info=getItem(position)
ResolveInfo info = getItem(position);
icon=info.loadIcon(packageManager)
Drawable icon = info.loadIcon(packageManager);
arraySize=in.readInt()
int arraySize = in.readInt();
String[] packageNames = new String[arraySize];
arraySize=targetPackages.size()
int arraySize = targetPackages.size();
String[] packagesArray = new String[arraySize];
SparseArray<ResolveInfo> matchedResolveInfos = new SparseArray<ResolveInfo>(targetPackages.size());
String packageName = info.activityInfo.packageName;
index=indexOfItemInto(packageName,targetPackages)
int index = indexOfItemInto(packageName, targetPackages);
sparseArraySize=sparseArray.size()
int sparseArraySize = sparseArray.size();
ArrayList<T> list = new ArrayList<T>(sparseArraySize);
int i = 0;
originalSubject=intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT)
CharSequence originalSubject = intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT);
String subject = originalSubject != null ? originalSubject.toString() : null;
composer=createComposer()
MessageComposer composer = createComposer();
component=intent.getComponent()
ComponentName component = intent.getComponent();
targetPackageName=component.getPackageName()
String targetPackageName = component.getPackageName();
adapter=ArrayAdapter.createFromResource(this,R.array.target_apps,android.R.layout.simple_spinner_item)
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
EditText text = (EditText) findViewById(R.id.text);
EditText title = (EditText) findViewById(R.id.title);
EditText mimeType = (EditText) findViewById(R.id.mime_type);
EditText dataUri = (EditText) findViewById(R.id.data_uri);
Switch showMostRecentlyUsed = (Switch) findViewById(R.id.show_most_recently_used);
uriString=dataUri.getText().toString()
String uriString = dataUri.getText().toString();
EditText text = (EditText) findViewById(R.id.text);
TextView textView = (TextView) convertView.findViewById(R.id.positionView);
colorView=convertView.findViewById(R.id.colorView)
View colorView = convertView.findViewById(R.id.colorView);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
offset=headerPlaceholder.getTop()
int offset = headerPlaceholder.getTop();
Integer item = COLORS[position];
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
firstVisiblePosition=grid.getFirstVisiblePosition()
int firstVisiblePosition = grid.getFirstVisiblePosition();
inflate=getViewForPosition(container,position)
View inflate = getViewForPosition(container, position);
id=item.getItemId()
int id = item.getItemId();
MyActivity activity = new MyActivity();
String manifestProperty = "../app/src/main/AndroidManifest.xml";
String resProperty = "../app/src/main/res";
cursor=resolver.query(uri,projection,selection,selectionArgs,null)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, null);
cursor=resolver.query(uri,projection,selection,selectionArgs,sortOrder)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, sortOrder);
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=richClass.setter(name)
Method setter = richClass.setter(name);
T obj;
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=methodsByName.get(name)
Method setter = methodsByName.get(name);
int type = TYPE_INT;
Class<?> t = setter.getParameterTypes()[0];
Class<?> t = setter.getParameterTypes()[0];
cursorType=cursor.getType(index)
final int cursorType = cursor.getType(index);
final Object obj;
s=f.getAnnotation(Mapper.class)
Mapper s = f.getAnnotation(Mapper.class);
mm=m.getAnnotation(Mapper.class)
Mapper mm = m.getAnnotation(Mapper.class);
methodName=StringUtil.asCamelifySetMethod(what)
String methodName = StringUtil.asCamelifySetMethod(what);
cursor=getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,null,null,null,null)
Cursor cursor = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
now=System.currentTimeMillis()
long now = System.currentTimeMillis();
List<Contact2> typedCursor = new CursorList<Contact2>(cursor, Contact2.class);
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[a-zA-Z0-9]+")
Pattern p = Pattern.compile("[a-zA-Z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[A-Z][a-z0-9]+")
Pattern p = Pattern.compile("[A-Z][a-z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
SurfaceView first = (SurfaceView) findViewById(R.id.firstSurface);
SurfaceView second = (SurfaceView) findViewById(R.id.secondSurface);
Intent pickVideo = new Intent(Intent.ACTION_PICK);
Bundle args = new Bundle();
enroll=mHotwordDetector.createEnrollIntent()
Intent enroll = mHotwordDetector.createEnrollIntent();

Diff of 46f721e4d3d549e0a3b622b0e598f8cf1c455502 and 5bcd750e8580deaa5c97989bda7521216707d8be:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 34
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 46f721e4d3d549e0a3b622b0e598f8cf1c455502 to 5bcd750e8580deaa5c97989bda7521216707d8be


****Parsing for addition at revision 5bcd750e8580deaa5c97989bda7521216707d8be****

Added ApplicationTest.java to .\/spikes\ repository source files.
Added DrawerActivity.java to .\/spikes\ repository source files.
Added EarthActivity.java to .\/spikes\ repository source files.
Added SaturnActivity.java to .\/spikes\ repository source files.
Added LocalPlayerActivity.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added CastApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ComposeSmsActivity.java to .\/spikes\ repository source files.
Added HeadlessSmsSendService.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MmsReceiver.java to .\/spikes\ repository source files.
Added SmsReceiver.java to .\/spikes\ repository source files.
Added ExtendedDemoActivity.java to .\/spikes\ repository source files.
Added ExtendedDemoApplication.java to .\/spikes\ repository source files.
Added SimpleDemoActivity.java to .\/spikes\ repository source files.
Added SimpleDemoApplication.java to .\/spikes\ repository source files.
Added Binder.java to .\/spikes\ repository source files.
Added ConnectedClient.java to .\/spikes\ repository source files.
Added Connection.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnection.java to .\/spikes\ repository source files.
Added ServiceConnectionCallback.java to .\/spikes\ repository source files.
Added EasyCustomTabs.java to .\/spikes\ repository source files.
Added ActionButtonComposer.java to .\/spikes\ repository source files.
Added CloseButtonIconComposer.java to .\/spikes\ repository source files.
Added Composer.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilder.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigator.java to .\/spikes\ repository source files.
Added EasyCustomTabsWebNavigator.java to .\/spikes\ repository source files.
Added ExitAnimationsComposer.java to .\/spikes\ repository source files.
Added IntentCustomizer.java to .\/spikes\ repository source files.
Added MenuItemComposer.java to .\/spikes\ repository source files.
Added NavigationFallback.java to .\/spikes\ repository source files.
Added Navigator.java to .\/spikes\ repository source files.
Added ShowTitleComposer.java to .\/spikes\ repository source files.
Added StartAnimationsComposer.java to .\/spikes\ repository source files.
Added ToolbarColorComposer.java to .\/spikes\ repository source files.
Added UrlBarHidingComposer.java to .\/spikes\ repository source files.
Added WebNavigator.java to .\/spikes\ repository source files.
Added AvailableAppProvider.java to .\/spikes\ repository source files.
Added BestPackageFinder.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProvider.java to .\/spikes\ repository source files.
Added BinderTest.java to .\/spikes\ repository source files.
Added ConnectedClientTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnectionTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigatorTest.java to .\/spikes\ repository source files.
Added BestPackageFinderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProviderTest.java to .\/spikes\ repository source files.
Added ApiPagedChannelHistory.java to .\/spikes\ repository source files.
Added ApiPagedResponse.java to .\/spikes\ repository source files.
Added ChannelHistory.java to .\/spikes\ repository source files.
Added HistoryConverter.java to .\/spikes\ repository source files.
Added Runner.java to .\/spikes\ repository source files.
Added SlackHistoryFetcher.java to .\/spikes\ repository source files.
Added SlackWebService.java to .\/spikes\ repository source files.
Added ApiPagedResponseTest.java to .\/spikes\ repository source files.
Added MainActivityTest.java to .\/spikes\ repository source files.
Added LoremAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added BetterAccountManager.java to .\/spikes\ repository source files.
Added BetterAuthenticator.java to .\/spikes\ repository source files.
Added BetterAuthenticatorActivity.java to .\/spikes\ repository source files.
Added GertHerbAuthenticator.java to .\/spikes\ repository source files.
Added GertHerbAuthenticatorService.java to .\/spikes\ repository source files.
Added NoAccountException.java to .\/spikes\ repository source files.
Added ReactiveAuthenticatorActivity.java to .\/spikes\ repository source files.
Added Token.java to .\/spikes\ repository source files.
Added GertHerbActivity.java to .\/spikes\ repository source files.
Added GertHerbApplication.java to .\/spikes\ repository source files.
Added GertHerbAuthenticationActivity.java to .\/spikes\ repository source files.
Added TypefaceFactory.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added ViewServer.java to .\/spikes\ repository source files.
Added ViewServerManager.java to .\/spikes\ repository source files.
Added DeveloperError.java to .\/spikes\ repository source files.
Added HomeActivity.java to .\/spikes\ repository source files.
Added LoginActivity.java to .\/spikes\ repository source files.
Added LoginView.java to .\/spikes\ repository source files.
Added UserCredentials.java to .\/spikes\ repository source files.
Added FontButton.java to .\/spikes\ repository source files.
Added FontEditText.java to .\/spikes\ repository source files.
Added FontTextView.java to .\/spikes\ repository source files.
Added GithubApi.java to .\/spikes\ repository source files.
Added GithubApiFactory.java to .\/spikes\ repository source files.
Added TokenRequest.java to .\/spikes\ repository source files.
Added TokenResponse.java to .\/spikes\ repository source files.
Added Dummy.java to .\/spikes\ repository source files.
Added DummyTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MainFragment.java to .\/spikes\ repository source files.
Added Attributes.java to .\/spikes\ repository source files.
Added Coordinates.java to .\/spikes\ repository source files.
Added IndicatorCoordinatesCalculator.java to .\/spikes\ repository source files.
Added LandingStrip.java to .\/spikes\ repository source files.
Added MutableCoordinates.java to .\/spikes\ repository source files.
Added OnPagerAdapterChangedListener.java to .\/spikes\ repository source files.
Added PagerAdapterObserver.java to .\/spikes\ repository source files.
Added Scrollable.java to .\/spikes\ repository source files.
Added ScrollingPageChangeListener.java to .\/spikes\ repository source files.
Added State.java to .\/spikes\ repository source files.
Added TabsContainer.java to .\/spikes\ repository source files.
Added CustomLandingStrip.java to .\/spikes\ repository source files.
Added CustomTabActivity.java to .\/spikes\ repository source files.
Added ExampleRainbowLandingStrip.java to .\/spikes\ repository source files.
Added FixedWidthTabActivity.java to .\/spikes\ repository source files.
Added NoFragmentsSimpleTextTabActivity.java to .\/spikes\ repository source files.
Added Data.java to .\/spikes\ repository source files.
Added DemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added SmallDemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerFragment.java to .\/spikes\ repository source files.
Added DemoViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapterState.java to .\/spikes\ repository source files.
Added SimpleTextTabActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AbTestingParamsLoadedCallback.java to .\/spikes\ repository source files.
Added AyBe.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added WeakStartCallback.java to .\/spikes\ repository source files.
Added LeakActivity.java to .\/spikes\ repository source files.
Added NoLeakActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added ColorScheme.java to .\/spikes\ repository source files.
Added ColorUtils.java to .\/spikes\ repository source files.
Added DominantColorCalculator.java to .\/spikes\ repository source files.
Added FloatUtils.java to .\/spikes\ repository source files.
Added MedianCutQuantizer.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added PayPalFragment.java to .\/spikes\ repository source files.
Added PayPalHelper.java to .\/spikes\ repository source files.
Added MaxLengthMessageComposer.java to .\/spikes\ repository source files.
Added MessageComposer.java to .\/spikes\ repository source files.
Added TwitterMessageComposer.java to .\/spikes\ repository source files.
Added DisabledMruPersister.java to .\/spikes\ repository source files.
Added MruPersister.java to .\/spikes\ repository source files.
Added SharedPreferencesMruPersister.java to .\/spikes\ repository source files.
Added OnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added PriorityShareDialog.java to .\/spikes\ repository source files.
Added PrioritySharer.java to .\/spikes\ repository source files.
Added ShareTargetsAdapter.java to .\/spikes\ repository source files.
Added SimpleOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added TargetApps.java to .\/spikes\ repository source files.
Added TwitterOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AdvancedActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SimpleActivity.java to .\/spikes\ repository source files.
Added LockingActivity.java to .\/spikes\ repository source files.
Added PostLockingActivity.java to .\/spikes\ repository source files.
Added PreLockingActivity.java to .\/spikes\ repository source files.
Added DummyAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added NovoStaggeredGridView.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SpikeApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SwipeableView.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MyClass.java to .\/spikes\ repository source files.
Added MyClassTest.java to .\/spikes\ repository source files.
Added MyAndroidClassTest.java to .\/spikes\ repository source files.
Added RobolectricGradleTestRunner.java to .\/spikes\ repository source files.
Added Mapper.java to .\/spikes\ repository source files.
Added Query.java to .\/spikes\ repository source files.
Added TypedResolver.java to .\/spikes\ repository source files.
Added CursorList.java to .\/spikes\ repository source files.
Added CursorListIterator.java to .\/spikes\ repository source files.
Added CursorMarshaller.java to .\/spikes\ repository source files.
Added EmptyListIterator.java to .\/spikes\ repository source files.
Added ReflectionCursorMarshaller.java to .\/spikes\ repository source files.
Added RichClass.java to .\/spikes\ repository source files.
Added Setter.java to .\/spikes\ repository source files.
Added Function.java to .\/spikes\ repository source files.
Added TypedElementLoader.java to .\/spikes\ repository source files.
Added TypedLoader.java to .\/spikes\ repository source files.
Added Marshaller.java to .\/spikes\ repository source files.
Added ObjectMapper.java to .\/spikes\ repository source files.
Added TypedActivity.java to .\/spikes\ repository source files.
Added StringUtil.java to .\/spikes\ repository source files.
Added MyObject.java to .\/spikes\ repository source files.
Added MediaPlayerSwitcherActivity.java to .\/spikes\ repository source files.
Added VideoPlayerService.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added RecognitionService.java to .\/spikes\ repository source files.
Added SessionService.java to .\/spikes\ repository source files.
Added SettingsActivity.java to .\/spikes\ repository source files.
Added SmartContextInteractionService.java to .\/spikes\ repository source files.
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
String[] planetTitles = new String[]{"Earth", "Saturn"};
DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
ListView drawerList = (ListView) findViewById(R.id.left_drawer);
Intent intent;
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close);
b=getIntent().getExtras()
Bundle b = getIntent().getExtras();
mShouldStartPlayback=b.getBoolean("shouldStart")
boolean mShouldStartPlayback = b.getBoolean("shouldStart");
startPosition=b.getInt("startPosition",0)
int startPosition = b.getInt("startPosition", 0);
currentPos=mVideoView.getCurrentPosition()
int currentPos = mVideoView.getCurrentPosition();
String msg;
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, mDisplaySize.y + getActionBar().getHeight());
mm=mSelectedMedia.getMetadata()
MediaMetadata mm = mSelectedMedia.getMetadata();
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, (int) (mDisplaySize.x * ASPECT_RATIO));
WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
width=display.getWidth()
int width = display.getWidth();
height=display.getHeight()
int height = display.getHeight();
int resourceId = 0;
String videoUrl = "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4#sthash.rJ5rPZy8.dpuf";
String title = "Jahre Philharmonie";
String description = "Awesome film you must watch!";
String author = "Blundell";
String thumbUrl = "http://www.ustream.tv/blog/wp-content/uploads/2013/10/simply-go-live.png";
MediaMetadata metadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE);
mediaInfo=new MediaInfo.Builder(videoUrl).setMetadata(metadata).setStreamType(MediaInfo.STREAM_TYPE_BUFFERED).setContentType("video/mp4").build()
MediaInfo mediaInfo = new MediaInfo.Builder(videoUrl)
                        .setMetadata(metadata)
                        .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)
                        .setContentType("video/mp4")
                        .build();
Intent intent = new Intent(MainActivity.this, LocalPlayerActivity.class);
preferences=getPreferences(MODE_PRIVATE)
SharedPreferences preferences = getPreferences(MODE_PRIVATE);
defaultSmsPackage=Telephony.Sms.getDefaultSmsPackage(this)
String defaultSmsPackage = Telephony.Sms.getDefaultSmsPackage(this);
Intent intent = new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
availableAppProvider=EasyCustomTabs.getInstance()
AvailableAppProvider availableAppProvider = EasyCustomTabs.getInstance();
ConnectedClient connectedClient = new ConnectedClient(client);
binder=Binder.newInstance()
Binder binder = Binder.newInstance();
List<Composer> composerList = new ArrayList<>();
customTabsSession=connection.newSession()
CustomTabsSession customTabsSession = connection.newSession();
CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(customTabsSession);
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
context=EasyCustomTabs.getInstance().getContext()
Context context = EasyCustomTabs.getInstance().getContext();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
packagesSupportingCustomTabs=getPackagesSupportingCustomTabs()
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
defaultPackage=getDefaultPackage()
String defaultPackage = getDefaultPackage();
defaultActivityInfo=packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK,0)
ResolveInfo defaultActivityInfo = packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK, 0);
String packageName = defaultActivityInfo.activityInfo.packageName;
resolvedInfoList=packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK,0)
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<String> packagesSupportingCustomTabs = new ArrayList<>();
Intent serviceIntent = new Intent();
bestPackageFinder=BestPackageFinder.newInstance()
BestPackageFinder bestPackageFinder = BestPackageFinder.newInstance();
packageName=bestPackageFinder.findBestPackage()
String packageName = bestPackageFinder.findBestPackage();
resolveInfo=createResolveInfoFor(packageName)
ResolveInfo resolveInfo = createResolveInfoFor(packageName);
ResolveInfo resolveInfo = new ResolveInfo();
List<ResolveInfo> resolveInfoList = new ArrayList<>();
defaultPackageResolveInfo=createResolveInfoFor(packageName)
ResolveInfo defaultPackageResolveInfo = createResolveInfoFor(packageName);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
oldestApiMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage oldestApiMessage = apiMessages.get(apiMessages.size() - 1);
String lastResponseEpochTime = oldestApiMessage.timeStamp;
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
latestMessage=latestMessages.get(latestMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage latestMessage = latestMessages.get(latestMessages.size() - 1);
latestMessageDateTime=convertToLocalDateTime(latestMessage.timeStamp)
LocalDateTime latestMessageDateTime = convertToLocalDateTime(latestMessage.timeStamp);
List<ChannelHistory.Message> messages = new ArrayList<>();
historyFrom=getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1))
LocalDateTime historyFrom = getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1));
historyTo=getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0))
LocalDateTime historyTo = getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0));
String text = apiMessage.text;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
lastMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage lastMessage = apiMessages.get(apiMessages.size() - 1);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
firstMessage=apiMessages.get(0)
ApiPagedChannelHistory.ApiMessage firstMessage = apiMessages.get(0);
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
String slackToken = args[0];
retrofit=new Retrofit.Builder().baseUrl("https://slack.com/api/").addConverterFactory(GsonConverterFactory.create()).build()
Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://slack.com/api/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();
slackWebService=retrofit.create(SlackWebService.class)
SlackWebService slackWebService = retrofit.create(SlackWebService.class);
slackHistoryFetcher=SlackHistoryFetcher.from(slackWebService,slackToken)
SlackHistoryFetcher slackHistoryFetcher = SlackHistoryFetcher.from(slackWebService, slackToken);
start=LocalDateTime.now()
LocalDateTime start = LocalDateTime.now();
end=LocalDateTime.now().minusDays(7)
LocalDateTime end = LocalDateTime.now().minusDays(7);
channelHistory=slackHistoryFetcher.getChannelHistory(start,end)
ChannelHistory channelHistory = slackHistoryFetcher.getChannelHistory(start, end);
HistoryConverter historyConverter = new HistoryConverter();
ApiPagedResponse apiPagedResponse = new ApiPagedResponse(start);
response=fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime())
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
apiPagedChannelHistory=response.body()
ApiPagedChannelHistory apiPagedChannelHistory = response.body();
channelHistory=slackWebService.getChannelHistory(slackToken,channel,lastResponseEpochTime,NUMBER_OF_RESULTS)
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
ApiPagedChannelHistory apiPagedChannelHistory = new ApiPagedChannelHistory();
ApiPagedChannelHistory.ApiMessage apiMessage = new ApiPagedChannelHistory.ApiMessage();
final TextView textView = new TextView(context);
emptyView=findViewById(R.id.empty_view)
View emptyView = findViewById(R.id.empty_view);
final Integer action = values[0];
LoremAdapter loremAdapter = new LoremAdapter();
accounts=accountManager.getAccountsByType(accountType)
Account[] accounts = accountManager.getAccountsByType(accountType);
Bundle result;
Bundle result;
Bundle result = new Bundle();
activity=createLoginIntent(context,accountType,authTokenType,requiredFeatures,options)
Intent activity = createLoginIntent(context, accountType, authTokenType, requiredFeatures, options);
Bundle bundle = new Bundle();
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
accounts=accountManager.getAccountsByType(authTokenType)
Account[] accounts = accountManager.getAccountsByType(authTokenType);
bundle=createResponseBundle(token)
Bundle bundle = createResponseBundle(token);
accountManager=AccountManager.get(this.getApplicationContext())
AccountManager accountManager = AccountManager.get(this.getApplicationContext());
Account account = new Account(token.getUserName(), getAccountName());
Bundle bundle = new Bundle();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
GertHerbAuthenticator authenticator = new GertHerbAuthenticator(this);
fontId=getFontId(context,attrs)
int fontId = getFontId(context, attrs);
fontType=getFontType(fontId)
FontType fontType = getFontType(fontId);
typedArray=context.obtainStyledAttributes(attrs,R.styleable.CustomTextAppearance)
TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CustomTextAppearance);
typeface=createTypeFace(context,fontType)
Typeface typeface = createTypeFace(context, fontType);
info=context.getApplicationInfo()
ApplicationInfo info = context.getApplicationInfo();
name=activity.getTitle().toString()
String name = activity.getTitle().toString();
client=mServer.accept()
Socket client = mServer.accept();
boolean result;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
BufferedReader in = null;
request=in.readLine()
final String request = in.readLine();
String command;
String parameters;
index=request.indexOf(' ')
int index = request.indexOf(' ');
boolean result;
boolean success = true;
BufferedWriter out = null;
index=parameters.indexOf(' ')
int index = parameters.indexOf(' ');
code=parameters.substring(0,index)
final String code = parameters.substring(0, index);
int hashCode = (int) Long.parseLong(code, 16);
window=findWindow(hashCode)
final View window = findWindow(hashCode);
dispatch=ViewDebug.class.getDeclaredMethod("dispatchCommand",View.class,String.class,String.class,OutputStream.class)
final Method dispatch = ViewDebug.class.getDeclaredMethod("dispatchCommand",
                        View.class, String.class, String.class, OutputStream.class);
View window = null;
boolean result = true;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
boolean result = true;
String focusName = null;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
View focusedWindow = null;
BufferedWriter out = null;
boolean needWindowListUpdate = false;
boolean needFocusedWindowUpdate = false;
BetterAccountManager accountManager = new BetterAccountManager(this, getString(R.string.account_type), getString(R.string.token_type), null);
loginView=Views.findById(this,R.id.login_view)
LoginView loginView = Views.findById(this, R.id.login_view);
authorizationApi=new GithubApiFactory().createAuthorizationApi(credentials.username,credentials.password)
GithubApi authorizationApi = new GithubApiFactory().createAuthorizationApi(credentials.username, credentials.password);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
Endpoint endpoint = new Endpoint() {
            @Override
            public String getUrl() {
                return GITHUB_API_URL;
            }

            @Override
            public String getName() {
                return "Live";
            }
        };
interceptor=createAuthorizationRequestInterceptor(username,password)
RequestInterceptor interceptor = createAuthorizationRequestInterceptor(username, password);
restAdapter=createRestAdapter(endpoint,interceptor)
RestAdapter restAdapter = createRestAdapter(endpoint, interceptor);
Dummy dummy = new Dummy();
result=dummy.explodes()
boolean result = dummy.explodes();
String base64EncodedPublicKey = "CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE";
premiumPurchase=inventory.getPurchase(SKU_PREMIUM)
Purchase premiumPurchase = inventory.getPurchase(SKU_PREMIUM);
infiniteGasPurchase=inventory.getPurchase(SKU_INFINITE_GAS)
Purchase infiniteGasPurchase = inventory.getPurchase(SKU_INFINITE_GAS);
gasPurchase=inventory.getPurchase(SKU_GAS)
Purchase gasPurchase = inventory.getPurchase(SKU_GAS);
String payload = "";
String payload = "";
String payload = "";
payload=p.getDeveloperPayload()
String payload = p.getDeveloperPayload();
int index = mTank >= TANK_RES_IDS.length ? TANK_RES_IDS.length - 1 : mTank;
AlertDialog.Builder bld = new AlertDialog.Builder(this);
spe=getPreferences(MODE_PRIVATE).edit()
SharedPreferences.Editor spe = getPreferences(MODE_PRIVATE).edit();
sp=getPreferences(MODE_PRIVATE)
SharedPreferences sp = getPreferences(MODE_PRIVATE);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                                  + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                    | ((source[d + 1 + off] << 24) >>> 16)
                    | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                    | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                                   "-1002:Bad response received/" +
                                   "-1003:Purchase signature verification failed/" +
                                   "-1004:Send intent failed/" +
                                   "-1005:User cancelled/" +
                                   "-1006:Unknown purchase response/" +
                                   "-1007:Missing token/" +
                                   "-1008:Unknown error/" +
                                   "-1009:Subscriptions not available/" +
                                   "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(),
                    itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                        | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                        | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                            | ((source[d + 1 + off] << 24) >>> 16)
                            | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                            | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                "-1002:Bad response received/" +
                "-1003:Purchase signature verification failed/" +
                "-1004:Send intent failed/" +
                "-1005:User cancelled/" +
                "-1006:Unknown purchase response/" +
                "-1007:Missing token/" +
                "-1008:Unknown error/" +
                "-1009:Subscriptions not available/" +
                "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(), itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
responseCode=result.getResponse()
int responseCode = result.getResponse();
sku=purchase.getSku()
String sku = purchase.getSku();
skuDetails=inv.getSkuDetails(sku)
SkuDetails skuDetails = inv.getSkuDetails(sku);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
Button purchaseFiveButton = (Button) rootView.findViewById(R.id.fragment_main_button_purchase_five_coins);
xml=context.obtainStyledAttributes(attrs,R.styleable.LandingStrip)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.LandingStrip);
tabLayoutId=xml.getResourceId(R.styleable.LandingStrip_tabLayoutId,MISSING_TAB_LAYOUT_ID)
int tabLayoutId = xml.getResourceId(R.styleable.LandingStrip_tabLayoutId, MISSING_TAB_LAYOUT_ID);
indicatorColour=xml.getResourceId(R.styleable.LandingStrip_indicatorColor,DEFAULT_INDICATOR_COLOUR)
int indicatorColour = xml.getResourceId(R.styleable.LandingStrip_indicatorColor, DEFAULT_INDICATOR_COLOUR);
indicatorHeight=getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight,DEFAULT_INDICATOR_HEIGHT,xml)
int indicatorHeight = getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight, DEFAULT_INDICATOR_HEIGHT, xml);
tabsPaddingLeft=getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingLeft = getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding, DEFAULT_TABS_PADDING, xml);
tabsPaddingRight=getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingRight = getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding, DEFAULT_TABS_PADDING, xml);
MutableCoordinates drawCurrentTabCoordinates = new MutableCoordinates();
MutableCoordinates drawNextTabCoordinates = new MutableCoordinates();
MutableCoordinates drawMovingIndicatorCoordinates = new MutableCoordinates();
currentTab=tabsContainer.getTabAt(currentPosition)
View currentTab = tabsContainer.getTabAt(currentPosition);
currentTabStart=currentTab.getLeft()
float currentTabStart = currentTab.getLeft();
currentTabEnd=currentTab.getRight()
float currentTabEnd = currentTab.getRight();
nextTab=tabsContainer.getTabAt(currentPosition + 1)
View nextTab = tabsContainer.getTabAt(currentPosition + 1);
nextTabPositionOffset=getFractionFrom(pagePositionOffset)
float nextTabPositionOffset = getFractionFrom(pagePositionOffset);
indicatorStart=getIndicatorPosition(nextTab.getStart(),pagePositionOffset,currentTab.getStart(),nextTabPositionOffset)
float indicatorStart = getIndicatorPosition(nextTab.getStart(), pagePositionOffset, currentTab.getStart(), nextTabPositionOffset);
indicatorEnd=getIndicatorPosition(nextTab.getEnd(),pagePositionOffset,currentTab.getEnd(),nextTabPositionOffset)
float indicatorEnd = getIndicatorPosition(nextTab.getEnd(), pagePositionOffset, currentTab.getEnd(), nextTabPositionOffset);
height=getHeight()
int height = getHeight();
tabCount=pagerAdapter.getCount()
int tabCount = pagerAdapter.getCount();
title=pagerAdapter.getPageTitle(position)
CharSequence title = pagerAdapter.getPageTitle(position);
inflatedTabView=tabsContainer.inflateTab(layoutInflater,attributes.getTabLayoutId())
View inflatedTabView = tabsContainer.inflateTab(layoutInflater, attributes.getTabLayoutId());
int position = (int) view.getTag(TAG_KEY_POSITION);
scrollOffset=getHorizontalScrollOffset(position,positionOffset)
int scrollOffset = getHorizontalScrollOffset(position, positionOffset);
newScrollX=calculateScrollOffset(position,scrollOffset,positionOffset)
float newScrollX = calculateScrollOffset(position, scrollOffset, positionOffset);
tabWidth=tabsContainer.getTabAt(position).getWidth()
int tabWidth = tabsContainer.getTabAt(position).getWidth();
tabForPosition=tabsContainer.getTabAt(position)
View tabForPosition = tabsContainer.getTabAt(position);
float tabStartX = tabForPosition.getLeft() + scrollOffset;
int viewMiddleOffset = getTabParentWidth() / 2;
float tabCenterOffset = (tabForPosition.getRight() - tabForPosition.getLeft()) * 0.5F;
nextTabDelta=getNextTabDelta(position,pagerOffset,tabForPosition)
float nextTabDelta = getNextTabDelta(position, pagerOffset, tabForPosition);
LinearLayout tabsContainerView = new LinearLayout(context);
tab=getTabAt(index)
View tab = getTabAt(index);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
position=indicatorCoordinates.getStart()
float position = indicatorCoordinates.getStart();
lastTabOffset=((ViewGroup)getChildAt(0)).getChildAt(getChildCount() - 1).getWidth()
float lastTabOffset = ((ViewGroup) getChildAt(0)).getChildAt(getChildCount() - 1).getWidth();
frequency=getOneCycle(lastTabOffset)
float frequency = getOneCycle(lastTabOffset);
r=toHex(calculateColour(position,frequency,PHASE_RED,AMPLITUDE,CENTER_FREQUENCY))
String r = toHex(calculateColour(position, frequency, PHASE_RED, AMPLITUDE, CENTER_FREQUENCY));
g=toHex(calculateColour(position,frequency,PHASE_GREEN,AMPLITUDE,CENTER_FREQUENCY))
String g = toHex(calculateColour(position, frequency, PHASE_GREEN, AMPLITUDE, CENTER_FREQUENCY));
b=toHex(calculateColour(position,frequency,PHASE_BLUE,AMPLITUDE,CENTER_FREQUENCY))
String b = toHex(calculateColour(position, frequency, PHASE_BLUE, AMPLITUDE, CENTER_FREQUENCY));
height=getHeight()
int height = getHeight();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPagerFragment viewPagerFragment = new ViewPagerFragment();
Bundle bundle = new Bundle();
TextView view = (TextView) layoutInflater.inflate(R.layout.view_demo, container, false);
currentPosition=viewPagerAdapterState.getCurrentPosition()
int currentPosition = viewPagerAdapterState.getCurrentPosition();
view=getView(container,position)
View view = getView(container, position);
parcelableSparseArray=viewPagerAdapterState.get(position)
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
View view = (View) object;
SparseArray<Parcelable> viewState = new SparseArray<>();
position=entry.getValue()
int position = entry.getValue();
view=entry.getKey()
View view = entry.getKey();
bundle=in.readBundle()
Bundle bundle = in.readBundle();
Map<Integer, SparseArray<Parcelable>> viewStates = new HashMap<>(bundle.keySet().size());
sparseParcelableArray=bundle.getSparseParcelableArray(key)
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
primaryItemPosition=in.readInt()
int primaryItemPosition = in.readInt();
Bundle bundle = new Bundle();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
final TextView abText = (TextView) findViewById(R.id.ab_text);
final AyBe ayBe = new AyBe();
id=item.getItemId()
int id = item.getItemId();
callback=weakCallback.get()
AbTestingParamsLoadedCallback callback = weakCallback.get();
WeakReference<NoLeakActivity> weakNoLeakActivity = new WeakReference<NoLeakActivity>(noLeakActivity);
noLeakActivity=weakNoLeakActivity.get()
NoLeakActivity noLeakActivity = weakNoLeakActivity.get();
final float inverseRatio = 1f - ratio;
float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRatio);
float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRatio);
float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRatio);
hsv=node.getHsv()
float[] hsv = node.getHsv();
width=bitmap.getWidth()
final int width = bitmap.getWidth();
height=bitmap.getHeight()
final int height = bitmap.getHeight();
final int[] rgbPixels = new int[width * height];
final MedianCutQuantizer mcq = new MedianCutQuantizer(rgbPixels, NUM_COLORS);
primaryAccentColor=findPrimaryAccentColor()
final ColorNode primaryAccentColor = findPrimaryAccentColor();
secondaryAccentColor=findSecondaryAccentColor(primaryAccentColor)
final ColorNode secondaryAccentColor = findSecondaryAccentColor(primaryAccentColor);
tertiaryAccentColor=findTertiaryAccentColor(primaryAccentColor,secondaryAccentColor)
final int tertiaryAccentColor = findTertiaryAccentColor(
                primaryAccentColor, secondaryAccentColor);
primaryTextColor=findPrimaryTextColor(primaryAccentColor)
final int primaryTextColor = findPrimaryTextColor(primaryAccentColor);
secondaryTextColor=findSecondaryTextColor(primaryAccentColor)
final int secondaryTextColor = findSecondaryTextColor(primaryAccentColor);
final float primaryHue = primary.getHsv()[0];
final float candidateHue = candidate.getHsv()[0];
copy=Arrays.copyOf(palette,palette.length)
final MedianCutQuantizer.ColorNode[] copy = Arrays.copyOf(palette, palette.length);
maxCount=palette[0].getCount()
final float maxCount = palette[0].getCount();
lhsWeight=calculateWeight(lhs,maxCount)
final float lhsWeight = calculateWeight(lhs, maxCount);
rhsWeight=calculateWeight(rhs,maxCount)
final float rhsWeight = calculateWeight(rhs, maxCount);
float sum = 0;
float sumWeight = 0;
float value = values[i];
float weight = values[i + 1];
ColorHistogram colorHist = new ColorHistogram(pixels);
K=colorHist.getNumberOfColors()
int K = colorHist.getNumberOfColors();
ColorNode[] rCols = null;
rgb=colorHist.getColor(i)
int rgb = colorHist.getColor(i);
cnt=colorHist.getCount(i)
int cnt = colorHist.getCount(i);
ColorBox initialBox = new ColorBox(0, K - 1, 0);
List<ColorBox> colorSet = new ArrayList<ColorBox>();
int k = 1;
boolean done = false;
nextBox=findBoxToSplit(colorSet)
ColorBox nextBox = findBoxToSplit(colorSet);
newBox=nextBox.splitBox()
ColorBox newBox = nextBox.splitBox();
color=findClosestColor(pixels[i])
ColorNode color = findClosestColor(pixels[i]);
idx=findClosestColorIndex(rgb)
int idx = findClosestColorIndex(rgb);
red=Color.red(rgb)
int red = Color.red(rgb);
grn=Color.green(rgb)
int grn = Color.green(rgb);
blu=Color.blue(rgb)
int blu = Color.blue(rgb);
int minIdx = 0;
int minDistance = Integer.MAX_VALUE;
ColorNode color = quantColors[i];
d2=color.distance2(red,grn,blu)
int d2 = color.distance2(red, grn, blu);
ColorBox boxToSplit = null;
int minLevel = Integer.MAX_VALUE;
n=colorBoxes.size()
int n = colorBoxes.size();
ColorNode[] avgColors = new ColorNode[n];
int i = 0;
int dr = this.red - red;
int dg = this.grn - grn;
int db = this.blu - blu;
ColorNode color = imageColors[i];
int r = color.red;
int g = color.grn;
int b = color.blu;
dim=getLongestColorDimension()
ColorDimension dim = getLongestColorDimension();
med=findMedian(dim)
int med = findMedian(dim);
int nextLevel = level + 1;
ColorBox newBox = new ColorBox(med + 1, upper, nextLevel);
int rLength = rmax - rmin;
int gLength = gmax - gmin;
int bLength = bmax - bmin;
int half = count / 2;
int nPixels, median;
int rSum = 0;
int gSum = 0;
int bSum = 0;
int n = 0;
ColorNode ci = imageColors[i];
int cnt = ci.cnt;
double nd = n;
int avgRed = (int) (0.5 + rSum / nd);
int avgGrn = (int) (0.5 + gSum / nd);
int avgBlu = (int) (0.5 + bSum / nd);
s=this.getClass().getSimpleName()
String s = this.getClass().getSimpleName();
int i = 0;
int N = pixelsOrig.length;
int[] pixelsCpy = new int[N];
int k = -1;
int curColor = -1;
int nColors = k + 1;
id=item.getItemId()
int id = item.getItemId();
Intent intent = new Intent();
bitmap=((BitmapDrawable)imageView.getDrawable()).getBitmap()
Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap();
DominantColorCalculator dominantColorCalculator = new DominantColorCalculator(bitmap);
selectedImageUri=data.getData()
Uri selectedImageUri = data.getData();
selectedImagePath=getPath(selectedImageUri)
String selectedImagePath = getPath(selectedImageUri);
String[] projection = {MediaStore.Images.Media.DATA};
cursor=managedQuery(uri,projection,null,null,null)
Cursor cursor = managedQuery(uri, projection, null, null, null);
column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)
int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
LinearLayout rootView = (LinearLayout) inflater.inflate(R.layout.fragment_main, container, false);
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
preapprovalButton=payPal.getCheckoutButton(getActivity(),PayPal.BUTTON_194x37,CheckoutButton.TEXT_PAY)
CheckoutButton preapprovalButton = payPal.getCheckoutButton(getActivity(), PayPal.BUTTON_194x37, CheckoutButton.TEXT_PAY);
preapprovalIntent=payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY)
Intent preapprovalIntent = payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY);
String resultTitle = "";
String resultInfo = "";
String resultExtra = "";
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
PayPalPreapproval preapproval = new PayPalPreapproval();
preapproval=createPreapproval(preapprovalKey)
PayPalPreapproval preapproval = createPreapproval(preapprovalKey);
Bundle bundle = new Bundle();
int availableLength = maxLength;
StringBuilder stringBuilder = new StringBuilder(maxLength);
prefixAndSuffixLength=computeAppendedLengthIncludingSeparatorSpaces(prefix,suffix)
int prefixAndSuffixLength = computeAppendedLengthIncludingSeparatorSpaces(prefix, suffix);
urlLength=computeUrlLengthIncludingSeparatorSpace(url)
int urlLength = computeUrlLengthIncludingSeparatorSpace(url);
trimmedSubject=ellipsizeTextIfExceedsMaxLength(subject,availableLength)
String trimmedSubject = ellipsizeTextIfExceedsMaxLength(subject, availableLength);
int length = 0;
preferences=context.getSharedPreferences(MRU_PREFERENCES,Context.MODE_PRIVATE)
SharedPreferences preferences = context.getSharedPreferences(MRU_PREFERENCES, Context.MODE_PRIVATE);
args=getArguments()
Bundle args = getArguments();
themeResId=getThemeResIdIfProvidedIn(args)
int themeResId = getThemeResIdIfProvidedIn(args);
title=getTitleIfProvidedIn(args)
CharSequence title = getTitleIfProvidedIn(args);
builder=createDialogBuilder(themeResId).setCancelable(true).setView(dialogView)
AlertDialog.Builder builder = createDialogBuilder(themeResId)
                .setCancelable(true)
                .setView(dialogView);
inflater=getActivity().getLayoutInflater()
LayoutInflater inflater = getActivity().getLayoutInflater();
GridView gridView = (GridView) rootView.findViewById(R.id.ps__dialog_grid);
targetApps=extractTargetAppsFrom(args)
TargetApps targetApps = extractTargetAppsFrom(args);
allShareTargets=getAvailableShareTargets(sharingIntent)
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
priorityAppInfos=createPriorityResolveInfoList(targetApps,allShareTargets)
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
otherAppInfos=createOtherAppsResolveInfoList(priorityAppInfos,allShareTargets)
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
resolveInfos=targetApps.extractTargetResolveInfosFrom(allShareTargets)
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
mruResolveInfo=findMruResolveInfoIn(allShareTargets)
ResolveInfo mruResolveInfo = findMruResolveInfoIn(allShareTargets);
List<ResolveInfo> otherAppsInfos = new ArrayList<ResolveInfo>(allAppInfos);
mruPackageName=persister.getLastUsedTarget()
String mruPackageName = persister.getLastUsedTarget();
String packageName = resolveInfo.activityInfo.packageName;
packageManager=getActivity().getPackageManager()
PackageManager packageManager = getActivity().getPackageManager();
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
View buttonStrip = (View) showMoreButton.getParent();
gridView=getGridView()
GridView gridView = getGridView();
intent=wrapIntentWithExplicitTargetComponentForItem(position,sharingIntent)
Intent intent = wrapIntentWithExplicitTargetComponentForItem(position, sharingIntent);
Intent intent = new Intent(sharingIntent);
ActivityInfo activity = adapter.getItem(position).activityInfo;
ComponentName name = new ComponentName(activity.applicationInfo.packageName, activity.name);
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
PriorityShareDialog dialog = new PriorityShareDialog();
Bundle args = new Bundle();
sharingIntent=createSharingIntent()
Intent sharingIntent = createSharingIntent();
fragmentManager=activity.getFragmentManager()
FragmentManager fragmentManager = activity.getFragmentManager();
Intent intent = new Intent(Intent.ACTION_SEND);
dialog=new PriorityShareDialog.Builder().setTitle(title).setTargetApps(targetApps).setSharingIntent(sharingIntent).setOnPrepareSharingIntentListener(listener).setShowMostRecentlyUsed(showMostRecentlyUsed).build()
PriorityShareDialog dialog = new PriorityShareDialog.Builder()
                .setTitle(title)
                .setTargetApps(targetApps)
                .setSharingIntent(sharingIntent)
                .setOnPrepareSharingIntentListener(listener)
                .setShowMostRecentlyUsed(showMostRecentlyUsed)
                .build();
PrioritySharer prioritySharer = new PrioritySharer();
prioritySharer=build()
PrioritySharer prioritySharer = build();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
layoutInflater=LayoutInflater.from(context)
LayoutInflater layoutInflater = LayoutInflater.from(context);
iconSizePx=getIconSizePx(context.getResources())
int iconSizePx = getIconSizePx(context.getResources());
ArrayList<ResolveInfo> sortedList = new ArrayList<ResolveInfo>(resolveInfoList);
int otherAppsCountMaybe = showAllApps ? otherAppInfos.size() : 0;
firstOtherAppsItemPosition=priorityAppInfos.size()
int firstOtherAppsItemPosition = priorityAppInfos.size();
int offsetPosition = position - firstOtherAppsItemPosition;
TextView textView;
textView=initializeItemViewIfNecessary(convertView,R.layout.ps__grid_item_share,parent)
TextView textView = initializeItemViewIfNecessary(convertView, R.layout.ps__grid_item_share, parent);
info=getItem(position)
ResolveInfo info = getItem(position);
icon=info.loadIcon(packageManager)
Drawable icon = info.loadIcon(packageManager);
arraySize=in.readInt()
int arraySize = in.readInt();
String[] packageNames = new String[arraySize];
arraySize=targetPackages.size()
int arraySize = targetPackages.size();
String[] packagesArray = new String[arraySize];
SparseArray<ResolveInfo> matchedResolveInfos = new SparseArray<ResolveInfo>(targetPackages.size());
String packageName = info.activityInfo.packageName;
index=indexOfItemInto(packageName,targetPackages)
int index = indexOfItemInto(packageName, targetPackages);
sparseArraySize=sparseArray.size()
int sparseArraySize = sparseArray.size();
ArrayList<T> list = new ArrayList<T>(sparseArraySize);
int i = 0;
originalSubject=intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT)
CharSequence originalSubject = intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT);
String subject = originalSubject != null ? originalSubject.toString() : null;
composer=createComposer()
MessageComposer composer = createComposer();
component=intent.getComponent()
ComponentName component = intent.getComponent();
targetPackageName=component.getPackageName()
String targetPackageName = component.getPackageName();
adapter=ArrayAdapter.createFromResource(this,R.array.target_apps,android.R.layout.simple_spinner_item)
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
EditText text = (EditText) findViewById(R.id.text);
EditText title = (EditText) findViewById(R.id.title);
EditText mimeType = (EditText) findViewById(R.id.mime_type);
EditText dataUri = (EditText) findViewById(R.id.data_uri);
Switch showMostRecentlyUsed = (Switch) findViewById(R.id.show_most_recently_used);
uriString=dataUri.getText().toString()
String uriString = dataUri.getText().toString();
EditText text = (EditText) findViewById(R.id.text);
TextView textView = (TextView) convertView.findViewById(R.id.positionView);
colorView=convertView.findViewById(R.id.colorView)
View colorView = convertView.findViewById(R.id.colorView);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
offset=headerPlaceholder.getTop()
int offset = headerPlaceholder.getTop();
Integer item = COLORS[position];
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
firstVisiblePosition=grid.getFirstVisiblePosition()
int firstVisiblePosition = grid.getFirstVisiblePosition();
inflate=getViewForPosition(container,position)
View inflate = getViewForPosition(container, position);
id=item.getItemId()
int id = item.getItemId();
MyActivity activity = new MyActivity();
String manifestProperty = "../app/src/main/AndroidManifest.xml";
String resProperty = "../app/src/main/res";
cursor=resolver.query(uri,projection,selection,selectionArgs,null)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, null);
cursor=resolver.query(uri,projection,selection,selectionArgs,sortOrder)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, sortOrder);
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=richClass.setter(name)
Method setter = richClass.setter(name);
T obj;
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=methodsByName.get(name)
Method setter = methodsByName.get(name);
int type = TYPE_INT;
Class<?> t = setter.getParameterTypes()[0];
Class<?> t = setter.getParameterTypes()[0];
cursorType=cursor.getType(index)
final int cursorType = cursor.getType(index);
final Object obj;
s=f.getAnnotation(Mapper.class)
Mapper s = f.getAnnotation(Mapper.class);
mm=m.getAnnotation(Mapper.class)
Mapper mm = m.getAnnotation(Mapper.class);
methodName=StringUtil.asCamelifySetMethod(what)
String methodName = StringUtil.asCamelifySetMethod(what);
cursor=getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,null,null,null,null)
Cursor cursor = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
now=System.currentTimeMillis()
long now = System.currentTimeMillis();
List<Contact2> typedCursor = new CursorList<Contact2>(cursor, Contact2.class);
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[a-zA-Z0-9]+")
Pattern p = Pattern.compile("[a-zA-Z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[A-Z][a-z0-9]+")
Pattern p = Pattern.compile("[A-Z][a-z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
SurfaceView first = (SurfaceView) findViewById(R.id.firstSurface);
SurfaceView second = (SurfaceView) findViewById(R.id.secondSurface);
Intent pickVideo = new Intent(Intent.ACTION_PICK);
Bundle args = new Bundle();
enroll=mHotwordDetector.createEnrollIntent()
Intent enroll = mHotwordDetector.createEnrollIntent();

Diff of 5bcd750e8580deaa5c97989bda7521216707d8be and f837285078026f80e3e3b81b060ec27c9def6bbe:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 34
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 5bcd750e8580deaa5c97989bda7521216707d8be to f837285078026f80e3e3b81b060ec27c9def6bbe


****Parsing for addition at revision f837285078026f80e3e3b81b060ec27c9def6bbe****

Added ApplicationTest.java to .\/spikes\ repository source files.
Added DrawerActivity.java to .\/spikes\ repository source files.
Added EarthActivity.java to .\/spikes\ repository source files.
Added SaturnActivity.java to .\/spikes\ repository source files.
Added LocalPlayerActivity.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added CastApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ComposeSmsActivity.java to .\/spikes\ repository source files.
Added HeadlessSmsSendService.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MmsReceiver.java to .\/spikes\ repository source files.
Added SmsReceiver.java to .\/spikes\ repository source files.
Added ExtendedDemoActivity.java to .\/spikes\ repository source files.
Added ExtendedDemoApplication.java to .\/spikes\ repository source files.
Added SimpleDemoActivity.java to .\/spikes\ repository source files.
Added SimpleDemoApplication.java to .\/spikes\ repository source files.
Added Binder.java to .\/spikes\ repository source files.
Added ConnectedClient.java to .\/spikes\ repository source files.
Added Connection.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnection.java to .\/spikes\ repository source files.
Added ServiceConnectionCallback.java to .\/spikes\ repository source files.
Added EasyCustomTabs.java to .\/spikes\ repository source files.
Added ActionButtonComposer.java to .\/spikes\ repository source files.
Added CloseButtonIconComposer.java to .\/spikes\ repository source files.
Added Composer.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilder.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigator.java to .\/spikes\ repository source files.
Added EasyCustomTabsWebNavigator.java to .\/spikes\ repository source files.
Added ExitAnimationsComposer.java to .\/spikes\ repository source files.
Added IntentCustomizer.java to .\/spikes\ repository source files.
Added MenuItemComposer.java to .\/spikes\ repository source files.
Added NavigationFallback.java to .\/spikes\ repository source files.
Added Navigator.java to .\/spikes\ repository source files.
Added ShowTitleComposer.java to .\/spikes\ repository source files.
Added StartAnimationsComposer.java to .\/spikes\ repository source files.
Added ToolbarColorComposer.java to .\/spikes\ repository source files.
Added UrlBarHidingComposer.java to .\/spikes\ repository source files.
Added WebNavigator.java to .\/spikes\ repository source files.
Added AvailableAppProvider.java to .\/spikes\ repository source files.
Added BestPackageFinder.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProvider.java to .\/spikes\ repository source files.
Added BinderTest.java to .\/spikes\ repository source files.
Added ConnectedClientTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnectionTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigatorTest.java to .\/spikes\ repository source files.
Added BestPackageFinderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProviderTest.java to .\/spikes\ repository source files.
Added ApiPagedChannelHistory.java to .\/spikes\ repository source files.
Added ApiPagedResponse.java to .\/spikes\ repository source files.
Added ChannelHistory.java to .\/spikes\ repository source files.
Added HistoryConverter.java to .\/spikes\ repository source files.
Added Runner.java to .\/spikes\ repository source files.
Added SlackHistoryFetcher.java to .\/spikes\ repository source files.
Added SlackWebService.java to .\/spikes\ repository source files.
Added ApiPagedResponseTest.java to .\/spikes\ repository source files.
Added MainActivityTest.java to .\/spikes\ repository source files.
Added LoremAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added BetterAccountManager.java to .\/spikes\ repository source files.
Added BetterAuthenticator.java to .\/spikes\ repository source files.
Added BetterAuthenticatorActivity.java to .\/spikes\ repository source files.
Added GertHerbAuthenticator.java to .\/spikes\ repository source files.
Added GertHerbAuthenticatorService.java to .\/spikes\ repository source files.
Added NoAccountException.java to .\/spikes\ repository source files.
Added ReactiveAuthenticatorActivity.java to .\/spikes\ repository source files.
Added Token.java to .\/spikes\ repository source files.
Added GertHerbActivity.java to .\/spikes\ repository source files.
Added GertHerbApplication.java to .\/spikes\ repository source files.
Added GertHerbAuthenticationActivity.java to .\/spikes\ repository source files.
Added TypefaceFactory.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added ViewServer.java to .\/spikes\ repository source files.
Added ViewServerManager.java to .\/spikes\ repository source files.
Added DeveloperError.java to .\/spikes\ repository source files.
Added HomeActivity.java to .\/spikes\ repository source files.
Added LoginActivity.java to .\/spikes\ repository source files.
Added LoginView.java to .\/spikes\ repository source files.
Added UserCredentials.java to .\/spikes\ repository source files.
Added FontButton.java to .\/spikes\ repository source files.
Added FontEditText.java to .\/spikes\ repository source files.
Added FontTextView.java to .\/spikes\ repository source files.
Added GithubApi.java to .\/spikes\ repository source files.
Added GithubApiFactory.java to .\/spikes\ repository source files.
Added TokenRequest.java to .\/spikes\ repository source files.
Added TokenResponse.java to .\/spikes\ repository source files.
Added Dummy.java to .\/spikes\ repository source files.
Added DummyTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MainFragment.java to .\/spikes\ repository source files.
Added Attributes.java to .\/spikes\ repository source files.
Added Coordinates.java to .\/spikes\ repository source files.
Added IndicatorCoordinatesCalculator.java to .\/spikes\ repository source files.
Added LandingStrip.java to .\/spikes\ repository source files.
Added MutableCoordinates.java to .\/spikes\ repository source files.
Added OnPagerAdapterChangedListener.java to .\/spikes\ repository source files.
Added PagerAdapterObserver.java to .\/spikes\ repository source files.
Added Scrollable.java to .\/spikes\ repository source files.
Added ScrollingPageChangeListener.java to .\/spikes\ repository source files.
Added State.java to .\/spikes\ repository source files.
Added TabsContainer.java to .\/spikes\ repository source files.
Added CustomLandingStrip.java to .\/spikes\ repository source files.
Added CustomTabActivity.java to .\/spikes\ repository source files.
Added ExampleRainbowLandingStrip.java to .\/spikes\ repository source files.
Added FixedWidthTabActivity.java to .\/spikes\ repository source files.
Added NoFragmentsSimpleTextTabActivity.java to .\/spikes\ repository source files.
Added Data.java to .\/spikes\ repository source files.
Added DemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added SmallDemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerFragment.java to .\/spikes\ repository source files.
Added DemoViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapterState.java to .\/spikes\ repository source files.
Added SimpleTextTabActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AbTestingParamsLoadedCallback.java to .\/spikes\ repository source files.
Added AyBe.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added WeakStartCallback.java to .\/spikes\ repository source files.
Added LeakActivity.java to .\/spikes\ repository source files.
Added NoLeakActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added ColorScheme.java to .\/spikes\ repository source files.
Added ColorUtils.java to .\/spikes\ repository source files.
Added DominantColorCalculator.java to .\/spikes\ repository source files.
Added FloatUtils.java to .\/spikes\ repository source files.
Added MedianCutQuantizer.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added PayPalFragment.java to .\/spikes\ repository source files.
Added PayPalHelper.java to .\/spikes\ repository source files.
Added MaxLengthMessageComposer.java to .\/spikes\ repository source files.
Added MessageComposer.java to .\/spikes\ repository source files.
Added TwitterMessageComposer.java to .\/spikes\ repository source files.
Added DisabledMruPersister.java to .\/spikes\ repository source files.
Added MruPersister.java to .\/spikes\ repository source files.
Added SharedPreferencesMruPersister.java to .\/spikes\ repository source files.
Added OnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added PriorityShareDialog.java to .\/spikes\ repository source files.
Added PrioritySharer.java to .\/spikes\ repository source files.
Added ShareTargetsAdapter.java to .\/spikes\ repository source files.
Added SimpleOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added TargetApps.java to .\/spikes\ repository source files.
Added TwitterOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AdvancedActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SimpleActivity.java to .\/spikes\ repository source files.
Added LockingActivity.java to .\/spikes\ repository source files.
Added PostLockingActivity.java to .\/spikes\ repository source files.
Added PreLockingActivity.java to .\/spikes\ repository source files.
Added DummyAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added NovoStaggeredGridView.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SpikeApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SwipeableView.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MyClass.java to .\/spikes\ repository source files.
Added MyClassTest.java to .\/spikes\ repository source files.
Added MyAndroidClassTest.java to .\/spikes\ repository source files.
Added RobolectricGradleTestRunner.java to .\/spikes\ repository source files.
Added Mapper.java to .\/spikes\ repository source files.
Added Query.java to .\/spikes\ repository source files.
Added TypedResolver.java to .\/spikes\ repository source files.
Added CursorList.java to .\/spikes\ repository source files.
Added CursorListIterator.java to .\/spikes\ repository source files.
Added CursorMarshaller.java to .\/spikes\ repository source files.
Added EmptyListIterator.java to .\/spikes\ repository source files.
Added ReflectionCursorMarshaller.java to .\/spikes\ repository source files.
Added RichClass.java to .\/spikes\ repository source files.
Added Setter.java to .\/spikes\ repository source files.
Added Function.java to .\/spikes\ repository source files.
Added TypedElementLoader.java to .\/spikes\ repository source files.
Added TypedLoader.java to .\/spikes\ repository source files.
Added Marshaller.java to .\/spikes\ repository source files.
Added ObjectMapper.java to .\/spikes\ repository source files.
Added TypedActivity.java to .\/spikes\ repository source files.
Added StringUtil.java to .\/spikes\ repository source files.
Added MyObject.java to .\/spikes\ repository source files.
Added MediaPlayerSwitcherActivity.java to .\/spikes\ repository source files.
Added VideoPlayerService.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added RecognitionService.java to .\/spikes\ repository source files.
Added SessionService.java to .\/spikes\ repository source files.
Added SettingsActivity.java to .\/spikes\ repository source files.
Added SmartContextInteractionService.java to .\/spikes\ repository source files.
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
String[] planetTitles = new String[]{"Earth", "Saturn"};
DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
ListView drawerList = (ListView) findViewById(R.id.left_drawer);
Intent intent;
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close);
b=getIntent().getExtras()
Bundle b = getIntent().getExtras();
mShouldStartPlayback=b.getBoolean("shouldStart")
boolean mShouldStartPlayback = b.getBoolean("shouldStart");
startPosition=b.getInt("startPosition",0)
int startPosition = b.getInt("startPosition", 0);
currentPos=mVideoView.getCurrentPosition()
int currentPos = mVideoView.getCurrentPosition();
String msg;
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, mDisplaySize.y + getActionBar().getHeight());
mm=mSelectedMedia.getMetadata()
MediaMetadata mm = mSelectedMedia.getMetadata();
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, (int) (mDisplaySize.x * ASPECT_RATIO));
WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
width=display.getWidth()
int width = display.getWidth();
height=display.getHeight()
int height = display.getHeight();
int resourceId = 0;
String videoUrl = "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4#sthash.rJ5rPZy8.dpuf";
String title = "Jahre Philharmonie";
String description = "Awesome film you must watch!";
String author = "Blundell";
String thumbUrl = "http://www.ustream.tv/blog/wp-content/uploads/2013/10/simply-go-live.png";
MediaMetadata metadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE);
mediaInfo=new MediaInfo.Builder(videoUrl).setMetadata(metadata).setStreamType(MediaInfo.STREAM_TYPE_BUFFERED).setContentType("video/mp4").build()
MediaInfo mediaInfo = new MediaInfo.Builder(videoUrl)
                        .setMetadata(metadata)
                        .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)
                        .setContentType("video/mp4")
                        .build();
Intent intent = new Intent(MainActivity.this, LocalPlayerActivity.class);
preferences=getPreferences(MODE_PRIVATE)
SharedPreferences preferences = getPreferences(MODE_PRIVATE);
defaultSmsPackage=Telephony.Sms.getDefaultSmsPackage(this)
String defaultSmsPackage = Telephony.Sms.getDefaultSmsPackage(this);
Intent intent = new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
availableAppProvider=EasyCustomTabs.getInstance()
AvailableAppProvider availableAppProvider = EasyCustomTabs.getInstance();
ConnectedClient connectedClient = new ConnectedClient(client);
binder=Binder.newInstance()
Binder binder = Binder.newInstance();
List<Composer> composerList = new ArrayList<>();
customTabsSession=connection.newSession()
CustomTabsSession customTabsSession = connection.newSession();
CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(customTabsSession);
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
context=EasyCustomTabs.getInstance().getContext()
Context context = EasyCustomTabs.getInstance().getContext();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
packagesSupportingCustomTabs=getPackagesSupportingCustomTabs()
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
defaultPackage=getDefaultPackage()
String defaultPackage = getDefaultPackage();
defaultActivityInfo=packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK,0)
ResolveInfo defaultActivityInfo = packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK, 0);
String packageName = defaultActivityInfo.activityInfo.packageName;
resolvedInfoList=packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK,0)
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<String> packagesSupportingCustomTabs = new ArrayList<>();
Intent serviceIntent = new Intent();
bestPackageFinder=BestPackageFinder.newInstance()
BestPackageFinder bestPackageFinder = BestPackageFinder.newInstance();
packageName=bestPackageFinder.findBestPackage()
String packageName = bestPackageFinder.findBestPackage();
resolveInfo=createResolveInfoFor(packageName)
ResolveInfo resolveInfo = createResolveInfoFor(packageName);
ResolveInfo resolveInfo = new ResolveInfo();
List<ResolveInfo> resolveInfoList = new ArrayList<>();
defaultPackageResolveInfo=createResolveInfoFor(packageName)
ResolveInfo defaultPackageResolveInfo = createResolveInfoFor(packageName);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
oldestApiMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage oldestApiMessage = apiMessages.get(apiMessages.size() - 1);
String lastResponseEpochTime = oldestApiMessage.timeStamp;
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
latestMessage=latestMessages.get(latestMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage latestMessage = latestMessages.get(latestMessages.size() - 1);
latestMessageDateTime=convertToLocalDateTime(latestMessage.timeStamp)
LocalDateTime latestMessageDateTime = convertToLocalDateTime(latestMessage.timeStamp);
List<ChannelHistory.Message> messages = new ArrayList<>();
historyFrom=getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1))
LocalDateTime historyFrom = getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1));
historyTo=getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0))
LocalDateTime historyTo = getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0));
String text = apiMessage.text;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
lastMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage lastMessage = apiMessages.get(apiMessages.size() - 1);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
firstMessage=apiMessages.get(0)
ApiPagedChannelHistory.ApiMessage firstMessage = apiMessages.get(0);
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
String slackToken = args[0];
retrofit=new Retrofit.Builder().baseUrl("https://slack.com/api/").addConverterFactory(GsonConverterFactory.create()).build()
Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://slack.com/api/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();
slackWebService=retrofit.create(SlackWebService.class)
SlackWebService slackWebService = retrofit.create(SlackWebService.class);
slackHistoryFetcher=SlackHistoryFetcher.from(slackWebService,slackToken)
SlackHistoryFetcher slackHistoryFetcher = SlackHistoryFetcher.from(slackWebService, slackToken);
start=LocalDateTime.now()
LocalDateTime start = LocalDateTime.now();
end=LocalDateTime.now().minusDays(7)
LocalDateTime end = LocalDateTime.now().minusDays(7);
channelHistory=slackHistoryFetcher.getChannelHistory(start,end)
ChannelHistory channelHistory = slackHistoryFetcher.getChannelHistory(start, end);
HistoryConverter historyConverter = new HistoryConverter();
ApiPagedResponse apiPagedResponse = new ApiPagedResponse(start);
response=fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime())
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
apiPagedChannelHistory=response.body()
ApiPagedChannelHistory apiPagedChannelHistory = response.body();
channelHistory=slackWebService.getChannelHistory(slackToken,channel,lastResponseEpochTime,NUMBER_OF_RESULTS)
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
ApiPagedChannelHistory apiPagedChannelHistory = new ApiPagedChannelHistory();
ApiPagedChannelHistory.ApiMessage apiMessage = new ApiPagedChannelHistory.ApiMessage();
final TextView textView = new TextView(context);
emptyView=findViewById(R.id.empty_view)
View emptyView = findViewById(R.id.empty_view);
final Integer action = values[0];
LoremAdapter loremAdapter = new LoremAdapter();
accounts=accountManager.getAccountsByType(accountType)
Account[] accounts = accountManager.getAccountsByType(accountType);
Bundle result;
Bundle result;
Bundle result = new Bundle();
activity=createLoginIntent(context,accountType,authTokenType,requiredFeatures,options)
Intent activity = createLoginIntent(context, accountType, authTokenType, requiredFeatures, options);
Bundle bundle = new Bundle();
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
accounts=accountManager.getAccountsByType(authTokenType)
Account[] accounts = accountManager.getAccountsByType(authTokenType);
bundle=createResponseBundle(token)
Bundle bundle = createResponseBundle(token);
accountManager=AccountManager.get(this.getApplicationContext())
AccountManager accountManager = AccountManager.get(this.getApplicationContext());
Account account = new Account(token.getUserName(), getAccountName());
Bundle bundle = new Bundle();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
GertHerbAuthenticator authenticator = new GertHerbAuthenticator(this);
fontId=getFontId(context,attrs)
int fontId = getFontId(context, attrs);
fontType=getFontType(fontId)
FontType fontType = getFontType(fontId);
typedArray=context.obtainStyledAttributes(attrs,R.styleable.CustomTextAppearance)
TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CustomTextAppearance);
typeface=createTypeFace(context,fontType)
Typeface typeface = createTypeFace(context, fontType);
info=context.getApplicationInfo()
ApplicationInfo info = context.getApplicationInfo();
name=activity.getTitle().toString()
String name = activity.getTitle().toString();
client=mServer.accept()
Socket client = mServer.accept();
boolean result;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
BufferedReader in = null;
request=in.readLine()
final String request = in.readLine();
String command;
String parameters;
index=request.indexOf(' ')
int index = request.indexOf(' ');
boolean result;
boolean success = true;
BufferedWriter out = null;
index=parameters.indexOf(' ')
int index = parameters.indexOf(' ');
code=parameters.substring(0,index)
final String code = parameters.substring(0, index);
int hashCode = (int) Long.parseLong(code, 16);
window=findWindow(hashCode)
final View window = findWindow(hashCode);
dispatch=ViewDebug.class.getDeclaredMethod("dispatchCommand",View.class,String.class,String.class,OutputStream.class)
final Method dispatch = ViewDebug.class.getDeclaredMethod("dispatchCommand",
                        View.class, String.class, String.class, OutputStream.class);
View window = null;
boolean result = true;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
boolean result = true;
String focusName = null;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
View focusedWindow = null;
BufferedWriter out = null;
boolean needWindowListUpdate = false;
boolean needFocusedWindowUpdate = false;
BetterAccountManager accountManager = new BetterAccountManager(this, getString(R.string.account_type), getString(R.string.token_type), null);
loginView=Views.findById(this,R.id.login_view)
LoginView loginView = Views.findById(this, R.id.login_view);
authorizationApi=new GithubApiFactory().createAuthorizationApi(credentials.username,credentials.password)
GithubApi authorizationApi = new GithubApiFactory().createAuthorizationApi(credentials.username, credentials.password);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
Endpoint endpoint = new Endpoint() {
            @Override
            public String getUrl() {
                return GITHUB_API_URL;
            }

            @Override
            public String getName() {
                return "Live";
            }
        };
interceptor=createAuthorizationRequestInterceptor(username,password)
RequestInterceptor interceptor = createAuthorizationRequestInterceptor(username, password);
restAdapter=createRestAdapter(endpoint,interceptor)
RestAdapter restAdapter = createRestAdapter(endpoint, interceptor);
Dummy dummy = new Dummy();
result=dummy.explodes()
boolean result = dummy.explodes();
String base64EncodedPublicKey = "CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE";
premiumPurchase=inventory.getPurchase(SKU_PREMIUM)
Purchase premiumPurchase = inventory.getPurchase(SKU_PREMIUM);
infiniteGasPurchase=inventory.getPurchase(SKU_INFINITE_GAS)
Purchase infiniteGasPurchase = inventory.getPurchase(SKU_INFINITE_GAS);
gasPurchase=inventory.getPurchase(SKU_GAS)
Purchase gasPurchase = inventory.getPurchase(SKU_GAS);
String payload = "";
String payload = "";
String payload = "";
payload=p.getDeveloperPayload()
String payload = p.getDeveloperPayload();
int index = mTank >= TANK_RES_IDS.length ? TANK_RES_IDS.length - 1 : mTank;
AlertDialog.Builder bld = new AlertDialog.Builder(this);
spe=getPreferences(MODE_PRIVATE).edit()
SharedPreferences.Editor spe = getPreferences(MODE_PRIVATE).edit();
sp=getPreferences(MODE_PRIVATE)
SharedPreferences sp = getPreferences(MODE_PRIVATE);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                                  + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                    | ((source[d + 1 + off] << 24) >>> 16)
                    | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                    | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                                   "-1002:Bad response received/" +
                                   "-1003:Purchase signature verification failed/" +
                                   "-1004:Send intent failed/" +
                                   "-1005:User cancelled/" +
                                   "-1006:Unknown purchase response/" +
                                   "-1007:Missing token/" +
                                   "-1008:Unknown error/" +
                                   "-1009:Subscriptions not available/" +
                                   "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(),
                    itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                        | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                        | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                            | ((source[d + 1 + off] << 24) >>> 16)
                            | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                            | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                "-1002:Bad response received/" +
                "-1003:Purchase signature verification failed/" +
                "-1004:Send intent failed/" +
                "-1005:User cancelled/" +
                "-1006:Unknown purchase response/" +
                "-1007:Missing token/" +
                "-1008:Unknown error/" +
                "-1009:Subscriptions not available/" +
                "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(), itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
responseCode=result.getResponse()
int responseCode = result.getResponse();
sku=purchase.getSku()
String sku = purchase.getSku();
skuDetails=inv.getSkuDetails(sku)
SkuDetails skuDetails = inv.getSkuDetails(sku);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
Button purchaseFiveButton = (Button) rootView.findViewById(R.id.fragment_main_button_purchase_five_coins);
xml=context.obtainStyledAttributes(attrs,R.styleable.LandingStrip)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.LandingStrip);
tabLayoutId=xml.getResourceId(R.styleable.LandingStrip_tabLayoutId,MISSING_TAB_LAYOUT_ID)
int tabLayoutId = xml.getResourceId(R.styleable.LandingStrip_tabLayoutId, MISSING_TAB_LAYOUT_ID);
indicatorColour=xml.getResourceId(R.styleable.LandingStrip_indicatorColor,DEFAULT_INDICATOR_COLOUR)
int indicatorColour = xml.getResourceId(R.styleable.LandingStrip_indicatorColor, DEFAULT_INDICATOR_COLOUR);
indicatorHeight=getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight,DEFAULT_INDICATOR_HEIGHT,xml)
int indicatorHeight = getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight, DEFAULT_INDICATOR_HEIGHT, xml);
tabsPaddingLeft=getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingLeft = getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding, DEFAULT_TABS_PADDING, xml);
tabsPaddingRight=getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingRight = getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding, DEFAULT_TABS_PADDING, xml);
MutableCoordinates drawCurrentTabCoordinates = new MutableCoordinates();
MutableCoordinates drawNextTabCoordinates = new MutableCoordinates();
MutableCoordinates drawMovingIndicatorCoordinates = new MutableCoordinates();
currentTab=tabsContainer.getTabAt(currentPosition)
View currentTab = tabsContainer.getTabAt(currentPosition);
currentTabStart=currentTab.getLeft()
float currentTabStart = currentTab.getLeft();
currentTabEnd=currentTab.getRight()
float currentTabEnd = currentTab.getRight();
nextTab=tabsContainer.getTabAt(currentPosition + 1)
View nextTab = tabsContainer.getTabAt(currentPosition + 1);
nextTabPositionOffset=getFractionFrom(pagePositionOffset)
float nextTabPositionOffset = getFractionFrom(pagePositionOffset);
indicatorStart=getIndicatorPosition(nextTab.getStart(),pagePositionOffset,currentTab.getStart(),nextTabPositionOffset)
float indicatorStart = getIndicatorPosition(nextTab.getStart(), pagePositionOffset, currentTab.getStart(), nextTabPositionOffset);
indicatorEnd=getIndicatorPosition(nextTab.getEnd(),pagePositionOffset,currentTab.getEnd(),nextTabPositionOffset)
float indicatorEnd = getIndicatorPosition(nextTab.getEnd(), pagePositionOffset, currentTab.getEnd(), nextTabPositionOffset);
height=getHeight()
int height = getHeight();
tabCount=pagerAdapter.getCount()
int tabCount = pagerAdapter.getCount();
title=pagerAdapter.getPageTitle(position)
CharSequence title = pagerAdapter.getPageTitle(position);
inflatedTabView=tabsContainer.inflateTab(layoutInflater,attributes.getTabLayoutId())
View inflatedTabView = tabsContainer.inflateTab(layoutInflater, attributes.getTabLayoutId());
int position = (int) view.getTag(TAG_KEY_POSITION);
scrollOffset=getHorizontalScrollOffset(position,positionOffset)
int scrollOffset = getHorizontalScrollOffset(position, positionOffset);
newScrollX=calculateScrollOffset(position,scrollOffset,positionOffset)
float newScrollX = calculateScrollOffset(position, scrollOffset, positionOffset);
tabWidth=tabsContainer.getTabAt(position).getWidth()
int tabWidth = tabsContainer.getTabAt(position).getWidth();
tabForPosition=tabsContainer.getTabAt(position)
View tabForPosition = tabsContainer.getTabAt(position);
float tabStartX = tabForPosition.getLeft() + scrollOffset;
int viewMiddleOffset = getTabParentWidth() / 2;
float tabCenterOffset = (tabForPosition.getRight() - tabForPosition.getLeft()) * 0.5F;
nextTabDelta=getNextTabDelta(position,pagerOffset,tabForPosition)
float nextTabDelta = getNextTabDelta(position, pagerOffset, tabForPosition);
LinearLayout tabsContainerView = new LinearLayout(context);
tab=getTabAt(index)
View tab = getTabAt(index);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
position=indicatorCoordinates.getStart()
float position = indicatorCoordinates.getStart();
lastTabOffset=((ViewGroup)getChildAt(0)).getChildAt(getChildCount() - 1).getWidth()
float lastTabOffset = ((ViewGroup) getChildAt(0)).getChildAt(getChildCount() - 1).getWidth();
frequency=getOneCycle(lastTabOffset)
float frequency = getOneCycle(lastTabOffset);
r=toHex(calculateColour(position,frequency,PHASE_RED,AMPLITUDE,CENTER_FREQUENCY))
String r = toHex(calculateColour(position, frequency, PHASE_RED, AMPLITUDE, CENTER_FREQUENCY));
g=toHex(calculateColour(position,frequency,PHASE_GREEN,AMPLITUDE,CENTER_FREQUENCY))
String g = toHex(calculateColour(position, frequency, PHASE_GREEN, AMPLITUDE, CENTER_FREQUENCY));
b=toHex(calculateColour(position,frequency,PHASE_BLUE,AMPLITUDE,CENTER_FREQUENCY))
String b = toHex(calculateColour(position, frequency, PHASE_BLUE, AMPLITUDE, CENTER_FREQUENCY));
height=getHeight()
int height = getHeight();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPagerFragment viewPagerFragment = new ViewPagerFragment();
Bundle bundle = new Bundle();
TextView view = (TextView) layoutInflater.inflate(R.layout.view_demo, container, false);
currentPosition=viewPagerAdapterState.getCurrentPosition()
int currentPosition = viewPagerAdapterState.getCurrentPosition();
view=getView(container,position)
View view = getView(container, position);
parcelableSparseArray=viewPagerAdapterState.get(position)
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
View view = (View) object;
SparseArray<Parcelable> viewState = new SparseArray<>();
position=entry.getValue()
int position = entry.getValue();
view=entry.getKey()
View view = entry.getKey();
bundle=in.readBundle()
Bundle bundle = in.readBundle();
Map<Integer, SparseArray<Parcelable>> viewStates = new HashMap<>(bundle.keySet().size());
sparseParcelableArray=bundle.getSparseParcelableArray(key)
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
primaryItemPosition=in.readInt()
int primaryItemPosition = in.readInt();
Bundle bundle = new Bundle();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
final TextView abText = (TextView) findViewById(R.id.ab_text);
final AyBe ayBe = new AyBe();
id=item.getItemId()
int id = item.getItemId();
callback=weakCallback.get()
AbTestingParamsLoadedCallback callback = weakCallback.get();
WeakReference<NoLeakActivity> weakNoLeakActivity = new WeakReference<NoLeakActivity>(noLeakActivity);
noLeakActivity=weakNoLeakActivity.get()
NoLeakActivity noLeakActivity = weakNoLeakActivity.get();
final float inverseRatio = 1f - ratio;
float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRatio);
float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRatio);
float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRatio);
hsv=node.getHsv()
float[] hsv = node.getHsv();
width=bitmap.getWidth()
final int width = bitmap.getWidth();
height=bitmap.getHeight()
final int height = bitmap.getHeight();
final int[] rgbPixels = new int[width * height];
final MedianCutQuantizer mcq = new MedianCutQuantizer(rgbPixels, NUM_COLORS);
primaryAccentColor=findPrimaryAccentColor()
final ColorNode primaryAccentColor = findPrimaryAccentColor();
secondaryAccentColor=findSecondaryAccentColor(primaryAccentColor)
final ColorNode secondaryAccentColor = findSecondaryAccentColor(primaryAccentColor);
tertiaryAccentColor=findTertiaryAccentColor(primaryAccentColor,secondaryAccentColor)
final int tertiaryAccentColor = findTertiaryAccentColor(
                primaryAccentColor, secondaryAccentColor);
primaryTextColor=findPrimaryTextColor(primaryAccentColor)
final int primaryTextColor = findPrimaryTextColor(primaryAccentColor);
secondaryTextColor=findSecondaryTextColor(primaryAccentColor)
final int secondaryTextColor = findSecondaryTextColor(primaryAccentColor);
final float primaryHue = primary.getHsv()[0];
final float candidateHue = candidate.getHsv()[0];
copy=Arrays.copyOf(palette,palette.length)
final MedianCutQuantizer.ColorNode[] copy = Arrays.copyOf(palette, palette.length);
maxCount=palette[0].getCount()
final float maxCount = palette[0].getCount();
lhsWeight=calculateWeight(lhs,maxCount)
final float lhsWeight = calculateWeight(lhs, maxCount);
rhsWeight=calculateWeight(rhs,maxCount)
final float rhsWeight = calculateWeight(rhs, maxCount);
float sum = 0;
float sumWeight = 0;
float value = values[i];
float weight = values[i + 1];
ColorHistogram colorHist = new ColorHistogram(pixels);
K=colorHist.getNumberOfColors()
int K = colorHist.getNumberOfColors();
ColorNode[] rCols = null;
rgb=colorHist.getColor(i)
int rgb = colorHist.getColor(i);
cnt=colorHist.getCount(i)
int cnt = colorHist.getCount(i);
ColorBox initialBox = new ColorBox(0, K - 1, 0);
List<ColorBox> colorSet = new ArrayList<ColorBox>();
int k = 1;
boolean done = false;
nextBox=findBoxToSplit(colorSet)
ColorBox nextBox = findBoxToSplit(colorSet);
newBox=nextBox.splitBox()
ColorBox newBox = nextBox.splitBox();
color=findClosestColor(pixels[i])
ColorNode color = findClosestColor(pixels[i]);
idx=findClosestColorIndex(rgb)
int idx = findClosestColorIndex(rgb);
red=Color.red(rgb)
int red = Color.red(rgb);
grn=Color.green(rgb)
int grn = Color.green(rgb);
blu=Color.blue(rgb)
int blu = Color.blue(rgb);
int minIdx = 0;
int minDistance = Integer.MAX_VALUE;
ColorNode color = quantColors[i];
d2=color.distance2(red,grn,blu)
int d2 = color.distance2(red, grn, blu);
ColorBox boxToSplit = null;
int minLevel = Integer.MAX_VALUE;
n=colorBoxes.size()
int n = colorBoxes.size();
ColorNode[] avgColors = new ColorNode[n];
int i = 0;
int dr = this.red - red;
int dg = this.grn - grn;
int db = this.blu - blu;
ColorNode color = imageColors[i];
int r = color.red;
int g = color.grn;
int b = color.blu;
dim=getLongestColorDimension()
ColorDimension dim = getLongestColorDimension();
med=findMedian(dim)
int med = findMedian(dim);
int nextLevel = level + 1;
ColorBox newBox = new ColorBox(med + 1, upper, nextLevel);
int rLength = rmax - rmin;
int gLength = gmax - gmin;
int bLength = bmax - bmin;
int half = count / 2;
int nPixels, median;
int rSum = 0;
int gSum = 0;
int bSum = 0;
int n = 0;
ColorNode ci = imageColors[i];
int cnt = ci.cnt;
double nd = n;
int avgRed = (int) (0.5 + rSum / nd);
int avgGrn = (int) (0.5 + gSum / nd);
int avgBlu = (int) (0.5 + bSum / nd);
s=this.getClass().getSimpleName()
String s = this.getClass().getSimpleName();
int i = 0;
int N = pixelsOrig.length;
int[] pixelsCpy = new int[N];
int k = -1;
int curColor = -1;
int nColors = k + 1;
id=item.getItemId()
int id = item.getItemId();
Intent intent = new Intent();
bitmap=((BitmapDrawable)imageView.getDrawable()).getBitmap()
Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap();
DominantColorCalculator dominantColorCalculator = new DominantColorCalculator(bitmap);
selectedImageUri=data.getData()
Uri selectedImageUri = data.getData();
selectedImagePath=getPath(selectedImageUri)
String selectedImagePath = getPath(selectedImageUri);
String[] projection = {MediaStore.Images.Media.DATA};
cursor=managedQuery(uri,projection,null,null,null)
Cursor cursor = managedQuery(uri, projection, null, null, null);
column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)
int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
LinearLayout rootView = (LinearLayout) inflater.inflate(R.layout.fragment_main, container, false);
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
preapprovalButton=payPal.getCheckoutButton(getActivity(),PayPal.BUTTON_194x37,CheckoutButton.TEXT_PAY)
CheckoutButton preapprovalButton = payPal.getCheckoutButton(getActivity(), PayPal.BUTTON_194x37, CheckoutButton.TEXT_PAY);
preapprovalIntent=payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY)
Intent preapprovalIntent = payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY);
String resultTitle = "";
String resultInfo = "";
String resultExtra = "";
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
PayPalPreapproval preapproval = new PayPalPreapproval();
preapproval=createPreapproval(preapprovalKey)
PayPalPreapproval preapproval = createPreapproval(preapprovalKey);
Bundle bundle = new Bundle();
int availableLength = maxLength;
StringBuilder stringBuilder = new StringBuilder(maxLength);
prefixAndSuffixLength=computeAppendedLengthIncludingSeparatorSpaces(prefix,suffix)
int prefixAndSuffixLength = computeAppendedLengthIncludingSeparatorSpaces(prefix, suffix);
urlLength=computeUrlLengthIncludingSeparatorSpace(url)
int urlLength = computeUrlLengthIncludingSeparatorSpace(url);
trimmedSubject=ellipsizeTextIfExceedsMaxLength(subject,availableLength)
String trimmedSubject = ellipsizeTextIfExceedsMaxLength(subject, availableLength);
int length = 0;
preferences=context.getSharedPreferences(MRU_PREFERENCES,Context.MODE_PRIVATE)
SharedPreferences preferences = context.getSharedPreferences(MRU_PREFERENCES, Context.MODE_PRIVATE);
args=getArguments()
Bundle args = getArguments();
themeResId=getThemeResIdIfProvidedIn(args)
int themeResId = getThemeResIdIfProvidedIn(args);
title=getTitleIfProvidedIn(args)
CharSequence title = getTitleIfProvidedIn(args);
builder=createDialogBuilder(themeResId).setCancelable(true).setView(dialogView)
AlertDialog.Builder builder = createDialogBuilder(themeResId)
                .setCancelable(true)
                .setView(dialogView);
inflater=getActivity().getLayoutInflater()
LayoutInflater inflater = getActivity().getLayoutInflater();
GridView gridView = (GridView) rootView.findViewById(R.id.ps__dialog_grid);
targetApps=extractTargetAppsFrom(args)
TargetApps targetApps = extractTargetAppsFrom(args);
allShareTargets=getAvailableShareTargets(sharingIntent)
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
priorityAppInfos=createPriorityResolveInfoList(targetApps,allShareTargets)
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
otherAppInfos=createOtherAppsResolveInfoList(priorityAppInfos,allShareTargets)
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
resolveInfos=targetApps.extractTargetResolveInfosFrom(allShareTargets)
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
mruResolveInfo=findMruResolveInfoIn(allShareTargets)
ResolveInfo mruResolveInfo = findMruResolveInfoIn(allShareTargets);
List<ResolveInfo> otherAppsInfos = new ArrayList<ResolveInfo>(allAppInfos);
mruPackageName=persister.getLastUsedTarget()
String mruPackageName = persister.getLastUsedTarget();
String packageName = resolveInfo.activityInfo.packageName;
packageManager=getActivity().getPackageManager()
PackageManager packageManager = getActivity().getPackageManager();
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
View buttonStrip = (View) showMoreButton.getParent();
gridView=getGridView()
GridView gridView = getGridView();
intent=wrapIntentWithExplicitTargetComponentForItem(position,sharingIntent)
Intent intent = wrapIntentWithExplicitTargetComponentForItem(position, sharingIntent);
Intent intent = new Intent(sharingIntent);
ActivityInfo activity = adapter.getItem(position).activityInfo;
ComponentName name = new ComponentName(activity.applicationInfo.packageName, activity.name);
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
PriorityShareDialog dialog = new PriorityShareDialog();
Bundle args = new Bundle();
sharingIntent=createSharingIntent()
Intent sharingIntent = createSharingIntent();
fragmentManager=activity.getFragmentManager()
FragmentManager fragmentManager = activity.getFragmentManager();
Intent intent = new Intent(Intent.ACTION_SEND);
dialog=new PriorityShareDialog.Builder().setTitle(title).setTargetApps(targetApps).setSharingIntent(sharingIntent).setOnPrepareSharingIntentListener(listener).setShowMostRecentlyUsed(showMostRecentlyUsed).build()
PriorityShareDialog dialog = new PriorityShareDialog.Builder()
                .setTitle(title)
                .setTargetApps(targetApps)
                .setSharingIntent(sharingIntent)
                .setOnPrepareSharingIntentListener(listener)
                .setShowMostRecentlyUsed(showMostRecentlyUsed)
                .build();
PrioritySharer prioritySharer = new PrioritySharer();
prioritySharer=build()
PrioritySharer prioritySharer = build();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
layoutInflater=LayoutInflater.from(context)
LayoutInflater layoutInflater = LayoutInflater.from(context);
iconSizePx=getIconSizePx(context.getResources())
int iconSizePx = getIconSizePx(context.getResources());
ArrayList<ResolveInfo> sortedList = new ArrayList<ResolveInfo>(resolveInfoList);
int otherAppsCountMaybe = showAllApps ? otherAppInfos.size() : 0;
firstOtherAppsItemPosition=priorityAppInfos.size()
int firstOtherAppsItemPosition = priorityAppInfos.size();
int offsetPosition = position - firstOtherAppsItemPosition;
TextView textView;
textView=initializeItemViewIfNecessary(convertView,R.layout.ps__grid_item_share,parent)
TextView textView = initializeItemViewIfNecessary(convertView, R.layout.ps__grid_item_share, parent);
info=getItem(position)
ResolveInfo info = getItem(position);
icon=info.loadIcon(packageManager)
Drawable icon = info.loadIcon(packageManager);
arraySize=in.readInt()
int arraySize = in.readInt();
String[] packageNames = new String[arraySize];
arraySize=targetPackages.size()
int arraySize = targetPackages.size();
String[] packagesArray = new String[arraySize];
SparseArray<ResolveInfo> matchedResolveInfos = new SparseArray<ResolveInfo>(targetPackages.size());
String packageName = info.activityInfo.packageName;
index=indexOfItemInto(packageName,targetPackages)
int index = indexOfItemInto(packageName, targetPackages);
sparseArraySize=sparseArray.size()
int sparseArraySize = sparseArray.size();
ArrayList<T> list = new ArrayList<T>(sparseArraySize);
int i = 0;
originalSubject=intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT)
CharSequence originalSubject = intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT);
String subject = originalSubject != null ? originalSubject.toString() : null;
composer=createComposer()
MessageComposer composer = createComposer();
component=intent.getComponent()
ComponentName component = intent.getComponent();
targetPackageName=component.getPackageName()
String targetPackageName = component.getPackageName();
adapter=ArrayAdapter.createFromResource(this,R.array.target_apps,android.R.layout.simple_spinner_item)
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
EditText text = (EditText) findViewById(R.id.text);
EditText title = (EditText) findViewById(R.id.title);
EditText mimeType = (EditText) findViewById(R.id.mime_type);
EditText dataUri = (EditText) findViewById(R.id.data_uri);
Switch showMostRecentlyUsed = (Switch) findViewById(R.id.show_most_recently_used);
uriString=dataUri.getText().toString()
String uriString = dataUri.getText().toString();
EditText text = (EditText) findViewById(R.id.text);
TextView textView = (TextView) convertView.findViewById(R.id.positionView);
colorView=convertView.findViewById(R.id.colorView)
View colorView = convertView.findViewById(R.id.colorView);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
offset=headerPlaceholder.getTop()
int offset = headerPlaceholder.getTop();
Integer item = COLORS[position];
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
firstVisiblePosition=grid.getFirstVisiblePosition()
int firstVisiblePosition = grid.getFirstVisiblePosition();
inflate=getViewForPosition(container,position)
View inflate = getViewForPosition(container, position);
id=item.getItemId()
int id = item.getItemId();
MyActivity activity = new MyActivity();
String manifestProperty = "../app/src/main/AndroidManifest.xml";
String resProperty = "../app/src/main/res";
cursor=resolver.query(uri,projection,selection,selectionArgs,null)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, null);
cursor=resolver.query(uri,projection,selection,selectionArgs,sortOrder)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, sortOrder);
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=richClass.setter(name)
Method setter = richClass.setter(name);
T obj;
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=methodsByName.get(name)
Method setter = methodsByName.get(name);
int type = TYPE_INT;
Class<?> t = setter.getParameterTypes()[0];
Class<?> t = setter.getParameterTypes()[0];
cursorType=cursor.getType(index)
final int cursorType = cursor.getType(index);
final Object obj;
s=f.getAnnotation(Mapper.class)
Mapper s = f.getAnnotation(Mapper.class);
mm=m.getAnnotation(Mapper.class)
Mapper mm = m.getAnnotation(Mapper.class);
methodName=StringUtil.asCamelifySetMethod(what)
String methodName = StringUtil.asCamelifySetMethod(what);
cursor=getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,null,null,null,null)
Cursor cursor = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
now=System.currentTimeMillis()
long now = System.currentTimeMillis();
List<Contact2> typedCursor = new CursorList<Contact2>(cursor, Contact2.class);
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[a-zA-Z0-9]+")
Pattern p = Pattern.compile("[a-zA-Z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[A-Z][a-z0-9]+")
Pattern p = Pattern.compile("[A-Z][a-z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
SurfaceView first = (SurfaceView) findViewById(R.id.firstSurface);
SurfaceView second = (SurfaceView) findViewById(R.id.secondSurface);
Intent pickVideo = new Intent(Intent.ACTION_PICK);
Bundle args = new Bundle();
enroll=mHotwordDetector.createEnrollIntent()
Intent enroll = mHotwordDetector.createEnrollIntent();

Diff of f837285078026f80e3e3b81b060ec27c9def6bbe and 5a63ebc3b9650a8d9855fcda5ea156f68a738e0c:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 34
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision f837285078026f80e3e3b81b060ec27c9def6bbe to 5a63ebc3b9650a8d9855fcda5ea156f68a738e0c


****Parsing for addition at revision 5a63ebc3b9650a8d9855fcda5ea156f68a738e0c****

Added ApplicationTest.java to .\/spikes\ repository source files.
Added DrawerActivity.java to .\/spikes\ repository source files.
Added EarthActivity.java to .\/spikes\ repository source files.
Added SaturnActivity.java to .\/spikes\ repository source files.
Added LocalPlayerActivity.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added CastApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ComposeSmsActivity.java to .\/spikes\ repository source files.
Added HeadlessSmsSendService.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MmsReceiver.java to .\/spikes\ repository source files.
Added SmsReceiver.java to .\/spikes\ repository source files.
Added ExtendedDemoActivity.java to .\/spikes\ repository source files.
Added ExtendedDemoApplication.java to .\/spikes\ repository source files.
Added SimpleDemoActivity.java to .\/spikes\ repository source files.
Added SimpleDemoApplication.java to .\/spikes\ repository source files.
Added Binder.java to .\/spikes\ repository source files.
Added ConnectedClient.java to .\/spikes\ repository source files.
Added Connection.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnection.java to .\/spikes\ repository source files.
Added ServiceConnectionCallback.java to .\/spikes\ repository source files.
Added EasyCustomTabs.java to .\/spikes\ repository source files.
Added ActionButtonComposer.java to .\/spikes\ repository source files.
Added CloseButtonIconComposer.java to .\/spikes\ repository source files.
Added Composer.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilder.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigator.java to .\/spikes\ repository source files.
Added EasyCustomTabsWebNavigator.java to .\/spikes\ repository source files.
Added ExitAnimationsComposer.java to .\/spikes\ repository source files.
Added IntentCustomizer.java to .\/spikes\ repository source files.
Added MenuItemComposer.java to .\/spikes\ repository source files.
Added NavigationFallback.java to .\/spikes\ repository source files.
Added Navigator.java to .\/spikes\ repository source files.
Added ShowTitleComposer.java to .\/spikes\ repository source files.
Added StartAnimationsComposer.java to .\/spikes\ repository source files.
Added ToolbarColorComposer.java to .\/spikes\ repository source files.
Added UrlBarHidingComposer.java to .\/spikes\ repository source files.
Added WebNavigator.java to .\/spikes\ repository source files.
Added AvailableAppProvider.java to .\/spikes\ repository source files.
Added BestPackageFinder.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProvider.java to .\/spikes\ repository source files.
Added BinderTest.java to .\/spikes\ repository source files.
Added ConnectedClientTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnectionTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigatorTest.java to .\/spikes\ repository source files.
Added BestPackageFinderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProviderTest.java to .\/spikes\ repository source files.
Added ApiPagedChannelHistory.java to .\/spikes\ repository source files.
Added ApiPagedResponse.java to .\/spikes\ repository source files.
Added ChannelHistory.java to .\/spikes\ repository source files.
Added HistoryConverter.java to .\/spikes\ repository source files.
Added Runner.java to .\/spikes\ repository source files.
Added SlackHistoryFetcher.java to .\/spikes\ repository source files.
Added SlackWebService.java to .\/spikes\ repository source files.
Added ApiPagedResponseTest.java to .\/spikes\ repository source files.
Added MainActivityTest.java to .\/spikes\ repository source files.
Added LoremAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added BetterAccountManager.java to .\/spikes\ repository source files.
Added BetterAuthenticator.java to .\/spikes\ repository source files.
Added BetterAuthenticatorActivity.java to .\/spikes\ repository source files.
Added GertHerbAuthenticator.java to .\/spikes\ repository source files.
Added GertHerbAuthenticatorService.java to .\/spikes\ repository source files.
Added NoAccountException.java to .\/spikes\ repository source files.
Added ReactiveAuthenticatorActivity.java to .\/spikes\ repository source files.
Added Token.java to .\/spikes\ repository source files.
Added GertHerbActivity.java to .\/spikes\ repository source files.
Added GertHerbApplication.java to .\/spikes\ repository source files.
Added GertHerbAuthenticationActivity.java to .\/spikes\ repository source files.
Added TypefaceFactory.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added ViewServer.java to .\/spikes\ repository source files.
Added ViewServerManager.java to .\/spikes\ repository source files.
Added DeveloperError.java to .\/spikes\ repository source files.
Added HomeActivity.java to .\/spikes\ repository source files.
Added LoginActivity.java to .\/spikes\ repository source files.
Added LoginView.java to .\/spikes\ repository source files.
Added UserCredentials.java to .\/spikes\ repository source files.
Added FontButton.java to .\/spikes\ repository source files.
Added FontEditText.java to .\/spikes\ repository source files.
Added FontTextView.java to .\/spikes\ repository source files.
Added GithubApi.java to .\/spikes\ repository source files.
Added GithubApiFactory.java to .\/spikes\ repository source files.
Added TokenRequest.java to .\/spikes\ repository source files.
Added TokenResponse.java to .\/spikes\ repository source files.
Added Dummy.java to .\/spikes\ repository source files.
Added DummyTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MainFragment.java to .\/spikes\ repository source files.
Added Attributes.java to .\/spikes\ repository source files.
Added Coordinates.java to .\/spikes\ repository source files.
Added IndicatorCoordinatesCalculator.java to .\/spikes\ repository source files.
Added LandingStrip.java to .\/spikes\ repository source files.
Added MutableCoordinates.java to .\/spikes\ repository source files.
Added OnPagerAdapterChangedListener.java to .\/spikes\ repository source files.
Added PagerAdapterObserver.java to .\/spikes\ repository source files.
Added Scrollable.java to .\/spikes\ repository source files.
Added ScrollingPageChangeListener.java to .\/spikes\ repository source files.
Added State.java to .\/spikes\ repository source files.
Added TabsContainer.java to .\/spikes\ repository source files.
Added CustomLandingStrip.java to .\/spikes\ repository source files.
Added CustomTabActivity.java to .\/spikes\ repository source files.
Added ExampleRainbowLandingStrip.java to .\/spikes\ repository source files.
Added FixedWidthTabActivity.java to .\/spikes\ repository source files.
Added NoFragmentsSimpleTextTabActivity.java to .\/spikes\ repository source files.
Added Data.java to .\/spikes\ repository source files.
Added DemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added SmallDemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerFragment.java to .\/spikes\ repository source files.
Added DemoViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapterState.java to .\/spikes\ repository source files.
Added SimpleTextTabActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AbTestingParamsLoadedCallback.java to .\/spikes\ repository source files.
Added AyBe.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added WeakStartCallback.java to .\/spikes\ repository source files.
Added LeakActivity.java to .\/spikes\ repository source files.
Added NoLeakActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added ColorScheme.java to .\/spikes\ repository source files.
Added ColorUtils.java to .\/spikes\ repository source files.
Added DominantColorCalculator.java to .\/spikes\ repository source files.
Added FloatUtils.java to .\/spikes\ repository source files.
Added MedianCutQuantizer.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added PayPalFragment.java to .\/spikes\ repository source files.
Added PayPalHelper.java to .\/spikes\ repository source files.
Added MaxLengthMessageComposer.java to .\/spikes\ repository source files.
Added MessageComposer.java to .\/spikes\ repository source files.
Added TwitterMessageComposer.java to .\/spikes\ repository source files.
Added DisabledMruPersister.java to .\/spikes\ repository source files.
Added MruPersister.java to .\/spikes\ repository source files.
Added SharedPreferencesMruPersister.java to .\/spikes\ repository source files.
Added OnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added PriorityShareDialog.java to .\/spikes\ repository source files.
Added PrioritySharer.java to .\/spikes\ repository source files.
Added ShareTargetsAdapter.java to .\/spikes\ repository source files.
Added SimpleOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added TargetApps.java to .\/spikes\ repository source files.
Added TwitterOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AdvancedActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SimpleActivity.java to .\/spikes\ repository source files.
Added LockingActivity.java to .\/spikes\ repository source files.
Added PostLockingActivity.java to .\/spikes\ repository source files.
Added PreLockingActivity.java to .\/spikes\ repository source files.
Added DummyAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added NovoStaggeredGridView.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SpikeApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SwipeableView.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MyClass.java to .\/spikes\ repository source files.
Added MyClassTest.java to .\/spikes\ repository source files.
Added MyAndroidClassTest.java to .\/spikes\ repository source files.
Added RobolectricGradleTestRunner.java to .\/spikes\ repository source files.
Added Mapper.java to .\/spikes\ repository source files.
Added Query.java to .\/spikes\ repository source files.
Added TypedResolver.java to .\/spikes\ repository source files.
Added CursorList.java to .\/spikes\ repository source files.
Added CursorListIterator.java to .\/spikes\ repository source files.
Added CursorMarshaller.java to .\/spikes\ repository source files.
Added EmptyListIterator.java to .\/spikes\ repository source files.
Added ReflectionCursorMarshaller.java to .\/spikes\ repository source files.
Added RichClass.java to .\/spikes\ repository source files.
Added Setter.java to .\/spikes\ repository source files.
Added Function.java to .\/spikes\ repository source files.
Added TypedElementLoader.java to .\/spikes\ repository source files.
Added TypedLoader.java to .\/spikes\ repository source files.
Added Marshaller.java to .\/spikes\ repository source files.
Added ObjectMapper.java to .\/spikes\ repository source files.
Added TypedActivity.java to .\/spikes\ repository source files.
Added StringUtil.java to .\/spikes\ repository source files.
Added MyObject.java to .\/spikes\ repository source files.
Added MediaPlayerSwitcherActivity.java to .\/spikes\ repository source files.
Added VideoPlayerService.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added RecognitionService.java to .\/spikes\ repository source files.
Added SessionService.java to .\/spikes\ repository source files.
Added SettingsActivity.java to .\/spikes\ repository source files.
Added SmartContextInteractionService.java to .\/spikes\ repository source files.
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
String[] planetTitles = new String[]{"Earth", "Saturn"};
DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
ListView drawerList = (ListView) findViewById(R.id.left_drawer);
Intent intent;
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close);
b=getIntent().getExtras()
Bundle b = getIntent().getExtras();
mShouldStartPlayback=b.getBoolean("shouldStart")
boolean mShouldStartPlayback = b.getBoolean("shouldStart");
startPosition=b.getInt("startPosition",0)
int startPosition = b.getInt("startPosition", 0);
currentPos=mVideoView.getCurrentPosition()
int currentPos = mVideoView.getCurrentPosition();
String msg;
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, mDisplaySize.y + getActionBar().getHeight());
mm=mSelectedMedia.getMetadata()
MediaMetadata mm = mSelectedMedia.getMetadata();
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, (int) (mDisplaySize.x * ASPECT_RATIO));
WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
width=display.getWidth()
int width = display.getWidth();
height=display.getHeight()
int height = display.getHeight();
int resourceId = 0;
String videoUrl = "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4#sthash.rJ5rPZy8.dpuf";
String title = "Jahre Philharmonie";
String description = "Awesome film you must watch!";
String author = "Blundell";
String thumbUrl = "http://www.ustream.tv/blog/wp-content/uploads/2013/10/simply-go-live.png";
MediaMetadata metadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE);
mediaInfo=new MediaInfo.Builder(videoUrl).setMetadata(metadata).setStreamType(MediaInfo.STREAM_TYPE_BUFFERED).setContentType("video/mp4").build()
MediaInfo mediaInfo = new MediaInfo.Builder(videoUrl)
                        .setMetadata(metadata)
                        .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)
                        .setContentType("video/mp4")
                        .build();
Intent intent = new Intent(MainActivity.this, LocalPlayerActivity.class);
preferences=getPreferences(MODE_PRIVATE)
SharedPreferences preferences = getPreferences(MODE_PRIVATE);
defaultSmsPackage=Telephony.Sms.getDefaultSmsPackage(this)
String defaultSmsPackage = Telephony.Sms.getDefaultSmsPackage(this);
Intent intent = new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
availableAppProvider=EasyCustomTabs.getInstance()
AvailableAppProvider availableAppProvider = EasyCustomTabs.getInstance();
ConnectedClient connectedClient = new ConnectedClient(client);
binder=Binder.newInstance()
Binder binder = Binder.newInstance();
List<Composer> composerList = new ArrayList<>();
customTabsSession=connection.newSession()
CustomTabsSession customTabsSession = connection.newSession();
CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(customTabsSession);
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
context=EasyCustomTabs.getInstance().getContext()
Context context = EasyCustomTabs.getInstance().getContext();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
packagesSupportingCustomTabs=getPackagesSupportingCustomTabs()
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
defaultPackage=getDefaultPackage()
String defaultPackage = getDefaultPackage();
defaultActivityInfo=packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK,0)
ResolveInfo defaultActivityInfo = packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK, 0);
String packageName = defaultActivityInfo.activityInfo.packageName;
resolvedInfoList=packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK,0)
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<String> packagesSupportingCustomTabs = new ArrayList<>();
Intent serviceIntent = new Intent();
bestPackageFinder=BestPackageFinder.newInstance()
BestPackageFinder bestPackageFinder = BestPackageFinder.newInstance();
packageName=bestPackageFinder.findBestPackage()
String packageName = bestPackageFinder.findBestPackage();
resolveInfo=createResolveInfoFor(packageName)
ResolveInfo resolveInfo = createResolveInfoFor(packageName);
ResolveInfo resolveInfo = new ResolveInfo();
List<ResolveInfo> resolveInfoList = new ArrayList<>();
defaultPackageResolveInfo=createResolveInfoFor(packageName)
ResolveInfo defaultPackageResolveInfo = createResolveInfoFor(packageName);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
oldestApiMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage oldestApiMessage = apiMessages.get(apiMessages.size() - 1);
String lastResponseEpochTime = oldestApiMessage.timeStamp;
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
latestMessage=latestMessages.get(latestMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage latestMessage = latestMessages.get(latestMessages.size() - 1);
latestMessageDateTime=convertToLocalDateTime(latestMessage.timeStamp)
LocalDateTime latestMessageDateTime = convertToLocalDateTime(latestMessage.timeStamp);
List<ChannelHistory.Message> messages = new ArrayList<>();
historyFrom=getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1))
LocalDateTime historyFrom = getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1));
historyTo=getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0))
LocalDateTime historyTo = getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0));
String text = apiMessage.text;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
lastMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage lastMessage = apiMessages.get(apiMessages.size() - 1);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
firstMessage=apiMessages.get(0)
ApiPagedChannelHistory.ApiMessage firstMessage = apiMessages.get(0);
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
String slackToken = args[0];
retrofit=new Retrofit.Builder().baseUrl("https://slack.com/api/").addConverterFactory(GsonConverterFactory.create()).build()
Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://slack.com/api/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();
slackWebService=retrofit.create(SlackWebService.class)
SlackWebService slackWebService = retrofit.create(SlackWebService.class);
slackHistoryFetcher=SlackHistoryFetcher.from(slackWebService,slackToken)
SlackHistoryFetcher slackHistoryFetcher = SlackHistoryFetcher.from(slackWebService, slackToken);
start=LocalDateTime.now()
LocalDateTime start = LocalDateTime.now();
end=LocalDateTime.now().minusDays(7)
LocalDateTime end = LocalDateTime.now().minusDays(7);
channelHistory=slackHistoryFetcher.getChannelHistory(start,end)
ChannelHistory channelHistory = slackHistoryFetcher.getChannelHistory(start, end);
HistoryConverter historyConverter = new HistoryConverter();
ApiPagedResponse apiPagedResponse = new ApiPagedResponse(start);
response=fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime())
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
apiPagedChannelHistory=response.body()
ApiPagedChannelHistory apiPagedChannelHistory = response.body();
channelHistory=slackWebService.getChannelHistory(slackToken,channel,lastResponseEpochTime,NUMBER_OF_RESULTS)
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
ApiPagedChannelHistory apiPagedChannelHistory = new ApiPagedChannelHistory();
ApiPagedChannelHistory.ApiMessage apiMessage = new ApiPagedChannelHistory.ApiMessage();
final TextView textView = new TextView(context);
emptyView=findViewById(R.id.empty_view)
View emptyView = findViewById(R.id.empty_view);
final Integer action = values[0];
LoremAdapter loremAdapter = new LoremAdapter();
accounts=accountManager.getAccountsByType(accountType)
Account[] accounts = accountManager.getAccountsByType(accountType);
Bundle result;
Bundle result;
Bundle result = new Bundle();
activity=createLoginIntent(context,accountType,authTokenType,requiredFeatures,options)
Intent activity = createLoginIntent(context, accountType, authTokenType, requiredFeatures, options);
Bundle bundle = new Bundle();
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
accounts=accountManager.getAccountsByType(authTokenType)
Account[] accounts = accountManager.getAccountsByType(authTokenType);
bundle=createResponseBundle(token)
Bundle bundle = createResponseBundle(token);
accountManager=AccountManager.get(this.getApplicationContext())
AccountManager accountManager = AccountManager.get(this.getApplicationContext());
Account account = new Account(token.getUserName(), getAccountName());
Bundle bundle = new Bundle();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
GertHerbAuthenticator authenticator = new GertHerbAuthenticator(this);
fontId=getFontId(context,attrs)
int fontId = getFontId(context, attrs);
fontType=getFontType(fontId)
FontType fontType = getFontType(fontId);
typedArray=context.obtainStyledAttributes(attrs,R.styleable.CustomTextAppearance)
TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CustomTextAppearance);
typeface=createTypeFace(context,fontType)
Typeface typeface = createTypeFace(context, fontType);
info=context.getApplicationInfo()
ApplicationInfo info = context.getApplicationInfo();
name=activity.getTitle().toString()
String name = activity.getTitle().toString();
client=mServer.accept()
Socket client = mServer.accept();
boolean result;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
BufferedReader in = null;
request=in.readLine()
final String request = in.readLine();
String command;
String parameters;
index=request.indexOf(' ')
int index = request.indexOf(' ');
boolean result;
boolean success = true;
BufferedWriter out = null;
index=parameters.indexOf(' ')
int index = parameters.indexOf(' ');
code=parameters.substring(0,index)
final String code = parameters.substring(0, index);
int hashCode = (int) Long.parseLong(code, 16);
window=findWindow(hashCode)
final View window = findWindow(hashCode);
dispatch=ViewDebug.class.getDeclaredMethod("dispatchCommand",View.class,String.class,String.class,OutputStream.class)
final Method dispatch = ViewDebug.class.getDeclaredMethod("dispatchCommand",
                        View.class, String.class, String.class, OutputStream.class);
View window = null;
boolean result = true;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
boolean result = true;
String focusName = null;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
View focusedWindow = null;
BufferedWriter out = null;
boolean needWindowListUpdate = false;
boolean needFocusedWindowUpdate = false;
BetterAccountManager accountManager = new BetterAccountManager(this, getString(R.string.account_type), getString(R.string.token_type), null);
loginView=Views.findById(this,R.id.login_view)
LoginView loginView = Views.findById(this, R.id.login_view);
authorizationApi=new GithubApiFactory().createAuthorizationApi(credentials.username,credentials.password)
GithubApi authorizationApi = new GithubApiFactory().createAuthorizationApi(credentials.username, credentials.password);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
Endpoint endpoint = new Endpoint() {
            @Override
            public String getUrl() {
                return GITHUB_API_URL;
            }

            @Override
            public String getName() {
                return "Live";
            }
        };
interceptor=createAuthorizationRequestInterceptor(username,password)
RequestInterceptor interceptor = createAuthorizationRequestInterceptor(username, password);
restAdapter=createRestAdapter(endpoint,interceptor)
RestAdapter restAdapter = createRestAdapter(endpoint, interceptor);
Dummy dummy = new Dummy();
result=dummy.explodes()
boolean result = dummy.explodes();
String base64EncodedPublicKey = "CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE";
premiumPurchase=inventory.getPurchase(SKU_PREMIUM)
Purchase premiumPurchase = inventory.getPurchase(SKU_PREMIUM);
infiniteGasPurchase=inventory.getPurchase(SKU_INFINITE_GAS)
Purchase infiniteGasPurchase = inventory.getPurchase(SKU_INFINITE_GAS);
gasPurchase=inventory.getPurchase(SKU_GAS)
Purchase gasPurchase = inventory.getPurchase(SKU_GAS);
String payload = "";
String payload = "";
String payload = "";
payload=p.getDeveloperPayload()
String payload = p.getDeveloperPayload();
int index = mTank >= TANK_RES_IDS.length ? TANK_RES_IDS.length - 1 : mTank;
AlertDialog.Builder bld = new AlertDialog.Builder(this);
spe=getPreferences(MODE_PRIVATE).edit()
SharedPreferences.Editor spe = getPreferences(MODE_PRIVATE).edit();
sp=getPreferences(MODE_PRIVATE)
SharedPreferences sp = getPreferences(MODE_PRIVATE);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                                  + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                    | ((source[d + 1 + off] << 24) >>> 16)
                    | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                    | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                                   "-1002:Bad response received/" +
                                   "-1003:Purchase signature verification failed/" +
                                   "-1004:Send intent failed/" +
                                   "-1005:User cancelled/" +
                                   "-1006:Unknown purchase response/" +
                                   "-1007:Missing token/" +
                                   "-1008:Unknown error/" +
                                   "-1009:Subscriptions not available/" +
                                   "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(),
                    itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                        | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                        | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                            | ((source[d + 1 + off] << 24) >>> 16)
                            | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                            | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                "-1002:Bad response received/" +
                "-1003:Purchase signature verification failed/" +
                "-1004:Send intent failed/" +
                "-1005:User cancelled/" +
                "-1006:Unknown purchase response/" +
                "-1007:Missing token/" +
                "-1008:Unknown error/" +
                "-1009:Subscriptions not available/" +
                "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(), itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
responseCode=result.getResponse()
int responseCode = result.getResponse();
sku=purchase.getSku()
String sku = purchase.getSku();
skuDetails=inv.getSkuDetails(sku)
SkuDetails skuDetails = inv.getSkuDetails(sku);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
Button purchaseFiveButton = (Button) rootView.findViewById(R.id.fragment_main_button_purchase_five_coins);
xml=context.obtainStyledAttributes(attrs,R.styleable.LandingStrip)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.LandingStrip);
tabLayoutId=xml.getResourceId(R.styleable.LandingStrip_tabLayoutId,MISSING_TAB_LAYOUT_ID)
int tabLayoutId = xml.getResourceId(R.styleable.LandingStrip_tabLayoutId, MISSING_TAB_LAYOUT_ID);
indicatorColour=xml.getResourceId(R.styleable.LandingStrip_indicatorColor,DEFAULT_INDICATOR_COLOUR)
int indicatorColour = xml.getResourceId(R.styleable.LandingStrip_indicatorColor, DEFAULT_INDICATOR_COLOUR);
indicatorHeight=getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight,DEFAULT_INDICATOR_HEIGHT,xml)
int indicatorHeight = getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight, DEFAULT_INDICATOR_HEIGHT, xml);
tabsPaddingLeft=getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingLeft = getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding, DEFAULT_TABS_PADDING, xml);
tabsPaddingRight=getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingRight = getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding, DEFAULT_TABS_PADDING, xml);
MutableCoordinates drawCurrentTabCoordinates = new MutableCoordinates();
MutableCoordinates drawNextTabCoordinates = new MutableCoordinates();
MutableCoordinates drawMovingIndicatorCoordinates = new MutableCoordinates();
currentTab=tabsContainer.getTabAt(currentPosition)
View currentTab = tabsContainer.getTabAt(currentPosition);
currentTabStart=currentTab.getLeft()
float currentTabStart = currentTab.getLeft();
currentTabEnd=currentTab.getRight()
float currentTabEnd = currentTab.getRight();
nextTab=tabsContainer.getTabAt(currentPosition + 1)
View nextTab = tabsContainer.getTabAt(currentPosition + 1);
nextTabPositionOffset=getFractionFrom(pagePositionOffset)
float nextTabPositionOffset = getFractionFrom(pagePositionOffset);
indicatorStart=getIndicatorPosition(nextTab.getStart(),pagePositionOffset,currentTab.getStart(),nextTabPositionOffset)
float indicatorStart = getIndicatorPosition(nextTab.getStart(), pagePositionOffset, currentTab.getStart(), nextTabPositionOffset);
indicatorEnd=getIndicatorPosition(nextTab.getEnd(),pagePositionOffset,currentTab.getEnd(),nextTabPositionOffset)
float indicatorEnd = getIndicatorPosition(nextTab.getEnd(), pagePositionOffset, currentTab.getEnd(), nextTabPositionOffset);
height=getHeight()
int height = getHeight();
tabCount=pagerAdapter.getCount()
int tabCount = pagerAdapter.getCount();
title=pagerAdapter.getPageTitle(position)
CharSequence title = pagerAdapter.getPageTitle(position);
inflatedTabView=tabsContainer.inflateTab(layoutInflater,attributes.getTabLayoutId())
View inflatedTabView = tabsContainer.inflateTab(layoutInflater, attributes.getTabLayoutId());
int position = (int) view.getTag(TAG_KEY_POSITION);
scrollOffset=getHorizontalScrollOffset(position,positionOffset)
int scrollOffset = getHorizontalScrollOffset(position, positionOffset);
newScrollX=calculateScrollOffset(position,scrollOffset,positionOffset)
float newScrollX = calculateScrollOffset(position, scrollOffset, positionOffset);
tabWidth=tabsContainer.getTabAt(position).getWidth()
int tabWidth = tabsContainer.getTabAt(position).getWidth();
tabForPosition=tabsContainer.getTabAt(position)
View tabForPosition = tabsContainer.getTabAt(position);
float tabStartX = tabForPosition.getLeft() + scrollOffset;
int viewMiddleOffset = getTabParentWidth() / 2;
float tabCenterOffset = (tabForPosition.getRight() - tabForPosition.getLeft()) * 0.5F;
nextTabDelta=getNextTabDelta(position,pagerOffset,tabForPosition)
float nextTabDelta = getNextTabDelta(position, pagerOffset, tabForPosition);
LinearLayout tabsContainerView = new LinearLayout(context);
tab=getTabAt(index)
View tab = getTabAt(index);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
position=indicatorCoordinates.getStart()
float position = indicatorCoordinates.getStart();
lastTabOffset=((ViewGroup)getChildAt(0)).getChildAt(getChildCount() - 1).getWidth()
float lastTabOffset = ((ViewGroup) getChildAt(0)).getChildAt(getChildCount() - 1).getWidth();
frequency=getOneCycle(lastTabOffset)
float frequency = getOneCycle(lastTabOffset);
r=toHex(calculateColour(position,frequency,PHASE_RED,AMPLITUDE,CENTER_FREQUENCY))
String r = toHex(calculateColour(position, frequency, PHASE_RED, AMPLITUDE, CENTER_FREQUENCY));
g=toHex(calculateColour(position,frequency,PHASE_GREEN,AMPLITUDE,CENTER_FREQUENCY))
String g = toHex(calculateColour(position, frequency, PHASE_GREEN, AMPLITUDE, CENTER_FREQUENCY));
b=toHex(calculateColour(position,frequency,PHASE_BLUE,AMPLITUDE,CENTER_FREQUENCY))
String b = toHex(calculateColour(position, frequency, PHASE_BLUE, AMPLITUDE, CENTER_FREQUENCY));
height=getHeight()
int height = getHeight();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);

 Generics pattern public class DemoFragmentPagerAdapter was added at revision 5a63ebc3b9650a8d9855fcda5ea156f68a738e0c

ViewPagerFragment viewPagerFragment = new ViewPagerFragment();
Bundle bundle = new Bundle();
TextView view = (TextView) layoutInflater.inflate(R.layout.view_demo, container, false);
currentPosition=viewPagerAdapterState.getCurrentPosition()
int currentPosition = viewPagerAdapterState.getCurrentPosition();
view=getView(container,position)
View view = getView(container, position);
parcelableSparseArray=viewPagerAdapterState.get(position)
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
View view = (View) object;
SparseArray<Parcelable> viewState = new SparseArray<>();
position=entry.getValue()
int position = entry.getValue();
view=entry.getKey()
View view = entry.getKey();
bundle=in.readBundle()
Bundle bundle = in.readBundle();
Map<Integer, SparseArray<Parcelable>> viewStates = new HashMap<>(bundle.keySet().size());
sparseParcelableArray=bundle.getSparseParcelableArray(key)
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
primaryItemPosition=in.readInt()
int primaryItemPosition = in.readInt();
Bundle bundle = new Bundle();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
final TextView abText = (TextView) findViewById(R.id.ab_text);
final AyBe ayBe = new AyBe();
id=item.getItemId()
int id = item.getItemId();
callback=weakCallback.get()
AbTestingParamsLoadedCallback callback = weakCallback.get();
WeakReference<NoLeakActivity> weakNoLeakActivity = new WeakReference<NoLeakActivity>(noLeakActivity);
noLeakActivity=weakNoLeakActivity.get()
NoLeakActivity noLeakActivity = weakNoLeakActivity.get();
final float inverseRatio = 1f - ratio;
float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRatio);
float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRatio);
float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRatio);
hsv=node.getHsv()
float[] hsv = node.getHsv();
width=bitmap.getWidth()
final int width = bitmap.getWidth();
height=bitmap.getHeight()
final int height = bitmap.getHeight();
final int[] rgbPixels = new int[width * height];
final MedianCutQuantizer mcq = new MedianCutQuantizer(rgbPixels, NUM_COLORS);
primaryAccentColor=findPrimaryAccentColor()
final ColorNode primaryAccentColor = findPrimaryAccentColor();
secondaryAccentColor=findSecondaryAccentColor(primaryAccentColor)
final ColorNode secondaryAccentColor = findSecondaryAccentColor(primaryAccentColor);
tertiaryAccentColor=findTertiaryAccentColor(primaryAccentColor,secondaryAccentColor)
final int tertiaryAccentColor = findTertiaryAccentColor(
                primaryAccentColor, secondaryAccentColor);
primaryTextColor=findPrimaryTextColor(primaryAccentColor)
final int primaryTextColor = findPrimaryTextColor(primaryAccentColor);
secondaryTextColor=findSecondaryTextColor(primaryAccentColor)
final int secondaryTextColor = findSecondaryTextColor(primaryAccentColor);
final float primaryHue = primary.getHsv()[0];
final float candidateHue = candidate.getHsv()[0];
copy=Arrays.copyOf(palette,palette.length)
final MedianCutQuantizer.ColorNode[] copy = Arrays.copyOf(palette, palette.length);
maxCount=palette[0].getCount()
final float maxCount = palette[0].getCount();
lhsWeight=calculateWeight(lhs,maxCount)
final float lhsWeight = calculateWeight(lhs, maxCount);
rhsWeight=calculateWeight(rhs,maxCount)
final float rhsWeight = calculateWeight(rhs, maxCount);
float sum = 0;
float sumWeight = 0;
float value = values[i];
float weight = values[i + 1];
ColorHistogram colorHist = new ColorHistogram(pixels);
K=colorHist.getNumberOfColors()
int K = colorHist.getNumberOfColors();
ColorNode[] rCols = null;
rgb=colorHist.getColor(i)
int rgb = colorHist.getColor(i);
cnt=colorHist.getCount(i)
int cnt = colorHist.getCount(i);
ColorBox initialBox = new ColorBox(0, K - 1, 0);
List<ColorBox> colorSet = new ArrayList<ColorBox>();
int k = 1;
boolean done = false;
nextBox=findBoxToSplit(colorSet)
ColorBox nextBox = findBoxToSplit(colorSet);
newBox=nextBox.splitBox()
ColorBox newBox = nextBox.splitBox();
color=findClosestColor(pixels[i])
ColorNode color = findClosestColor(pixels[i]);
idx=findClosestColorIndex(rgb)
int idx = findClosestColorIndex(rgb);
red=Color.red(rgb)
int red = Color.red(rgb);
grn=Color.green(rgb)
int grn = Color.green(rgb);
blu=Color.blue(rgb)
int blu = Color.blue(rgb);
int minIdx = 0;
int minDistance = Integer.MAX_VALUE;
ColorNode color = quantColors[i];
d2=color.distance2(red,grn,blu)
int d2 = color.distance2(red, grn, blu);
ColorBox boxToSplit = null;
int minLevel = Integer.MAX_VALUE;
n=colorBoxes.size()
int n = colorBoxes.size();
ColorNode[] avgColors = new ColorNode[n];
int i = 0;
int dr = this.red - red;
int dg = this.grn - grn;
int db = this.blu - blu;
ColorNode color = imageColors[i];
int r = color.red;
int g = color.grn;
int b = color.blu;
dim=getLongestColorDimension()
ColorDimension dim = getLongestColorDimension();
med=findMedian(dim)
int med = findMedian(dim);
int nextLevel = level + 1;
ColorBox newBox = new ColorBox(med + 1, upper, nextLevel);
int rLength = rmax - rmin;
int gLength = gmax - gmin;
int bLength = bmax - bmin;
int half = count / 2;
int nPixels, median;
int rSum = 0;
int gSum = 0;
int bSum = 0;
int n = 0;
ColorNode ci = imageColors[i];
int cnt = ci.cnt;
double nd = n;
int avgRed = (int) (0.5 + rSum / nd);
int avgGrn = (int) (0.5 + gSum / nd);
int avgBlu = (int) (0.5 + bSum / nd);
s=this.getClass().getSimpleName()
String s = this.getClass().getSimpleName();
int i = 0;
int N = pixelsOrig.length;
int[] pixelsCpy = new int[N];
int k = -1;
int curColor = -1;
int nColors = k + 1;
id=item.getItemId()
int id = item.getItemId();
Intent intent = new Intent();
bitmap=((BitmapDrawable)imageView.getDrawable()).getBitmap()
Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap();
DominantColorCalculator dominantColorCalculator = new DominantColorCalculator(bitmap);
selectedImageUri=data.getData()
Uri selectedImageUri = data.getData();
selectedImagePath=getPath(selectedImageUri)
String selectedImagePath = getPath(selectedImageUri);
String[] projection = {MediaStore.Images.Media.DATA};
cursor=managedQuery(uri,projection,null,null,null)
Cursor cursor = managedQuery(uri, projection, null, null, null);
column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)
int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
LinearLayout rootView = (LinearLayout) inflater.inflate(R.layout.fragment_main, container, false);
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
preapprovalButton=payPal.getCheckoutButton(getActivity(),PayPal.BUTTON_194x37,CheckoutButton.TEXT_PAY)
CheckoutButton preapprovalButton = payPal.getCheckoutButton(getActivity(), PayPal.BUTTON_194x37, CheckoutButton.TEXT_PAY);
preapprovalIntent=payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY)
Intent preapprovalIntent = payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY);
String resultTitle = "";
String resultInfo = "";
String resultExtra = "";
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
PayPalPreapproval preapproval = new PayPalPreapproval();
preapproval=createPreapproval(preapprovalKey)
PayPalPreapproval preapproval = createPreapproval(preapprovalKey);
Bundle bundle = new Bundle();
int availableLength = maxLength;
StringBuilder stringBuilder = new StringBuilder(maxLength);
prefixAndSuffixLength=computeAppendedLengthIncludingSeparatorSpaces(prefix,suffix)
int prefixAndSuffixLength = computeAppendedLengthIncludingSeparatorSpaces(prefix, suffix);
urlLength=computeUrlLengthIncludingSeparatorSpace(url)
int urlLength = computeUrlLengthIncludingSeparatorSpace(url);
trimmedSubject=ellipsizeTextIfExceedsMaxLength(subject,availableLength)
String trimmedSubject = ellipsizeTextIfExceedsMaxLength(subject, availableLength);
int length = 0;
preferences=context.getSharedPreferences(MRU_PREFERENCES,Context.MODE_PRIVATE)
SharedPreferences preferences = context.getSharedPreferences(MRU_PREFERENCES, Context.MODE_PRIVATE);
args=getArguments()
Bundle args = getArguments();
themeResId=getThemeResIdIfProvidedIn(args)
int themeResId = getThemeResIdIfProvidedIn(args);
title=getTitleIfProvidedIn(args)
CharSequence title = getTitleIfProvidedIn(args);
builder=createDialogBuilder(themeResId).setCancelable(true).setView(dialogView)
AlertDialog.Builder builder = createDialogBuilder(themeResId)
                .setCancelable(true)
                .setView(dialogView);
inflater=getActivity().getLayoutInflater()
LayoutInflater inflater = getActivity().getLayoutInflater();
GridView gridView = (GridView) rootView.findViewById(R.id.ps__dialog_grid);
targetApps=extractTargetAppsFrom(args)
TargetApps targetApps = extractTargetAppsFrom(args);
allShareTargets=getAvailableShareTargets(sharingIntent)
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
priorityAppInfos=createPriorityResolveInfoList(targetApps,allShareTargets)
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
otherAppInfos=createOtherAppsResolveInfoList(priorityAppInfos,allShareTargets)
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
resolveInfos=targetApps.extractTargetResolveInfosFrom(allShareTargets)
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
mruResolveInfo=findMruResolveInfoIn(allShareTargets)
ResolveInfo mruResolveInfo = findMruResolveInfoIn(allShareTargets);
List<ResolveInfo> otherAppsInfos = new ArrayList<ResolveInfo>(allAppInfos);
mruPackageName=persister.getLastUsedTarget()
String mruPackageName = persister.getLastUsedTarget();
String packageName = resolveInfo.activityInfo.packageName;
packageManager=getActivity().getPackageManager()
PackageManager packageManager = getActivity().getPackageManager();
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
View buttonStrip = (View) showMoreButton.getParent();
gridView=getGridView()
GridView gridView = getGridView();
intent=wrapIntentWithExplicitTargetComponentForItem(position,sharingIntent)
Intent intent = wrapIntentWithExplicitTargetComponentForItem(position, sharingIntent);
Intent intent = new Intent(sharingIntent);
ActivityInfo activity = adapter.getItem(position).activityInfo;
ComponentName name = new ComponentName(activity.applicationInfo.packageName, activity.name);
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
PriorityShareDialog dialog = new PriorityShareDialog();
Bundle args = new Bundle();
sharingIntent=createSharingIntent()
Intent sharingIntent = createSharingIntent();
fragmentManager=activity.getFragmentManager()
FragmentManager fragmentManager = activity.getFragmentManager();
Intent intent = new Intent(Intent.ACTION_SEND);
dialog=new PriorityShareDialog.Builder().setTitle(title).setTargetApps(targetApps).setSharingIntent(sharingIntent).setOnPrepareSharingIntentListener(listener).setShowMostRecentlyUsed(showMostRecentlyUsed).build()
PriorityShareDialog dialog = new PriorityShareDialog.Builder()
                .setTitle(title)
                .setTargetApps(targetApps)
                .setSharingIntent(sharingIntent)
                .setOnPrepareSharingIntentListener(listener)
                .setShowMostRecentlyUsed(showMostRecentlyUsed)
                .build();
PrioritySharer prioritySharer = new PrioritySharer();
prioritySharer=build()
PrioritySharer prioritySharer = build();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
layoutInflater=LayoutInflater.from(context)
LayoutInflater layoutInflater = LayoutInflater.from(context);
iconSizePx=getIconSizePx(context.getResources())
int iconSizePx = getIconSizePx(context.getResources());
ArrayList<ResolveInfo> sortedList = new ArrayList<ResolveInfo>(resolveInfoList);
int otherAppsCountMaybe = showAllApps ? otherAppInfos.size() : 0;
firstOtherAppsItemPosition=priorityAppInfos.size()
int firstOtherAppsItemPosition = priorityAppInfos.size();
int offsetPosition = position - firstOtherAppsItemPosition;
TextView textView;
textView=initializeItemViewIfNecessary(convertView,R.layout.ps__grid_item_share,parent)
TextView textView = initializeItemViewIfNecessary(convertView, R.layout.ps__grid_item_share, parent);
info=getItem(position)
ResolveInfo info = getItem(position);
icon=info.loadIcon(packageManager)
Drawable icon = info.loadIcon(packageManager);
arraySize=in.readInt()
int arraySize = in.readInt();
String[] packageNames = new String[arraySize];
arraySize=targetPackages.size()
int arraySize = targetPackages.size();
String[] packagesArray = new String[arraySize];
SparseArray<ResolveInfo> matchedResolveInfos = new SparseArray<ResolveInfo>(targetPackages.size());
String packageName = info.activityInfo.packageName;
index=indexOfItemInto(packageName,targetPackages)
int index = indexOfItemInto(packageName, targetPackages);
sparseArraySize=sparseArray.size()
int sparseArraySize = sparseArray.size();
ArrayList<T> list = new ArrayList<T>(sparseArraySize);
int i = 0;
originalSubject=intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT)
CharSequence originalSubject = intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT);
String subject = originalSubject != null ? originalSubject.toString() : null;
composer=createComposer()
MessageComposer composer = createComposer();
component=intent.getComponent()
ComponentName component = intent.getComponent();
targetPackageName=component.getPackageName()
String targetPackageName = component.getPackageName();
adapter=ArrayAdapter.createFromResource(this,R.array.target_apps,android.R.layout.simple_spinner_item)
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
EditText text = (EditText) findViewById(R.id.text);
EditText title = (EditText) findViewById(R.id.title);
EditText mimeType = (EditText) findViewById(R.id.mime_type);
EditText dataUri = (EditText) findViewById(R.id.data_uri);
Switch showMostRecentlyUsed = (Switch) findViewById(R.id.show_most_recently_used);
uriString=dataUri.getText().toString()
String uriString = dataUri.getText().toString();
EditText text = (EditText) findViewById(R.id.text);
TextView textView = (TextView) convertView.findViewById(R.id.positionView);
colorView=convertView.findViewById(R.id.colorView)
View colorView = convertView.findViewById(R.id.colorView);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
offset=headerPlaceholder.getTop()
int offset = headerPlaceholder.getTop();
Integer item = COLORS[position];
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
firstVisiblePosition=grid.getFirstVisiblePosition()
int firstVisiblePosition = grid.getFirstVisiblePosition();
inflate=getViewForPosition(container,position)
View inflate = getViewForPosition(container, position);
id=item.getItemId()
int id = item.getItemId();
MyActivity activity = new MyActivity();
String manifestProperty = "../app/src/main/AndroidManifest.xml";
String resProperty = "../app/src/main/res";
cursor=resolver.query(uri,projection,selection,selectionArgs,null)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, null);
cursor=resolver.query(uri,projection,selection,selectionArgs,sortOrder)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, sortOrder);
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=richClass.setter(name)
Method setter = richClass.setter(name);
T obj;
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=methodsByName.get(name)
Method setter = methodsByName.get(name);
int type = TYPE_INT;
Class<?> t = setter.getParameterTypes()[0];
Class<?> t = setter.getParameterTypes()[0];
cursorType=cursor.getType(index)
final int cursorType = cursor.getType(index);
final Object obj;
s=f.getAnnotation(Mapper.class)
Mapper s = f.getAnnotation(Mapper.class);
mm=m.getAnnotation(Mapper.class)
Mapper mm = m.getAnnotation(Mapper.class);
methodName=StringUtil.asCamelifySetMethod(what)
String methodName = StringUtil.asCamelifySetMethod(what);
cursor=getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,null,null,null,null)
Cursor cursor = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
now=System.currentTimeMillis()
long now = System.currentTimeMillis();
List<Contact2> typedCursor = new CursorList<Contact2>(cursor, Contact2.class);
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[a-zA-Z0-9]+")
Pattern p = Pattern.compile("[a-zA-Z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[A-Z][a-z0-9]+")
Pattern p = Pattern.compile("[A-Z][a-z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
SurfaceView first = (SurfaceView) findViewById(R.id.firstSurface);
SurfaceView second = (SurfaceView) findViewById(R.id.secondSurface);
Intent pickVideo = new Intent(Intent.ACTION_PICK);
Bundle args = new Bundle();
enroll=mHotwordDetector.createEnrollIntent()
Intent enroll = mHotwordDetector.createEnrollIntent();

Diff of 5a63ebc3b9650a8d9855fcda5ea156f68a738e0c and 41182657790d60fdd6ae32f23ec247fd508372cd:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 35
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 5a63ebc3b9650a8d9855fcda5ea156f68a738e0c to 41182657790d60fdd6ae32f23ec247fd508372cd


****Parsing for addition at revision 41182657790d60fdd6ae32f23ec247fd508372cd****

Added ApplicationTest.java to .\/spikes\ repository source files.
Added DrawerActivity.java to .\/spikes\ repository source files.
Added EarthActivity.java to .\/spikes\ repository source files.
Added SaturnActivity.java to .\/spikes\ repository source files.
Added LocalPlayerActivity.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added CastApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ComposeSmsActivity.java to .\/spikes\ repository source files.
Added HeadlessSmsSendService.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MmsReceiver.java to .\/spikes\ repository source files.
Added SmsReceiver.java to .\/spikes\ repository source files.
Added ExtendedDemoActivity.java to .\/spikes\ repository source files.
Added ExtendedDemoApplication.java to .\/spikes\ repository source files.
Added SimpleDemoActivity.java to .\/spikes\ repository source files.
Added SimpleDemoApplication.java to .\/spikes\ repository source files.
Added Binder.java to .\/spikes\ repository source files.
Added ConnectedClient.java to .\/spikes\ repository source files.
Added Connection.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnection.java to .\/spikes\ repository source files.
Added ServiceConnectionCallback.java to .\/spikes\ repository source files.
Added EasyCustomTabs.java to .\/spikes\ repository source files.
Added ActionButtonComposer.java to .\/spikes\ repository source files.
Added CloseButtonIconComposer.java to .\/spikes\ repository source files.
Added Composer.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilder.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigator.java to .\/spikes\ repository source files.
Added EasyCustomTabsWebNavigator.java to .\/spikes\ repository source files.
Added ExitAnimationsComposer.java to .\/spikes\ repository source files.
Added IntentCustomizer.java to .\/spikes\ repository source files.
Added MenuItemComposer.java to .\/spikes\ repository source files.
Added NavigationFallback.java to .\/spikes\ repository source files.
Added Navigator.java to .\/spikes\ repository source files.
Added ShowTitleComposer.java to .\/spikes\ repository source files.
Added StartAnimationsComposer.java to .\/spikes\ repository source files.
Added ToolbarColorComposer.java to .\/spikes\ repository source files.
Added UrlBarHidingComposer.java to .\/spikes\ repository source files.
Added WebNavigator.java to .\/spikes\ repository source files.
Added AvailableAppProvider.java to .\/spikes\ repository source files.
Added BestPackageFinder.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProvider.java to .\/spikes\ repository source files.
Added BinderTest.java to .\/spikes\ repository source files.
Added ConnectedClientTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnectionTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigatorTest.java to .\/spikes\ repository source files.
Added BestPackageFinderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProviderTest.java to .\/spikes\ repository source files.
Added ApiPagedChannelHistory.java to .\/spikes\ repository source files.
Added ApiPagedResponse.java to .\/spikes\ repository source files.
Added ChannelHistory.java to .\/spikes\ repository source files.
Added HistoryConverter.java to .\/spikes\ repository source files.
Added Runner.java to .\/spikes\ repository source files.
Added SlackHistoryFetcher.java to .\/spikes\ repository source files.
Added SlackWebService.java to .\/spikes\ repository source files.
Added ApiPagedResponseTest.java to .\/spikes\ repository source files.
Added MainActivityTest.java to .\/spikes\ repository source files.
Added LoremAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added BetterAccountManager.java to .\/spikes\ repository source files.
Added BetterAuthenticator.java to .\/spikes\ repository source files.
Added BetterAuthenticatorActivity.java to .\/spikes\ repository source files.
Added GertHerbAuthenticator.java to .\/spikes\ repository source files.
Added GertHerbAuthenticatorService.java to .\/spikes\ repository source files.
Added NoAccountException.java to .\/spikes\ repository source files.
Added ReactiveAuthenticatorActivity.java to .\/spikes\ repository source files.
Added Token.java to .\/spikes\ repository source files.
Added GertHerbActivity.java to .\/spikes\ repository source files.
Added GertHerbApplication.java to .\/spikes\ repository source files.
Added GertHerbAuthenticationActivity.java to .\/spikes\ repository source files.
Added TypefaceFactory.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added ViewServer.java to .\/spikes\ repository source files.
Added ViewServerManager.java to .\/spikes\ repository source files.
Added DeveloperError.java to .\/spikes\ repository source files.
Added HomeActivity.java to .\/spikes\ repository source files.
Added LoginActivity.java to .\/spikes\ repository source files.
Added LoginView.java to .\/spikes\ repository source files.
Added UserCredentials.java to .\/spikes\ repository source files.
Added FontButton.java to .\/spikes\ repository source files.
Added FontEditText.java to .\/spikes\ repository source files.
Added FontTextView.java to .\/spikes\ repository source files.
Added GithubApi.java to .\/spikes\ repository source files.
Added GithubApiFactory.java to .\/spikes\ repository source files.
Added TokenRequest.java to .\/spikes\ repository source files.
Added TokenResponse.java to .\/spikes\ repository source files.
Added Dummy.java to .\/spikes\ repository source files.
Added DummyTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MainFragment.java to .\/spikes\ repository source files.
Added Attributes.java to .\/spikes\ repository source files.
Added Coordinates.java to .\/spikes\ repository source files.
Added IndicatorCoordinatesCalculator.java to .\/spikes\ repository source files.
Added LandingStrip.java to .\/spikes\ repository source files.
Added MutableCoordinates.java to .\/spikes\ repository source files.
Added OnPagerAdapterChangedListener.java to .\/spikes\ repository source files.
Added PagerAdapterObserver.java to .\/spikes\ repository source files.
Added Scrollable.java to .\/spikes\ repository source files.
Added ScrollingPageChangeListener.java to .\/spikes\ repository source files.
Added State.java to .\/spikes\ repository source files.
Added TabsContainer.java to .\/spikes\ repository source files.
Added CustomLandingStrip.java to .\/spikes\ repository source files.
Added CustomTabActivity.java to .\/spikes\ repository source files.
Added ExampleRainbowLandingStrip.java to .\/spikes\ repository source files.
Added FixedWidthTabActivity.java to .\/spikes\ repository source files.
Added NoFragmentsSimpleTextTabActivity.java to .\/spikes\ repository source files.
Added Data.java to .\/spikes\ repository source files.
Added DemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added SmallDemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerFragment.java to .\/spikes\ repository source files.
Added DemoViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapterState.java to .\/spikes\ repository source files.
Added SimpleTextTabActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AbTestingParamsLoadedCallback.java to .\/spikes\ repository source files.
Added AyBe.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added WeakStartCallback.java to .\/spikes\ repository source files.
Added LeakActivity.java to .\/spikes\ repository source files.
Added NoLeakActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added ColorScheme.java to .\/spikes\ repository source files.
Added ColorUtils.java to .\/spikes\ repository source files.
Added DominantColorCalculator.java to .\/spikes\ repository source files.
Added FloatUtils.java to .\/spikes\ repository source files.
Added MedianCutQuantizer.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added PayPalFragment.java to .\/spikes\ repository source files.
Added PayPalHelper.java to .\/spikes\ repository source files.
Added MaxLengthMessageComposer.java to .\/spikes\ repository source files.
Added MessageComposer.java to .\/spikes\ repository source files.
Added TwitterMessageComposer.java to .\/spikes\ repository source files.
Added DisabledMruPersister.java to .\/spikes\ repository source files.
Added MruPersister.java to .\/spikes\ repository source files.
Added SharedPreferencesMruPersister.java to .\/spikes\ repository source files.
Added OnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added PriorityShareDialog.java to .\/spikes\ repository source files.
Added PrioritySharer.java to .\/spikes\ repository source files.
Added ShareTargetsAdapter.java to .\/spikes\ repository source files.
Added SimpleOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added TargetApps.java to .\/spikes\ repository source files.
Added TwitterOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AdvancedActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SimpleActivity.java to .\/spikes\ repository source files.
Added LockingActivity.java to .\/spikes\ repository source files.
Added PostLockingActivity.java to .\/spikes\ repository source files.
Added PreLockingActivity.java to .\/spikes\ repository source files.
Added DummyAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added NovoStaggeredGridView.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SpikeApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SwipeableView.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MyClass.java to .\/spikes\ repository source files.
Added MyClassTest.java to .\/spikes\ repository source files.
Added MyAndroidClassTest.java to .\/spikes\ repository source files.
Added RobolectricGradleTestRunner.java to .\/spikes\ repository source files.
Added Mapper.java to .\/spikes\ repository source files.
Added Query.java to .\/spikes\ repository source files.
Added TypedResolver.java to .\/spikes\ repository source files.
Added CursorList.java to .\/spikes\ repository source files.
Added CursorListIterator.java to .\/spikes\ repository source files.
Added CursorMarshaller.java to .\/spikes\ repository source files.
Added EmptyListIterator.java to .\/spikes\ repository source files.
Added ReflectionCursorMarshaller.java to .\/spikes\ repository source files.
Added RichClass.java to .\/spikes\ repository source files.
Added Setter.java to .\/spikes\ repository source files.
Added Function.java to .\/spikes\ repository source files.
Added TypedElementLoader.java to .\/spikes\ repository source files.
Added TypedLoader.java to .\/spikes\ repository source files.
Added Marshaller.java to .\/spikes\ repository source files.
Added ObjectMapper.java to .\/spikes\ repository source files.
Added TypedActivity.java to .\/spikes\ repository source files.
Added StringUtil.java to .\/spikes\ repository source files.
Added MyObject.java to .\/spikes\ repository source files.
Added MediaPlayerSwitcherActivity.java to .\/spikes\ repository source files.
Added VideoPlayerService.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added RecognitionService.java to .\/spikes\ repository source files.
Added SessionService.java to .\/spikes\ repository source files.
Added SettingsActivity.java to .\/spikes\ repository source files.
Added SmartContextInteractionService.java to .\/spikes\ repository source files.
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
String[] planetTitles = new String[]{"Earth", "Saturn"};
DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
ListView drawerList = (ListView) findViewById(R.id.left_drawer);
Intent intent;
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close);
b=getIntent().getExtras()
Bundle b = getIntent().getExtras();
mShouldStartPlayback=b.getBoolean("shouldStart")
boolean mShouldStartPlayback = b.getBoolean("shouldStart");
startPosition=b.getInt("startPosition",0)
int startPosition = b.getInt("startPosition", 0);
currentPos=mVideoView.getCurrentPosition()
int currentPos = mVideoView.getCurrentPosition();
String msg;
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, mDisplaySize.y + getActionBar().getHeight());
mm=mSelectedMedia.getMetadata()
MediaMetadata mm = mSelectedMedia.getMetadata();
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, (int) (mDisplaySize.x * ASPECT_RATIO));
WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
width=display.getWidth()
int width = display.getWidth();
height=display.getHeight()
int height = display.getHeight();
int resourceId = 0;
String videoUrl = "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4#sthash.rJ5rPZy8.dpuf";
String title = "Jahre Philharmonie";
String description = "Awesome film you must watch!";
String author = "Blundell";
String thumbUrl = "http://www.ustream.tv/blog/wp-content/uploads/2013/10/simply-go-live.png";
MediaMetadata metadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE);
mediaInfo=new MediaInfo.Builder(videoUrl).setMetadata(metadata).setStreamType(MediaInfo.STREAM_TYPE_BUFFERED).setContentType("video/mp4").build()
MediaInfo mediaInfo = new MediaInfo.Builder(videoUrl)
                        .setMetadata(metadata)
                        .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)
                        .setContentType("video/mp4")
                        .build();
Intent intent = new Intent(MainActivity.this, LocalPlayerActivity.class);
preferences=getPreferences(MODE_PRIVATE)
SharedPreferences preferences = getPreferences(MODE_PRIVATE);
defaultSmsPackage=Telephony.Sms.getDefaultSmsPackage(this)
String defaultSmsPackage = Telephony.Sms.getDefaultSmsPackage(this);
Intent intent = new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
availableAppProvider=EasyCustomTabs.getInstance()
AvailableAppProvider availableAppProvider = EasyCustomTabs.getInstance();
ConnectedClient connectedClient = new ConnectedClient(client);
binder=Binder.newInstance()
Binder binder = Binder.newInstance();
List<Composer> composerList = new ArrayList<>();
customTabsSession=connection.newSession()
CustomTabsSession customTabsSession = connection.newSession();
CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(customTabsSession);
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
context=EasyCustomTabs.getInstance().getContext()
Context context = EasyCustomTabs.getInstance().getContext();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
packagesSupportingCustomTabs=getPackagesSupportingCustomTabs()
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
defaultPackage=getDefaultPackage()
String defaultPackage = getDefaultPackage();
defaultActivityInfo=packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK,0)
ResolveInfo defaultActivityInfo = packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK, 0);
String packageName = defaultActivityInfo.activityInfo.packageName;
resolvedInfoList=packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK,0)
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<String> packagesSupportingCustomTabs = new ArrayList<>();
Intent serviceIntent = new Intent();
bestPackageFinder=BestPackageFinder.newInstance()
BestPackageFinder bestPackageFinder = BestPackageFinder.newInstance();
packageName=bestPackageFinder.findBestPackage()
String packageName = bestPackageFinder.findBestPackage();
resolveInfo=createResolveInfoFor(packageName)
ResolveInfo resolveInfo = createResolveInfoFor(packageName);
ResolveInfo resolveInfo = new ResolveInfo();
List<ResolveInfo> resolveInfoList = new ArrayList<>();
defaultPackageResolveInfo=createResolveInfoFor(packageName)
ResolveInfo defaultPackageResolveInfo = createResolveInfoFor(packageName);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
oldestApiMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage oldestApiMessage = apiMessages.get(apiMessages.size() - 1);
String lastResponseEpochTime = oldestApiMessage.timeStamp;
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
latestMessage=latestMessages.get(latestMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage latestMessage = latestMessages.get(latestMessages.size() - 1);
latestMessageDateTime=convertToLocalDateTime(latestMessage.timeStamp)
LocalDateTime latestMessageDateTime = convertToLocalDateTime(latestMessage.timeStamp);
List<ChannelHistory.Message> messages = new ArrayList<>();
historyFrom=getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1))
LocalDateTime historyFrom = getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1));
historyTo=getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0))
LocalDateTime historyTo = getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0));
String text = apiMessage.text;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
lastMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage lastMessage = apiMessages.get(apiMessages.size() - 1);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
firstMessage=apiMessages.get(0)
ApiPagedChannelHistory.ApiMessage firstMessage = apiMessages.get(0);
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
String slackToken = args[0];
retrofit=new Retrofit.Builder().baseUrl("https://slack.com/api/").addConverterFactory(GsonConverterFactory.create()).build()
Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://slack.com/api/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();
slackWebService=retrofit.create(SlackWebService.class)
SlackWebService slackWebService = retrofit.create(SlackWebService.class);
slackHistoryFetcher=SlackHistoryFetcher.from(slackWebService,slackToken)
SlackHistoryFetcher slackHistoryFetcher = SlackHistoryFetcher.from(slackWebService, slackToken);
start=LocalDateTime.now()
LocalDateTime start = LocalDateTime.now();
end=LocalDateTime.now().minusDays(7)
LocalDateTime end = LocalDateTime.now().minusDays(7);
channelHistory=slackHistoryFetcher.getChannelHistory(start,end)
ChannelHistory channelHistory = slackHistoryFetcher.getChannelHistory(start, end);
HistoryConverter historyConverter = new HistoryConverter();
ApiPagedResponse apiPagedResponse = new ApiPagedResponse(start);
response=fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime())
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
apiPagedChannelHistory=response.body()
ApiPagedChannelHistory apiPagedChannelHistory = response.body();
channelHistory=slackWebService.getChannelHistory(slackToken,channel,lastResponseEpochTime,NUMBER_OF_RESULTS)
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
ApiPagedChannelHistory apiPagedChannelHistory = new ApiPagedChannelHistory();
ApiPagedChannelHistory.ApiMessage apiMessage = new ApiPagedChannelHistory.ApiMessage();
final TextView textView = new TextView(context);
emptyView=findViewById(R.id.empty_view)
View emptyView = findViewById(R.id.empty_view);
final Integer action = values[0];
LoremAdapter loremAdapter = new LoremAdapter();
accounts=accountManager.getAccountsByType(accountType)
Account[] accounts = accountManager.getAccountsByType(accountType);
Bundle result;
Bundle result;
Bundle result = new Bundle();
activity=createLoginIntent(context,accountType,authTokenType,requiredFeatures,options)
Intent activity = createLoginIntent(context, accountType, authTokenType, requiredFeatures, options);
Bundle bundle = new Bundle();
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
accounts=accountManager.getAccountsByType(authTokenType)
Account[] accounts = accountManager.getAccountsByType(authTokenType);
bundle=createResponseBundle(token)
Bundle bundle = createResponseBundle(token);
accountManager=AccountManager.get(this.getApplicationContext())
AccountManager accountManager = AccountManager.get(this.getApplicationContext());
Account account = new Account(token.getUserName(), getAccountName());
Bundle bundle = new Bundle();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
GertHerbAuthenticator authenticator = new GertHerbAuthenticator(this);
fontId=getFontId(context,attrs)
int fontId = getFontId(context, attrs);
fontType=getFontType(fontId)
FontType fontType = getFontType(fontId);
typedArray=context.obtainStyledAttributes(attrs,R.styleable.CustomTextAppearance)
TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CustomTextAppearance);
typeface=createTypeFace(context,fontType)
Typeface typeface = createTypeFace(context, fontType);
info=context.getApplicationInfo()
ApplicationInfo info = context.getApplicationInfo();
name=activity.getTitle().toString()
String name = activity.getTitle().toString();
client=mServer.accept()
Socket client = mServer.accept();
boolean result;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
BufferedReader in = null;
request=in.readLine()
final String request = in.readLine();
String command;
String parameters;
index=request.indexOf(' ')
int index = request.indexOf(' ');
boolean result;
boolean success = true;
BufferedWriter out = null;
index=parameters.indexOf(' ')
int index = parameters.indexOf(' ');
code=parameters.substring(0,index)
final String code = parameters.substring(0, index);
int hashCode = (int) Long.parseLong(code, 16);
window=findWindow(hashCode)
final View window = findWindow(hashCode);
dispatch=ViewDebug.class.getDeclaredMethod("dispatchCommand",View.class,String.class,String.class,OutputStream.class)
final Method dispatch = ViewDebug.class.getDeclaredMethod("dispatchCommand",
                        View.class, String.class, String.class, OutputStream.class);
View window = null;
boolean result = true;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
boolean result = true;
String focusName = null;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
View focusedWindow = null;
BufferedWriter out = null;
boolean needWindowListUpdate = false;
boolean needFocusedWindowUpdate = false;
BetterAccountManager accountManager = new BetterAccountManager(this, getString(R.string.account_type), getString(R.string.token_type), null);
loginView=Views.findById(this,R.id.login_view)
LoginView loginView = Views.findById(this, R.id.login_view);
authorizationApi=new GithubApiFactory().createAuthorizationApi(credentials.username,credentials.password)
GithubApi authorizationApi = new GithubApiFactory().createAuthorizationApi(credentials.username, credentials.password);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
Endpoint endpoint = new Endpoint() {
            @Override
            public String getUrl() {
                return GITHUB_API_URL;
            }

            @Override
            public String getName() {
                return "Live";
            }
        };
interceptor=createAuthorizationRequestInterceptor(username,password)
RequestInterceptor interceptor = createAuthorizationRequestInterceptor(username, password);
restAdapter=createRestAdapter(endpoint,interceptor)
RestAdapter restAdapter = createRestAdapter(endpoint, interceptor);
Dummy dummy = new Dummy();
result=dummy.explodes()
boolean result = dummy.explodes();
String base64EncodedPublicKey = "CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE";
premiumPurchase=inventory.getPurchase(SKU_PREMIUM)
Purchase premiumPurchase = inventory.getPurchase(SKU_PREMIUM);
infiniteGasPurchase=inventory.getPurchase(SKU_INFINITE_GAS)
Purchase infiniteGasPurchase = inventory.getPurchase(SKU_INFINITE_GAS);
gasPurchase=inventory.getPurchase(SKU_GAS)
Purchase gasPurchase = inventory.getPurchase(SKU_GAS);
String payload = "";
String payload = "";
String payload = "";
payload=p.getDeveloperPayload()
String payload = p.getDeveloperPayload();
int index = mTank >= TANK_RES_IDS.length ? TANK_RES_IDS.length - 1 : mTank;
AlertDialog.Builder bld = new AlertDialog.Builder(this);
spe=getPreferences(MODE_PRIVATE).edit()
SharedPreferences.Editor spe = getPreferences(MODE_PRIVATE).edit();
sp=getPreferences(MODE_PRIVATE)
SharedPreferences sp = getPreferences(MODE_PRIVATE);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                                  + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                    | ((source[d + 1 + off] << 24) >>> 16)
                    | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                    | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                                   "-1002:Bad response received/" +
                                   "-1003:Purchase signature verification failed/" +
                                   "-1004:Send intent failed/" +
                                   "-1005:User cancelled/" +
                                   "-1006:Unknown purchase response/" +
                                   "-1007:Missing token/" +
                                   "-1008:Unknown error/" +
                                   "-1009:Subscriptions not available/" +
                                   "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(),
                    itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                        | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                        | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                            | ((source[d + 1 + off] << 24) >>> 16)
                            | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                            | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                "-1002:Bad response received/" +
                "-1003:Purchase signature verification failed/" +
                "-1004:Send intent failed/" +
                "-1005:User cancelled/" +
                "-1006:Unknown purchase response/" +
                "-1007:Missing token/" +
                "-1008:Unknown error/" +
                "-1009:Subscriptions not available/" +
                "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(), itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
responseCode=result.getResponse()
int responseCode = result.getResponse();
sku=purchase.getSku()
String sku = purchase.getSku();
skuDetails=inv.getSkuDetails(sku)
SkuDetails skuDetails = inv.getSkuDetails(sku);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
Button purchaseFiveButton = (Button) rootView.findViewById(R.id.fragment_main_button_purchase_five_coins);
xml=context.obtainStyledAttributes(attrs,R.styleable.LandingStrip)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.LandingStrip);
tabLayoutId=xml.getResourceId(R.styleable.LandingStrip_tabLayoutId,MISSING_TAB_LAYOUT_ID)
int tabLayoutId = xml.getResourceId(R.styleable.LandingStrip_tabLayoutId, MISSING_TAB_LAYOUT_ID);
indicatorColour=xml.getResourceId(R.styleable.LandingStrip_indicatorColor,DEFAULT_INDICATOR_COLOUR)
int indicatorColour = xml.getResourceId(R.styleable.LandingStrip_indicatorColor, DEFAULT_INDICATOR_COLOUR);
indicatorHeight=getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight,DEFAULT_INDICATOR_HEIGHT,xml)
int indicatorHeight = getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight, DEFAULT_INDICATOR_HEIGHT, xml);
tabsPaddingLeft=getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingLeft = getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding, DEFAULT_TABS_PADDING, xml);
tabsPaddingRight=getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingRight = getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding, DEFAULT_TABS_PADDING, xml);
MutableCoordinates drawCurrentTabCoordinates = new MutableCoordinates();
MutableCoordinates drawNextTabCoordinates = new MutableCoordinates();
MutableCoordinates drawMovingIndicatorCoordinates = new MutableCoordinates();
currentTab=tabsContainer.getTabAt(currentPosition)
View currentTab = tabsContainer.getTabAt(currentPosition);
currentTabStart=currentTab.getLeft()
float currentTabStart = currentTab.getLeft();
currentTabEnd=currentTab.getRight()
float currentTabEnd = currentTab.getRight();
nextTab=tabsContainer.getTabAt(currentPosition + 1)
View nextTab = tabsContainer.getTabAt(currentPosition + 1);
nextTabPositionOffset=getFractionFrom(pagePositionOffset)
float nextTabPositionOffset = getFractionFrom(pagePositionOffset);
indicatorStart=getIndicatorPosition(nextTab.getStart(),pagePositionOffset,currentTab.getStart(),nextTabPositionOffset)
float indicatorStart = getIndicatorPosition(nextTab.getStart(), pagePositionOffset, currentTab.getStart(), nextTabPositionOffset);
indicatorEnd=getIndicatorPosition(nextTab.getEnd(),pagePositionOffset,currentTab.getEnd(),nextTabPositionOffset)
float indicatorEnd = getIndicatorPosition(nextTab.getEnd(), pagePositionOffset, currentTab.getEnd(), nextTabPositionOffset);
height=getHeight()
int height = getHeight();
tabCount=pagerAdapter.getCount()
int tabCount = pagerAdapter.getCount();
title=pagerAdapter.getPageTitle(position)
CharSequence title = pagerAdapter.getPageTitle(position);
inflatedTabView=tabsContainer.inflateTab(layoutInflater,attributes.getTabLayoutId())
View inflatedTabView = tabsContainer.inflateTab(layoutInflater, attributes.getTabLayoutId());
int position = (int) view.getTag(TAG_KEY_POSITION);
scrollOffset=getHorizontalScrollOffset(position,positionOffset)
int scrollOffset = getHorizontalScrollOffset(position, positionOffset);
newScrollX=calculateScrollOffset(position,scrollOffset,positionOffset)
float newScrollX = calculateScrollOffset(position, scrollOffset, positionOffset);
tabWidth=tabsContainer.getTabAt(position).getWidth()
int tabWidth = tabsContainer.getTabAt(position).getWidth();
tabForPosition=tabsContainer.getTabAt(position)
View tabForPosition = tabsContainer.getTabAt(position);
float tabStartX = tabForPosition.getLeft() + scrollOffset;
int viewMiddleOffset = getTabParentWidth() / 2;
float tabCenterOffset = (tabForPosition.getRight() - tabForPosition.getLeft()) * 0.5F;
nextTabDelta=getNextTabDelta(position,pagerOffset,tabForPosition)
float nextTabDelta = getNextTabDelta(position, pagerOffset, tabForPosition);
LinearLayout tabsContainerView = new LinearLayout(context);
tab=getTabAt(index)
View tab = getTabAt(index);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
position=indicatorCoordinates.getStart()
float position = indicatorCoordinates.getStart();
lastTabOffset=((ViewGroup)getChildAt(0)).getChildAt(getChildCount() - 1).getWidth()
float lastTabOffset = ((ViewGroup) getChildAt(0)).getChildAt(getChildCount() - 1).getWidth();
frequency=getOneCycle(lastTabOffset)
float frequency = getOneCycle(lastTabOffset);
r=toHex(calculateColour(position,frequency,PHASE_RED,AMPLITUDE,CENTER_FREQUENCY))
String r = toHex(calculateColour(position, frequency, PHASE_RED, AMPLITUDE, CENTER_FREQUENCY));
g=toHex(calculateColour(position,frequency,PHASE_GREEN,AMPLITUDE,CENTER_FREQUENCY))
String g = toHex(calculateColour(position, frequency, PHASE_GREEN, AMPLITUDE, CENTER_FREQUENCY));
b=toHex(calculateColour(position,frequency,PHASE_BLUE,AMPLITUDE,CENTER_FREQUENCY))
String b = toHex(calculateColour(position, frequency, PHASE_BLUE, AMPLITUDE, CENTER_FREQUENCY));
height=getHeight()
int height = getHeight();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPagerFragment viewPagerFragment = new ViewPagerFragment();
Bundle bundle = new Bundle();
TextView view = (TextView) layoutInflater.inflate(R.layout.view_demo, container, false);
currentPosition=viewPagerAdapterState.getCurrentPosition()
int currentPosition = viewPagerAdapterState.getCurrentPosition();
view=getView(container,position)
View view = getView(container, position);
parcelableSparseArray=viewPagerAdapterState.get(position)
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
View view = (View) object;
SparseArray<Parcelable> viewState = new SparseArray<>();
position=entry.getValue()
int position = entry.getValue();
view=entry.getKey()
View view = entry.getKey();
bundle=in.readBundle()
Bundle bundle = in.readBundle();
Map<Integer, SparseArray<Parcelable>> viewStates = new HashMap<>(bundle.keySet().size());
sparseParcelableArray=bundle.getSparseParcelableArray(key)
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
primaryItemPosition=in.readInt()
int primaryItemPosition = in.readInt();
Bundle bundle = new Bundle();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
final TextView abText = (TextView) findViewById(R.id.ab_text);
final AyBe ayBe = new AyBe();
id=item.getItemId()
int id = item.getItemId();
callback=weakCallback.get()
AbTestingParamsLoadedCallback callback = weakCallback.get();
WeakReference<NoLeakActivity> weakNoLeakActivity = new WeakReference<NoLeakActivity>(noLeakActivity);
noLeakActivity=weakNoLeakActivity.get()
NoLeakActivity noLeakActivity = weakNoLeakActivity.get();
final float inverseRatio = 1f - ratio;
float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRatio);
float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRatio);
float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRatio);
hsv=node.getHsv()
float[] hsv = node.getHsv();
width=bitmap.getWidth()
final int width = bitmap.getWidth();
height=bitmap.getHeight()
final int height = bitmap.getHeight();
final int[] rgbPixels = new int[width * height];
final MedianCutQuantizer mcq = new MedianCutQuantizer(rgbPixels, NUM_COLORS);
primaryAccentColor=findPrimaryAccentColor()
final ColorNode primaryAccentColor = findPrimaryAccentColor();
secondaryAccentColor=findSecondaryAccentColor(primaryAccentColor)
final ColorNode secondaryAccentColor = findSecondaryAccentColor(primaryAccentColor);
tertiaryAccentColor=findTertiaryAccentColor(primaryAccentColor,secondaryAccentColor)
final int tertiaryAccentColor = findTertiaryAccentColor(
                primaryAccentColor, secondaryAccentColor);
primaryTextColor=findPrimaryTextColor(primaryAccentColor)
final int primaryTextColor = findPrimaryTextColor(primaryAccentColor);
secondaryTextColor=findSecondaryTextColor(primaryAccentColor)
final int secondaryTextColor = findSecondaryTextColor(primaryAccentColor);
final float primaryHue = primary.getHsv()[0];
final float candidateHue = candidate.getHsv()[0];
copy=Arrays.copyOf(palette,palette.length)
final MedianCutQuantizer.ColorNode[] copy = Arrays.copyOf(palette, palette.length);
maxCount=palette[0].getCount()
final float maxCount = palette[0].getCount();
lhsWeight=calculateWeight(lhs,maxCount)
final float lhsWeight = calculateWeight(lhs, maxCount);
rhsWeight=calculateWeight(rhs,maxCount)
final float rhsWeight = calculateWeight(rhs, maxCount);
float sum = 0;
float sumWeight = 0;
float value = values[i];
float weight = values[i + 1];
ColorHistogram colorHist = new ColorHistogram(pixels);
K=colorHist.getNumberOfColors()
int K = colorHist.getNumberOfColors();
ColorNode[] rCols = null;
rgb=colorHist.getColor(i)
int rgb = colorHist.getColor(i);
cnt=colorHist.getCount(i)
int cnt = colorHist.getCount(i);
ColorBox initialBox = new ColorBox(0, K - 1, 0);
List<ColorBox> colorSet = new ArrayList<ColorBox>();
int k = 1;
boolean done = false;
nextBox=findBoxToSplit(colorSet)
ColorBox nextBox = findBoxToSplit(colorSet);
newBox=nextBox.splitBox()
ColorBox newBox = nextBox.splitBox();
color=findClosestColor(pixels[i])
ColorNode color = findClosestColor(pixels[i]);
idx=findClosestColorIndex(rgb)
int idx = findClosestColorIndex(rgb);
red=Color.red(rgb)
int red = Color.red(rgb);
grn=Color.green(rgb)
int grn = Color.green(rgb);
blu=Color.blue(rgb)
int blu = Color.blue(rgb);
int minIdx = 0;
int minDistance = Integer.MAX_VALUE;
ColorNode color = quantColors[i];
d2=color.distance2(red,grn,blu)
int d2 = color.distance2(red, grn, blu);
ColorBox boxToSplit = null;
int minLevel = Integer.MAX_VALUE;
n=colorBoxes.size()
int n = colorBoxes.size();
ColorNode[] avgColors = new ColorNode[n];
int i = 0;
int dr = this.red - red;
int dg = this.grn - grn;
int db = this.blu - blu;
ColorNode color = imageColors[i];
int r = color.red;
int g = color.grn;
int b = color.blu;
dim=getLongestColorDimension()
ColorDimension dim = getLongestColorDimension();
med=findMedian(dim)
int med = findMedian(dim);
int nextLevel = level + 1;
ColorBox newBox = new ColorBox(med + 1, upper, nextLevel);
int rLength = rmax - rmin;
int gLength = gmax - gmin;
int bLength = bmax - bmin;
int half = count / 2;
int nPixels, median;
int rSum = 0;
int gSum = 0;
int bSum = 0;
int n = 0;
ColorNode ci = imageColors[i];
int cnt = ci.cnt;
double nd = n;
int avgRed = (int) (0.5 + rSum / nd);
int avgGrn = (int) (0.5 + gSum / nd);
int avgBlu = (int) (0.5 + bSum / nd);
s=this.getClass().getSimpleName()
String s = this.getClass().getSimpleName();
int i = 0;
int N = pixelsOrig.length;
int[] pixelsCpy = new int[N];
int k = -1;
int curColor = -1;
int nColors = k + 1;
id=item.getItemId()
int id = item.getItemId();
Intent intent = new Intent();
bitmap=((BitmapDrawable)imageView.getDrawable()).getBitmap()
Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap();
DominantColorCalculator dominantColorCalculator = new DominantColorCalculator(bitmap);
selectedImageUri=data.getData()
Uri selectedImageUri = data.getData();
selectedImagePath=getPath(selectedImageUri)
String selectedImagePath = getPath(selectedImageUri);
String[] projection = {MediaStore.Images.Media.DATA};
cursor=managedQuery(uri,projection,null,null,null)
Cursor cursor = managedQuery(uri, projection, null, null, null);
column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)
int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
LinearLayout rootView = (LinearLayout) inflater.inflate(R.layout.fragment_main, container, false);
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
preapprovalButton=payPal.getCheckoutButton(getActivity(),PayPal.BUTTON_194x37,CheckoutButton.TEXT_PAY)
CheckoutButton preapprovalButton = payPal.getCheckoutButton(getActivity(), PayPal.BUTTON_194x37, CheckoutButton.TEXT_PAY);
preapprovalIntent=payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY)
Intent preapprovalIntent = payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY);
String resultTitle = "";
String resultInfo = "";
String resultExtra = "";
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
PayPalPreapproval preapproval = new PayPalPreapproval();
preapproval=createPreapproval(preapprovalKey)
PayPalPreapproval preapproval = createPreapproval(preapprovalKey);
Bundle bundle = new Bundle();
int availableLength = maxLength;
StringBuilder stringBuilder = new StringBuilder(maxLength);
prefixAndSuffixLength=computeAppendedLengthIncludingSeparatorSpaces(prefix,suffix)
int prefixAndSuffixLength = computeAppendedLengthIncludingSeparatorSpaces(prefix, suffix);
urlLength=computeUrlLengthIncludingSeparatorSpace(url)
int urlLength = computeUrlLengthIncludingSeparatorSpace(url);
trimmedSubject=ellipsizeTextIfExceedsMaxLength(subject,availableLength)
String trimmedSubject = ellipsizeTextIfExceedsMaxLength(subject, availableLength);
int length = 0;
preferences=context.getSharedPreferences(MRU_PREFERENCES,Context.MODE_PRIVATE)
SharedPreferences preferences = context.getSharedPreferences(MRU_PREFERENCES, Context.MODE_PRIVATE);
args=getArguments()
Bundle args = getArguments();
themeResId=getThemeResIdIfProvidedIn(args)
int themeResId = getThemeResIdIfProvidedIn(args);
title=getTitleIfProvidedIn(args)
CharSequence title = getTitleIfProvidedIn(args);
builder=createDialogBuilder(themeResId).setCancelable(true).setView(dialogView)
AlertDialog.Builder builder = createDialogBuilder(themeResId)
                .setCancelable(true)
                .setView(dialogView);
inflater=getActivity().getLayoutInflater()
LayoutInflater inflater = getActivity().getLayoutInflater();
GridView gridView = (GridView) rootView.findViewById(R.id.ps__dialog_grid);
targetApps=extractTargetAppsFrom(args)
TargetApps targetApps = extractTargetAppsFrom(args);
allShareTargets=getAvailableShareTargets(sharingIntent)
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
priorityAppInfos=createPriorityResolveInfoList(targetApps,allShareTargets)
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
otherAppInfos=createOtherAppsResolveInfoList(priorityAppInfos,allShareTargets)
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
resolveInfos=targetApps.extractTargetResolveInfosFrom(allShareTargets)
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
mruResolveInfo=findMruResolveInfoIn(allShareTargets)
ResolveInfo mruResolveInfo = findMruResolveInfoIn(allShareTargets);
List<ResolveInfo> otherAppsInfos = new ArrayList<ResolveInfo>(allAppInfos);
mruPackageName=persister.getLastUsedTarget()
String mruPackageName = persister.getLastUsedTarget();
String packageName = resolveInfo.activityInfo.packageName;
packageManager=getActivity().getPackageManager()
PackageManager packageManager = getActivity().getPackageManager();
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
View buttonStrip = (View) showMoreButton.getParent();
gridView=getGridView()
GridView gridView = getGridView();
intent=wrapIntentWithExplicitTargetComponentForItem(position,sharingIntent)
Intent intent = wrapIntentWithExplicitTargetComponentForItem(position, sharingIntent);
Intent intent = new Intent(sharingIntent);
ActivityInfo activity = adapter.getItem(position).activityInfo;
ComponentName name = new ComponentName(activity.applicationInfo.packageName, activity.name);
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
PriorityShareDialog dialog = new PriorityShareDialog();
Bundle args = new Bundle();
sharingIntent=createSharingIntent()
Intent sharingIntent = createSharingIntent();
fragmentManager=activity.getFragmentManager()
FragmentManager fragmentManager = activity.getFragmentManager();
Intent intent = new Intent(Intent.ACTION_SEND);
dialog=new PriorityShareDialog.Builder().setTitle(title).setTargetApps(targetApps).setSharingIntent(sharingIntent).setOnPrepareSharingIntentListener(listener).setShowMostRecentlyUsed(showMostRecentlyUsed).build()
PriorityShareDialog dialog = new PriorityShareDialog.Builder()
                .setTitle(title)
                .setTargetApps(targetApps)
                .setSharingIntent(sharingIntent)
                .setOnPrepareSharingIntentListener(listener)
                .setShowMostRecentlyUsed(showMostRecentlyUsed)
                .build();
PrioritySharer prioritySharer = new PrioritySharer();
prioritySharer=build()
PrioritySharer prioritySharer = build();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
layoutInflater=LayoutInflater.from(context)
LayoutInflater layoutInflater = LayoutInflater.from(context);
iconSizePx=getIconSizePx(context.getResources())
int iconSizePx = getIconSizePx(context.getResources());
ArrayList<ResolveInfo> sortedList = new ArrayList<ResolveInfo>(resolveInfoList);
int otherAppsCountMaybe = showAllApps ? otherAppInfos.size() : 0;
firstOtherAppsItemPosition=priorityAppInfos.size()
int firstOtherAppsItemPosition = priorityAppInfos.size();
int offsetPosition = position - firstOtherAppsItemPosition;
TextView textView;
textView=initializeItemViewIfNecessary(convertView,R.layout.ps__grid_item_share,parent)
TextView textView = initializeItemViewIfNecessary(convertView, R.layout.ps__grid_item_share, parent);
info=getItem(position)
ResolveInfo info = getItem(position);
icon=info.loadIcon(packageManager)
Drawable icon = info.loadIcon(packageManager);
arraySize=in.readInt()
int arraySize = in.readInt();
String[] packageNames = new String[arraySize];
arraySize=targetPackages.size()
int arraySize = targetPackages.size();
String[] packagesArray = new String[arraySize];
SparseArray<ResolveInfo> matchedResolveInfos = new SparseArray<ResolveInfo>(targetPackages.size());
String packageName = info.activityInfo.packageName;
index=indexOfItemInto(packageName,targetPackages)
int index = indexOfItemInto(packageName, targetPackages);
sparseArraySize=sparseArray.size()
int sparseArraySize = sparseArray.size();
ArrayList<T> list = new ArrayList<T>(sparseArraySize);
int i = 0;
originalSubject=intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT)
CharSequence originalSubject = intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT);
String subject = originalSubject != null ? originalSubject.toString() : null;
composer=createComposer()
MessageComposer composer = createComposer();
component=intent.getComponent()
ComponentName component = intent.getComponent();
targetPackageName=component.getPackageName()
String targetPackageName = component.getPackageName();
adapter=ArrayAdapter.createFromResource(this,R.array.target_apps,android.R.layout.simple_spinner_item)
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
EditText text = (EditText) findViewById(R.id.text);
EditText title = (EditText) findViewById(R.id.title);
EditText mimeType = (EditText) findViewById(R.id.mime_type);
EditText dataUri = (EditText) findViewById(R.id.data_uri);
Switch showMostRecentlyUsed = (Switch) findViewById(R.id.show_most_recently_used);
uriString=dataUri.getText().toString()
String uriString = dataUri.getText().toString();
EditText text = (EditText) findViewById(R.id.text);
TextView textView = (TextView) convertView.findViewById(R.id.positionView);
colorView=convertView.findViewById(R.id.colorView)
View colorView = convertView.findViewById(R.id.colorView);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
offset=headerPlaceholder.getTop()
int offset = headerPlaceholder.getTop();
Integer item = COLORS[position];
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
firstVisiblePosition=grid.getFirstVisiblePosition()
int firstVisiblePosition = grid.getFirstVisiblePosition();
inflate=getViewForPosition(container,position)
View inflate = getViewForPosition(container, position);
id=item.getItemId()
int id = item.getItemId();
MyActivity activity = new MyActivity();
String manifestProperty = "../app/src/main/AndroidManifest.xml";
String resProperty = "../app/src/main/res";
cursor=resolver.query(uri,projection,selection,selectionArgs,null)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, null);
cursor=resolver.query(uri,projection,selection,selectionArgs,sortOrder)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, sortOrder);
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=richClass.setter(name)
Method setter = richClass.setter(name);
T obj;
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=methodsByName.get(name)
Method setter = methodsByName.get(name);
int type = TYPE_INT;
Class<?> t = setter.getParameterTypes()[0];
Class<?> t = setter.getParameterTypes()[0];
cursorType=cursor.getType(index)
final int cursorType = cursor.getType(index);
final Object obj;
s=f.getAnnotation(Mapper.class)
Mapper s = f.getAnnotation(Mapper.class);
mm=m.getAnnotation(Mapper.class)
Mapper mm = m.getAnnotation(Mapper.class);
methodName=StringUtil.asCamelifySetMethod(what)
String methodName = StringUtil.asCamelifySetMethod(what);
cursor=getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,null,null,null,null)
Cursor cursor = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
now=System.currentTimeMillis()
long now = System.currentTimeMillis();
List<Contact2> typedCursor = new CursorList<Contact2>(cursor, Contact2.class);
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[a-zA-Z0-9]+")
Pattern p = Pattern.compile("[a-zA-Z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[A-Z][a-z0-9]+")
Pattern p = Pattern.compile("[A-Z][a-z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
SurfaceView first = (SurfaceView) findViewById(R.id.firstSurface);
SurfaceView second = (SurfaceView) findViewById(R.id.secondSurface);
Intent pickVideo = new Intent(Intent.ACTION_PICK);
Bundle args = new Bundle();
enroll=mHotwordDetector.createEnrollIntent()
Intent enroll = mHotwordDetector.createEnrollIntent();

Diff of 41182657790d60fdd6ae32f23ec247fd508372cd and bcfe801594f4890dcea5c667d437f879e28006b2:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 35
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 41182657790d60fdd6ae32f23ec247fd508372cd to bcfe801594f4890dcea5c667d437f879e28006b2

************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null

****Parsing for addition at revision d8b360e892f731015e2d35fd721f2f56727a4723****

Added ApplicationTest.java to .\/spikes\ repository source files.
Added DrawerActivity.java to .\/spikes\ repository source files.
Added EarthActivity.java to .\/spikes\ repository source files.
Added SaturnActivity.java to .\/spikes\ repository source files.
Added LocalPlayerActivity.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added CastApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ComposeSmsActivity.java to .\/spikes\ repository source files.
Added HeadlessSmsSendService.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MmsReceiver.java to .\/spikes\ repository source files.
Added SmsReceiver.java to .\/spikes\ repository source files.
Added ExtendedDemoActivity.java to .\/spikes\ repository source files.
Added ExtendedDemoApplication.java to .\/spikes\ repository source files.
Added SimpleDemoActivity.java to .\/spikes\ repository source files.
Added SimpleDemoApplication.java to .\/spikes\ repository source files.
Added Binder.java to .\/spikes\ repository source files.
Added ConnectedClient.java to .\/spikes\ repository source files.
Added Connection.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnection.java to .\/spikes\ repository source files.
Added ServiceConnectionCallback.java to .\/spikes\ repository source files.
Added EasyCustomTabs.java to .\/spikes\ repository source files.
Added ActionButtonComposer.java to .\/spikes\ repository source files.
Added CloseButtonIconComposer.java to .\/spikes\ repository source files.
Added Composer.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilder.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigator.java to .\/spikes\ repository source files.
Added EasyCustomTabsWebNavigator.java to .\/spikes\ repository source files.
Added ExitAnimationsComposer.java to .\/spikes\ repository source files.
Added IntentCustomizer.java to .\/spikes\ repository source files.
Added MenuItemComposer.java to .\/spikes\ repository source files.
Added NavigationFallback.java to .\/spikes\ repository source files.
Added Navigator.java to .\/spikes\ repository source files.
Added ShowTitleComposer.java to .\/spikes\ repository source files.
Added StartAnimationsComposer.java to .\/spikes\ repository source files.
Added ToolbarColorComposer.java to .\/spikes\ repository source files.
Added UrlBarHidingComposer.java to .\/spikes\ repository source files.
Added WebNavigator.java to .\/spikes\ repository source files.
Added AvailableAppProvider.java to .\/spikes\ repository source files.
Added BestPackageFinder.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProvider.java to .\/spikes\ repository source files.
Added BinderTest.java to .\/spikes\ repository source files.
Added ConnectedClientTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnectionTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigatorTest.java to .\/spikes\ repository source files.
Added BestPackageFinderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProviderTest.java to .\/spikes\ repository source files.
Added ApiPagedChannelHistory.java to .\/spikes\ repository source files.
Added ApiPagedResponse.java to .\/spikes\ repository source files.
Added ChannelHistory.java to .\/spikes\ repository source files.
Added HistoryConverter.java to .\/spikes\ repository source files.
Added Runner.java to .\/spikes\ repository source files.
Added SlackHistoryFetcher.java to .\/spikes\ repository source files.
Added SlackWebService.java to .\/spikes\ repository source files.
Added ApiPagedResponseTest.java to .\/spikes\ repository source files.
Added MainActivityTest.java to .\/spikes\ repository source files.
Added LoremAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added BetterAccountManager.java to .\/spikes\ repository source files.
Added BetterAuthenticator.java to .\/spikes\ repository source files.
Added BetterAuthenticatorActivity.java to .\/spikes\ repository source files.
Added GertHerbAuthenticator.java to .\/spikes\ repository source files.
Added GertHerbAuthenticatorService.java to .\/spikes\ repository source files.
Added NoAccountException.java to .\/spikes\ repository source files.
Added ReactiveAuthenticatorActivity.java to .\/spikes\ repository source files.
Added Token.java to .\/spikes\ repository source files.
Added GertHerbActivity.java to .\/spikes\ repository source files.
Added GertHerbApplication.java to .\/spikes\ repository source files.
Added GertHerbAuthenticationActivity.java to .\/spikes\ repository source files.
Added TypefaceFactory.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added ViewServer.java to .\/spikes\ repository source files.
Added ViewServerManager.java to .\/spikes\ repository source files.
Added DeveloperError.java to .\/spikes\ repository source files.
Added HomeActivity.java to .\/spikes\ repository source files.
Added LoginActivity.java to .\/spikes\ repository source files.
Added LoginView.java to .\/spikes\ repository source files.
Added UserCredentials.java to .\/spikes\ repository source files.
Added FontButton.java to .\/spikes\ repository source files.
Added FontEditText.java to .\/spikes\ repository source files.
Added FontTextView.java to .\/spikes\ repository source files.
Added GithubApi.java to .\/spikes\ repository source files.
Added GithubApiFactory.java to .\/spikes\ repository source files.
Added TokenRequest.java to .\/spikes\ repository source files.
Added TokenResponse.java to .\/spikes\ repository source files.
Added Dummy.java to .\/spikes\ repository source files.
Added DummyTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MainFragment.java to .\/spikes\ repository source files.
Added Attributes.java to .\/spikes\ repository source files.
Added Coordinates.java to .\/spikes\ repository source files.
Added IndicatorCoordinatesCalculator.java to .\/spikes\ repository source files.
Added LandingStrip.java to .\/spikes\ repository source files.
Added MutableCoordinates.java to .\/spikes\ repository source files.
Added OnPagerAdapterChangedListener.java to .\/spikes\ repository source files.
Added PagerAdapterObserver.java to .\/spikes\ repository source files.
Added Scrollable.java to .\/spikes\ repository source files.
Added ScrollingPageChangeListener.java to .\/spikes\ repository source files.
Added State.java to .\/spikes\ repository source files.
Added TabsContainer.java to .\/spikes\ repository source files.
Added CustomLandingStrip.java to .\/spikes\ repository source files.
Added CustomTabActivity.java to .\/spikes\ repository source files.
Added ExampleRainbowLandingStrip.java to .\/spikes\ repository source files.
Added FixedWidthTabActivity.java to .\/spikes\ repository source files.
Added NoFragmentsSimpleTextTabActivity.java to .\/spikes\ repository source files.
Added Data.java to .\/spikes\ repository source files.
Added DemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added SmallDemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerFragment.java to .\/spikes\ repository source files.
Added DemoViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapterState.java to .\/spikes\ repository source files.
Added SimpleTextTabActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AbTestingParamsLoadedCallback.java to .\/spikes\ repository source files.
Added AyBe.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added WeakStartCallback.java to .\/spikes\ repository source files.
Added LeakActivity.java to .\/spikes\ repository source files.
Added NoLeakActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added ColorScheme.java to .\/spikes\ repository source files.
Added ColorUtils.java to .\/spikes\ repository source files.
Added DominantColorCalculator.java to .\/spikes\ repository source files.
Added FloatUtils.java to .\/spikes\ repository source files.
Added MedianCutQuantizer.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added PayPalFragment.java to .\/spikes\ repository source files.
Added PayPalHelper.java to .\/spikes\ repository source files.
Added MaxLengthMessageComposer.java to .\/spikes\ repository source files.
Added MessageComposer.java to .\/spikes\ repository source files.
Added TwitterMessageComposer.java to .\/spikes\ repository source files.
Added DisabledMruPersister.java to .\/spikes\ repository source files.
Added MruPersister.java to .\/spikes\ repository source files.
Added SharedPreferencesMruPersister.java to .\/spikes\ repository source files.
Added OnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added PriorityShareDialog.java to .\/spikes\ repository source files.
Added PrioritySharer.java to .\/spikes\ repository source files.
Added ShareTargetsAdapter.java to .\/spikes\ repository source files.
Added SimpleOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added TargetApps.java to .\/spikes\ repository source files.
Added TwitterOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AdvancedActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SimpleActivity.java to .\/spikes\ repository source files.
Added LockingActivity.java to .\/spikes\ repository source files.
Added PostLockingActivity.java to .\/spikes\ repository source files.
Added PreLockingActivity.java to .\/spikes\ repository source files.
Added DummyAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added NovoStaggeredGridView.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SpikeApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SwipeableView.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MyClass.java to .\/spikes\ repository source files.
Added MyClassTest.java to .\/spikes\ repository source files.
Added MyAndroidClassTest.java to .\/spikes\ repository source files.
Added RobolectricGradleTestRunner.java to .\/spikes\ repository source files.
Added Mapper.java to .\/spikes\ repository source files.
Added Query.java to .\/spikes\ repository source files.
Added TypedResolver.java to .\/spikes\ repository source files.
Added CursorList.java to .\/spikes\ repository source files.
Added CursorListIterator.java to .\/spikes\ repository source files.
Added CursorMarshaller.java to .\/spikes\ repository source files.
Added EmptyListIterator.java to .\/spikes\ repository source files.
Added ReflectionCursorMarshaller.java to .\/spikes\ repository source files.
Added RichClass.java to .\/spikes\ repository source files.
Added Setter.java to .\/spikes\ repository source files.
Added Function.java to .\/spikes\ repository source files.
Added TypedElementLoader.java to .\/spikes\ repository source files.
Added TypedLoader.java to .\/spikes\ repository source files.
Added Marshaller.java to .\/spikes\ repository source files.
Added ObjectMapper.java to .\/spikes\ repository source files.
Added TypedActivity.java to .\/spikes\ repository source files.
Added StringUtil.java to .\/spikes\ repository source files.
Added MyObject.java to .\/spikes\ repository source files.
Added MediaPlayerSwitcherActivity.java to .\/spikes\ repository source files.
Added VideoPlayerService.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added RecognitionService.java to .\/spikes\ repository source files.
Added SessionService.java to .\/spikes\ repository source files.
Added SettingsActivity.java to .\/spikes\ repository source files.
Added SmartContextInteractionService.java to .\/spikes\ repository source files.
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
String[] planetTitles = new String[]{"Earth", "Saturn"};
DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
ListView drawerList = (ListView) findViewById(R.id.left_drawer);
Intent intent;
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close);
b=getIntent().getExtras()
Bundle b = getIntent().getExtras();
mShouldStartPlayback=b.getBoolean("shouldStart")
boolean mShouldStartPlayback = b.getBoolean("shouldStart");
startPosition=b.getInt("startPosition",0)
int startPosition = b.getInt("startPosition", 0);
currentPos=mVideoView.getCurrentPosition()
int currentPos = mVideoView.getCurrentPosition();
String msg;
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, mDisplaySize.y + getActionBar().getHeight());
mm=mSelectedMedia.getMetadata()
MediaMetadata mm = mSelectedMedia.getMetadata();
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, (int) (mDisplaySize.x * ASPECT_RATIO));
WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
width=display.getWidth()
int width = display.getWidth();
height=display.getHeight()
int height = display.getHeight();
int resourceId = 0;
String videoUrl = "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4#sthash.rJ5rPZy8.dpuf";
String title = "Jahre Philharmonie";
String description = "Awesome film you must watch!";
String author = "Blundell";
String thumbUrl = "http://www.ustream.tv/blog/wp-content/uploads/2013/10/simply-go-live.png";
MediaMetadata metadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE);
mediaInfo=new MediaInfo.Builder(videoUrl).setMetadata(metadata).setStreamType(MediaInfo.STREAM_TYPE_BUFFERED).setContentType("video/mp4").build()
MediaInfo mediaInfo = new MediaInfo.Builder(videoUrl)
                        .setMetadata(metadata)
                        .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)
                        .setContentType("video/mp4")
                        .build();
Intent intent = new Intent(MainActivity.this, LocalPlayerActivity.class);
preferences=getPreferences(MODE_PRIVATE)
SharedPreferences preferences = getPreferences(MODE_PRIVATE);
defaultSmsPackage=Telephony.Sms.getDefaultSmsPackage(this)
String defaultSmsPackage = Telephony.Sms.getDefaultSmsPackage(this);
Intent intent = new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
availableAppProvider=EasyCustomTabs.getInstance()
AvailableAppProvider availableAppProvider = EasyCustomTabs.getInstance();
ConnectedClient connectedClient = new ConnectedClient(client);
binder=Binder.newInstance()
Binder binder = Binder.newInstance();
List<Composer> composerList = new ArrayList<>();
customTabsSession=connection.newSession()
CustomTabsSession customTabsSession = connection.newSession();
CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(customTabsSession);
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
context=EasyCustomTabs.getInstance().getContext()
Context context = EasyCustomTabs.getInstance().getContext();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
packagesSupportingCustomTabs=getPackagesSupportingCustomTabs()
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
defaultPackage=getDefaultPackage()
String defaultPackage = getDefaultPackage();
defaultActivityInfo=packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK,0)
ResolveInfo defaultActivityInfo = packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK, 0);
String packageName = defaultActivityInfo.activityInfo.packageName;
resolvedInfoList=packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK,0)
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<String> packagesSupportingCustomTabs = new ArrayList<>();
Intent serviceIntent = new Intent();
bestPackageFinder=BestPackageFinder.newInstance()
BestPackageFinder bestPackageFinder = BestPackageFinder.newInstance();
packageName=bestPackageFinder.findBestPackage()
String packageName = bestPackageFinder.findBestPackage();
resolveInfo=createResolveInfoFor(packageName)
ResolveInfo resolveInfo = createResolveInfoFor(packageName);
ResolveInfo resolveInfo = new ResolveInfo();
List<ResolveInfo> resolveInfoList = new ArrayList<>();
defaultPackageResolveInfo=createResolveInfoFor(packageName)
ResolveInfo defaultPackageResolveInfo = createResolveInfoFor(packageName);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
oldestApiMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage oldestApiMessage = apiMessages.get(apiMessages.size() - 1);
String lastResponseEpochTime = oldestApiMessage.timeStamp;
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
latestMessage=latestMessages.get(latestMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage latestMessage = latestMessages.get(latestMessages.size() - 1);
latestMessageDateTime=convertToLocalDateTime(latestMessage.timeStamp)
LocalDateTime latestMessageDateTime = convertToLocalDateTime(latestMessage.timeStamp);
List<ChannelHistory.Message> messages = new ArrayList<>();
historyFrom=getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1))
LocalDateTime historyFrom = getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1));
historyTo=getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0))
LocalDateTime historyTo = getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0));
String text = apiMessage.text;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
lastMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage lastMessage = apiMessages.get(apiMessages.size() - 1);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
firstMessage=apiMessages.get(0)
ApiPagedChannelHistory.ApiMessage firstMessage = apiMessages.get(0);
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
String slackToken = args[0];
retrofit=new Retrofit.Builder().baseUrl("https://slack.com/api/").addConverterFactory(GsonConverterFactory.create()).build()
Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://slack.com/api/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();
slackWebService=retrofit.create(SlackWebService.class)
SlackWebService slackWebService = retrofit.create(SlackWebService.class);
slackHistoryFetcher=SlackHistoryFetcher.from(slackWebService,slackToken)
SlackHistoryFetcher slackHistoryFetcher = SlackHistoryFetcher.from(slackWebService, slackToken);
start=LocalDateTime.now()
LocalDateTime start = LocalDateTime.now();
end=LocalDateTime.now().minusDays(7)
LocalDateTime end = LocalDateTime.now().minusDays(7);
channelHistory=slackHistoryFetcher.getChannelHistory(start,end)
ChannelHistory channelHistory = slackHistoryFetcher.getChannelHistory(start, end);
HistoryConverter historyConverter = new HistoryConverter();
ApiPagedResponse apiPagedResponse = new ApiPagedResponse(start);
response=fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime())
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
apiPagedChannelHistory=response.body()
ApiPagedChannelHistory apiPagedChannelHistory = response.body();
channelHistory=slackWebService.getChannelHistory(slackToken,channel,lastResponseEpochTime,NUMBER_OF_RESULTS)
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
ApiPagedChannelHistory apiPagedChannelHistory = new ApiPagedChannelHistory();
ApiPagedChannelHistory.ApiMessage apiMessage = new ApiPagedChannelHistory.ApiMessage();
final TextView textView = new TextView(context);
emptyView=findViewById(R.id.empty_view)
View emptyView = findViewById(R.id.empty_view);
final Integer action = values[0];
LoremAdapter loremAdapter = new LoremAdapter();
accounts=accountManager.getAccountsByType(accountType)
Account[] accounts = accountManager.getAccountsByType(accountType);
Bundle result;
Bundle result;
Bundle result = new Bundle();
activity=createLoginIntent(context,accountType,authTokenType,requiredFeatures,options)
Intent activity = createLoginIntent(context, accountType, authTokenType, requiredFeatures, options);
Bundle bundle = new Bundle();
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
accounts=accountManager.getAccountsByType(authTokenType)
Account[] accounts = accountManager.getAccountsByType(authTokenType);
bundle=createResponseBundle(token)
Bundle bundle = createResponseBundle(token);
accountManager=AccountManager.get(this.getApplicationContext())
AccountManager accountManager = AccountManager.get(this.getApplicationContext());
Account account = new Account(token.getUserName(), getAccountName());
Bundle bundle = new Bundle();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
GertHerbAuthenticator authenticator = new GertHerbAuthenticator(this);
fontId=getFontId(context,attrs)
int fontId = getFontId(context, attrs);
fontType=getFontType(fontId)
FontType fontType = getFontType(fontId);
typedArray=context.obtainStyledAttributes(attrs,R.styleable.CustomTextAppearance)
TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CustomTextAppearance);
typeface=createTypeFace(context,fontType)
Typeface typeface = createTypeFace(context, fontType);
info=context.getApplicationInfo()
ApplicationInfo info = context.getApplicationInfo();
name=activity.getTitle().toString()
String name = activity.getTitle().toString();
client=mServer.accept()
Socket client = mServer.accept();
boolean result;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
BufferedReader in = null;
request=in.readLine()
final String request = in.readLine();
String command;
String parameters;
index=request.indexOf(' ')
int index = request.indexOf(' ');
boolean result;
boolean success = true;
BufferedWriter out = null;
index=parameters.indexOf(' ')
int index = parameters.indexOf(' ');
code=parameters.substring(0,index)
final String code = parameters.substring(0, index);
int hashCode = (int) Long.parseLong(code, 16);
window=findWindow(hashCode)
final View window = findWindow(hashCode);
dispatch=ViewDebug.class.getDeclaredMethod("dispatchCommand",View.class,String.class,String.class,OutputStream.class)
final Method dispatch = ViewDebug.class.getDeclaredMethod("dispatchCommand",
                        View.class, String.class, String.class, OutputStream.class);
View window = null;
boolean result = true;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
boolean result = true;
String focusName = null;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
View focusedWindow = null;
BufferedWriter out = null;
boolean needWindowListUpdate = false;
boolean needFocusedWindowUpdate = false;
BetterAccountManager accountManager = new BetterAccountManager(this, getString(R.string.account_type), getString(R.string.token_type), null);
loginView=Views.findById(this,R.id.login_view)
LoginView loginView = Views.findById(this, R.id.login_view);
authorizationApi=new GithubApiFactory().createAuthorizationApi(credentials.username,credentials.password)
GithubApi authorizationApi = new GithubApiFactory().createAuthorizationApi(credentials.username, credentials.password);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
Endpoint endpoint = new Endpoint() {
            @Override
            public String getUrl() {
                return GITHUB_API_URL;
            }

            @Override
            public String getName() {
                return "Live";
            }
        };
interceptor=createAuthorizationRequestInterceptor(username,password)
RequestInterceptor interceptor = createAuthorizationRequestInterceptor(username, password);
restAdapter=createRestAdapter(endpoint,interceptor)
RestAdapter restAdapter = createRestAdapter(endpoint, interceptor);
Dummy dummy = new Dummy();
result=dummy.explodes()
boolean result = dummy.explodes();
String base64EncodedPublicKey = "CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE";
premiumPurchase=inventory.getPurchase(SKU_PREMIUM)
Purchase premiumPurchase = inventory.getPurchase(SKU_PREMIUM);
infiniteGasPurchase=inventory.getPurchase(SKU_INFINITE_GAS)
Purchase infiniteGasPurchase = inventory.getPurchase(SKU_INFINITE_GAS);
gasPurchase=inventory.getPurchase(SKU_GAS)
Purchase gasPurchase = inventory.getPurchase(SKU_GAS);
String payload = "";
String payload = "";
String payload = "";
payload=p.getDeveloperPayload()
String payload = p.getDeveloperPayload();
int index = mTank >= TANK_RES_IDS.length ? TANK_RES_IDS.length - 1 : mTank;
AlertDialog.Builder bld = new AlertDialog.Builder(this);
spe=getPreferences(MODE_PRIVATE).edit()
SharedPreferences.Editor spe = getPreferences(MODE_PRIVATE).edit();
sp=getPreferences(MODE_PRIVATE)
SharedPreferences sp = getPreferences(MODE_PRIVATE);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                                  + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                    | ((source[d + 1 + off] << 24) >>> 16)
                    | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                    | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                                   "-1002:Bad response received/" +
                                   "-1003:Purchase signature verification failed/" +
                                   "-1004:Send intent failed/" +
                                   "-1005:User cancelled/" +
                                   "-1006:Unknown purchase response/" +
                                   "-1007:Missing token/" +
                                   "-1008:Unknown error/" +
                                   "-1009:Subscriptions not available/" +
                                   "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(),
                    itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                        | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                        | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                            | ((source[d + 1 + off] << 24) >>> 16)
                            | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                            | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                "-1002:Bad response received/" +
                "-1003:Purchase signature verification failed/" +
                "-1004:Send intent failed/" +
                "-1005:User cancelled/" +
                "-1006:Unknown purchase response/" +
                "-1007:Missing token/" +
                "-1008:Unknown error/" +
                "-1009:Subscriptions not available/" +
                "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(), itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
responseCode=result.getResponse()
int responseCode = result.getResponse();
sku=purchase.getSku()
String sku = purchase.getSku();
skuDetails=inv.getSkuDetails(sku)
SkuDetails skuDetails = inv.getSkuDetails(sku);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
Button purchaseFiveButton = (Button) rootView.findViewById(R.id.fragment_main_button_purchase_five_coins);
xml=context.obtainStyledAttributes(attrs,R.styleable.LandingStrip)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.LandingStrip);
tabLayoutId=xml.getResourceId(R.styleable.LandingStrip_tabLayoutId,MISSING_TAB_LAYOUT_ID)
int tabLayoutId = xml.getResourceId(R.styleable.LandingStrip_tabLayoutId, MISSING_TAB_LAYOUT_ID);
indicatorColour=xml.getResourceId(R.styleable.LandingStrip_indicatorColor,DEFAULT_INDICATOR_COLOUR)
int indicatorColour = xml.getResourceId(R.styleable.LandingStrip_indicatorColor, DEFAULT_INDICATOR_COLOUR);
indicatorHeight=getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight,DEFAULT_INDICATOR_HEIGHT,xml)
int indicatorHeight = getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight, DEFAULT_INDICATOR_HEIGHT, xml);
tabsPaddingLeft=getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingLeft = getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding, DEFAULT_TABS_PADDING, xml);
tabsPaddingRight=getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingRight = getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding, DEFAULT_TABS_PADDING, xml);
MutableCoordinates drawCurrentTabCoordinates = new MutableCoordinates();
MutableCoordinates drawNextTabCoordinates = new MutableCoordinates();
MutableCoordinates drawMovingIndicatorCoordinates = new MutableCoordinates();
currentTab=tabsContainer.getTabAt(currentPosition)
View currentTab = tabsContainer.getTabAt(currentPosition);
currentTabStart=currentTab.getLeft()
float currentTabStart = currentTab.getLeft();
currentTabEnd=currentTab.getRight()
float currentTabEnd = currentTab.getRight();
nextTab=tabsContainer.getTabAt(currentPosition + 1)
View nextTab = tabsContainer.getTabAt(currentPosition + 1);
nextTabPositionOffset=getFractionFrom(pagePositionOffset)
float nextTabPositionOffset = getFractionFrom(pagePositionOffset);
indicatorStart=getIndicatorPosition(nextTab.getStart(),pagePositionOffset,currentTab.getStart(),nextTabPositionOffset)
float indicatorStart = getIndicatorPosition(nextTab.getStart(), pagePositionOffset, currentTab.getStart(), nextTabPositionOffset);
indicatorEnd=getIndicatorPosition(nextTab.getEnd(),pagePositionOffset,currentTab.getEnd(),nextTabPositionOffset)
float indicatorEnd = getIndicatorPosition(nextTab.getEnd(), pagePositionOffset, currentTab.getEnd(), nextTabPositionOffset);
height=getHeight()
int height = getHeight();
tabCount=pagerAdapter.getCount()
int tabCount = pagerAdapter.getCount();
title=pagerAdapter.getPageTitle(position)
CharSequence title = pagerAdapter.getPageTitle(position);
inflatedTabView=tabsContainer.inflateTab(layoutInflater,attributes.getTabLayoutId())
View inflatedTabView = tabsContainer.inflateTab(layoutInflater, attributes.getTabLayoutId());
int position = (int) view.getTag(TAG_KEY_POSITION);
scrollOffset=getHorizontalScrollOffset(position,positionOffset)
int scrollOffset = getHorizontalScrollOffset(position, positionOffset);
newScrollX=calculateScrollOffset(position,scrollOffset,positionOffset)
float newScrollX = calculateScrollOffset(position, scrollOffset, positionOffset);
tabWidth=tabsContainer.getTabAt(position).getWidth()
int tabWidth = tabsContainer.getTabAt(position).getWidth();
tabForPosition=tabsContainer.getTabAt(position)
View tabForPosition = tabsContainer.getTabAt(position);
float tabStartX = tabForPosition.getLeft() + scrollOffset;
int viewMiddleOffset = getTabParentWidth() / 2;
float tabCenterOffset = (tabForPosition.getRight() - tabForPosition.getLeft()) * 0.5F;
nextTabDelta=getNextTabDelta(position,pagerOffset,tabForPosition)
float nextTabDelta = getNextTabDelta(position, pagerOffset, tabForPosition);
LinearLayout tabsContainerView = new LinearLayout(context);
tab=getTabAt(index)
View tab = getTabAt(index);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
position=indicatorCoordinates.getStart()
float position = indicatorCoordinates.getStart();
lastTabOffset=((ViewGroup)getChildAt(0)).getChildAt(getChildCount() - 1).getWidth()
float lastTabOffset = ((ViewGroup) getChildAt(0)).getChildAt(getChildCount() - 1).getWidth();
frequency=getOneCycle(lastTabOffset)
float frequency = getOneCycle(lastTabOffset);
r=toHex(calculateColour(position,frequency,PHASE_RED,AMPLITUDE,CENTER_FREQUENCY))
String r = toHex(calculateColour(position, frequency, PHASE_RED, AMPLITUDE, CENTER_FREQUENCY));
g=toHex(calculateColour(position,frequency,PHASE_GREEN,AMPLITUDE,CENTER_FREQUENCY))
String g = toHex(calculateColour(position, frequency, PHASE_GREEN, AMPLITUDE, CENTER_FREQUENCY));
b=toHex(calculateColour(position,frequency,PHASE_BLUE,AMPLITUDE,CENTER_FREQUENCY))
String b = toHex(calculateColour(position, frequency, PHASE_BLUE, AMPLITUDE, CENTER_FREQUENCY));
height=getHeight()
int height = getHeight();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPagerFragment viewPagerFragment = new ViewPagerFragment();
Bundle bundle = new Bundle();
TextView view = (TextView) layoutInflater.inflate(R.layout.view_demo, container, false);
currentPosition=viewPagerAdapterState.getCurrentPosition()
int currentPosition = viewPagerAdapterState.getCurrentPosition();
view=getView(container,position)
View view = getView(container, position);
parcelableSparseArray=viewPagerAdapterState.get(position)
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
View view = (View) object;
SparseArray<Parcelable> viewState = new SparseArray<>();
position=entry.getValue()
int position = entry.getValue();
view=entry.getKey()
View view = entry.getKey();
bundle=in.readBundle()
Bundle bundle = in.readBundle();
Map<Integer, SparseArray<Parcelable>> viewStates = new HashMap<>(bundle.keySet().size());
sparseParcelableArray=bundle.getSparseParcelableArray(key)
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
primaryItemPosition=in.readInt()
int primaryItemPosition = in.readInt();
Bundle bundle = new Bundle();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
final TextView abText = (TextView) findViewById(R.id.ab_text);
final AyBe ayBe = new AyBe();
id=item.getItemId()
int id = item.getItemId();
callback=weakCallback.get()
AbTestingParamsLoadedCallback callback = weakCallback.get();
WeakReference<NoLeakActivity> weakNoLeakActivity = new WeakReference<NoLeakActivity>(noLeakActivity);
noLeakActivity=weakNoLeakActivity.get()
NoLeakActivity noLeakActivity = weakNoLeakActivity.get();
final float inverseRatio = 1f - ratio;
float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRatio);
float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRatio);
float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRatio);
hsv=node.getHsv()
float[] hsv = node.getHsv();
width=bitmap.getWidth()
final int width = bitmap.getWidth();
height=bitmap.getHeight()
final int height = bitmap.getHeight();
final int[] rgbPixels = new int[width * height];
final MedianCutQuantizer mcq = new MedianCutQuantizer(rgbPixels, NUM_COLORS);
primaryAccentColor=findPrimaryAccentColor()
final ColorNode primaryAccentColor = findPrimaryAccentColor();
secondaryAccentColor=findSecondaryAccentColor(primaryAccentColor)
final ColorNode secondaryAccentColor = findSecondaryAccentColor(primaryAccentColor);
tertiaryAccentColor=findTertiaryAccentColor(primaryAccentColor,secondaryAccentColor)
final int tertiaryAccentColor = findTertiaryAccentColor(
                primaryAccentColor, secondaryAccentColor);
primaryTextColor=findPrimaryTextColor(primaryAccentColor)
final int primaryTextColor = findPrimaryTextColor(primaryAccentColor);
secondaryTextColor=findSecondaryTextColor(primaryAccentColor)
final int secondaryTextColor = findSecondaryTextColor(primaryAccentColor);
final float primaryHue = primary.getHsv()[0];
final float candidateHue = candidate.getHsv()[0];
copy=Arrays.copyOf(palette,palette.length)
final MedianCutQuantizer.ColorNode[] copy = Arrays.copyOf(palette, palette.length);
maxCount=palette[0].getCount()
final float maxCount = palette[0].getCount();
lhsWeight=calculateWeight(lhs,maxCount)
final float lhsWeight = calculateWeight(lhs, maxCount);
rhsWeight=calculateWeight(rhs,maxCount)
final float rhsWeight = calculateWeight(rhs, maxCount);
float sum = 0;
float sumWeight = 0;
float value = values[i];
float weight = values[i + 1];
ColorHistogram colorHist = new ColorHistogram(pixels);
K=colorHist.getNumberOfColors()
int K = colorHist.getNumberOfColors();
ColorNode[] rCols = null;
rgb=colorHist.getColor(i)
int rgb = colorHist.getColor(i);
cnt=colorHist.getCount(i)
int cnt = colorHist.getCount(i);
ColorBox initialBox = new ColorBox(0, K - 1, 0);
List<ColorBox> colorSet = new ArrayList<ColorBox>();
int k = 1;
boolean done = false;
nextBox=findBoxToSplit(colorSet)
ColorBox nextBox = findBoxToSplit(colorSet);
newBox=nextBox.splitBox()
ColorBox newBox = nextBox.splitBox();
color=findClosestColor(pixels[i])
ColorNode color = findClosestColor(pixels[i]);
idx=findClosestColorIndex(rgb)
int idx = findClosestColorIndex(rgb);
red=Color.red(rgb)
int red = Color.red(rgb);
grn=Color.green(rgb)
int grn = Color.green(rgb);
blu=Color.blue(rgb)
int blu = Color.blue(rgb);
int minIdx = 0;
int minDistance = Integer.MAX_VALUE;
ColorNode color = quantColors[i];
d2=color.distance2(red,grn,blu)
int d2 = color.distance2(red, grn, blu);
ColorBox boxToSplit = null;
int minLevel = Integer.MAX_VALUE;
n=colorBoxes.size()
int n = colorBoxes.size();
ColorNode[] avgColors = new ColorNode[n];
int i = 0;
int dr = this.red - red;
int dg = this.grn - grn;
int db = this.blu - blu;
ColorNode color = imageColors[i];
int r = color.red;
int g = color.grn;
int b = color.blu;
dim=getLongestColorDimension()
ColorDimension dim = getLongestColorDimension();
med=findMedian(dim)
int med = findMedian(dim);
int nextLevel = level + 1;
ColorBox newBox = new ColorBox(med + 1, upper, nextLevel);
int rLength = rmax - rmin;
int gLength = gmax - gmin;
int bLength = bmax - bmin;
int half = count / 2;
int nPixels, median;
int rSum = 0;
int gSum = 0;
int bSum = 0;
int n = 0;
ColorNode ci = imageColors[i];
int cnt = ci.cnt;
double nd = n;
int avgRed = (int) (0.5 + rSum / nd);
int avgGrn = (int) (0.5 + gSum / nd);
int avgBlu = (int) (0.5 + bSum / nd);
s=this.getClass().getSimpleName()
String s = this.getClass().getSimpleName();
int i = 0;
int N = pixelsOrig.length;
int[] pixelsCpy = new int[N];
int k = -1;
int curColor = -1;
int nColors = k + 1;
id=item.getItemId()
int id = item.getItemId();
Intent intent = new Intent();
bitmap=((BitmapDrawable)imageView.getDrawable()).getBitmap()
Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap();
DominantColorCalculator dominantColorCalculator = new DominantColorCalculator(bitmap);
selectedImageUri=data.getData()
Uri selectedImageUri = data.getData();
selectedImagePath=getPath(selectedImageUri)
String selectedImagePath = getPath(selectedImageUri);
String[] projection = {MediaStore.Images.Media.DATA};
cursor=managedQuery(uri,projection,null,null,null)
Cursor cursor = managedQuery(uri, projection, null, null, null);
column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)
int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
LinearLayout rootView = (LinearLayout) inflater.inflate(R.layout.fragment_main, container, false);
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
preapprovalButton=payPal.getCheckoutButton(getActivity(),PayPal.BUTTON_194x37,CheckoutButton.TEXT_PAY)
CheckoutButton preapprovalButton = payPal.getCheckoutButton(getActivity(), PayPal.BUTTON_194x37, CheckoutButton.TEXT_PAY);
preapprovalIntent=payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY)
Intent preapprovalIntent = payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY);
String resultTitle = "";
String resultInfo = "";
String resultExtra = "";
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
PayPalPreapproval preapproval = new PayPalPreapproval();
preapproval=createPreapproval(preapprovalKey)
PayPalPreapproval preapproval = createPreapproval(preapprovalKey);
Bundle bundle = new Bundle();
int availableLength = maxLength;
StringBuilder stringBuilder = new StringBuilder(maxLength);
prefixAndSuffixLength=computeAppendedLengthIncludingSeparatorSpaces(prefix,suffix)
int prefixAndSuffixLength = computeAppendedLengthIncludingSeparatorSpaces(prefix, suffix);
urlLength=computeUrlLengthIncludingSeparatorSpace(url)
int urlLength = computeUrlLengthIncludingSeparatorSpace(url);
trimmedSubject=ellipsizeTextIfExceedsMaxLength(subject,availableLength)
String trimmedSubject = ellipsizeTextIfExceedsMaxLength(subject, availableLength);
int length = 0;
preferences=context.getSharedPreferences(MRU_PREFERENCES,Context.MODE_PRIVATE)
SharedPreferences preferences = context.getSharedPreferences(MRU_PREFERENCES, Context.MODE_PRIVATE);
args=getArguments()
Bundle args = getArguments();
themeResId=getThemeResIdIfProvidedIn(args)
int themeResId = getThemeResIdIfProvidedIn(args);
title=getTitleIfProvidedIn(args)
CharSequence title = getTitleIfProvidedIn(args);
builder=createDialogBuilder(themeResId).setCancelable(true).setView(dialogView)
AlertDialog.Builder builder = createDialogBuilder(themeResId)
                .setCancelable(true)
                .setView(dialogView);
inflater=getActivity().getLayoutInflater()
LayoutInflater inflater = getActivity().getLayoutInflater();
GridView gridView = (GridView) rootView.findViewById(R.id.ps__dialog_grid);
targetApps=extractTargetAppsFrom(args)
TargetApps targetApps = extractTargetAppsFrom(args);
allShareTargets=getAvailableShareTargets(sharingIntent)
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
priorityAppInfos=createPriorityResolveInfoList(targetApps,allShareTargets)
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
otherAppInfos=createOtherAppsResolveInfoList(priorityAppInfos,allShareTargets)
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
resolveInfos=targetApps.extractTargetResolveInfosFrom(allShareTargets)
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
mruResolveInfo=findMruResolveInfoIn(allShareTargets)
ResolveInfo mruResolveInfo = findMruResolveInfoIn(allShareTargets);
List<ResolveInfo> otherAppsInfos = new ArrayList<ResolveInfo>(allAppInfos);
mruPackageName=persister.getLastUsedTarget()
String mruPackageName = persister.getLastUsedTarget();
String packageName = resolveInfo.activityInfo.packageName;
packageManager=getActivity().getPackageManager()
PackageManager packageManager = getActivity().getPackageManager();
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
View buttonStrip = (View) showMoreButton.getParent();
gridView=getGridView()
GridView gridView = getGridView();
intent=wrapIntentWithExplicitTargetComponentForItem(position,sharingIntent)
Intent intent = wrapIntentWithExplicitTargetComponentForItem(position, sharingIntent);
Intent intent = new Intent(sharingIntent);
ActivityInfo activity = adapter.getItem(position).activityInfo;
ComponentName name = new ComponentName(activity.applicationInfo.packageName, activity.name);
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
PriorityShareDialog dialog = new PriorityShareDialog();
Bundle args = new Bundle();
sharingIntent=createSharingIntent()
Intent sharingIntent = createSharingIntent();
fragmentManager=activity.getFragmentManager()
FragmentManager fragmentManager = activity.getFragmentManager();
Intent intent = new Intent(Intent.ACTION_SEND);
dialog=new PriorityShareDialog.Builder().setTitle(title).setTargetApps(targetApps).setSharingIntent(sharingIntent).setOnPrepareSharingIntentListener(listener).setShowMostRecentlyUsed(showMostRecentlyUsed).build()
PriorityShareDialog dialog = new PriorityShareDialog.Builder()
                .setTitle(title)
                .setTargetApps(targetApps)
                .setSharingIntent(sharingIntent)
                .setOnPrepareSharingIntentListener(listener)
                .setShowMostRecentlyUsed(showMostRecentlyUsed)
                .build();
PrioritySharer prioritySharer = new PrioritySharer();
prioritySharer=build()
PrioritySharer prioritySharer = build();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
layoutInflater=LayoutInflater.from(context)
LayoutInflater layoutInflater = LayoutInflater.from(context);
iconSizePx=getIconSizePx(context.getResources())
int iconSizePx = getIconSizePx(context.getResources());
ArrayList<ResolveInfo> sortedList = new ArrayList<ResolveInfo>(resolveInfoList);
int otherAppsCountMaybe = showAllApps ? otherAppInfos.size() : 0;
firstOtherAppsItemPosition=priorityAppInfos.size()
int firstOtherAppsItemPosition = priorityAppInfos.size();
int offsetPosition = position - firstOtherAppsItemPosition;
TextView textView;
textView=initializeItemViewIfNecessary(convertView,R.layout.ps__grid_item_share,parent)
TextView textView = initializeItemViewIfNecessary(convertView, R.layout.ps__grid_item_share, parent);
info=getItem(position)
ResolveInfo info = getItem(position);
icon=info.loadIcon(packageManager)
Drawable icon = info.loadIcon(packageManager);
arraySize=in.readInt()
int arraySize = in.readInt();
String[] packageNames = new String[arraySize];
arraySize=targetPackages.size()
int arraySize = targetPackages.size();
String[] packagesArray = new String[arraySize];
SparseArray<ResolveInfo> matchedResolveInfos = new SparseArray<ResolveInfo>(targetPackages.size());
String packageName = info.activityInfo.packageName;
index=indexOfItemInto(packageName,targetPackages)
int index = indexOfItemInto(packageName, targetPackages);
sparseArraySize=sparseArray.size()
int sparseArraySize = sparseArray.size();
ArrayList<T> list = new ArrayList<T>(sparseArraySize);
int i = 0;
originalSubject=intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT)
CharSequence originalSubject = intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT);
String subject = originalSubject != null ? originalSubject.toString() : null;
composer=createComposer()
MessageComposer composer = createComposer();
component=intent.getComponent()
ComponentName component = intent.getComponent();
targetPackageName=component.getPackageName()
String targetPackageName = component.getPackageName();
adapter=ArrayAdapter.createFromResource(this,R.array.target_apps,android.R.layout.simple_spinner_item)
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
EditText text = (EditText) findViewById(R.id.text);
EditText title = (EditText) findViewById(R.id.title);
EditText mimeType = (EditText) findViewById(R.id.mime_type);
EditText dataUri = (EditText) findViewById(R.id.data_uri);
Switch showMostRecentlyUsed = (Switch) findViewById(R.id.show_most_recently_used);
uriString=dataUri.getText().toString()
String uriString = dataUri.getText().toString();
EditText text = (EditText) findViewById(R.id.text);
TextView textView = (TextView) convertView.findViewById(R.id.positionView);
colorView=convertView.findViewById(R.id.colorView)
View colorView = convertView.findViewById(R.id.colorView);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
offset=headerPlaceholder.getTop()
int offset = headerPlaceholder.getTop();
Integer item = COLORS[position];
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
firstVisiblePosition=grid.getFirstVisiblePosition()
int firstVisiblePosition = grid.getFirstVisiblePosition();
inflate=getViewForPosition(container,position)
View inflate = getViewForPosition(container, position);
id=item.getItemId()
int id = item.getItemId();
MyActivity activity = new MyActivity();
String manifestProperty = "../app/src/main/AndroidManifest.xml";
String resProperty = "../app/src/main/res";
cursor=resolver.query(uri,projection,selection,selectionArgs,null)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, null);
cursor=resolver.query(uri,projection,selection,selectionArgs,sortOrder)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, sortOrder);
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=richClass.setter(name)
Method setter = richClass.setter(name);
T obj;
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=methodsByName.get(name)
Method setter = methodsByName.get(name);
int type = TYPE_INT;
Class<?> t = setter.getParameterTypes()[0];
Class<?> t = setter.getParameterTypes()[0];
cursorType=cursor.getType(index)
final int cursorType = cursor.getType(index);
final Object obj;
s=f.getAnnotation(Mapper.class)
Mapper s = f.getAnnotation(Mapper.class);
mm=m.getAnnotation(Mapper.class)
Mapper mm = m.getAnnotation(Mapper.class);
methodName=StringUtil.asCamelifySetMethod(what)
String methodName = StringUtil.asCamelifySetMethod(what);
cursor=getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,null,null,null,null)
Cursor cursor = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
now=System.currentTimeMillis()
long now = System.currentTimeMillis();
List<Contact2> typedCursor = new CursorList<Contact2>(cursor, Contact2.class);
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[a-zA-Z0-9]+")
Pattern p = Pattern.compile("[a-zA-Z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[A-Z][a-z0-9]+")
Pattern p = Pattern.compile("[A-Z][a-z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
SurfaceView first = (SurfaceView) findViewById(R.id.firstSurface);
SurfaceView second = (SurfaceView) findViewById(R.id.secondSurface);
Intent pickVideo = new Intent(Intent.ACTION_PICK);
Bundle args = new Bundle();
enroll=mHotwordDetector.createEnrollIntent()
Intent enroll = mHotwordDetector.createEnrollIntent();

Diff of d8b360e892f731015e2d35fd721f2f56727a4723 and 1c08a3fb7ba78663d92a0552e6e7b4f90e238c30:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 35
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null
GitAPIException thrown!
Cannot revert commit 'd8b360e892f731015e2d35fd721f2f56727a4723' because it has 2 parents, only commits with exactly one parent are supported
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null

****Parsing for addition at revision b999e8935be03c0e0d71bcfc118e6c9f2b9e16c9****

Added ApplicationTest.java to .\/spikes\ repository source files.
Added DrawerActivity.java to .\/spikes\ repository source files.
Added EarthActivity.java to .\/spikes\ repository source files.
Added SaturnActivity.java to .\/spikes\ repository source files.
Added LocalPlayerActivity.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added CastApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ComposeSmsActivity.java to .\/spikes\ repository source files.
Added HeadlessSmsSendService.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MmsReceiver.java to .\/spikes\ repository source files.
Added SmsReceiver.java to .\/spikes\ repository source files.
Added ExtendedDemoActivity.java to .\/spikes\ repository source files.
Added ExtendedDemoApplication.java to .\/spikes\ repository source files.
Added SimpleDemoActivity.java to .\/spikes\ repository source files.
Added SimpleDemoApplication.java to .\/spikes\ repository source files.
Added Binder.java to .\/spikes\ repository source files.
Added ConnectedClient.java to .\/spikes\ repository source files.
Added Connection.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnection.java to .\/spikes\ repository source files.
Added ServiceConnectionCallback.java to .\/spikes\ repository source files.
Added EasyCustomTabs.java to .\/spikes\ repository source files.
Added ActionButtonComposer.java to .\/spikes\ repository source files.
Added CloseButtonIconComposer.java to .\/spikes\ repository source files.
Added Composer.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilder.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigator.java to .\/spikes\ repository source files.
Added EasyCustomTabsWebNavigator.java to .\/spikes\ repository source files.
Added ExitAnimationsComposer.java to .\/spikes\ repository source files.
Added IntentCustomizer.java to .\/spikes\ repository source files.
Added MenuItemComposer.java to .\/spikes\ repository source files.
Added NavigationFallback.java to .\/spikes\ repository source files.
Added Navigator.java to .\/spikes\ repository source files.
Added ShowTitleComposer.java to .\/spikes\ repository source files.
Added StartAnimationsComposer.java to .\/spikes\ repository source files.
Added ToolbarColorComposer.java to .\/spikes\ repository source files.
Added UrlBarHidingComposer.java to .\/spikes\ repository source files.
Added WebNavigator.java to .\/spikes\ repository source files.
Added AvailableAppProvider.java to .\/spikes\ repository source files.
Added BestPackageFinder.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProvider.java to .\/spikes\ repository source files.
Added BinderTest.java to .\/spikes\ repository source files.
Added ConnectedClientTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsConnectionTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsIntentBuilderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsNavigatorTest.java to .\/spikes\ repository source files.
Added BestPackageFinderTest.java to .\/spikes\ repository source files.
Added EasyCustomTabsAvailableAppProviderTest.java to .\/spikes\ repository source files.
Added ApiPagedChannelHistory.java to .\/spikes\ repository source files.
Added ApiPagedResponse.java to .\/spikes\ repository source files.
Added ChannelHistory.java to .\/spikes\ repository source files.
Added HistoryConverter.java to .\/spikes\ repository source files.
Added Runner.java to .\/spikes\ repository source files.
Added SlackHistoryFetcher.java to .\/spikes\ repository source files.
Added SlackWebService.java to .\/spikes\ repository source files.
Added ApiPagedResponseTest.java to .\/spikes\ repository source files.
Added MainActivityTest.java to .\/spikes\ repository source files.
Added LoremAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added BetterAccountManager.java to .\/spikes\ repository source files.
Added BetterAuthenticator.java to .\/spikes\ repository source files.
Added BetterAuthenticatorActivity.java to .\/spikes\ repository source files.
Added GertHerbAuthenticator.java to .\/spikes\ repository source files.
Added GertHerbAuthenticatorService.java to .\/spikes\ repository source files.
Added NoAccountException.java to .\/spikes\ repository source files.
Added ReactiveAuthenticatorActivity.java to .\/spikes\ repository source files.
Added Token.java to .\/spikes\ repository source files.
Added GertHerbActivity.java to .\/spikes\ repository source files.
Added GertHerbApplication.java to .\/spikes\ repository source files.
Added GertHerbAuthenticationActivity.java to .\/spikes\ repository source files.
Added TypefaceFactory.java to .\/spikes\ repository source files.
Added Utils.java to .\/spikes\ repository source files.
Added ViewServer.java to .\/spikes\ repository source files.
Added ViewServerManager.java to .\/spikes\ repository source files.
Added DeveloperError.java to .\/spikes\ repository source files.
Added HomeActivity.java to .\/spikes\ repository source files.
Added LoginActivity.java to .\/spikes\ repository source files.
Added LoginView.java to .\/spikes\ repository source files.
Added UserCredentials.java to .\/spikes\ repository source files.
Added FontButton.java to .\/spikes\ repository source files.
Added FontEditText.java to .\/spikes\ repository source files.
Added FontTextView.java to .\/spikes\ repository source files.
Added GithubApi.java to .\/spikes\ repository source files.
Added GithubApiFactory.java to .\/spikes\ repository source files.
Added TokenRequest.java to .\/spikes\ repository source files.
Added TokenResponse.java to .\/spikes\ repository source files.
Added Dummy.java to .\/spikes\ repository source files.
Added DummyTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added Base64.java to .\/spikes\ repository source files.
Added Base64DecoderException.java to .\/spikes\ repository source files.
Added IabException.java to .\/spikes\ repository source files.
Added IabHelper.java to .\/spikes\ repository source files.
Added IabResult.java to .\/spikes\ repository source files.
Added Inventory.java to .\/spikes\ repository source files.
Added Purchase.java to .\/spikes\ repository source files.
Added Security.java to .\/spikes\ repository source files.
Added SkuDetails.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added MainFragment.java to .\/spikes\ repository source files.
Added Attributes.java to .\/spikes\ repository source files.
Added Coordinates.java to .\/spikes\ repository source files.
Added IndicatorCoordinatesCalculator.java to .\/spikes\ repository source files.
Added LandingStrip.java to .\/spikes\ repository source files.
Added MutableCoordinates.java to .\/spikes\ repository source files.
Added OnPagerAdapterChangedListener.java to .\/spikes\ repository source files.
Added PagerAdapterObserver.java to .\/spikes\ repository source files.
Added Scrollable.java to .\/spikes\ repository source files.
Added ScrollingPageChangeListener.java to .\/spikes\ repository source files.
Added State.java to .\/spikes\ repository source files.
Added TabsContainer.java to .\/spikes\ repository source files.
Added CustomLandingStrip.java to .\/spikes\ repository source files.
Added CustomTabActivity.java to .\/spikes\ repository source files.
Added ExampleRainbowLandingStrip.java to .\/spikes\ repository source files.
Added FixedWidthTabActivity.java to .\/spikes\ repository source files.
Added NoFragmentsSimpleTextTabActivity.java to .\/spikes\ repository source files.
Added Data.java to .\/spikes\ repository source files.
Added DemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added SmallDemoFragmentPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerFragment.java to .\/spikes\ repository source files.
Added DemoViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapter.java to .\/spikes\ repository source files.
Added ViewPagerAdapterState.java to .\/spikes\ repository source files.
Added SimpleTextTabActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AbTestingParamsLoadedCallback.java to .\/spikes\ repository source files.
Added AyBe.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added WeakStartCallback.java to .\/spikes\ repository source files.
Added LeakActivity.java to .\/spikes\ repository source files.
Added NoLeakActivity.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added ColorScheme.java to .\/spikes\ repository source files.
Added ColorUtils.java to .\/spikes\ repository source files.
Added DominantColorCalculator.java to .\/spikes\ repository source files.
Added FloatUtils.java to .\/spikes\ repository source files.
Added MedianCutQuantizer.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added PayPalFragment.java to .\/spikes\ repository source files.
Added PayPalHelper.java to .\/spikes\ repository source files.
Added MaxLengthMessageComposer.java to .\/spikes\ repository source files.
Added MessageComposer.java to .\/spikes\ repository source files.
Added TwitterMessageComposer.java to .\/spikes\ repository source files.
Added DisabledMruPersister.java to .\/spikes\ repository source files.
Added MruPersister.java to .\/spikes\ repository source files.
Added SharedPreferencesMruPersister.java to .\/spikes\ repository source files.
Added OnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added PriorityShareDialog.java to .\/spikes\ repository source files.
Added PrioritySharer.java to .\/spikes\ repository source files.
Added ShareTargetsAdapter.java to .\/spikes\ repository source files.
Added SimpleOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added TargetApps.java to .\/spikes\ repository source files.
Added TwitterOnPrepareSharingIntentListener.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added AdvancedActivity.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SimpleActivity.java to .\/spikes\ repository source files.
Added LockingActivity.java to .\/spikes\ repository source files.
Added PostLockingActivity.java to .\/spikes\ repository source files.
Added PreLockingActivity.java to .\/spikes\ repository source files.
Added DummyAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added NovoStaggeredGridView.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added ImagesAdapter.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added StaggeredGridViewFragment.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SpikeApplication.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added SwipeableView.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MyActivity.java to .\/spikes\ repository source files.
Added MyClass.java to .\/spikes\ repository source files.
Added MyClassTest.java to .\/spikes\ repository source files.
Added MyAndroidClassTest.java to .\/spikes\ repository source files.
Added RobolectricGradleTestRunner.java to .\/spikes\ repository source files.
Added Mapper.java to .\/spikes\ repository source files.
Added Query.java to .\/spikes\ repository source files.
Added TypedResolver.java to .\/spikes\ repository source files.
Added CursorList.java to .\/spikes\ repository source files.
Added CursorListIterator.java to .\/spikes\ repository source files.
Added CursorMarshaller.java to .\/spikes\ repository source files.
Added EmptyListIterator.java to .\/spikes\ repository source files.
Added ReflectionCursorMarshaller.java to .\/spikes\ repository source files.
Added RichClass.java to .\/spikes\ repository source files.
Added Setter.java to .\/spikes\ repository source files.
Added Function.java to .\/spikes\ repository source files.
Added TypedElementLoader.java to .\/spikes\ repository source files.
Added TypedLoader.java to .\/spikes\ repository source files.
Added Marshaller.java to .\/spikes\ repository source files.
Added ObjectMapper.java to .\/spikes\ repository source files.
Added TypedActivity.java to .\/spikes\ repository source files.
Added StringUtil.java to .\/spikes\ repository source files.
Added MyObject.java to .\/spikes\ repository source files.
Added MediaPlayerSwitcherActivity.java to .\/spikes\ repository source files.
Added VideoPlayerService.java to .\/spikes\ repository source files.
Added ApplicationTest.java to .\/spikes\ repository source files.
Added MainActivity.java to .\/spikes\ repository source files.
Added RecognitionService.java to .\/spikes\ repository source files.
Added SessionService.java to .\/spikes\ repository source files.
Added SettingsActivity.java to .\/spikes\ repository source files.
Added SmartContextInteractionService.java to .\/spikes\ repository source files.
ViewGroup contentView = (ViewGroup) findViewById(R.id.content_frame);
String[] planetTitles = new String[]{"Earth", "Saturn"};
DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
ListView drawerList = (ListView) findViewById(R.id.left_drawer);
Intent intent;
ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, R.string.drawer_open, R.string.drawer_close);
b=getIntent().getExtras()
Bundle b = getIntent().getExtras();
mShouldStartPlayback=b.getBoolean("shouldStart")
boolean mShouldStartPlayback = b.getBoolean("shouldStart");
startPosition=b.getInt("startPosition",0)
int startPosition = b.getInt("startPosition", 0);
currentPos=mVideoView.getCurrentPosition()
int currentPos = mVideoView.getCurrentPosition();
String msg;
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, mDisplaySize.y + getActionBar().getHeight());
mm=mSelectedMedia.getMetadata()
MediaMetadata mm = mSelectedMedia.getMetadata();
mDisplaySize=Utils.getDisplaySize(this)
Point mDisplaySize = Utils.getDisplaySize(this);
RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(mDisplaySize.x, (int) (mDisplaySize.x * ASPECT_RATIO));
WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
width=display.getWidth()
int width = display.getWidth();
height=display.getHeight()
int height = display.getHeight();
int resourceId = 0;
String videoUrl = "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4#sthash.rJ5rPZy8.dpuf";
String title = "Jahre Philharmonie";
String description = "Awesome film you must watch!";
String author = "Blundell";
String thumbUrl = "http://www.ustream.tv/blog/wp-content/uploads/2013/10/simply-go-live.png";
MediaMetadata metadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE);
mediaInfo=new MediaInfo.Builder(videoUrl).setMetadata(metadata).setStreamType(MediaInfo.STREAM_TYPE_BUFFERED).setContentType("video/mp4").build()
MediaInfo mediaInfo = new MediaInfo.Builder(videoUrl)
                        .setMetadata(metadata)
                        .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)
                        .setContentType("video/mp4")
                        .build();
Intent intent = new Intent(MainActivity.this, LocalPlayerActivity.class);
preferences=getPreferences(MODE_PRIVATE)
SharedPreferences preferences = getPreferences(MODE_PRIVATE);
defaultSmsPackage=Telephony.Sms.getDefaultSmsPackage(this)
String defaultSmsPackage = Telephony.Sms.getDefaultSmsPackage(this);
Intent intent = new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
intent=new Intent(Intent.ACTION_VIEW).setData(url).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
Intent intent = new Intent(Intent.ACTION_VIEW)
                    .setData(url)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
contentView=findViewById(android.R.id.content)
View contentView = findViewById(android.R.id.content);
availableAppProvider=EasyCustomTabs.getInstance()
AvailableAppProvider availableAppProvider = EasyCustomTabs.getInstance();
ConnectedClient connectedClient = new ConnectedClient(client);
binder=Binder.newInstance()
Binder binder = Binder.newInstance();
List<Composer> composerList = new ArrayList<>();
customTabsSession=connection.newSession()
CustomTabsSession customTabsSession = connection.newSession();
CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(customTabsSession);
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
connection=EasyCustomTabs.getInstance()
Connection connection = EasyCustomTabs.getInstance();
basicIntentBuilder=EasyCustomTabsIntentBuilder.newInstance()
EasyCustomTabsIntentBuilder basicIntentBuilder = EasyCustomTabsIntentBuilder.newInstance();
context=EasyCustomTabs.getInstance().getContext()
Context context = EasyCustomTabs.getInstance().getContext();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
packagesSupportingCustomTabs=getPackagesSupportingCustomTabs()
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
List<String> packagesSupportingCustomTabs = getPackagesSupportingCustomTabs();
defaultPackage=getDefaultPackage()
String defaultPackage = getDefaultPackage();
defaultActivityInfo=packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK,0)
ResolveInfo defaultActivityInfo = packageManager.resolveActivity(INTENT_TO_EXTERNAL_LINK, 0);
String packageName = defaultActivityInfo.activityInfo.packageName;
resolvedInfoList=packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK,0)
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<ResolveInfo> resolvedInfoList = packageManager.queryIntentActivities(INTENT_TO_EXTERNAL_LINK, 0);
List<String> packagesSupportingCustomTabs = new ArrayList<>();
Intent serviceIntent = new Intent();
bestPackageFinder=BestPackageFinder.newInstance()
BestPackageFinder bestPackageFinder = BestPackageFinder.newInstance();
packageName=bestPackageFinder.findBestPackage()
String packageName = bestPackageFinder.findBestPackage();
resolveInfo=createResolveInfoFor(packageName)
ResolveInfo resolveInfo = createResolveInfoFor(packageName);
ResolveInfo resolveInfo = new ResolveInfo();
List<ResolveInfo> resolveInfoList = new ArrayList<>();
defaultPackageResolveInfo=createResolveInfoFor(packageName)
ResolveInfo defaultPackageResolveInfo = createResolveInfoFor(packageName);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
oldestApiMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage oldestApiMessage = apiMessages.get(apiMessages.size() - 1);
String lastResponseEpochTime = oldestApiMessage.timeStamp;
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
List<ApiPagedChannelHistory.ApiMessage> latestMessages = responses.get(responses.size() - 1).apiMessages;
latestMessage=latestMessages.get(latestMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage latestMessage = latestMessages.get(latestMessages.size() - 1);
latestMessageDateTime=convertToLocalDateTime(latestMessage.timeStamp)
LocalDateTime latestMessageDateTime = convertToLocalDateTime(latestMessage.timeStamp);
List<ChannelHistory.Message> messages = new ArrayList<>();
historyFrom=getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1))
LocalDateTime historyFrom = getOldestMessageLocalDateTime(apiPagedChannelHistory.get(apiPagedChannelHistory.size() - 1));
historyTo=getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0))
LocalDateTime historyTo = getLatestMessageLocalDateTime(apiPagedChannelHistory.get(0));
String text = apiMessage.text;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
lastMessage=apiMessages.get(apiMessages.size() - 1)
ApiPagedChannelHistory.ApiMessage lastMessage = apiMessages.get(apiMessages.size() - 1);
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
List<ApiPagedChannelHistory.ApiMessage> apiMessages = apiPagedChannelHistory.apiMessages;
firstMessage=apiMessages.get(0)
ApiPagedChannelHistory.ApiMessage firstMessage = apiMessages.get(0);
decimalSplit=lastResponseEpochTime.indexOf(".")
int decimalSplit = lastResponseEpochTime.indexOf(".");
epochSecond=Long.valueOf(lastResponseEpochTime.substring(0,decimalSplit))
Long epochSecond = Long.valueOf(lastResponseEpochTime.substring(0, decimalSplit));
nanoOfSecond=Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1))
Integer nanoOfSecond = Integer.valueOf(lastResponseEpochTime.substring(decimalSplit + 1));
ZoneOffset timezone = ZoneOffset.UTC;
String slackToken = args[0];
retrofit=new Retrofit.Builder().baseUrl("https://slack.com/api/").addConverterFactory(GsonConverterFactory.create()).build()
Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://slack.com/api/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();
slackWebService=retrofit.create(SlackWebService.class)
SlackWebService slackWebService = retrofit.create(SlackWebService.class);
slackHistoryFetcher=SlackHistoryFetcher.from(slackWebService,slackToken)
SlackHistoryFetcher slackHistoryFetcher = SlackHistoryFetcher.from(slackWebService, slackToken);
start=LocalDateTime.now()
LocalDateTime start = LocalDateTime.now();
end=LocalDateTime.now().minusDays(7)
LocalDateTime end = LocalDateTime.now().minusDays(7);
channelHistory=slackHistoryFetcher.getChannelHistory(start,end)
ChannelHistory channelHistory = slackHistoryFetcher.getChannelHistory(start, end);
HistoryConverter historyConverter = new HistoryConverter();
ApiPagedResponse apiPagedResponse = new ApiPagedResponse(start);
response=fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime())
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
Response<ApiPagedChannelHistory> response = fetchApiChannelHistoryResponse(apiPagedResponse.getLastResponseEpochTime());
apiPagedChannelHistory=response.body()
ApiPagedChannelHistory apiPagedChannelHistory = response.body();
channelHistory=slackWebService.getChannelHistory(slackToken,channel,lastResponseEpochTime,NUMBER_OF_RESULTS)
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
Call<ApiPagedChannelHistory> channelHistory = slackWebService
                .getChannelHistory(slackToken, channel, lastResponseEpochTime, NUMBER_OF_RESULTS);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_1_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
apiPagedChannelHistory=createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0)
ApiPagedChannelHistory apiPagedChannelHistory = createApiPagedChannelHistoryWithLastResponseDate(TWENTY16_DEC_3_0_0_0);
ApiPagedResponse response = new ApiPagedResponse(null);
ApiPagedChannelHistory apiPagedChannelHistory = new ApiPagedChannelHistory();
ApiPagedChannelHistory.ApiMessage apiMessage = new ApiPagedChannelHistory.ApiMessage();
final TextView textView = new TextView(context);
emptyView=findViewById(R.id.empty_view)
View emptyView = findViewById(R.id.empty_view);
final Integer action = values[0];
LoremAdapter loremAdapter = new LoremAdapter();
accounts=accountManager.getAccountsByType(accountType)
Account[] accounts = accountManager.getAccountsByType(accountType);
Bundle result;
Bundle result;
Bundle result = new Bundle();
activity=createLoginIntent(context,accountType,authTokenType,requiredFeatures,options)
Intent activity = createLoginIntent(context, accountType, authTokenType, requiredFeatures, options);
Bundle bundle = new Bundle();
token=accountManager.peekAuthToken(account,authTokenType)
String token = accountManager.peekAuthToken(account, authTokenType);
accounts=accountManager.getAccountsByType(authTokenType)
Account[] accounts = accountManager.getAccountsByType(authTokenType);
bundle=createResponseBundle(token)
Bundle bundle = createResponseBundle(token);
accountManager=AccountManager.get(this.getApplicationContext())
AccountManager accountManager = AccountManager.get(this.getApplicationContext());
Account account = new Account(token.getUserName(), getAccountName());
Bundle bundle = new Bundle();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
response=getAuthenticatorResponseFromExtras()
AccountAuthenticatorResponse response = getAuthenticatorResponseFromExtras();
GertHerbAuthenticator authenticator = new GertHerbAuthenticator(this);
fontId=getFontId(context,attrs)
int fontId = getFontId(context, attrs);
fontType=getFontType(fontId)
FontType fontType = getFontType(fontId);
typedArray=context.obtainStyledAttributes(attrs,R.styleable.CustomTextAppearance)
TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CustomTextAppearance);
typeface=createTypeFace(context,fontType)
Typeface typeface = createTypeFace(context, fontType);
info=context.getApplicationInfo()
ApplicationInfo info = context.getApplicationInfo();
name=activity.getTitle().toString()
String name = activity.getTitle().toString();
client=mServer.accept()
Socket client = mServer.accept();
boolean result;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
BufferedReader in = null;
request=in.readLine()
final String request = in.readLine();
String command;
String parameters;
index=request.indexOf(' ')
int index = request.indexOf(' ');
boolean result;
boolean success = true;
BufferedWriter out = null;
index=parameters.indexOf(' ')
int index = parameters.indexOf(' ');
code=parameters.substring(0,index)
final String code = parameters.substring(0, index);
int hashCode = (int) Long.parseLong(code, 16);
window=findWindow(hashCode)
final View window = findWindow(hashCode);
dispatch=ViewDebug.class.getDeclaredMethod("dispatchCommand",View.class,String.class,String.class,OutputStream.class)
final Method dispatch = ViewDebug.class.getDeclaredMethod("dispatchCommand",
                        View.class, String.class, String.class, OutputStream.class);
View window = null;
boolean result = true;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
boolean result = true;
String focusName = null;
BufferedWriter out = null;
clientStream=client.getOutputStream()
OutputStream clientStream = client.getOutputStream();
View focusedWindow = null;
BufferedWriter out = null;
boolean needWindowListUpdate = false;
boolean needFocusedWindowUpdate = false;
BetterAccountManager accountManager = new BetterAccountManager(this, getString(R.string.account_type), getString(R.string.token_type), null);
loginView=Views.findById(this,R.id.login_view)
LoginView loginView = Views.findById(this, R.id.login_view);
authorizationApi=new GithubApiFactory().createAuthorizationApi(credentials.username,credentials.password)
GithubApi authorizationApi = new GithubApiFactory().createAuthorizationApi(credentials.username, credentials.password);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
typeface=typeFaceFactory.createFrom(context,attrs)
Typeface typeface = typeFaceFactory.createFrom(context, attrs);
Endpoint endpoint = new Endpoint() {
            @Override
            public String getUrl() {
                return GITHUB_API_URL;
            }

            @Override
            public String getName() {
                return "Live";
            }
        };
interceptor=createAuthorizationRequestInterceptor(username,password)
RequestInterceptor interceptor = createAuthorizationRequestInterceptor(username, password);
restAdapter=createRestAdapter(endpoint,interceptor)
RestAdapter restAdapter = createRestAdapter(endpoint, interceptor);
Dummy dummy = new Dummy();
result=dummy.explodes()
boolean result = dummy.explodes();
String base64EncodedPublicKey = "CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE";
premiumPurchase=inventory.getPurchase(SKU_PREMIUM)
Purchase premiumPurchase = inventory.getPurchase(SKU_PREMIUM);
infiniteGasPurchase=inventory.getPurchase(SKU_INFINITE_GAS)
Purchase infiniteGasPurchase = inventory.getPurchase(SKU_INFINITE_GAS);
gasPurchase=inventory.getPurchase(SKU_GAS)
Purchase gasPurchase = inventory.getPurchase(SKU_GAS);
String payload = "";
String payload = "";
String payload = "";
payload=p.getDeveloperPayload()
String payload = p.getDeveloperPayload();
int index = mTank >= TANK_RES_IDS.length ? TANK_RES_IDS.length - 1 : mTank;
AlertDialog.Builder bld = new AlertDialog.Builder(this);
spe=getPreferences(MODE_PRIVATE).edit()
SharedPreferences.Editor spe = getPreferences(MODE_PRIVATE).edit();
sp=getPreferences(MODE_PRIVATE)
SharedPreferences sp = getPreferences(MODE_PRIVATE);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                                  + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                    | ((source[d + 1 + off] << 24) >>> 16)
                    | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                    | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                                   "-1002:Bad response received/" +
                                   "-1003:Purchase signature verification failed/" +
                                   "-1004:Send intent failed/" +
                                   "-1005:User cancelled/" +
                                   "-1006:Unknown purchase response/" +
                                   "-1007:Missing token/" +
                                   "-1008:Unknown error/" +
                                   "-1009:Subscriptions not available/" +
                                   "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(),
                    itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                        RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
int inBuff =
                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
                        | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
                        | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE)
byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
int outLen = outBuff.length;
int lenDiv3 = (len + 2) / 3;
int len43 = lenDiv3 * 4;
byte[] outBuff = new byte[len43 // Main 4:3
                + (len43 / maxLineLength)];
int d = 0;
int e = 0;
int len2 = len - 2;
int lineLength = 0;
int inBuff =
                    ((source[d + off] << 24) >>> 8)
                            | ((source[d + 1 + off] << 24) >>> 16)
                            | ((source[d + 2 + off] << 24) >>> 24);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
int outBuff =
                    ((decodabet[source[srcOffset]] << 24) >>> 6)
                            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
                            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
                            | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
bytes=s.getBytes()
byte[] bytes = s.getBytes();
bytes=s.getBytes()
byte[] bytes = s.getBytes();
int len34 = len * 3 / 4;
byte[] outBuff = new byte[2 + len34];
int outBuffPosn = 0;
byte[] b4 = new byte[4];
int b4Posn = 0;
int i = 0;
byte sbiCrop = 0;
byte sbiDecode = 0;
int bytesLeft = len - i;
byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
byte[] out = new byte[outBuffPosn];
packageName=mContext.getPackageName()
String packageName = mContext.getPackageName();
response=mService.isBillingSupported(3,packageName,ITEM_TYPE_INAPP)
int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
IabResult result;
IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
                    "Subscriptions are not available.");
buyIntentBundle=mService.getBuyIntent(3,mContext.getPackageName(),sku,itemType,extraData)
Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
response=getResponseCodeFromBundle(buyIntentBundle)
int response = getResponseCodeFromBundle(buyIntentBundle);
pendingIntent=buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT)
PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
IabResult result;
responseCode=getResponseCodeFromIntent(data)
int responseCode = getResponseCodeFromIntent(data);
purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA)
String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE)
String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
Purchase purchase = null;
sku=purchase.getSku()
String sku = purchase.getSku();
Inventory inv = new Inventory();
r=queryPurchases(inv,ITEM_TYPE_INAPP)
int r = queryPurchases(inv, ITEM_TYPE_INAPP);
final Handler handler = new Handler();
IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
Inventory inv = null;
final IabResult result_f = result;
final Inventory inv_f = inv;
token=itemInfo.getToken()
String token = itemInfo.getToken();
sku=itemInfo.getSku()
String sku = itemInfo.getSku();
response=mService.consumePurchase(3,mContext.getPackageName(),token)
int response = mService.consumePurchase(3, mContext.getPackageName(), token);
List<Purchase> purchases = new ArrayList<Purchase>();
iab_msgs=("0:OK/1:User Canceled/2:Unknown/" + "3:Billing Unavailable/4:Item unavailable/" + "5:Developer Error/6:Error/7:Item Already Owned/"+ "8:Item not owned").split("/")
String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
                "3:Billing Unavailable/4:Item unavailable/" +
                "5:Developer Error/6:Error/7:Item Already Owned/" +
                "8:Item not owned").split("/");
iabhelper_msgs=("0:OK/-1001:Remote exception during initialization/" + "-1002:Bad response received/" + "-1003:Purchase signature verification failed/"+ "-1004:Send intent failed/"+ "-1005:User cancelled/"+ "-1006:Unknown purchase response/"+ "-1007:Missing token/"+ "-1008:Unknown error/"+ "-1009:Subscriptions not available/"+ "-1010:Invalid consumption attempt").split("/")
String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
                "-1002:Bad response received/" +
                "-1003:Purchase signature verification failed/" +
                "-1004:Send intent failed/" +
                "-1005:User cancelled/" +
                "-1006:Unknown purchase response/" +
                "-1007:Missing token/" +
                "-1008:Unknown error/" +
                "-1009:Subscriptions not available/" +
                "-1010:Invalid consumption attempt").split("/");
int index = IABHELPER_ERROR_BASE - code;
o=b.get(RESPONSE_CODE)
Object o = b.get(RESPONSE_CODE);
o=i.getExtras().get(RESPONSE_CODE)
Object o = i.getExtras().get(RESPONSE_CODE);
boolean verificationFailed = false;
String continueToken = null;
ownedItems=mService.getPurchases(3,mContext.getPackageName(),itemType,continueToken)
Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(), itemType, continueToken);
response=getResponseCodeFromBundle(ownedItems)
int response = getResponseCodeFromBundle(ownedItems);
ownedSkus=ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST)
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_ITEM_LIST);
purchaseDataList=ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST)
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_PURCHASE_DATA_LIST);
signatureList=ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST)
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
ArrayList<String> signatureList = ownedItems.getStringArrayList(
                    RESPONSE_INAPP_SIGNATURE_LIST);
purchaseData=purchaseDataList.get(i)
String purchaseData = purchaseDataList.get(i);
signature=signatureList.get(i)
String signature = signatureList.get(i);
sku=ownedSkus.get(i)
String sku = ownedSkus.get(i);
Purchase purchase = new Purchase(itemType, purchaseData, signature);
ArrayList<String> skuList = new ArrayList<String>();
Bundle querySkus = new Bundle();
skuDetails=mService.getSkuDetails(3,mContext.getPackageName(),itemType,querySkus)
Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
                itemType, querySkus);
response=getResponseCodeFromBundle(skuDetails)
int response = getResponseCodeFromBundle(skuDetails);
responseList=skuDetails.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST)
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
ArrayList<String> responseList = skuDetails.getStringArrayList(
                RESPONSE_GET_SKU_DETAILS_LIST);
SkuDetails d = new SkuDetails(itemType, thisResponse);
final Handler handler = new Handler();
final List<IabResult> results = new ArrayList<IabResult>();
List<String> result = new ArrayList<String>();
JSONObject o = new JSONObject(mOriginalJson);
key=Security.generatePublicKey(base64PublicKey)
PublicKey key = Security.generatePublicKey(base64PublicKey);
decodedKey=Base64.decode(encodedPublicKey)
byte[] decodedKey = Base64.decode(encodedPublicKey);
keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
Signature sig;
JSONObject o = new JSONObject(mJson);
responseCode=result.getResponse()
int responseCode = result.getResponse();
sku=purchase.getSku()
String sku = purchase.getSku();
skuDetails=inv.getSkuDetails(sku)
SkuDetails skuDetails = inv.getSkuDetails(sku);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
Button purchaseFiveButton = (Button) rootView.findViewById(R.id.fragment_main_button_purchase_five_coins);
xml=context.obtainStyledAttributes(attrs,R.styleable.LandingStrip)
TypedArray xml = context.obtainStyledAttributes(attrs, R.styleable.LandingStrip);
tabLayoutId=xml.getResourceId(R.styleable.LandingStrip_tabLayoutId,MISSING_TAB_LAYOUT_ID)
int tabLayoutId = xml.getResourceId(R.styleable.LandingStrip_tabLayoutId, MISSING_TAB_LAYOUT_ID);
indicatorColour=xml.getResourceId(R.styleable.LandingStrip_indicatorColor,DEFAULT_INDICATOR_COLOUR)
int indicatorColour = xml.getResourceId(R.styleable.LandingStrip_indicatorColor, DEFAULT_INDICATOR_COLOUR);
indicatorHeight=getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight,DEFAULT_INDICATOR_HEIGHT,xml)
int indicatorHeight = getDimensPixelSize(R.styleable.LandingStrip_indicatorHeight, DEFAULT_INDICATOR_HEIGHT, xml);
tabsPaddingLeft=getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingLeft = getDimensPixelSize(R.styleable.LandingStrip_tabsLeftPadding, DEFAULT_TABS_PADDING, xml);
tabsPaddingRight=getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding,DEFAULT_TABS_PADDING,xml)
int tabsPaddingRight = getDimensPixelSize(R.styleable.LandingStrip_tabsRightPadding, DEFAULT_TABS_PADDING, xml);
MutableCoordinates drawCurrentTabCoordinates = new MutableCoordinates();
MutableCoordinates drawNextTabCoordinates = new MutableCoordinates();
MutableCoordinates drawMovingIndicatorCoordinates = new MutableCoordinates();
currentTab=tabsContainer.getTabAt(currentPosition)
View currentTab = tabsContainer.getTabAt(currentPosition);
currentTabStart=currentTab.getLeft()
float currentTabStart = currentTab.getLeft();
currentTabEnd=currentTab.getRight()
float currentTabEnd = currentTab.getRight();
nextTab=tabsContainer.getTabAt(currentPosition + 1)
View nextTab = tabsContainer.getTabAt(currentPosition + 1);
nextTabPositionOffset=getFractionFrom(pagePositionOffset)
float nextTabPositionOffset = getFractionFrom(pagePositionOffset);
indicatorStart=getIndicatorPosition(nextTab.getStart(),pagePositionOffset,currentTab.getStart(),nextTabPositionOffset)
float indicatorStart = getIndicatorPosition(nextTab.getStart(), pagePositionOffset, currentTab.getStart(), nextTabPositionOffset);
indicatorEnd=getIndicatorPosition(nextTab.getEnd(),pagePositionOffset,currentTab.getEnd(),nextTabPositionOffset)
float indicatorEnd = getIndicatorPosition(nextTab.getEnd(), pagePositionOffset, currentTab.getEnd(), nextTabPositionOffset);
height=getHeight()
int height = getHeight();
tabCount=pagerAdapter.getCount()
int tabCount = pagerAdapter.getCount();
title=pagerAdapter.getPageTitle(position)
CharSequence title = pagerAdapter.getPageTitle(position);
inflatedTabView=tabsContainer.inflateTab(layoutInflater,attributes.getTabLayoutId())
View inflatedTabView = tabsContainer.inflateTab(layoutInflater, attributes.getTabLayoutId());
int position = (int) view.getTag(TAG_KEY_POSITION);
scrollOffset=getHorizontalScrollOffset(position,positionOffset)
int scrollOffset = getHorizontalScrollOffset(position, positionOffset);
newScrollX=calculateScrollOffset(position,scrollOffset,positionOffset)
float newScrollX = calculateScrollOffset(position, scrollOffset, positionOffset);
tabWidth=tabsContainer.getTabAt(position).getWidth()
int tabWidth = tabsContainer.getTabAt(position).getWidth();
tabForPosition=tabsContainer.getTabAt(position)
View tabForPosition = tabsContainer.getTabAt(position);
float tabStartX = tabForPosition.getLeft() + scrollOffset;
int viewMiddleOffset = getTabParentWidth() / 2;
float tabCenterOffset = (tabForPosition.getRight() - tabForPosition.getLeft()) * 0.5F;
nextTabDelta=getNextTabDelta(position,pagerOffset,tabForPosition)
float nextTabDelta = getNextTabDelta(position, pagerOffset, tabForPosition);
LinearLayout tabsContainerView = new LinearLayout(context);
tab=getTabAt(index)
View tab = getTabAt(index);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
position=indicatorCoordinates.getStart()
float position = indicatorCoordinates.getStart();
lastTabOffset=((ViewGroup)getChildAt(0)).getChildAt(getChildCount() - 1).getWidth()
float lastTabOffset = ((ViewGroup) getChildAt(0)).getChildAt(getChildCount() - 1).getWidth();
frequency=getOneCycle(lastTabOffset)
float frequency = getOneCycle(lastTabOffset);
r=toHex(calculateColour(position,frequency,PHASE_RED,AMPLITUDE,CENTER_FREQUENCY))
String r = toHex(calculateColour(position, frequency, PHASE_RED, AMPLITUDE, CENTER_FREQUENCY));
g=toHex(calculateColour(position,frequency,PHASE_GREEN,AMPLITUDE,CENTER_FREQUENCY))
String g = toHex(calculateColour(position, frequency, PHASE_GREEN, AMPLITUDE, CENTER_FREQUENCY));
b=toHex(calculateColour(position,frequency,PHASE_BLUE,AMPLITUDE,CENTER_FREQUENCY))
String b = toHex(calculateColour(position, frequency, PHASE_BLUE, AMPLITUDE, CENTER_FREQUENCY));
height=getHeight()
int height = getHeight();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
ViewPagerFragment viewPagerFragment = new ViewPagerFragment();
Bundle bundle = new Bundle();
TextView view = (TextView) layoutInflater.inflate(R.layout.view_demo, container, false);
currentPosition=viewPagerAdapterState.getCurrentPosition()
int currentPosition = viewPagerAdapterState.getCurrentPosition();
view=getView(container,position)
View view = getView(container, position);
parcelableSparseArray=viewPagerAdapterState.get(position)
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
SparseArray<Parcelable> parcelableSparseArray = viewPagerAdapterState.get(position);
View view = (View) object;
SparseArray<Parcelable> viewState = new SparseArray<>();
position=entry.getValue()
int position = entry.getValue();
view=entry.getKey()
View view = entry.getKey();
bundle=in.readBundle()
Bundle bundle = in.readBundle();
Map<Integer, SparseArray<Parcelable>> viewStates = new HashMap<>(bundle.keySet().size());
sparseParcelableArray=bundle.getSparseParcelableArray(key)
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
SparseArray<Parcelable> sparseParcelableArray = bundle.getSparseParcelableArray(key);
primaryItemPosition=in.readInt()
int primaryItemPosition = in.readInt();
Bundle bundle = new Bundle();
ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);
LandingStrip landingStrip = (LandingStrip) findViewById(R.id.landing_strip);
final TextView abText = (TextView) findViewById(R.id.ab_text);
final AyBe ayBe = new AyBe();
id=item.getItemId()
int id = item.getItemId();
callback=weakCallback.get()
AbTestingParamsLoadedCallback callback = weakCallback.get();
WeakReference<NoLeakActivity> weakNoLeakActivity = new WeakReference<NoLeakActivity>(noLeakActivity);
noLeakActivity=weakNoLeakActivity.get()
NoLeakActivity noLeakActivity = weakNoLeakActivity.get();
final float inverseRatio = 1f - ratio;
float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRatio);
float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRatio);
float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRatio);
hsv=node.getHsv()
float[] hsv = node.getHsv();
width=bitmap.getWidth()
final int width = bitmap.getWidth();
height=bitmap.getHeight()
final int height = bitmap.getHeight();
final int[] rgbPixels = new int[width * height];
final MedianCutQuantizer mcq = new MedianCutQuantizer(rgbPixels, NUM_COLORS);
primaryAccentColor=findPrimaryAccentColor()
final ColorNode primaryAccentColor = findPrimaryAccentColor();
secondaryAccentColor=findSecondaryAccentColor(primaryAccentColor)
final ColorNode secondaryAccentColor = findSecondaryAccentColor(primaryAccentColor);
tertiaryAccentColor=findTertiaryAccentColor(primaryAccentColor,secondaryAccentColor)
final int tertiaryAccentColor = findTertiaryAccentColor(
                primaryAccentColor, secondaryAccentColor);
primaryTextColor=findPrimaryTextColor(primaryAccentColor)
final int primaryTextColor = findPrimaryTextColor(primaryAccentColor);
secondaryTextColor=findSecondaryTextColor(primaryAccentColor)
final int secondaryTextColor = findSecondaryTextColor(primaryAccentColor);
final float primaryHue = primary.getHsv()[0];
final float candidateHue = candidate.getHsv()[0];
copy=Arrays.copyOf(palette,palette.length)
final MedianCutQuantizer.ColorNode[] copy = Arrays.copyOf(palette, palette.length);
maxCount=palette[0].getCount()
final float maxCount = palette[0].getCount();
lhsWeight=calculateWeight(lhs,maxCount)
final float lhsWeight = calculateWeight(lhs, maxCount);
rhsWeight=calculateWeight(rhs,maxCount)
final float rhsWeight = calculateWeight(rhs, maxCount);
float sum = 0;
float sumWeight = 0;
float value = values[i];
float weight = values[i + 1];
ColorHistogram colorHist = new ColorHistogram(pixels);
K=colorHist.getNumberOfColors()
int K = colorHist.getNumberOfColors();
ColorNode[] rCols = null;
rgb=colorHist.getColor(i)
int rgb = colorHist.getColor(i);
cnt=colorHist.getCount(i)
int cnt = colorHist.getCount(i);
ColorBox initialBox = new ColorBox(0, K - 1, 0);
List<ColorBox> colorSet = new ArrayList<ColorBox>();
int k = 1;
boolean done = false;
nextBox=findBoxToSplit(colorSet)
ColorBox nextBox = findBoxToSplit(colorSet);
newBox=nextBox.splitBox()
ColorBox newBox = nextBox.splitBox();
color=findClosestColor(pixels[i])
ColorNode color = findClosestColor(pixels[i]);
idx=findClosestColorIndex(rgb)
int idx = findClosestColorIndex(rgb);
red=Color.red(rgb)
int red = Color.red(rgb);
grn=Color.green(rgb)
int grn = Color.green(rgb);
blu=Color.blue(rgb)
int blu = Color.blue(rgb);
int minIdx = 0;
int minDistance = Integer.MAX_VALUE;
ColorNode color = quantColors[i];
d2=color.distance2(red,grn,blu)
int d2 = color.distance2(red, grn, blu);
ColorBox boxToSplit = null;
int minLevel = Integer.MAX_VALUE;
n=colorBoxes.size()
int n = colorBoxes.size();
ColorNode[] avgColors = new ColorNode[n];
int i = 0;
int dr = this.red - red;
int dg = this.grn - grn;
int db = this.blu - blu;
ColorNode color = imageColors[i];
int r = color.red;
int g = color.grn;
int b = color.blu;
dim=getLongestColorDimension()
ColorDimension dim = getLongestColorDimension();
med=findMedian(dim)
int med = findMedian(dim);
int nextLevel = level + 1;
ColorBox newBox = new ColorBox(med + 1, upper, nextLevel);
int rLength = rmax - rmin;
int gLength = gmax - gmin;
int bLength = bmax - bmin;
int half = count / 2;
int nPixels, median;
int rSum = 0;
int gSum = 0;
int bSum = 0;
int n = 0;
ColorNode ci = imageColors[i];
int cnt = ci.cnt;
double nd = n;
int avgRed = (int) (0.5 + rSum / nd);
int avgGrn = (int) (0.5 + gSum / nd);
int avgBlu = (int) (0.5 + bSum / nd);
s=this.getClass().getSimpleName()
String s = this.getClass().getSimpleName();
int i = 0;
int N = pixelsOrig.length;
int[] pixelsCpy = new int[N];
int k = -1;
int curColor = -1;
int nColors = k + 1;
id=item.getItemId()
int id = item.getItemId();
Intent intent = new Intent();
bitmap=((BitmapDrawable)imageView.getDrawable()).getBitmap()
Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap();
DominantColorCalculator dominantColorCalculator = new DominantColorCalculator(bitmap);
selectedImageUri=data.getData()
Uri selectedImageUri = data.getData();
selectedImagePath=getPath(selectedImageUri)
String selectedImagePath = getPath(selectedImageUri);
String[] projection = {MediaStore.Images.Media.DATA};
cursor=managedQuery(uri,projection,null,null,null)
Cursor cursor = managedQuery(uri, projection, null, null, null);
column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)
int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
LinearLayout rootView = (LinearLayout) inflater.inflate(R.layout.fragment_main, container, false);
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
preapprovalButton=payPal.getCheckoutButton(getActivity(),PayPal.BUTTON_194x37,CheckoutButton.TEXT_PAY)
CheckoutButton preapprovalButton = payPal.getCheckoutButton(getActivity(), PayPal.BUTTON_194x37, CheckoutButton.TEXT_PAY);
preapprovalIntent=payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY)
Intent preapprovalIntent = payPalHelper.getPreapprovalIntent(PREAPPROVAL_KEY);
String resultTitle = "";
String resultInfo = "";
String resultExtra = "";
payPal=PayPal.getInstance()
PayPal payPal = PayPal.getInstance();
PayPalPreapproval preapproval = new PayPalPreapproval();
preapproval=createPreapproval(preapprovalKey)
PayPalPreapproval preapproval = createPreapproval(preapprovalKey);
Bundle bundle = new Bundle();
int availableLength = maxLength;
StringBuilder stringBuilder = new StringBuilder(maxLength);
prefixAndSuffixLength=computeAppendedLengthIncludingSeparatorSpaces(prefix,suffix)
int prefixAndSuffixLength = computeAppendedLengthIncludingSeparatorSpaces(prefix, suffix);
urlLength=computeUrlLengthIncludingSeparatorSpace(url)
int urlLength = computeUrlLengthIncludingSeparatorSpace(url);
trimmedSubject=ellipsizeTextIfExceedsMaxLength(subject,availableLength)
String trimmedSubject = ellipsizeTextIfExceedsMaxLength(subject, availableLength);
int length = 0;
preferences=context.getSharedPreferences(MRU_PREFERENCES,Context.MODE_PRIVATE)
SharedPreferences preferences = context.getSharedPreferences(MRU_PREFERENCES, Context.MODE_PRIVATE);
args=getArguments()
Bundle args = getArguments();
themeResId=getThemeResIdIfProvidedIn(args)
int themeResId = getThemeResIdIfProvidedIn(args);
title=getTitleIfProvidedIn(args)
CharSequence title = getTitleIfProvidedIn(args);
builder=createDialogBuilder(themeResId).setCancelable(true).setView(dialogView)
AlertDialog.Builder builder = createDialogBuilder(themeResId)
                .setCancelable(true)
                .setView(dialogView);
inflater=getActivity().getLayoutInflater()
LayoutInflater inflater = getActivity().getLayoutInflater();
GridView gridView = (GridView) rootView.findViewById(R.id.ps__dialog_grid);
targetApps=extractTargetAppsFrom(args)
TargetApps targetApps = extractTargetAppsFrom(args);
allShareTargets=getAvailableShareTargets(sharingIntent)
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
List<ResolveInfo> allShareTargets = getAvailableShareTargets(sharingIntent);
priorityAppInfos=createPriorityResolveInfoList(targetApps,allShareTargets)
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
List<ResolveInfo> priorityAppInfos = createPriorityResolveInfoList(targetApps, allShareTargets);
otherAppInfos=createOtherAppsResolveInfoList(priorityAppInfos,allShareTargets)
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
List<ResolveInfo> otherAppInfos = createOtherAppsResolveInfoList(priorityAppInfos, allShareTargets);
resolveInfos=targetApps.extractTargetResolveInfosFrom(allShareTargets)
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
List<ResolveInfo> resolveInfos = targetApps.extractTargetResolveInfosFrom(allShareTargets);
mruResolveInfo=findMruResolveInfoIn(allShareTargets)
ResolveInfo mruResolveInfo = findMruResolveInfoIn(allShareTargets);
List<ResolveInfo> otherAppsInfos = new ArrayList<ResolveInfo>(allAppInfos);
mruPackageName=persister.getLastUsedTarget()
String mruPackageName = persister.getLastUsedTarget();
String packageName = resolveInfo.activityInfo.packageName;
packageManager=getActivity().getPackageManager()
PackageManager packageManager = getActivity().getPackageManager();
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
View buttonStrip = (View) showMoreButton.getParent();
gridView=getGridView()
GridView gridView = getGridView();
intent=wrapIntentWithExplicitTargetComponentForItem(position,sharingIntent)
Intent intent = wrapIntentWithExplicitTargetComponentForItem(position, sharingIntent);
Intent intent = new Intent(sharingIntent);
ActivityInfo activity = adapter.getItem(position).activityInfo;
ComponentName name = new ComponentName(activity.applicationInfo.packageName, activity.name);
showMoreButton=getShowMoreButton()
View showMoreButton = getShowMoreButton();
PriorityShareDialog dialog = new PriorityShareDialog();
Bundle args = new Bundle();
sharingIntent=createSharingIntent()
Intent sharingIntent = createSharingIntent();
fragmentManager=activity.getFragmentManager()
FragmentManager fragmentManager = activity.getFragmentManager();
Intent intent = new Intent(Intent.ACTION_SEND);
dialog=new PriorityShareDialog.Builder().setTitle(title).setTargetApps(targetApps).setSharingIntent(sharingIntent).setOnPrepareSharingIntentListener(listener).setShowMostRecentlyUsed(showMostRecentlyUsed).build()
PriorityShareDialog dialog = new PriorityShareDialog.Builder()
                .setTitle(title)
                .setTargetApps(targetApps)
                .setSharingIntent(sharingIntent)
                .setOnPrepareSharingIntentListener(listener)
                .setShowMostRecentlyUsed(showMostRecentlyUsed)
                .build();
PrioritySharer prioritySharer = new PrioritySharer();
prioritySharer=build()
PrioritySharer prioritySharer = build();
packageManager=context.getPackageManager()
PackageManager packageManager = context.getPackageManager();
layoutInflater=LayoutInflater.from(context)
LayoutInflater layoutInflater = LayoutInflater.from(context);
iconSizePx=getIconSizePx(context.getResources())
int iconSizePx = getIconSizePx(context.getResources());
ArrayList<ResolveInfo> sortedList = new ArrayList<ResolveInfo>(resolveInfoList);
int otherAppsCountMaybe = showAllApps ? otherAppInfos.size() : 0;
firstOtherAppsItemPosition=priorityAppInfos.size()
int firstOtherAppsItemPosition = priorityAppInfos.size();
int offsetPosition = position - firstOtherAppsItemPosition;
TextView textView;
textView=initializeItemViewIfNecessary(convertView,R.layout.ps__grid_item_share,parent)
TextView textView = initializeItemViewIfNecessary(convertView, R.layout.ps__grid_item_share, parent);
info=getItem(position)
ResolveInfo info = getItem(position);
icon=info.loadIcon(packageManager)
Drawable icon = info.loadIcon(packageManager);
arraySize=in.readInt()
int arraySize = in.readInt();
String[] packageNames = new String[arraySize];
arraySize=targetPackages.size()
int arraySize = targetPackages.size();
String[] packagesArray = new String[arraySize];
SparseArray<ResolveInfo> matchedResolveInfos = new SparseArray<ResolveInfo>(targetPackages.size());
String packageName = info.activityInfo.packageName;
index=indexOfItemInto(packageName,targetPackages)
int index = indexOfItemInto(packageName, targetPackages);
sparseArraySize=sparseArray.size()
int sparseArraySize = sparseArray.size();
ArrayList<T> list = new ArrayList<T>(sparseArraySize);
int i = 0;
originalSubject=intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT)
CharSequence originalSubject = intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT);
String subject = originalSubject != null ? originalSubject.toString() : null;
composer=createComposer()
MessageComposer composer = createComposer();
component=intent.getComponent()
ComponentName component = intent.getComponent();
targetPackageName=component.getPackageName()
String targetPackageName = component.getPackageName();
adapter=ArrayAdapter.createFromResource(this,R.array.target_apps,android.R.layout.simple_spinner_item)
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.target_apps, android.R.layout.simple_spinner_item);
EditText text = (EditText) findViewById(R.id.text);
EditText title = (EditText) findViewById(R.id.title);
EditText mimeType = (EditText) findViewById(R.id.mime_type);
EditText dataUri = (EditText) findViewById(R.id.data_uri);
Switch showMostRecentlyUsed = (Switch) findViewById(R.id.show_most_recently_used);
uriString=dataUri.getText().toString()
String uriString = dataUri.getText().toString();
EditText text = (EditText) findViewById(R.id.text);
TextView textView = (TextView) convertView.findViewById(R.id.positionView);
colorView=convertView.findViewById(R.id.colorView)
View colorView = convertView.findViewById(R.id.colorView);
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
offset=headerPlaceholder.getTop()
int offset = headerPlaceholder.getTop();
Integer item = COLORS[position];
rootView=inflater.inflate(R.layout.fragment_main,container,false)
View rootView = inflater.inflate(R.layout.fragment_main, container, false);
firstVisiblePosition=grid.getFirstVisiblePosition()
int firstVisiblePosition = grid.getFirstVisiblePosition();
inflate=getViewForPosition(container,position)
View inflate = getViewForPosition(container, position);
id=item.getItemId()
int id = item.getItemId();
MyActivity activity = new MyActivity();
String manifestProperty = "../app/src/main/AndroidManifest.xml";
String resProperty = "../app/src/main/res";
cursor=resolver.query(uri,projection,selection,selectionArgs,null)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, null);
cursor=resolver.query(uri,projection,selection,selectionArgs,sortOrder)
final Cursor cursor = resolver.query(uri, projection, selection, selectionArgs, sortOrder);
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=richClass.setter(name)
Method setter = richClass.setter(name);
T obj;
name=cursor.getColumnName(i)
String name = cursor.getColumnName(i);
setter=methodsByName.get(name)
Method setter = methodsByName.get(name);
int type = TYPE_INT;
Class<?> t = setter.getParameterTypes()[0];
Class<?> t = setter.getParameterTypes()[0];
cursorType=cursor.getType(index)
final int cursorType = cursor.getType(index);
final Object obj;
s=f.getAnnotation(Mapper.class)
Mapper s = f.getAnnotation(Mapper.class);
mm=m.getAnnotation(Mapper.class)
Mapper mm = m.getAnnotation(Mapper.class);
methodName=StringUtil.asCamelifySetMethod(what)
String methodName = StringUtil.asCamelifySetMethod(what);
cursor=getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,null,null,null,null)
Cursor cursor = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
now=System.currentTimeMillis()
long now = System.currentTimeMillis();
List<Contact2> typedCursor = new CursorList<Contact2>(cursor, Contact2.class);
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[a-zA-Z0-9]+")
Pattern p = Pattern.compile("[a-zA-Z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
StringBuilder builder = new StringBuilder();
p=Pattern.compile("[A-Z][a-z0-9]+")
Pattern p = Pattern.compile("[A-Z][a-z0-9]+");
m=p.matcher(original)
Matcher m = p.matcher(original);
String word;
SurfaceView first = (SurfaceView) findViewById(R.id.firstSurface);
SurfaceView second = (SurfaceView) findViewById(R.id.secondSurface);
Intent pickVideo = new Intent(Intent.ACTION_PICK);
Bundle args = new Bundle();
enroll=mHotwordDetector.createEnrollIntent()
Intent enroll = mHotwordDetector.createEnrollIntent();

Diff of b999e8935be03c0e0d71bcfc118e6c9f2b9e16c9 and 62357fe251099e90b74ba99d380531a5769b6870:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 35
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision b999e8935be03c0e0d71bcfc118e6c9f2b9e16c9 to 62357fe251099e90b74ba99d380531a5769b6870

************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository novoda/spikes = 33

Ataul Munim added type argument method count = 0
	--> recency = null
Ataul Munim added wildcard count = 0
	--> recency = null
Ataul Munim added type declaration count = 35
	--> recency = month
Ataul Munim added type parameter method count = 0
	--> recency = null
Ataul Munim added type parameter field count = 0
	--> recency = null
Ataul Munim added diamond count = 0
	--> recency = null
Ataul Munim added method invocation count = 0
	--> recency = null
Ataul Munim added implicit method invocation count = 0
	--> recency = null
Ataul Munim added class instantiation count = 0
	--> recency = null
Ataul Munim added nested count = 0
	--> recency = null
Ataul Munim added bounds count = 0
	--> recency = null
