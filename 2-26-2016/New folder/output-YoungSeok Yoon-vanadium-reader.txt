vanadium/reader -- yyoon -- YoungSeok Yoon
https://github.com/vanadium/reader.git
git clone https://github.com/vanadium/reader.git
.\/reader\
.\/reader\.git
0
Project cloned!
YoungSeok Yoon is responsible for commit 0e3dc25ffd0fce7382879fe521bb27c6ae3fac3b
YoungSeok Yoon is responsible for commit 05e815cee9935d64b7d30e444cae09f8f13b47b3
YoungSeok Yoon is responsible for commit 26c17c990e2e3012993fd60eea7799f7e2e41cf8
YoungSeok Yoon is responsible for commit f3f638b85f4aa174f068fc4c41dbbbe6f9390725
YoungSeok Yoon is responsible for commit c24d1179a5615bf8b939583c98710c5b89505697
YoungSeok Yoon is responsible for commit ead738c64b6bf53e33efd81e9e552f9e81a499a4
YoungSeok Yoon is responsible for commit 1ca627cc0924615a8d2683c0521e50d79dff3181
YoungSeok Yoon is responsible for commit 3a483585d6ee6a1c27f152f701221dcd0946a3fe
YoungSeok Yoon is responsible for commit 7a2113a066ae08d7a11b2eda35c250f9dfaf0981
YoungSeok Yoon is responsible for commit 39f1a997836741bf95c0b3f301bb73b23fed8567
YoungSeok Yoon is responsible for commit 23a5bd79689c5b1504df7f7dd0e0dc75eb835a75
YoungSeok Yoon is responsible for commit 7171112143bd508d3e603c69b754ea907287fce7
YoungSeok Yoon is responsible for commit 989b3ac523cf0fa7f03e1dffb067ac38eb13d7f2
YoungSeok Yoon is responsible for commit a6ea64afc0d28b223714199ed564b5297e7cc34d
YoungSeok Yoon is responsible for commit 4bb2135674f213e244bbb7774d4f794e92e2f48c
YoungSeok Yoon is responsible for commit cf68f83d8957ca2e96463d7a9b71ec13809402a3
YoungSeok Yoon is responsible for commit 29f98bbe5a52acc453cb16bc4ce2141bb4932b8c
YoungSeok Yoon is responsible for commit 39460e3a6d126b013fc84d0ffa5bc013f196acdc
YoungSeok Yoon is responsible for commit d0e99192393d476e434864961bf8ff43059f8787
YoungSeok Yoon is responsible for commit 9f83042941e06c6656aca878a3a9a3217f4b3ff8
YoungSeok Yoon is responsible for commit 98c569920577c54c1bd4ac60e1b9f70ee07b502e
YoungSeok Yoon is responsible for commit d5421fe77dfb11d00e18c71bb67a774d65bdc37c
YoungSeok Yoon is responsible for commit 0807bed7847c8fd6d94210fd5c9cc520d323db69
YoungSeok Yoon is responsible for commit d168284fbf967dd81c365d1e3927c6824bd69160
YoungSeok Yoon is responsible for commit aff14aebda6a194a78aff261953a3ffc710faa1c
YoungSeok Yoon is responsible for commit d7efe0da64f12b8768a39875cf2c57b59782f107
YoungSeok Yoon is responsible for commit 239099db1bab2c82138f068239e24ebd7342ea47
YoungSeok Yoon is responsible for commit 5a4a417b48e301f442253171859f1d2e9bdd3ad3
YoungSeok Yoon is responsible for commit 1a581f0182a03b7d8fb097657f261ec130f3d76e
YoungSeok Yoon is responsible for commit ed7a0ef958fa62911db6172d80cfbab4584d3899
YoungSeok Yoon is responsible for commit 9a37804a47b984532a922f932242faf9564f80cb
YoungSeok Yoon is responsible for commit 62bb8af38724ef1b0a710834c624085ba4315ca3
YoungSeok Yoon is responsible for commit f7b71d961dbe64e063600aa211cde927ab1cb8ae
YoungSeok Yoon is responsible for commit c518a93ce8fdf44be0249cd68009af66cf704bfa
YoungSeok Yoon is responsible for commit 932a23b4038f21fdc7d55bff2b139adcb7f00c53
YoungSeok Yoon is responsible for commit bcdda7d7c67ad0caec8d72b50cc2cf0c3c9fa585
YoungSeok Yoon is responsible for commit ab2d948fd0ebdb3962efad59e92c038722de07a0
YoungSeok Yoon is responsible for commit 747851d00b87a560941463e0a919d34055ce3240
YoungSeok Yoon is responsible for commit ded631b92b8e08d940cddc320248534ed95059a5
YoungSeok Yoon is responsible for commit bb379d9d06cc35b8b5afbb07eb4f2501fa1b2199
YoungSeok Yoon is responsible for commit e5d58ec33dc51086a4c2458fb3d0053bbc3696bf
YoungSeok Yoon is responsible for commit dcdbfd41795bd97feacb43ebb3310747157c6619
YoungSeok Yoon is responsible for commit 640cf8901e01f8b6ed98e8cddb4a7bff14c690c1
YoungSeok Yoon is responsible for commit 21fb92fe2af18fad601d472d8344b65d3fe2ea9d
YoungSeok Yoon is responsible for commit f0b558f96a06dfaa340720eccab20f0968fd924c
YoungSeok Yoon is responsible for commit 086c51bc4c59b340451aa4ed6f29d80f004de1d7
YoungSeok Yoon is responsible for commit 21544b4608f06963284ffdb662092be6cb29a863
YoungSeok Yoon is responsible for commit 29693ca4cdceef34eb7de77ddf928be1dd9d8e74
YoungSeok Yoon is responsible for commit e41df96cf033cb363fdb658f445ca786e06f2867
YoungSeok Yoon is responsible for commit e757e795177cc65917e89d6e27e1c06b32cb9086
YoungSeok Yoon is responsible for commit 0d762a0f2756749830989c06759cb2e267f64a8b
YoungSeok Yoon is responsible for commit c0e4da4851ab17ae5fd77cc47c2a6b23fffd921e
YoungSeok Yoon is responsible for commit 9b36caff6bbece8cb3f38a2f3f4a523510d2ea09
YoungSeok Yoon is responsible for commit 93288717821630129d40f66d2b1c0c85096983f9
YoungSeok Yoon is responsible for commit bc52ad10eba298e97cbb3083564438a3caa2fd51
YoungSeok Yoon is responsible for commit 37e9c784a1c9e3b9f06a449029530f72d7620752
YoungSeok Yoon is responsible for commit 373fe750584d6834a4c83bc1747e88d58e9cfb44
YoungSeok Yoon is responsible for commit 2a834ffd2052d2c0214ec30421924d94f2077d81
YoungSeok Yoon is responsible for commit 8f948bcf62a1ae632e563edb573013507d069d49
YoungSeok Yoon is responsible for commit 6f168c89d2812385a7c0ab14a47ea76d853940e0
YoungSeok Yoon is responsible for commit 7c712886c9b55322ae3e3465ac88043f8b137069
YoungSeok Yoon is responsible for commit fc65f984e0f387f482915609b5c9e5a3ec957c97
YoungSeok Yoon is responsible for commit 95e80def106409ce7928379feaa7f587c6daf67f
Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added BaseReaderApplication.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DebugUtils.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
Added SwipeGestureDetector.java to .\/reader\ repository source files.
Added UserActionLogger.java to .\/reader\ repository source files.
Added Utils.java to .\/reader\ repository source files.
Added PdfViewerActivityTest.java to .\/reader\ repository source files.
Added PageControlMessage.java to .\/reader\ repository source files.
Added PageControlActivity.java to .\/reader\ repository source files.

 ************ ANALYZING FOR USAGE PATTERN ADDITION ************

************Analysis complete************
Added generics to repository vanadium/reader = 0

YoungSeok Yoon added type argument method count = 0
	--> recency = null
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 0
	--> recency = null
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 0
	--> recency = null
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 0
	--> recency = null
YoungSeok Yoon added class instantiation count = 0
	--> recency = null
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 0

YoungSeok Yoon added type argument method count = 0
	--> recency = null
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 0
	--> recency = null
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 0
	--> recency = null
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 0
	--> recency = null
YoungSeok Yoon added class instantiation count = 0
	--> recency = null
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null

****Parsing for addition at revision 0e3dc25ffd0fce7382879fe521bb27c6ae3fac3b****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added BaseReaderApplication.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DebugUtils.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
Added SwipeGestureDetector.java to .\/reader\ repository source files.
Added UserActionLogger.java to .\/reader\ repository source files.
Added Utils.java to .\/reader\ repository source files.
Added PdfViewerActivityTest.java to .\/reader\ repository source files.
Added PageControlMessage.java to .\/reader\ repository source files.
Added PageControlActivity.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=VomUtil.bytesToHexString(mDigest.digest())
String id = VomUtil.bytesToHexString(mDigest.digest());
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id + ".db");
java.io.File jFile = new java.io.File(mContext.getCacheDir(), fileId + ".db");
Options opts = new Options();
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
blessingsFuture=BlessingsManager.getBlessings(mVContext,activity,"VanadiumBlessings",true)
ListenableFuture<Blessings> blessingsFuture = BlessingsManager
                .getBlessings(mVContext, activity, "VanadiumBlessings", true);
ListenableFuture<Blessings> blessingsFuture = BlessingsManager
                .getBlessings(mVContext, activity, "VanadiumBlessings", true);
syncbaseName=NamingUtil.join("users",mUsername,"android/reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "android/reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",mUsername,"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    mUsername,
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join("users",mUsername,"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        "users",
                        mUsername,
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        "users",
                        mUsername,
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
Handler handler = new Handler();
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=sync(group.join(mVContext,new SyncgroupMemberInfo()))
SyncgroupSpec spec = sync(group.join(mVContext, new SyncgroupMemberInfo()));
members=sync(group.getMembers(mVContext))
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
ext=certificate.getExtension()
String ext = certificate.getExtension();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
File file = (File) sync(mLocalSB.files.get(mVContext, fileId, File.class));
batch=sync(mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true)))
BatchDatabase batch = sync(mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true)));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(table.scan(mCancelableVContext,RowRange.range("","")))
VIterable<KeyValue> kvs = InputChannels.asIterable(
                        table.scan(mCancelableVContext, RowRange.range("", "")));
VIterable<KeyValue> kvs = InputChannels.asIterable(
                        table.scan(mCancelableVContext, RowRange.range("", "")));
@SuppressWarnings("unchecked")
                    E item = (E) VomUtil.decode(kv.getValue(), mClass);
watchStream=InputChannels.asIterable(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker))
VIterable<WatchChange> watchStream = InputChannels.asIterable(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker));
VIterable<WatchChange> watchStream = InputChannels.asIterable(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker));
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
id=VomUtil.bytesToHexString(mDigest.digest())
String id = VomUtil.bytesToHexString(mDigest.digest());
ref=mBlobWriter.getRef()
BlobRef ref = mBlobWriter.getRef();
dir=Utils.getLogDirectory()
File dir = Utils.getLogDirectory();
startTime=Utils.getTimeString()
String startTime = Utils.getTimeString();
deviceId=DeviceInfoFactory.getDeviceId(context)
String deviceId = DeviceInfoFactory.getDeviceId(context);
File logcatFile = new File(dir,
                String.format("%s-%s.log", getLogPrefix(appName, deviceId), startTime));
files=dir.listFiles(new FilenameFilter(){
  @Override public boolean accept(  File file,  String s){
    return s.startsWith(getLogPrefix(appName,deviceId));
  }
}
)
File[] files = dir.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(File file, String s) {
                return s.startsWith(getLogPrefix(appName, deviceId));
            }
        });
logFiles=Arrays.asList(files)
List<File> logFiles = Arrays.asList(files);
List<File> logFiles = Arrays.asList(files);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
swipeDetector=SwipeGestureDetector.create(this,new SwipeGestureDetector.SimpleOnSwipeListener(){
  @Override public boolean onSwipeLeft(){
    nextPage();
    return true;
  }
  @Override public boolean onSwipeRight(){
    prevPage();
    return true;
  }
}
)
final GestureDetectorCompat swipeDetector = SwipeGestureDetector.create(
                this,
                new SwipeGestureDetector.SimpleOnSwipeListener() {
                    @Override
                    public boolean onSwipeLeft() {
                        nextPage();
                        return true;
                    }

                    @Override
                    public boolean onSwipeRight() {
                        prevPage();
                        return true;
                    }
                });
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
oldPage=getPage()
int oldPage = getPage();
newPage=getPage()
int newPage = getPage();
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
Map<String, DeviceMeta> devicesCopy = null;
Map<String, DeviceMeta> devicesCopy = null;
Map<String, DeviceMeta> devicesCopy = null;
String message = new String(messageEvent.getData(), StandardCharsets.UTF_8);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = initialPage;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
DeviceSet ds = new DeviceSet(id, fileId, devices);
initialPage=determineInitialPage(ds)
int initialPage = determineInitialPage(ds);
dm=createDeviceMeta(initialPage)
DeviceMeta dm = createDeviceMeta(initialPage);
int lastPage = StreamSupport.stream(ds.getDevices().values())
                .map(DeviceMeta::getPage)
                .sorted()
                .reduce((x, y) -> (y - x) > 1 ? x : y)
                .orElse(0);
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
ds=cloneDeviceSet(mCurrentDS)
DeviceSet ds = cloneDeviceSet(mCurrentDS);
dm=getDeviceMeta(ds)
DeviceMeta dm = getDeviceMeta(ds);
linkedDevices=getLinkedDevices(ds)
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
ds=cloneDeviceSet(mCurrentDS)
DeviceSet ds = cloneDeviceSet(mCurrentDS);
dm=getDeviceMeta(ds)
DeviceMeta dm = getDeviceMeta(ds);
linkedDevices=getLinkedDevices(ds)
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=ds.getDevices()
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
Uri uri = null;
bytes=getBytesFromUri(uri)
byte[] bytes = getBytesFromUri(uri);
file=createFile(bytes,getTitleFromUri(uri))
File file = createFile(bytes, getTitleFromUri(uri));
ds=createDeviceSet(file)
DeviceSet ds = createDeviceSet(file);
int maxProgress = values[1];
in=getContentResolver().openInputStream(uri)
InputStream in = getContentResolver().openInputStream(uri);
total=in.available()
int total = in.available();
int available = total;
byte[] result = new byte[available];
int cur = 0;
int bytesRead;
DB.FileBuilder builder;
int cur = 0;
int available = bytes.length;
numBytes=Math.min(BLOCK_SIZE,available)
int numBytes = Math.min(BLOCK_SIZE, available);
vFile=builder.build()
File vFile = builder.build();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
File pdfFile = new File(getContext().getCacheDir(), fileId);
float pageRatio = (float) page.getWidth() / (float) page.getHeight();
float viewRatio = (float) getWidth() / (float) getHeight();
Bitmap bitmap;
boolean result = false;
float dx = e2.getX() - e1.getX();
float dy = e2.getY() - e1.getY();
UserActionLogger result = instance;
dir=Utils.getLogDirectory()
File dir = Utils.getLogDirectory();
startTime=Utils.getTimeString()
String startTime = Utils.getTimeString();
File touchLogFile = new File(dir,
                String.format("reader-%s-touch-%s.log", mDeviceId, startTime));
File navigationLogFile = new File(dir,
                String.format("reader-%s-navigation-%s.log", mDeviceId, startTime));
IOException ex = null;
boolean hasWritePermission = ContextCompat.checkSelfPermission(context,
                Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;
boolean hasReadPermission = ContextCompat.checkSelfPermission(context,
                Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;
dir=Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS)
File dir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS);
SimpleDateFormat formatter = new SimpleDateFormat(
                "yyyyMMdd-HHmmss.SSS", Locale.getDefault());
int actual;
DeviceSet ds = new DeviceSet(null, null, new HashMap<>());
DeviceMeta dm = new DeviceMeta(IdFactory.getRandomId(), page, 0, true);

 Generics pattern public class PageControlMessage was added at revision 0e3dc25ffd0fce7382879fe521bb27c6ae3fac3b

final WatchViewStub stub = (WatchViewStub) findViewById(R.id.watch_view_stub);
pendingResult=Wearable.NodeApi.getConnectedNodes(mGoogleApiClient)
PendingResult<NodeApi.GetConnectedNodesResult> pendingResult =
                Wearable.NodeApi.getConnectedNodes(mGoogleApiClient);
PendingResult<NodeApi.GetConnectedNodesResult> pendingResult =
                Wearable.NodeApi.getConnectedNodes(mGoogleApiClient);

Diff of 0e3dc25ffd0fce7382879fe521bb27c6ae3fac3b and 05e815cee9935d64b7d30e444cae09f8f13b47b3:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 2
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 0e3dc25ffd0fce7382879fe521bb27c6ae3fac3b to 05e815cee9935d64b7d30e444cae09f8f13b47b3


****Parsing for addition at revision 05e815cee9935d64b7d30e444cae09f8f13b47b3****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added BaseReaderApplication.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DebugUtils.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
Added SwipeGestureDetector.java to .\/reader\ repository source files.
Added UserActionLogger.java to .\/reader\ repository source files.
Added Utils.java to .\/reader\ repository source files.
Added PdfViewerActivityTest.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=VomUtil.bytesToHexString(mDigest.digest())
String id = VomUtil.bytesToHexString(mDigest.digest());
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id + ".db");
java.io.File jFile = new java.io.File(mContext.getCacheDir(), fileId + ".db");
Options opts = new Options();
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
blessingsFuture=BlessingsManager.getBlessings(mVContext,activity,"VanadiumBlessings",true)
ListenableFuture<Blessings> blessingsFuture = BlessingsManager
                .getBlessings(mVContext, activity, "VanadiumBlessings", true);
ListenableFuture<Blessings> blessingsFuture = BlessingsManager
                .getBlessings(mVContext, activity, "VanadiumBlessings", true);
syncbaseName=NamingUtil.join("users",mUsername,"android/reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "android/reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",mUsername,"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    mUsername,
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join("users",mUsername,"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        "users",
                        mUsername,
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        "users",
                        mUsername,
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
Handler handler = new Handler();
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=sync(group.join(mVContext,new SyncgroupMemberInfo()))
SyncgroupSpec spec = sync(group.join(mVContext, new SyncgroupMemberInfo()));
members=sync(group.getMembers(mVContext))
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
ext=certificate.getExtension()
String ext = certificate.getExtension();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
File file = (File) sync(mLocalSB.files.get(mVContext, fileId, File.class));
batch=sync(mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true)))
BatchDatabase batch = sync(mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true)));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(table.scan(mCancelableVContext,RowRange.range("","")))
VIterable<KeyValue> kvs = InputChannels.asIterable(
                        table.scan(mCancelableVContext, RowRange.range("", "")));
VIterable<KeyValue> kvs = InputChannels.asIterable(
                        table.scan(mCancelableVContext, RowRange.range("", "")));
@SuppressWarnings("unchecked")
                    E item = (E) VomUtil.decode(kv.getValue(), mClass);
watchStream=InputChannels.asIterable(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker))
VIterable<WatchChange> watchStream = InputChannels.asIterable(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker));
VIterable<WatchChange> watchStream = InputChannels.asIterable(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker));
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
id=VomUtil.bytesToHexString(mDigest.digest())
String id = VomUtil.bytesToHexString(mDigest.digest());
ref=mBlobWriter.getRef()
BlobRef ref = mBlobWriter.getRef();
dir=Utils.getLogDirectory()
File dir = Utils.getLogDirectory();
startTime=Utils.getTimeString()
String startTime = Utils.getTimeString();
deviceId=DeviceInfoFactory.getDeviceId(context)
String deviceId = DeviceInfoFactory.getDeviceId(context);
File logcatFile = new File(dir,
                String.format("%s-%s.log", getLogPrefix(appName, deviceId), startTime));
files=dir.listFiles(new FilenameFilter(){
  @Override public boolean accept(  File file,  String s){
    return s.startsWith(getLogPrefix(appName,deviceId));
  }
}
)
File[] files = dir.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(File file, String s) {
                return s.startsWith(getLogPrefix(appName, deviceId));
            }
        });
logFiles=Arrays.asList(files)
List<File> logFiles = Arrays.asList(files);
List<File> logFiles = Arrays.asList(files);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
swipeDetector=SwipeGestureDetector.create(this,new SwipeGestureDetector.SimpleOnSwipeListener(){
  @Override public boolean onSwipeLeft(){
    nextPage();
    return true;
  }
  @Override public boolean onSwipeRight(){
    prevPage();
    return true;
  }
}
)
final GestureDetectorCompat swipeDetector = SwipeGestureDetector.create(
                this,
                new SwipeGestureDetector.SimpleOnSwipeListener() {
                    @Override
                    public boolean onSwipeLeft() {
                        nextPage();
                        return true;
                    }

                    @Override
                    public boolean onSwipeRight() {
                        prevPage();
                        return true;
                    }
                });
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
oldPage=getPage()
int oldPage = getPage();
newPage=getPage()
int newPage = getPage();
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
Map<String, DeviceMeta> devicesCopy = null;
Map<String, DeviceMeta> devicesCopy = null;
Map<String, DeviceMeta> devicesCopy = null;
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = initialPage;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
DeviceSet ds = new DeviceSet(id, fileId, devices);
initialPage=determineInitialPage(ds)
int initialPage = determineInitialPage(ds);
dm=createDeviceMeta(initialPage)
DeviceMeta dm = createDeviceMeta(initialPage);
int lastPage = StreamSupport.stream(ds.getDevices().values())
                .map(DeviceMeta::getPage)
                .sorted()
                .reduce((x, y) -> (y - x) > 1 ? x : y)
                .orElse(0);
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
ds=cloneDeviceSet(mCurrentDS)
DeviceSet ds = cloneDeviceSet(mCurrentDS);
dm=getDeviceMeta(ds)
DeviceMeta dm = getDeviceMeta(ds);
linkedDevices=getLinkedDevices(ds)
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
ds=cloneDeviceSet(mCurrentDS)
DeviceSet ds = cloneDeviceSet(mCurrentDS);
dm=getDeviceMeta(ds)
DeviceMeta dm = getDeviceMeta(ds);
linkedDevices=getLinkedDevices(ds)
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=ds.getDevices()
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
Uri uri = null;
bytes=getBytesFromUri(uri)
byte[] bytes = getBytesFromUri(uri);
file=createFile(bytes,getTitleFromUri(uri))
File file = createFile(bytes, getTitleFromUri(uri));
ds=createDeviceSet(file)
DeviceSet ds = createDeviceSet(file);
int maxProgress = values[1];
in=getContentResolver().openInputStream(uri)
InputStream in = getContentResolver().openInputStream(uri);
total=in.available()
int total = in.available();
int available = total;
byte[] result = new byte[available];
int cur = 0;
int bytesRead;
DB.FileBuilder builder;
int cur = 0;
int available = bytes.length;
numBytes=Math.min(BLOCK_SIZE,available)
int numBytes = Math.min(BLOCK_SIZE, available);
vFile=builder.build()
File vFile = builder.build();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
File pdfFile = new File(getContext().getCacheDir(), fileId);
float pageRatio = (float) page.getWidth() / (float) page.getHeight();
float viewRatio = (float) getWidth() / (float) getHeight();
Bitmap bitmap;
boolean result = false;
float dx = e2.getX() - e1.getX();
float dy = e2.getY() - e1.getY();
UserActionLogger result = instance;
dir=Utils.getLogDirectory()
File dir = Utils.getLogDirectory();
startTime=Utils.getTimeString()
String startTime = Utils.getTimeString();
File touchLogFile = new File(dir,
                String.format("reader-%s-touch-%s.log", mDeviceId, startTime));
File navigationLogFile = new File(dir,
                String.format("reader-%s-navigation-%s.log", mDeviceId, startTime));
IOException ex = null;
boolean hasWritePermission = ContextCompat.checkSelfPermission(context,
                Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;
boolean hasReadPermission = ContextCompat.checkSelfPermission(context,
                Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;
dir=Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS)
File dir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS);
SimpleDateFormat formatter = new SimpleDateFormat(
                "yyyyMMdd-HHmmss.SSS", Locale.getDefault());
int actual;
DeviceSet ds = new DeviceSet(null, null, new HashMap<>());
DeviceMeta dm = new DeviceMeta(IdFactory.getRandomId(), page, 0, true);

Diff of 05e815cee9935d64b7d30e444cae09f8f13b47b3 and 26c17c990e2e3012993fd60eea7799f7e2e41cf8:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 2
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 0
	--> recency = null
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 05e815cee9935d64b7d30e444cae09f8f13b47b3 to 26c17c990e2e3012993fd60eea7799f7e2e41cf8


****Parsing for addition at revision 26c17c990e2e3012993fd60eea7799f7e2e41cf8****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added BaseReaderApplication.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DebugUtils.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
Added SwipeGestureDetector.java to .\/reader\ repository source files.
Added UserActionLogger.java to .\/reader\ repository source files.
Added Utils.java to .\/reader\ repository source files.
Added PdfViewerActivityTest.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=VomUtil.bytesToHexString(mDigest.digest())
String id = VomUtil.bytesToHexString(mDigest.digest());
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id + ".db");
java.io.File jFile = new java.io.File(mContext.getCacheDir(), fileId + ".db");
Options opts = new Options();
n=V.getNamespace(mVContext)
Namespace n = V.getNamespace(mVContext);
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
blessingsFuture=BlessingsManager.getBlessings(mContext,"VanadiumBlessings",true)
ListenableFuture<Blessings> blessingsFuture = BlessingsManager
                .getBlessings(mContext, "VanadiumBlessings", true);
ListenableFuture<Blessings> blessingsFuture = BlessingsManager
                .getBlessings(mContext, "VanadiumBlessings", true);
syncbaseName=NamingUtil.join("users",mUsername,"android/reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "android/reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",mUsername,"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    mUsername,
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",mUsername,"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        mUsername,
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        mUsername,
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
Handler handler = new Handler();
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=sync(group.join(mVContext,new SyncgroupMemberInfo()))
SyncgroupSpec spec = sync(group.join(mVContext, new SyncgroupMemberInfo()));
members=sync(group.getMembers(mVContext))
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
ext=certificate.getExtension()
String ext = certificate.getExtension();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
File file = (File) sync(mLocalSB.files.get(mVContext, fileId, File.class));
batch=sync(mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true)))
BatchDatabase batch = sync(mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true)));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(table.scan(mCancelableVContext,RowRange.range("","")))
VIterable<KeyValue> kvs = InputChannels.asIterable(
                        table.scan(mCancelableVContext, RowRange.range("", "")));
VIterable<KeyValue> kvs = InputChannels.asIterable(
                        table.scan(mCancelableVContext, RowRange.range("", "")));
@SuppressWarnings("unchecked")
                    E item = (E) VomUtil.decode(kv.getValue(), mClass);
watchStream=InputChannels.asIterable(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker))
VIterable<WatchChange> watchStream = InputChannels.asIterable(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker));
VIterable<WatchChange> watchStream = InputChannels.asIterable(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker));
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
id=VomUtil.bytesToHexString(mDigest.digest())
String id = VomUtil.bytesToHexString(mDigest.digest());
ref=mBlobWriter.getRef()
BlobRef ref = mBlobWriter.getRef();
dir=Utils.getLogDirectory()
File dir = Utils.getLogDirectory();
startTime=Utils.getTimeString()
String startTime = Utils.getTimeString();
deviceId=DeviceInfoFactory.getDeviceId(context)
String deviceId = DeviceInfoFactory.getDeviceId(context);
File logcatFile = new File(dir,
                String.format("%s-%s.log", getLogPrefix(appName, deviceId), startTime));
files=dir.listFiles(new FilenameFilter(){
  @Override public boolean accept(  File file,  String s){
    return s.startsWith(getLogPrefix(appName,deviceId));
  }
}
)
File[] files = dir.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(File file, String s) {
                return s.startsWith(getLogPrefix(appName, deviceId));
            }
        });
logFiles=Arrays.asList(files)
List<File> logFiles = Arrays.asList(files);
List<File> logFiles = Arrays.asList(files);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);

 Generics pattern new FutureCallback<Void>() was added at revision 26c17c990e2e3012993fd60eea7799f7e2e41cf8

CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
swipeDetector=SwipeGestureDetector.create(this,new SwipeGestureDetector.SimpleOnSwipeListener(){
  @Override public boolean onSwipeLeft(){
    nextPage();
    return true;
  }
  @Override public boolean onSwipeRight(){
    prevPage();
    return true;
  }
}
)
final GestureDetectorCompat swipeDetector = SwipeGestureDetector.create(
                this,
                new SwipeGestureDetector.SimpleOnSwipeListener() {
                    @Override
                    public boolean onSwipeLeft() {
                        nextPage();
                        return true;
                    }

                    @Override
                    public boolean onSwipeRight() {
                        prevPage();
                        return true;
                    }
                });
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
oldPage=getPage()
int oldPage = getPage();
newPage=getPage()
int newPage = getPage();
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
Map<String, DeviceMeta> devicesCopy = null;
Map<String, DeviceMeta> devicesCopy = null;
Map<String, DeviceMeta> devicesCopy = null;
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = initialPage;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
DeviceSet ds = new DeviceSet(id, fileId, devices);
initialPage=determineInitialPage(ds)
int initialPage = determineInitialPage(ds);
dm=createDeviceMeta(initialPage)
DeviceMeta dm = createDeviceMeta(initialPage);
int lastPage = StreamSupport.stream(ds.getDevices().values())
                .map(DeviceMeta::getPage)
                .sorted()
                .reduce((x, y) -> (y - x) > 1 ? x : y)
                .orElse(0);
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
ds=cloneDeviceSet(mCurrentDS)
DeviceSet ds = cloneDeviceSet(mCurrentDS);
dm=getDeviceMeta(ds)
DeviceMeta dm = getDeviceMeta(ds);
linkedDevices=getLinkedDevices(ds)
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
ds=cloneDeviceSet(mCurrentDS)
DeviceSet ds = cloneDeviceSet(mCurrentDS);
dm=getDeviceMeta(ds)
DeviceMeta dm = getDeviceMeta(ds);
linkedDevices=getLinkedDevices(ds)
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=ds.getDevices()
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
Uri uri = null;
bytes=getBytesFromUri(uri)
byte[] bytes = getBytesFromUri(uri);
file=createFile(bytes,getTitleFromUri(uri))
File file = createFile(bytes, getTitleFromUri(uri));
ds=createDeviceSet(file)
DeviceSet ds = createDeviceSet(file);
int maxProgress = values[1];
in=getContentResolver().openInputStream(uri)
InputStream in = getContentResolver().openInputStream(uri);
total=in.available()
int total = in.available();
int available = total;
byte[] result = new byte[available];
int cur = 0;
int bytesRead;
DB.FileBuilder builder;
int cur = 0;
int available = bytes.length;
numBytes=Math.min(BLOCK_SIZE,available)
int numBytes = Math.min(BLOCK_SIZE, available);
vFile=builder.build()
File vFile = builder.build();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
File pdfFile = new File(getContext().getCacheDir(), fileId);
float pageRatio = (float) page.getWidth() / (float) page.getHeight();
float viewRatio = (float) getWidth() / (float) getHeight();
Bitmap bitmap;
boolean result = false;
float dx = e2.getX() - e1.getX();
float dy = e2.getY() - e1.getY();
UserActionLogger result = instance;
dir=Utils.getLogDirectory()
File dir = Utils.getLogDirectory();
startTime=Utils.getTimeString()
String startTime = Utils.getTimeString();
File touchLogFile = new File(dir,
                String.format("reader-%s-touch-%s.log", mDeviceId, startTime));
File navigationLogFile = new File(dir,
                String.format("reader-%s-navigation-%s.log", mDeviceId, startTime));
IOException ex = null;
boolean hasWritePermission = ContextCompat.checkSelfPermission(context,
                Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;
boolean hasReadPermission = ContextCompat.checkSelfPermission(context,
                Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;
dir=Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS)
File dir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS);
SimpleDateFormat formatter = new SimpleDateFormat(
                "yyyyMMdd-HHmmss.SSS", Locale.getDefault());

 Generics pattern private static class MainThreadExecutor was added at revision 26c17c990e2e3012993fd60eea7799f7e2e41cf8

int actual;
DeviceSet ds = new DeviceSet(null, null, new HashMap<>());
DeviceMeta dm = new DeviceMeta(IdFactory.getRandomId(), page, 0, true);

Diff of 26c17c990e2e3012993fd60eea7799f7e2e41cf8 and f3f638b85f4aa174f068fc4c41dbbbe6f9390725:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 3
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 1
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 26c17c990e2e3012993fd60eea7799f7e2e41cf8 to f3f638b85f4aa174f068fc4c41dbbbe6f9390725


****Parsing for addition at revision f3f638b85f4aa174f068fc4c41dbbbe6f9390725****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added BaseReaderApplication.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DebugUtils.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
Added SwipeGestureDetector.java to .\/reader\ repository source files.
Added UserActionLogger.java to .\/reader\ repository source files.
Added Utils.java to .\/reader\ repository source files.
Added PdfViewerActivityTest.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=VomUtil.bytesToHexString(mDigest.digest())
String id = VomUtil.bytesToHexString(mDigest.digest());
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id + ".db");
java.io.File jFile = new java.io.File(mContext.getCacheDir(), fileId + ".db");
Options opts = new Options();
n=V.getNamespace(mVContext)
Namespace n = V.getNamespace(mVContext);
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
blessingsFuture=BlessingsManager.getBlessings(mContext,"VanadiumBlessings",true)
ListenableFuture<Blessings> blessingsFuture = BlessingsManager
                .getBlessings(mContext, "VanadiumBlessings", true);
ListenableFuture<Blessings> blessingsFuture = BlessingsManager
                .getBlessings(mContext, "VanadiumBlessings", true);
syncbaseName=NamingUtil.join("users",mUsername,"android/reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "android/reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",mUsername,"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    mUsername,
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",mUsername,"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        mUsername,
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        mUsername,
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
Handler handler = new Handler();
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=sync(group.join(mVContext,new SyncgroupMemberInfo()))
SyncgroupSpec spec = sync(group.join(mVContext, new SyncgroupMemberInfo()));
members=sync(group.getMembers(mVContext))
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
ext=certificate.getExtension()
String ext = certificate.getExtension();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
File file = (File) sync(mLocalSB.files.get(mVContext, fileId, File.class));
batch=sync(mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true)))
BatchDatabase batch = sync(mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true)));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(table.scan(mCancelableVContext,RowRange.range("","")))
VIterable<KeyValue> kvs = InputChannels.asIterable(
                        table.scan(mCancelableVContext, RowRange.range("", "")));
VIterable<KeyValue> kvs = InputChannels.asIterable(
                        table.scan(mCancelableVContext, RowRange.range("", "")));
@SuppressWarnings("unchecked")
                    E item = (E) VomUtil.decode(kv.getValue(), mClass);
watchStream=InputChannels.asIterable(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker))
VIterable<WatchChange> watchStream = InputChannels.asIterable(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker));
VIterable<WatchChange> watchStream = InputChannels.asIterable(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker));
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
id=VomUtil.bytesToHexString(mDigest.digest())
String id = VomUtil.bytesToHexString(mDigest.digest());
ref=mBlobWriter.getRef()
BlobRef ref = mBlobWriter.getRef();
dir=Utils.getLogDirectory()
File dir = Utils.getLogDirectory();
startTime=Utils.getTimeString()
String startTime = Utils.getTimeString();
deviceId=DeviceInfoFactory.getDeviceId(context)
String deviceId = DeviceInfoFactory.getDeviceId(context);
File logcatFile = new File(dir,
                String.format("%s-%s.log", getLogPrefix(appName, deviceId), startTime));
files=dir.listFiles(new FilenameFilter(){
  @Override public boolean accept(  File file,  String s){
    return s.startsWith(getLogPrefix(appName,deviceId));
  }
}
)
File[] files = dir.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(File file, String s) {
                return s.startsWith(getLogPrefix(appName, deviceId));
            }
        });
logFiles=Arrays.asList(files)
List<File> logFiles = Arrays.asList(files);
List<File> logFiles = Arrays.asList(files);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
swipeDetector=SwipeGestureDetector.create(this,new SwipeGestureDetector.SimpleOnSwipeListener(){
  @Override public boolean onSwipeLeft(){
    nextPage();
    return true;
  }
  @Override public boolean onSwipeRight(){
    prevPage();
    return true;
  }
}
)
final GestureDetectorCompat swipeDetector = SwipeGestureDetector.create(
                this,
                new SwipeGestureDetector.SimpleOnSwipeListener() {
                    @Override
                    public boolean onSwipeLeft() {
                        nextPage();
                        return true;
                    }

                    @Override
                    public boolean onSwipeRight() {
                        prevPage();
                        return true;
                    }
                });
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
oldPage=getPage()
int oldPage = getPage();
newPage=getPage()
int newPage = getPage();
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
Map<String, DeviceMeta> devicesCopy = null;
Map<String, DeviceMeta> devicesCopy = null;
Map<String, DeviceMeta> devicesCopy = null;
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = initialPage;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
DeviceSet ds = new DeviceSet(id, fileId, devices);
initialPage=determineInitialPage(ds)
int initialPage = determineInitialPage(ds);
dm=createDeviceMeta(initialPage)
DeviceMeta dm = createDeviceMeta(initialPage);
int lastPage = StreamSupport.stream(ds.getDevices().values())
                .map(DeviceMeta::getPage)
                .sorted()
                .reduce((x, y) -> (y - x) > 1 ? x : y)
                .orElse(0);
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
ds=cloneDeviceSet(mCurrentDS)
DeviceSet ds = cloneDeviceSet(mCurrentDS);
dm=getDeviceMeta(ds)
DeviceMeta dm = getDeviceMeta(ds);
linkedDevices=getLinkedDevices(ds)
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
ds=cloneDeviceSet(mCurrentDS)
DeviceSet ds = cloneDeviceSet(mCurrentDS);
dm=getDeviceMeta(ds)
DeviceMeta dm = getDeviceMeta(ds);
linkedDevices=getLinkedDevices(ds)
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=ds.getDevices()
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
Uri uri = null;
bytes=getBytesFromUri(uri)
byte[] bytes = getBytesFromUri(uri);
file=createFile(bytes,getTitleFromUri(uri))
File file = createFile(bytes, getTitleFromUri(uri));
ds=createDeviceSet(file)
DeviceSet ds = createDeviceSet(file);
int maxProgress = values[1];
in=getContentResolver().openInputStream(uri)
InputStream in = getContentResolver().openInputStream(uri);
total=in.available()
int total = in.available();
int available = total;
byte[] result = new byte[available];
int cur = 0;
int bytesRead;
DB.FileBuilder builder;
int cur = 0;
int available = bytes.length;
numBytes=Math.min(BLOCK_SIZE,available)
int numBytes = Math.min(BLOCK_SIZE, available);
vFile=builder.build()
File vFile = builder.build();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
File pdfFile = new File(getContext().getCacheDir(), fileId);
float pageRatio = (float) page.getWidth() / (float) page.getHeight();
float viewRatio = (float) getWidth() / (float) getHeight();
Bitmap bitmap;
boolean result = false;
float dx = e2.getX() - e1.getX();
float dy = e2.getY() - e1.getY();
UserActionLogger result = instance;
dir=Utils.getLogDirectory()
File dir = Utils.getLogDirectory();
startTime=Utils.getTimeString()
String startTime = Utils.getTimeString();
File touchLogFile = new File(dir,
                String.format("reader-%s-touch-%s.log", mDeviceId, startTime));
File navigationLogFile = new File(dir,
                String.format("reader-%s-navigation-%s.log", mDeviceId, startTime));
IOException ex = null;
boolean hasWritePermission = ContextCompat.checkSelfPermission(context,
                Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;
boolean hasReadPermission = ContextCompat.checkSelfPermission(context,
                Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;
dir=Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS)
File dir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS);
SimpleDateFormat formatter = new SimpleDateFormat(
                "yyyyMMdd-HHmmss.SSS", Locale.getDefault());
int actual;
DeviceSet ds = new DeviceSet(null, null, new HashMap<>());
DeviceMeta dm = new DeviceMeta(IdFactory.getRandomId(), page, 0, true);

Diff of f3f638b85f4aa174f068fc4c41dbbbe6f9390725 and c24d1179a5615bf8b939583c98710c5b89505697:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 3
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 1
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision f3f638b85f4aa174f068fc4c41dbbbe6f9390725 to c24d1179a5615bf8b939583c98710c5b89505697


****Parsing for addition at revision c24d1179a5615bf8b939583c98710c5b89505697****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added BaseReaderApplication.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DebugUtils.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
Added SwipeGestureDetector.java to .\/reader\ repository source files.
Added UserActionLogger.java to .\/reader\ repository source files.
Added Utils.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=VomUtil.bytesToHexString(mDigest.digest())
String id = VomUtil.bytesToHexString(mDigest.digest());
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id + ".db");
java.io.File jFile = new java.io.File(mContext.getCacheDir(), fileId + ".db");
Options opts = new Options();
n=V.getNamespace(mVContext)
Namespace n = V.getNamespace(mVContext);
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
blessingsFuture=BlessingsManager.getBlessings(mContext,"VanadiumBlessings",true)
ListenableFuture<Blessings> blessingsFuture = BlessingsManager
                .getBlessings(mContext, "VanadiumBlessings", true);
ListenableFuture<Blessings> blessingsFuture = BlessingsManager
                .getBlessings(mContext, "VanadiumBlessings", true);
syncbaseName=NamingUtil.join("users",mUsername,"android/reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "android/reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",mUsername,"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    mUsername,
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",mUsername,"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        mUsername,
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        mUsername,
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
Handler handler = new Handler();
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=sync(group.join(mVContext,new SyncgroupMemberInfo()))
SyncgroupSpec spec = sync(group.join(mVContext, new SyncgroupMemberInfo()));
members=sync(group.getMembers(mVContext))
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
ext=certificate.getExtension()
String ext = certificate.getExtension();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
File file = (File) sync(mLocalSB.files.get(mVContext, fileId, File.class));
batch=sync(mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true)))
BatchDatabase batch = sync(mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true)));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(table.scan(mCancelableVContext,RowRange.range("","")))
VIterable<KeyValue> kvs = InputChannels.asIterable(
                        table.scan(mCancelableVContext, RowRange.range("", "")));
VIterable<KeyValue> kvs = InputChannels.asIterable(
                        table.scan(mCancelableVContext, RowRange.range("", "")));
@SuppressWarnings("unchecked")
                    E item = (E) VomUtil.decode(kv.getValue(), mClass);
watchStream=InputChannels.asIterable(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker))
VIterable<WatchChange> watchStream = InputChannels.asIterable(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker));
VIterable<WatchChange> watchStream = InputChannels.asIterable(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker));
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
id=VomUtil.bytesToHexString(mDigest.digest())
String id = VomUtil.bytesToHexString(mDigest.digest());
ref=mBlobWriter.getRef()
BlobRef ref = mBlobWriter.getRef();
dir=Utils.getLogDirectory()
File dir = Utils.getLogDirectory();
startTime=Utils.getTimeString()
String startTime = Utils.getTimeString();
deviceId=DeviceInfoFactory.getDeviceId(context)
String deviceId = DeviceInfoFactory.getDeviceId(context);
File logcatFile = new File(dir,
                String.format("%s-%s.log", getLogPrefix(appName, deviceId), startTime));
files=dir.listFiles(new FilenameFilter(){
  @Override public boolean accept(  File file,  String s){
    return s.startsWith(getLogPrefix(appName,deviceId));
  }
}
)
File[] files = dir.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(File file, String s) {
                return s.startsWith(getLogPrefix(appName, deviceId));
            }
        });
logFiles=Arrays.asList(files)
List<File> logFiles = Arrays.asList(files);
List<File> logFiles = Arrays.asList(files);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
swipeDetector=SwipeGestureDetector.create(this,new SwipeGestureDetector.SimpleOnSwipeListener(){
  @Override public boolean onSwipeLeft(){
    nextPage();
    return true;
  }
  @Override public boolean onSwipeRight(){
    prevPage();
    return true;
  }
}
)
final GestureDetectorCompat swipeDetector = SwipeGestureDetector.create(
                this,
                new SwipeGestureDetector.SimpleOnSwipeListener() {
                    @Override
                    public boolean onSwipeLeft() {
                        nextPage();
                        return true;
                    }

                    @Override
                    public boolean onSwipeRight() {
                        prevPage();
                        return true;
                    }
                });
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
oldPage=getPage()
int oldPage = getPage();
newPage=getPage()
int newPage = getPage();
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
Map<String, DeviceMeta> devicesCopy = null;
Map<String, DeviceMeta> devicesCopy = null;
Map<String, DeviceMeta> devicesCopy = null;
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = initialPage;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
DeviceSet ds = new DeviceSet(id, fileId, devices);
int lastPage = StreamSupport.stream(ds.getDevices().values())
                .map(DeviceMeta::getPage)
                .sorted()
                .reduce((x, y) -> (y - x) > 1 ? x : y)
                .orElse(0);
dm=createDeviceMeta(lastPage + 1)
DeviceMeta dm = createDeviceMeta(lastPage + 1);
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
ds=cloneDeviceSet(mCurrentDS)
DeviceSet ds = cloneDeviceSet(mCurrentDS);
dm=getDeviceMeta(ds)
DeviceMeta dm = getDeviceMeta(ds);
linkedDevices=getLinkedDevices(ds)
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
ds=cloneDeviceSet(mCurrentDS)
DeviceSet ds = cloneDeviceSet(mCurrentDS);
dm=getDeviceMeta(ds)
DeviceMeta dm = getDeviceMeta(ds);
linkedDevices=getLinkedDevices(ds)
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=ds.getDevices()
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
Uri uri = null;
bytes=getBytesFromUri(uri)
byte[] bytes = getBytesFromUri(uri);
file=createFile(bytes,getTitleFromUri(uri))
File file = createFile(bytes, getTitleFromUri(uri));
ds=createDeviceSet(file)
DeviceSet ds = createDeviceSet(file);
int maxProgress = values[1];
in=getContentResolver().openInputStream(uri)
InputStream in = getContentResolver().openInputStream(uri);
total=in.available()
int total = in.available();
int available = total;
byte[] result = new byte[available];
int cur = 0;
int bytesRead;
DB.FileBuilder builder;
int cur = 0;
int available = bytes.length;
numBytes=Math.min(BLOCK_SIZE,available)
int numBytes = Math.min(BLOCK_SIZE, available);
vFile=builder.build()
File vFile = builder.build();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
File pdfFile = new File(getContext().getCacheDir(), fileId);
float pageRatio = (float) page.getWidth() / (float) page.getHeight();
float viewRatio = (float) getWidth() / (float) getHeight();
Bitmap bitmap;
boolean result = false;
float dx = e2.getX() - e1.getX();
float dy = e2.getY() - e1.getY();
UserActionLogger result = instance;
dir=Utils.getLogDirectory()
File dir = Utils.getLogDirectory();
startTime=Utils.getTimeString()
String startTime = Utils.getTimeString();
File touchLogFile = new File(dir,
                String.format("reader-%s-touch-%s.log", mDeviceId, startTime));
File navigationLogFile = new File(dir,
                String.format("reader-%s-navigation-%s.log", mDeviceId, startTime));
IOException ex = null;
boolean hasWritePermission = ContextCompat.checkSelfPermission(context,
                Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;
boolean hasReadPermission = ContextCompat.checkSelfPermission(context,
                Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;
dir=Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS)
File dir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS);
SimpleDateFormat formatter = new SimpleDateFormat(
                "yyyyMMdd-HHmmss.SSS", Locale.getDefault());

Diff of c24d1179a5615bf8b939583c98710c5b89505697 and ead738c64b6bf53e33efd81e9e552f9e81a499a4:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 3
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 1
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision c24d1179a5615bf8b939583c98710c5b89505697 to ead738c64b6bf53e33efd81e9e552f9e81a499a4


****Parsing for addition at revision ead738c64b6bf53e33efd81e9e552f9e81a499a4****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added BaseReaderApplication.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DebugUtils.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
Added SwipeGestureDetector.java to .\/reader\ repository source files.
Added UserActionLogger.java to .\/reader\ repository source files.
Added Utils.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=VomUtil.bytesToHexString(mDigest.digest())
String id = VomUtil.bytesToHexString(mDigest.digest());
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id + ".db");
java.io.File jFile = new java.io.File(mContext.getCacheDir(), fileId + ".db");
Options opts = new Options();
n=V.getNamespace(mVContext)
Namespace n = V.getNamespace(mVContext);
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
blessingsFuture=BlessingsManager.getBlessings(mContext,"VanadiumBlessings",true)
ListenableFuture<Blessings> blessingsFuture = BlessingsManager
                .getBlessings(mContext, "VanadiumBlessings", true);
ListenableFuture<Blessings> blessingsFuture = BlessingsManager
                .getBlessings(mContext, "VanadiumBlessings", true);
syncbaseName=NamingUtil.join("users",mUsername,"android/reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "android/reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",mUsername,"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    mUsername,
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",mUsername,"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        mUsername,
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        mUsername,
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
Handler handler = new Handler();
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=sync(group.join(mVContext,new SyncgroupMemberInfo()))
SyncgroupSpec spec = sync(group.join(mVContext, new SyncgroupMemberInfo()));
members=sync(group.getMembers(mVContext))
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
ext=certificate.getExtension()
String ext = certificate.getExtension();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
File file = (File) sync(mLocalSB.files.get(mVContext, fileId, File.class));
batch=sync(mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true)))
BatchDatabase batch = sync(mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true)));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(table.scan(mCancelableVContext,RowRange.range("","")))
VIterable<KeyValue> kvs = InputChannels.asIterable(
                        table.scan(mCancelableVContext, RowRange.range("", "")));
VIterable<KeyValue> kvs = InputChannels.asIterable(
                        table.scan(mCancelableVContext, RowRange.range("", "")));
@SuppressWarnings("unchecked")
                    E item = (E) VomUtil.decode(kv.getValue(), mClass);
watchStream=InputChannels.asIterable(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker))
VIterable<WatchChange> watchStream = InputChannels.asIterable(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker));
VIterable<WatchChange> watchStream = InputChannels.asIterable(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker));
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
id=VomUtil.bytesToHexString(mDigest.digest())
String id = VomUtil.bytesToHexString(mDigest.digest());
ref=mBlobWriter.getRef()
BlobRef ref = mBlobWriter.getRef();
dir=Utils.getLogDirectory()
File dir = Utils.getLogDirectory();
startTime=Utils.getTimeString()
String startTime = Utils.getTimeString();
deviceId=DeviceInfoFactory.getDeviceId(context)
String deviceId = DeviceInfoFactory.getDeviceId(context);
File logcatFile = new File(dir,
                String.format("%s-%s.log", getLogPrefix(appName, deviceId), startTime));
files=dir.listFiles(new FilenameFilter(){
  @Override public boolean accept(  File file,  String s){
    return s.startsWith(getLogPrefix(appName,deviceId));
  }
}
)
File[] files = dir.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(File file, String s) {
                return s.startsWith(getLogPrefix(appName, deviceId));
            }
        });
logFiles=Arrays.asList(files)
List<File> logFiles = Arrays.asList(files);
List<File> logFiles = Arrays.asList(files);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
swipeDetector=SwipeGestureDetector.create(this,new SwipeGestureDetector.SimpleOnSwipeListener(){
  @Override public boolean onSwipeLeft(){
    nextPage();
    return true;
  }
  @Override public boolean onSwipeRight(){
    prevPage();
    return true;
  }
}
)
final GestureDetectorCompat swipeDetector = SwipeGestureDetector.create(
                this,
                new SwipeGestureDetector.SimpleOnSwipeListener() {
                    @Override
                    public boolean onSwipeLeft() {
                        nextPage();
                        return true;
                    }

                    @Override
                    public boolean onSwipeRight() {
                        prevPage();
                        return true;
                    }
                });
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
oldPage=getPage()
int oldPage = getPage();
newPage=getPage()
int newPage = getPage();
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
Map<String, DeviceMeta> devicesCopy = null;
Map<String, DeviceMeta> devicesCopy = null;
Map<String, DeviceMeta> devicesCopy = null;
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
DeviceSet ds = new DeviceSet(id, fileId, devices);
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
ds=cloneDeviceSet(mCurrentDS)
DeviceSet ds = cloneDeviceSet(mCurrentDS);
dm=getDeviceMeta(ds)
DeviceMeta dm = getDeviceMeta(ds);
linkedDevices=getLinkedDevices(ds)
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
ds=cloneDeviceSet(mCurrentDS)
DeviceSet ds = cloneDeviceSet(mCurrentDS);
dm=getDeviceMeta(ds)
DeviceMeta dm = getDeviceMeta(ds);
linkedDevices=getLinkedDevices(ds)
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=ds.getDevices()
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
Uri uri = null;
bytes=getBytesFromUri(uri)
byte[] bytes = getBytesFromUri(uri);
file=createFile(bytes,getTitleFromUri(uri))
File file = createFile(bytes, getTitleFromUri(uri));
ds=createDeviceSet(file)
DeviceSet ds = createDeviceSet(file);
int maxProgress = values[1];
in=getContentResolver().openInputStream(uri)
InputStream in = getContentResolver().openInputStream(uri);
total=in.available()
int total = in.available();
int available = total;
byte[] result = new byte[available];
int cur = 0;
int bytesRead;
DB.FileBuilder builder;
int cur = 0;
int available = bytes.length;
numBytes=Math.min(BLOCK_SIZE,available)
int numBytes = Math.min(BLOCK_SIZE, available);
vFile=builder.build()
File vFile = builder.build();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
File pdfFile = new File(getContext().getCacheDir(), fileId);
float pageRatio = (float) page.getWidth() / (float) page.getHeight();
float viewRatio = (float) getWidth() / (float) getHeight();
Bitmap bitmap;
boolean result = false;
float dx = e2.getX() - e1.getX();
float dy = e2.getY() - e1.getY();
UserActionLogger result = instance;
dir=Utils.getLogDirectory()
File dir = Utils.getLogDirectory();
startTime=Utils.getTimeString()
String startTime = Utils.getTimeString();
File touchLogFile = new File(dir,
                String.format("reader-%s-touch-%s.log", mDeviceId, startTime));
File navigationLogFile = new File(dir,
                String.format("reader-%s-navigation-%s.log", mDeviceId, startTime));
IOException ex = null;
boolean hasWritePermission = ContextCompat.checkSelfPermission(context,
                Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;
boolean hasReadPermission = ContextCompat.checkSelfPermission(context,
                Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;
dir=Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS)
File dir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS);
SimpleDateFormat formatter = new SimpleDateFormat(
                "yyyyMMdd-HHmmss.SSS", Locale.getDefault());

Diff of ead738c64b6bf53e33efd81e9e552f9e81a499a4 and 1ca627cc0924615a8d2683c0521e50d79dff3181:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 4
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 1
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision ead738c64b6bf53e33efd81e9e552f9e81a499a4 to 1ca627cc0924615a8d2683c0521e50d79dff3181


****Parsing for addition at revision 1ca627cc0924615a8d2683c0521e50d79dff3181****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added BaseReaderApplication.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DebugUtils.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
Added SwipeGestureDetector.java to .\/reader\ repository source files.
Added UserActionLogger.java to .\/reader\ repository source files.
Added Utils.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=VomUtil.bytesToHexString(mDigest.digest())
String id = VomUtil.bytesToHexString(mDigest.digest());
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), fileId);
Options opts = new Options();
n=V.getNamespace(mVContext)
Namespace n = V.getNamespace(mVContext);
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
blessingsFuture=BlessingsManager.getBlessings(mContext,"VanadiumBlessings",true)
ListenableFuture<Blessings> blessingsFuture = BlessingsManager
                .getBlessings(mContext, "VanadiumBlessings", true);
ListenableFuture<Blessings> blessingsFuture = BlessingsManager
                .getBlessings(mContext, "VanadiumBlessings", true);
syncbaseName=NamingUtil.join("users",mUsername,"android/reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "android/reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",mUsername,"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    mUsername,
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",mUsername,"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        mUsername,
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        mUsername,
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
Handler handler = new Handler();
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=sync(group.join(mVContext,new SyncgroupMemberInfo()))
SyncgroupSpec spec = sync(group.join(mVContext, new SyncgroupMemberInfo()));
members=sync(group.getMembers(mVContext))
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
ext=certificate.getExtension()
String ext = certificate.getExtension();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
File file = (File) sync(mLocalSB.files.get(mVContext, fileId, File.class));
batch=sync(mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true)))
BatchDatabase batch = sync(mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true)));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(table.scan(mCancelableVContext,RowRange.range("","")))
VIterable<KeyValue> kvs = InputChannels.asIterable(
                        table.scan(mCancelableVContext, RowRange.range("", "")));
VIterable<KeyValue> kvs = InputChannels.asIterable(
                        table.scan(mCancelableVContext, RowRange.range("", "")));
@SuppressWarnings("unchecked")
                    E item = (E) VomUtil.decode(kv.getValue(), mClass);
watchStream=InputChannels.asIterable(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker))
VIterable<WatchChange> watchStream = InputChannels.asIterable(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker));
VIterable<WatchChange> watchStream = InputChannels.asIterable(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker));
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
id=VomUtil.bytesToHexString(mDigest.digest())
String id = VomUtil.bytesToHexString(mDigest.digest());
ref=mBlobWriter.getRef()
BlobRef ref = mBlobWriter.getRef();
dir=Utils.getLogDirectory()
File dir = Utils.getLogDirectory();
startTime=Utils.getTimeString()
String startTime = Utils.getTimeString();
deviceId=DeviceInfoFactory.getDeviceId(context)
String deviceId = DeviceInfoFactory.getDeviceId(context);
File logcatFile = new File(dir,
                String.format("%s-%s.log", getLogPrefix(appName, deviceId), startTime));
files=dir.listFiles(new FilenameFilter(){
  @Override public boolean accept(  File file,  String s){
    return s.startsWith(getLogPrefix(appName,deviceId));
  }
}
)
File[] files = dir.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(File file, String s) {
                return s.startsWith(getLogPrefix(appName, deviceId));
            }
        });
logFiles=Arrays.asList(files)
List<File> logFiles = Arrays.asList(files);
List<File> logFiles = Arrays.asList(files);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
swipeDetector=SwipeGestureDetector.create(this,new SwipeGestureDetector.SimpleOnSwipeListener(){
  @Override public boolean onSwipeLeft(){
    nextPage();
    return true;
  }
  @Override public boolean onSwipeRight(){
    prevPage();
    return true;
  }
}
)
final GestureDetectorCompat swipeDetector = SwipeGestureDetector.create(
                this,
                new SwipeGestureDetector.SimpleOnSwipeListener() {
                    @Override
                    public boolean onSwipeLeft() {
                        nextPage();
                        return true;
                    }

                    @Override
                    public boolean onSwipeRight() {
                        prevPage();
                        return true;
                    }
                });
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
oldPage=getPage()
int oldPage = getPage();
newPage=getPage()
int newPage = getPage();
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
Map<String, DeviceMeta> devicesCopy = null;
Map<String, DeviceMeta> devicesCopy = null;
Map<String, DeviceMeta> devicesCopy = null;
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
DeviceSet ds = new DeviceSet(id, fileId, devices);
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
ds=cloneDeviceSet(mCurrentDS)
DeviceSet ds = cloneDeviceSet(mCurrentDS);
dm=getDeviceMeta(ds)
DeviceMeta dm = getDeviceMeta(ds);
linkedDevices=getLinkedDevices(ds)
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
ds=cloneDeviceSet(mCurrentDS)
DeviceSet ds = cloneDeviceSet(mCurrentDS);
dm=getDeviceMeta(ds)
DeviceMeta dm = getDeviceMeta(ds);
linkedDevices=getLinkedDevices(ds)
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=ds.getDevices()
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
Uri uri = null;
bytes=getBytesFromUri(uri)
byte[] bytes = getBytesFromUri(uri);
file=createFile(bytes,getTitleFromUri(uri))
File file = createFile(bytes, getTitleFromUri(uri));
ds=createDeviceSet(file)
DeviceSet ds = createDeviceSet(file);
int maxProgress = values[1];
in=getContentResolver().openInputStream(uri)
InputStream in = getContentResolver().openInputStream(uri);
total=in.available()
int total = in.available();
int available = total;
byte[] result = new byte[available];
int cur = 0;
int bytesRead;
DB.FileBuilder builder;
int cur = 0;
int available = bytes.length;
numBytes=Math.min(BLOCK_SIZE,available)
int numBytes = Math.min(BLOCK_SIZE, available);
vFile=builder.build()
File vFile = builder.build();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
settings=getSettings()
WebSettings settings = getSettings();
path=request.getUrl().getPath()
String path = request.getUrl().getPath();
fileId=request.getUrl().getLastPathSegment()
String fileId = request.getUrl().getLastPathSegment();
in=DB.Singleton.get(getContext()).getInputStreamForFile(fileId)
InputStream in = DB.Singleton.get(getContext()).getInputStreamForFile(fileId);
boolean result = false;
float dx = e2.getX() - e1.getX();
float dy = e2.getY() - e1.getY();
UserActionLogger result = instance;
dir=Utils.getLogDirectory()
File dir = Utils.getLogDirectory();
startTime=Utils.getTimeString()
String startTime = Utils.getTimeString();
File touchLogFile = new File(dir,
                String.format("reader-%s-touch-%s.log", mDeviceId, startTime));
File navigationLogFile = new File(dir,
                String.format("reader-%s-navigation-%s.log", mDeviceId, startTime));
IOException ex = null;
boolean hasWritePermission = ContextCompat.checkSelfPermission(context,
                Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;
boolean hasReadPermission = ContextCompat.checkSelfPermission(context,
                Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;
dir=Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS)
File dir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS);
SimpleDateFormat formatter = new SimpleDateFormat(
                "yyyyMMdd-HHmmss.SSS", Locale.getDefault());

Diff of 1ca627cc0924615a8d2683c0521e50d79dff3181 and 3a483585d6ee6a1c27f152f701221dcd0946a3fe:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 4
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 1
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 1ca627cc0924615a8d2683c0521e50d79dff3181 to 3a483585d6ee6a1c27f152f701221dcd0946a3fe


****Parsing for addition at revision 3a483585d6ee6a1c27f152f701221dcd0946a3fe****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added BaseReaderApplication.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DebugUtils.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
Added SwipeGestureDetector.java to .\/reader\ repository source files.
Added UserActionLogger.java to .\/reader\ repository source files.
Added Utils.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=VomUtil.bytesToHexString(mDigest.digest())
String id = VomUtil.bytesToHexString(mDigest.digest());
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), fileId);
Options opts = new Options();
n=V.getNamespace(mVContext)
Namespace n = V.getNamespace(mVContext);
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
blessingsFuture=BlessingsManager.getBlessings(mContext,"VanadiumBlessings",true)
ListenableFuture<Blessings> blessingsFuture = BlessingsManager
                .getBlessings(mContext, "VanadiumBlessings", true);
ListenableFuture<Blessings> blessingsFuture = BlessingsManager
                .getBlessings(mContext, "VanadiumBlessings", true);
syncbaseName=NamingUtil.join("users",mUsername,"android/reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "android/reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",mUsername,"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    mUsername,
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",mUsername,"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        mUsername,
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        mUsername,
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=sync(group.join(mVContext,new SyncgroupMemberInfo()))
SyncgroupSpec spec = sync(group.join(mVContext, new SyncgroupMemberInfo()));
members=sync(group.getMembers(mVContext))
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
ext=certificate.getExtension()
String ext = certificate.getExtension();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
File file = (File) sync(mLocalSB.files.get(mVContext, fileId, File.class));
batch=sync(mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true)))
BatchDatabase batch = sync(mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true)));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(table.scan(mCancelableVContext,RowRange.range("","")))
VIterable<KeyValue> kvs = InputChannels.asIterable(
                        table.scan(mCancelableVContext, RowRange.range("", "")));
VIterable<KeyValue> kvs = InputChannels.asIterable(
                        table.scan(mCancelableVContext, RowRange.range("", "")));
@SuppressWarnings("unchecked")
                    E item = (E) VomUtil.decode(kv.getValue(), mClass);
watchStream=InputChannels.asIterable(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker))
VIterable<WatchChange> watchStream = InputChannels.asIterable(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker));
VIterable<WatchChange> watchStream = InputChannels.asIterable(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker));
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
id=VomUtil.bytesToHexString(mDigest.digest())
String id = VomUtil.bytesToHexString(mDigest.digest());
ref=mBlobWriter.getRef()
BlobRef ref = mBlobWriter.getRef();
dir=Utils.getLogDirectory()
File dir = Utils.getLogDirectory();
startTime=Utils.getTimeString()
String startTime = Utils.getTimeString();
deviceId=DeviceInfoFactory.getDeviceId(context)
String deviceId = DeviceInfoFactory.getDeviceId(context);
File logcatFile = new File(dir,
                String.format("%s-%s.log", getLogPrefix(appName, deviceId), startTime));
files=dir.listFiles(new FilenameFilter(){
  @Override public boolean accept(  File file,  String s){
    return s.startsWith(getLogPrefix(appName,deviceId));
  }
}
)
File[] files = dir.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(File file, String s) {
                return s.startsWith(getLogPrefix(appName, deviceId));
            }
        });
logFiles=Arrays.asList(files)
List<File> logFiles = Arrays.asList(files);
List<File> logFiles = Arrays.asList(files);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
swipeDetector=SwipeGestureDetector.create(this,new SwipeGestureDetector.SimpleOnSwipeListener(){
  @Override public boolean onSwipeLeft(){
    nextPage();
    return true;
  }
  @Override public boolean onSwipeRight(){
    prevPage();
    return true;
  }
}
)
final GestureDetectorCompat swipeDetector = SwipeGestureDetector.create(
                this,
                new SwipeGestureDetector.SimpleOnSwipeListener() {
                    @Override
                    public boolean onSwipeLeft() {
                        nextPage();
                        return true;
                    }

                    @Override
                    public boolean onSwipeRight() {
                        prevPage();
                        return true;
                    }
                });
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
oldPage=getPage()
int oldPage = getPage();
newPage=getPage()
int newPage = getPage();
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
Map<String, DeviceMeta> devicesCopy = null;
Map<String, DeviceMeta> devicesCopy = null;
Map<String, DeviceMeta> devicesCopy = null;
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
DeviceSet ds = new DeviceSet(id, fileId, devices);
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
ds=cloneDeviceSet(mCurrentDS)
DeviceSet ds = cloneDeviceSet(mCurrentDS);
dm=getDeviceMeta(ds)
DeviceMeta dm = getDeviceMeta(ds);
linkedDevices=getLinkedDevices(ds)
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
ds=cloneDeviceSet(mCurrentDS)
DeviceSet ds = cloneDeviceSet(mCurrentDS);
dm=getDeviceMeta(ds)
DeviceMeta dm = getDeviceMeta(ds);
linkedDevices=getLinkedDevices(ds)
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=ds.getDevices()
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
Uri uri = null;
bytes=getBytesFromUri(uri)
byte[] bytes = getBytesFromUri(uri);
file=createFile(bytes,getTitleFromUri(uri))
File file = createFile(bytes, getTitleFromUri(uri));
ds=createDeviceSet(file)
DeviceSet ds = createDeviceSet(file);
int maxProgress = values[1];
in=getContentResolver().openInputStream(uri)
InputStream in = getContentResolver().openInputStream(uri);
total=in.available()
int total = in.available();
int available = total;
byte[] result = new byte[available];
int cur = 0;
int bytesRead;
DB.FileBuilder builder;
int cur = 0;
int available = bytes.length;
numBytes=Math.min(BLOCK_SIZE,available)
int numBytes = Math.min(BLOCK_SIZE, available);
vFile=builder.build()
File vFile = builder.build();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);

 Generics pattern private class CreateAndJoinDeviceSetTask was added at revision 3a483585d6ee6a1c27f152f701221dcd0946a3fe

settings=getSettings()
WebSettings settings = getSettings();
path=request.getUrl().getPath()
String path = request.getUrl().getPath();
fileId=request.getUrl().getLastPathSegment()
String fileId = request.getUrl().getLastPathSegment();
in=DB.Singleton.get(getContext()).getInputStreamForFile(fileId)
InputStream in = DB.Singleton.get(getContext()).getInputStreamForFile(fileId);
boolean result = false;
float dx = e2.getX() - e1.getX();
float dy = e2.getY() - e1.getY();
UserActionLogger result = instance;
dir=Utils.getLogDirectory()
File dir = Utils.getLogDirectory();
startTime=Utils.getTimeString()
String startTime = Utils.getTimeString();
File touchLogFile = new File(dir,
                String.format("reader-%s-touch-%s.log", mDeviceId, startTime));
File navigationLogFile = new File(dir,
                String.format("reader-%s-navigation-%s.log", mDeviceId, startTime));
IOException ex = null;
boolean hasWritePermission = ContextCompat.checkSelfPermission(context,
                Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;
boolean hasReadPermission = ContextCompat.checkSelfPermission(context,
                Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;
dir=Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS)
File dir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS);
SimpleDateFormat formatter = new SimpleDateFormat(
                "yyyyMMdd-HHmmss.SSS", Locale.getDefault());

Diff of 3a483585d6ee6a1c27f152f701221dcd0946a3fe and 7a2113a066ae08d7a11b2eda35c250f9dfaf0981:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 5
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 1
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 3a483585d6ee6a1c27f152f701221dcd0946a3fe to 7a2113a066ae08d7a11b2eda35c250f9dfaf0981


****Parsing for addition at revision 7a2113a066ae08d7a11b2eda35c250f9dfaf0981****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added BaseReaderApplication.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DebugUtils.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
Added SwipeGestureDetector.java to .\/reader\ repository source files.
Added UserActionLogger.java to .\/reader\ repository source files.
Added Utils.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=VomUtil.bytesToHexString(mDigest.digest())
String id = VomUtil.bytesToHexString(mDigest.digest());
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), fileId);

 Generics pattern private class FakeFileBuilder was added at revision 7a2113a066ae08d7a11b2eda35c250f9dfaf0981

Options opts = new Options();
n=V.getNamespace(mVContext)
Namespace n = V.getNamespace(mVContext);
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
blessingsFuture=BlessingsManager.getBlessings(mContext,"VanadiumBlessings",true)
ListenableFuture<Blessings> blessingsFuture = BlessingsManager
                .getBlessings(mContext, "VanadiumBlessings", true);
ListenableFuture<Blessings> blessingsFuture = BlessingsManager
                .getBlessings(mContext, "VanadiumBlessings", true);
syncbaseName=NamingUtil.join("users",mUsername,"android/reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "android/reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",mUsername,"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    mUsername,
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",mUsername,"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        mUsername,
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        mUsername,
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=sync(group.join(mVContext,new SyncgroupMemberInfo()))
SyncgroupSpec spec = sync(group.join(mVContext, new SyncgroupMemberInfo()));
members=sync(group.getMembers(mVContext))
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
ext=certificate.getExtension()
String ext = certificate.getExtension();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
File file = (File) sync(mLocalSB.files.get(mVContext, fileId, File.class));
batch=sync(mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true)))
BatchDatabase batch = sync(mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true)));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(table.scan(mCancelableVContext,RowRange.range("","")))
VIterable<KeyValue> kvs = InputChannels.asIterable(
                        table.scan(mCancelableVContext, RowRange.range("", "")));
VIterable<KeyValue> kvs = InputChannels.asIterable(
                        table.scan(mCancelableVContext, RowRange.range("", "")));
@SuppressWarnings("unchecked")
                    E item = (E) VomUtil.decode(kv.getValue(), mClass);
watchStream=InputChannels.asIterable(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker))
VIterable<WatchChange> watchStream = InputChannels.asIterable(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker));
VIterable<WatchChange> watchStream = InputChannels.asIterable(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker));
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
id=VomUtil.bytesToHexString(mDigest.digest())
String id = VomUtil.bytesToHexString(mDigest.digest());
ref=mBlobWriter.getRef()
BlobRef ref = mBlobWriter.getRef();

 Generics pattern private class SyncbaseFileBuilder was added at revision 7a2113a066ae08d7a11b2eda35c250f9dfaf0981

dir=Utils.getLogDirectory()
File dir = Utils.getLogDirectory();
startTime=Utils.getTimeString()
String startTime = Utils.getTimeString();
deviceId=DeviceInfoFactory.getDeviceId(context)
String deviceId = DeviceInfoFactory.getDeviceId(context);
File logcatFile = new File(dir,
                String.format("%s-%s.log", getLogPrefix(appName, deviceId), startTime));
files=dir.listFiles(new FilenameFilter(){
  @Override public boolean accept(  File file,  String s){
    return s.startsWith(getLogPrefix(appName,deviceId));
  }
}
)
File[] files = dir.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(File file, String s) {
                return s.startsWith(getLogPrefix(appName, deviceId));
            }
        });
logFiles=Arrays.asList(files)
List<File> logFiles = Arrays.asList(files);
List<File> logFiles = Arrays.asList(files);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
swipeDetector=SwipeGestureDetector.create(this,new SwipeGestureDetector.SimpleOnSwipeListener(){
  @Override public boolean onSwipeLeft(){
    nextPage();
    return true;
  }
  @Override public boolean onSwipeRight(){
    prevPage();
    return true;
  }
}
)
final GestureDetectorCompat swipeDetector = SwipeGestureDetector.create(
                this,
                new SwipeGestureDetector.SimpleOnSwipeListener() {
                    @Override
                    public boolean onSwipeLeft() {
                        nextPage();
                        return true;
                    }

                    @Override
                    public boolean onSwipeRight() {
                        prevPage();
                        return true;
                    }
                });
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
oldPage=getPage()
int oldPage = getPage();
newPage=getPage()
int newPage = getPage();
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
Map<String, DeviceMeta> devicesCopy = null;
Map<String, DeviceMeta> devicesCopy = null;
Map<String, DeviceMeta> devicesCopy = null;
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
file=createFile(bytes,getTitleFromUri(fileUri))
File file = createFile(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(file)
final DeviceSet ds = createDeviceSet(file);
DB.FileBuilder builder;
int cur = 0;
int available = bytes.length;
numBytes=Math.min(BLOCK_SIZE,available)
int numBytes = Math.min(BLOCK_SIZE, available);
vFile=builder.build()
File vFile = builder.build();
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
DeviceSet ds = new DeviceSet(id, fileId, devices);
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
in=getContentResolver().openInputStream(uri)
InputStream in = getContentResolver().openInputStream(uri);
available=in.available()
int available = in.available();
byte[] result = new byte[available];
int cur = 0;
int bytesRead;
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
ds=cloneDeviceSet(mCurrentDS)
DeviceSet ds = cloneDeviceSet(mCurrentDS);
dm=getDeviceMeta(ds)
DeviceMeta dm = getDeviceMeta(ds);
linkedDevices=getLinkedDevices(ds)
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
ds=cloneDeviceSet(mCurrentDS)
DeviceSet ds = cloneDeviceSet(mCurrentDS);
dm=getDeviceMeta(ds)
DeviceMeta dm = getDeviceMeta(ds);
linkedDevices=getLinkedDevices(ds)
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=ds.getDevices()
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
path=request.getUrl().getPath()
String path = request.getUrl().getPath();
fileId=request.getUrl().getLastPathSegment()
String fileId = request.getUrl().getLastPathSegment();
in=DB.Singleton.get(getContext()).getInputStreamForFile(fileId)
InputStream in = DB.Singleton.get(getContext()).getInputStreamForFile(fileId);
boolean result = false;
float dx = e2.getX() - e1.getX();
float dy = e2.getY() - e1.getY();
UserActionLogger result = instance;
dir=Utils.getLogDirectory()
File dir = Utils.getLogDirectory();
startTime=Utils.getTimeString()
String startTime = Utils.getTimeString();
File touchLogFile = new File(dir,
                String.format("reader-%s-touch-%s.log", mDeviceId, startTime));
File navigationLogFile = new File(dir,
                String.format("reader-%s-navigation-%s.log", mDeviceId, startTime));
IOException ex = null;
boolean hasWritePermission = ContextCompat.checkSelfPermission(context,
                Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;
boolean hasReadPermission = ContextCompat.checkSelfPermission(context,
                Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;
dir=Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS)
File dir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS);
SimpleDateFormat formatter = new SimpleDateFormat(
                "yyyyMMdd-HHmmss.SSS", Locale.getDefault());

Diff of 7a2113a066ae08d7a11b2eda35c250f9dfaf0981 and 39f1a997836741bf95c0b3f301bb73b23fed8567:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 7
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 1
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 7a2113a066ae08d7a11b2eda35c250f9dfaf0981 to 39f1a997836741bf95c0b3f301bb73b23fed8567


****Parsing for addition at revision 39f1a997836741bf95c0b3f301bb73b23fed8567****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added BaseReaderApplication.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DebugUtils.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
Added SwipeGestureDetector.java to .\/reader\ repository source files.
Added UserActionLogger.java to .\/reader\ repository source files.
Added Utils.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), fileId);
Options opts = new Options();
n=V.getNamespace(mVContext)
Namespace n = V.getNamespace(mVContext);
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
blessingsFuture=BlessingsManager.getBlessings(mContext,"VanadiumBlessings",true)
ListenableFuture<Blessings> blessingsFuture = BlessingsManager
                .getBlessings(mContext, "VanadiumBlessings", true);
ListenableFuture<Blessings> blessingsFuture = BlessingsManager
                .getBlessings(mContext, "VanadiumBlessings", true);
syncbaseName=NamingUtil.join("users",mUsername,"android/reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "android/reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",mUsername,"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    mUsername,
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",mUsername,"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        mUsername,
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        mUsername,
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=sync(group.join(mVContext,new SyncgroupMemberInfo()))
SyncgroupSpec spec = sync(group.join(mVContext, new SyncgroupMemberInfo()));
members=sync(group.getMembers(mVContext))
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
ext=certificate.getExtension()
String ext = certificate.getExtension();
writer=sync(mLocalSB.db.writeBlob(mVContext,null))
BlobWriter writer = sync(mLocalSB.db.writeBlob(mVContext, null));
out=writer.stream(mVContext)
OutputStream out = writer.stream(mVContext);
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
File file = (File) sync(mLocalSB.files.get(mVContext, fileId, File.class));
batch=sync(mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true)))
BatchDatabase batch = sync(mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true)));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(table.scan(mCancelableVContext,RowRange.range("","")))
VIterable<KeyValue> kvs = InputChannels.asIterable(
                        table.scan(mCancelableVContext, RowRange.range("", "")));
VIterable<KeyValue> kvs = InputChannels.asIterable(
                        table.scan(mCancelableVContext, RowRange.range("", "")));
@SuppressWarnings("unchecked")
                    E item = (E) VomUtil.decode(kv.getValue(), mClass);
watchStream=InputChannels.asIterable(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker))
VIterable<WatchChange> watchStream = InputChannels.asIterable(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker));
VIterable<WatchChange> watchStream = InputChannels.asIterable(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker));
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
dir=Utils.getLogDirectory()
File dir = Utils.getLogDirectory();
startTime=Utils.getTimeString()
String startTime = Utils.getTimeString();
deviceId=DeviceInfoFactory.getDeviceId(context)
String deviceId = DeviceInfoFactory.getDeviceId(context);
File logcatFile = new File(dir,
                String.format("%s-%s.log", getLogPrefix(appName, deviceId), startTime));
files=dir.listFiles(new FilenameFilter(){
  @Override public boolean accept(  File file,  String s){
    return s.startsWith(getLogPrefix(appName,deviceId));
  }
}
)
File[] files = dir.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(File file, String s) {
                return s.startsWith(getLogPrefix(appName, deviceId));
            }
        });
logFiles=Arrays.asList(files)
List<File> logFiles = Arrays.asList(files);
List<File> logFiles = Arrays.asList(files);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
swipeDetector=SwipeGestureDetector.create(this,new SwipeGestureDetector.SimpleOnSwipeListener(){
  @Override public boolean onSwipeLeft(){
    nextPage();
    return true;
  }
  @Override public boolean onSwipeRight(){
    prevPage();
    return true;
  }
}
)
final GestureDetectorCompat swipeDetector = SwipeGestureDetector.create(
                this,
                new SwipeGestureDetector.SimpleOnSwipeListener() {
                    @Override
                    public boolean onSwipeLeft() {
                        nextPage();
                        return true;
                    }

                    @Override
                    public boolean onSwipeRight() {
                        prevPage();
                        return true;
                    }
                });
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
oldPage=getPage()
int oldPage = getPage();
newPage=getPage()
int newPage = getPage();
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
Map<String, DeviceMeta> devicesCopy = null;
Map<String, DeviceMeta> devicesCopy = null;
Map<String, DeviceMeta> devicesCopy = null;
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
ds=cloneDeviceSet(mCurrentDS)
DeviceSet ds = cloneDeviceSet(mCurrentDS);
dm=getDeviceMeta(ds)
DeviceMeta dm = getDeviceMeta(ds);
linkedDevices=getLinkedDevices(ds)
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
ds=cloneDeviceSet(mCurrentDS)
DeviceSet ds = cloneDeviceSet(mCurrentDS);
dm=getDeviceMeta(ds)
DeviceMeta dm = getDeviceMeta(ds);
linkedDevices=getLinkedDevices(ds)
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=ds.getDevices()
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
path=request.getUrl().getPath()
String path = request.getUrl().getPath();
fileId=request.getUrl().getLastPathSegment()
String fileId = request.getUrl().getLastPathSegment();
in=DB.Singleton.get(getContext()).getInputStreamForFile(fileId)
InputStream in = DB.Singleton.get(getContext()).getInputStreamForFile(fileId);

 Generics pattern new FutureCallback<Boolean>() was added at revision 39f1a997836741bf95c0b3f301bb73b23fed8567


 Generics pattern private class PdfViewClient was added at revision 39f1a997836741bf95c0b3f301bb73b23fed8567

boolean result = false;
float dx = e2.getX() - e1.getX();
float dy = e2.getY() - e1.getY();
UserActionLogger result = instance;
dir=Utils.getLogDirectory()
File dir = Utils.getLogDirectory();
startTime=Utils.getTimeString()
String startTime = Utils.getTimeString();
File touchLogFile = new File(dir,
                String.format("reader-%s-touch-%s.log", mDeviceId, startTime));
File navigationLogFile = new File(dir,
                String.format("reader-%s-navigation-%s.log", mDeviceId, startTime));
IOException ex = null;
boolean hasWritePermission = ContextCompat.checkSelfPermission(context,
                Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;
boolean hasReadPermission = ContextCompat.checkSelfPermission(context,
                Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;
dir=Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS)
File dir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS);
SimpleDateFormat formatter = new SimpleDateFormat(
                "yyyyMMdd-HHmmss.SSS", Locale.getDefault());

Diff of 39f1a997836741bf95c0b3f301bb73b23fed8567 and c92a2a85e17ad65b036ae7c0507c7b2f3fd768a2:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 8
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 2
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 39f1a997836741bf95c0b3f301bb73b23fed8567 to c92a2a85e17ad65b036ae7c0507c7b2f3fd768a2

************Analysis complete************
Added generics to repository vanadium/reader = 8

YoungSeok Yoon added type argument method count = 0
	--> recency = null
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 8
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 0
	--> recency = null
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 0
	--> recency = null
YoungSeok Yoon added class instantiation count = 2
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null

****Parsing for addition at revision 23a5bd79689c5b1504df7f7dd0e0dc75eb835a75****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added BaseReaderApplication.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DebugUtils.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
Added SwipeGestureDetector.java to .\/reader\ repository source files.
Added UserActionLogger.java to .\/reader\ repository source files.
Added Utils.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
Options opts = new Options();
n=V.getNamespace(mVContext)
Namespace n = V.getNamespace(mVContext);
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
blessingsFuture=BlessingsManager.getBlessings(mContext,"VanadiumBlessings",true)
ListenableFuture<Blessings> blessingsFuture = BlessingsManager
                .getBlessings(mContext, "VanadiumBlessings", true);
ListenableFuture<Blessings> blessingsFuture = BlessingsManager
                .getBlessings(mContext, "VanadiumBlessings", true);
syncbaseName=NamingUtil.join("users",mUsername,"android/reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "android/reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",mUsername,"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    mUsername,
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",mUsername,"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        mUsername,
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        mUsername,
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=sync(group.join(mVContext,new SyncgroupMemberInfo()))
SyncgroupSpec spec = sync(group.join(mVContext, new SyncgroupMemberInfo()));
members=sync(group.getMembers(mVContext))
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
ext=certificate.getExtension()
String ext = certificate.getExtension();
writer=sync(mLocalSB.db.writeBlob(mVContext,null))
BlobWriter writer = sync(mLocalSB.db.writeBlob(mVContext, null));
out=writer.stream(mVContext)
OutputStream out = writer.stream(mVContext);
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=sync(mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true)))
BatchDatabase batch = sync(mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true)));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(table.scan(mCancelableVContext,RowRange.range("","")))
VIterable<KeyValue> kvs = InputChannels.asIterable(
                        table.scan(mCancelableVContext, RowRange.range("", "")));
VIterable<KeyValue> kvs = InputChannels.asIterable(
                        table.scan(mCancelableVContext, RowRange.range("", "")));
@SuppressWarnings("unchecked")
                    E item = (E) VomUtil.decode(kv.getValue(), mClass);
watchStream=InputChannels.asIterable(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker))
VIterable<WatchChange> watchStream = InputChannels.asIterable(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker));
VIterable<WatchChange> watchStream = InputChannels.asIterable(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker));
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
dir=Utils.getLogDirectory()
File dir = Utils.getLogDirectory();
startTime=Utils.getTimeString()
String startTime = Utils.getTimeString();
deviceId=DeviceInfoFactory.getDeviceId(context)
String deviceId = DeviceInfoFactory.getDeviceId(context);
File logcatFile = new File(dir,
                String.format("%s-%s.log", getLogPrefix(appName, deviceId), startTime));
files=dir.listFiles(new FilenameFilter(){
  @Override public boolean accept(  File file,  String s){
    return s.startsWith(getLogPrefix(appName,deviceId));
  }
}
)
File[] files = dir.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(File file, String s) {
                return s.startsWith(getLogPrefix(appName, deviceId));
            }
        });
logFiles=Arrays.asList(files)
List<File> logFiles = Arrays.asList(files);
List<File> logFiles = Arrays.asList(files);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
swipeDetector=SwipeGestureDetector.create(this,new SwipeGestureDetector.SimpleOnSwipeListener(){
  @Override public boolean onSwipeLeft(){
    nextPage();
    return true;
  }
  @Override public boolean onSwipeRight(){
    prevPage();
    return true;
  }
}
)
final GestureDetectorCompat swipeDetector = SwipeGestureDetector.create(
                this,
                new SwipeGestureDetector.SimpleOnSwipeListener() {
                    @Override
                    public boolean onSwipeLeft() {
                        nextPage();
                        return true;
                    }

                    @Override
                    public boolean onSwipeRight() {
                        prevPage();
                        return true;
                    }
                });
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
oldPage=getPage()
int oldPage = getPage();
newPage=getPage()
int newPage = getPage();
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
Map<String, DeviceMeta> devicesCopy = null;
Map<String, DeviceMeta> devicesCopy = null;
Map<String, DeviceMeta> devicesCopy = null;
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
ds=cloneDeviceSet(mCurrentDS)
DeviceSet ds = cloneDeviceSet(mCurrentDS);
dm=getDeviceMeta(ds)
DeviceMeta dm = getDeviceMeta(ds);
linkedDevices=getLinkedDevices(ds)
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
ds=cloneDeviceSet(mCurrentDS)
DeviceSet ds = cloneDeviceSet(mCurrentDS);
dm=getDeviceMeta(ds)
DeviceMeta dm = getDeviceMeta(ds);
linkedDevices=getLinkedDevices(ds)
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=ds.getDevices()
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);
boolean result = false;
float dx = e2.getX() - e1.getX();
float dy = e2.getY() - e1.getY();

 Generics pattern public final class SwipeGestureDetector was added at revision 23a5bd79689c5b1504df7f7dd0e0dc75eb835a75


 Generics pattern public static class SimpleOnSwipeListener was added at revision 23a5bd79689c5b1504df7f7dd0e0dc75eb835a75


 Generics pattern private static class FlingToSwipeListener was added at revision 23a5bd79689c5b1504df7f7dd0e0dc75eb835a75

UserActionLogger result = instance;
dir=Utils.getLogDirectory()
File dir = Utils.getLogDirectory();
startTime=Utils.getTimeString()
String startTime = Utils.getTimeString();
File touchLogFile = new File(dir,
                String.format("reader-%s-touch-%s.log", mDeviceId, startTime));
File navigationLogFile = new File(dir,
                String.format("reader-%s-navigation-%s.log", mDeviceId, startTime));
IOException ex = null;
boolean hasWritePermission = ContextCompat.checkSelfPermission(context,
                Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;
boolean hasReadPermission = ContextCompat.checkSelfPermission(context,
                Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;
dir=Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS)
File dir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS);
SimpleDateFormat formatter = new SimpleDateFormat(
                "yyyyMMdd-HHmmss.SSS", Locale.getDefault());

Diff of 23a5bd79689c5b1504df7f7dd0e0dc75eb835a75 and 7171112143bd508d3e603c69b754ea907287fce7:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 11
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 2
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 23a5bd79689c5b1504df7f7dd0e0dc75eb835a75 to 7171112143bd508d3e603c69b754ea907287fce7


****Parsing for addition at revision 7171112143bd508d3e603c69b754ea907287fce7****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added BaseReaderApplication.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DebugUtils.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
Added UserActionLogger.java to .\/reader\ repository source files.
Added Utils.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
Options opts = new Options();
n=V.getNamespace(mVContext)
Namespace n = V.getNamespace(mVContext);
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
blessingsFuture=BlessingsManager.getBlessings(mContext,"VanadiumBlessings",true)
ListenableFuture<Blessings> blessingsFuture = BlessingsManager
                .getBlessings(mContext, "VanadiumBlessings", true);
ListenableFuture<Blessings> blessingsFuture = BlessingsManager
                .getBlessings(mContext, "VanadiumBlessings", true);
syncbaseName=NamingUtil.join("users",mUsername,"android/reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "android/reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",mUsername,"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    mUsername,
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",mUsername,"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        mUsername,
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        mUsername,
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=sync(group.join(mVContext,new SyncgroupMemberInfo()))
SyncgroupSpec spec = sync(group.join(mVContext, new SyncgroupMemberInfo()));
members=sync(group.getMembers(mVContext))
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
ext=certificate.getExtension()
String ext = certificate.getExtension();
writer=sync(mLocalSB.db.writeBlob(mVContext,null))
BlobWriter writer = sync(mLocalSB.db.writeBlob(mVContext, null));
out=writer.stream(mVContext)
OutputStream out = writer.stream(mVContext);
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=sync(mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true)))
BatchDatabase batch = sync(mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true)));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(table.scan(mCancelableVContext,RowRange.range("","")))
VIterable<KeyValue> kvs = InputChannels.asIterable(
                        table.scan(mCancelableVContext, RowRange.range("", "")));
VIterable<KeyValue> kvs = InputChannels.asIterable(
                        table.scan(mCancelableVContext, RowRange.range("", "")));
@SuppressWarnings("unchecked")
                    E item = (E) VomUtil.decode(kv.getValue(), mClass);
watchStream=InputChannels.asIterable(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker))
VIterable<WatchChange> watchStream = InputChannels.asIterable(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker));
VIterable<WatchChange> watchStream = InputChannels.asIterable(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker));
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);

 Generics pattern new FutureCallback<Blessings>() was added at revision 7171112143bd508d3e603c69b754ea907287fce7

dir=Utils.getLogDirectory()
File dir = Utils.getLogDirectory();
startTime=Utils.getTimeString()
String startTime = Utils.getTimeString();
deviceId=DeviceInfoFactory.getDeviceId(context)
String deviceId = DeviceInfoFactory.getDeviceId(context);
File logcatFile = new File(dir,
                String.format("%s-%s.log", getLogPrefix(appName, deviceId), startTime));
files=dir.listFiles(new FilenameFilter(){
  @Override public boolean accept(  File file,  String s){
    return s.startsWith(getLogPrefix(appName,deviceId));
  }
}
)
File[] files = dir.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(File file, String s) {
                return s.startsWith(getLogPrefix(appName, deviceId));
            }
        });
logFiles=Arrays.asList(files)
List<File> logFiles = Arrays.asList(files);
List<File> logFiles = Arrays.asList(files);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
oldPage=getPage()
int oldPage = getPage();
newPage=getPage()
int newPage = getPage();
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
Map<String, DeviceMeta> devicesCopy = null;
Map<String, DeviceMeta> devicesCopy = null;
Map<String, DeviceMeta> devicesCopy = null;
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
ds=cloneDeviceSet(mCurrentDS)
DeviceSet ds = cloneDeviceSet(mCurrentDS);
dm=getDeviceMeta(ds)
DeviceMeta dm = getDeviceMeta(ds);
linkedDevices=getLinkedDevices(ds)
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
ds=cloneDeviceSet(mCurrentDS)
DeviceSet ds = cloneDeviceSet(mCurrentDS);
dm=getDeviceMeta(ds)
DeviceMeta dm = getDeviceMeta(ds);
linkedDevices=getLinkedDevices(ds)
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=ds.getDevices()
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);
UserActionLogger result = instance;
dir=Utils.getLogDirectory()
File dir = Utils.getLogDirectory();
startTime=Utils.getTimeString()
String startTime = Utils.getTimeString();
File touchLogFile = new File(dir,
                String.format("reader-%s-touch-%s.log", mDeviceId, startTime));
File navigationLogFile = new File(dir,
                String.format("reader-%s-navigation-%s.log", mDeviceId, startTime));
IOException ex = null;
boolean hasWritePermission = ContextCompat.checkSelfPermission(context,
                Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;
boolean hasReadPermission = ContextCompat.checkSelfPermission(context,
                Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;
dir=Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS)
File dir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS);
SimpleDateFormat formatter = new SimpleDateFormat(
                "yyyyMMdd-HHmmss.SSS", Locale.getDefault());

Diff of 7171112143bd508d3e603c69b754ea907287fce7 and 989b3ac523cf0fa7f03e1dffb067ac38eb13d7f2:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 11
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 7171112143bd508d3e603c69b754ea907287fce7 to 989b3ac523cf0fa7f03e1dffb067ac38eb13d7f2


****Parsing for addition at revision 989b3ac523cf0fa7f03e1dffb067ac38eb13d7f2****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added BaseReaderApplication.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DebugUtils.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
Added UserActionLogger.java to .\/reader\ repository source files.
Added Utils.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
Options opts = new Options();
n=V.getNamespace(mVContext)
Namespace n = V.getNamespace(mVContext);
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=sync(group.join(mVContext,new SyncgroupMemberInfo()))
SyncgroupSpec spec = sync(group.join(mVContext, new SyncgroupMemberInfo()));
members=sync(group.getMembers(mVContext))
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=sync(mLocalSB.db.writeBlob(mVContext,null))
BlobWriter writer = sync(mLocalSB.db.writeBlob(mVContext, null));
out=writer.stream(mVContext)
OutputStream out = writer.stream(mVContext);
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=sync(mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true)))
BatchDatabase batch = sync(mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true)));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(table.scan(mCancelableVContext,RowRange.range("","")))
VIterable<KeyValue> kvs = InputChannels.asIterable(
                        table.scan(mCancelableVContext, RowRange.range("", "")));
VIterable<KeyValue> kvs = InputChannels.asIterable(
                        table.scan(mCancelableVContext, RowRange.range("", "")));
@SuppressWarnings("unchecked")
                    E item = (E) VomUtil.decode(kv.getValue(), mClass);
watchStream=InputChannels.asIterable(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker))
VIterable<WatchChange> watchStream = InputChannels.asIterable(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker));
VIterable<WatchChange> watchStream = InputChannels.asIterable(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker));
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
dir=Utils.getLogDirectory()
File dir = Utils.getLogDirectory();
startTime=Utils.getTimeString()
String startTime = Utils.getTimeString();
deviceId=DeviceInfoFactory.getDeviceId(context)
String deviceId = DeviceInfoFactory.getDeviceId(context);
File logcatFile = new File(dir,
                String.format("%s-%s.log", getLogPrefix(appName, deviceId), startTime));
files=dir.listFiles(new FilenameFilter(){
  @Override public boolean accept(  File file,  String s){
    return s.startsWith(getLogPrefix(appName,deviceId));
  }
}
)
File[] files = dir.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(File file, String s) {
                return s.startsWith(getLogPrefix(appName, deviceId));
            }
        });
logFiles=Arrays.asList(files)
List<File> logFiles = Arrays.asList(files);
List<File> logFiles = Arrays.asList(files);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
oldPage=getPage()
int oldPage = getPage();
newPage=getPage()
int newPage = getPage();
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
Map<String, DeviceMeta> devicesCopy = null;
Map<String, DeviceMeta> devicesCopy = null;
Map<String, DeviceMeta> devicesCopy = null;
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
ds=cloneDeviceSet(mCurrentDS)
DeviceSet ds = cloneDeviceSet(mCurrentDS);
dm=getDeviceMeta(ds)
DeviceMeta dm = getDeviceMeta(ds);
linkedDevices=getLinkedDevices(ds)
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
ds=cloneDeviceSet(mCurrentDS)
DeviceSet ds = cloneDeviceSet(mCurrentDS);
dm=getDeviceMeta(ds)
DeviceMeta dm = getDeviceMeta(ds);
linkedDevices=getLinkedDevices(ds)
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=ds.getDevices()
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);
UserActionLogger result = instance;
dir=Utils.getLogDirectory()
File dir = Utils.getLogDirectory();
startTime=Utils.getTimeString()
String startTime = Utils.getTimeString();
File touchLogFile = new File(dir,
                String.format("reader-%s-touch-%s.log", mDeviceId, startTime));
File navigationLogFile = new File(dir,
                String.format("reader-%s-navigation-%s.log", mDeviceId, startTime));
IOException ex = null;
boolean hasWritePermission = ContextCompat.checkSelfPermission(context,
                Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;
boolean hasReadPermission = ContextCompat.checkSelfPermission(context,
                Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;
dir=Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS)
File dir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS);
SimpleDateFormat formatter = new SimpleDateFormat(
                "yyyyMMdd-HHmmss.SSS", Locale.getDefault());

 Generics pattern public class Utils was added at revision 989b3ac523cf0fa7f03e1dffb067ac38eb13d7f2


Diff of 989b3ac523cf0fa7f03e1dffb067ac38eb13d7f2 and a6ea64afc0d28b223714199ed564b5297e7cc34d:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 12
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 989b3ac523cf0fa7f03e1dffb067ac38eb13d7f2 to a6ea64afc0d28b223714199ed564b5297e7cc34d


****Parsing for addition at revision a6ea64afc0d28b223714199ed564b5297e7cc34d****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added BaseReaderApplication.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
Added UserActionLogger.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
dir=Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS)
File dir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS);
startTime=getTimeString()
String startTime = getTimeString();
File logcatFile = new File(dir,
                String.format("%s-%s.log", getLogPrefix(), startTime));
files=dir.listFiles(new FilenameFilter(){
  @Override public boolean accept(  File file,  String s){
    return s.startsWith(getLogPrefix());
  }
}
)
File[] files = dir.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(File file, String s) {
                return s.startsWith(getLogPrefix());
            }
        });
logFiles=Arrays.asList(files)
List<File> logFiles = Arrays.asList(files);
List<File> logFiles = Arrays.asList(files);
SimpleDateFormat formatter = new SimpleDateFormat(
                "yyyyMMdd-HHmmss.SSS", Locale.getDefault());
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
Options opts = new Options();
n=V.getNamespace(mVContext)
Namespace n = V.getNamespace(mVContext);
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=sync(group.join(mVContext,new SyncgroupMemberInfo()))
SyncgroupSpec spec = sync(group.join(mVContext, new SyncgroupMemberInfo()));
members=sync(group.getMembers(mVContext))
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=sync(mLocalSB.db.writeBlob(mVContext,null))
BlobWriter writer = sync(mLocalSB.db.writeBlob(mVContext, null));
out=writer.stream(mVContext)
OutputStream out = writer.stream(mVContext);
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=sync(mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true)))
BatchDatabase batch = sync(mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true)));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(table.scan(mCancelableVContext,RowRange.range("","")))
VIterable<KeyValue> kvs = InputChannels.asIterable(
                        table.scan(mCancelableVContext, RowRange.range("", "")));
VIterable<KeyValue> kvs = InputChannels.asIterable(
                        table.scan(mCancelableVContext, RowRange.range("", "")));
@SuppressWarnings("unchecked")
                    E item = (E) VomUtil.decode(kv.getValue(), mClass);
watchStream=InputChannels.asIterable(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker))
VIterable<WatchChange> watchStream = InputChannels.asIterable(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker));
VIterable<WatchChange> watchStream = InputChannels.asIterable(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker));
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
oldPage=getPage()
int oldPage = getPage();
newPage=getPage()
int newPage = getPage();
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
Map<String, DeviceMeta> devicesCopy = null;
Map<String, DeviceMeta> devicesCopy = null;
Map<String, DeviceMeta> devicesCopy = null;
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
ds=cloneDeviceSet(mCurrentDS)
DeviceSet ds = cloneDeviceSet(mCurrentDS);
dm=getDeviceMeta(ds)
DeviceMeta dm = getDeviceMeta(ds);
linkedDevices=getLinkedDevices(ds)
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
ds=cloneDeviceSet(mCurrentDS)
DeviceSet ds = cloneDeviceSet(mCurrentDS);
dm=getDeviceMeta(ds)
DeviceMeta dm = getDeviceMeta(ds);
linkedDevices=getLinkedDevices(ds)
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=ds.getDevices()
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);
UserActionLogger result = instance;
dir=Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS)
File dir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS);
SimpleDateFormat formatter = new SimpleDateFormat(
                "yyyyMMdd-HHmmss.SSS", Locale.getDefault());
startTime=formatter.format(new Date())
String startTime = formatter.format(new Date());
File touchLogFile = new File(dir,
                String.format("reader-%s-touch-%s.log", mDeviceId, startTime));
File navigationLogFile = new File(dir,
                String.format("reader-%s-navigation-%s.log", mDeviceId, startTime));
IOException ex = null;

Diff of a6ea64afc0d28b223714199ed564b5297e7cc34d and 4bb2135674f213e244bbb7774d4f794e92e2f48c:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 12
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 0
	--> recency = null
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision a6ea64afc0d28b223714199ed564b5297e7cc34d to 4bb2135674f213e244bbb7774d4f794e92e2f48c


****Parsing for addition at revision 4bb2135674f213e244bbb7774d4f794e92e2f48c****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added BaseReaderApplication.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
Added UserActionLogger.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
dir=Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS)
File dir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS);
startTime=getTimeString()
String startTime = getTimeString();
File logcatFile = new File(dir,
                String.format("%s-%s.log", getLogPrefix(), startTime));
files=dir.listFiles(new FilenameFilter(){
  @Override public boolean accept(  File file,  String s){
    return s.startsWith(getLogPrefix());
  }
}
)
File[] files = dir.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(File file, String s) {
                return s.startsWith(getLogPrefix());
            }
        });
logFiles=Arrays.asList(files)
List<File> logFiles = Arrays.asList(files);
List<File> logFiles = Arrays.asList(files);
SimpleDateFormat formatter = new SimpleDateFormat(
                "yyyyMMdd-HHmmss.SSS", Locale.getDefault());

 Generics pattern List<File> logFiles = Arrays.asList(files); was added at revision 4bb2135674f213e244bbb7774d4f794e92e2f48c

DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
Options opts = new Options();
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=sync(group.join(mVContext,new SyncgroupMemberInfo()))
SyncgroupSpec spec = sync(group.join(mVContext, new SyncgroupMemberInfo()));
members=sync(group.getMembers(mVContext))
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=sync(mLocalSB.db.writeBlob(mVContext,null))
BlobWriter writer = sync(mLocalSB.db.writeBlob(mVContext, null));
out=writer.stream(mVContext)
OutputStream out = writer.stream(mVContext);
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=sync(mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true)))
BatchDatabase batch = sync(mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true)));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(table.scan(mCancelableVContext,RowRange.range("","")))
VIterable<KeyValue> kvs = InputChannels.asIterable(
                        table.scan(mCancelableVContext, RowRange.range("", "")));
VIterable<KeyValue> kvs = InputChannels.asIterable(
                        table.scan(mCancelableVContext, RowRange.range("", "")));
@SuppressWarnings("unchecked")
                    E item = (E) VomUtil.decode(kv.getValue(), mClass);
watchStream=InputChannels.asIterable(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker))
VIterable<WatchChange> watchStream = InputChannels.asIterable(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker));
VIterable<WatchChange> watchStream = InputChannels.asIterable(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker));
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
oldPage=getPage()
int oldPage = getPage();
newPage=getPage()
int newPage = getPage();
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
Map<String, DeviceMeta> devicesCopy = null;
Map<String, DeviceMeta> devicesCopy = null;
Map<String, DeviceMeta> devicesCopy = null;
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
ds=cloneDeviceSet(mCurrentDS)
DeviceSet ds = cloneDeviceSet(mCurrentDS);
dm=getDeviceMeta(ds)
DeviceMeta dm = getDeviceMeta(ds);
linkedDevices=getLinkedDevices(ds)
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
ds=cloneDeviceSet(mCurrentDS)
DeviceSet ds = cloneDeviceSet(mCurrentDS);
dm=getDeviceMeta(ds)
DeviceMeta dm = getDeviceMeta(ds);
linkedDevices=getLinkedDevices(ds)
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=ds.getDevices()
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);
UserActionLogger result = instance;
dir=Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS)
File dir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS);
SimpleDateFormat formatter = new SimpleDateFormat(
                "yyyyMMdd-HHmmss.SSS", Locale.getDefault());
startTime=formatter.format(new Date())
String startTime = formatter.format(new Date());
File touchLogFile = new File(dir,
                String.format("reader-%s-touch-%s.log", mDeviceId, startTime));
File navigationLogFile = new File(dir,
                String.format("reader-%s-navigation-%s.log", mDeviceId, startTime));
IOException ex = null;

Diff of 4bb2135674f213e244bbb7774d4f794e92e2f48c and cf68f83d8957ca2e96463d7a9b71ec13809402a3:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 12
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 1
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 4bb2135674f213e244bbb7774d4f794e92e2f48c to cf68f83d8957ca2e96463d7a9b71ec13809402a3


****Parsing for addition at revision cf68f83d8957ca2e96463d7a9b71ec13809402a3****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added BaseReaderApplication.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
Added UserActionLogger.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
dir=Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS)
File dir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS);
startTime=getTimeString()
String startTime = getTimeString();
File logcatFile = new File(dir,
                String.format("%s-%s.log", getLogPrefix(), startTime));
logFiles=Arrays.asList(dir.listFiles(new FilenameFilter(){
  @Override public boolean accept(  File file,  String s){
    return s.startsWith(getLogPrefix());
  }
}
))
List<File> logFiles = Arrays.asList(dir.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(File file, String s) {
                return s.startsWith(getLogPrefix());
            }
        }));
SimpleDateFormat formatter = new SimpleDateFormat(
                "yyyyMMdd-HHmmss.SSS", Locale.getDefault());

 Generics pattern public abstract class BaseReaderApplication was added at revision cf68f83d8957ca2e96463d7a9b71ec13809402a3

DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
Options opts = new Options();
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=sync(group.join(mVContext,new SyncgroupMemberInfo()))
SyncgroupSpec spec = sync(group.join(mVContext, new SyncgroupMemberInfo()));
members=sync(group.getMembers(mVContext))
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=sync(mLocalSB.db.writeBlob(mVContext,null))
BlobWriter writer = sync(mLocalSB.db.writeBlob(mVContext, null));
out=writer.stream(mVContext)
OutputStream out = writer.stream(mVContext);
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=sync(mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true)))
BatchDatabase batch = sync(mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true)));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(table.scan(mCancelableVContext,RowRange.range("","")))
VIterable<KeyValue> kvs = InputChannels.asIterable(
                        table.scan(mCancelableVContext, RowRange.range("", "")));
VIterable<KeyValue> kvs = InputChannels.asIterable(
                        table.scan(mCancelableVContext, RowRange.range("", "")));
@SuppressWarnings("unchecked")
                    E item = (E) VomUtil.decode(kv.getValue(), mClass);
watchStream=InputChannels.asIterable(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker))
VIterable<WatchChange> watchStream = InputChannels.asIterable(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker));
VIterable<WatchChange> watchStream = InputChannels.asIterable(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker));
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
oldPage=getPage()
int oldPage = getPage();
newPage=getPage()
int newPage = getPage();
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
Map<String, DeviceMeta> devicesCopy = null;
Map<String, DeviceMeta> devicesCopy = null;
Map<String, DeviceMeta> devicesCopy = null;
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
ds=cloneDeviceSet(mCurrentDS)
DeviceSet ds = cloneDeviceSet(mCurrentDS);
dm=getDeviceMeta(ds)
DeviceMeta dm = getDeviceMeta(ds);
linkedDevices=getLinkedDevices(ds)
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
ds=cloneDeviceSet(mCurrentDS)
DeviceSet ds = cloneDeviceSet(mCurrentDS);
dm=getDeviceMeta(ds)
DeviceMeta dm = getDeviceMeta(ds);
linkedDevices=getLinkedDevices(ds)
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=ds.getDevices()
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);
UserActionLogger result = instance;
dir=Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS)
File dir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS);
SimpleDateFormat formatter = new SimpleDateFormat(
                "yyyyMMdd-HHmmss.SSS", Locale.getDefault());
startTime=formatter.format(new Date())
String startTime = formatter.format(new Date());
File touchLogFile = new File(dir,
                String.format("reader-%s-touch-%s.log", mDeviceId, startTime));
File navigationLogFile = new File(dir,
                String.format("reader-%s-navigation-%s.log", mDeviceId, startTime));
IOException ex = null;

Diff of cf68f83d8957ca2e96463d7a9b71ec13809402a3 and 29f98bbe5a52acc453cb16bc4ce2141bb4932b8c:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 17
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 1
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision cf68f83d8957ca2e96463d7a9b71ec13809402a3 to 29f98bbe5a52acc453cb16bc4ce2141bb4932b8c


****Parsing for addition at revision 29f98bbe5a52acc453cb16bc4ce2141bb4932b8c****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
Added UserActionLogger.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=sync(group.join(mVContext,new SyncgroupMemberInfo()))
SyncgroupSpec spec = sync(group.join(mVContext, new SyncgroupMemberInfo()));
members=sync(group.getMembers(mVContext))
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=sync(mLocalSB.db.writeBlob(mVContext,null))
BlobWriter writer = sync(mLocalSB.db.writeBlob(mVContext, null));
out=writer.stream(mVContext)
OutputStream out = writer.stream(mVContext);
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=sync(mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true)))
BatchDatabase batch = sync(mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true)));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(table.scan(mCancelableVContext,RowRange.range("","")))
VIterable<KeyValue> kvs = InputChannels.asIterable(
                        table.scan(mCancelableVContext, RowRange.range("", "")));
VIterable<KeyValue> kvs = InputChannels.asIterable(
                        table.scan(mCancelableVContext, RowRange.range("", "")));
@SuppressWarnings("unchecked")
                    E item = (E) VomUtil.decode(kv.getValue(), mClass);
watchStream=InputChannels.asIterable(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker))
VIterable<WatchChange> watchStream = InputChannels.asIterable(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker));
VIterable<WatchChange> watchStream = InputChannels.asIterable(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker));
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
oldPage=getPage()
int oldPage = getPage();
newPage=getPage()
int newPage = getPage();
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
Map<String, DeviceMeta> devicesCopy = null;
Map<String, DeviceMeta> devicesCopy = null;
Map<String, DeviceMeta> devicesCopy = null;
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
ds=cloneDeviceSet(mCurrentDS)
DeviceSet ds = cloneDeviceSet(mCurrentDS);
dm=getDeviceMeta(ds)
DeviceMeta dm = getDeviceMeta(ds);
linkedDevices=getLinkedDevices(ds)
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
ds=cloneDeviceSet(mCurrentDS)
DeviceSet ds = cloneDeviceSet(mCurrentDS);
dm=getDeviceMeta(ds)
DeviceMeta dm = getDeviceMeta(ds);
linkedDevices=getLinkedDevices(ds)
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=ds.getDevices()
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);
UserActionLogger result = instance;
dir=Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS)
File dir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS);
SimpleDateFormat formatter = new SimpleDateFormat(
                "yyyyMMdd-HHmmss.SSS", Locale.getDefault());
startTime=formatter.format(new Date())
String startTime = formatter.format(new Date());
File touchLogFile = new File(dir,
                String.format("reader-%s-touch-%s.log", mDeviceId, startTime));
File navigationLogFile = new File(dir,
                String.format("reader-%s-navigation-%s.log", mDeviceId, startTime));
IOException ex = null;

Diff of 29f98bbe5a52acc453cb16bc4ce2141bb4932b8c and 39460e3a6d126b013fc84d0ffa5bc013f196acdc:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 17
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 1
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 29f98bbe5a52acc453cb16bc4ce2141bb4932b8c to 39460e3a6d126b013fc84d0ffa5bc013f196acdc


****Parsing for addition at revision 39460e3a6d126b013fc84d0ffa5bc013f196acdc****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
Added UserActionLogger.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=sync(group.join(mVContext,new SyncgroupMemberInfo()))
SyncgroupSpec spec = sync(group.join(mVContext, new SyncgroupMemberInfo()));
members=sync(group.getMembers(mVContext))
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=sync(mLocalSB.db.writeBlob(mVContext,null))
BlobWriter writer = sync(mLocalSB.db.writeBlob(mVContext, null));
out=writer.stream(mVContext)
OutputStream out = writer.stream(mVContext);
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=sync(mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true)))
BatchDatabase batch = sync(mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true)));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(table.scan(mCancelableVContext,RowRange.range("","")))
VIterable<KeyValue> kvs = InputChannels.asIterable(
                        table.scan(mCancelableVContext, RowRange.range("", "")));
VIterable<KeyValue> kvs = InputChannels.asIterable(
                        table.scan(mCancelableVContext, RowRange.range("", "")));
@SuppressWarnings("unchecked")
                    E item = (E) VomUtil.decode(kv.getValue(), mClass);
watchStream=InputChannels.asIterable(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker))
VIterable<WatchChange> watchStream = InputChannels.asIterable(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker));
VIterable<WatchChange> watchStream = InputChannels.asIterable(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker));
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
oldPage=getPage()
int oldPage = getPage();
newPage=getPage()
int newPage = getPage();
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
Map<String, DeviceMeta> devicesCopy = null;
Map<String, DeviceMeta> devicesCopy = null;
Map<String, DeviceMeta> devicesCopy = null;
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
ds=cloneDeviceSet(mCurrentDS)
DeviceSet ds = cloneDeviceSet(mCurrentDS);
dm=getDeviceMeta(ds)
DeviceMeta dm = getDeviceMeta(ds);
linkedDevices=getLinkedDevices(ds)
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
ds=cloneDeviceSet(mCurrentDS)
DeviceSet ds = cloneDeviceSet(mCurrentDS);
dm=getDeviceMeta(ds)
DeviceMeta dm = getDeviceMeta(ds);
linkedDevices=getLinkedDevices(ds)
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=ds.getDevices()
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);
UserActionLogger result = instance;
dir=Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS)
File dir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS);
SimpleDateFormat formatter = new SimpleDateFormat(
                "yyyyMMdd-HHmmss.SSS", Locale.getDefault());
startTime=formatter.format(new Date())
String startTime = formatter.format(new Date());
File touchLogFile = new File(dir,
                String.format("reader-%s-touch-%s.log", mDeviceId, startTime));
File navigationLogFile = new File(dir,
                String.format("reader-%s-navigation-%s.log", mDeviceId, startTime));
IOException ex = null;

Diff of 39460e3a6d126b013fc84d0ffa5bc013f196acdc and d0e99192393d476e434864961bf8ff43059f8787:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 17
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 1
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 39460e3a6d126b013fc84d0ffa5bc013f196acdc to d0e99192393d476e434864961bf8ff43059f8787


****Parsing for addition at revision d0e99192393d476e434864961bf8ff43059f8787****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
Added UserActionLogger.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=sync(group.join(mVContext,new SyncgroupMemberInfo()))
SyncgroupSpec spec = sync(group.join(mVContext, new SyncgroupMemberInfo()));
members=sync(group.getMembers(mVContext))
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=sync(mLocalSB.db.writeBlob(mVContext,null))
BlobWriter writer = sync(mLocalSB.db.writeBlob(mVContext, null));
out=sync(writer.stream(mVContext))
OutputStream out = sync(writer.stream(mVContext));
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=sync(mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true)))
BatchDatabase batch = sync(mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true)));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(sync(table.scan(mCancelableVContext,RowRange.range("",""))))
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
@SuppressWarnings("unchecked")
                    E item = (E) VomUtil.decode(kv.getValue(), mClass);
watchStream=InputChannels.asIterable(sync(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)))
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
oldPage=getPage()
int oldPage = getPage();
newPage=getPage()
int newPage = getPage();
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
Map<String, DeviceMeta> devicesCopy = null;
Map<String, DeviceMeta> devicesCopy = null;
Map<String, DeviceMeta> devicesCopy = null;
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
ds=cloneDeviceSet(mCurrentDS)
DeviceSet ds = cloneDeviceSet(mCurrentDS);
dm=getDeviceMeta(ds)
DeviceMeta dm = getDeviceMeta(ds);
linkedDevices=getLinkedDevices(ds)
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
ds=cloneDeviceSet(mCurrentDS)
DeviceSet ds = cloneDeviceSet(mCurrentDS);
dm=getDeviceMeta(ds)
DeviceMeta dm = getDeviceMeta(ds);
linkedDevices=getLinkedDevices(ds)
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=ds.getDevices()
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);
UserActionLogger result = instance;
dir=Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS)
File dir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS);
SimpleDateFormat formatter = new SimpleDateFormat(
                "yyyyMMdd-HHmmss.SSS", Locale.getDefault());
startTime=formatter.format(new Date())
String startTime = formatter.format(new Date());
File touchLogFile = new File(dir,
                String.format("reader-%s-touch-%s.log", mDeviceId, startTime));
File navigationLogFile = new File(dir,
                String.format("reader-%s-navigation-%s.log", mDeviceId, startTime));
IOException ex = null;

Diff of d0e99192393d476e434864961bf8ff43059f8787 and 9f83042941e06c6656aca878a3a9a3217f4b3ff8:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 17
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 1
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision d0e99192393d476e434864961bf8ff43059f8787 to 9f83042941e06c6656aca878a3a9a3217f4b3ff8


****Parsing for addition at revision 9f83042941e06c6656aca878a3a9a3217f4b3ff8****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
Added UserActionLogger.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=sync(group.join(mVContext,new SyncgroupMemberInfo()))
SyncgroupSpec spec = sync(group.join(mVContext, new SyncgroupMemberInfo()));
members=sync(group.getMembers(mVContext))
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=sync(mLocalSB.db.writeBlob(mVContext,null))
BlobWriter writer = sync(mLocalSB.db.writeBlob(mVContext, null));
out=sync(writer.stream(mVContext))
OutputStream out = sync(writer.stream(mVContext));
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=sync(mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true)))
BatchDatabase batch = sync(mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true)));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(sync(table.scan(mCancelableVContext,RowRange.range("",""))))
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
@SuppressWarnings("unchecked")
                    E item = (E) VomUtil.decode(kv.getValue(), mClass);
watchStream=InputChannels.asIterable(sync(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)))
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
oldPage=getPage()
int oldPage = getPage();
newPage=getPage()
int newPage = getPage();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
Map<String, DeviceMeta> devicesCopy = null;
Map<String, DeviceMeta> devicesCopy = null;
Map<String, DeviceMeta> devicesCopy = null;
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
ds=cloneDeviceSet(mCurrentDS)
DeviceSet ds = cloneDeviceSet(mCurrentDS);
dm=getDeviceMeta(ds)
DeviceMeta dm = getDeviceMeta(ds);
linkedDevices=getLinkedDevices(ds)
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
ds=cloneDeviceSet(mCurrentDS)
DeviceSet ds = cloneDeviceSet(mCurrentDS);
dm=getDeviceMeta(ds)
DeviceMeta dm = getDeviceMeta(ds);
linkedDevices=getLinkedDevices(ds)
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=ds.getDevices()
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);
UserActionLogger result = instance;
dir=Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS)
File dir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS);
SimpleDateFormat formatter = new SimpleDateFormat(
                "yyyyMMdd-HHmmss.SSS", Locale.getDefault());
startTime=formatter.format(new Date())
String startTime = formatter.format(new Date());
File touchLogFile = new File(dir,
                String.format("reader-%s-touch-%s.log", mDeviceId, startTime));
File navigationLogFile = new File(dir,
                String.format("reader-%s-navigation-%s.log", mDeviceId, startTime));
IOException ex = null;

Diff of 9f83042941e06c6656aca878a3a9a3217f4b3ff8 and 98c569920577c54c1bd4ac60e1b9f70ee07b502e:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 17
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 1
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 9f83042941e06c6656aca878a3a9a3217f4b3ff8 to 98c569920577c54c1bd4ac60e1b9f70ee07b502e


****Parsing for addition at revision 98c569920577c54c1bd4ac60e1b9f70ee07b502e****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
Added UserActionLogger.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=sync(group.join(mVContext,new SyncgroupMemberInfo()))
SyncgroupSpec spec = sync(group.join(mVContext, new SyncgroupMemberInfo()));
members=sync(group.getMembers(mVContext))
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=sync(mLocalSB.db.writeBlob(mVContext,null))
BlobWriter writer = sync(mLocalSB.db.writeBlob(mVContext, null));
out=sync(writer.stream(mVContext))
OutputStream out = sync(writer.stream(mVContext));
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=sync(mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true)))
BatchDatabase batch = sync(mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true)));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(sync(table.scan(mCancelableVContext,RowRange.range("",""))))
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
@SuppressWarnings("unchecked")
                    E item = (E) VomUtil.decode(kv.getValue(), mClass);
watchStream=InputChannels.asIterable(sync(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)))
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
oldPage=getPage()
int oldPage = getPage();
newPage=getPage()
int newPage = getPage();
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
Map<String, DeviceMeta> devicesCopy = null;
Map<String, DeviceMeta> devicesCopy = null;
Map<String, DeviceMeta> devicesCopy = null;
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
ds=cloneDeviceSet(mCurrentDS)
DeviceSet ds = cloneDeviceSet(mCurrentDS);
dm=getDeviceMeta(ds)
DeviceMeta dm = getDeviceMeta(ds);
linkedDevices=getLinkedDevices(ds)
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
ds=cloneDeviceSet(mCurrentDS)
DeviceSet ds = cloneDeviceSet(mCurrentDS);
dm=getDeviceMeta(ds)
DeviceMeta dm = getDeviceMeta(ds);
linkedDevices=getLinkedDevices(ds)
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=ds.getDevices()
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);
UserActionLogger result = instance;
dir=Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS)
File dir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS);
SimpleDateFormat formatter = new SimpleDateFormat(
                "yyyyMMdd-HHmmss.SSS", Locale.getDefault());
startTime=formatter.format(new Date())
String startTime = formatter.format(new Date());
File touchLogFile = new File(dir,
                String.format("reader-%s-touch-%s.log", mDeviceId, startTime));
File navigationLogFile = new File(dir,
                String.format("reader-%s-navigation-%s.log", mDeviceId, startTime));
IOException ex = null;

Diff of 98c569920577c54c1bd4ac60e1b9f70ee07b502e and d5421fe77dfb11d00e18c71bb67a774d65bdc37c:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 18
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 1
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 98c569920577c54c1bd4ac60e1b9f70ee07b502e to d5421fe77dfb11d00e18c71bb67a774d65bdc37c


****Parsing for addition at revision d5421fe77dfb11d00e18c71bb67a774d65bdc37c****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
Added UserActionLogger.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=sync(group.join(mVContext,new SyncgroupMemberInfo()))
SyncgroupSpec spec = sync(group.join(mVContext, new SyncgroupMemberInfo()));
members=sync(group.getMembers(mVContext))
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=sync(mLocalSB.db.writeBlob(mVContext,null))
BlobWriter writer = sync(mLocalSB.db.writeBlob(mVContext, null));
out=sync(writer.stream(mVContext))
OutputStream out = sync(writer.stream(mVContext));
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=sync(mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true)))
BatchDatabase batch = sync(mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true)));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(sync(table.scan(mCancelableVContext,RowRange.range("",""))))
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
@SuppressWarnings("unchecked")
                    E item = (E) VomUtil.decode(kv.getValue(), mClass);
watchStream=InputChannels.asIterable(sync(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)))
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
oldPage=getPage()
int oldPage = getPage();
newPage=getPage()
int newPage = getPage();
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
Map<String, DeviceMeta> devicesCopy = null;
Map<String, DeviceMeta> devicesCopy = null;
Map<String, DeviceMeta> devicesCopy = null;
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
ds=cloneDeviceSet(mCurrentDS)
DeviceSet ds = cloneDeviceSet(mCurrentDS);
dm=getDeviceMeta(ds)
DeviceMeta dm = getDeviceMeta(ds);
linkedDevices=getLinkedDevices(ds)
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
ds=cloneDeviceSet(mCurrentDS)
DeviceSet ds = cloneDeviceSet(mCurrentDS);
dm=getDeviceMeta(ds)
DeviceMeta dm = getDeviceMeta(ds);
linkedDevices=getLinkedDevices(ds)
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=ds.getDevices()
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);
UserActionLogger result = instance;
dir=Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS)
File dir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS);
SimpleDateFormat formatter = new SimpleDateFormat(
                "yyyyMMdd-HHmmss.SSS", Locale.getDefault());
startTime=formatter.format(new Date())
String startTime = formatter.format(new Date());
File touchLogFile = new File(dir,
                String.format("reader-%s-touch-%s.log", mDeviceId, startTime));
File navigationLogFile = new File(dir,
                String.format("reader-%s-navigation-%s.log", mDeviceId, startTime));
IOException ex = null;

Diff of d5421fe77dfb11d00e18c71bb67a774d65bdc37c and 0807bed7847c8fd6d94210fd5c9cc520d323db69:
	--> Added type argument methods = 0
	--> recency = null
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 18
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 0
	--> recency = null
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 1
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision d5421fe77dfb11d00e18c71bb67a774d65bdc37c to 0807bed7847c8fd6d94210fd5c9cc520d323db69


****Parsing for addition at revision 0807bed7847c8fd6d94210fd5c9cc520d323db69****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
Added UserActionLogger.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=sync(group.join(mVContext,new SyncgroupMemberInfo()))
SyncgroupSpec spec = sync(group.join(mVContext, new SyncgroupMemberInfo()));
members=sync(group.getMembers(mVContext))
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=sync(mLocalSB.db.writeBlob(mVContext,null))
BlobWriter writer = sync(mLocalSB.db.writeBlob(mVContext, null));
out=sync(writer.stream(mVContext))
OutputStream out = sync(writer.stream(mVContext));
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=sync(mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true)))
BatchDatabase batch = sync(mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true)));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(sync(table.scan(mCancelableVContext,RowRange.range("",""))))
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
@SuppressWarnings("unchecked")
                    E item = (E) VomUtil.decode(kv.getValue(), mClass);
watchStream=InputChannels.asIterable(sync(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)))
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
oldPage=getPage()
int oldPage = getPage();
newPage=getPage()
int newPage = getPage();
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
Map<String, DeviceMeta> devicesCopy = null;
Map<String, DeviceMeta> devicesCopy = null;
Map<String, DeviceMeta> devicesCopy = null;
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
ds=cloneDeviceSet(mCurrentDS)
DeviceSet ds = cloneDeviceSet(mCurrentDS);
dm=getDeviceMeta(ds)
DeviceMeta dm = getDeviceMeta(ds);
linkedDevices=getLinkedDevices(ds)
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
ds=cloneDeviceSet(mCurrentDS)
DeviceSet ds = cloneDeviceSet(mCurrentDS);
dm=getDeviceMeta(ds)
DeviceMeta dm = getDeviceMeta(ds);
linkedDevices=getLinkedDevices(ds)
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
Map<String, DeviceMeta> linkedDevices = getLinkedDevices(ds);
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=ds.getDevices()
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> devices = ds.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);

 Generics pattern Map<String, DeviceMeta> devicesCopy = null; was added at revision 0807bed7847c8fd6d94210fd5c9cc520d323db69


 Generics pattern private Map<String, DeviceMeta> getLinkedDevices(DeviceSet ds) was added at revision 0807bed7847c8fd6d94210fd5c9cc520d323db69


 Generics pattern Map<String, DeviceMeta> devices = ds.getDevices(); was added at revision 0807bed7847c8fd6d94210fd5c9cc520d323db69

settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);
UserActionLogger result = instance;
dir=Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS)
File dir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS);
SimpleDateFormat formatter = new SimpleDateFormat(
                "yyyyMMdd-HHmmss.SSS", Locale.getDefault());
startTime=formatter.format(new Date())
String startTime = formatter.format(new Date());
File touchLogFile = new File(dir,
                String.format("reader-%s-touch-%s.log", mDeviceId, startTime));
File navigationLogFile = new File(dir,
                String.format("reader-%s-navigation-%s.log", mDeviceId, startTime));
IOException ex = null;

Diff of 0807bed7847c8fd6d94210fd5c9cc520d323db69 and d168284fbf967dd81c365d1e3927c6824bd69160:
	--> Added type argument methods = 1
	--> recency = months
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 19
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 3
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 13
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 0807bed7847c8fd6d94210fd5c9cc520d323db69 to d168284fbf967dd81c365d1e3927c6824bd69160


****Parsing for addition at revision d168284fbf967dd81c365d1e3927c6824bd69160****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
Added UserActionLogger.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=sync(group.join(mVContext,new SyncgroupMemberInfo()))
SyncgroupSpec spec = sync(group.join(mVContext, new SyncgroupMemberInfo()));
members=sync(group.getMembers(mVContext))
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=sync(mLocalSB.db.writeBlob(mVContext,null))
BlobWriter writer = sync(mLocalSB.db.writeBlob(mVContext, null));
out=sync(writer.stream(mVContext))
OutputStream out = sync(writer.stream(mVContext));
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=sync(mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true)))
BatchDatabase batch = sync(mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true)));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(sync(table.scan(mCancelableVContext,RowRange.range("",""))))
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
@SuppressWarnings("unchecked")
                    E item = (E) VomUtil.decode(kv.getValue(), mClass);
watchStream=InputChannels.asIterable(sync(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)))
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);
UserActionLogger result = instance;
directory=Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS)
File directory = Environment.getExternalStoragePublicDirectory(
                Environment.DIRECTORY_DOCUMENTS);
SimpleDateFormat formatter = new SimpleDateFormat(
                "yyyyMMdd-HHmmss.SSS", Locale.getDefault());
startTime=formatter.format(new Date())
String startTime = formatter.format(new Date());
basename=String.format("reader-%s.log",startTime)
String basename = String.format("reader-%s.log", startTime);
File file = new File(directory, basename);

Diff of d168284fbf967dd81c365d1e3927c6824bd69160 and aff14aebda6a194a78aff261953a3ffc710faa1c:
	--> Added type argument methods = 1
	--> recency = months
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 19
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 3
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 13
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision d168284fbf967dd81c365d1e3927c6824bd69160 to aff14aebda6a194a78aff261953a3ffc710faa1c


****Parsing for addition at revision aff14aebda6a194a78aff261953a3ffc710faa1c****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
Added UserActionLogger.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=sync(group.join(mVContext,new SyncgroupMemberInfo()))
SyncgroupSpec spec = sync(group.join(mVContext, new SyncgroupMemberInfo()));
members=sync(group.getMembers(mVContext))
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=sync(mLocalSB.db.writeBlob(mVContext,null))
BlobWriter writer = sync(mLocalSB.db.writeBlob(mVContext, null));
out=sync(writer.stream(mVContext))
OutputStream out = sync(writer.stream(mVContext));
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=sync(mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true)))
BatchDatabase batch = sync(mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true)));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(sync(table.scan(mCancelableVContext,RowRange.range("",""))))
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
@SuppressWarnings("unchecked")
                    E item = (E) VomUtil.decode(kv.getValue(), mClass);
watchStream=InputChannels.asIterable(sync(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)))
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);
UserActionLogger result = instance;
directory=Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS)
File directory = Environment.getExternalStoragePublicDirectory(
                Environment.DIRECTORY_DOCUMENTS);
SimpleDateFormat formatter = new SimpleDateFormat(
                "yyyyMMdd-HHmmss.SSS", Locale.getDefault());
startTime=formatter.format(new Date())
String startTime = formatter.format(new Date());
basename=String.format("reader-%s.log",startTime)
String basename = String.format("reader-%s.log", startTime);
File file = new File(directory, basename);

Diff of aff14aebda6a194a78aff261953a3ffc710faa1c and 3b600af1d0ad1f4ce5d8cd680527eabc324e484b:
	--> Added type argument methods = 1
	--> recency = months
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 19
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 3
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 13
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision aff14aebda6a194a78aff261953a3ffc710faa1c to 3b600af1d0ad1f4ce5d8cd680527eabc324e484b

************Analysis complete************
Added generics to repository vanadium/reader = 18

YoungSeok Yoon added type argument method count = 1
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 19
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 3
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 13
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 18

YoungSeok Yoon added type argument method count = 1
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 19
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 3
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 13
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null

****Parsing for addition at revision d7efe0da64f12b8768a39875cf2c57b59782f107****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=sync(group.join(mVContext,new SyncgroupMemberInfo()))
SyncgroupSpec spec = sync(group.join(mVContext, new SyncgroupMemberInfo()));
members=sync(group.getMembers(mVContext))
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext));
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=sync(mLocalSB.db.writeBlob(mVContext,null))
BlobWriter writer = sync(mLocalSB.db.writeBlob(mVContext, null));
out=sync(writer.stream(mVContext))
OutputStream out = sync(writer.stream(mVContext));
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=sync(mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true)))
BatchDatabase batch = sync(mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true)));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(sync(table.scan(mCancelableVContext,RowRange.range("",""))))
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
@SuppressWarnings("unchecked")
                    E item = (E) VomUtil.decode(kv.getValue(), mClass);
watchStream=InputChannels.asIterable(sync(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)))
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);

 Generics pattern Map<String, SyncgroupMemberInfo> members = sync(group.getMembers(mVContext)); was added at revision d7efe0da64f12b8768a39875cf2c57b59782f107

RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
directory=context.getFilesDir()
File directory = context.getFilesDir();
basename=String.format("reader-%s.log",now())
String basename = String.format("reader-%s.log", now());
File file = new File(directory, basename);
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);

Diff of d7efe0da64f12b8768a39875cf2c57b59782f107 and a80ad563abfe55e8fb008ab4770e0e94a31fa602:
	--> Added type argument methods = 1
	--> recency = months
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 19
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 3
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 15
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision d7efe0da64f12b8768a39875cf2c57b59782f107 to a80ad563abfe55e8fb008ab4770e0e94a31fa602

************Analysis complete************
Added generics to repository vanadium/reader = 19

YoungSeok Yoon added type argument method count = 1
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 19
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 3
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 15
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 19

YoungSeok Yoon added type argument method count = 1
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 19
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 3
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 15
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 19

YoungSeok Yoon added type argument method count = 1
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 19
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 3
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 15
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null

****Parsing for addition at revision 239099db1bab2c82138f068239e24ebd7342ea47****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=group.join(mVContext,new SyncgroupMemberInfo())
SyncgroupSpec spec = group.join(mVContext, new SyncgroupMemberInfo());
members=group.getMembers(mVContext)
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=mLocalSB.db.writeBlob(mVContext,null)
BlobWriter writer = mLocalSB.db.writeBlob(mVContext, null);
out=writer.stream(mVContext)
OutputStream out = writer.stream(mVContext);
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true))
BatchDatabase batch = mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(sync(table.scan(mCancelableVContext,RowRange.range("",""))))
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
watchStream=InputChannels.asIterable(sync(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)))
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
watchStream=mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
directory=context.getFilesDir()
File directory = context.getFilesDir();
basename=String.format("reader-%s.log",now())
String basename = String.format("reader-%s.log", now());
File file = new File(directory, basename);
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);

Diff of 239099db1bab2c82138f068239e24ebd7342ea47 and 714297b4a0b61e893eb706f0bdf21e31b3ee8b43:
	--> Added type argument methods = 1
	--> recency = months
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 21
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 3
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 15
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 239099db1bab2c82138f068239e24ebd7342ea47 to 714297b4a0b61e893eb706f0bdf21e31b3ee8b43

************Analysis complete************
Added generics to repository vanadium/reader = 19

YoungSeok Yoon added type argument method count = 1
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 21
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 3
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 15
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 19

YoungSeok Yoon added type argument method count = 1
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 21
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 3
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 15
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null

****Parsing for addition at revision 5a4a417b48e301f442253171859f1d2e9bdd3ad3****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=group.join(mVContext,new SyncgroupMemberInfo())
SyncgroupSpec spec = group.join(mVContext, new SyncgroupMemberInfo());
members=group.getMembers(mVContext)
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=mLocalSB.db.writeBlob(mVContext,null)
BlobWriter writer = mLocalSB.db.writeBlob(mVContext, null);
out=writer.stream(mVContext)
OutputStream out = writer.stream(mVContext);
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true))
BatchDatabase batch = mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(sync(table.scan(mCancelableVContext,RowRange.range("",""))))
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
watchStream=InputChannels.asIterable(sync(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)))
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
watchStream=mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
directory=context.getFilesDir()
File directory = context.getFilesDir();
basename=String.format("reader-%s.log",now())
String basename = String.format("reader-%s.log", now());
File file = new File(directory, basename);
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);

Diff of 5a4a417b48e301f442253171859f1d2e9bdd3ad3 and 1a581f0182a03b7d8fb097657f261ec130f3d76e:
	--> Added type argument methods = 1
	--> recency = months
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 21
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 3
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 15
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 5a4a417b48e301f442253171859f1d2e9bdd3ad3 to 1a581f0182a03b7d8fb097657f261ec130f3d76e


****Parsing for addition at revision 1a581f0182a03b7d8fb097657f261ec130f3d76e****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=group.join(mVContext,new SyncgroupMemberInfo())
SyncgroupSpec spec = group.join(mVContext, new SyncgroupMemberInfo());
members=group.getMembers(mVContext)
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=mLocalSB.db.writeBlob(mVContext,null)
BlobWriter writer = mLocalSB.db.writeBlob(mVContext, null);
out=writer.stream(mVContext)
OutputStream out = writer.stream(mVContext);
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true))
BatchDatabase batch = mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(sync(table.scan(mCancelableVContext,RowRange.range("",""))))
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
watchStream=InputChannels.asIterable(sync(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)))
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
watchStream=mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
directory=context.getFilesDir()
File directory = context.getFilesDir();
basename=String.format("reader-%s.log",now())
String basename = String.format("reader-%s.log", now());
File file = new File(directory, basename);
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);

Diff of 1a581f0182a03b7d8fb097657f261ec130f3d76e and ed7a0ef958fa62911db6172d80cfbab4584d3899:
	--> Added type argument methods = 1
	--> recency = months
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 21
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 3
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 15
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 1a581f0182a03b7d8fb097657f261ec130f3d76e to ed7a0ef958fa62911db6172d80cfbab4584d3899


****Parsing for addition at revision ed7a0ef958fa62911db6172d80cfbab4584d3899****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=group.join(mVContext,new SyncgroupMemberInfo())
SyncgroupSpec spec = group.join(mVContext, new SyncgroupMemberInfo());
members=group.getMembers(mVContext)
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=mLocalSB.db.writeBlob(mVContext,null)
BlobWriter writer = mLocalSB.db.writeBlob(mVContext, null);
out=writer.stream(mVContext)
OutputStream out = writer.stream(mVContext);
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true))
BatchDatabase batch = mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(sync(table.scan(mCancelableVContext,RowRange.range("",""))))
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
watchStream=InputChannels.asIterable(sync(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)))
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
watchStream=mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
directory=context.getFilesDir()
File directory = context.getFilesDir();
basename=String.format("reader-%s.log",now())
String basename = String.format("reader-%s.log", now());
File file = new File(directory, basename);
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);

Diff of ed7a0ef958fa62911db6172d80cfbab4584d3899 and 9a37804a47b984532a922f932242faf9564f80cb:
	--> Added type argument methods = 1
	--> recency = months
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 21
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 3
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 15
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision ed7a0ef958fa62911db6172d80cfbab4584d3899 to 9a37804a47b984532a922f932242faf9564f80cb


****Parsing for addition at revision 9a37804a47b984532a922f932242faf9564f80cb****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=group.join(mVContext,new SyncgroupMemberInfo())
SyncgroupSpec spec = group.join(mVContext, new SyncgroupMemberInfo());
members=group.getMembers(mVContext)
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=mLocalSB.db.writeBlob(mVContext,null)
BlobWriter writer = mLocalSB.db.writeBlob(mVContext, null);
out=writer.stream(mVContext)
OutputStream out = writer.stream(mVContext);
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true))
BatchDatabase batch = mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(sync(table.scan(mCancelableVContext,RowRange.range("",""))))
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
watchStream=InputChannels.asIterable(sync(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)))
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
watchStream=mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
directory=context.getFilesDir()
File directory = context.getFilesDir();
basename=String.format("reader-%s.log",now())
String basename = String.format("reader-%s.log", now());
File file = new File(directory, basename);
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);

 Generics pattern private class JSInterface was added at revision 9a37804a47b984532a922f932242faf9564f80cb


Diff of 9a37804a47b984532a922f932242faf9564f80cb and b579cd9e77b343874a2faecae23510060d1ba366:
	--> Added type argument methods = 1
	--> recency = months
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 22
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 3
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 15
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 9a37804a47b984532a922f932242faf9564f80cb to b579cd9e77b343874a2faecae23510060d1ba366

************Analysis complete************
Added generics to repository vanadium/reader = 20

YoungSeok Yoon added type argument method count = 1
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 22
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 3
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 15
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null

****Parsing for addition at revision 62bb8af38724ef1b0a710834c624085ba4315ca3****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=group.join(mVContext,new SyncgroupMemberInfo())
SyncgroupSpec spec = group.join(mVContext, new SyncgroupMemberInfo());
members=group.getMembers(mVContext)
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=mLocalSB.db.writeBlob(mVContext,null)
BlobWriter writer = mLocalSB.db.writeBlob(mVContext, null);
out=writer.stream(mVContext)
OutputStream out = writer.stream(mVContext);
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true))
BatchDatabase batch = mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(sync(table.scan(mCancelableVContext,RowRange.range("",""))))
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
watchStream=InputChannels.asIterable(sync(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)))
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
watchStream=mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
directory=context.getFilesDir()
File directory = context.getFilesDir();
basename=String.format("reader-%s.log",now())
String basename = String.format("reader-%s.log", now());
File file = new File(directory, basename);
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);

Diff of 62bb8af38724ef1b0a710834c624085ba4315ca3 and a4b870c96e15f7946154c3cbd72ded47fe1f9a58:
	--> Added type argument methods = 1
	--> recency = months
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 22
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 3
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 15
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 62bb8af38724ef1b0a710834c624085ba4315ca3 to a4b870c96e15f7946154c3cbd72ded47fe1f9a58

************Analysis complete************
Added generics to repository vanadium/reader = 20

YoungSeok Yoon added type argument method count = 1
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 22
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 3
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 15
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null

****Parsing for addition at revision f7b71d961dbe64e063600aa211cde927ab1cb8ae****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=group.join(mVContext,new SyncgroupMemberInfo())
SyncgroupSpec spec = group.join(mVContext, new SyncgroupMemberInfo());
members=group.getMembers(mVContext)
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=mLocalSB.db.writeBlob(mVContext,null)
BlobWriter writer = mLocalSB.db.writeBlob(mVContext, null);
out=writer.stream(mVContext)
OutputStream out = writer.stream(mVContext);
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true))
BatchDatabase batch = mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(sync(table.scan(mCancelableVContext,RowRange.range("",""))))
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
watchStream=InputChannels.asIterable(sync(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)))
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
watchStream=mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
directory=context.getFilesDir()
File directory = context.getFilesDir();
basename=String.format("reader-%s.log",now())
String basename = String.format("reader-%s.log", now());
File file = new File(directory, basename);
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);

Diff of f7b71d961dbe64e063600aa211cde927ab1cb8ae and c518a93ce8fdf44be0249cd68009af66cf704bfa:
	--> Added type argument methods = 1
	--> recency = months
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 22
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 3
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 15
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision f7b71d961dbe64e063600aa211cde927ab1cb8ae to c518a93ce8fdf44be0249cd68009af66cf704bfa


****Parsing for addition at revision c518a93ce8fdf44be0249cd68009af66cf704bfa****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=group.join(mVContext,new SyncgroupMemberInfo())
SyncgroupSpec spec = group.join(mVContext, new SyncgroupMemberInfo());
members=group.getMembers(mVContext)
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=mLocalSB.db.writeBlob(mVContext,null)
BlobWriter writer = mLocalSB.db.writeBlob(mVContext, null);
out=writer.stream(mVContext)
OutputStream out = writer.stream(mVContext);
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true))
BatchDatabase batch = mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(sync(table.scan(mCancelableVContext,RowRange.range("",""))))
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
watchStream=InputChannels.asIterable(sync(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)))
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
watchStream=mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
directory=context.getFilesDir()
File directory = context.getFilesDir();
basename=String.format("reader-%s.log",now())
String basename = String.format("reader-%s.log", now());
File file = new File(directory, basename);
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);

Diff of c518a93ce8fdf44be0249cd68009af66cf704bfa and 932a23b4038f21fdc7d55bff2b139adcb7f00c53:
	--> Added type argument methods = 1
	--> recency = months
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 22
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 3
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 15
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision c518a93ce8fdf44be0249cd68009af66cf704bfa to 932a23b4038f21fdc7d55bff2b139adcb7f00c53


****Parsing for addition at revision 932a23b4038f21fdc7d55bff2b139adcb7f00c53****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=group.join(mVContext,new SyncgroupMemberInfo())
SyncgroupSpec spec = group.join(mVContext, new SyncgroupMemberInfo());
members=group.getMembers(mVContext)
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=mLocalSB.db.writeBlob(mVContext,null)
BlobWriter writer = mLocalSB.db.writeBlob(mVContext, null);
out=writer.stream(mVContext)
OutputStream out = writer.stream(mVContext);
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true))
BatchDatabase batch = mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(sync(table.scan(mCancelableVContext,RowRange.range("",""))))
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
watchStream=InputChannels.asIterable(sync(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)))
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
watchStream=mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
directory=context.getFilesDir()
File directory = context.getFilesDir();
basename=String.format("reader-%s.log",now())
String basename = String.format("reader-%s.log", now());
File file = new File(directory, basename);
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);

Diff of 932a23b4038f21fdc7d55bff2b139adcb7f00c53 and 2e79afb2050cc2fa6b72ae2cb3b47af316a22c2e:
	--> Added type argument methods = 1
	--> recency = months
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 23
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 3
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 15
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 932a23b4038f21fdc7d55bff2b139adcb7f00c53 to 2e79afb2050cc2fa6b72ae2cb3b47af316a22c2e

************Analysis complete************
Added generics to repository vanadium/reader = 20

YoungSeok Yoon added type argument method count = 1
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 23
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 3
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 15
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 20

YoungSeok Yoon added type argument method count = 1
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 23
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 3
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 15
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 20

YoungSeok Yoon added type argument method count = 1
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 23
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 3
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 15
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 20

YoungSeok Yoon added type argument method count = 1
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 23
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 3
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 15
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null

****Parsing for addition at revision bcdda7d7c67ad0caec8d72b50cc2cf0c3c9fa585****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=group.join(mVContext,new SyncgroupMemberInfo())
SyncgroupSpec spec = group.join(mVContext, new SyncgroupMemberInfo());
members=group.getMembers(mVContext)
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=mLocalSB.db.writeBlob(mVContext,null)
BlobWriter writer = mLocalSB.db.writeBlob(mVContext, null);
out=writer.stream(mVContext)
OutputStream out = writer.stream(mVContext);
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true))
BatchDatabase batch = mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(sync(table.scan(mCancelableVContext,RowRange.range("",""))))
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
watchStream=InputChannels.asIterable(sync(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)))
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
watchStream=mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
directory=context.getFilesDir()
File directory = context.getFilesDir();
basename=String.format("reader-%s.log",now())
String basename = String.format("reader-%s.log", now());
File file = new File(directory, basename);
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);

Diff of bcdda7d7c67ad0caec8d72b50cc2cf0c3c9fa585 and ab2d948fd0ebdb3962efad59e92c038722de07a0:
	--> Added type argument methods = 1
	--> recency = months
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 23
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 3
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 15
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision bcdda7d7c67ad0caec8d72b50cc2cf0c3c9fa585 to ab2d948fd0ebdb3962efad59e92c038722de07a0


****Parsing for addition at revision ab2d948fd0ebdb3962efad59e92c038722de07a0****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=group.join(mVContext,new SyncgroupMemberInfo())
SyncgroupSpec spec = group.join(mVContext, new SyncgroupMemberInfo());
members=group.getMembers(mVContext)
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=mLocalSB.db.writeBlob(mVContext,null)
BlobWriter writer = mLocalSB.db.writeBlob(mVContext, null);
out=writer.stream(mVContext)
OutputStream out = writer.stream(mVContext);
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true))
BatchDatabase batch = mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(sync(table.scan(mCancelableVContext,RowRange.range("",""))))
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
watchStream=InputChannels.asIterable(sync(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)))
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
watchStream=mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
directory=context.getFilesDir()
File directory = context.getFilesDir();
basename=String.format("reader-%s.log",now())
String basename = String.format("reader-%s.log", now());
File file = new File(directory, basename);
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);

Diff of ab2d948fd0ebdb3962efad59e92c038722de07a0 and 722464dc445a7363775998df332dbbfc1a580c19:
	--> Added type argument methods = 1
	--> recency = months
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 23
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 3
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 15
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision ab2d948fd0ebdb3962efad59e92c038722de07a0 to 722464dc445a7363775998df332dbbfc1a580c19

************Analysis complete************
Added generics to repository vanadium/reader = 20

YoungSeok Yoon added type argument method count = 1
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 23
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 3
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 15
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null

****Parsing for addition at revision 747851d00b87a560941463e0a919d34055ce3240****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=group.join(mVContext,new SyncgroupMemberInfo())
SyncgroupSpec spec = group.join(mVContext, new SyncgroupMemberInfo());
members=group.getMembers(mVContext)
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=mLocalSB.db.writeBlob(mVContext,null)
BlobWriter writer = mLocalSB.db.writeBlob(mVContext, null);
out=writer.stream(mVContext)
OutputStream out = writer.stream(mVContext);
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true))
BatchDatabase batch = mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(sync(table.scan(mCancelableVContext,RowRange.range("",""))))
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
watchStream=InputChannels.asIterable(sync(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)))
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
watchStream=mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
directory=context.getFilesDir()
File directory = context.getFilesDir();
basename=String.format("reader-%s.log",now())
String basename = String.format("reader-%s.log", now());
File file = new File(directory, basename);
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);

Diff of 747851d00b87a560941463e0a919d34055ce3240 and ded631b92b8e08d940cddc320248534ed95059a5:
	--> Added type argument methods = 1
	--> recency = months
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 23
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 3
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 15
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 747851d00b87a560941463e0a919d34055ce3240 to ded631b92b8e08d940cddc320248534ed95059a5


****Parsing for addition at revision ded631b92b8e08d940cddc320248534ed95059a5****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=group.join(mVContext,new SyncgroupMemberInfo())
SyncgroupSpec spec = group.join(mVContext, new SyncgroupMemberInfo());
members=group.getMembers(mVContext)
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=mLocalSB.db.writeBlob(mVContext,null)
BlobWriter writer = mLocalSB.db.writeBlob(mVContext, null);
out=writer.stream(mVContext)
OutputStream out = writer.stream(mVContext);
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true))
BatchDatabase batch = mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(sync(table.scan(mCancelableVContext,RowRange.range("",""))))
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
watchStream=InputChannels.asIterable(sync(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)))
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
watchStream=mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
directory=context.getFilesDir()
File directory = context.getFilesDir();
basename=String.format("reader-%s.log",now())
String basename = String.format("reader-%s.log", now());
File file = new File(directory, basename);
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);

Diff of ded631b92b8e08d940cddc320248534ed95059a5 and 9f06ff34efcd5ec334dfde7c3126c4fd1b133833:
	--> Added type argument methods = 1
	--> recency = months
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 23
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 3
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 15
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision ded631b92b8e08d940cddc320248534ed95059a5 to 9f06ff34efcd5ec334dfde7c3126c4fd1b133833

************Analysis complete************
Added generics to repository vanadium/reader = 20

YoungSeok Yoon added type argument method count = 1
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 23
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 3
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 15
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 20

YoungSeok Yoon added type argument method count = 1
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 23
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 3
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 15
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 20

YoungSeok Yoon added type argument method count = 1
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 23
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 3
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 15
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 20

YoungSeok Yoon added type argument method count = 1
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 23
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 3
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 15
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null

****Parsing for addition at revision bb379d9d06cc35b8b5afbb07eb4f2501fa1b2199****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=group.join(mVContext,new SyncgroupMemberInfo())
SyncgroupSpec spec = group.join(mVContext, new SyncgroupMemberInfo());
members=group.getMembers(mVContext)
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=mLocalSB.db.writeBlob(mVContext,null)
BlobWriter writer = mLocalSB.db.writeBlob(mVContext, null);
out=writer.stream(mVContext)
OutputStream out = writer.stream(mVContext);
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true))
BatchDatabase batch = mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(sync(table.scan(mCancelableVContext,RowRange.range("",""))))
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
watchStream=InputChannels.asIterable(sync(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)))
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
watchStream=mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
directory=context.getFilesDir()
File directory = context.getFilesDir();
basename=String.format("reader-%s.log",now())
String basename = String.format("reader-%s.log", now());
File file = new File(directory, basename);
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);

Diff of bb379d9d06cc35b8b5afbb07eb4f2501fa1b2199 and e5d58ec33dc51086a4c2458fb3d0053bbc3696bf:
	--> Added type argument methods = 1
	--> recency = months
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 23
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 3
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 15
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision bb379d9d06cc35b8b5afbb07eb4f2501fa1b2199 to e5d58ec33dc51086a4c2458fb3d0053bbc3696bf


****Parsing for addition at revision e5d58ec33dc51086a4c2458fb3d0053bbc3696bf****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=group.join(mVContext,new SyncgroupMemberInfo())
SyncgroupSpec spec = group.join(mVContext, new SyncgroupMemberInfo());
members=group.getMembers(mVContext)
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=mLocalSB.db.writeBlob(mVContext,null)
BlobWriter writer = mLocalSB.db.writeBlob(mVContext, null);
out=writer.stream(mVContext)
OutputStream out = writer.stream(mVContext);
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true))
BatchDatabase batch = mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(sync(table.scan(mCancelableVContext,RowRange.range("",""))))
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
watchStream=InputChannels.asIterable(sync(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)))
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
watchStream=mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
directory=context.getFilesDir()
File directory = context.getFilesDir();
basename=String.format("reader-%s.log",now())
String basename = String.format("reader-%s.log", now());
File file = new File(directory, basename);
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);

Diff of e5d58ec33dc51086a4c2458fb3d0053bbc3696bf and dcdbfd41795bd97feacb43ebb3310747157c6619:
	--> Added type argument methods = 1
	--> recency = months
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 23
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 3
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 15
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision e5d58ec33dc51086a4c2458fb3d0053bbc3696bf to dcdbfd41795bd97feacb43ebb3310747157c6619


****Parsing for addition at revision dcdbfd41795bd97feacb43ebb3310747157c6619****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);

 Generics pattern public class Constants was added at revision dcdbfd41795bd97feacb43ebb3310747157c6619

DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=group.join(mVContext,new SyncgroupMemberInfo())
SyncgroupSpec spec = group.join(mVContext, new SyncgroupMemberInfo());
members=group.getMembers(mVContext)
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=mLocalSB.db.writeBlob(mVContext,null)
BlobWriter writer = mLocalSB.db.writeBlob(mVContext, null);
out=writer.stream(mVContext)
OutputStream out = writer.stream(mVContext);
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true))
BatchDatabase batch = mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(sync(table.scan(mCancelableVContext,RowRange.range("",""))))
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
watchStream=InputChannels.asIterable(sync(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)))
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
watchStream=mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
directory=context.getFilesDir()
File directory = context.getFilesDir();
basename=String.format("reader-%s.log",now())
String basename = String.format("reader-%s.log", now());
File file = new File(directory, basename);
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");

 Generics pattern public class IdFactory was added at revision dcdbfd41795bd97feacb43ebb3310747157c6619

Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);

 Generics pattern private Map<String, DeviceMeta> getLinkedDevices() was added at revision dcdbfd41795bd97feacb43ebb3310747157c6619

settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);

Diff of dcdbfd41795bd97feacb43ebb3310747157c6619 and 640cf8901e01f8b6ed98e8cddb4a7bff14c690c1:
	--> Added type argument methods = 2
	--> recency = months
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 28
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 8
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 31
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision dcdbfd41795bd97feacb43ebb3310747157c6619 to 640cf8901e01f8b6ed98e8cddb4a7bff14c690c1


****Parsing for addition at revision 640cf8901e01f8b6ed98e8cddb4a7bff14c690c1****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=group.join(mVContext,new SyncgroupMemberInfo())
SyncgroupSpec spec = group.join(mVContext, new SyncgroupMemberInfo());
members=group.getMembers(mVContext)
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=mLocalSB.db.writeBlob(mVContext,null)
BlobWriter writer = mLocalSB.db.writeBlob(mVContext, null);
out=writer.stream(mVContext)
OutputStream out = writer.stream(mVContext);
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true))
BatchDatabase batch = mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(sync(table.scan(mCancelableVContext,RowRange.range("",""))))
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
watchStream=InputChannels.asIterable(sync(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)))
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
watchStream=mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
directory=context.getFilesDir()
File directory = context.getFilesDir();
basename=String.format("reader-%s.log",now())
String basename = String.format("reader-%s.log", now());
File file = new File(directory, basename);
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);

Diff of 640cf8901e01f8b6ed98e8cddb4a7bff14c690c1 and 21fb92fe2af18fad601d472d8344b65d3fe2ea9d:
	--> Added type argument methods = 2
	--> recency = months
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 28
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 8
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 31
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 640cf8901e01f8b6ed98e8cddb4a7bff14c690c1 to 21fb92fe2af18fad601d472d8344b65d3fe2ea9d


****Parsing for addition at revision 21fb92fe2af18fad601d472d8344b65d3fe2ea9d****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=group.join(mVContext,new SyncgroupMemberInfo())
SyncgroupSpec spec = group.join(mVContext, new SyncgroupMemberInfo());
members=group.getMembers(mVContext)
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=mLocalSB.db.writeBlob(mVContext,null)
BlobWriter writer = mLocalSB.db.writeBlob(mVContext, null);
out=writer.stream(mVContext)
OutputStream out = writer.stream(mVContext);
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true))
BatchDatabase batch = mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(sync(table.scan(mCancelableVContext,RowRange.range("",""))))
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
watchStream=InputChannels.asIterable(sync(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)))
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
watchStream=mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
directory=context.getFilesDir()
File directory = context.getFilesDir();
basename=String.format("reader-%s.log",now())
String basename = String.format("reader-%s.log", now());
File file = new File(directory, basename);
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);

Diff of 21fb92fe2af18fad601d472d8344b65d3fe2ea9d and 02225319f57bfeb0c9736bf058f03691c9e40301:
	--> Added type argument methods = 2
	--> recency = months
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 28
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 8
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 31
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 21fb92fe2af18fad601d472d8344b65d3fe2ea9d to 02225319f57bfeb0c9736bf058f03691c9e40301

************Analysis complete************
Added generics to repository vanadium/reader = 23

YoungSeok Yoon added type argument method count = 2
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 28
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 8
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 31
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 23

YoungSeok Yoon added type argument method count = 2
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 28
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 8
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 31
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null

****Parsing for addition at revision f0b558f96a06dfaa340720eccab20f0968fd924c****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=group.join(mVContext,new SyncgroupMemberInfo())
SyncgroupSpec spec = group.join(mVContext, new SyncgroupMemberInfo());
members=group.getMembers(mVContext)
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=mLocalSB.db.writeBlob(mVContext,null)
BlobWriter writer = mLocalSB.db.writeBlob(mVContext, null);
out=writer.stream(mVContext)
OutputStream out = writer.stream(mVContext);
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true))
BatchDatabase batch = mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(sync(table.scan(mCancelableVContext,RowRange.range("",""))))
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
watchStream=InputChannels.asIterable(sync(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)))
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
watchStream=mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());

 Generics pattern new ArrayList<>() was added at revision f0b558f96a06dfaa340720eccab20f0968fd924c

directory=context.getFilesDir()
File directory = context.getFilesDir();
basename=String.format("reader-%s.log",now())
String basename = String.format("reader-%s.log", now());
File file = new File(directory, basename);
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);

Diff of f0b558f96a06dfaa340720eccab20f0968fd924c and 086c51bc4c59b340451aa4ed6f29d80f004de1d7:
	--> Added type argument methods = 2
	--> recency = months
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 28
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 9
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 31
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision f0b558f96a06dfaa340720eccab20f0968fd924c to 086c51bc4c59b340451aa4ed6f29d80f004de1d7


****Parsing for addition at revision 086c51bc4c59b340451aa4ed6f29d80f004de1d7****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=group.join(mVContext,new SyncgroupMemberInfo())
SyncgroupSpec spec = group.join(mVContext, new SyncgroupMemberInfo());
members=group.getMembers(mVContext)
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=mLocalSB.db.writeBlob(mVContext,null)
BlobWriter writer = mLocalSB.db.writeBlob(mVContext, null);
out=writer.stream(mVContext)
OutputStream out = writer.stream(mVContext);
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true))
BatchDatabase batch = mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(sync(table.scan(mCancelableVContext,RowRange.range("",""))))
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
watchStream=InputChannels.asIterable(sync(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)))
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
watchStream=mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
directory=context.getFilesDir()
File directory = context.getFilesDir();
basename=String.format("reader-%s.log",now())
String basename = String.format("reader-%s.log", now());
File file = new File(directory, basename);
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);

Diff of 086c51bc4c59b340451aa4ed6f29d80f004de1d7 and 21544b4608f06963284ffdb662092be6cb29a863:
	--> Added type argument methods = 2
	--> recency = months
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 28
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 9
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 31
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 086c51bc4c59b340451aa4ed6f29d80f004de1d7 to 21544b4608f06963284ffdb662092be6cb29a863


****Parsing for addition at revision 21544b4608f06963284ffdb662092be6cb29a863****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=group.join(mVContext,new SyncgroupMemberInfo())
SyncgroupSpec spec = group.join(mVContext, new SyncgroupMemberInfo());
members=group.getMembers(mVContext)
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=mLocalSB.db.writeBlob(mVContext,null)
BlobWriter writer = mLocalSB.db.writeBlob(mVContext, null);
out=writer.stream(mVContext)
OutputStream out = writer.stream(mVContext);
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true))
BatchDatabase batch = mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(sync(table.scan(mCancelableVContext,RowRange.range("",""))))
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
watchStream=InputChannels.asIterable(sync(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)))
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
watchStream=mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
directory=context.getFilesDir()
File directory = context.getFilesDir();
basename=String.format("reader-%s.log",now())
String basename = String.format("reader-%s.log", now());
File file = new File(directory, basename);
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);

Diff of 21544b4608f06963284ffdb662092be6cb29a863 and 29693ca4cdceef34eb7de77ddf928be1dd9d8e74:
	--> Added type argument methods = 2
	--> recency = months
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 28
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 9
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 31
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 21544b4608f06963284ffdb662092be6cb29a863 to 29693ca4cdceef34eb7de77ddf928be1dd9d8e74


****Parsing for addition at revision 29693ca4cdceef34eb7de77ddf928be1dd9d8e74****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=group.join(mVContext,new SyncgroupMemberInfo())
SyncgroupSpec spec = group.join(mVContext, new SyncgroupMemberInfo());
members=group.getMembers(mVContext)
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=mLocalSB.db.writeBlob(mVContext,null)
BlobWriter writer = mLocalSB.db.writeBlob(mVContext, null);
out=writer.stream(mVContext)
OutputStream out = writer.stream(mVContext);
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true))
BatchDatabase batch = mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(sync(table.scan(mCancelableVContext,RowRange.range("",""))))
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
watchStream=InputChannels.asIterable(sync(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)))
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
watchStream=mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
directory=context.getFilesDir()
File directory = context.getFilesDir();
basename=String.format("reader-%s.log",now())
String basename = String.format("reader-%s.log", now());
File file = new File(directory, basename);
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);

Diff of 29693ca4cdceef34eb7de77ddf928be1dd9d8e74 and e41df96cf033cb363fdb658f445ca786e06f2867:
	--> Added type argument methods = 2
	--> recency = months
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 28
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 9
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 31
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 29693ca4cdceef34eb7de77ddf928be1dd9d8e74 to e41df96cf033cb363fdb658f445ca786e06f2867


****Parsing for addition at revision e41df96cf033cb363fdb658f445ca786e06f2867****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=group.join(mVContext,new SyncgroupMemberInfo())
SyncgroupSpec spec = group.join(mVContext, new SyncgroupMemberInfo());
members=group.getMembers(mVContext)
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=mLocalSB.db.writeBlob(mVContext,null)
BlobWriter writer = mLocalSB.db.writeBlob(mVContext, null);
out=writer.stream(mVContext)
OutputStream out = writer.stream(mVContext);
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true))
BatchDatabase batch = mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(sync(table.scan(mCancelableVContext,RowRange.range("",""))))
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
watchStream=InputChannels.asIterable(sync(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)))
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
watchStream=mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
directory=context.getFilesDir()
File directory = context.getFilesDir();
basename=String.format("reader-%s.log",now())
String basename = String.format("reader-%s.log", now());
File file = new File(directory, basename);
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);

Diff of e41df96cf033cb363fdb658f445ca786e06f2867 and e757e795177cc65917e89d6e27e1c06b32cb9086:
	--> Added type argument methods = 2
	--> recency = months
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 28
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 9
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 31
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision e41df96cf033cb363fdb658f445ca786e06f2867 to e757e795177cc65917e89d6e27e1c06b32cb9086


****Parsing for addition at revision e757e795177cc65917e89d6e27e1c06b32cb9086****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=group.join(mVContext,new SyncgroupMemberInfo())
SyncgroupSpec spec = group.join(mVContext, new SyncgroupMemberInfo());
members=group.getMembers(mVContext)
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=mLocalSB.db.writeBlob(mVContext,null)
BlobWriter writer = mLocalSB.db.writeBlob(mVContext, null);
out=writer.stream(mVContext)
OutputStream out = writer.stream(mVContext);
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true))
BatchDatabase batch = mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(sync(table.scan(mCancelableVContext,RowRange.range("",""))))
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
watchStream=InputChannels.asIterable(sync(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)))
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
watchStream=mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);

 Generics pattern Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext); was added at revision e757e795177cc65917e89d6e27e1c06b32cb9086


 Generics pattern private class SyncbaseFileList was added at revision e757e795177cc65917e89d6e27e1c06b32cb9086


 Generics pattern private class SyncbaseDeviceList was added at revision e757e795177cc65917e89d6e27e1c06b32cb9086


 Generics pattern private class SyncbaseDeviceSetList was added at revision e757e795177cc65917e89d6e27e1c06b32cb9086


 Generics pattern private abstract class SyncbaseDBList<E> was added at revision e757e795177cc65917e89d6e27e1c06b32cb9086


 Generics pattern new ArrayList<>() was added at revision e757e795177cc65917e89d6e27e1c06b32cb9086


 Generics pattern private static class SyncbaseHierarchy was added at revision e757e795177cc65917e89d6e27e1c06b32cb9086

RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
directory=context.getFilesDir()
File directory = context.getFilesDir();
basename=String.format("reader-%s.log",now())
String basename = String.format("reader-%s.log", now());
File file = new File(directory, basename);
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);

Diff of e757e795177cc65917e89d6e27e1c06b32cb9086 and 0d762a0f2756749830989c06759cb2e267f64a8b:
	--> Added type argument methods = 2
	--> recency = months
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 33
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 19
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 33
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision e757e795177cc65917e89d6e27e1c06b32cb9086 to 0d762a0f2756749830989c06759cb2e267f64a8b


****Parsing for addition at revision 0d762a0f2756749830989c06759cb2e267f64a8b****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=group.join(mVContext,new SyncgroupMemberInfo())
SyncgroupSpec spec = group.join(mVContext, new SyncgroupMemberInfo());
members=group.getMembers(mVContext)
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=mLocalSB.db.writeBlob(mVContext,null)
BlobWriter writer = mLocalSB.db.writeBlob(mVContext, null);
out=writer.stream(mVContext)
OutputStream out = writer.stream(mVContext);
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true))
BatchDatabase batch = mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(sync(table.scan(mCancelableVContext,RowRange.range("",""))))
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
watchStream=InputChannels.asIterable(sync(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)))
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
watchStream=mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
directory=context.getFilesDir()
File directory = context.getFilesDir();
basename=String.format("reader-%s.log",now())
String basename = String.format("reader-%s.log", now());
File file = new File(directory, basename);
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);

Diff of 0d762a0f2756749830989c06759cb2e267f64a8b and c0e4da4851ab17ae5fd77cc47c2a6b23fffd921e:
	--> Added type argument methods = 2
	--> recency = months
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 33
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 19
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 33
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 0d762a0f2756749830989c06759cb2e267f64a8b to c0e4da4851ab17ae5fd77cc47c2a6b23fffd921e


****Parsing for addition at revision c0e4da4851ab17ae5fd77cc47c2a6b23fffd921e****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());

 Generics pattern static abstract class BaseFakeList<E> was added at revision c0e4da4851ab17ae5fd77cc47c2a6b23fffd921e


 Generics pattern static class FakeDeviceList was added at revision c0e4da4851ab17ae5fd77cc47c2a6b23fffd921e

AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=group.join(mVContext,new SyncgroupMemberInfo())
SyncgroupSpec spec = group.join(mVContext, new SyncgroupMemberInfo());
members=group.getMembers(mVContext)
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=mLocalSB.db.writeBlob(mVContext,null)
BlobWriter writer = mLocalSB.db.writeBlob(mVContext, null);
out=writer.stream(mVContext)
OutputStream out = writer.stream(mVContext);
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true))
BatchDatabase batch = mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(sync(table.scan(mCancelableVContext,RowRange.range("",""))))
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
watchStream=InputChannels.asIterable(sync(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)))
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
watchStream=mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
directory=context.getFilesDir()
File directory = context.getFilesDir();
basename=String.format("reader-%s.log",now())
String basename = String.format("reader-%s.log", now());
File file = new File(directory, basename);
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();

 Generics pattern public class DeviceInfoFactory was added at revision c0e4da4851ab17ae5fd77cc47c2a6b23fffd921e

result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);

Diff of c0e4da4851ab17ae5fd77cc47c2a6b23fffd921e and 9b36caff6bbece8cb3f38a2f3f4a523510d2ea09:
	--> Added type argument methods = 2
	--> recency = months
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 38
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 19
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 33
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision c0e4da4851ab17ae5fd77cc47c2a6b23fffd921e to 9b36caff6bbece8cb3f38a2f3f4a523510d2ea09


****Parsing for addition at revision 9b36caff6bbece8cb3f38a2f3f4a523510d2ea09****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());

 Generics pattern static class FakeDeviceSetList was added at revision 9b36caff6bbece8cb3f38a2f3f4a523510d2ea09

AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=group.join(mVContext,new SyncgroupMemberInfo())
SyncgroupSpec spec = group.join(mVContext, new SyncgroupMemberInfo());
members=group.getMembers(mVContext)
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=mLocalSB.db.writeBlob(mVContext,null)
BlobWriter writer = mLocalSB.db.writeBlob(mVContext, null);
out=writer.stream(mVContext)
OutputStream out = writer.stream(mVContext);
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true))
BatchDatabase batch = mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(sync(table.scan(mCancelableVContext,RowRange.range("",""))))
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
watchStream=InputChannels.asIterable(sync(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)))
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
watchStream=mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);

 Generics pattern private static class EmptyList<E> was added at revision 9b36caff6bbece8cb3f38a2f3f4a523510d2ea09

RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);

 Generics pattern public class DeviceSetChooserActivity was added at revision 9b36caff6bbece8cb3f38a2f3f4a523510d2ea09

CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());

 Generics pattern public class DeviceSetListAdapter was added at revision 9b36caff6bbece8cb3f38a2f3f4a523510d2ea09

directory=context.getFilesDir()
File directory = context.getFilesDir();
basename=String.format("reader-%s.log",now())
String basename = String.format("reader-%s.log", now());
File file = new File(directory, basename);
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);

Diff of 9b36caff6bbece8cb3f38a2f3f4a523510d2ea09 and 93288717821630129d40f66d2b1c0c85096983f9:
	--> Added type argument methods = 2
	--> recency = months
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 43
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 20
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 33
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 9b36caff6bbece8cb3f38a2f3f4a523510d2ea09 to 93288717821630129d40f66d2b1c0c85096983f9


****Parsing for addition at revision 93288717821630129d40f66d2b1c0c85096983f9****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());

 Generics pattern static class FakeFileList was added at revision 93288717821630129d40f66d2b1c0c85096983f9

AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=group.join(mVContext,new SyncgroupMemberInfo())
SyncgroupSpec spec = group.join(mVContext, new SyncgroupMemberInfo());
members=group.getMembers(mVContext)
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=mLocalSB.db.writeBlob(mVContext,null)
BlobWriter writer = mLocalSB.db.writeBlob(mVContext, null);
out=writer.stream(mVContext)
OutputStream out = writer.stream(mVContext);
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true))
BatchDatabase batch = mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(sync(table.scan(mCancelableVContext,RowRange.range("",""))))
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
watchStream=InputChannels.asIterable(sync(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)))
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
watchStream=mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
directory=context.getFilesDir()
File directory = context.getFilesDir();
basename=String.format("reader-%s.log",now())
String basename = String.format("reader-%s.log", now());
File file = new File(directory, basename);
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);

Diff of 93288717821630129d40f66d2b1c0c85096983f9 and bc52ad10eba298e97cbb3083564438a3caa2fd51:
	--> Added type argument methods = 2
	--> recency = months
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 44
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 20
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 33
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 93288717821630129d40f66d2b1c0c85096983f9 to bc52ad10eba298e97cbb3083564438a3caa2fd51


****Parsing for addition at revision bc52ad10eba298e97cbb3083564438a3caa2fd51****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=group.join(mVContext,new SyncgroupMemberInfo())
SyncgroupSpec spec = group.join(mVContext, new SyncgroupMemberInfo());
members=group.getMembers(mVContext)
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=mLocalSB.db.writeBlob(mVContext,null)
BlobWriter writer = mLocalSB.db.writeBlob(mVContext, null);
out=writer.stream(mVContext)
OutputStream out = writer.stream(mVContext);
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true))
BatchDatabase batch = mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(sync(table.scan(mCancelableVContext,RowRange.range("",""))))
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
watchStream=InputChannels.asIterable(sync(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)))
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
watchStream=mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
directory=context.getFilesDir()
File directory = context.getFilesDir();
basename=String.format("reader-%s.log",now())
String basename = String.format("reader-%s.log", now());
File file = new File(directory, basename);
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);

Diff of bc52ad10eba298e97cbb3083564438a3caa2fd51 and 37e9c784a1c9e3b9f06a449029530f72d7620752:
	--> Added type argument methods = 2
	--> recency = months
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 44
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 20
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 33
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision bc52ad10eba298e97cbb3083564438a3caa2fd51 to 37e9c784a1c9e3b9f06a449029530f72d7620752


****Parsing for addition at revision 37e9c784a1c9e3b9f06a449029530f72d7620752****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=group.join(mVContext,new SyncgroupMemberInfo())
SyncgroupSpec spec = group.join(mVContext, new SyncgroupMemberInfo());
members=group.getMembers(mVContext)
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=mLocalSB.db.writeBlob(mVContext,null)
BlobWriter writer = mLocalSB.db.writeBlob(mVContext, null);
out=writer.stream(mVContext)
OutputStream out = writer.stream(mVContext);
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true))
BatchDatabase batch = mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(sync(table.scan(mCancelableVContext,RowRange.range("",""))))
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
watchStream=InputChannels.asIterable(sync(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)))
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
watchStream=mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
directory=context.getFilesDir()
File directory = context.getFilesDir();
basename=String.format("reader-%s.log",now())
String basename = String.format("reader-%s.log", now());
File file = new File(directory, basename);
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);

Diff of 37e9c784a1c9e3b9f06a449029530f72d7620752 and df4d7d5ad75df3d9cf7a042120a31953dbc3dffb:
	--> Added type argument methods = 2
	--> recency = months
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 44
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 20
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 33
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 37e9c784a1c9e3b9f06a449029530f72d7620752 to df4d7d5ad75df3d9cf7a042120a31953dbc3dffb

************Analysis complete************
Added generics to repository vanadium/reader = 39

YoungSeok Yoon added type argument method count = 2
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 44
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 20
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 33
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null

****Parsing for addition at revision 373fe750584d6834a4c83bc1747e88d58e9cfb44****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=group.join(mVContext,new SyncgroupMemberInfo())
SyncgroupSpec spec = group.join(mVContext, new SyncgroupMemberInfo());
members=group.getMembers(mVContext)
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=mLocalSB.db.writeBlob(mVContext,null)
BlobWriter writer = mLocalSB.db.writeBlob(mVContext, null);
out=writer.stream(mVContext)
OutputStream out = writer.stream(mVContext);
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true))
BatchDatabase batch = mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(sync(table.scan(mCancelableVContext,RowRange.range("",""))))
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
watchStream=InputChannels.asIterable(sync(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)))
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
watchStream=mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
directory=context.getFilesDir()
File directory = context.getFilesDir();
basename=String.format("reader-%s.log",now())
String basename = String.format("reader-%s.log", now());
File file = new File(directory, basename);
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);

Diff of 373fe750584d6834a4c83bc1747e88d58e9cfb44 and 2a834ffd2052d2c0214ec30421924d94f2077d81:
	--> Added type argument methods = 2
	--> recency = months
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 44
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 20
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 33
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 373fe750584d6834a4c83bc1747e88d58e9cfb44 to 2a834ffd2052d2c0214ec30421924d94f2077d81


****Parsing for addition at revision 2a834ffd2052d2c0214ec30421924d94f2077d81****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=group.join(mVContext,new SyncgroupMemberInfo())
SyncgroupSpec spec = group.join(mVContext, new SyncgroupMemberInfo());
members=group.getMembers(mVContext)
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=mLocalSB.db.writeBlob(mVContext,null)
BlobWriter writer = mLocalSB.db.writeBlob(mVContext, null);
out=writer.stream(mVContext)
OutputStream out = writer.stream(mVContext);
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true))
BatchDatabase batch = mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(sync(table.scan(mCancelableVContext,RowRange.range("",""))))
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
watchStream=InputChannels.asIterable(sync(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)))
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
watchStream=mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
directory=context.getFilesDir()
File directory = context.getFilesDir();
basename=String.format("reader-%s.log",now())
String basename = String.format("reader-%s.log", now());
File file = new File(directory, basename);
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);

Diff of 2a834ffd2052d2c0214ec30421924d94f2077d81 and 8f948bcf62a1ae632e563edb573013507d069d49:
	--> Added type argument methods = 2
	--> recency = months
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 44
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 20
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 33
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 2a834ffd2052d2c0214ec30421924d94f2077d81 to 8f948bcf62a1ae632e563edb573013507d069d49


****Parsing for addition at revision 8f948bcf62a1ae632e563edb573013507d069d49****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=group.join(mVContext,new SyncgroupMemberInfo())
SyncgroupSpec spec = group.join(mVContext, new SyncgroupMemberInfo());
members=group.getMembers(mVContext)
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=mLocalSB.db.writeBlob(mVContext,null)
BlobWriter writer = mLocalSB.db.writeBlob(mVContext, null);
out=writer.stream(mVContext)
OutputStream out = writer.stream(mVContext);
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true))
BatchDatabase batch = mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(sync(table.scan(mCancelableVContext,RowRange.range("",""))))
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
watchStream=InputChannels.asIterable(sync(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)))
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
watchStream=mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
directory=context.getFilesDir()
File directory = context.getFilesDir();
basename=String.format("reader-%s.log",now())
String basename = String.format("reader-%s.log", now());
File file = new File(directory, basename);
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);

Diff of 8f948bcf62a1ae632e563edb573013507d069d49 and 5c0b90d4228dca372731e8655b70790116e0a1f9:
	--> Added type argument methods = 2
	--> recency = months
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 44
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 20
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 33
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 8f948bcf62a1ae632e563edb573013507d069d49 to 5c0b90d4228dca372731e8655b70790116e0a1f9

************Analysis complete************
Added generics to repository vanadium/reader = 39

YoungSeok Yoon added type argument method count = 2
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 44
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 20
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 33
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 39

YoungSeok Yoon added type argument method count = 2
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 44
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 20
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 33
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 39

YoungSeok Yoon added type argument method count = 2
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 44
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 20
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 33
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null

****Parsing for addition at revision 6f168c89d2812385a7c0ab14a47ea76d853940e0****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=group.join(mVContext,new SyncgroupMemberInfo())
SyncgroupSpec spec = group.join(mVContext, new SyncgroupMemberInfo());
members=group.getMembers(mVContext)
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=mLocalSB.db.writeBlob(mVContext,null)
BlobWriter writer = mLocalSB.db.writeBlob(mVContext, null);
out=writer.stream(mVContext)
OutputStream out = writer.stream(mVContext);
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true))
BatchDatabase batch = mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(sync(table.scan(mCancelableVContext,RowRange.range("",""))))
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
watchStream=InputChannels.asIterable(sync(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)))
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
watchStream=mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
directory=context.getFilesDir()
File directory = context.getFilesDir();
basename=String.format("reader-%s.log",now())
String basename = String.format("reader-%s.log", now());
File file = new File(directory, basename);
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);

Diff of 6f168c89d2812385a7c0ab14a47ea76d853940e0 and 7c712886c9b55322ae3e3465ac88043f8b137069:
	--> Added type argument methods = 2
	--> recency = months
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 44
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 20
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 33
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 6f168c89d2812385a7c0ab14a47ea76d853940e0 to 7c712886c9b55322ae3e3465ac88043f8b137069


****Parsing for addition at revision 7c712886c9b55322ae3e3465ac88043f8b137069****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=group.join(mVContext,new SyncgroupMemberInfo())
SyncgroupSpec spec = group.join(mVContext, new SyncgroupMemberInfo());
members=group.getMembers(mVContext)
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=mLocalSB.db.writeBlob(mVContext,null)
BlobWriter writer = mLocalSB.db.writeBlob(mVContext, null);
out=writer.stream(mVContext)
OutputStream out = writer.stream(mVContext);
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true))
BatchDatabase batch = mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(sync(table.scan(mCancelableVContext,RowRange.range("",""))))
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
watchStream=InputChannels.asIterable(sync(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)))
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
watchStream=mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
directory=context.getFilesDir()
File directory = context.getFilesDir();
basename=String.format("reader-%s.log",now())
String basename = String.format("reader-%s.log", now());
File file = new File(directory, basename);
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);

Diff of 7c712886c9b55322ae3e3465ac88043f8b137069 and fc65f984e0f387f482915609b5c9e5a3ec957c97:
	--> Added type argument methods = 2
	--> recency = months
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 44
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 20
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 33
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 7c712886c9b55322ae3e3465ac88043f8b137069 to fc65f984e0f387f482915609b5c9e5a3ec957c97


****Parsing for addition at revision fc65f984e0f387f482915609b5c9e5a3ec957c97****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;

 Generics pattern class Singleton was added at revision fc65f984e0f387f482915609b5c9e5a3ec957c97

id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());

 Generics pattern public class FakeDB was added at revision fc65f984e0f387f482915609b5c9e5a3ec957c97


 Generics pattern new ArrayList<>() was added at revision fc65f984e0f387f482915609b5c9e5a3ec957c97

AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=group.join(mVContext,new SyncgroupMemberInfo())
SyncgroupSpec spec = group.join(mVContext, new SyncgroupMemberInfo());
members=group.getMembers(mVContext)
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=mLocalSB.db.writeBlob(mVContext,null)
BlobWriter writer = mLocalSB.db.writeBlob(mVContext, null);
out=writer.stream(mVContext)
OutputStream out = writer.stream(mVContext);
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true))
BatchDatabase batch = mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(sync(table.scan(mCancelableVContext,RowRange.range("",""))))
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
watchStream=InputChannels.asIterable(sync(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)))
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
watchStream=mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
directory=context.getFilesDir()
File directory = context.getFilesDir();
basename=String.format("reader-%s.log",now())
String basename = String.format("reader-%s.log", now());
File file = new File(directory, basename);
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);

Diff of fc65f984e0f387f482915609b5c9e5a3ec957c97 and 47c06002e0e7eaeedd3bc09e389bfd0c4ae15e92:
	--> Added type argument methods = 2
	--> recency = months
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 46
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 21
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 33
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision fc65f984e0f387f482915609b5c9e5a3ec957c97 to 47c06002e0e7eaeedd3bc09e389bfd0c4ae15e92

************Analysis complete************
Added generics to repository vanadium/reader = 42

YoungSeok Yoon added type argument method count = 2
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 46
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 21
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 33
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 42

YoungSeok Yoon added type argument method count = 2
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 46
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 21
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 33
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 42

YoungSeok Yoon added type argument method count = 2
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 46
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 21
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 33
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 42

YoungSeok Yoon added type argument method count = 2
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 46
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 21
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 33
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 42

YoungSeok Yoon added type argument method count = 2
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 46
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 21
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 33
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 42

YoungSeok Yoon added type argument method count = 2
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 46
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 21
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 33
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null

****Parsing for addition at revision 95e80def106409ce7928379feaa7f587c6daf67f****

Added ApplicationTest.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added ReaderApplication.java to .\/reader\ repository source files.
Added BaseReaderActivity.java to .\/reader\ repository source files.
Added Constants.java to .\/reader\ repository source files.
Added DB.java to .\/reader\ repository source files.
Added FakeDB.java to .\/reader\ repository source files.
Added SyncbaseDB.java to .\/reader\ repository source files.
Added DeviceSetChooserActivity.java to .\/reader\ repository source files.
Added DeviceSetListAdapter.java to .\/reader\ repository source files.
Added GestureListener.java to .\/reader\ repository source files.
Added DeviceInfoFactory.java to .\/reader\ repository source files.
Added IdFactory.java to .\/reader\ repository source files.
Added Listener.java to .\/reader\ repository source files.
Added PdfViewerActivity.java to .\/reader\ repository source files.
Added PdfViewWrapper.java to .\/reader\ repository source files.
analytics=GoogleAnalytics.getInstance(this)
GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
deviceId=DeviceInfoFactory.getDeviceId(this)
String deviceId = DeviceInfoFactory.getDeviceId(this);
DB result = instance;
id=IdFactory.getFileId(bytes)
String id = IdFactory.getFileId(bytes);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), id);
java.io.File jFile = new java.io.File(mContext.getCacheDir(), file.getId());
AccessList acl = new AccessList(
                ImmutableList.of(new BlessingPattern("...")), ImmutableList.<String>of());
Blessings blessings = null;
intent=BlessingService.newBlessingIntent(mContext)
Intent intent = BlessingService.newBlessingIntent(mContext);
blessingsVom=BlessingService.extractBlessingReply(resultCode,data)
byte[] blessingsVom = BlessingService.extractBlessingReply(resultCode, data);
Blessings blessings = (Blessings) VomUtil.decode(blessingsVom, Blessings.class);
p=V.getPrincipal(mVContext)
VPrincipal p = V.getPrincipal(mVContext);
syncbaseName=NamingUtil.join("users",mUsername,"reader",DeviceInfoFactory.getDevice(mContext).getId(),"syncbase")
final String syncbaseName = NamingUtil.join(
                "users",
                mUsername,
                "reader",
                DeviceInfoFactory.getDevice(mContext).getId(),
                "syncbase"
        );
java.io.File storageDir = new java.io.File(mContext.getFilesDir(), "syncbase");
syncbaseServer=V.getServer(mVContext)
Server syncbaseServer = V.getServer(mVContext);
String serverName = "/" + syncbaseServer.getStatus().getEndpoints()[0];
cloudsyncName=NamingUtil.join("users",NamingUtil.trimSuffix(mUsername,"android"),"reader/cloudsync")
String cloudsyncName = NamingUtil.join(
                    "users",
                    NamingUtil.trimSuffix(mUsername, "android"),
                    "reader/cloudsync"
            );
cloudSB=createHierarchy(cloudsyncName,"cloud")
SyncbaseHierarchy cloudSB = createHierarchy(cloudsyncName, "cloud");
group=db.getSyncgroup(mSyncgroupName)
Syncgroup group = db.getSyncgroup(mSyncgroupName);
prefixes=ImmutableList.of(new TableRow(TABLE_FILES,""),new TableRow(TABLE_DEVICES,""),new TableRow(TABLE_DEVICE_SETS,""))
List<TableRow> prefixes = ImmutableList.of(
                new TableRow(TABLE_FILES, ""),
                new TableRow(TABLE_DEVICES, ""),
                new TableRow(TABLE_DEVICE_SETS, "")
        );
mountTables=ImmutableList.of(NamingUtil.join(GLOBAL_MOUNT_TABLE,"users",NamingUtil.trimSuffix(mUsername,"android"),"reader/rendezvous"))
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
List<String> mountTables = ImmutableList.of(
                NamingUtil.join(
                        GLOBAL_MOUNT_TABLE,
                        "users",
                        NamingUtil.trimSuffix(mUsername, "android"),
                        "reader/rendezvous"
                )
        );
SyncgroupSpec spec = new SyncgroupSpec(
                "reader syncgroup",
                mPermissions,
                prefixes,
                mountTables,
                false
        );
group=mLocalSB.db.getSyncgroup(mSyncgroupName)
Syncgroup group = mLocalSB.db.getSyncgroup(mSyncgroupName);
spec=group.join(mVContext,new SyncgroupMemberInfo())
SyncgroupSpec spec = group.join(mVContext, new SyncgroupMemberInfo());
members=group.getMembers(mVContext)
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
Map<String, SyncgroupMemberInfo> members = group.getMembers(mVContext);
thisDevice=DeviceInfoFactory.getDevice(mContext)
Device thisDevice = DeviceInfoFactory.getDevice(mContext);
service=Syncbase.newService(syncbaseName)
SyncbaseService service = Syncbase.newService(syncbaseName);
SyncbaseHierarchy result = new SyncbaseHierarchy();
writer=mLocalSB.db.writeBlob(mVContext,null)
BlobWriter writer = mLocalSB.db.writeBlob(mVContext, null);
out=writer.stream(mVContext)
OutputStream out = writer.stream(mVContext);
ref=writer.getRef()
BlobRef ref = writer.getRef();
reader=mLocalSB.db.readBlob(mVContext,file.getRef())
BlobReader reader = mLocalSB.db.readBlob(mVContext, file.getRef());
batch=mLocalSB.db.beginBatch(mCancelableVContext,new BatchOptions("fetch",true))
BatchDatabase batch = mLocalSB.db.beginBatch(
                        mCancelableVContext, new BatchOptions("fetch", true));
table=batch.getTable(mTableName)
Table table = batch.getTable(mTableName);
kvs=InputChannels.asIterable(sync(table.scan(mCancelableVContext,RowRange.range("",""))))
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
VIterable<KeyValue> kvs = InputChannels.asIterable(sync(table.scan(
                        mCancelableVContext, RowRange.range("", ""))));
watchStream=InputChannels.asIterable(sync(mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)))
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
VIterable<WatchChange> watchStream = InputChannels.asIterable(sync(
                        mLocalSB.db.watch(mCancelableVContext, mTableName, "", mResumeMarker)));
watchStream=mLocalSB.db.watch(mCancelableVContext,mTableName,"",mResumeMarker)
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
VIterable<WatchChange> watchStream = mLocalSB.db.watch(
                        mCancelableVContext, mTableName, "", mResumeMarker);
E item = null;
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
boolean handled = false;
e=mItems.get(i)
E e = mItems.get(i);
RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
intent=PdfViewerActivity.createIntent(getApplicationContext(),adapter.getDeviceSetId(position))
Intent intent = PdfViewerActivity.createIntent(
                        getApplicationContext(),
                        adapter.getDeviceSetId(position));
ItemTouchHelper.SimpleCallback touchCallback;
id=item.getItemId()
int id = item.getItemId();
fullPdfUri=data.getData()
Uri fullPdfUri = data.getData();
intent=PdfViewerActivity.createIntent(this,fullPdfUri)
Intent intent = PdfViewerActivity.createIntent(this, fullPdfUri);
CardView v = (CardView) LayoutInflater.from(parent.getContext())
                .inflate(R.layout.device_set_list_item, parent, false);
ds=mDeviceSets.getItem(position)
DeviceSet ds = mDeviceSets.getItem(position);
List<String> deviceNames = new ArrayList<>();
device=mDevices.getItemById(deviceId)
Device device = mDevices.getItemById(deviceId);
file=mFiles.getItemById(ds.getFileId())
File file = mFiles.getItemById(ds.getFileId());
directory=context.getFilesDir()
File directory = context.getFilesDir();
basename=String.format("reader-%s.log",now())
String basename = String.format("reader-%s.log", now());
File file = new File(directory, basename);
Device result = instance;
id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID)
String id = Settings.Secure.getString(
                            context.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
String name = Build.MODEL;
arch=System.getProperty("os.arch")
String arch = System.getProperty("os.arch");
size=getScreenSize(context)
Point size = getScreenSize(context);
Screen screen = new Screen(size.x, size.y);
WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
display=wm.getDefaultDisplay()
Display display = wm.getDefaultDisplay();
Point size = new Point();
result=getMD5HashString(fileContents)
String result = getMD5HashString(fileContents);
md=MessageDigest.getInstance("MD5")
MessageDigest md = MessageDigest.getInstance("MD5");
Intent intent = new Intent(context, PdfViewerActivity.class);
Intent intent = new Intent(context, PdfViewerActivity.class);
changed=mDeviceSets.getItem(position)
DeviceSet changed = mDeviceSets.getItem(position);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
intent=getIntent()
Intent intent = getIntent();
ds=mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID))
DeviceSet ds = mDeviceSets.getItemById(intent.getStringExtra(EXTRA_DEVICE_SET_ID));
uri=intent.getData()
Uri uri = intent.getData();
uri=intent.getParcelableExtra(Intent.EXTRA_STREAM)
Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
bytes=getBytesFromUri(fileUri)
byte[] bytes = getBytesFromUri(fileUri);
vFile=getDB().storeBytes(bytes,getTitleFromUri(fileUri))
File vFile = getDB().storeBytes(bytes, getTitleFromUri(fileUri));
ds=createDeviceSet(vFile)
DeviceSet ds = createDeviceSet(vFile);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
int page = 1;
int zoom = 1;
boolean linked = true;
id=IdFactory.getRandomId()
String id = IdFactory.getRandomId();
fileId=vFile.getId()
String fileId = vFile.getId();
Map<String, DeviceMeta> devices = new HashMap<>();
file=getDB().getFileList().getItemById(ds.getFileId())
File file = getDB().getFileList().getItemById(ds.getFileId());
bytes=getDB().readBytes(file)
byte[] bytes = getDB().readBytes(file);
final java.io.File jFile = new java.io.File(getCacheDir(), ds.getFileId());
dm=createDeviceMeta()
DeviceMeta dm = createDeviceMeta();
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
cursor=getContentResolver().query(uri,null,null,null,null)
Cursor cursor = getContentResolver().query(uri, null, null, null, null);
nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
smallestPage=getSmallestPage(linkedDevices)
int smallestPage = getSmallestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
dm=getDeviceMeta()
DeviceMeta dm = getDeviceMeta();
linkedDevices=getLinkedDevices()
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
Map<String, DeviceMeta> linkedDevices = getLinkedDevices();
largestPage=getLargestPage(linkedDevices)
int largestPage = getLargestPage(linkedDevices);
dm=linkedDevices.get(deviceId)
DeviceMeta dm = linkedDevices.get(deviceId);
devices=mCurrentDS.getDevices()
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> devices = mCurrentDS.getDevices();
Map<String, DeviceMeta> result = new HashMap<>();
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
int result = -1;
dm=devices.get(deviceId)
DeviceMeta dm = devices.get(deviceId);
settings=getSettings()
WebSettings settings = getSettings();
File file = new File(request.getUrl().getPath());
InputStream inputStream = new FileInputStream(file);

Diff of 95e80def106409ce7928379feaa7f587c6daf67f and 3b097e4b860669a5c3624814bfb67cca49952ab2:
	--> Added type argument methods = 2
	--> recency = months
	--> Added wildcards = 0
	--> recency = null
	--> Added type declarations  = 46
	--> recency = month
	--> Added type parameter methods = 0
	--> recency = null
	--> Added type parameter fields = 0
	--> recency = null
	--> Added diamonds = 21
	--> recency = months
	--> Added explicit method invocations = 0
	--> recency = null
	--> Added implicit method invocations = 33
	--> recency = months
	--> Added class instantiations = 3
	--> recency = month
	--> Added nested = 0
	--> recency = null
	--> Added bounds = 0
	--> recency = null

 Reverted revision 95e80def106409ce7928379feaa7f587c6daf67f to 3b097e4b860669a5c3624814bfb67cca49952ab2

************Analysis complete************
Added generics to repository vanadium/reader = 42

YoungSeok Yoon added type argument method count = 2
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 46
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 21
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 33
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 42

YoungSeok Yoon added type argument method count = 2
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 46
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 21
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 33
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 42

YoungSeok Yoon added type argument method count = 2
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 46
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 21
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 33
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 42

YoungSeok Yoon added type argument method count = 2
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 46
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 21
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 33
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 42

YoungSeok Yoon added type argument method count = 2
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 46
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 21
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 33
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 42

YoungSeok Yoon added type argument method count = 2
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 46
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 21
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 33
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 42

YoungSeok Yoon added type argument method count = 2
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 46
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 21
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 33
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 42

YoungSeok Yoon added type argument method count = 2
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 46
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 21
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 33
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 42

YoungSeok Yoon added type argument method count = 2
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 46
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 21
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 33
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 42

YoungSeok Yoon added type argument method count = 2
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 46
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 21
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 33
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 42

YoungSeok Yoon added type argument method count = 2
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 46
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 21
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 33
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 42

YoungSeok Yoon added type argument method count = 2
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 46
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 21
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 33
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 42

YoungSeok Yoon added type argument method count = 2
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 46
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 21
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 33
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 42

YoungSeok Yoon added type argument method count = 2
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 46
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 21
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 33
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 42

YoungSeok Yoon added type argument method count = 2
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 46
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 21
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 33
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 42

YoungSeok Yoon added type argument method count = 2
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 46
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 21
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 33
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 42

YoungSeok Yoon added type argument method count = 2
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 46
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 21
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 33
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 42

YoungSeok Yoon added type argument method count = 2
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 46
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 21
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 33
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 42

YoungSeok Yoon added type argument method count = 2
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 46
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 21
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 33
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 42

YoungSeok Yoon added type argument method count = 2
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 46
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 21
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 33
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 42

YoungSeok Yoon added type argument method count = 2
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 46
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 21
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 33
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 42

YoungSeok Yoon added type argument method count = 2
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 46
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 21
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 33
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 42

YoungSeok Yoon added type argument method count = 2
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 46
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 21
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 33
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 42

YoungSeok Yoon added type argument method count = 2
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 46
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 21
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 33
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 42

YoungSeok Yoon added type argument method count = 2
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 46
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 21
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 33
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 42

YoungSeok Yoon added type argument method count = 2
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 46
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 21
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 33
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 42

YoungSeok Yoon added type argument method count = 2
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 46
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 21
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 33
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 42

YoungSeok Yoon added type argument method count = 2
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 46
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 21
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 33
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 42

YoungSeok Yoon added type argument method count = 2
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 46
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 21
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 33
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 42

YoungSeok Yoon added type argument method count = 2
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 46
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 21
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 33
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 42

YoungSeok Yoon added type argument method count = 2
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 46
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 21
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 33
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 42

YoungSeok Yoon added type argument method count = 2
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 46
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 21
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 33
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 42

YoungSeok Yoon added type argument method count = 2
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 46
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 21
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 33
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 42

YoungSeok Yoon added type argument method count = 2
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 46
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 21
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 33
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
************Analysis complete************
Added generics to repository vanadium/reader = 42

YoungSeok Yoon added type argument method count = 2
	--> recency = months
YoungSeok Yoon added wildcard count = 0
	--> recency = null
YoungSeok Yoon added type declaration count = 46
	--> recency = month
YoungSeok Yoon added type parameter method count = 0
	--> recency = null
YoungSeok Yoon added type parameter field count = 0
	--> recency = null
YoungSeok Yoon added diamond count = 21
	--> recency = months
YoungSeok Yoon added method invocation count = 0
	--> recency = null
YoungSeok Yoon added implicit method invocation count = 33
	--> recency = months
YoungSeok Yoon added class instantiation count = 3
	--> recency = month
YoungSeok Yoon added nested count = 0
	--> recency = null
YoungSeok Yoon added bounds count = 0
	--> recency = null
