{\rtf1\adeflang1025\ansi\ansicpg1252\uc1\adeff0\deff0\stshfdbch0\stshfloch31506\stshfhich31506\stshfbi31506\deflang1033\deflangfe1033\themelang1033\themelangfe0\themelangcs0{\fonttbl{\f0\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fbidi \fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fbidi \fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f3\fbidi \froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}{\f4\fbidi \fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Helvetica;}
{\f5\fbidi \fmodern\fcharset0\fprq1{\*\panose 02070409020205020404}Courier;}{\f6\fbidi \froman\fcharset0\fprq2{\*\panose 02020603040505020304}Tms Rmn;}{\f7\fbidi \fswiss\fcharset0\fprq2{\*\panose 020b0604020202030204}Helv;}
{\f8\fbidi \froman\fcharset0\fprq2{\*\panose 02040503060506020304}New York;}{\f9\fbidi \fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}System;}{\f10\fbidi \fnil\fcharset2\fprq2{\*\panose 05000000000000000000}Wingdings;}
{\f11\fbidi \fmodern\fcharset128\fprq1{\*\panose 02020609040205080304}MS Mincho{\*\falt ?l?r ??\'81\'66c};}{\f12\fbidi \froman\fcharset129\fprq2{\*\panose 02030600000101010101}Batang{\*\falt \'a9\'f6UAA};}
{\f13\fbidi \fnil\fcharset134\fprq2{\*\panose 02010600030101010101}SimSun{\*\falt ??\'a8\'ac?};}{\f14\fbidi \froman\fcharset136\fprq2{\*\panose 02020500000000000000}PMingLiU{\*\falt \'a1\'50s2OcuAe};}
{\f15\fbidi \fmodern\fcharset128\fprq1{\*\panose 020b0609070205080204}MS Gothic{\*\falt ?l?r ?S?V?b?N};}{\f16\fbidi \fswiss\fcharset129\fprq2{\*\panose 020b0600000101010101}Dotum{\*\falt \'a5\'ec\'a2\'ac\'a2\'afo};}
{\f17\fbidi \fmodern\fcharset134\fprq1{\*\panose 02010609060101010101}SimHei{\*\falt o\'a8\'b2\'a8\'ac?};}{\f18\fbidi \fmodern\fcharset136\fprq1{\*\panose 02020509000000000000}MingLiU{\*\falt 2OcuAe};}
{\f19\fbidi \froman\fcharset128\fprq1{\*\panose 02020609040305080305}Mincho{\*\falt ??\'81\'66c};}{\f20\fbidi \fswiss\fcharset129\fprq2{\*\panose 020b0600000101010101}Gulim{\*\falt \'a1\'be\'a8\'f9\'a2\'ac\'a9\'f7};}
{\f21\fbidi \froman\fcharset0\fprq2{\*\panose 02040604050505020304}Century;}{\f22\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Angsana New;}{\f23\fbidi \fswiss\fcharset0\fprq2{\*\panose 020b0304020202020204}Cordia New;}
{\f24\fbidi \froman\fcharset0\fprq2{\*\panose 02040503050203030202}Mangal;}{\f25\fbidi \fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Latha;}{\f26\fbidi \froman\fcharset0\fprq2{\*\panose 010a0502050306030303}Sylfaen;}
{\f27\fbidi \fswiss\fcharset0\fprq2{\*\panose 020b0502040204020203}Vrinda;}{\f28\fbidi \fswiss\fcharset0\fprq2{\*\panose 020b0502040204020203}Raavi;}{\f29\fbidi \fswiss\fcharset0\fprq2{\*\panose 020b0502040204020203}Shruti;}
{\f30\fbidi \froman\fcharset1\fprq2{\*\panose 00000400000000000000}Sendnya;}{\f31\fbidi \fswiss\fcharset0\fprq2{\*\panose 020b0502040204020203}Gautami;}{\f32\fbidi \fswiss\fcharset0\fprq2{\*\panose 020b0502040204020203}Tunga;}
{\f33\fbidi \fscript\fcharset0\fprq2{\*\panose 03080600000000000000}Estrangelo Edessa;}{\f34\fbidi \froman\fcharset0\fprq2{\*\panose 02040503050406030204}Cambria Math;}{\f35\fbidi \fswiss\fcharset128\fprq2{\*\panose 020b0604020202020204}Arial Unicode MS;}
{\f36\fbidi \froman\fcharset0\fprq2{\*\panose 02040503050406030204}Cambria;}{\f37\fbidi \fswiss\fcharset0\fprq2{\*\panose 020f0502020204030204}Calibri;}{\f38\fbidi \fswiss\fcharset0\fprq2{\*\panose 020b0604030504040204}Tahoma;}
{\f39\fbidi \fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Consolas;}{\flomajor\f31500\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\fdbmajor\f31501\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fhimajor\f31502\fbidi \froman\fcharset0\fprq2{\*\panose 02040503050406030204}Cambria;}
{\fbimajor\f31503\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\flominor\f31504\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\fdbminor\f31505\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fhiminor\f31506\fbidi \fswiss\fcharset0\fprq2{\*\panose 020f0502020204030204}Calibri;}
{\fbiminor\f31507\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f40\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\f41\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\f43\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\f44\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\f45\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f46\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\f47\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\f48\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\f50\fbidi \fswiss\fcharset238\fprq2 Arial CE;}{\f51\fbidi \fswiss\fcharset204\fprq2 Arial Cyr;}
{\f53\fbidi \fswiss\fcharset161\fprq2 Arial Greek;}{\f54\fbidi \fswiss\fcharset162\fprq2 Arial Tur;}{\f55\fbidi \fswiss\fcharset177\fprq2 Arial (Hebrew);}{\f56\fbidi \fswiss\fcharset178\fprq2 Arial (Arabic);}
{\f57\fbidi \fswiss\fcharset186\fprq2 Arial Baltic;}{\f58\fbidi \fswiss\fcharset163\fprq2 Arial (Vietnamese);}{\f60\fbidi \fmodern\fcharset238\fprq1 Courier New CE;}{\f61\fbidi \fmodern\fcharset204\fprq1 Courier New Cyr;}
{\f63\fbidi \fmodern\fcharset161\fprq1 Courier New Greek;}{\f64\fbidi \fmodern\fcharset162\fprq1 Courier New Tur;}{\f65\fbidi \fmodern\fcharset177\fprq1 Courier New (Hebrew);}{\f66\fbidi \fmodern\fcharset178\fprq1 Courier New (Arabic);}
{\f67\fbidi \fmodern\fcharset186\fprq1 Courier New Baltic;}{\f68\fbidi \fmodern\fcharset163\fprq1 Courier New (Vietnamese);}{\f80\fbidi \fswiss\fcharset238\fprq2 Helvetica CE;}{\f81\fbidi \fswiss\fcharset204\fprq2 Helvetica Cyr;}
{\f83\fbidi \fswiss\fcharset161\fprq2 Helvetica Greek;}{\f84\fbidi \fswiss\fcharset162\fprq2 Helvetica Tur;}{\f85\fbidi \fswiss\fcharset177\fprq2 Helvetica (Hebrew);}{\f86\fbidi \fswiss\fcharset178\fprq2 Helvetica (Arabic);}
{\f87\fbidi \fswiss\fcharset186\fprq2 Helvetica Baltic;}{\f88\fbidi \fswiss\fcharset163\fprq2 Helvetica (Vietnamese);}{\f152\fbidi \fmodern\fcharset0\fprq1 MS Mincho Western{\*\falt ?l?r ??\'81\'66c};}
{\f150\fbidi \fmodern\fcharset238\fprq1 MS Mincho CE{\*\falt ?l?r ??\'81\'66c};}{\f151\fbidi \fmodern\fcharset204\fprq1 MS Mincho Cyr{\*\falt ?l?r ??\'81\'66c};}{\f153\fbidi \fmodern\fcharset161\fprq1 MS Mincho Greek{\*\falt ?l?r ??\'81\'66c};}
{\f154\fbidi \fmodern\fcharset162\fprq1 MS Mincho Tur{\*\falt ?l?r ??\'81\'66c};}{\f157\fbidi \fmodern\fcharset186\fprq1 MS Mincho Baltic{\*\falt ?l?r ??\'81\'66c};}{\f162\fbidi \froman\fcharset0\fprq2 Batang Western{\*\falt \'a9\'f6UAA};}
{\f160\fbidi \froman\fcharset238\fprq2 Batang CE{\*\falt \'a9\'f6UAA};}{\f161\fbidi \froman\fcharset204\fprq2 Batang Cyr{\*\falt \'a9\'f6UAA};}{\f163\fbidi \froman\fcharset161\fprq2 Batang Greek{\*\falt \'a9\'f6UAA};}
{\f164\fbidi \froman\fcharset162\fprq2 Batang Tur{\*\falt \'a9\'f6UAA};}{\f167\fbidi \froman\fcharset186\fprq2 Batang Baltic{\*\falt \'a9\'f6UAA};}{\f172\fbidi \fnil\fcharset0\fprq2 SimSun Western{\*\falt ??\'a8\'ac?};}
{\f182\fbidi \froman\fcharset0\fprq2 PMingLiU Western{\*\falt \'a1\'50s2OcuAe};}{\f192\fbidi \fmodern\fcharset0\fprq1 MS Gothic Western{\*\falt ?l?r ?S?V?b?N};}{\f190\fbidi \fmodern\fcharset238\fprq1 MS Gothic CE{\*\falt ?l?r ?S?V?b?N};}
{\f191\fbidi \fmodern\fcharset204\fprq1 MS Gothic Cyr{\*\falt ?l?r ?S?V?b?N};}{\f193\fbidi \fmodern\fcharset161\fprq1 MS Gothic Greek{\*\falt ?l?r ?S?V?b?N};}{\f194\fbidi \fmodern\fcharset162\fprq1 MS Gothic Tur{\*\falt ?l?r ?S?V?b?N};}
{\f197\fbidi \fmodern\fcharset186\fprq1 MS Gothic Baltic{\*\falt ?l?r ?S?V?b?N};}{\f202\fbidi \fswiss\fcharset0\fprq2 Dotum Western{\*\falt \'a5\'ec\'a2\'ac\'a2\'afo};}{\f200\fbidi \fswiss\fcharset238\fprq2 Dotum CE{\*\falt \'a5\'ec\'a2\'ac\'a2\'afo};}
{\f201\fbidi \fswiss\fcharset204\fprq2 Dotum Cyr{\*\falt \'a5\'ec\'a2\'ac\'a2\'afo};}{\f203\fbidi \fswiss\fcharset161\fprq2 Dotum Greek{\*\falt \'a5\'ec\'a2\'ac\'a2\'afo};}
{\f204\fbidi \fswiss\fcharset162\fprq2 Dotum Tur{\*\falt \'a5\'ec\'a2\'ac\'a2\'afo};}{\f207\fbidi \fswiss\fcharset186\fprq2 Dotum Baltic{\*\falt \'a5\'ec\'a2\'ac\'a2\'afo};}{\f212\fbidi \fmodern\fcharset0\fprq1 SimHei Western{\*\falt o\'a8\'b2\'a8\'ac?};}
{\f222\fbidi \fmodern\fcharset0\fprq1 MingLiU Western{\*\falt 2OcuAe};}{\f242\fbidi \fswiss\fcharset0\fprq2 Gulim Western{\*\falt \'a1\'be\'a8\'f9\'a2\'ac\'a9\'f7};}
{\f240\fbidi \fswiss\fcharset238\fprq2 Gulim CE{\*\falt \'a1\'be\'a8\'f9\'a2\'ac\'a9\'f7};}{\f241\fbidi \fswiss\fcharset204\fprq2 Gulim Cyr{\*\falt \'a1\'be\'a8\'f9\'a2\'ac\'a9\'f7};}
{\f243\fbidi \fswiss\fcharset161\fprq2 Gulim Greek{\*\falt \'a1\'be\'a8\'f9\'a2\'ac\'a9\'f7};}{\f244\fbidi \fswiss\fcharset162\fprq2 Gulim Tur{\*\falt \'a1\'be\'a8\'f9\'a2\'ac\'a9\'f7};}
{\f247\fbidi \fswiss\fcharset186\fprq2 Gulim Baltic{\*\falt \'a1\'be\'a8\'f9\'a2\'ac\'a9\'f7};}{\f250\fbidi \froman\fcharset238\fprq2 Century CE;}{\f251\fbidi \froman\fcharset204\fprq2 Century Cyr;}{\f253\fbidi \froman\fcharset161\fprq2 Century Greek;}
{\f254\fbidi \froman\fcharset162\fprq2 Century Tur;}{\f257\fbidi \froman\fcharset186\fprq2 Century Baltic;}{\f269\fbidi \froman\fcharset222\fprq2 Angsana New (Thai);}{\f279\fbidi \fswiss\fcharset222\fprq2 Cordia New (Thai);}
{\f300\fbidi \froman\fcharset238\fprq2 Sylfaen CE;}{\f301\fbidi \froman\fcharset204\fprq2 Sylfaen Cyr;}{\f303\fbidi \froman\fcharset161\fprq2 Sylfaen Greek;}{\f304\fbidi \froman\fcharset162\fprq2 Sylfaen Tur;}
{\f307\fbidi \froman\fcharset186\fprq2 Sylfaen Baltic;}{\f380\fbidi \froman\fcharset238\fprq2 Cambria Math CE;}{\f381\fbidi \froman\fcharset204\fprq2 Cambria Math Cyr;}{\f383\fbidi \froman\fcharset161\fprq2 Cambria Math Greek;}
{\f384\fbidi \froman\fcharset162\fprq2 Cambria Math Tur;}{\f387\fbidi \froman\fcharset186\fprq2 Cambria Math Baltic;}{\f388\fbidi \froman\fcharset163\fprq2 Cambria Math (Vietnamese);}{\f392\fbidi \fswiss\fcharset0\fprq2 Arial Unicode MS Western;}
{\f390\fbidi \fswiss\fcharset238\fprq2 Arial Unicode MS CE;}{\f391\fbidi \fswiss\fcharset204\fprq2 Arial Unicode MS Cyr;}{\f393\fbidi \fswiss\fcharset161\fprq2 Arial Unicode MS Greek;}{\f394\fbidi \fswiss\fcharset162\fprq2 Arial Unicode MS Tur;}
{\f395\fbidi \fswiss\fcharset177\fprq2 Arial Unicode MS (Hebrew);}{\f396\fbidi \fswiss\fcharset178\fprq2 Arial Unicode MS (Arabic);}{\f397\fbidi \fswiss\fcharset186\fprq2 Arial Unicode MS Baltic;}
{\f398\fbidi \fswiss\fcharset163\fprq2 Arial Unicode MS (Vietnamese);}{\f399\fbidi \fswiss\fcharset222\fprq2 Arial Unicode MS (Thai);}{\f400\fbidi \froman\fcharset238\fprq2 Cambria CE;}{\f401\fbidi \froman\fcharset204\fprq2 Cambria Cyr;}
{\f403\fbidi \froman\fcharset161\fprq2 Cambria Greek;}{\f404\fbidi \froman\fcharset162\fprq2 Cambria Tur;}{\f407\fbidi \froman\fcharset186\fprq2 Cambria Baltic;}{\f408\fbidi \froman\fcharset163\fprq2 Cambria (Vietnamese);}
{\f410\fbidi \fswiss\fcharset238\fprq2 Calibri CE;}{\f411\fbidi \fswiss\fcharset204\fprq2 Calibri Cyr;}{\f413\fbidi \fswiss\fcharset161\fprq2 Calibri Greek;}{\f414\fbidi \fswiss\fcharset162\fprq2 Calibri Tur;}
{\f417\fbidi \fswiss\fcharset186\fprq2 Calibri Baltic;}{\f418\fbidi \fswiss\fcharset163\fprq2 Calibri (Vietnamese);}{\f420\fbidi \fswiss\fcharset238\fprq2 Tahoma CE;}{\f421\fbidi \fswiss\fcharset204\fprq2 Tahoma Cyr;}
{\f423\fbidi \fswiss\fcharset161\fprq2 Tahoma Greek;}{\f424\fbidi \fswiss\fcharset162\fprq2 Tahoma Tur;}{\f425\fbidi \fswiss\fcharset177\fprq2 Tahoma (Hebrew);}{\f426\fbidi \fswiss\fcharset178\fprq2 Tahoma (Arabic);}
{\f427\fbidi \fswiss\fcharset186\fprq2 Tahoma Baltic;}{\f428\fbidi \fswiss\fcharset163\fprq2 Tahoma (Vietnamese);}{\f429\fbidi \fswiss\fcharset222\fprq2 Tahoma (Thai);}{\f430\fbidi \fmodern\fcharset238\fprq1 Consolas CE;}
{\f431\fbidi \fmodern\fcharset204\fprq1 Consolas Cyr;}{\f433\fbidi \fmodern\fcharset161\fprq1 Consolas Greek;}{\f434\fbidi \fmodern\fcharset162\fprq1 Consolas Tur;}{\f437\fbidi \fmodern\fcharset186\fprq1 Consolas Baltic;}
{\f438\fbidi \fmodern\fcharset163\fprq1 Consolas (Vietnamese);}{\flomajor\f31508\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\flomajor\f31509\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\flomajor\f31511\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\flomajor\f31512\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\flomajor\f31513\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\flomajor\f31514\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\flomajor\f31515\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\flomajor\f31516\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\fdbmajor\f31518\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fdbmajor\f31519\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fdbmajor\f31521\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}
{\fdbmajor\f31522\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fdbmajor\f31523\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fdbmajor\f31524\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\fdbmajor\f31525\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fdbmajor\f31526\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fhimajor\f31528\fbidi \froman\fcharset238\fprq2 Cambria CE;}
{\fhimajor\f31529\fbidi \froman\fcharset204\fprq2 Cambria Cyr;}{\fhimajor\f31531\fbidi \froman\fcharset161\fprq2 Cambria Greek;}{\fhimajor\f31532\fbidi \froman\fcharset162\fprq2 Cambria Tur;}
{\fhimajor\f31535\fbidi \froman\fcharset186\fprq2 Cambria Baltic;}{\fhimajor\f31536\fbidi \froman\fcharset163\fprq2 Cambria (Vietnamese);}{\fbimajor\f31538\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\fbimajor\f31539\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fbimajor\f31541\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fbimajor\f31542\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\fbimajor\f31543\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fbimajor\f31544\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fbimajor\f31545\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\fbimajor\f31546\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\flominor\f31548\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\flominor\f31549\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\flominor\f31551\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\flominor\f31552\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\flominor\f31553\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\flominor\f31554\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\flominor\f31555\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\flominor\f31556\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\fdbminor\f31558\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fdbminor\f31559\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fdbminor\f31561\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}
{\fdbminor\f31562\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fdbminor\f31563\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fdbminor\f31564\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\fdbminor\f31565\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fdbminor\f31566\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fhiminor\f31568\fbidi \fswiss\fcharset238\fprq2 Calibri CE;}
{\fhiminor\f31569\fbidi \fswiss\fcharset204\fprq2 Calibri Cyr;}{\fhiminor\f31571\fbidi \fswiss\fcharset161\fprq2 Calibri Greek;}{\fhiminor\f31572\fbidi \fswiss\fcharset162\fprq2 Calibri Tur;}
{\fhiminor\f31575\fbidi \fswiss\fcharset186\fprq2 Calibri Baltic;}{\fhiminor\f31576\fbidi \fswiss\fcharset163\fprq2 Calibri (Vietnamese);}{\fbiminor\f31578\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\fbiminor\f31579\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fbiminor\f31581\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fbiminor\f31582\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\fbiminor\f31583\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fbiminor\f31584\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fbiminor\f31585\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\fbiminor\f31586\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;
\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\*\defchp \f31506\fs22 }{\*\defpap 
\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 }\noqfpromote {\stylesheet{\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 
\af0\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext0 \sqformat \spriority0 \styrsid3429338 Normal;}{\*\cs10 \additive \ssemihidden \sunhideused \spriority1 Default Paragraph Font;}{\*
\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tblind0\tblindtype3\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv \ql \li0\ri0\sa200\sl276\slmult1
\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af31506\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext11 \ssemihidden \sunhideused Normal Table;}{
\s15\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs21\alang1025 \ltrch\fcs0 \f39\fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext15 \slink16 \sunhideused \styrsid3429338 
Plain Text;}{\*\cs16 \additive \rtlch\fcs1 \af0\afs21 \ltrch\fcs0 \f39\fs21 \sbasedon10 \slink15 \slocked \styrsid3429338 Plain Text Char;}}{\*\revtbl {Unknown;}}{\*\rsidtbl \rsid1461392\rsid2509817\rsid2757183\rsid3429338\rsid3562586\rsid5267074}{\mmathPr\mmathFont34
\mbrkBin0\mbrkBinSub0\msmallFrac0\mdispDef1\mlMargin0\mrMargin0\mdefJc1\mwrapIndent1440\mintLim0\mnaryLim1}{\info{\author BrittJ}{\operator BrittJ}{\creatim\yr2015\mo1\dy5\hr12\min47}{\revtim\yr2015\mo1\dy5\hr12\min47}{\version2}{\edmins1}{\nofpages416}
{\nofwords151817}{\nofchars865361}{\*\company Microsoft}{\nofcharsws1015148}{\vern49167}}{\*\xmlnstbl {\xmlns1 http://schemas.microsoft.com/office/word/2003/wordml}}\paperw12240\paperh15840\margl1501\margr1502\margt1440\margb1440\gutter0\ltrsect 
\widowctrl\ftnbj\aenddoc\trackmoves0\trackformatting1\donotembedsysfont1\relyonvml0\donotembedlingdata0\grfdocevents0\validatexml1\showplaceholdtext0\ignoremixedcontent0\saveinvalidxml0\showxmlerrors1\noxlattoyen
\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\formshade\horzdoc\dgmargin\dghspace180\dgvspace180\dghorigin1501\dgvorigin1440\dghshow1\dgvshow1
\jexpand\viewkind1\viewscale100\pgbrdrhead\pgbrdrfoot\splytwnine\ftnlytwnine\htmautsp\nolnhtadjtbl\useltbaln\alntblind\lytcalctblwd\lyttblrtgr\lnbrkrule\nobrkwrptbl\snaptogridincell\allowfieldendsel\wrppunct
\asianbrkrule\rsidroot3429338\newtblstyruls\nogrowautofit\usenormstyforlist\noindnmbrts\felnbrelev\nocxsptable\indrlsweleven\noafcnsttbl\afelev\utinl\hwelev\spltpgpar\notcvasp\notbrkcnstfrctbl\notvatxbx\krnprsnet\cachedcolbal \nouicompat \fet0
{\*\wgrffmtfilter 2450}\nofeaturethrottle1\ilfomacatclnup0\ltrpar \sectd \ltrsect\linex0\endnhere\sectlinegrid360\sectdefaultcl\sectrsid2509817\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2
\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6
\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang 
{\pntxtb (}{\pntxta )}}\pard\plain \ltrpar\s15\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3429338 \rtlch\fcs1 \af0\afs21\alang1025 \ltrch\fcs0 \f39\fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid3429338\charrsid2509817 0
\par Brian McCallister is responsible for commit 2e84e68ec0eb70465a54d41c5a381f4ab452a093
\par Brian McCallister is responsible for commit fc6ea01bc764d1dbab222b788a682b8c5efcff8b
\par Brian McCallister is responsible for commit b9d0bf60c356e785b56f6e99c55baf393ced7d42
\par Brian McCallister is responsible for commit 9ec92abc876cc468ba6f972ee9d3bb7469a5b1cd
\par Brian McCallister is responsible for commit 936e4a28c843fd59b45025e0c42e3bcebb0ebda1
\par Brian McCallister is responsible for commit 6e183e33249d77787c7eb745f2ecb634e439c7e0
\par Brian McCallister is responsible for commit 82e6f2dc32b0204a7e508aecba8bf3430eb252c9
\par Brian McCallister is responsible for commit 444c110112d19c459e02f2517e2fe59c262f5aa2
\par Brian McCallister is responsible for commit 6813002792199961bc28648b67bf74ddaf1b7995
\par Brian McCallister is responsible for commit b0499c140380b66a90573b300687409d594c4e5d
\par Brian McCallister is responsible for commit 17ec358b7e5a877c968dd0392c83a23cedbd83f1
\par Brian McCallister is responsible for commit c64d4cd844a47c1728a62edb9a6691ed2e98e175
\par Brian McCallister is responsible for commit 5a67240db8a6977bfa1c226b941f2e9379bb1b48
\par Brian McCallister is responsible for commit 7271507604d9f4450db2827e9446aa5da1f736ae
\par Brian McCallister is responsible for commit 7b3fa0b4d5b608e37a73e5453e25669f658dbf58
\par Brian McCallister is responsible for commit 8ad79637cf0067e85e447317e54de4e6352c9076
\par Brian McCallister is responsible for commit 6699981d792b90936defeee748e9d9283b55aa78
\par Brian McCallister is responsible for commit de790b9f23a918501d7c6a2ac7ab858fc91f42af
\par Brian McCallister is responsible for commit 48a9bd9e98631d1f2fb419a37c49ecc76cf5cb2a
\par Brian McCallister is responsible for commit 8558ad1480df91f23591e34589b7082e5ec658f7
\par Brian McCallister is responsible for commit daea67a25d0053dd5fedcddfa87d9dbc46a6d5a0
\par Brian McCallister is responsible for commit d847a64f44435ac3163e57b1a0b02a55a9f90cfe
\par Brian McCallister is responsible for commit a1d4fa74b71e0a88516754d738d173db6417cdab
\par Brian McCallister is responsible for commit 78a4f463e6054d06f0bdca9b2f143f89b1edf13f
\par Brian McCallister is responsible for commit b6ea406693ce801f8f6420ef406ba782f4b75f88
\par Brian McCallister is responsible for commit ec18cb80004e0d773474fa0bd4aeca53d35c180f
\par Brian McCallister is responsible for commit 2a4acf1a4061ea0b56070d57ea073bce3e3c8b08
\par Brian McCallister is responsible for commit e1cc8b0981dbd7738505e8e68bdfd13310c69b2f
\par Brian McCallister is responsible for commit 8fa41f6cc24567a8d415b9225f83a9fcc9afaafd
\par Brian McCallister is responsible for commit 6bcf64aacb6abb8f40de992d059ee4c000edf6e0
\par Brian McCallister is responsible for commit 2ecc736bbdc1e98bd88dc9c83c60047bab259108
\par Brian McCallister is responsible for commit 6be5ed7d668998c7663cdf54813a51d32cec8956
\par Brian McCallister is responsible for commit a7a5228d2bd47c50578cf1336548315b08f0f22f
\par Brian McCallister is responsible for commit d5b968845affc533433502444d4f537f2689f8ea
\par Brian McCallister is responsible for commit 2355601dd732cc19d1f99bcc671fcd2ce73db616
\par Brian McCallister is responsible for commit 75f5d515ad61a3ff03cc7a88c7076a99c4a75855
\par Brian McCallister is responsible for commit 984ff7284441b0921f120dadb02903c7c623cb09
\par Brian McCallister is responsible for commit c6319c55b3b8f99f346a096c661546636235cffb
\par Brian McCallister is responsible for commit 768eaa4eba0e50886f50d0371f9945dadd34aec5
\par Brian McCallister is responsible for commit c41fd8b0e607ba7e66c6a7eca7500cc9cfd13161
\par Brian McCallister is responsible for commit 9dc3ffba50458263f343660dccc6956c089f2cca
\par Added Bully.java to ./config-magic/ repository source files.
\par Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added Coercer.java to ./config-magic/ repository source files.
\par Added Coercible.java to ./config-magic/ repository source files.
\par Added CommonsConfigSource.java to ./config-magic/ repository source files.
\par Added Config.java to ./config-magic/ repository source files.
\par Added ConfigReplacements.java to ./config-magic/ repository source files.
\par Added ConfigSource.java to ./config-magic/ repository source files.
\par Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added DataAmount.java to ./config-magic/ repository source files.
\par Added DataAmountUnit.java to ./config-magic/ repository source files.
\par Added Default.java to ./config-magic/ repository source files.
\par Added DefaultCoercibles.java to ./config-magic/ repository source files.
\par Added DefaultNull.java to ./config-magic/ repository source files.
\par Added Description.java to ./config-magic/ repository source files.
\par Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
\par Added Param.java to ./config-magic/ repository source files.
\par Added Separator.java to ./config-magic/ repository source files.
\par Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
\par Added TimeSpan.java to ./config-magic/ repository source files.
\par Added BadConfig.java to ./config-magic/ repository source files.
\par Added CoercionConfig.java to ./config-magic/ repository source files.
\par Added Config1.java to ./config-magic/ repository source files.
\par Added Config2.java to ./config-magic/ repository source files.
\par Added Config3.java to ./config-magic/ repository source files.
\par Added Config4.java to ./config-magic/ repository source files.
\par Added Config5.java to ./config-magic/ repository source files.
\par Added ConfigEnum.java to ./config-magic/ repository source files.
\par Added EnumeratedConfig1.java to ./config-magic/ repository source files.
\par Added MultiConfig.java to ./config-magic/ repository source files.
\par Added Props.java to ./config-magic/ repository source files.
\par Added ReplacementConfig1.java to ./config-magic/ repository source files.
\par Added TestArrays.java to ./config-magic/ repository source files.
\par Added TestBadConfig.java to ./config-magic/ repository source files.
\par Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added TestClasses.java to ./config-magic/ repository source files.
\par Added TestCoercion.java to ./config-magic/ repository source files.
\par Added TestCollections.java to ./config-magic/ repository source files.
\par Added TestCommonsConfig.java to ./config-magic/ repository source files.
\par Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added TestCustomCoercion.java to ./config-magic/ repository source files.
\par Added TestDataAmount.java to ./config-magic/ repository source files.
\par Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
\par Added TestDefaultNull.java to ./config-magic/ repository source files.
\par Added TestDefaultsPresent.java to ./config-magic/ repository source files.
\par Added TestEmptyValue.java to ./config-magic/ repository source files.
\par Added TestEnums.java to ./config-magic/ repository source files.
\par Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
\par Added TestFile.java to ./config-magic/ repository source files.
\par Added TestMultiConfig.java to ./config-magic/ repository source files.
\par Added TestNoFinal.java to ./config-magic/ repository source files.
\par Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added TestTimeSpan.java to ./config-magic/ repository source files.
\par Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
\par Added Wibble.java to ./config-magic/ repository source files.
\par Added WibbleConfig.java to ./config-magic/ repository source files.
\par 
\par Reverted to commit 2e84e68ec0eb70465a54d41c5a381f4ab452a093
\par 
\par Added Bully.java to ./config-magic/ repository source files.
\par Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added Coercer.java to ./config-magic/ repository source files.
\par Added Coercible.java to ./config-magic/ repository source files.
\par Added CommonsConfigSource.java to ./config-magic/ repository source files.
\par Added Config.java to ./config-magic/ repository source files.
\par Added ConfigReplacements.java to ./config-magic/ repository source files.
\par Added ConfigSource.java to ./config-magic/ repository source files.
\par Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added DataAmount.java to ./config-magic/ repository source files.
\par Added DataAmountUnit.java to ./config-magic/ repository source files.
\par Added Default.java to ./config-magic/ repository source files.
\par Added DefaultCoercibles.java to ./config-magic/ repository source files.
\par Added DefaultNull.java to ./config-magic/ repository source files.
\par Added Description.java to ./config-magic/ repository source files.
\par Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
\par Added Param.java to ./config-magic/ repository source files.
\par Added Separator.java to ./config-magic/ repository source files.
\par Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
\par Added TimeSpan.java to ./config-magic/ repository source files.
\par Added BadConfig.java to ./config-magic/ repository source files.
\par Added CoercionConfig.java to ./config-magic/ repository source files.
\par Added Config1.java to ./config-magic/ repository source files.
\par Added Config2.java to ./config-magic/ repository source files.
\par Added Config3.java to ./config-magic/ repository source files.
\par Added Config4.java to ./config-magic/ repository source files.
\par Added Config5.java to ./config-magic/ repository source files.
\par Added ConfigEnum.java to ./config-magic/ repository source files.
\par Added EnumeratedConfig1.java to ./config-magic/ repository source files.
\par Added MultiConfig.java to ./config-magic/ repository source files.
\par Added Props.java to ./config-magic/ repository source files.
\par Added ReplacementConfig1.java to ./config-magic/ repository source files.
\par Added TestArrays.java to ./config-magic/ repository source files.
\par Added TestBadConfig.java to ./config-magic/ repository source files.
\par Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added TestClasses.java to ./config-magic/ repository source files.
\par Added TestCoercion.java to ./config-magic/ repository source files.
\par Added TestCollections.java to ./config-magic/ repository source files.
\par Added TestCommonsConfig.java to ./config-magic/ repository source files.
\par Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added TestCustomCoercion.java to ./config-magic/ repository source files.
\par Added TestDataAmount.java to ./config-magic/ repository source files.
\par Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
\par Added TestDefaultNull.java to ./config-magic/ repository source files.
\par Added TestDefaultsPresent.java to ./config-magic/ repository source files.
\par Added TestEmptyValue.java to ./config-magic/ repository source files.
\par Added TestEnums.java to ./config-magic/ repository source files.
\par Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
\par Added TestFile.java to ./config-magic/ repository source files.
\par Added TestMultiConfig.java to ./config-magic/ repository source files.
\par Added TestNoFinal.java to ./config-magic/ repository source files.
\par Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added TestTimeSpan.java to ./config-magic/ repository source files.
\par Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
\par Added Wibble.java to ./config-magic/ repository source files.
\par Added WibbleConfig.java to ./config-magic/ repository source files.
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bully.java************
\par 
\par Null checks:
\par args != null?if (args[0] instanceof Class<?>) \{
\par                         return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
\par                     \}
\par                     else if (args[0] instanceof WildcardType) \{
\par                         return coerceClass(type, (WildcardType)args[0], value);
\par                     \}
\par value == null?return null;
\par separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
\par ctor != null?result = (Collection)ctor.newInstance();
\par result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
\par coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
\par coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
\par typeCoercer == null?for (Coercible<?> coercible : coercibles) \{
\par                 final Coercer<?> coercer = coercible.accept(type);
\par                 if (coercer != null) \{
\par                     mappings.put(type, coercer);
\par                     typeCoercer = coercer;
\par                     break;
\par                 \}
\par             \}
\par coercer != null?mappings.put(type, coercer);
\par 
\par Null fields: 
\par \tab --> TYPE_COERCIBLES
\par 
\par Null variables: 
\par In method coerceCollection found:
\par \tab --> result
\par In method coerceArray found:
\par \tab --> tokens
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercer.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CommonsConfigSource.java************
\par 
\par Null checks:
\par strings == null?return null;
\par 
\par Null fields: 
\par \tab --> config
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigurationObjectFactory.java************
\par 
\par Null checks:
\par toStringMethod != null?slots.put(toStringMethod, count++);
\par mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
\par annotation != null?propertyNames = annotation.value();
\par propertyNames == null?throw new IllegalArgumentException("Method " +
\par                                                    method.toGenericString() +
\par                                                    " declares config annotation but no field name!");
\par mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
\par value != null?assignedFrom = "property: '" + propertyName + "'";
\par mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
\par value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
\par value == null?if (hasDefault) \{
\par                 value = method.getAnnotation(Default.class).value();
\par                 assignedFrom = "annotation: @Default";
\par 
\par                 logger.info("Assigning default value [\{\}] for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ value, propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par             \}
\par             else if (hasDefaultNull) \{
\par                 logger.info("Assigning null default value for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 assignedFrom = "annotation: @DefaultNull";
\par             \}
\par             else \{
\par                 // Final try: Is the method is actually callable?
\par                 if (!Modifier.isAbstract(method.getModifiers())) \{
\par                     useMethod = true;
\par                     assignedFrom = "method: '" + method.getName() + "()'";
\par                     logger.info("Using method itself for \{\} on [\{\}#\{\}()]",
\par                                 new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 \}
\par                 else \{
\par                     throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
\par                             prettyPrint(propertyNames, mappedReplacements),
\par                             method.toGenericString()));
\par                 \}
\par             \}
\par annotationValues == null?throw new IllegalArgumentException("Method " +
\par                                                method.toGenericString() +
\par                                                " declares config annotation but no field name!");
\par values == null?return "";
\par mappedReplacements != null?sb.append(" translated to [");
\par toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
\par finalValue != null?sb.append(finalValue.toString());
\par toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
\par value != null?logger.info("Assigning value [\{\}] for [\{\}] on [\{\}#\{\}()]",
\par                                     new Object[] \{ value, property, method.getDeclaringClass().getName(), method.getName() \});
\par toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
\par toStringValue == null?final StringBuilder sb = new StringBuilder();
\par 
\par Null fields: 
\par \tab --> method
\par \tab --> slots
\par \tab --> handler
\par \tab --> paramTokenList
\par \tab --> config
\par \tab --> bully
\par \tab --> properties
\par \tab --> defaultValue
\par \tab --> callbacks
\par \tab --> assignedFrom
\par \tab --> finalValue
\par 
\par Null variables: 
\par In method buildSimple found:
\par \tab --> assignedFrom
\par \tab --> value
\par In method internalBuild found:
\par \tab --> fixedMap
\par In method buildParameterized found:
\par \tab --> defaultValue
\par Null assignments: 
\par In method buildSimple found: 
\par \tab --> value
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmountUnit.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> symbol
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultCoercibles.java************
\par 
\par Null checks:
\par candidate != null?final Method valueOfMethod = candidate;
\par value == null?return value == null ? null : valueOfMethod.invoke(null, value);
\par value == null?return value == null ? null : ctor.newInstance(value);
\par value != null?return value != null ? Boolean.valueOf(value) : null;
\par value != null?return value != null ? Byte.valueOf(value) : null;
\par value != null?return value != null ? Short.valueOf(value) : null;
\par value != null?return value != null ? Integer.valueOf(value) : null;
\par value != null?return value != null ? Long.valueOf(value) : null;
\par value != null?return value != null ? Float.valueOf(value) : null;
\par value != null?return value != null ? Double.valueOf(value) : null;
\par value != null?return value != null ? URI.create(value) : null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method accept found:
\par \tab --> coercer
\par Null assignments: 
\par In method accept found: 
\par \tab --> candidate
\par \tab --> coercer
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Description.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Param.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> filterConfig
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeSpan.java************
\par 
\par Null checks:
\par unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> millis
\par \tab --> unit
\par \tab --> period
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CoercionConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config2.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config4.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigEnum.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ReplacementConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestBadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestClasses.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCollections.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestConfigurationObjectFactory.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDataAmount.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEmptyValue.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestExposeMappedReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestMultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestVariousPropertyTypes.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par \tab --> sc
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file WibbleConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of fc6ea01bc764d1dbab222b788a682b8c5efcff8b and 2e84e68ec0eb70465a54d41c5a381f4ab452a093:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit fc6ea01bc764d1dbab222b788a682b8c5efcff8b
\par 
\par Added Bully.java to ./config-magic/ repository source files.
\par Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added Coercer.java to ./config-magic/ repository source files.
\par Added Coercible.java to ./config-magic/ repository source files.
\par Added CommonsConfigSource.java to ./config-magic/ repository source files.
\par Added Config.java to ./config-magic/ repository source files.
\par Added ConfigReplacements.java to ./config-magic/ repository source files.
\par Added ConfigSource.java to ./config-magic/ repository source files.
\par Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added DataAmount.java to ./config-magic/ repository source files.
\par Added DataAmountUnit.java to ./config-magic/ repository source files.
\par Added Default.java to ./config-magic/ repository source files.
\par Added DefaultCoercibles.java to ./config-magic/ repository source files.
\par Added DefaultNull.java to ./config-magic/ repository source files.
\par Added Description.java to ./config-magic/ repository source files.
\par Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
\par Added Param.java to ./config-magic/ repository source files.
\par Added Separator.java to ./config-magic/ repository source files.
\par Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
\par Added TimeSpan.java to ./config-magic/ repository source files.
\par Added BadConfig.java to ./config-magic/ repository source files.
\par Added CoercionConfig.java to ./config-magic/ repository source files.
\par Added Config1.java to ./config-magic/ repository source files.
\par Added Config2.java to ./config-magic/ repository source files.
\par Added Config3.java to ./config-magic/ repository source files.
\par Added Config4.java to ./config-magic/ repository source files.
\par Added Config5.java to ./config-magic/ repository source files.
\par Added ConfigEnum.java to ./config-magic/ repository source files.
\par Added EnumeratedConfig1.java to ./config-magic/ repository source files.
\par Added MultiConfig.java to ./config-magic/ repository source files.
\par Added Props.java to ./config-magic/ repository source files.
\par Added ReplacementConfig1.java to ./config-magic/ repository source files.
\par Added TestArrays.java to ./config-magic/ repository source files.
\par Added TestBadConfig.java to ./config-magic/ repository source files.
\par Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added TestClasses.java to ./config-magic/ repository source files.
\par Added TestCoercion.java to ./config-magic/ repository source files.
\par Added TestCollections.java to ./config-magic/ repository source files.
\par Added TestCommonsConfig.java to ./config-magic/ repository source files.
\par Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added TestCustomCoercion.java to ./config-magic/ repository source files.
\par Added TestDataAmount.java to ./config-magic/ repository source files.
\par Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
\par Added TestDefaultNull.java to ./config-magic/ repository source files.
\par Added TestDefaultsPresent.java to ./config-magic/ repository source files.
\par Added TestEmptyValue.java to ./config-magic/ repository source files.
\par Added TestEnums.java to ./config-magic/ repository source files.
\par Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
\par Added TestFile.java to ./config-magic/ repository source files.
\par Added TestMultiConfig.java to ./config-magic/ repository source files.
\par Added TestNoFinal.java to ./config-magic/ repository source files.
\par Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added TestTimeSpan.java to ./config-magic/ repository source files.
\par Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
\par Added Wibble.java to ./config-magic/ repository source files.
\par Added WibbleConfig.java to ./config-magic/ repository source files.
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bully.java************
\par 
\par Null checks:
\par args != null?if (args[0] instanceof Class<?>) \{
\par                         return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
\par                     \}
\par                     else if (args[0] instanceof WildcardType) \{
\par                         return coerceClass(type, (WildcardType)args[0], value);
\par                     \}
\par value == null?return null;
\par separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
\par ctor != null?result = (Collection)ctor.newInstance();
\par result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
\par coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
\par coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
\par typeCoercer == null?for (Coercible<?> coercible : coercibles) \{
\par                 final Coercer<?> coercer = coercible.accept(type);
\par                 if (coercer != null) \{
\par                     mappings.put(type, coercer);
\par                     typeCoercer = coercer;
\par                     break;
\par                 \}
\par             \}
\par coercer != null?mappings.put(type, coercer);
\par 
\par Null fields: 
\par \tab --> TYPE_COERCIBLES
\par 
\par Null variables: 
\par In method coerceCollection found:
\par \tab --> result
\par In method coerceArray found:
\par \tab --> tokens
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercer.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CommonsConfigSource.java************
\par 
\par Null checks:
\par strings == null?return null;
\par 
\par Null fields: 
\par \tab --> config
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigurationObjectFactory.java************
\par 
\par Null checks:
\par toStringMethod != null?slots.put(toStringMethod, count++);
\par mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
\par annotation != null?propertyNames = annotation.value();
\par propertyNames == null?throw new IllegalArgumentException("Method " +
\par                                                    method.toGenericString() +
\par                                                    " declares config annotation but no field name!");
\par mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
\par value != null?assignedFrom = "property: '" + propertyName + "'";
\par mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
\par value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
\par value == null?if (hasDefault) \{
\par                 value = method.getAnnotation(Default.class).value();
\par                 assignedFrom = "annotation: @Default";
\par 
\par                 logger.info("Assigning default value [\{\}] for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ value, propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par             \}
\par             else if (hasDefaultNull) \{
\par                 logger.info("Assigning null default value for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 assignedFrom = "annotation: @DefaultNull";
\par             \}
\par             else \{
\par                 // Final try: Is the method is actually callable?
\par                 if (!Modifier.isAbstract(method.getModifiers())) \{
\par                     useMethod = true;
\par                     assignedFrom = "method: '" + method.getName() + "()'";
\par                     logger.info("Using method itself for \{\} on [\{\}#\{\}()]",
\par                                 new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 \}
\par                 else \{
\par                     throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
\par                             prettyPrint(propertyNames, mappedReplacements),
\par                             method.toGenericString()));
\par                 \}
\par             \}
\par annotationValues == null?throw new IllegalArgumentException("Method " +
\par                                                method.toGenericString() +
\par                                                " declares config annotation but no field name!");
\par values == null?return "";
\par mappedReplacements != null?sb.append(" translated to [");
\par toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
\par finalValue != null?sb.append(finalValue.toString());
\par toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
\par value != null?logger.info("Assigning value [\{\}] for [\{\}] on [\{\}#\{\}()]",
\par                                     new Object[] \{ value, property, method.getDeclaringClass().getName(), method.getName() \});
\par toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
\par toStringValue == null?final StringBuilder sb = new StringBuilder();
\par 
\par Null fields: 
\par \tab --> method
\par \tab --> slots
\par \tab --> handler
\par \tab --> paramTokenList
\par \tab --> config
\par \tab --> bully
\par \tab --> properties
\par \tab --> defaultValue
\par \tab --> callbacks
\par \tab --> assignedFrom
\par \tab --> finalValue
\par 
\par Null variables: 
\par In method buildSimple found:
\par \tab --> assignedFrom
\par \tab --> value
\par In method internalBuild found:
\par \tab --> fixedMap
\par In method buildParameterized found:
\par \tab --> defaultValue
\par Null assignments: 
\par In method buildSimple found: 
\par \tab --> value
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmountUnit.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> symbol
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultCoercibles.java************
\par 
\par Null checks:
\par candidate != null?final Method valueOfMethod = candidate;
\par value == null?return value == null ? null : valueOfMethod.invoke(null, value);
\par value == null?return value == null ? null : ctor.newInstance(value);
\par value != null?return value != null ? Boolean.valueOf(value) : null;
\par value != null?return value != null ? Byte.valueOf(value) : null;
\par value != null?return value != null ? Short.valueOf(value) : null;
\par value != null?return value != null ? Integer.valueOf(value) : null;
\par value != null?return value != null ? Long.valueOf(value) : null;
\par value != null?return value != null ? Float.valueOf(value) : null;
\par value != null?return value != null ? Double.valueOf(value) : null;
\par value != null?return value != null ? URI.create(value) : null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method accept found:
\par \tab --> coercer
\par Null assignments: 
\par In method accept found: 
\par \tab --> candidate
\par \tab --> coercer
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Description.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Param.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> filterConfig
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeSpan.java************
\par 
\par Null checks:
\par unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> millis
\par \tab --> unit
\par \tab --> period
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CoercionConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config2.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config4.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigEnum.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ReplacementConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestBadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestClasses.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCollections.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestConfigurationObjectFactory.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDataAmount.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEmptyValue.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestExposeMappedReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestMultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestVariousPropertyTypes.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par \tab --> sc
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file WibbleConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of b9d0bf60c356e785b56f6e99c55baf393ced7d42 and fc6ea01bc764d1dbab222b788a682b8c5efcff8b:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 0
\par GitAPIException thrown!
\par Cannot revert commit 'b9d0bf60c356e785b56f6e99c55baf393ced7d42' because it has 2 parents, only commits with exactly one parent are supported
\par 
\par Reverted to commit 9ec92abc876cc468ba6f972ee9d3bb7469a5b1cd
\par 
\par Added Bully.java to ./config-magic/ repository source files.
\par Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added Coercer.java to ./config-magic/ repository source files.
\par Added Coercible.java to ./config-magic/ repository source files.
\par Added CommonsConfigSource.java to ./config-magic/ repository source files.
\par Added Config.java to ./config-magic/ repository source files.
\par Added ConfigReplacements.java to ./config-magic/ repository source files.
\par Added ConfigSource.java to ./config-magic/ repository source files.
\par Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added DataAmount.java to ./config-magic/ repository source files.
\par Added DataAmountUnit.java to ./config-magic/ repository source files.
\par Added Default.java to ./config-magic/ repository source files.
\par Added DefaultCoercibles.java to ./config-magic/ repository source files.
\par Added DefaultNull.java to ./config-magic/ repository source files.
\par Added Description.java to ./config-magic/ repository source files.
\par Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
\par Added Param.java to ./config-magic/ repository source files.
\par Added Separator.java to ./config-magic/ repository source files.
\par Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
\par Added TimeSpan.java to ./config-magic/ repository source files.
\par Added BadConfig.java to ./config-magic/ repository source files.
\par Added CoercionConfig.java to ./config-magic/ repository source files.
\par Added Config1.java to ./config-magic/ repository source files.
\par Added Config2.java to ./config-magic/ repository source files.
\par Added Config3.java to ./config-magic/ repository source files.
\par Added Config4.java to ./config-magic/ repository source files.
\par Added Config5.java to ./config-magic/ repository source files.
\par Added ConfigEnum.java to ./config-magic/ repository source files.
\par Added EnumeratedConfig1.java to ./config-magic/ repository source files.
\par Added MultiConfig.java to ./config-magic/ repository source files.
\par Added Props.java to ./config-magic/ repository source files.
\par Added ReplacementConfig1.java to ./config-magic/ repository source files.
\par Added TestArrays.java to ./config-magic/ repository source files.
\par Added TestBadConfig.java to ./config-magic/ repository source files.
\par Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added TestClasses.java to ./config-magic/ repository source files.
\par Added TestCoercion.java to ./config-magic/ repository source files.
\par Added TestCollections.java to ./config-magic/ repository source files.
\par Added TestCommonsConfig.java to ./config-magic/ repository source files.
\par Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added TestCustomCoercion.java to ./config-magic/ repository source files.
\par Added TestDataAmount.java to ./config-magic/ repository source files.
\par Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
\par Added TestDefaultNull.java to ./config-magic/ repository source files.
\par Added TestDefaultsPresent.java to ./config-magic/ repository source files.
\par Added TestEmptyValue.java to ./config-magic/ repository source files.
\par Added TestEnums.java to ./config-magic/ repository source files.
\par Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
\par Added TestFile.java to ./config-magic/ repository source files.
\par Added TestMultiConfig.java to ./config-magic/ repository source files.
\par Added TestNoFinal.java to ./config-magic/ repository source files.
\par Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added TestTimeSpan.java to ./config-magic/ repository source files.
\par Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
\par Added Wibble.java to ./config-magic/ repository source files.
\par Added WibbleConfig.java to ./config-magic/ repository source files.
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bully.java************
\par 
\par Null checks:
\par args != null?if (args[0] instanceof Class<?>) \{
\par                         return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
\par                     \}
\par                     else if (args[0] instanceof WildcardType) \{
\par                         return coerceClass(type, (WildcardType)args[0], value);
\par                     \}
\par value == null?return null;
\par separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
\par ctor != null?result = (Collection)ctor.newInstance();
\par result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
\par coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
\par coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
\par typeCoercer == null?for (Coercible<?> coercible : coercibles) \{
\par                 final Coercer<?> coercer = coercible.accept(type);
\par                 if (coercer != null) \{
\par                     mappings.put(type, coercer);
\par                     typeCoercer = coercer;
\par                     break;
\par                 \}
\par             \}
\par coercer != null?mappings.put(type, coercer);
\par 
\par Null fields: 
\par \tab --> TYPE_COERCIBLES
\par 
\par Null variables: 
\par In method coerceCollection found:
\par \tab --> result
\par In method coerceArray found:
\par \tab --> tokens
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercer.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CommonsConfigSource.java************
\par 
\par Null checks:
\par strings == null?return null;
\par 
\par Null fields: 
\par \tab --> config
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigurationObjectFactory.java************
\par 
\par Null checks:
\par toStringMethod != null?slots.put(toStringMethod, count++);
\par mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
\par annotation != null?propertyNames = annotation.value();
\par propertyNames == null?throw new IllegalArgumentException("Method " +
\par                                                    method.toGenericString() +
\par                                                    " declares config annotation but no field name!");
\par mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
\par value != null?assignedFrom = "property: '" + propertyName + "'";
\par mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
\par value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
\par value == null?if (hasDefault) \{
\par                 value = method.getAnnotation(Default.class).value();
\par                 assignedFrom = "annotation: @Default";
\par 
\par                 logger.info("Assigning default value [\{\}] for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ value, propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par             \}
\par             else if (hasDefaultNull) \{
\par                 logger.info("Assigning null default value for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 assignedFrom = "annotation: @DefaultNull";
\par             \}
\par             else \{
\par                 // Final try: Is the method is actually callable?
\par                 if (!Modifier.isAbstract(method.getModifiers())) \{
\par                     useMethod = true;
\par                     assignedFrom = "method: '" + method.getName() + "()'";
\par                     logger.info("Using method itself for \{\} on [\{\}#\{\}()]",
\par                                 new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 \}
\par                 else \{
\par                     throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
\par                             prettyPrint(propertyNames, mappedReplacements),
\par                             method.toGenericString()));
\par                 \}
\par             \}
\par annotationValues == null?throw new IllegalArgumentException("Method " +
\par                                                method.toGenericString() +
\par                                                " declares config annotation but no field name!");
\par values == null?return "";
\par mappedReplacements != null?sb.append(" translated to [");
\par toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
\par finalValue != null?sb.append(finalValue.toString());
\par toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
\par value != null?logger.info("Assigning value [\{\}] for [\{\}] on [\{\}#\{\}()]",
\par                                     new Object[] \{ value, property, method.getDeclaringClass().getName(), method.getName() \});
\par toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
\par toStringValue == null?final StringBuilder sb = new StringBuilder();
\par 
\par Null fields: 
\par \tab --> method
\par \tab --> slots
\par \tab --> handler
\par \tab --> paramTokenList
\par \tab --> config
\par \tab --> bully
\par \tab --> properties
\par \tab --> defaultValue
\par \tab --> callbacks
\par \tab --> assignedFrom
\par \tab --> finalValue
\par 
\par Null variables: 
\par In method buildSimple found:
\par \tab --> assignedFrom
\par \tab --> value
\par In method internalBuild found:
\par \tab --> fixedMap
\par In method buildParameterized found:
\par \tab --> defaultValue
\par Null assignments: 
\par In method buildSimple found: 
\par \tab --> value
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmountUnit.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> symbol
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultCoercibles.java************
\par 
\par Null checks:
\par candidate != null?final Method valueOfMethod = candidate;
\par value == null?return value == null ? null : valueOfMethod.invoke(null, value);
\par value == null?return value == null ? null : ctor.newInstance(value);
\par value != null?return value != null ? Boolean.valueOf(value) : null;
\par value != null?return value != null ? Byte.valueOf(value) : null;
\par value != null?return value != null ? Short.valueOf(value) : null;
\par value != null?return value != null ? Integer.valueOf(value) : null;
\par value != null?return value != null ? Long.valueOf(value) : null;
\par value != null?return value != null ? Float.valueOf(value) : null;
\par value != null?return value != null ? Double.valueOf(value) : null;
\par value != null?return value != null ? URI.create(value) : null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method accept found:
\par \tab --> coercer
\par Null assignments: 
\par In method accept found: 
\par \tab --> candidate
\par \tab --> coercer
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Description.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Param.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> filterConfig
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeSpan.java************
\par 
\par Null checks:
\par unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> millis
\par \tab --> unit
\par \tab --> period
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CoercionConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config2.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config4.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigEnum.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ReplacementConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestBadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestClasses.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCollections.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestConfigurationObjectFactory.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDataAmount.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEmptyValue.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestExposeMappedReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestMultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestVariousPropertyTypes.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par \tab --> sc
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file WibbleConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 936e4a28c843fd59b45025e0c42e3bcebb0ebda1 and 9ec92abc876cc468ba6f972ee9d3bb7469a5b1cd:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 936e4a28c843fd59b45025e0c42e3bcebb0ebda1
\par 
\par Added Bully.java to ./config-magic/ repository source files.
\par Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added Coercer.java to ./config-magic/ repository source files.
\par Added Coercible.java to ./config-magic/ repository source files.
\par Added CommonsConfigSource.java to ./config-magic/ repository source files.
\par Added Config.java to ./config-magic/ repository source files.
\par Added ConfigReplacements.java to ./config-magic/ repository source files.
\par Added ConfigSource.java to ./config-magic/ repository source files.
\par Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added DataAmount.java to ./config-magic/ repository source files.
\par Added DataAmountUnit.java to ./config-magic/ repository source files.
\par Added Default.java to ./config-magic/ repository source files.
\par Added DefaultCoercibles.java to ./config-magic/ repository source files.
\par Added DefaultNull.java to ./config-magic/ repository source files.
\par Added Description.java to ./config-magic/ repository source files.
\par Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
\par Added Param.java to ./config-magic/ repository source files.
\par Added Separator.java to ./config-magic/ repository source files.
\par Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
\par Added TimeSpan.java to ./config-magic/ repository source files.
\par Added BadConfig.java to ./config-magic/ repository source files.
\par Added CoercionConfig.java to ./config-magic/ repository source files.
\par Added Config1.java to ./config-magic/ repository source files.
\par Added Config2.java to ./config-magic/ repository source files.
\par Added Config3.java to ./config-magic/ repository source files.
\par Added Config4.java to ./config-magic/ repository source files.
\par Added Config5.java to ./config-magic/ repository source files.
\par Added ConfigEnum.java to ./config-magic/ repository source files.
\par Added EnumeratedConfig1.java to ./config-magic/ repository source files.
\par Added MultiConfig.java to ./config-magic/ repository source files.
\par Added Props.java to ./config-magic/ repository source files.
\par Added ReplacementConfig1.java to ./config-magic/ repository source files.
\par Added TestArrays.java to ./config-magic/ repository source files.
\par Added TestBadConfig.java to ./config-magic/ repository source files.
\par Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added TestClasses.java to ./config-magic/ repository source files.
\par Added TestCoercion.java to ./config-magic/ repository source files.
\par Added TestCollections.java to ./config-magic/ repository source files.
\par Added TestCommonsConfig.java to ./config-magic/ repository source files.
\par Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added TestCustomCoercion.java to ./config-magic/ repository source files.
\par Added TestDataAmount.java to ./config-magic/ repository source files.
\par Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
\par Added TestDefaultNull.java to ./config-magic/ repository source files.
\par Added TestDefaultsPresent.java to ./config-magic/ repository source files.
\par Added TestEmptyValue.java to ./config-magic/ repository source files.
\par Added TestEnums.java to ./config-magic/ repository source files.
\par Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
\par Added TestFile.java to ./config-magic/ repository source files.
\par Added TestMultiConfig.java to ./config-magic/ repository source files.
\par Added TestNoFinal.java to ./config-magic/ repository source files.
\par Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added TestTimeSpan.java to ./config-magic/ repository source files.
\par Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
\par Added Wibble.java to ./config-magic/ repository source files.
\par Added WibbleConfig.java to ./config-magic/ repository source files.
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Bully.java************
\par 
\par Null checks:
\par args != null?if (args[0] instanceof Class<?>) \{
\par                         return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
\par                     \}
\par                     else if (args[0] instanceof WildcardType) \{
\par                         return coerceClass(type, (WildcardType)args[0], value);
\par                     \}
\par value == null?return null;
\par separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
\par ctor != null?result = (Collection)ctor.newInstance();
\par result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
\par coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
\par coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
\par typeCoercer == null?for (Coercible<?> coercible : coercibles) \{
\par                 final Coercer<?> coercer = coercible.accept(type);
\par                 if (coercer != null) \{
\par                     mappings.put(type, coercer);
\par                     typeCoercer = coercer;
\par                     break;
\par                 \}
\par             \}
\par coercer != null?mappings.put(type, coercer);
\par 
\par Null fields: 
\par \tab --> TYPE_COERCIBLES
\par 
\par Null variables: 
\par In method coerceCollection found:
\par \tab --> result
\par In method coerceArray found:
\par \tab --> tokens
\par Null assignments: 
\par ************ For file Coercer.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CommonsConfigSource.java************
\par 
\par Null checks:
\par strings == null?return null;
\par 
\par Null fields: 
\par \tab --> config
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigurationObjectFactory.java************
\par 
\par Null checks:
\par toStringMethod != null?slots.put(toStringMethod, count++);
\par mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
\par annotation != null?propertyNames = annotation.value();
\par propertyNames == null?throw new IllegalArgumentException("Method " +
\par                                                    method.toGenericString() +
\par                                                    " declares config annotation but no field name!");
\par mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
\par value != null?assignedFrom = "property: '" + propertyName + "'";
\par mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
\par value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
\par value == null?if (hasDefault) \{
\par                 value = method.getAnnotation(Default.class).value();
\par                 assignedFrom = "annotation: @Default";
\par 
\par                 logger.info("Assigning default value [\{\}] for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ value, propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par             \}
\par             else if (hasDefaultNull) \{
\par                 logger.info("Assigning null default value for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 assignedFrom = "annotation: @DefaultNull";
\par             \}
\par             else \{
\par                 // Final try: Is the method is actually callable?
\par                 if (!Modifier.isAbstract(method.getModifiers())) \{
\par                     useMethod = true;
\par                     assignedFrom = "method: '" + method.getName() + "()'";
\par                     logger.info("Using method itself for \{\} on [\{\}#\{\}()]",
\par                                 new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 \}
\par                 else \{
\par                     throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
\par                             prettyPrint(propertyNames, mappedReplacements),
\par                             method.toGenericString()));
\par                 \}
\par             \}
\par annotationValues == null?throw new IllegalArgumentException("Method " +
\par                                                method.toGenericString() +
\par                                                " declares config annotation but no field name!");
\par values == null?return "";
\par mappedReplacements != null?sb.append(" translated to [");
\par toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
\par finalValue != null?sb.append(finalValue.toString());
\par toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
\par value != null?logger.info("Assigning value [\{\}] for [\{\}] on [\{\}#\{\}()]",
\par                                     new Object[] \{ value, property, method.getDeclaringClass().getName(), method.getName() \});
\par toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
\par toStringValue == null?final StringBuilder sb = new StringBuilder();
\par 
\par Null fields: 
\par \tab --> method
\par \tab --> slots
\par \tab --> handler
\par \tab --> paramTokenList
\par \tab --> config
\par \tab --> bully
\par \tab --> properties
\par \tab --> defaultValue
\par \tab --> callbacks
\par \tab --> assignedFrom
\par \tab --> finalValue
\par 
\par Null variables: 
\par In method buildSimple found:
\par \tab --> assignedFrom
\par \tab --> value
\par In method internalBuild found:
\par \tab --> fixedMap
\par In method buildParameterized found:
\par \tab --> defaultValue
\par Null assignments: 
\par In method buildSimple found: 
\par \tab --> value
\par ************ For file DataAmountUnit.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> symbol
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultCoercibles.java************
\par 
\par Null checks:
\par candidate != null?final Method valueOfMethod = candidate;
\par value == null?return value == null ? null : valueOfMethod.invoke(null, value);
\par value == null?return value == null ? null : ctor.newInstance(value);
\par value != null?return value != null ? Boolean.valueOf(value) : null;
\par value != null?return value != null ? Byte.valueOf(value) : null;
\par value != null?return value != null ? Short.valueOf(value) : null;
\par value != null?return value != null ? Integer.valueOf(value) : null;
\par value != null?return value != null ? Long.valueOf(value) : null;
\par value != null?return value != null ? Float.valueOf(value) : null;
\par value != null?return value != null ? Double.valueOf(value) : null;
\par value != null?return value != null ? URI.create(value) : null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method accept found:
\par \tab --> coercer
\par Null assignments: 
\par In method accept found: 
\par \tab --> candidate
\par \tab --> coercer
\par ************ For file Description.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Param.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> filterConfig
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeSpan.java************
\par 
\par Null checks:
\par unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> millis
\par \tab --> unit
\par \tab --> period
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CoercionConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config2.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config4.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigEnum.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ReplacementConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestBadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestClasses.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCollections.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestConfigurationObjectFactory.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDataAmount.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEmptyValue.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestExposeMappedReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestMultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestVariousPropertyTypes.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par \tab --> sc
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file WibbleConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bully.java************
\par 
\par Null checks:
\par args != null?if (args[0] instanceof Class<?>) \{
\par                         return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
\par                     \}
\par                     else if (args[0] instanceof WildcardType) \{
\par                         return coerceClass(type, (WildcardType)args[0], value);
\par                     \}
\par value == null?return null;
\par separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
\par ctor != null?result = (Collection)ctor.newInstance();
\par result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
\par coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
\par coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
\par typeCoercer == null?for (Coercible<?> coercible : coercibles) \{
\par                 final Coercer<?> coercer = coercible.accept(type);
\par                 if (coercer != null) \{
\par                     mappings.put(type, coercer);
\par                     typeCoercer = coercer;
\par                     break;
\par                 \}
\par             \}
\par coercer != null?mappings.put(type, coercer);
\par 
\par Null fields: 
\par \tab --> TYPE_COERCIBLES
\par 
\par Null variables: 
\par In method coerceCollection found:
\par \tab --> result
\par In method coerceArray found:
\par \tab --> tokens
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercer.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CommonsConfigSource.java************
\par 
\par Null checks:
\par strings == null?return null;
\par 
\par Null fields: 
\par \tab --> config
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigurationObjectFactory.java************
\par 
\par Null checks:
\par toStringMethod != null?slots.put(toStringMethod, count++);
\par mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
\par annotation != null?propertyNames = annotation.value();
\par propertyNames == null?throw new IllegalArgumentException("Method " +
\par                                                    method.toGenericString() +
\par                                                    " declares config annotation but no field name!");
\par mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
\par value != null?assignedFrom = "property: '" + propertyName + "'";
\par mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
\par value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
\par value == null?if (hasDefault) \{
\par                 value = method.getAnnotation(Default.class).value();
\par                 assignedFrom = "annotation: @Default";
\par 
\par                 logger.info("Assigning default value [\{\}] for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ value, propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par             \}
\par             else if (hasDefaultNull) \{
\par                 logger.info("Assigning null default value for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 assignedFrom = "annotation: @DefaultNull";
\par             \}
\par             else \{
\par                 // Final try: Is the method is actually callable?
\par                 if (!Modifier.isAbstract(method.getModifiers())) \{
\par                     useMethod = true;
\par                     assignedFrom = "method: '" + method.getName() + "()'";
\par                     logger.info("Using method itself for \{\} on [\{\}#\{\}()]",
\par                                 new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 \}
\par                 else \{
\par                     throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
\par                             prettyPrint(propertyNames, mappedReplacements),
\par                             method.toGenericString()));
\par                 \}
\par             \}
\par annotationValues == null?throw new IllegalArgumentException("Method " +
\par                                                method.toGenericString() +
\par                                                " declares config annotation but no field name!");
\par values == null?return "";
\par mappedReplacements != null?sb.append(" translated to [");
\par toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
\par finalValue != null?sb.append(finalValue.toString());
\par toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
\par value != null?logger.info("Assigning value [\{\}] for [\{\}] on [\{\}#\{\}()]",
\par                                     new Object[] \{ value, property, method.getDeclaringClass().getName(), method.getName() \});
\par toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
\par toStringValue == null?final StringBuilder sb = new StringBuilder();
\par 
\par Null fields: 
\par \tab --> method
\par \tab --> slots
\par \tab --> handler
\par \tab --> paramTokenList
\par \tab --> config
\par \tab --> bully
\par \tab --> properties
\par \tab --> defaultValue
\par \tab --> callbacks
\par \tab --> assignedFrom
\par \tab --> finalValue
\par 
\par Null variables: 
\par In method buildSimple found:
\par \tab --> assignedFrom
\par \tab --> value
\par In method internalBuild found:
\par \tab --> fixedMap
\par In method buildParameterized found:
\par \tab --> defaultValue
\par Null assignments: 
\par In method buildSimple found: 
\par \tab --> value
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmountUnit.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> symbol
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultCoercibles.java************
\par 
\par Null checks:
\par candidate != null?final Method valueOfMethod = candidate;
\par value == null?return value == null ? null : valueOfMethod.invoke(null, value);
\par value == null?return value == null ? null : ctor.newInstance(value);
\par value != null?return value != null ? Boolean.valueOf(value) : null;
\par value != null?return value != null ? Byte.valueOf(value) : null;
\par value != null?return value != null ? Short.valueOf(value) : null;
\par value != null?return value != null ? Integer.valueOf(value) : null;
\par value != null?return value != null ? Long.valueOf(value) : null;
\par value != null?return value != null ? Float.valueOf(value) : null;
\par value != null?return value != null ? Double.valueOf(value) : null;
\par value != null?return value != null ? URI.create(value) : null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method accept found:
\par \tab --> coercer
\par Null assignments: 
\par In method accept found: 
\par \tab --> candidate
\par \tab --> coercer
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Description.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Param.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> filterConfig
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeSpan.java************
\par 
\par Null checks:
\par unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> millis
\par \tab --> unit
\par \tab --> period
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CoercionConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config2.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config4.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigEnum.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ReplacementConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestBadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestClasses.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCollections.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestConfigurationObjectFactory.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDataAmount.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEmptyValue.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestExposeMappedReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestMultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestVariousPropertyTypes.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par \tab --> sc
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file WibbleConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 6e183e33249d77787c7eb745f2ecb634e439c7e0 and 936e4a28c843fd59b45025e0c42e3bcebb0ebda1:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 6e183e33249d77787c7eb745f2ecb634e439c7e0
\par 
\par Added Bully.java to ./config-magic/ repository source files.
\par Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added Coercer.java to ./config-magic/ repository source files.
\par Added Coercible.java to ./config-magic/ repository source files.
\par Added CommonsConfigSource.java to ./config-magic/ repository source files.
\par Added Config.java to ./config-magic/ repository source files.
\par Added ConfigReplacements.java to ./config-magic/ repository source files.
\par Added ConfigSource.java to ./config-magic/ repository source files.
\par Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added DataAmount.java to ./config-magic/ repository source files.
\par Added DataAmountUnit.java to ./config-magic/ repository source files.
\par Added Default.java to ./config-magic/ repository source files.
\par Added DefaultCoercibles.java to ./config-magic/ repository source files.
\par Added DefaultNull.java to ./config-magic/ repository source files.
\par Added Description.java to ./config-magic/ repository source files.
\par Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
\par Added Param.java to ./config-magic/ repository source files.
\par Added Separator.java to ./config-magic/ repository source files.
\par Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
\par Added TimeSpan.java to ./config-magic/ repository source files.
\par Added BadConfig.java to ./config-magic/ repository source files.
\par Added CoercionConfig.java to ./config-magic/ repository source files.
\par Added Config1.java to ./config-magic/ repository source files.
\par Added Config2.java to ./config-magic/ repository source files.
\par Added Config3.java to ./config-magic/ repository source files.
\par Added Config4.java to ./config-magic/ repository source files.
\par Added Config5.java to ./config-magic/ repository source files.
\par Added ConfigEnum.java to ./config-magic/ repository source files.
\par Added EnumeratedConfig1.java to ./config-magic/ repository source files.
\par Added MultiConfig.java to ./config-magic/ repository source files.
\par Added Props.java to ./config-magic/ repository source files.
\par Added ReplacementConfig1.java to ./config-magic/ repository source files.
\par Added TestArrays.java to ./config-magic/ repository source files.
\par Added TestBadConfig.java to ./config-magic/ repository source files.
\par Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added TestClasses.java to ./config-magic/ repository source files.
\par Added TestCoercion.java to ./config-magic/ repository source files.
\par Added TestCollections.java to ./config-magic/ repository source files.
\par Added TestCommonsConfig.java to ./config-magic/ repository source files.
\par Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added TestCustomCoercion.java to ./config-magic/ repository source files.
\par Added TestDataAmount.java to ./config-magic/ repository source files.
\par Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
\par Added TestDefaultNull.java to ./config-magic/ repository source files.
\par Added TestDefaultsPresent.java to ./config-magic/ repository source files.
\par Added TestEmptyValue.java to ./config-magic/ repository source files.
\par Added TestEnums.java to ./config-magic/ repository source files.
\par Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
\par Added TestFile.java to ./config-magic/ repository source files.
\par Added TestMultiConfig.java to ./config-magic/ repository source files.
\par Added TestNoFinal.java to ./config-magic/ repository source files.
\par Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added TestTimeSpan.java to ./config-magic/ repository source files.
\par Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
\par Added Wibble.java to ./config-magic/ repository source files.
\par Added WibbleConfig.java to ./config-magic/ repository source files.
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Coercer.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmountUnit.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> symbol
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Description.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> filterConfig
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CoercionConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config4.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestBadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCollections.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDataAmount.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEmptyValue.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestMultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestVariousPropertyTypes.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par \tab --> sc
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bully.java************
\par 
\par Null checks:
\par args != null?if (args[0] instanceof Class<?>) \{
\par                         return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
\par                     \}
\par                     else if (args[0] instanceof WildcardType) \{
\par                         return coerceClass(type, (WildcardType)args[0], value);
\par                     \}
\par value == null?return null;
\par separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
\par ctor != null?result = (Collection)ctor.newInstance();
\par result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
\par coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
\par coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
\par typeCoercer == null?for (Coercible<?> coercible : coercibles) \{
\par                 final Coercer<?> coercer = coercible.accept(type);
\par                 if (coercer != null) \{
\par                     mappings.put(type, coercer);
\par                     typeCoercer = coercer;
\par                     break;
\par                 \}
\par             \}
\par coercer != null?mappings.put(type, coercer);
\par 
\par Null fields: 
\par \tab --> TYPE_COERCIBLES
\par 
\par Null variables: 
\par In method coerceCollection found:
\par \tab --> result
\par In method coerceArray found:
\par \tab --> tokens
\par Null assignments: 
\par ************ For file Coercer.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CommonsConfigSource.java************
\par 
\par Null checks:
\par strings == null?return null;
\par 
\par Null fields: 
\par \tab --> config
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigurationObjectFactory.java************
\par 
\par Null checks:
\par toStringMethod != null?slots.put(toStringMethod, count++);
\par mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
\par annotation != null?propertyNames = annotation.value();
\par propertyNames == null?throw new IllegalArgumentException("Method " +
\par                                                    method.toGenericString() +
\par                                                    " declares config annotation but no field name!");
\par mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
\par value != null?assignedFrom = "property: '" + propertyName + "'";
\par mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
\par value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
\par value == null?if (hasDefault) \{
\par                 value = method.getAnnotation(Default.class).value();
\par                 assignedFrom = "annotation: @Default";
\par 
\par                 logger.info("Assigning default value [\{\}] for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ value, propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par             \}
\par             else if (hasDefaultNull) \{
\par                 logger.info("Assigning null default value for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 assignedFrom = "annotation: @DefaultNull";
\par             \}
\par             else \{
\par                 // Final try: Is the method is actually callable?
\par                 if (!Modifier.isAbstract(method.getModifiers())) \{
\par                     useMethod = true;
\par                     assignedFrom = "method: '" + method.getName() + "()'";
\par                     logger.info("Using method itself for \{\} on [\{\}#\{\}()]",
\par                                 new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 \}
\par                 else \{
\par                     throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
\par                             prettyPrint(propertyNames, mappedReplacements),
\par                             method.toGenericString()));
\par                 \}
\par             \}
\par annotationValues == null?throw new IllegalArgumentException("Method " +
\par                                                method.toGenericString() +
\par                                                " declares config annotation but no field name!");
\par values == null?return "";
\par mappedReplacements != null?sb.append(" translated to [");
\par toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
\par finalValue != null?sb.append(finalValue.toString());
\par toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
\par value != null?logger.info("Assigning value [\{\}] for [\{\}] on [\{\}#\{\}()]",
\par                                     new Object[] \{ value, property, method.getDeclaringClass().getName(), method.getName() \});
\par toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
\par toStringValue == null?final StringBuilder sb = new StringBuilder();
\par 
\par Null fields: 
\par \tab --> method
\par \tab --> slots
\par \tab --> handler
\par \tab --> paramTokenList
\par \tab --> config
\par \tab --> bully
\par \tab --> properties
\par \tab --> defaultValue
\par \tab --> callbacks
\par \tab --> assignedFrom
\par \tab --> finalValue
\par 
\par Null variables: 
\par In method buildSimple found:
\par \tab --> assignedFrom
\par \tab --> value
\par In method internalBuild found:
\par \tab --> fixedMap
\par In method buildParameterized found:
\par \tab --> defaultValue
\par Null assignments: 
\par In method buildSimple found: 
\par \tab --> value
\par ************ For file DataAmountUnit.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> symbol
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultCoercibles.java************
\par 
\par Null checks:
\par candidate != null?final Method valueOfMethod = candidate;
\par value == null?return value == null ? null : valueOfMethod.invoke(null, value);
\par value == null?return value == null ? null : ctor.newInstance(value);
\par value != null?return value != null ? Boolean.valueOf(value) : null;
\par value != null?return value != null ? Byte.valueOf(value) : null;
\par value != null?return value != null ? Short.valueOf(value) : null;
\par value != null?return value != null ? Integer.valueOf(value) : null;
\par value != null?return value != null ? Long.valueOf(value) : null;
\par value != null?return value != null ? Float.valueOf(value) : null;
\par value != null?return value != null ? Double.valueOf(value) : null;
\par value != null?return value != null ? URI.create(value) : null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method accept found:
\par \tab --> coercer
\par Null assignments: 
\par In method accept found: 
\par \tab --> candidate
\par \tab --> coercer
\par ************ For file Description.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Param.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> filterConfig
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeSpan.java************
\par 
\par Null checks:
\par unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> millis
\par \tab --> unit
\par \tab --> period
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CoercionConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config2.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config4.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigEnum.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ReplacementConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestBadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestClasses.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCollections.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestConfigurationObjectFactory.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDataAmount.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEmptyValue.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestExposeMappedReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestMultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestVariousPropertyTypes.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par \tab --> sc
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file WibbleConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bully.java************
\par 
\par Null checks:
\par args != null?if (args[0] instanceof Class<?>) \{
\par                         return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
\par                     \}
\par                     else if (args[0] instanceof WildcardType) \{
\par                         return coerceClass(type, (WildcardType)args[0], value);
\par                     \}
\par value == null?return null;
\par separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
\par ctor != null?result = (Collection)ctor.newInstance();
\par result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
\par coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
\par coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
\par typeCoercer == null?for (Coercible<?> coercible : coercibles) \{
\par                 final Coercer<?> coercer = coercible.accept(type);
\par                 if (coercer != null) \{
\par                     mappings.put(type, coercer);
\par                     typeCoercer = coercer;
\par                     break;
\par                 \}
\par             \}
\par coercer != null?mappings.put(type, coercer);
\par 
\par Null fields: 
\par \tab --> TYPE_COERCIBLES
\par 
\par Null variables: 
\par In method coerceCollection found:
\par \tab --> result
\par In method coerceArray found:
\par \tab --> tokens
\par Null assignments: 
\par Null check was added at revision 6e183e33249d77787c7eb745f2ecb634e439c7e0
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercer.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CommonsConfigSource.java************
\par 
\par Null checks:
\par strings == null?return null;
\par 
\par Null fields: 
\par \tab --> config
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigurationObjectFactory.java************
\par 
\par Null checks:
\par toStringMethod != null?slots.put(toStringMethod, count++);
\par mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
\par annotation != null?propertyNames = annotation.value();
\par propertyNames == null?throw new IllegalArgumentException("Method " +
\par                                                    method.toGenericString() +
\par                                                    " declares config annotation but no field name!");
\par mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
\par value != null?assignedFrom = "property: '" + propertyName + "'";
\par mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
\par value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
\par value == null?if (hasDefault) \{
\par                 value = method.getAnnotation(Default.class).value();
\par                 assignedFrom = "annotation: @Default";
\par 
\par                 logger.info("Assigning default value [\{\}] for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ value, propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par             \}
\par             else if (hasDefaultNull) \{
\par                 logger.info("Assigning null default value for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 assignedFrom = "annotation: @DefaultNull";
\par             \}
\par             else \{
\par                 // Final try: Is the method is actually callable?
\par                 if (!Modifier.isAbstract(method.getModifiers())) \{
\par                     useMethod = true;
\par                     assignedFrom = "method: '" + method.getName() + "()'";
\par                     logger.info("Using method itself for \{\} on [\{\}#\{\}()]",
\par                                 new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 \}
\par                 else \{
\par                     throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
\par                             prettyPrint(propertyNames, mappedReplacements),
\par                             method.toGenericString()));
\par                 \}
\par             \}
\par annotationValues == null?throw new IllegalArgumentException("Method " +
\par                                                method.toGenericString() +
\par                                                " declares config annotation but no field name!");
\par values == null?return "";
\par mappedReplacements != null?sb.append(" translated to [");
\par toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
\par finalValue != null?sb.append(finalValue.toString());
\par toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
\par value != null?logger.info("Assigning value [\{\}] for [\{\}] on [\{\}#\{\}()]",
\par                                     new Object[] \{ value, property, method.getDeclaringClass().getName(), method.getName() \});
\par toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
\par toStringValue == null?final StringBuilder sb = new StringBuilder();
\par 
\par Null fields: 
\par \tab --> method
\par \tab --> slots
\par \tab --> handler
\par \tab --> paramTokenList
\par \tab --> config
\par \tab --> bully
\par \tab --> properties
\par \tab --> defaultValue
\par \tab --> callbacks
\par \tab --> assignedFrom
\par \tab --> finalValue
\par 
\par Null variables: 
\par In method buildSimple found:
\par \tab --> assignedFrom
\par \tab --> value
\par In method internalBuild found:
\par \tab --> fixedMap
\par In method buildParameterized found:
\par \tab --> defaultValue
\par Null assignments: 
\par In method buildSimple found: 
\par \tab --> value
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmountUnit.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> symbol
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultCoercibles.java************
\par 
\par Null checks:
\par candidate != null?final Method valueOfMethod = candidate;
\par value == null?return value == null ? null : valueOfMethod.invoke(null, value);
\par value == null?return value == null ? null : ctor.newInstance(value);
\par value != null?return value != null ? Boolean.valueOf(value) : null;
\par value != null?return value != null ? Byte.valueOf(value) : null;
\par value != null?return value != null ? Short.valueOf(value) : null;
\par value != null?return value != null ? Integer.valueOf(value) : null;
\par value != null?return value != null ? Long.valueOf(value) : null;
\par value != null?return value != null ? Float.valueOf(value) : null;
\par value != null?return value != null ? Double.valueOf(value) : null;
\par value != null?return value != null ? URI.create(value) : null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method accept found:
\par \tab --> coercer
\par Null assignments: 
\par In method accept found: 
\par \tab --> candidate
\par \tab --> coercer
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Description.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was added at revision 6e183e33249d77787c7eb745f2ecb634e439c7e0
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Param.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> filterConfig
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeSpan.java************
\par 
\par Null checks:
\par unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> millis
\par \tab --> unit
\par \tab --> period
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CoercionConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config2.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config4.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigEnum.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ReplacementConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestBadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestClasses.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCollections.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestConfigurationObjectFactory.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDataAmount.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEmptyValue.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestExposeMappedReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestMultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestVariousPropertyTypes.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par \tab --> sc
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file WibbleConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 82e6f2dc32b0204a7e508aecba8bf3430eb252c9 and 6e183e33249d77787c7eb745f2ecb634e439c7e0:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 82e6f2dc32b0204a7e508aecba8bf3430eb252c9
\par 
\par Added Bully.java to ./config-magic/ repository source files.
\par Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added Coercer.java to ./config-magic/ repository source files.
\par Added Coercible.java to ./config-magic/ repository source files.
\par Added CommonsConfigSource.java to ./config-magic/ repository source files.
\par Added Config.java to ./config-magic/ repository source files.
\par Added ConfigReplacements.java to ./config-magic/ repository source files.
\par Added ConfigSource.java to ./config-magic/ repository source files.
\par Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added DataAmount.java to ./config-magic/ repository source files.
\par Added DataAmountUnit.java to ./config-magic/ repository source files.
\par Added Default.java to ./config-magic/ repository source files.
\par Added DefaultCoercibles.java to ./config-magic/ repository source files.
\par Added DefaultNull.java to ./config-magic/ repository source files.
\par Added Description.java to ./config-magic/ repository source files.
\par Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
\par Added Param.java to ./config-magic/ repository source files.
\par Added Separator.java to ./config-magic/ repository source files.
\par Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
\par Added TimeSpan.java to ./config-magic/ repository source files.
\par Added BadConfig.java to ./config-magic/ repository source files.
\par Added CoercionConfig.java to ./config-magic/ repository source files.
\par Added Config1.java to ./config-magic/ repository source files.
\par Added Config2.java to ./config-magic/ repository source files.
\par Added Config3.java to ./config-magic/ repository source files.
\par Added Config4.java to ./config-magic/ repository source files.
\par Added Config5.java to ./config-magic/ repository source files.
\par Added ConfigEnum.java to ./config-magic/ repository source files.
\par Added EnumeratedConfig1.java to ./config-magic/ repository source files.
\par Added MultiConfig.java to ./config-magic/ repository source files.
\par Added Props.java to ./config-magic/ repository source files.
\par Added ReplacementConfig1.java to ./config-magic/ repository source files.
\par Added TestArrays.java to ./config-magic/ repository source files.
\par Added TestBadConfig.java to ./config-magic/ repository source files.
\par Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added TestClasses.java to ./config-magic/ repository source files.
\par Added TestCoercion.java to ./config-magic/ repository source files.
\par Added TestCollections.java to ./config-magic/ repository source files.
\par Added TestCommonsConfig.java to ./config-magic/ repository source files.
\par Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added TestCustomCoercion.java to ./config-magic/ repository source files.
\par Added TestDataAmount.java to ./config-magic/ repository source files.
\par Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
\par Added TestDefaultNull.java to ./config-magic/ repository source files.
\par Added TestDefaultsPresent.java to ./config-magic/ repository source files.
\par Added TestEmptyValue.java to ./config-magic/ repository source files.
\par Added TestEnums.java to ./config-magic/ repository source files.
\par Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
\par Added TestFile.java to ./config-magic/ repository source files.
\par Added TestMultiConfig.java to ./config-magic/ repository source files.
\par Added TestNoFinal.java to ./config-magic/ repository source files.
\par Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added TestTimeSpan.java to ./config-magic/ repository source files.
\par Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
\par Added Wibble.java to ./config-magic/ repository source files.
\par Added WibbleConfig.java to ./config-magic/ repository source files.
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file ConfigReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Description.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CoercionConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCollections.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEmptyValue.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestVariousPropertyTypes.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par \tab --> sc
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercer.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmountUnit.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> symbol
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Description.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> filterConfig
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CoercionConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config4.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestBadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCollections.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDataAmount.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEmptyValue.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestMultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestVariousPropertyTypes.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par \tab --> sc
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bully.java************
\par 
\par Null checks:
\par args != null?if (args[0] instanceof Class<?>) \{
\par                         return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
\par                     \}
\par                     else if (args[0] instanceof WildcardType) \{
\par                         return coerceClass(type, (WildcardType)args[0], value);
\par                     \}
\par value == null?return null;
\par separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
\par ctor != null?result = (Collection)ctor.newInstance();
\par result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
\par coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
\par coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
\par typeCoercer == null?for (Coercible<?> coercible : coercibles) \{
\par                 final Coercer<?> coercer = coercible.accept(type);
\par                 if (coercer != null) \{
\par                     mappings.put(type, coercer);
\par                     typeCoercer = coercer;
\par                     break;
\par                 \}
\par             \}
\par coercer != null?mappings.put(type, coercer);
\par 
\par Null fields: 
\par \tab --> TYPE_COERCIBLES
\par 
\par Null variables: 
\par In method coerceCollection found:
\par \tab --> result
\par In method coerceArray found:
\par \tab --> tokens
\par Null assignments: 
\par ************ For file Coercer.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CommonsConfigSource.java************
\par 
\par Null checks:
\par strings == null?return null;
\par 
\par Null fields: 
\par \tab --> config
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigurationObjectFactory.java************
\par 
\par Null checks:
\par toStringMethod != null?slots.put(toStringMethod, count++);
\par mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
\par annotation != null?propertyNames = annotation.value();
\par propertyNames == null?throw new IllegalArgumentException("Method " +
\par                                                    method.toGenericString() +
\par                                                    " declares config annotation but no field name!");
\par mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
\par value != null?assignedFrom = "property: '" + propertyName + "'";
\par mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
\par value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
\par value == null?if (hasDefault) \{
\par                 value = method.getAnnotation(Default.class).value();
\par                 assignedFrom = "annotation: @Default";
\par 
\par                 logger.info("Assigning default value [\{\}] for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ value, propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par             \}
\par             else if (hasDefaultNull) \{
\par                 logger.info("Assigning null default value for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 assignedFrom = "annotation: @DefaultNull";
\par             \}
\par             else \{
\par                 // Final try: Is the method is actually callable?
\par                 if (!Modifier.isAbstract(method.getModifiers())) \{
\par                     useMethod = true;
\par                     assignedFrom = "method: '" + method.getName() + "()'";
\par                     logger.info("Using method itself for \{\} on [\{\}#\{\}()]",
\par                                 new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 \}
\par                 else \{
\par                     throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
\par                             prettyPrint(propertyNames, mappedReplacements),
\par                             method.toGenericString()));
\par                 \}
\par             \}
\par annotationValues == null?throw new IllegalArgumentException("Method " +
\par                                                method.toGenericString() +
\par                                                " declares config annotation but no field name!");
\par values == null?return "";
\par mappedReplacements != null?sb.append(" translated to [");
\par toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
\par finalValue != null?sb.append(finalValue.toString());
\par toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
\par value != null?logger.info("Assigning value [\{\}] for [\{\}] on [\{\}#\{\}()]",
\par                                     new Object[] \{ value, property, method.getDeclaringClass().getName(), method.getName() \});
\par toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
\par toStringValue == null?final StringBuilder sb = new StringBuilder();
\par 
\par Null fields: 
\par \tab --> method
\par \tab --> slots
\par \tab --> handler
\par \tab --> paramTokenList
\par \tab --> config
\par \tab --> bully
\par \tab --> properties
\par \tab --> defaultValue
\par \tab --> callbacks
\par \tab --> assignedFrom
\par \tab --> finalValue
\par 
\par Null variables: 
\par In method buildSimple found:
\par \tab --> assignedFrom
\par \tab --> value
\par In method internalBuild found:
\par \tab --> fixedMap
\par In method buildParameterized found:
\par \tab --> defaultValue
\par Null assignments: 
\par In method buildSimple found: 
\par \tab --> value
\par ************ For file DataAmountUnit.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> symbol
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultCoercibles.java************
\par 
\par Null checks:
\par candidate != null?final Method valueOfMethod = candidate;
\par value == null?return value == null ? null : valueOfMethod.invoke(null, value);
\par value == null?return value == null ? null : ctor.newInstance(value);
\par value != null?return value != null ? Boolean.valueOf(value) : null;
\par value != null?return value != null ? Byte.valueOf(value) : null;
\par value != null?return value != null ? Short.valueOf(value) : null;
\par value != null?return value != null ? Integer.valueOf(value) : null;
\par value != null?return value != null ? Long.valueOf(value) : null;
\par value != null?return value != null ? Float.valueOf(value) : null;
\par value != null?return value != null ? Double.valueOf(value) : null;
\par value != null?return value != null ? URI.create(value) : null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method accept found:
\par \tab --> coercer
\par Null assignments: 
\par In method accept found: 
\par \tab --> candidate
\par \tab --> coercer
\par ************ For file Description.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Param.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> filterConfig
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeSpan.java************
\par 
\par Null checks:
\par unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> millis
\par \tab --> unit
\par \tab --> period
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CoercionConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config2.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config4.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigEnum.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ReplacementConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestBadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestClasses.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCollections.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestConfigurationObjectFactory.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDataAmount.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEmptyValue.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestExposeMappedReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestMultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestVariousPropertyTypes.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par \tab --> sc
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file WibbleConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bully.java************
\par 
\par Null checks:
\par args != null?if (args[0] instanceof Class<?>) \{
\par                         return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
\par                     \}
\par                     else if (args[0] instanceof WildcardType) \{
\par                         return coerceClass(type, (WildcardType)args[0], value);
\par                     \}
\par value == null?return null;
\par separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
\par ctor != null?result = (Collection)ctor.newInstance();
\par result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
\par coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
\par coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
\par typeCoercer == null?for (Coercible<?> coercible : coercibles) \{
\par                 final Coercer<?> coercer = coercible.accept(type);
\par                 if (coercer != null) \{
\par                     mappings.put(type, coercer);
\par                     typeCoercer = coercer;
\par                     break;
\par                 \}
\par             \}
\par coercer != null?mappings.put(type, coercer);
\par 
\par Null fields: 
\par \tab --> TYPE_COERCIBLES
\par 
\par Null variables: 
\par In method coerceCollection found:
\par \tab --> result
\par In method coerceArray found:
\par \tab --> tokens
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercer.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CommonsConfigSource.java************
\par 
\par Null checks:
\par strings == null?return null;
\par 
\par Null fields: 
\par \tab --> config
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigurationObjectFactory.java************
\par 
\par Null checks:
\par toStringMethod != null?slots.put(toStringMethod, count++);
\par mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
\par annotation != null?propertyNames = annotation.value();
\par propertyNames == null?throw new IllegalArgumentException("Method " +
\par                                                    method.toGenericString() +
\par                                                    " declares config annotation but no field name!");
\par mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
\par value != null?assignedFrom = "property: '" + propertyName + "'";
\par mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
\par value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
\par value == null?if (hasDefault) \{
\par                 value = method.getAnnotation(Default.class).value();
\par                 assignedFrom = "annotation: @Default";
\par 
\par                 logger.info("Assigning default value [\{\}] for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ value, propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par             \}
\par             else if (hasDefaultNull) \{
\par                 logger.info("Assigning null default value for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 assignedFrom = "annotation: @DefaultNull";
\par             \}
\par             else \{
\par                 // Final try: Is the method is actually callable?
\par                 if (!Modifier.isAbstract(method.getModifiers())) \{
\par                     useMethod = true;
\par                     assignedFrom = "method: '" + method.getName() + "()'";
\par                     logger.info("Using method itself for \{\} on [\{\}#\{\}()]",
\par                                 new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 \}
\par                 else \{
\par                     throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
\par                             prettyPrint(propertyNames, mappedReplacements),
\par                             method.toGenericString()));
\par                 \}
\par             \}
\par annotationValues == null?throw new IllegalArgumentException("Method " +
\par                                                method.toGenericString() +
\par                                                " declares config annotation but no field name!");
\par values == null?return "";
\par mappedReplacements != null?sb.append(" translated to [");
\par toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
\par finalValue != null?sb.append(finalValue.toString());
\par toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
\par value != null?logger.info("Assigning value [\{\}] for [\{\}] on [\{\}#\{\}()]",
\par                                     new Object[] \{ value, property, method.getDeclaringClass().getName(), method.getName() \});
\par toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
\par toStringValue == null?final StringBuilder sb = new StringBuilder();
\par 
\par Null fields: 
\par \tab --> method
\par \tab --> slots
\par \tab --> handler
\par \tab --> paramTokenList
\par \tab --> config
\par \tab --> bully
\par \tab --> properties
\par \tab --> defaultValue
\par \tab --> callbacks
\par \tab --> assignedFrom
\par \tab --> finalValue
\par 
\par Null variables: 
\par In method buildSimple found:
\par \tab --> assignedFrom
\par \tab --> value
\par In method internalBuild found:
\par \tab --> fixedMap
\par In method buildParameterized found:
\par \tab --> defaultValue
\par Null assignments: 
\par In method buildSimple found: 
\par \tab --> value
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmountUnit.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> symbol
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultCoercibles.java************
\par 
\par Null checks:
\par candidate != null?final Method valueOfMethod = candidate;
\par value == null?return value == null ? null : valueOfMethod.invoke(null, value);
\par value == null?return value == null ? null : ctor.newInstance(value);
\par value != null?return value != null ? Boolean.valueOf(value) : null;
\par value != null?return value != null ? Byte.valueOf(value) : null;
\par value != null?return value != null ? Short.valueOf(value) : null;
\par value != null?return value != null ? Integer.valueOf(value) : null;
\par value != null?return value != null ? Long.valueOf(value) : null;
\par value != null?return value != null ? Float.valueOf(value) : null;
\par value != null?return value != null ? Double.valueOf(value) : null;
\par value != null?return value != null ? URI.create(value) : null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method accept found:
\par \tab --> coercer
\par Null assignments: 
\par In method accept found: 
\par \tab --> candidate
\par \tab --> coercer
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Description.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Param.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> filterConfig
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeSpan.java************
\par 
\par Null checks:
\par unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> millis
\par \tab --> unit
\par \tab --> period
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CoercionConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config2.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config4.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigEnum.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ReplacementConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestBadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestClasses.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCollections.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestConfigurationObjectFactory.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDataAmount.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEmptyValue.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestExposeMappedReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestMultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestVariousPropertyTypes.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par \tab --> sc
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file WibbleConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 444c110112d19c459e02f2517e2fe59c262f5aa2 and 82e6f2dc32b0204a7e508aecba8bf3430eb252c9:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 444c110112d19c459e02f2517e2fe59c262f5aa2
\par 
\par Added Bully.java to ./config-magic/ repository source files.
\par Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added Coercer.java to ./config-magic/ repository source files.
\par Added Coercible.java to ./config-magic/ repository source files.
\par Added CommonsConfigSource.java to ./config-magic/ repository source files.
\par Added Config.java to ./config-magic/ repository source files.
\par Added ConfigReplacements.java to ./config-magic/ repository source files.
\par Added ConfigSource.java to ./config-magic/ repository source files.
\par Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added DataAmount.java to ./config-magic/ repository source files.
\par Added DataAmountUnit.java to ./config-magic/ repository source files.
\par Added Default.java to ./config-magic/ repository source files.
\par Added DefaultCoercibles.java to ./config-magic/ repository source files.
\par Added DefaultNull.java to ./config-magic/ repository source files.
\par Added Description.java to ./config-magic/ repository source files.
\par Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
\par Added Param.java to ./config-magic/ repository source files.
\par Added Separator.java to ./config-magic/ repository source files.
\par Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
\par Added TimeSpan.java to ./config-magic/ repository source files.
\par Added BadConfig.java to ./config-magic/ repository source files.
\par Added CoercionConfig.java to ./config-magic/ repository source files.
\par Added Config1.java to ./config-magic/ repository source files.
\par Added Config2.java to ./config-magic/ repository source files.
\par Added Config3.java to ./config-magic/ repository source files.
\par Added Config4.java to ./config-magic/ repository source files.
\par Added Config5.java to ./config-magic/ repository source files.
\par Added ConfigEnum.java to ./config-magic/ repository source files.
\par Added EnumeratedConfig1.java to ./config-magic/ repository source files.
\par Added MultiConfig.java to ./config-magic/ repository source files.
\par Added Props.java to ./config-magic/ repository source files.
\par Added ReplacementConfig1.java to ./config-magic/ repository source files.
\par Added TestArrays.java to ./config-magic/ repository source files.
\par Added TestBadConfig.java to ./config-magic/ repository source files.
\par Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added TestClasses.java to ./config-magic/ repository source files.
\par Added TestCoercion.java to ./config-magic/ repository source files.
\par Added TestCollections.java to ./config-magic/ repository source files.
\par Added TestCommonsConfig.java to ./config-magic/ repository source files.
\par Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added TestCustomCoercion.java to ./config-magic/ repository source files.
\par Added TestDataAmount.java to ./config-magic/ repository source files.
\par Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
\par Added TestDefaultNull.java to ./config-magic/ repository source files.
\par Added TestDefaultsPresent.java to ./config-magic/ repository source files.
\par Added TestEmptyValue.java to ./config-magic/ repository source files.
\par Added TestEnums.java to ./config-magic/ repository source files.
\par Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
\par Added TestFile.java to ./config-magic/ repository source files.
\par Added TestMultiConfig.java to ./config-magic/ repository source files.
\par Added TestNoFinal.java to ./config-magic/ repository source files.
\par Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added TestTimeSpan.java to ./config-magic/ repository source files.
\par Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
\par Added Wibble.java to ./config-magic/ repository source files.
\par Added WibbleConfig.java to ./config-magic/ repository source files.
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Description.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEmptyValue.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Coercer.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmountUnit.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> symbol
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> filterConfig
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config4.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestBadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestDataAmount.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestMultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file Bully.java************
\par 
\par Null checks:
\par args != null?if (args[0] instanceof Class<?>) \{
\par                         return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
\par                     \}
\par                     else if (args[0] instanceof WildcardType) \{
\par                         return coerceClass(type, (WildcardType)args[0], value);
\par                     \}
\par value == null?return null;
\par separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
\par ctor != null?result = (Collection)ctor.newInstance();
\par result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
\par coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
\par coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
\par typeCoercer == null?for (Coercible<?> coercible : coercibles) \{
\par                 final Coercer<?> coercer = coercible.accept(type);
\par                 if (coercer != null) \{
\par                     mappings.put(type, coercer);
\par                     typeCoercer = coercer;
\par                     break;
\par                 \}
\par             \}
\par coercer != null?mappings.put(type, coercer);
\par 
\par Null fields: 
\par \tab --> TYPE_COERCIBLES
\par 
\par Null variables: 
\par In method coerceCollection found:
\par \tab --> result
\par In method coerceArray found:
\par \tab --> tokens
\par Null assignments: 
\par ************ For file CommonsConfigSource.java************
\par 
\par Null checks:
\par strings == null?return null;
\par 
\par Null fields: 
\par \tab --> config
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigurationObjectFactory.java************
\par 
\par Null checks:
\par toStringMethod != null?slots.put(toStringMethod, count++);
\par mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
\par annotation != null?propertyNames = annotation.value();
\par propertyNames == null?throw new IllegalArgumentException("Method " +
\par                                                    method.toGenericString() +
\par                                                    " declares config annotation but no field name!");
\par mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
\par value != null?assignedFrom = "property: '" + propertyName + "'";
\par mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
\par value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
\par value == null?if (hasDefault) \{
\par                 value = method.getAnnotation(Default.class).value();
\par                 assignedFrom = "annotation: @Default";
\par 
\par                 logger.info("Assigning default value [\{\}] for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ value, propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par             \}
\par             else if (hasDefaultNull) \{
\par                 logger.info("Assigning null default value for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 assignedFrom = "annotation: @DefaultNull";
\par             \}
\par             else \{
\par                 // Final try: Is the method is actually callable?
\par                 if (!Modifier.isAbstract(method.getModifiers())) \{
\par                     useMethod = true;
\par                     assignedFrom = "method: '" + method.getName() + "()'";
\par                     logger.info("Using method itself for \{\} on [\{\}#\{\}()]",
\par                                 new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 \}
\par                 else \{
\par                     throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
\par                             prettyPrint(propertyNames, mappedReplacements),
\par                             method.toGenericString()));
\par                 \}
\par             \}
\par annotationValues == null?throw new IllegalArgumentException("Method " +
\par                                                method.toGenericString() +
\par                                                " declares config annotation but no field name!");
\par values == null?return "";
\par mappedReplacements != null?sb.append(" translated to [");
\par toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
\par finalValue != null?sb.append(finalValue.toString());
\par toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
\par value != null?logger.info("Assigning value [\{\}] for [\{\}] on [\{\}#\{\}()]",
\par                                     new Object[] \{ value, property, method.getDeclaringClass().getName(), method.getName() \});
\par toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
\par toStringValue == null?final StringBuilder sb = new StringBuilder();
\par 
\par Null fields: 
\par \tab --> method
\par \tab --> slots
\par \tab --> handler
\par \tab --> paramTokenList
\par \tab --> config
\par \tab --> bully
\par \tab --> properties
\par \tab --> defaultValue
\par \tab --> callbacks
\par \tab --> assignedFrom
\par \tab --> finalValue
\par 
\par Null variables: 
\par In method buildSimple found:
\par \tab --> assignedFrom
\par \tab --> value
\par In method internalBuild found:
\par \tab --> fixedMap
\par In method buildParameterized found:
\par \tab --> defaultValue
\par Null assignments: 
\par In method buildSimple found: 
\par \tab --> value
\par ************ For file DefaultCoercibles.java************
\par 
\par Null checks:
\par candidate != null?final Method valueOfMethod = candidate;
\par value == null?return value == null ? null : valueOfMethod.invoke(null, value);
\par value == null?return value == null ? null : ctor.newInstance(value);
\par value != null?return value != null ? Boolean.valueOf(value) : null;
\par value != null?return value != null ? Byte.valueOf(value) : null;
\par value != null?return value != null ? Short.valueOf(value) : null;
\par value != null?return value != null ? Integer.valueOf(value) : null;
\par value != null?return value != null ? Long.valueOf(value) : null;
\par value != null?return value != null ? Float.valueOf(value) : null;
\par value != null?return value != null ? Double.valueOf(value) : null;
\par value != null?return value != null ? URI.create(value) : null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method accept found:
\par \tab --> coercer
\par Null assignments: 
\par In method accept found: 
\par \tab --> candidate
\par \tab --> coercer
\par ************ For file Param.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeSpan.java************
\par 
\par Null checks:
\par unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> millis
\par \tab --> unit
\par \tab --> period
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config2.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigEnum.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ReplacementConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestClasses.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestConfigurationObjectFactory.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestExposeMappedReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file WibbleConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bully.java************
\par 
\par Null checks:
\par args != null?if (args[0] instanceof Class<?>) \{
\par                         return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
\par                     \}
\par                     else if (args[0] instanceof WildcardType) \{
\par                         return coerceClass(type, (WildcardType)args[0], value);
\par                     \}
\par value == null?return null;
\par separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
\par ctor != null?result = (Collection)ctor.newInstance();
\par result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
\par coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
\par coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
\par typeCoercer == null?for (Coercible<?> coercible : coercibles) \{
\par                 final Coercer<?> coercer = coercible.accept(type);
\par                 if (coercer != null) \{
\par                     mappings.put(type, coercer);
\par                     typeCoercer = coercer;
\par                     break;
\par                 \}
\par             \}
\par coercer != null?mappings.put(type, coercer);
\par 
\par Null fields: 
\par \tab --> TYPE_COERCIBLES
\par 
\par Null variables: 
\par In method coerceCollection found:
\par \tab --> result
\par In method coerceArray found:
\par \tab --> tokens
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercer.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CommonsConfigSource.java************
\par 
\par Null checks:
\par strings == null?return null;
\par 
\par Null fields: 
\par \tab --> config
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigurationObjectFactory.java************
\par 
\par Null checks:
\par toStringMethod != null?slots.put(toStringMethod, count++);
\par mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
\par annotation != null?propertyNames = annotation.value();
\par propertyNames == null?throw new IllegalArgumentException("Method " +
\par                                                    method.toGenericString() +
\par                                                    " declares config annotation but no field name!");
\par mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
\par value != null?assignedFrom = "property: '" + propertyName + "'";
\par mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
\par value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
\par value == null?if (hasDefault) \{
\par                 value = method.getAnnotation(Default.class).value();
\par                 assignedFrom = "annotation: @Default";
\par 
\par                 logger.info("Assigning default value [\{\}] for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ value, propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par             \}
\par             else if (hasDefaultNull) \{
\par                 logger.info("Assigning null default value for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 assignedFrom = "annotation: @DefaultNull";
\par             \}
\par             else \{
\par                 // Final try: Is the method is actually callable?
\par                 if (!Modifier.isAbstract(method.getModifiers())) \{
\par                     useMethod = true;
\par                     assignedFrom = "method: '" + method.getName() + "()'";
\par                     logger.info("Using method itself for \{\} on [\{\}#\{\}()]",
\par                                 new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 \}
\par                 else \{
\par                     throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
\par                             prettyPrint(propertyNames, mappedReplacements),
\par                             method.toGenericString()));
\par                 \}
\par             \}
\par annotationValues == null?throw new IllegalArgumentException("Method " +
\par                                                method.toGenericString() +
\par                                                " declares config annotation but no field name!");
\par values == null?return "";
\par mappedReplacements != null?sb.append(" translated to [");
\par toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
\par finalValue != null?sb.append(finalValue.toString());
\par toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
\par value != null?logger.info("Assigning value [\{\}] for [\{\}] on [\{\}#\{\}()]",
\par                                     new Object[] \{ value, property, method.getDeclaringClass().getName(), method.getName() \});
\par toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
\par toStringValue == null?final StringBuilder sb = new StringBuilder();
\par 
\par Null fields: 
\par \tab --> method
\par \tab --> slots
\par \tab --> handler
\par \tab --> paramTokenList
\par \tab --> config
\par \tab --> bully
\par \tab --> properties
\par \tab --> defaultValue
\par \tab --> callbacks
\par \tab --> assignedFrom
\par \tab --> finalValue
\par 
\par Null variables: 
\par In method buildSimple found:
\par \tab --> assignedFrom
\par \tab --> value
\par In method internalBuild found:
\par \tab --> fixedMap
\par In method buildParameterized found:
\par \tab --> defaultValue
\par Null assignments: 
\par In method buildSimple found: 
\par \tab --> value
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmountUnit.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> symbol
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultCoercibles.java************
\par 
\par Null checks:
\par candidate != null?final Method valueOfMethod = candidate;
\par value == null?return value == null ? null : valueOfMethod.invoke(null, value);
\par value == null?return value == null ? null : ctor.newInstance(value);
\par value != null?return value != null ? Boolean.valueOf(value) : null;
\par value != null?return value != null ? Byte.valueOf(value) : null;
\par value != null?return value != null ? Short.valueOf(value) : null;
\par value != null?return value != null ? Integer.valueOf(value) : null;
\par value != null?return value != null ? Long.valueOf(value) : null;
\par value != null?return value != null ? Float.valueOf(value) : null;
\par value != null?return value != null ? Double.valueOf(value) : null;
\par value != null?return value != null ? URI.create(value) : null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method accept found:
\par \tab --> coercer
\par Null assignments: 
\par In method accept found: 
\par \tab --> candidate
\par \tab --> coercer
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Description.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Param.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> filterConfig
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeSpan.java************
\par 
\par Null checks:
\par unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> millis
\par \tab --> unit
\par \tab --> period
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CoercionConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config2.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config4.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigEnum.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ReplacementConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestBadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestClasses.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCollections.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestConfigurationObjectFactory.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDataAmount.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEmptyValue.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestExposeMappedReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestMultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestVariousPropertyTypes.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par \tab --> sc
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file WibbleConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 6813002792199961bc28648b67bf74ddaf1b7995 and 444c110112d19c459e02f2517e2fe59c262f5aa2:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 6813002792199961bc28648b67bf74ddaf1b7995
\par 
\par Added Bully.java to ./config-magic/ repository source files.
\par Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added Coercer.java to ./config-magic/ repository source files.
\par Added Coercible.java to ./config-magic/ repository source files.
\par Added CommonsConfigSource.java to ./config-magic/ repository source files.
\par Added Config.java to ./config-magic/ repository source files.
\par Added ConfigReplacements.java to ./config-magic/ repository source files.
\par Added ConfigSource.java to ./config-magic/ repository source files.
\par Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added DataAmount.java to ./config-magic/ repository source files.
\par Added DataAmountUnit.java to ./config-magic/ repository source files.
\par Added Default.java to ./config-magic/ repository source files.
\par Added DefaultCoercibles.java to ./config-magic/ repository source files.
\par Added DefaultNull.java to ./config-magic/ repository source files.
\par Added Description.java to ./config-magic/ repository source files.
\par Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
\par Added Param.java to ./config-magic/ repository source files.
\par Added Separator.java to ./config-magic/ repository source files.
\par Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
\par Added TimeSpan.java to ./config-magic/ repository source files.
\par Added BadConfig.java to ./config-magic/ repository source files.
\par Added CoercionConfig.java to ./config-magic/ repository source files.
\par Added Config1.java to ./config-magic/ repository source files.
\par Added Config2.java to ./config-magic/ repository source files.
\par Added Config3.java to ./config-magic/ repository source files.
\par Added Config4.java to ./config-magic/ repository source files.
\par Added Config5.java to ./config-magic/ repository source files.
\par Added ConfigEnum.java to ./config-magic/ repository source files.
\par Added EnumeratedConfig1.java to ./config-magic/ repository source files.
\par Added MultiConfig.java to ./config-magic/ repository source files.
\par Added Props.java to ./config-magic/ repository source files.
\par Added ReplacementConfig1.java to ./config-magic/ repository source files.
\par Added TestArrays.java to ./config-magic/ repository source files.
\par Added TestBadConfig.java to ./config-magic/ repository source files.
\par Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added TestClasses.java to ./config-magic/ repository source files.
\par Added TestCoercion.java to ./config-magic/ repository source files.
\par Added TestCollections.java to ./config-magic/ repository source files.
\par Added TestCommonsConfig.java to ./config-magic/ repository source files.
\par Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added TestCustomCoercion.java to ./config-magic/ repository source files.
\par Added TestDataAmount.java to ./config-magic/ repository source files.
\par Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
\par Added TestDefaultNull.java to ./config-magic/ repository source files.
\par Added TestDefaultsPresent.java to ./config-magic/ repository source files.
\par Added TestEmptyValue.java to ./config-magic/ repository source files.
\par Added TestEnums.java to ./config-magic/ repository source files.
\par Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
\par Added TestFile.java to ./config-magic/ repository source files.
\par Added TestMultiConfig.java to ./config-magic/ repository source files.
\par Added TestNoFinal.java to ./config-magic/ repository source files.
\par Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added TestTimeSpan.java to ./config-magic/ repository source files.
\par Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
\par Added Wibble.java to ./config-magic/ repository source files.
\par Added WibbleConfig.java to ./config-magic/ repository source files.
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Description.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEmptyValue.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file DataAmountUnit.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> symbol
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config4.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDataAmount.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Bully.java************
\par 
\par Null checks:
\par args != null?if (args[0] instanceof Class<?>) \{
\par                         return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
\par                     \}
\par                     else if (args[0] instanceof WildcardType) \{
\par                         return coerceClass(type, (WildcardType)args[0], value);
\par                     \}
\par value == null?return null;
\par separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
\par ctor != null?result = (Collection)ctor.newInstance();
\par result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
\par coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
\par coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
\par typeCoercer == null?for (Coercible<?> coercible : coercibles) \{
\par                 final Coercer<?> coercer = coercible.accept(type);
\par                 if (coercer != null) \{
\par                     mappings.put(type, coercer);
\par                     typeCoercer = coercer;
\par                     break;
\par                 \}
\par             \}
\par coercer != null?mappings.put(type, coercer);
\par 
\par Null fields: 
\par \tab --> TYPE_COERCIBLES
\par 
\par Null variables: 
\par In method coerceCollection found:
\par \tab --> result
\par In method coerceArray found:
\par \tab --> tokens
\par Null assignments: 
\par ************ For file ConfigurationObjectFactory.java************
\par 
\par Null checks:
\par toStringMethod != null?slots.put(toStringMethod, count++);
\par mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
\par annotation != null?propertyNames = annotation.value();
\par propertyNames == null?throw new IllegalArgumentException("Method " +
\par                                                    method.toGenericString() +
\par                                                    " declares config annotation but no field name!");
\par mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
\par value != null?assignedFrom = "property: '" + propertyName + "'";
\par mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
\par value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
\par value == null?if (hasDefault) \{
\par                 value = method.getAnnotation(Default.class).value();
\par                 assignedFrom = "annotation: @Default";
\par 
\par                 logger.info("Assigning default value [\{\}] for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ value, propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par             \}
\par             else if (hasDefaultNull) \{
\par                 logger.info("Assigning null default value for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 assignedFrom = "annotation: @DefaultNull";
\par             \}
\par             else \{
\par                 // Final try: Is the method is actually callable?
\par                 if (!Modifier.isAbstract(method.getModifiers())) \{
\par                     useMethod = true;
\par                     assignedFrom = "method: '" + method.getName() + "()'";
\par                     logger.info("Using method itself for \{\} on [\{\}#\{\}()]",
\par                                 new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 \}
\par                 else \{
\par                     throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
\par                             prettyPrint(propertyNames, mappedReplacements),
\par                             method.toGenericString()));
\par                 \}
\par             \}
\par annotationValues == null?throw new IllegalArgumentException("Method " +
\par                                                method.toGenericString() +
\par                                                " declares config annotation but no field name!");
\par values == null?return "";
\par mappedReplacements != null?sb.append(" translated to [");
\par toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
\par finalValue != null?sb.append(finalValue.toString());
\par toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
\par value != null?logger.info("Assigning value [\{\}] for [\{\}] on [\{\}#\{\}()]",
\par                                     new Object[] \{ value, property, method.getDeclaringClass().getName(), method.getName() \});
\par toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
\par toStringValue == null?final StringBuilder sb = new StringBuilder();
\par 
\par Null fields: 
\par \tab --> method
\par \tab --> slots
\par \tab --> handler
\par \tab --> paramTokenList
\par \tab --> config
\par \tab --> bully
\par \tab --> properties
\par \tab --> defaultValue
\par \tab --> callbacks
\par \tab --> assignedFrom
\par \tab --> finalValue
\par 
\par Null variables: 
\par In method buildSimple found:
\par \tab --> assignedFrom
\par \tab --> value
\par In method internalBuild found:
\par \tab --> fixedMap
\par In method buildParameterized found:
\par \tab --> defaultValue
\par Null assignments: 
\par In method buildSimple found: 
\par \tab --> value
\par ************ For file Param.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config2.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ReplacementConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestConfigurationObjectFactory.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestExposeMappedReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file WibbleConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bully.java************
\par 
\par Null checks:
\par args != null?if (args[0] instanceof Class<?>) \{
\par                         return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
\par                     \}
\par                     else if (args[0] instanceof WildcardType) \{
\par                         return coerceClass(type, (WildcardType)args[0], value);
\par                     \}
\par value == null?return null;
\par separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
\par ctor != null?result = (Collection)ctor.newInstance();
\par result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
\par coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
\par coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
\par typeCoercer == null?for (Coercible<?> coercible : coercibles) \{
\par                 final Coercer<?> coercer = coercible.accept(type);
\par                 if (coercer != null) \{
\par                     mappings.put(type, coercer);
\par                     typeCoercer = coercer;
\par                     break;
\par                 \}
\par             \}
\par coercer != null?mappings.put(type, coercer);
\par 
\par Null fields: 
\par \tab --> TYPE_COERCIBLES
\par 
\par Null variables: 
\par In method coerceCollection found:
\par \tab --> result
\par In method coerceArray found:
\par \tab --> tokens
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercer.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CommonsConfigSource.java************
\par 
\par Null checks:
\par strings == null?return null;
\par 
\par Null fields: 
\par \tab --> config
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigurationObjectFactory.java************
\par 
\par Null checks:
\par toStringMethod != null?slots.put(toStringMethod, count++);
\par mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
\par annotation != null?propertyNames = annotation.value();
\par propertyNames == null?throw new IllegalArgumentException("Method " +
\par                                                    method.toGenericString() +
\par                                                    " declares config annotation but no field name!");
\par mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
\par value != null?assignedFrom = "property: '" + propertyName + "'";
\par mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
\par value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
\par value == null?if (hasDefault) \{
\par                 value = method.getAnnotation(Default.class).value();
\par                 assignedFrom = "annotation: @Default";
\par 
\par                 logger.info("Assigning default value [\{\}] for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ value, propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par             \}
\par             else if (hasDefaultNull) \{
\par                 logger.info("Assigning null default value for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 assignedFrom = "annotation: @DefaultNull";
\par             \}
\par             else \{
\par                 // Final try: Is the method is actually callable?
\par                 if (!Modifier.isAbstract(method.getModifiers())) \{
\par                     useMethod = true;
\par                     assignedFrom = "method: '" + method.getName() + "()'";
\par                     logger.info("Using method itself for \{\} on [\{\}#\{\}()]",
\par                                 new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 \}
\par                 else \{
\par                     throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
\par                             prettyPrint(propertyNames, mappedReplacements),
\par                             method.toGenericString()));
\par                 \}
\par             \}
\par annotationValues == null?throw new IllegalArgumentException("Method " +
\par                                                method.toGenericString() +
\par                                                " declares config annotation but no field name!");
\par values == null?return "";
\par mappedReplacements != null?sb.append(" translated to [");
\par toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
\par finalValue != null?sb.append(finalValue.toString());
\par toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
\par value != null?logger.info("Assigning value [\{\}] for [\{\}] on [\{\}#\{\}()]",
\par                                     new Object[] \{ value, property, method.getDeclaringClass().getName(), method.getName() \});
\par toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
\par toStringValue == null?final StringBuilder sb = new StringBuilder();
\par 
\par Null fields: 
\par \tab --> method
\par \tab --> slots
\par \tab --> handler
\par \tab --> paramTokenList
\par \tab --> config
\par \tab --> bully
\par \tab --> properties
\par \tab --> defaultValue
\par \tab --> callbacks
\par \tab --> assignedFrom
\par \tab --> finalValue
\par 
\par Null variables: 
\par In method buildSimple found:
\par \tab --> assignedFrom
\par \tab --> value
\par In method internalBuild found:
\par \tab --> fixedMap
\par In method buildParameterized found:
\par \tab --> defaultValue
\par Null assignments: 
\par In method buildSimple found: 
\par \tab --> value
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmountUnit.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> symbol
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultCoercibles.java************
\par 
\par Null checks:
\par candidate != null?final Method valueOfMethod = candidate;
\par value == null?return value == null ? null : valueOfMethod.invoke(null, value);
\par value == null?return value == null ? null : ctor.newInstance(value);
\par value != null?return value != null ? Boolean.valueOf(value) : null;
\par value != null?return value != null ? Byte.valueOf(value) : null;
\par value != null?return value != null ? Short.valueOf(value) : null;
\par value != null?return value != null ? Integer.valueOf(value) : null;
\par value != null?return value != null ? Long.valueOf(value) : null;
\par value != null?return value != null ? Float.valueOf(value) : null;
\par value != null?return value != null ? Double.valueOf(value) : null;
\par value != null?return value != null ? URI.create(value) : null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method accept found:
\par \tab --> coercer
\par Null assignments: 
\par In method accept found: 
\par \tab --> candidate
\par \tab --> coercer
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Description.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Param.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> filterConfig
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeSpan.java************
\par 
\par Null checks:
\par unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> millis
\par \tab --> unit
\par \tab --> period
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CoercionConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config2.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config4.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigEnum.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ReplacementConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestBadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestClasses.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCollections.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestConfigurationObjectFactory.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDataAmount.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEmptyValue.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestExposeMappedReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestMultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestVariousPropertyTypes.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par \tab --> sc
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file WibbleConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of b0499c140380b66a90573b300687409d594c4e5d and 6813002792199961bc28648b67bf74ddaf1b7995:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit b0499c140380b66a90573b300687409d594c4e5d
\par 
\par Added Bully.java to ./config-magic/ repository source files.
\par Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added Coercer.java to ./config-magic/ repository source files.
\par Added Coercible.java to ./config-magic/ repository source files.
\par Added CommonsConfigSource.java to ./config-magic/ repository source files.
\par Added Config.java to ./config-magic/ repository source files.
\par Added ConfigReplacements.java to ./config-magic/ repository source files.
\par Added ConfigSource.java to ./config-magic/ repository source files.
\par Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added DataAmount.java to ./config-magic/ repository source files.
\par Added DataAmountUnit.java to ./config-magic/ repository source files.
\par Added Default.java to ./config-magic/ repository source files.
\par Added DefaultCoercibles.java to ./config-magic/ repository source files.
\par Added DefaultNull.java to ./config-magic/ repository source files.
\par Added Description.java to ./config-magic/ repository source files.
\par Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
\par Added Param.java to ./config-magic/ repository source files.
\par Added Separator.java to ./config-magic/ repository source files.
\par Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
\par Added TimeSpan.java to ./config-magic/ repository source files.
\par Added BadConfig.java to ./config-magic/ repository source files.
\par Added CoercionConfig.java to ./config-magic/ repository source files.
\par Added Config1.java to ./config-magic/ repository source files.
\par Added Config2.java to ./config-magic/ repository source files.
\par Added Config3.java to ./config-magic/ repository source files.
\par Added Config4.java to ./config-magic/ repository source files.
\par Added Config5.java to ./config-magic/ repository source files.
\par Added ConfigEnum.java to ./config-magic/ repository source files.
\par Added EnumeratedConfig1.java to ./config-magic/ repository source files.
\par Added MultiConfig.java to ./config-magic/ repository source files.
\par Added Props.java to ./config-magic/ repository source files.
\par Added ReplacementConfig1.java to ./config-magic/ repository source files.
\par Added TestArrays.java to ./config-magic/ repository source files.
\par Added TestBadConfig.java to ./config-magic/ repository source files.
\par Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added TestClasses.java to ./config-magic/ repository source files.
\par Added TestCoercion.java to ./config-magic/ repository source files.
\par Added TestCollections.java to ./config-magic/ repository source files.
\par Added TestCommonsConfig.java to ./config-magic/ repository source files.
\par Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added TestCustomCoercion.java to ./config-magic/ repository source files.
\par Added TestDataAmount.java to ./config-magic/ repository source files.
\par Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
\par Added TestDefaultNull.java to ./config-magic/ repository source files.
\par Added TestDefaultsPresent.java to ./config-magic/ repository source files.
\par Added TestEmptyValue.java to ./config-magic/ repository source files.
\par Added TestEnums.java to ./config-magic/ repository source files.
\par Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
\par Added TestFile.java to ./config-magic/ repository source files.
\par Added TestMultiConfig.java to ./config-magic/ repository source files.
\par Added TestNoFinal.java to ./config-magic/ repository source files.
\par Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added TestTimeSpan.java to ./config-magic/ repository source files.
\par Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
\par Added Wibble.java to ./config-magic/ repository source files.
\par Added WibbleConfig.java to ./config-magic/ repository source files.
\par ************ For file Description.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmountUnit.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> symbol
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDataAmount.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file ConfigurationObjectFactory.java************
\par 
\par Null checks:
\par toStringMethod != null?slots.put(toStringMethod, count++);
\par mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
\par annotation != null?propertyNames = annotation.value();
\par propertyNames == null?throw new IllegalArgumentException("Method " +
\par                                                    method.toGenericString() +
\par                                                    " declares config annotation but no field name!");
\par mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
\par value != null?assignedFrom = "property: '" + propertyName + "'";
\par mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
\par value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
\par value == null?if (hasDefault) \{
\par                 value = method.getAnnotation(Default.class).value();
\par                 assignedFrom = "annotation: @Default";
\par 
\par                 logger.info("Assigning default value [\{\}] for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ value, propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par             \}
\par             else if (hasDefaultNull) \{
\par                 logger.info("Assigning null default value for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 assignedFrom = "annotation: @DefaultNull";
\par             \}
\par             else \{
\par                 // Final try: Is the method is actually callable?
\par                 if (!Modifier.isAbstract(method.getModifiers())) \{
\par                     useMethod = true;
\par                     assignedFrom = "method: '" + method.getName() + "()'";
\par                     logger.info("Using method itself for \{\} on [\{\}#\{\}()]",
\par                                 new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 \}
\par                 else \{
\par                     throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
\par                             prettyPrint(propertyNames, mappedReplacements),
\par                             method.toGenericString()));
\par                 \}
\par             \}
\par annotationValues == null?throw new IllegalArgumentException("Method " +
\par                                                method.toGenericString() +
\par                                                " declares config annotation but no field name!");
\par values == null?return "";
\par mappedReplacements != null?sb.append(" translated to [");
\par toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
\par finalValue != null?sb.append(finalValue.toString());
\par toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
\par value != null?logger.info("Assigning value [\{\}] for [\{\}] on [\{\}#\{\}()]",
\par                                     new Object[] \{ value, property, method.getDeclaringClass().getName(), method.getName() \});
\par toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
\par toStringValue == null?final StringBuilder sb = new StringBuilder();
\par 
\par Null fields: 
\par \tab --> method
\par \tab --> slots
\par \tab --> handler
\par \tab --> paramTokenList
\par \tab --> config
\par \tab --> bully
\par \tab --> properties
\par \tab --> defaultValue
\par \tab --> callbacks
\par \tab --> assignedFrom
\par \tab --> finalValue
\par 
\par Null variables: 
\par In method buildSimple found:
\par \tab --> assignedFrom
\par \tab --> value
\par In method internalBuild found:
\par \tab --> fixedMap
\par In method buildParameterized found:
\par \tab --> defaultValue
\par Null assignments: 
\par In method buildSimple found: 
\par \tab --> value
\par ************ For file Config2.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestConfigurationObjectFactory.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file WibbleConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bully.java************
\par 
\par Null checks:
\par args != null?if (args[0] instanceof Class<?>) \{
\par                         return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
\par                     \}
\par                     else if (args[0] instanceof WildcardType) \{
\par                         return coerceClass(type, (WildcardType)args[0], value);
\par                     \}
\par value == null?return null;
\par separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
\par ctor != null?result = (Collection)ctor.newInstance();
\par result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
\par coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
\par coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
\par typeCoercer == null?for (Coercible<?> coercible : coercibles) \{
\par                 final Coercer<?> coercer = coercible.accept(type);
\par                 if (coercer != null) \{
\par                     mappings.put(type, coercer);
\par                     typeCoercer = coercer;
\par                     break;
\par                 \}
\par             \}
\par coercer != null?mappings.put(type, coercer);
\par 
\par Null fields: 
\par \tab --> TYPE_COERCIBLES
\par 
\par Null variables: 
\par In method coerceCollection found:
\par \tab --> result
\par In method coerceArray found:
\par \tab --> tokens
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercer.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CommonsConfigSource.java************
\par 
\par Null checks:
\par strings == null?return null;
\par 
\par Null fields: 
\par \tab --> config
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigurationObjectFactory.java************
\par 
\par Null checks:
\par toStringMethod != null?slots.put(toStringMethod, count++);
\par mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
\par annotation != null?propertyNames = annotation.value();
\par propertyNames == null?throw new IllegalArgumentException("Method " +
\par                                                    method.toGenericString() +
\par                                                    " declares config annotation but no field name!");
\par mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
\par value != null?assignedFrom = "property: '" + propertyName + "'";
\par mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
\par value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
\par value == null?if (hasDefault) \{
\par                 value = method.getAnnotation(Default.class).value();
\par                 assignedFrom = "annotation: @Default";
\par 
\par                 logger.info("Assigning default value [\{\}] for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ value, propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par             \}
\par             else if (hasDefaultNull) \{
\par                 logger.info("Assigning null default value for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 assignedFrom = "annotation: @DefaultNull";
\par             \}
\par             else \{
\par                 // Final try: Is the method is actually callable?
\par                 if (!Modifier.isAbstract(method.getModifiers())) \{
\par                     useMethod = true;
\par                     assignedFrom = "method: '" + method.getName() + "()'";
\par                     logger.info("Using method itself for \{\} on [\{\}#\{\}()]",
\par                                 new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 \}
\par                 else \{
\par                     throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
\par                             prettyPrint(propertyNames, mappedReplacements),
\par                             method.toGenericString()));
\par                 \}
\par             \}
\par annotationValues == null?throw new IllegalArgumentException("Method " +
\par                                                method.toGenericString() +
\par                                                " declares config annotation but no field name!");
\par values == null?return "";
\par mappedReplacements != null?sb.append(" translated to [");
\par toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
\par finalValue != null?sb.append(finalValue.toString());
\par toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
\par value != null?logger.info("Assigning value [\{\}] for [\{\}] on [\{\}#\{\}()]",
\par                                     new Object[] \{ value, property, method.getDeclaringClass().getName(), method.getName() \});
\par toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
\par toStringValue == null?final StringBuilder sb = new StringBuilder();
\par 
\par Null fields: 
\par \tab --> method
\par \tab --> slots
\par \tab --> handler
\par \tab --> paramTokenList
\par \tab --> config
\par \tab --> bully
\par \tab --> properties
\par \tab --> defaultValue
\par \tab --> callbacks
\par \tab --> assignedFrom
\par \tab --> finalValue
\par 
\par Null variables: 
\par In method buildSimple found:
\par \tab --> assignedFrom
\par \tab --> value
\par In method internalBuild found:
\par \tab --> fixedMap
\par In method buildParameterized found:
\par \tab --> defaultValue
\par Null assignments: 
\par In method buildSimple found: 
\par \tab --> value
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmountUnit.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> symbol
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultCoercibles.java************
\par 
\par Null checks:
\par candidate != null?final Method valueOfMethod = candidate;
\par value == null?return value == null ? null : valueOfMethod.invoke(null, value);
\par value == null?return value == null ? null : ctor.newInstance(value);
\par value != null?return value != null ? Boolean.valueOf(value) : null;
\par value != null?return value != null ? Byte.valueOf(value) : null;
\par value != null?return value != null ? Short.valueOf(value) : null;
\par value != null?return value != null ? Integer.valueOf(value) : null;
\par value != null?return value != null ? Long.valueOf(value) : null;
\par value != null?return value != null ? Float.valueOf(value) : null;
\par value != null?return value != null ? Double.valueOf(value) : null;
\par value != null?return value != null ? URI.create(value) : null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method accept found:
\par \tab --> coercer
\par Null assignments: 
\par In method accept found: 
\par \tab --> candidate
\par \tab --> coercer
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Description.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Param.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> filterConfig
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeSpan.java************
\par 
\par Null checks:
\par unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> millis
\par \tab --> unit
\par \tab --> period
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CoercionConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config2.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config4.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigEnum.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ReplacementConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestBadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestClasses.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCollections.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestConfigurationObjectFactory.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDataAmount.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEmptyValue.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestExposeMappedReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestMultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestVariousPropertyTypes.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par \tab --> sc
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file WibbleConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 17ec358b7e5a877c968dd0392c83a23cedbd83f1 and b0499c140380b66a90573b300687409d594c4e5d:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 17ec358b7e5a877c968dd0392c83a23cedbd83f1
\par 
\par Added Bully.java to ./config-magic/ repository source files.
\par Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added Coercer.java to ./config-magic/ repository source files.
\par Added Coercible.java to ./config-magic/ repository source files.
\par Added CommonsConfigSource.java to ./config-magic/ repository source files.
\par Added Config.java to ./config-magic/ repository source files.
\par Added ConfigReplacements.java to ./config-magic/ repository source files.
\par Added ConfigSource.java to ./config-magic/ repository source files.
\par Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added DataAmount.java to ./config-magic/ repository source files.
\par Added DataAmountUnit.java to ./config-magic/ repository source files.
\par Added Default.java to ./config-magic/ repository source files.
\par Added DefaultCoercibles.java to ./config-magic/ repository source files.
\par Added DefaultNull.java to ./config-magic/ repository source files.
\par Added Description.java to ./config-magic/ repository source files.
\par Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
\par Added Param.java to ./config-magic/ repository source files.
\par Added Separator.java to ./config-magic/ repository source files.
\par Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
\par Added TimeSpan.java to ./config-magic/ repository source files.
\par Added BadConfig.java to ./config-magic/ repository source files.
\par Added CoercionConfig.java to ./config-magic/ repository source files.
\par Added Config1.java to ./config-magic/ repository source files.
\par Added Config2.java to ./config-magic/ repository source files.
\par Added Config3.java to ./config-magic/ repository source files.
\par Added Config4.java to ./config-magic/ repository source files.
\par Added Config5.java to ./config-magic/ repository source files.
\par Added ConfigEnum.java to ./config-magic/ repository source files.
\par Added EnumeratedConfig1.java to ./config-magic/ repository source files.
\par Added MultiConfig.java to ./config-magic/ repository source files.
\par Added Props.java to ./config-magic/ repository source files.
\par Added ReplacementConfig1.java to ./config-magic/ repository source files.
\par Added TestArrays.java to ./config-magic/ repository source files.
\par Added TestBadConfig.java to ./config-magic/ repository source files.
\par Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added TestClasses.java to ./config-magic/ repository source files.
\par Added TestCoercion.java to ./config-magic/ repository source files.
\par Added TestCollections.java to ./config-magic/ repository source files.
\par Added TestCommonsConfig.java to ./config-magic/ repository source files.
\par Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added TestCustomCoercion.java to ./config-magic/ repository source files.
\par Added TestDataAmount.java to ./config-magic/ repository source files.
\par Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
\par Added TestDefaultNull.java to ./config-magic/ repository source files.
\par Added TestDefaultsPresent.java to ./config-magic/ repository source files.
\par Added TestEmptyValue.java to ./config-magic/ repository source files.
\par Added TestEnums.java to ./config-magic/ repository source files.
\par Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
\par Added TestFile.java to ./config-magic/ repository source files.
\par Added TestMultiConfig.java to ./config-magic/ repository source files.
\par Added TestNoFinal.java to ./config-magic/ repository source files.
\par Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added TestTimeSpan.java to ./config-magic/ repository source files.
\par Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
\par Added Wibble.java to ./config-magic/ repository source files.
\par Added WibbleConfig.java to ./config-magic/ repository source files.
\par ************ For file DataAmountUnit.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> symbol
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigurationObjectFactory.java************
\par 
\par Null checks:
\par toStringMethod != null?slots.put(toStringMethod, count++);
\par mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
\par annotation != null?propertyNames = annotation.value();
\par propertyNames == null?throw new IllegalArgumentException("Method " +
\par                                                    method.toGenericString() +
\par                                                    " declares config annotation but no field name!");
\par mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
\par value != null?assignedFrom = "property: '" + propertyName + "'";
\par mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
\par value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
\par value == null?if (hasDefault) \{
\par                 value = method.getAnnotation(Default.class).value();
\par                 assignedFrom = "annotation: @Default";
\par 
\par                 logger.info("Assigning default value [\{\}] for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ value, propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par             \}
\par             else if (hasDefaultNull) \{
\par                 logger.info("Assigning null default value for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 assignedFrom = "annotation: @DefaultNull";
\par             \}
\par             else \{
\par                 // Final try: Is the method is actually callable?
\par                 if (!Modifier.isAbstract(method.getModifiers())) \{
\par                     useMethod = true;
\par                     assignedFrom = "method: '" + method.getName() + "()'";
\par                     logger.info("Using method itself for \{\} on [\{\}#\{\}()]",
\par                                 new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 \}
\par                 else \{
\par                     throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
\par                             prettyPrint(propertyNames, mappedReplacements),
\par                             method.toGenericString()));
\par                 \}
\par             \}
\par annotationValues == null?throw new IllegalArgumentException("Method " +
\par                                                method.toGenericString() +
\par                                                " declares config annotation but no field name!");
\par values == null?return "";
\par mappedReplacements != null?sb.append(" translated to [");
\par toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
\par finalValue != null?sb.append(finalValue.toString());
\par toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
\par value != null?logger.info("Assigning value [\{\}] for [\{\}] on [\{\}#\{\}()]",
\par                                     new Object[] \{ value, property, method.getDeclaringClass().getName(), method.getName() \});
\par toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
\par toStringValue == null?final StringBuilder sb = new StringBuilder();
\par 
\par Null fields: 
\par \tab --> method
\par \tab --> slots
\par \tab --> handler
\par \tab --> paramTokenList
\par \tab --> config
\par \tab --> bully
\par \tab --> properties
\par \tab --> defaultValue
\par \tab --> callbacks
\par \tab --> assignedFrom
\par \tab --> finalValue
\par 
\par Null variables: 
\par In method buildSimple found:
\par \tab --> assignedFrom
\par \tab --> value
\par In method internalBuild found:
\par \tab --> fixedMap
\par In method buildParameterized found:
\par \tab --> defaultValue
\par Null assignments: 
\par In method buildSimple found: 
\par \tab --> value
\par ************ For file TestConfigurationObjectFactory.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bully.java************
\par 
\par Null checks:
\par args != null?if (args[0] instanceof Class<?>) \{
\par                         return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
\par                     \}
\par                     else if (args[0] instanceof WildcardType) \{
\par                         return coerceClass(type, (WildcardType)args[0], value);
\par                     \}
\par value == null?return null;
\par separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
\par ctor != null?result = (Collection)ctor.newInstance();
\par result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
\par coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
\par coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
\par typeCoercer == null?for (Coercible<?> coercible : coercibles) \{
\par                 final Coercer<?> coercer = coercible.accept(type);
\par                 if (coercer != null) \{
\par                     mappings.put(type, coercer);
\par                     typeCoercer = coercer;
\par                     break;
\par                 \}
\par             \}
\par coercer != null?mappings.put(type, coercer);
\par 
\par Null fields: 
\par \tab --> TYPE_COERCIBLES
\par 
\par Null variables: 
\par In method coerceCollection found:
\par \tab --> result
\par In method coerceArray found:
\par \tab --> tokens
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercer.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CommonsConfigSource.java************
\par 
\par Null checks:
\par strings == null?return null;
\par 
\par Null fields: 
\par \tab --> config
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigurationObjectFactory.java************
\par 
\par Null checks:
\par toStringMethod != null?slots.put(toStringMethod, count++);
\par mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
\par annotation != null?propertyNames = annotation.value();
\par propertyNames == null?throw new IllegalArgumentException("Method " +
\par                                                    method.toGenericString() +
\par                                                    " declares config annotation but no field name!");
\par mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
\par value != null?assignedFrom = "property: '" + propertyName + "'";
\par mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
\par value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
\par value == null?if (hasDefault) \{
\par                 value = method.getAnnotation(Default.class).value();
\par                 assignedFrom = "annotation: @Default";
\par 
\par                 logger.info("Assigning default value [\{\}] for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ value, propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par             \}
\par             else if (hasDefaultNull) \{
\par                 logger.info("Assigning null default value for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 assignedFrom = "annotation: @DefaultNull";
\par             \}
\par             else \{
\par                 // Final try: Is the method is actually callable?
\par                 if (!Modifier.isAbstract(method.getModifiers())) \{
\par                     useMethod = true;
\par                     assignedFrom = "method: '" + method.getName() + "()'";
\par                     logger.info("Using method itself for \{\} on [\{\}#\{\}()]",
\par                                 new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 \}
\par                 else \{
\par                     throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
\par                             prettyPrint(propertyNames, mappedReplacements),
\par                             method.toGenericString()));
\par                 \}
\par             \}
\par annotationValues == null?throw new IllegalArgumentException("Method " +
\par                                                method.toGenericString() +
\par                                                " declares config annotation but no field name!");
\par values == null?return "";
\par mappedReplacements != null?sb.append(" translated to [");
\par toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
\par finalValue != null?sb.append(finalValue.toString());
\par toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
\par value != null?logger.info("Assigning value [\{\}] for [\{\}] on [\{\}#\{\}()]",
\par                                     new Object[] \{ value, property, method.getDeclaringClass().getName(), method.getName() \});
\par toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
\par toStringValue == null?final StringBuilder sb = new StringBuilder();
\par 
\par Null fields: 
\par \tab --> method
\par \tab --> slots
\par \tab --> handler
\par \tab --> paramTokenList
\par \tab --> config
\par \tab --> bully
\par \tab --> properties
\par \tab --> defaultValue
\par \tab --> callbacks
\par \tab --> assignedFrom
\par \tab --> finalValue
\par 
\par Null variables: 
\par In method buildSimple found:
\par \tab --> assignedFrom
\par \tab --> value
\par In method internalBuild found:
\par \tab --> fixedMap
\par In method buildParameterized found:
\par \tab --> defaultValue
\par Null assignments: 
\par In method buildSimple found: 
\par \tab --> value
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmountUnit.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> symbol
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultCoercibles.java************
\par 
\par Null checks:
\par candidate != null?final Method valueOfMethod = candidate;
\par value == null?return value == null ? null : valueOfMethod.invoke(null, value);
\par value == null?return value == null ? null : ctor.newInstance(value);
\par value != null?return value != null ? Boolean.valueOf(value) : null;
\par value != null?return value != null ? Byte.valueOf(value) : null;
\par value != null?return value != null ? Short.valueOf(value) : null;
\par value != null?return value != null ? Integer.valueOf(value) : null;
\par value != null?return value != null ? Long.valueOf(value) : null;
\par value != null?return value != null ? Float.valueOf(value) : null;
\par value != null?return value != null ? Double.valueOf(value) : null;
\par value != null?return value != null ? URI.create(value) : null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method accept found:
\par \tab --> coercer
\par Null assignments: 
\par In method accept found: 
\par \tab --> candidate
\par \tab --> coercer
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Description.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Param.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> filterConfig
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeSpan.java************
\par 
\par Null checks:
\par unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> millis
\par \tab --> unit
\par \tab --> period
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CoercionConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config2.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config4.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigEnum.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ReplacementConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestBadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestClasses.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCollections.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestConfigurationObjectFactory.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDataAmount.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEmptyValue.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestExposeMappedReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestMultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestVariousPropertyTypes.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par \tab --> sc
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file WibbleConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of c64d4cd844a47c1728a62edb9a6691ed2e98e175 and 17ec358b7e5a877c968dd0392c83a23cedbd83f1:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit c64d4cd844a47c1728a62edb9a6691ed2e98e175
\par 
\par Added Bully.java to ./config-magic/ repository source files.
\par Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added Coercer.java to ./config-magic/ repository source files.
\par Added Coercible.java to ./config-magic/ repository source files.
\par Added CommonsConfigSource.java to ./config-magic/ repository source files.
\par Added Config.java to ./config-magic/ repository source files.
\par Added ConfigReplacements.java to ./config-magic/ repository source files.
\par Added ConfigSource.java to ./config-magic/ repository source files.
\par Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added DataAmount.java to ./config-magic/ repository source files.
\par Added DataAmountUnit.java to ./config-magic/ repository source files.
\par Added Default.java to ./config-magic/ repository source files.
\par Added DefaultCoercibles.java to ./config-magic/ repository source files.
\par Added DefaultNull.java to ./config-magic/ repository source files.
\par Added Description.java to ./config-magic/ repository source files.
\par Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
\par Added Param.java to ./config-magic/ repository source files.
\par Added Separator.java to ./config-magic/ repository source files.
\par Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
\par Added TimeSpan.java to ./config-magic/ repository source files.
\par Added BadConfig.java to ./config-magic/ repository source files.
\par Added CoercionConfig.java to ./config-magic/ repository source files.
\par Added Config1.java to ./config-magic/ repository source files.
\par Added Config2.java to ./config-magic/ repository source files.
\par Added Config3.java to ./config-magic/ repository source files.
\par Added Config4.java to ./config-magic/ repository source files.
\par Added Config5.java to ./config-magic/ repository source files.
\par Added ConfigEnum.java to ./config-magic/ repository source files.
\par Added EnumeratedConfig1.java to ./config-magic/ repository source files.
\par Added MultiConfig.java to ./config-magic/ repository source files.
\par Added Props.java to ./config-magic/ repository source files.
\par Added ReplacementConfig1.java to ./config-magic/ repository source files.
\par Added TestArrays.java to ./config-magic/ repository source files.
\par Added TestBadConfig.java to ./config-magic/ repository source files.
\par Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added TestClasses.java to ./config-magic/ repository source files.
\par Added TestCoercion.java to ./config-magic/ repository source files.
\par Added TestCollections.java to ./config-magic/ repository source files.
\par Added TestCommonsConfig.java to ./config-magic/ repository source files.
\par Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added TestCustomCoercion.java to ./config-magic/ repository source files.
\par Added TestDataAmount.java to ./config-magic/ repository source files.
\par Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
\par Added TestDefaultNull.java to ./config-magic/ repository source files.
\par Added TestDefaultsPresent.java to ./config-magic/ repository source files.
\par Added TestEmptyValue.java to ./config-magic/ repository source files.
\par Added TestEnums.java to ./config-magic/ repository source files.
\par Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
\par Added TestFile.java to ./config-magic/ repository source files.
\par Added TestMultiConfig.java to ./config-magic/ repository source files.
\par Added TestNoFinal.java to ./config-magic/ repository source files.
\par Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added TestTimeSpan.java to ./config-magic/ repository source files.
\par Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
\par Added Wibble.java to ./config-magic/ repository source files.
\par Added WibbleConfig.java to ./config-magic/ repository source files.
\par ************ For file ConfigurationObjectFactory.java************
\par 
\par Null checks:
\par toStringMethod != null?slots.put(toStringMethod, count++);
\par mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
\par annotation != null?propertyNames = annotation.value();
\par propertyNames == null?throw new IllegalArgumentException("Method " +
\par                                                    method.toGenericString() +
\par                                                    " declares config annotation but no field name!");
\par mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
\par value != null?assignedFrom = "property: '" + propertyName + "'";
\par mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
\par value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
\par value == null?if (hasDefault) \{
\par                 value = method.getAnnotation(Default.class).value();
\par                 assignedFrom = "annotation: @Default";
\par 
\par                 logger.info("Assigning default value [\{\}] for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ value, propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par             \}
\par             else if (hasDefaultNull) \{
\par                 logger.info("Assigning null default value for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 assignedFrom = "annotation: @DefaultNull";
\par             \}
\par             else \{
\par                 // Final try: Is the method is actually callable?
\par                 if (!Modifier.isAbstract(method.getModifiers())) \{
\par                     useMethod = true;
\par                     assignedFrom = "method: '" + method.getName() + "()'";
\par                     logger.info("Using method itself for \{\} on [\{\}#\{\}()]",
\par                                 new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 \}
\par                 else \{
\par                     throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
\par                             prettyPrint(propertyNames, mappedReplacements),
\par                             method.toGenericString()));
\par                 \}
\par             \}
\par annotationValues == null?throw new IllegalArgumentException("Method " +
\par                                                method.toGenericString() +
\par                                                " declares config annotation but no field name!");
\par values == null?return "";
\par mappedReplacements != null?sb.append(" translated to [");
\par toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
\par finalValue != null?sb.append(finalValue.toString());
\par toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
\par value != null?logger.info("Assigning value [\{\}] for [\{\}] on [\{\}#\{\}()]",
\par                                     new Object[] \{ value, property, method.getDeclaringClass().getName(), method.getName() \});
\par toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
\par toStringValue == null?final StringBuilder sb = new StringBuilder();
\par 
\par Null fields: 
\par \tab --> method
\par \tab --> slots
\par \tab --> handler
\par \tab --> paramTokenList
\par \tab --> config
\par \tab --> bully
\par \tab --> properties
\par \tab --> defaultValue
\par \tab --> callbacks
\par \tab --> assignedFrom
\par \tab --> finalValue
\par 
\par Null variables: 
\par In method buildSimple found:
\par \tab --> assignedFrom
\par \tab --> value
\par In method internalBuild found:
\par \tab --> fixedMap
\par In method buildParameterized found:
\par \tab --> defaultValue
\par Null assignments: 
\par In method buildSimple found: 
\par \tab --> value
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bully.java************
\par 
\par Null checks:
\par args != null?if (args[0] instanceof Class<?>) \{
\par                         return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
\par                     \}
\par                     else if (args[0] instanceof WildcardType) \{
\par                         return coerceClass(type, (WildcardType)args[0], value);
\par                     \}
\par value == null?return null;
\par separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
\par ctor != null?result = (Collection)ctor.newInstance();
\par result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
\par coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
\par coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
\par typeCoercer == null?for (Coercible<?> coercible : coercibles) \{
\par                 final Coercer<?> coercer = coercible.accept(type);
\par                 if (coercer != null) \{
\par                     mappings.put(type, coercer);
\par                     typeCoercer = coercer;
\par                     break;
\par                 \}
\par             \}
\par coercer != null?mappings.put(type, coercer);
\par 
\par Null fields: 
\par \tab --> TYPE_COERCIBLES
\par 
\par Null variables: 
\par In method coerceCollection found:
\par \tab --> result
\par In method coerceArray found:
\par \tab --> tokens
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercer.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CommonsConfigSource.java************
\par 
\par Null checks:
\par strings == null?return null;
\par 
\par Null fields: 
\par \tab --> config
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigurationObjectFactory.java************
\par 
\par Null checks:
\par toStringMethod != null?slots.put(toStringMethod, count++);
\par mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
\par annotation != null?propertyNames = annotation.value();
\par propertyNames == null?throw new IllegalArgumentException("Method " +
\par                                                    method.toGenericString() +
\par                                                    " declares config annotation but no field name!");
\par mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
\par value != null?assignedFrom = "property: '" + propertyName + "'";
\par mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
\par value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
\par value == null?if (hasDefault) \{
\par                 value = method.getAnnotation(Default.class).value();
\par                 assignedFrom = "annotation: @Default";
\par 
\par                 logger.info("Assigning default value [\{\}] for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ value, propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par             \}
\par             else if (hasDefaultNull) \{
\par                 logger.info("Assigning null default value for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 assignedFrom = "annotation: @DefaultNull";
\par             \}
\par             else \{
\par                 // Final try: Is the method is actually callable?
\par                 if (!Modifier.isAbstract(method.getModifiers())) \{
\par                     useMethod = true;
\par                     assignedFrom = "method: '" + method.getName() + "()'";
\par                     logger.info("Using method itself for \{\} on [\{\}#\{\}()]",
\par                                 new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 \}
\par                 else \{
\par                     throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
\par                             prettyPrint(propertyNames, mappedReplacements),
\par                             method.toGenericString()));
\par                 \}
\par             \}
\par annotationValues == null?throw new IllegalArgumentException("Method " +
\par                                                method.toGenericString() +
\par                                                " declares config annotation but no field name!");
\par values == null?return "";
\par mappedReplacements != null?sb.append(" translated to [");
\par toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
\par finalValue != null?sb.append(finalValue.toString());
\par toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
\par value != null?logger.info("Assigning value [\{\}] for [\{\}] on [\{\}#\{\}()]",
\par                                     new Object[] \{ value, property, method.getDeclaringClass().getName(), method.getName() \});
\par toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
\par toStringValue == null?final StringBuilder sb = new StringBuilder();
\par 
\par Null fields: 
\par \tab --> method
\par \tab --> slots
\par \tab --> handler
\par \tab --> paramTokenList
\par \tab --> config
\par \tab --> bully
\par \tab --> properties
\par \tab --> defaultValue
\par \tab --> callbacks
\par \tab --> assignedFrom
\par \tab --> finalValue
\par 
\par Null variables: 
\par In method buildSimple found:
\par \tab --> assignedFrom
\par \tab --> value
\par In method internalBuild found:
\par \tab --> fixedMap
\par In method buildParameterized found:
\par \tab --> defaultValue
\par Null assignments: 
\par In method buildSimple found: 
\par \tab --> value
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmountUnit.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> symbol
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultCoercibles.java************
\par 
\par Null checks:
\par candidate != null?final Method valueOfMethod = candidate;
\par value == null?return value == null ? null : valueOfMethod.invoke(null, value);
\par value == null?return value == null ? null : ctor.newInstance(value);
\par value != null?return value != null ? Boolean.valueOf(value) : null;
\par value != null?return value != null ? Byte.valueOf(value) : null;
\par value != null?return value != null ? Short.valueOf(value) : null;
\par value != null?return value != null ? Integer.valueOf(value) : null;
\par value != null?return value != null ? Long.valueOf(value) : null;
\par value != null?return value != null ? Float.valueOf(value) : null;
\par value != null?return value != null ? Double.valueOf(value) : null;
\par value != null?return value != null ? URI.create(value) : null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method accept found:
\par \tab --> coercer
\par Null assignments: 
\par In method accept found: 
\par \tab --> candidate
\par \tab --> coercer
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Description.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Param.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> filterConfig
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeSpan.java************
\par 
\par Null checks:
\par unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> millis
\par \tab --> unit
\par \tab --> period
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CoercionConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config2.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config4.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigEnum.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ReplacementConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestBadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestClasses.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCollections.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestConfigurationObjectFactory.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDataAmount.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEmptyValue.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestExposeMappedReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestMultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestVariousPropertyTypes.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par \tab --> sc
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file WibbleConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 5a67240db8a6977bfa1c226b941f2e9379bb1b48 and c64d4cd844a47c1728a62edb9a6691ed2e98e175:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 5a67240db8a6977bfa1c226b941f2e9379bb1b48
\par 
\par Added Bully.java to ./config-magic/ repository source files.
\par Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added Coercer.java to ./config-magic/ repository source files.
\par Added Coercible.java to ./config-magic/ repository source files.
\par Added CommonsConfigSource.java to ./config-magic/ repository source files.
\par Added Config.java to ./config-magic/ repository source files.
\par Added ConfigReplacements.java to ./config-magic/ repository source files.
\par Added ConfigSource.java to ./config-magic/ repository source files.
\par Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added DataAmount.java to ./config-magic/ repository source files.
\par Added DataAmountUnit.java to ./config-magic/ repository source files.
\par Added Default.java to ./config-magic/ repository source files.
\par Added DefaultCoercibles.java to ./config-magic/ repository source files.
\par Added DefaultNull.java to ./config-magic/ repository source files.
\par Added Description.java to ./config-magic/ repository source files.
\par Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
\par Added Param.java to ./config-magic/ repository source files.
\par Added Separator.java to ./config-magic/ repository source files.
\par Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
\par Added TimeSpan.java to ./config-magic/ repository source files.
\par Added BadConfig.java to ./config-magic/ repository source files.
\par Added CoercionConfig.java to ./config-magic/ repository source files.
\par Added Config1.java to ./config-magic/ repository source files.
\par Added Config2.java to ./config-magic/ repository source files.
\par Added Config3.java to ./config-magic/ repository source files.
\par Added Config4.java to ./config-magic/ repository source files.
\par Added Config5.java to ./config-magic/ repository source files.
\par Added ConfigEnum.java to ./config-magic/ repository source files.
\par Added EnumeratedConfig1.java to ./config-magic/ repository source files.
\par Added MultiConfig.java to ./config-magic/ repository source files.
\par Added Props.java to ./config-magic/ repository source files.
\par Added ReplacementConfig1.java to ./config-magic/ repository source files.
\par Added TestArrays.java to ./config-magic/ repository source files.
\par Added TestBadConfig.java to ./config-magic/ repository source files.
\par Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added TestClasses.java to ./config-magic/ repository source files.
\par Added TestCoercion.java to ./config-magic/ repository source files.
\par Added TestCollections.java to ./config-magic/ repository source files.
\par Added TestCommonsConfig.java to ./config-magic/ repository source files.
\par Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added TestCustomCoercion.java to ./config-magic/ repository source files.
\par Added TestDataAmount.java to ./config-magic/ repository source files.
\par Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
\par Added TestDefaultNull.java to ./config-magic/ repository source files.
\par Added TestDefaultsPresent.java to ./config-magic/ repository source files.
\par Added TestEmptyValue.java to ./config-magic/ repository source files.
\par Added TestEnums.java to ./config-magic/ repository source files.
\par Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
\par Added TestFile.java to ./config-magic/ repository source files.
\par Added TestMultiConfig.java to ./config-magic/ repository source files.
\par Added TestNoFinal.java to ./config-magic/ repository source files.
\par Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added TestTimeSpan.java to ./config-magic/ repository source files.
\par Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
\par Added Wibble.java to ./config-magic/ repository source files.
\par Added WibbleConfig.java to ./config-magic/ repository source files.
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bully.java************
\par 
\par Null checks:
\par args != null?if (args[0] instanceof Class<?>) \{
\par                         return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
\par                     \}
\par                     else if (args[0] instanceof WildcardType) \{
\par                         return coerceClass(type, (WildcardType)args[0], value);
\par                     \}
\par value == null?return null;
\par separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
\par ctor != null?result = (Collection)ctor.newInstance();
\par result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
\par coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
\par coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
\par typeCoercer == null?for (Coercible<?> coercible : coercibles) \{
\par                 final Coercer<?> coercer = coercible.accept(type);
\par                 if (coercer != null) \{
\par                     mappings.put(type, coercer);
\par                     typeCoercer = coercer;
\par                     break;
\par                 \}
\par             \}
\par coercer != null?mappings.put(type, coercer);
\par 
\par Null fields: 
\par \tab --> TYPE_COERCIBLES
\par 
\par Null variables: 
\par In method coerceCollection found:
\par \tab --> result
\par In method coerceArray found:
\par \tab --> tokens
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercer.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CommonsConfigSource.java************
\par 
\par Null checks:
\par strings == null?return null;
\par 
\par Null fields: 
\par \tab --> config
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigurationObjectFactory.java************
\par 
\par Null checks:
\par toStringMethod != null?slots.put(toStringMethod, count++);
\par mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
\par annotation != null?propertyNames = annotation.value();
\par propertyNames == null?throw new IllegalArgumentException("Method " +
\par                                                    method.toGenericString() +
\par                                                    " declares config annotation but no field name!");
\par mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
\par value != null?assignedFrom = "property: '" + propertyName + "'";
\par mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
\par value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
\par value == null?if (hasDefault) \{
\par                 value = method.getAnnotation(Default.class).value();
\par                 assignedFrom = "annotation: @Default";
\par 
\par                 logger.info("Assigning default value [\{\}] for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ value, propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par             \}
\par             else if (hasDefaultNull) \{
\par                 logger.info("Assigning null default value for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 assignedFrom = "annotation: @DefaultNull";
\par             \}
\par             else \{
\par                 // Final try: Is the method is actually callable?
\par                 if (!Modifier.isAbstract(method.getModifiers())) \{
\par                     useMethod = true;
\par                     assignedFrom = "method: '" + method.getName() + "()'";
\par                     logger.info("Using method itself for \{\} on [\{\}#\{\}()]",
\par                                 new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 \}
\par                 else \{
\par                     throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
\par                             prettyPrint(propertyNames, mappedReplacements),
\par                             method.toGenericString()));
\par                 \}
\par             \}
\par annotationValues == null?throw new IllegalArgumentException("Method " +
\par                                                method.toGenericString() +
\par                                                " declares config annotation but no field name!");
\par values == null?return "";
\par mappedReplacements != null?sb.append(" translated to [");
\par toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
\par finalValue != null?sb.append(finalValue.toString());
\par toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
\par value != null?logger.info("Assigning value [\{\}] for [\{\}] on [\{\}#\{\}()]",
\par                                     new Object[] \{ value, property, method.getDeclaringClass().getName(), method.getName() \});
\par toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
\par toStringValue == null?final StringBuilder sb = new StringBuilder();
\par 
\par Null fields: 
\par \tab --> method
\par \tab --> slots
\par \tab --> handler
\par \tab --> paramTokenList
\par \tab --> config
\par \tab --> bully
\par \tab --> properties
\par \tab --> defaultValue
\par \tab --> callbacks
\par \tab --> assignedFrom
\par \tab --> finalValue
\par 
\par Null variables: 
\par In method buildSimple found:
\par \tab --> assignedFrom
\par \tab --> value
\par In method internalBuild found:
\par \tab --> fixedMap
\par In method buildParameterized found:
\par \tab --> defaultValue
\par Null assignments: 
\par In method buildSimple found: 
\par \tab --> value
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmountUnit.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> symbol
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultCoercibles.java************
\par 
\par Null checks:
\par candidate != null?final Method valueOfMethod = candidate;
\par value == null?return value == null ? null : valueOfMethod.invoke(null, value);
\par value == null?return value == null ? null : ctor.newInstance(value);
\par value != null?return value != null ? Boolean.valueOf(value) : null;
\par value != null?return value != null ? Byte.valueOf(value) : null;
\par value != null?return value != null ? Short.valueOf(value) : null;
\par value != null?return value != null ? Integer.valueOf(value) : null;
\par value != null?return value != null ? Long.valueOf(value) : null;
\par value != null?return value != null ? Float.valueOf(value) : null;
\par value != null?return value != null ? Double.valueOf(value) : null;
\par value != null?return value != null ? URI.create(value) : null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method accept found:
\par \tab --> coercer
\par Null assignments: 
\par In method accept found: 
\par \tab --> candidate
\par \tab --> coercer
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Description.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Param.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> filterConfig
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeSpan.java************
\par 
\par Null checks:
\par unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> millis
\par \tab --> unit
\par \tab --> period
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CoercionConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config2.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config4.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigEnum.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ReplacementConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestBadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestClasses.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCollections.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestConfigurationObjectFactory.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDataAmount.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEmptyValue.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestExposeMappedReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestMultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestVariousPropertyTypes.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par \tab --> sc
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file WibbleConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 7271507604d9f4450db2827e9446aa5da1f736ae and 5a67240db8a6977bfa1c226b941f2e9379bb1b48:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 7271507604d9f4450db2827e9446aa5da1f736ae
\par 
\par Added Bully.java to ./config-magic/ repository source files.
\par Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added Coercer.java to ./config-magic/ repository source files.
\par Added Coercible.java to ./config-magic/ repository source files.
\par Added CommonsConfigSource.java to ./config-magic/ repository source files.
\par Added Config.java to ./config-magic/ repository source files.
\par Added ConfigReplacements.java to ./config-magic/ repository source files.
\par Added ConfigSource.java to ./config-magic/ repository source files.
\par Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added DataAmount.java to ./config-magic/ repository source files.
\par Added DataAmountUnit.java to ./config-magic/ repository source files.
\par Added Default.java to ./config-magic/ repository source files.
\par Added DefaultCoercibles.java to ./config-magic/ repository source files.
\par Added DefaultNull.java to ./config-magic/ repository source files.
\par Added Description.java to ./config-magic/ repository source files.
\par Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
\par Added Param.java to ./config-magic/ repository source files.
\par Added Separator.java to ./config-magic/ repository source files.
\par Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
\par Added TimeSpan.java to ./config-magic/ repository source files.
\par Added BadConfig.java to ./config-magic/ repository source files.
\par Added CoercionConfig.java to ./config-magic/ repository source files.
\par Added Config1.java to ./config-magic/ repository source files.
\par Added Config2.java to ./config-magic/ repository source files.
\par Added Config3.java to ./config-magic/ repository source files.
\par Added Config4.java to ./config-magic/ repository source files.
\par Added Config5.java to ./config-magic/ repository source files.
\par Added ConfigEnum.java to ./config-magic/ repository source files.
\par Added EnumeratedConfig1.java to ./config-magic/ repository source files.
\par Added MultiConfig.java to ./config-magic/ repository source files.
\par Added Props.java to ./config-magic/ repository source files.
\par Added ReplacementConfig1.java to ./config-magic/ repository source files.
\par Added TestArrays.java to ./config-magic/ repository source files.
\par Added TestBadConfig.java to ./config-magic/ repository source files.
\par Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added TestClasses.java to ./config-magic/ repository source files.
\par Added TestCoercion.java to ./config-magic/ repository source files.
\par Added TestCollections.java to ./config-magic/ repository source files.
\par Added TestCommonsConfig.java to ./config-magic/ repository source files.
\par Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added TestCustomCoercion.java to ./config-magic/ repository source files.
\par Added TestDataAmount.java to ./config-magic/ repository source files.
\par Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
\par Added TestDefaultNull.java to ./config-magic/ repository source files.
\par Added TestDefaultsPresent.java to ./config-magic/ repository source files.
\par Added TestEmptyValue.java to ./config-magic/ repository source files.
\par Added TestEnums.java to ./config-magic/ repository source files.
\par Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
\par Added TestFile.java to ./config-magic/ repository source files.
\par Added TestMultiConfig.java to ./config-magic/ repository source files.
\par Added TestNoFinal.java to ./config-magic/ repository source files.
\par Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added TestTimeSpan.java to ./config-magic/ repository source files.
\par Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
\par Added Wibble.java to ./config-magic/ repository source files.
\par Added WibbleConfig.java to ./config-magic/ repository source files.
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bully.java************
\par 
\par Null checks:
\par args != null?if (args[0] instanceof Class<?>) \{
\par                         return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
\par                     \}
\par                     else if (args[0] instanceof WildcardType) \{
\par                         return coerceClass(type, (WildcardType)args[0], value);
\par                     \}
\par value == null?return null;
\par separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
\par ctor != null?result = (Collection)ctor.newInstance();
\par result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
\par coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
\par coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
\par typeCoercer == null?for (Coercible<?> coercible : coercibles) \{
\par                 final Coercer<?> coercer = coercible.accept(type);
\par                 if (coercer != null) \{
\par                     mappings.put(type, coercer);
\par                     typeCoercer = coercer;
\par                     break;
\par                 \}
\par             \}
\par coercer != null?mappings.put(type, coercer);
\par 
\par Null fields: 
\par \tab --> TYPE_COERCIBLES
\par 
\par Null variables: 
\par In method coerceCollection found:
\par \tab --> result
\par In method coerceArray found:
\par \tab --> tokens
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercer.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CommonsConfigSource.java************
\par 
\par Null checks:
\par strings == null?return null;
\par 
\par Null fields: 
\par \tab --> config
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigurationObjectFactory.java************
\par 
\par Null checks:
\par toStringMethod != null?slots.put(toStringMethod, count++);
\par mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
\par annotation != null?propertyNames = annotation.value();
\par propertyNames == null?throw new IllegalArgumentException("Method " +
\par                                                    method.toGenericString() +
\par                                                    " declares config annotation but no field name!");
\par mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
\par value != null?assignedFrom = "property: '" + propertyName + "'";
\par mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
\par value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
\par value == null?if (hasDefault) \{
\par                 value = method.getAnnotation(Default.class).value();
\par                 assignedFrom = "annotation: @Default";
\par 
\par                 logger.info("Assigning default value [\{\}] for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ value, propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par             \}
\par             else if (hasDefaultNull) \{
\par                 logger.info("Assigning null default value for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 assignedFrom = "annotation: @DefaultNull";
\par             \}
\par             else \{
\par                 // Final try: Is the method is actually callable?
\par                 if (!Modifier.isAbstract(method.getModifiers())) \{
\par                     useMethod = true;
\par                     assignedFrom = "method: '" + method.getName() + "()'";
\par                     logger.info("Using method itself for \{\} on [\{\}#\{\}()]",
\par                                 new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 \}
\par                 else \{
\par                     throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
\par                             prettyPrint(propertyNames, mappedReplacements),
\par                             method.toGenericString()));
\par                 \}
\par             \}
\par annotationValues == null?throw new IllegalArgumentException("Method " +
\par                                                method.toGenericString() +
\par                                                " declares config annotation but no field name!");
\par values == null?return "";
\par mappedReplacements != null?sb.append(" translated to [");
\par toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
\par finalValue != null?sb.append(finalValue.toString());
\par toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
\par value != null?logger.info("Assigning value [\{\}] for [\{\}] on [\{\}#\{\}()]",
\par                                     new Object[] \{ value, property, method.getDeclaringClass().getName(), method.getName() \});
\par toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
\par toStringValue == null?final StringBuilder sb = new StringBuilder();
\par 
\par Null fields: 
\par \tab --> method
\par \tab --> slots
\par \tab --> handler
\par \tab --> paramTokenList
\par \tab --> config
\par \tab --> bully
\par \tab --> properties
\par \tab --> defaultValue
\par \tab --> callbacks
\par \tab --> assignedFrom
\par \tab --> finalValue
\par 
\par Null variables: 
\par In method buildSimple found:
\par \tab --> assignedFrom
\par \tab --> value
\par In method internalBuild found:
\par \tab --> fixedMap
\par In method buildParameterized found:
\par \tab --> defaultValue
\par Null assignments: 
\par In method buildSimple found: 
\par \tab --> value
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmountUnit.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> symbol
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultCoercibles.java************
\par 
\par Null checks:
\par candidate != null?final Method valueOfMethod = candidate;
\par value == null?return value == null ? null : valueOfMethod.invoke(null, value);
\par value == null?return value == null ? null : ctor.newInstance(value);
\par value != null?return value != null ? Boolean.valueOf(value) : null;
\par value != null?return value != null ? Byte.valueOf(value) : null;
\par value != null?return value != null ? Short.valueOf(value) : null;
\par value != null?return value != null ? Integer.valueOf(value) : null;
\par value != null?return value != null ? Long.valueOf(value) : null;
\par value != null?return value != null ? Float.valueOf(value) : null;
\par value != null?return value != null ? Double.valueOf(value) : null;
\par value != null?return value != null ? URI.create(value) : null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method accept found:
\par \tab --> coercer
\par Null assignments: 
\par In method accept found: 
\par \tab --> candidate
\par \tab --> coercer
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Description.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Param.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> filterConfig
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeSpan.java************
\par 
\par Null checks:
\par unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> millis
\par \tab --> unit
\par \tab --> period
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CoercionConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config2.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config4.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigEnum.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ReplacementConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestBadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestClasses.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCollections.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestConfigurationObjectFactory.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDataAmount.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEmptyValue.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestExposeMappedReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestMultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestVariousPropertyTypes.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par \tab --> sc
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file WibbleConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 7b3fa0b4d5b608e37a73e5453e25669f658dbf58 and 7271507604d9f4450db2827e9446aa5da1f736ae:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 7b3fa0b4d5b608e37a73e5453e25669f658dbf58
\par 
\par Added Bully.java to ./config-magic/ repository source files.
\par Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added Coercer.java to ./config-magic/ repository source files.
\par Added Coercible.java to ./config-magic/ repository source files.
\par Added CommonsConfigSource.java to ./config-magic/ repository source files.
\par Added Config.java to ./config-magic/ repository source files.
\par Added ConfigReplacements.java to ./config-magic/ repository source files.
\par Added ConfigSource.java to ./config-magic/ repository source files.
\par Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added DataAmount.java to ./config-magic/ repository source files.
\par Added DataAmountUnit.java to ./config-magic/ repository source files.
\par Added Default.java to ./config-magic/ repository source files.
\par Added DefaultCoercibles.java to ./config-magic/ repository source files.
\par Added DefaultNull.java to ./config-magic/ repository source files.
\par Added Description.java to ./config-magic/ repository source files.
\par Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
\par Added Param.java to ./config-magic/ repository source files.
\par Added Separator.java to ./config-magic/ repository source files.
\par Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
\par Added TimeSpan.java to ./config-magic/ repository source files.
\par Added BadConfig.java to ./config-magic/ repository source files.
\par Added CoercionConfig.java to ./config-magic/ repository source files.
\par Added Config1.java to ./config-magic/ repository source files.
\par Added Config2.java to ./config-magic/ repository source files.
\par Added Config3.java to ./config-magic/ repository source files.
\par Added Config4.java to ./config-magic/ repository source files.
\par Added Config5.java to ./config-magic/ repository source files.
\par Added ConfigEnum.java to ./config-magic/ repository source files.
\par Added EnumeratedConfig1.java to ./config-magic/ repository source files.
\par Added MultiConfig.java to ./config-magic/ repository source files.
\par Added Props.java to ./config-magic/ repository source files.
\par Added ReplacementConfig1.java to ./config-magic/ repository source files.
\par Added TestArrays.java to ./config-magic/ repository source files.
\par Added TestBadConfig.java to ./config-magic/ repository source files.
\par Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added TestClasses.java to ./config-magic/ repository source files.
\par Added TestCoercion.java to ./config-magic/ repository source files.
\par Added TestCollections.java to ./config-magic/ repository source files.
\par Added TestCommonsConfig.java to ./config-magic/ repository source files.
\par Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added TestCustomCoercion.java to ./config-magic/ repository source files.
\par Added TestDataAmount.java to ./config-magic/ repository source files.
\par Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
\par Added TestDefaultNull.java to ./config-magic/ repository source files.
\par Added TestDefaultsPresent.java to ./config-magic/ repository source files.
\par Added TestEmptyValue.java to ./config-magic/ repository source files.
\par Added TestEnums.java to ./config-magic/ repository source files.
\par Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
\par Added TestFile.java to ./config-magic/ repository source files.
\par Added TestMultiConfig.java to ./config-magic/ repository source files.
\par Added TestNoFinal.java to ./config-magic/ repository source files.
\par Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added TestTimeSpan.java to ./config-magic/ repository source files.
\par Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
\par Added Wibble.java to ./config-magic/ repository source files.
\par Added WibbleConfig.java to ./config-magic/ repository source files.
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bully.java************
\par 
\par Null checks:
\par args != null?if (args[0] instanceof Class<?>) \{
\par                         return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
\par                     \}
\par                     else if (args[0] instanceof WildcardType) \{
\par                         return coerceClass(type, (WildcardType)args[0], value);
\par                     \}
\par value == null?return null;
\par separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
\par ctor != null?result = (Collection)ctor.newInstance();
\par result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
\par coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
\par coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
\par typeCoercer == null?for (Coercible<?> coercible : coercibles) \{
\par                 final Coercer<?> coercer = coercible.accept(type);
\par                 if (coercer != null) \{
\par                     mappings.put(type, coercer);
\par                     typeCoercer = coercer;
\par                     break;
\par                 \}
\par             \}
\par coercer != null?mappings.put(type, coercer);
\par 
\par Null fields: 
\par \tab --> TYPE_COERCIBLES
\par 
\par Null variables: 
\par In method coerceCollection found:
\par \tab --> result
\par In method coerceArray found:
\par \tab --> tokens
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercer.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CommonsConfigSource.java************
\par 
\par Null checks:
\par strings == null?return null;
\par 
\par Null fields: 
\par \tab --> config
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigurationObjectFactory.java************
\par 
\par Null checks:
\par toStringMethod != null?slots.put(toStringMethod, count++);
\par mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
\par annotation != null?propertyNames = annotation.value();
\par propertyNames == null?throw new IllegalArgumentException("Method " +
\par                                                    method.toGenericString() +
\par                                                    " declares config annotation but no field name!");
\par mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
\par value != null?assignedFrom = "property: '" + propertyName + "'";
\par mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
\par value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
\par value == null?if (hasDefault) \{
\par                 value = method.getAnnotation(Default.class).value();
\par                 assignedFrom = "annotation: @Default";
\par 
\par                 logger.info("Assigning default value [\{\}] for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ value, propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par             \}
\par             else if (hasDefaultNull) \{
\par                 logger.info("Assigning null default value for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 assignedFrom = "annotation: @DefaultNull";
\par             \}
\par             else \{
\par                 // Final try: Is the method is actually callable?
\par                 if (!Modifier.isAbstract(method.getModifiers())) \{
\par                     useMethod = true;
\par                     assignedFrom = "method: '" + method.getName() + "()'";
\par                     logger.info("Using method itself for \{\} on [\{\}#\{\}()]",
\par                                 new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 \}
\par                 else \{
\par                     throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
\par                             prettyPrint(propertyNames, mappedReplacements),
\par                             method.toGenericString()));
\par                 \}
\par             \}
\par annotationValues == null?throw new IllegalArgumentException("Method " +
\par                                                method.toGenericString() +
\par                                                " declares config annotation but no field name!");
\par values == null?return "";
\par mappedReplacements != null?sb.append(" translated to [");
\par toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
\par finalValue != null?sb.append(finalValue.toString());
\par toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
\par value != null?logger.info("Assigning value [\{\}] for [\{\}] on [\{\}#\{\}()]",
\par                                     new Object[] \{ value, property, method.getDeclaringClass().getName(), method.getName() \});
\par toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
\par toStringValue == null?final StringBuilder sb = new StringBuilder();
\par 
\par Null fields: 
\par \tab --> method
\par \tab --> slots
\par \tab --> handler
\par \tab --> paramTokenList
\par \tab --> config
\par \tab --> bully
\par \tab --> properties
\par \tab --> defaultValue
\par \tab --> callbacks
\par \tab --> assignedFrom
\par \tab --> finalValue
\par 
\par Null variables: 
\par In method buildSimple found:
\par \tab --> assignedFrom
\par \tab --> value
\par In method internalBuild found:
\par \tab --> fixedMap
\par In method buildParameterized found:
\par \tab --> defaultValue
\par Null assignments: 
\par In method buildSimple found: 
\par \tab --> value
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmountUnit.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> symbol
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultCoercibles.java************
\par 
\par Null checks:
\par candidate != null?final Method valueOfMethod = candidate;
\par value == null?return value == null ? null : valueOfMethod.invoke(null, value);
\par value == null?return value == null ? null : ctor.newInstance(value);
\par value != null?return value != null ? Boolean.valueOf(value) : null;
\par value != null?return value != null ? Byte.valueOf(value) : null;
\par value != null?return value != null ? Short.valueOf(value) : null;
\par value != null?return value != null ? Integer.valueOf(value) : null;
\par value != null?return value != null ? Long.valueOf(value) : null;
\par value != null?return value != null ? Float.valueOf(value) : null;
\par value != null?return value != null ? Double.valueOf(value) : null;
\par value != null?return value != null ? URI.create(value) : null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method accept found:
\par \tab --> coercer
\par Null assignments: 
\par In method accept found: 
\par \tab --> candidate
\par \tab --> coercer
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Description.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Param.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> filterConfig
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeSpan.java************
\par 
\par Null checks:
\par unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> millis
\par \tab --> unit
\par \tab --> period
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CoercionConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config2.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config4.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigEnum.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ReplacementConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestBadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestClasses.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCollections.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestConfigurationObjectFactory.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDataAmount.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEmptyValue.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestExposeMappedReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestMultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestVariousPropertyTypes.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par \tab --> sc
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file WibbleConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 8ad79637cf0067e85e447317e54de4e6352c9076 and 7b3fa0b4d5b608e37a73e5453e25669f658dbf58:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 8ad79637cf0067e85e447317e54de4e6352c9076
\par 
\par Added Bully.java to ./config-magic/ repository source files.
\par Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added Coercer.java to ./config-magic/ repository source files.
\par Added Coercible.java to ./config-magic/ repository source files.
\par Added CommonsConfigSource.java to ./config-magic/ repository source files.
\par Added Config.java to ./config-magic/ repository source files.
\par Added ConfigReplacements.java to ./config-magic/ repository source files.
\par Added ConfigSource.java to ./config-magic/ repository source files.
\par Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added DataAmount.java to ./config-magic/ repository source files.
\par Added DataAmountUnit.java to ./config-magic/ repository source files.
\par Added Default.java to ./config-magic/ repository source files.
\par Added DefaultCoercibles.java to ./config-magic/ repository source files.
\par Added DefaultNull.java to ./config-magic/ repository source files.
\par Added Description.java to ./config-magic/ repository source files.
\par Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
\par Added Param.java to ./config-magic/ repository source files.
\par Added Separator.java to ./config-magic/ repository source files.
\par Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
\par Added TimeSpan.java to ./config-magic/ repository source files.
\par Added BadConfig.java to ./config-magic/ repository source files.
\par Added CoercionConfig.java to ./config-magic/ repository source files.
\par Added Config1.java to ./config-magic/ repository source files.
\par Added Config2.java to ./config-magic/ repository source files.
\par Added Config3.java to ./config-magic/ repository source files.
\par Added Config4.java to ./config-magic/ repository source files.
\par Added Config5.java to ./config-magic/ repository source files.
\par Added ConfigEnum.java to ./config-magic/ repository source files.
\par Added EnumeratedConfig1.java to ./config-magic/ repository source files.
\par Added MultiConfig.java to ./config-magic/ repository source files.
\par Added Props.java to ./config-magic/ repository source files.
\par Added ReplacementConfig1.java to ./config-magic/ repository source files.
\par Added TestArrays.java to ./config-magic/ repository source files.
\par Added TestBadConfig.java to ./config-magic/ repository source files.
\par Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added TestClasses.java to ./config-magic/ repository source files.
\par Added TestCoercion.java to ./config-magic/ repository source files.
\par Added TestCollections.java to ./config-magic/ repository source files.
\par Added TestCommonsConfig.java to ./config-magic/ repository source files.
\par Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added TestCustomCoercion.java to ./config-magic/ repository source files.
\par Added TestDataAmount.java to ./config-magic/ repository source files.
\par Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
\par Added TestDefaultNull.java to ./config-magic/ repository source files.
\par Added TestDefaultsPresent.java to ./config-magic/ repository source files.
\par Added TestEmptyValue.java to ./config-magic/ repository source files.
\par Added TestEnums.java to ./config-magic/ repository source files.
\par Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
\par Added TestFile.java to ./config-magic/ repository source files.
\par Added TestMultiConfig.java to ./config-magic/ repository source files.
\par Added TestNoFinal.java to ./config-magic/ repository source files.
\par Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added TestTimeSpan.java to ./config-magic/ repository source files.
\par Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
\par Added Wibble.java to ./config-magic/ repository source files.
\par Added WibbleConfig.java to ./config-magic/ repository source files.
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bully.java************
\par 
\par Null checks:
\par args != null?if (args[0] instanceof Class<?>) \{
\par                         return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
\par                     \}
\par                     else if (args[0] instanceof WildcardType) \{
\par                         return coerceClass(type, (WildcardType)args[0], value);
\par                     \}
\par value == null?return null;
\par separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
\par ctor != null?result = (Collection)ctor.newInstance();
\par result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
\par coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
\par coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
\par typeCoercer == null?for (Coercible<?> coercible : coercibles) \{
\par                 final Coercer<?> coercer = coercible.accept(type);
\par                 if (coercer != null) \{
\par                     mappings.put(type, coercer);
\par                     typeCoercer = coercer;
\par                     break;
\par                 \}
\par             \}
\par coercer != null?mappings.put(type, coercer);
\par 
\par Null fields: 
\par \tab --> TYPE_COERCIBLES
\par 
\par Null variables: 
\par In method coerceCollection found:
\par \tab --> result
\par In method coerceArray found:
\par \tab --> tokens
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercer.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CommonsConfigSource.java************
\par 
\par Null checks:
\par strings == null?return null;
\par 
\par Null fields: 
\par \tab --> config
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigurationObjectFactory.java************
\par 
\par Null checks:
\par toStringMethod != null?slots.put(toStringMethod, count++);
\par mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
\par annotation != null?propertyNames = annotation.value();
\par propertyNames == null?throw new IllegalArgumentException("Method " +
\par                                                    method.toGenericString() +
\par                                                    " declares config annotation but no field name!");
\par mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
\par value != null?assignedFrom = "property: '" + propertyName + "'";
\par mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
\par value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
\par value == null?if (hasDefault) \{
\par                 value = method.getAnnotation(Default.class).value();
\par                 assignedFrom = "annotation: @Default";
\par 
\par                 logger.info("Assigning default value [\{\}] for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ value, propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par             \}
\par             else if (hasDefaultNull) \{
\par                 logger.info("Assigning null default value for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 assignedFrom = "annotation: @DefaultNull";
\par             \}
\par             else \{
\par                 // Final try: Is the method is actually callable?
\par                 if (!Modifier.isAbstract(method.getModifiers())) \{
\par                     useMethod = true;
\par                     assignedFrom = "method: '" + method.getName() + "()'";
\par                     logger.info("Using method itself for \{\} on [\{\}#\{\}()]",
\par                                 new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 \}
\par                 else \{
\par                     throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
\par                             prettyPrint(propertyNames, mappedReplacements),
\par                             method.toGenericString()));
\par                 \}
\par             \}
\par annotationValues == null?throw new IllegalArgumentException("Method " +
\par                                                method.toGenericString() +
\par                                                " declares config annotation but no field name!");
\par values == null?return "";
\par mappedReplacements != null?sb.append(" translated to [");
\par toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
\par finalValue != null?sb.append(finalValue.toString());
\par toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
\par value != null?logger.info("Assigning value [\{\}] for [\{\}] on [\{\}#\{\}()]",
\par                                     new Object[] \{ value, property, method.getDeclaringClass().getName(), method.getName() \});
\par toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
\par toStringValue == null?final StringBuilder sb = new StringBuilder();
\par 
\par Null fields: 
\par \tab --> method
\par \tab --> slots
\par \tab --> handler
\par \tab --> paramTokenList
\par \tab --> config
\par \tab --> bully
\par \tab --> properties
\par \tab --> defaultValue
\par \tab --> callbacks
\par \tab --> assignedFrom
\par \tab --> finalValue
\par 
\par Null variables: 
\par In method buildSimple found:
\par \tab --> assignedFrom
\par \tab --> value
\par In method internalBuild found:
\par \tab --> fixedMap
\par In method buildParameterized found:
\par \tab --> defaultValue
\par Null assignments: 
\par In method buildSimple found: 
\par \tab --> value
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmountUnit.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> symbol
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultCoercibles.java************
\par 
\par Null checks:
\par candidate != null?final Method valueOfMethod = candidate;
\par value == null?return value == null ? null : valueOfMethod.invoke(null, value);
\par value == null?return value == null ? null : ctor.newInstance(value);
\par value != null?return value != null ? Boolean.valueOf(value) : null;
\par value != null?return value != null ? Byte.valueOf(value) : null;
\par value != null?return value != null ? Short.valueOf(value) : null;
\par value != null?return value != null ? Integer.valueOf(value) : null;
\par value != null?return value != null ? Long.valueOf(value) : null;
\par value != null?return value != null ? Float.valueOf(value) : null;
\par value != null?return value != null ? Double.valueOf(value) : null;
\par value != null?return value != null ? URI.create(value) : null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method accept found:
\par \tab --> coercer
\par Null assignments: 
\par In method accept found: 
\par \tab --> candidate
\par \tab --> coercer
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Description.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Param.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> filterConfig
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeSpan.java************
\par 
\par Null checks:
\par unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> millis
\par \tab --> unit
\par \tab --> period
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CoercionConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config2.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config4.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigEnum.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ReplacementConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestBadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestClasses.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCollections.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestConfigurationObjectFactory.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDataAmount.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEmptyValue.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestExposeMappedReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestMultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestVariousPropertyTypes.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par \tab --> sc
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file WibbleConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 6699981d792b90936defeee748e9d9283b55aa78 and 8ad79637cf0067e85e447317e54de4e6352c9076:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 6699981d792b90936defeee748e9d9283b55aa78
\par 
\par Added Bully.java to ./config-magic/ repository source files.
\par Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added Coercer.java to ./config-magic/ repository source files.
\par Added Coercible.java to ./config-magic/ repository source files.
\par Added CommonsConfigSource.java to ./config-magic/ repository source files.
\par Added Config.java to ./config-magic/ repository source files.
\par Added ConfigReplacements.java to ./config-magic/ repository source files.
\par Added ConfigSource.java to ./config-magic/ repository source files.
\par Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added DataAmount.java to ./config-magic/ repository source files.
\par Added DataAmountUnit.java to ./config-magic/ repository source files.
\par Added Default.java to ./config-magic/ repository source files.
\par Added DefaultCoercibles.java to ./config-magic/ repository source files.
\par Added DefaultNull.java to ./config-magic/ repository source files.
\par Added Description.java to ./config-magic/ repository source files.
\par Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
\par Added Param.java to ./config-magic/ repository source files.
\par Added Separator.java to ./config-magic/ repository source files.
\par Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
\par Added TimeSpan.java to ./config-magic/ repository source files.
\par Added BadConfig.java to ./config-magic/ repository source files.
\par Added CoercionConfig.java to ./config-magic/ repository source files.
\par Added Config1.java to ./config-magic/ repository source files.
\par Added Config2.java to ./config-magic/ repository source files.
\par Added Config3.java to ./config-magic/ repository source files.
\par Added Config4.java to ./config-magic/ repository source files.
\par Added Config5.java to ./config-magic/ repository source files.
\par Added ConfigEnum.java to ./config-magic/ repository source files.
\par Added EnumeratedConfig1.java to ./config-magic/ repository source files.
\par Added MultiConfig.java to ./config-magic/ repository source files.
\par Added Props.java to ./config-magic/ repository source files.
\par Added ReplacementConfig1.java to ./config-magic/ repository source files.
\par Added TestArrays.java to ./config-magic/ repository source files.
\par Added TestBadConfig.java to ./config-magic/ repository source files.
\par Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added TestClasses.java to ./config-magic/ repository source files.
\par Added TestCoercion.java to ./config-magic/ repository source files.
\par Added TestCollections.java to ./config-magic/ repository source files.
\par Added TestCommonsConfig.java to ./config-magic/ repository source files.
\par Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added TestCustomCoercion.java to ./config-magic/ repository source files.
\par Added TestDataAmount.java to ./config-magic/ repository source files.
\par Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
\par Added TestDefaultNull.java to ./config-magic/ repository source files.
\par Added TestDefaultsPresent.java to ./config-magic/ repository source files.
\par Added TestEmptyValue.java to ./config-magic/ repository source files.
\par Added TestEnums.java to ./config-magic/ repository source files.
\par Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
\par Added TestFile.java to ./config-magic/ repository source files.
\par Added TestMultiConfig.java to ./config-magic/ repository source files.
\par Added TestNoFinal.java to ./config-magic/ repository source files.
\par Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added TestTimeSpan.java to ./config-magic/ repository source files.
\par Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
\par Added Wibble.java to ./config-magic/ repository source files.
\par Added WibbleConfig.java to ./config-magic/ repository source files.
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bully.java************
\par 
\par Null checks:
\par args != null?if (args[0] instanceof Class<?>) \{
\par                         return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
\par                     \}
\par                     else if (args[0] instanceof WildcardType) \{
\par                         return coerceClass(type, (WildcardType)args[0], value);
\par                     \}
\par value == null?return null;
\par separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
\par ctor != null?result = (Collection)ctor.newInstance();
\par result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
\par coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
\par coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
\par typeCoercer == null?for (Coercible<?> coercible : coercibles) \{
\par                 final Coercer<?> coercer = coercible.accept(type);
\par                 if (coercer != null) \{
\par                     mappings.put(type, coercer);
\par                     typeCoercer = coercer;
\par                     break;
\par                 \}
\par             \}
\par coercer != null?mappings.put(type, coercer);
\par 
\par Null fields: 
\par \tab --> TYPE_COERCIBLES
\par 
\par Null variables: 
\par In method coerceCollection found:
\par \tab --> result
\par In method coerceArray found:
\par \tab --> tokens
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercer.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CommonsConfigSource.java************
\par 
\par Null checks:
\par strings == null?return null;
\par 
\par Null fields: 
\par \tab --> config
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigurationObjectFactory.java************
\par 
\par Null checks:
\par toStringMethod != null?slots.put(toStringMethod, count++);
\par mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
\par annotation != null?propertyNames = annotation.value();
\par propertyNames == null?throw new IllegalArgumentException("Method " +
\par                                                    method.toGenericString() +
\par                                                    " declares config annotation but no field name!");
\par mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
\par value != null?assignedFrom = "property: '" + propertyName + "'";
\par mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
\par value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
\par value == null?if (hasDefault) \{
\par                 value = method.getAnnotation(Default.class).value();
\par                 assignedFrom = "annotation: @Default";
\par 
\par                 logger.info("Assigning default value [\{\}] for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ value, propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par             \}
\par             else if (hasDefaultNull) \{
\par                 logger.info("Assigning null default value for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 assignedFrom = "annotation: @DefaultNull";
\par             \}
\par             else \{
\par                 // Final try: Is the method is actually callable?
\par                 if (!Modifier.isAbstract(method.getModifiers())) \{
\par                     useMethod = true;
\par                     assignedFrom = "method: '" + method.getName() + "()'";
\par                     logger.info("Using method itself for \{\} on [\{\}#\{\}()]",
\par                                 new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 \}
\par                 else \{
\par                     throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
\par                             prettyPrint(propertyNames, mappedReplacements),
\par                             method.toGenericString()));
\par                 \}
\par             \}
\par annotationValues == null?throw new IllegalArgumentException("Method " +
\par                                                method.toGenericString() +
\par                                                " declares config annotation but no field name!");
\par values == null?return "";
\par mappedReplacements != null?sb.append(" translated to [");
\par toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
\par finalValue != null?sb.append(finalValue.toString());
\par toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
\par value != null?logger.info("Assigning value [\{\}] for [\{\}] on [\{\}#\{\}()]",
\par                                     new Object[] \{ value, property, method.getDeclaringClass().getName(), method.getName() \});
\par toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
\par toStringValue == null?final StringBuilder sb = new StringBuilder();
\par 
\par Null fields: 
\par \tab --> method
\par \tab --> slots
\par \tab --> handler
\par \tab --> paramTokenList
\par \tab --> config
\par \tab --> bully
\par \tab --> properties
\par \tab --> defaultValue
\par \tab --> callbacks
\par \tab --> assignedFrom
\par \tab --> finalValue
\par 
\par Null variables: 
\par In method buildSimple found:
\par \tab --> assignedFrom
\par \tab --> value
\par In method internalBuild found:
\par \tab --> fixedMap
\par In method buildParameterized found:
\par \tab --> defaultValue
\par Null assignments: 
\par In method buildSimple found: 
\par \tab --> value
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmountUnit.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> symbol
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultCoercibles.java************
\par 
\par Null checks:
\par candidate != null?final Method valueOfMethod = candidate;
\par value == null?return value == null ? null : valueOfMethod.invoke(null, value);
\par value == null?return value == null ? null : ctor.newInstance(value);
\par value != null?return value != null ? Boolean.valueOf(value) : null;
\par value != null?return value != null ? Byte.valueOf(value) : null;
\par value != null?return value != null ? Short.valueOf(value) : null;
\par value != null?return value != null ? Integer.valueOf(value) : null;
\par value != null?return value != null ? Long.valueOf(value) : null;
\par value != null?return value != null ? Float.valueOf(value) : null;
\par value != null?return value != null ? Double.valueOf(value) : null;
\par value != null?return value != null ? URI.create(value) : null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method accept found:
\par \tab --> coercer
\par Null assignments: 
\par In method accept found: 
\par \tab --> candidate
\par \tab --> coercer
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Description.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Param.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> filterConfig
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeSpan.java************
\par 
\par Null checks:
\par unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> millis
\par \tab --> unit
\par \tab --> period
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CoercionConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config2.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config4.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigEnum.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ReplacementConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestBadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestClasses.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCollections.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestConfigurationObjectFactory.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDataAmount.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEmptyValue.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestExposeMappedReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestMultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestVariousPropertyTypes.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par \tab --> sc
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file WibbleConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of de790b9f23a918501d7c6a2ac7ab858fc91f42af and 6699981d792b90936defeee748e9d9283b55aa78:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit de790b9f23a918501d7c6a2ac7ab858fc91f42af
\par 
\par Added Bully.java to ./config-magic/ repository source files.
\par Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added Coercer.java to ./config-magic/ repository source files.
\par Added Coercible.java to ./config-magic/ repository source files.
\par Added CommonsConfigSource.java to ./config-magic/ repository source files.
\par Added Config.java to ./config-magic/ repository source files.
\par Added ConfigReplacements.java to ./config-magic/ repository source files.
\par Added ConfigSource.java to ./config-magic/ repository source files.
\par Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added DataAmount.java to ./config-magic/ repository source files.
\par Added DataAmountUnit.java to ./config-magic/ repository source files.
\par Added Default.java to ./config-magic/ repository source files.
\par Added DefaultCoercibles.java to ./config-magic/ repository source files.
\par Added DefaultNull.java to ./config-magic/ repository source files.
\par Added Description.java to ./config-magic/ repository source files.
\par Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
\par Added Param.java to ./config-magic/ repository source files.
\par Added Separator.java to ./config-magic/ repository source files.
\par Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
\par Added TimeSpan.java to ./config-magic/ repository source files.
\par Added BadConfig.java to ./config-magic/ repository source files.
\par Added CoercionConfig.java to ./config-magic/ repository source files.
\par Added Config1.java to ./config-magic/ repository source files.
\par Added Config2.java to ./config-magic/ repository source files.
\par Added Config3.java to ./config-magic/ repository source files.
\par Added Config4.java to ./config-magic/ repository source files.
\par Added Config5.java to ./config-magic/ repository source files.
\par Added ConfigEnum.java to ./config-magic/ repository source files.
\par Added EnumeratedConfig1.java to ./config-magic/ repository source files.
\par Added MultiConfig.java to ./config-magic/ repository source files.
\par Added Props.java to ./config-magic/ repository source files.
\par Added ReplacementConfig1.java to ./config-magic/ repository source files.
\par Added TestArrays.java to ./config-magic/ repository source files.
\par Added TestBadConfig.java to ./config-magic/ repository source files.
\par Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added TestClasses.java to ./config-magic/ repository source files.
\par Added TestCoercion.java to ./config-magic/ repository source files.
\par Added TestCollections.java to ./config-magic/ repository source files.
\par Added TestCommonsConfig.java to ./config-magic/ repository source files.
\par Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added TestCustomCoercion.java to ./config-magic/ repository source files.
\par Added TestDataAmount.java to ./config-magic/ repository source files.
\par Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
\par Added TestDefaultNull.java to ./config-magic/ repository source files.
\par Added TestDefaultsPresent.java to ./config-magic/ repository source files.
\par Added TestEmptyValue.java to ./config-magic/ repository source files.
\par Added TestEnums.java to ./config-magic/ repository source files.
\par Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
\par Added TestFile.java to ./config-magic/ repository source files.
\par Added TestMultiConfig.java to ./config-magic/ repository source files.
\par Added TestNoFinal.java to ./config-magic/ repository source files.
\par Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added TestTimeSpan.java to ./config-magic/ repository source files.
\par Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
\par Added Wibble.java to ./config-magic/ repository source files.
\par Added WibbleConfig.java to ./config-magic/ repository source files.
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bully.java************
\par 
\par Null checks:
\par args != null?if (args[0] instanceof Class<?>) \{
\par                         return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
\par                     \}
\par                     else if (args[0] instanceof WildcardType) \{
\par                         return coerceClass(type, (WildcardType)args[0], value);
\par                     \}
\par value == null?return null;
\par separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
\par ctor != null?result = (Collection)ctor.newInstance();
\par result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
\par coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
\par coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
\par typeCoercer == null?for (Coercible<?> coercible : coercibles) \{
\par                 final Coercer<?> coercer = coercible.accept(type);
\par                 if (coercer != null) \{
\par                     mappings.put(type, coercer);
\par                     typeCoercer = coercer;
\par                     break;
\par                 \}
\par             \}
\par coercer != null?mappings.put(type, coercer);
\par 
\par Null fields: 
\par \tab --> TYPE_COERCIBLES
\par 
\par Null variables: 
\par In method coerceCollection found:
\par \tab --> result
\par In method coerceArray found:
\par \tab --> tokens
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercer.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CommonsConfigSource.java************
\par 
\par Null checks:
\par strings == null?return null;
\par 
\par Null fields: 
\par \tab --> config
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigurationObjectFactory.java************
\par 
\par Null checks:
\par toStringMethod != null?slots.put(toStringMethod, count++);
\par mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
\par annotation != null?propertyNames = annotation.value();
\par propertyNames == null?throw new IllegalArgumentException("Method " +
\par                                                    method.toGenericString() +
\par                                                    " declares config annotation but no field name!");
\par mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
\par value != null?assignedFrom = "property: '" + propertyName + "'";
\par mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
\par value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
\par value == null?if (hasDefault) \{
\par                 value = method.getAnnotation(Default.class).value();
\par                 assignedFrom = "annotation: @Default";
\par 
\par                 logger.info("Assigning default value [\{\}] for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ value, propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par             \}
\par             else if (hasDefaultNull) \{
\par                 logger.info("Assigning null default value for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 assignedFrom = "annotation: @DefaultNull";
\par             \}
\par             else \{
\par                 // Final try: Is the method is actually callable?
\par                 if (!Modifier.isAbstract(method.getModifiers())) \{
\par                     useMethod = true;
\par                     assignedFrom = "method: '" + method.getName() + "()'";
\par                     logger.info("Using method itself for \{\} on [\{\}#\{\}()]",
\par                                 new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 \}
\par                 else \{
\par                     throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
\par                             prettyPrint(propertyNames, mappedReplacements),
\par                             method.toGenericString()));
\par                 \}
\par             \}
\par annotationValues == null?throw new IllegalArgumentException("Method " +
\par                                                method.toGenericString() +
\par                                                " declares config annotation but no field name!");
\par values == null?return "";
\par mappedReplacements != null?sb.append(" translated to [");
\par toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
\par finalValue != null?sb.append(finalValue.toString());
\par toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
\par value != null?logger.info("Assigning value [\{\}] for [\{\}] on [\{\}#\{\}()]",
\par                                     new Object[] \{ value, property, method.getDeclaringClass().getName(), method.getName() \});
\par toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
\par toStringValue == null?final StringBuilder sb = new StringBuilder();
\par 
\par Null fields: 
\par \tab --> method
\par \tab --> slots
\par \tab --> handler
\par \tab --> paramTokenList
\par \tab --> config
\par \tab --> bully
\par \tab --> properties
\par \tab --> defaultValue
\par \tab --> callbacks
\par \tab --> assignedFrom
\par \tab --> finalValue
\par 
\par Null variables: 
\par In method buildSimple found:
\par \tab --> assignedFrom
\par \tab --> value
\par In method internalBuild found:
\par \tab --> fixedMap
\par In method buildParameterized found:
\par \tab --> defaultValue
\par Null assignments: 
\par In method buildSimple found: 
\par \tab --> value
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmountUnit.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> symbol
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultCoercibles.java************
\par 
\par Null checks:
\par candidate != null?final Method valueOfMethod = candidate;
\par value == null?return value == null ? null : valueOfMethod.invoke(null, value);
\par value == null?return value == null ? null : ctor.newInstance(value);
\par value != null?return value != null ? Boolean.valueOf(value) : null;
\par value != null?return value != null ? Byte.valueOf(value) : null;
\par value != null?return value != null ? Short.valueOf(value) : null;
\par value != null?return value != null ? Integer.valueOf(value) : null;
\par value != null?return value != null ? Long.valueOf(value) : null;
\par value != null?return value != null ? Float.valueOf(value) : null;
\par value != null?return value != null ? Double.valueOf(value) : null;
\par value != null?return value != null ? URI.create(value) : null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method accept found:
\par \tab --> coercer
\par Null assignments: 
\par In method accept found: 
\par \tab --> candidate
\par \tab --> coercer
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Description.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Param.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> filterConfig
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeSpan.java************
\par 
\par Null checks:
\par unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> millis
\par \tab --> unit
\par \tab --> period
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CoercionConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config2.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config4.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigEnum.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ReplacementConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestBadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestClasses.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCollections.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestConfigurationObjectFactory.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDataAmount.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEmptyValue.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestExposeMappedReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestMultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestVariousPropertyTypes.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par \tab --> sc
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file WibbleConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 48a9bd9e98631d1f2fb419a37c49ecc76cf5cb2a and de790b9f23a918501d7c6a2ac7ab858fc91f42af:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 48a9bd9e98631d1f2fb419a37c49ecc76cf5cb2a
\par 
\par Added Bully.java to ./config-magic/ repository source files.
\par Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added Coercer.java to ./config-magic/ repository source files.
\par Added Coercible.java to ./config-magic/ repository source files.
\par Added CommonsConfigSource.java to ./config-magic/ repository source files.
\par Added Config.java to ./config-magic/ repository source files.
\par Added ConfigReplacements.java to ./config-magic/ repository source files.
\par Added ConfigSource.java to ./config-magic/ repository source files.
\par Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added DataAmount.java to ./config-magic/ repository source files.
\par Added DataAmountUnit.java to ./config-magic/ repository source files.
\par Added Default.java to ./config-magic/ repository source files.
\par Added DefaultCoercibles.java to ./config-magic/ repository source files.
\par Added DefaultNull.java to ./config-magic/ repository source files.
\par Added Description.java to ./config-magic/ repository source files.
\par Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
\par Added Param.java to ./config-magic/ repository source files.
\par Added Separator.java to ./config-magic/ repository source files.
\par Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
\par Added TimeSpan.java to ./config-magic/ repository source files.
\par Added BadConfig.java to ./config-magic/ repository source files.
\par Added CoercionConfig.java to ./config-magic/ repository source files.
\par Added Config1.java to ./config-magic/ repository source files.
\par Added Config2.java to ./config-magic/ repository source files.
\par Added Config3.java to ./config-magic/ repository source files.
\par Added Config4.java to ./config-magic/ repository source files.
\par Added Config5.java to ./config-magic/ repository source files.
\par Added ConfigEnum.java to ./config-magic/ repository source files.
\par Added EnumeratedConfig1.java to ./config-magic/ repository source files.
\par Added MultiConfig.java to ./config-magic/ repository source files.
\par Added Props.java to ./config-magic/ repository source files.
\par Added ReplacementConfig1.java to ./config-magic/ repository source files.
\par Added TestArrays.java to ./config-magic/ repository source files.
\par Added TestBadConfig.java to ./config-magic/ repository source files.
\par Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added TestClasses.java to ./config-magic/ repository source files.
\par Added TestCoercion.java to ./config-magic/ repository source files.
\par Added TestCollections.java to ./config-magic/ repository source files.
\par Added TestCommonsConfig.java to ./config-magic/ repository source files.
\par Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added TestCustomCoercion.java to ./config-magic/ repository source files.
\par Added TestDataAmount.java to ./config-magic/ repository source files.
\par Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
\par Added TestDefaultNull.java to ./config-magic/ repository source files.
\par Added TestDefaultsPresent.java to ./config-magic/ repository source files.
\par Added TestEmptyValue.java to ./config-magic/ repository source files.
\par Added TestEnums.java to ./config-magic/ repository source files.
\par Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
\par Added TestFile.java to ./config-magic/ repository source files.
\par Added TestMultiConfig.java to ./config-magic/ repository source files.
\par Added TestNoFinal.java to ./config-magic/ repository source files.
\par Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added TestTimeSpan.java to ./config-magic/ repository source files.
\par Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
\par Added Wibble.java to ./config-magic/ repository source files.
\par Added WibbleConfig.java to ./config-magic/ repository source files.
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bully.java************
\par 
\par Null checks:
\par args != null?if (args[0] instanceof Class<?>) \{
\par                         return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
\par                     \}
\par                     else if (args[0] instanceof WildcardType) \{
\par                         return coerceClass(type, (WildcardType)args[0], value);
\par                     \}
\par value == null?return null;
\par separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
\par ctor != null?result = (Collection)ctor.newInstance();
\par result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
\par coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
\par coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
\par typeCoercer == null?for (Coercible<?> coercible : coercibles) \{
\par                 final Coercer<?> coercer = coercible.accept(type);
\par                 if (coercer != null) \{
\par                     mappings.put(type, coercer);
\par                     typeCoercer = coercer;
\par                     break;
\par                 \}
\par             \}
\par coercer != null?mappings.put(type, coercer);
\par 
\par Null fields: 
\par \tab --> TYPE_COERCIBLES
\par 
\par Null variables: 
\par In method coerceCollection found:
\par \tab --> result
\par In method coerceArray found:
\par \tab --> tokens
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercer.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CommonsConfigSource.java************
\par 
\par Null checks:
\par strings == null?return null;
\par 
\par Null fields: 
\par \tab --> config
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigurationObjectFactory.java************
\par 
\par Null checks:
\par toStringMethod != null?slots.put(toStringMethod, count++);
\par mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
\par annotation != null?propertyNames = annotation.value();
\par propertyNames == null?throw new IllegalArgumentException("Method " +
\par                                                    method.toGenericString() +
\par                                                    " declares config annotation but no field name!");
\par mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
\par value != null?assignedFrom = "property: '" + propertyName + "'";
\par mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
\par value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
\par value == null?if (hasDefault) \{
\par                 value = method.getAnnotation(Default.class).value();
\par                 assignedFrom = "annotation: @Default";
\par 
\par                 logger.info("Assigning default value [\{\}] for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ value, propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par             \}
\par             else if (hasDefaultNull) \{
\par                 logger.info("Assigning null default value for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 assignedFrom = "annotation: @DefaultNull";
\par             \}
\par             else \{
\par                 // Final try: Is the method is actually callable?
\par                 if (!Modifier.isAbstract(method.getModifiers())) \{
\par                     useMethod = true;
\par                     assignedFrom = "method: '" + method.getName() + "()'";
\par                     logger.info("Using method itself for \{\} on [\{\}#\{\}()]",
\par                                 new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 \}
\par                 else \{
\par                     throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
\par                             prettyPrint(propertyNames, mappedReplacements),
\par                             method.toGenericString()));
\par                 \}
\par             \}
\par annotationValues == null?throw new IllegalArgumentException("Method " +
\par                                                method.toGenericString() +
\par                                                " declares config annotation but no field name!");
\par values == null?return "";
\par mappedReplacements != null?sb.append(" translated to [");
\par toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
\par finalValue != null?sb.append(finalValue.toString());
\par toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
\par value != null?logger.info("Assigning value [\{\}] for [\{\}] on [\{\}#\{\}()]",
\par                                     new Object[] \{ value, property, method.getDeclaringClass().getName(), method.getName() \});
\par toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
\par toStringValue == null?final StringBuilder sb = new StringBuilder();
\par 
\par Null fields: 
\par \tab --> method
\par \tab --> slots
\par \tab --> handler
\par \tab --> paramTokenList
\par \tab --> config
\par \tab --> bully
\par \tab --> properties
\par \tab --> defaultValue
\par \tab --> callbacks
\par \tab --> assignedFrom
\par \tab --> finalValue
\par 
\par Null variables: 
\par In method buildSimple found:
\par \tab --> assignedFrom
\par \tab --> value
\par In method internalBuild found:
\par \tab --> fixedMap
\par In method buildParameterized found:
\par \tab --> defaultValue
\par Null assignments: 
\par In method buildSimple found: 
\par \tab --> value
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmountUnit.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> symbol
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultCoercibles.java************
\par 
\par Null checks:
\par candidate != null?final Method valueOfMethod = candidate;
\par value == null?return value == null ? null : valueOfMethod.invoke(null, value);
\par value == null?return value == null ? null : ctor.newInstance(value);
\par value != null?return value != null ? Boolean.valueOf(value) : null;
\par value != null?return value != null ? Byte.valueOf(value) : null;
\par value != null?return value != null ? Short.valueOf(value) : null;
\par value != null?return value != null ? Integer.valueOf(value) : null;
\par value != null?return value != null ? Long.valueOf(value) : null;
\par value != null?return value != null ? Float.valueOf(value) : null;
\par value != null?return value != null ? Double.valueOf(value) : null;
\par value != null?return value != null ? URI.create(value) : null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method accept found:
\par \tab --> coercer
\par Null assignments: 
\par In method accept found: 
\par \tab --> candidate
\par \tab --> coercer
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Description.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Param.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> filterConfig
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeSpan.java************
\par 
\par Null checks:
\par unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> millis
\par \tab --> unit
\par \tab --> period
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CoercionConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config2.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config4.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigEnum.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ReplacementConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestBadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestClasses.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCollections.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestConfigurationObjectFactory.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDataAmount.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEmptyValue.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestExposeMappedReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestMultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestVariousPropertyTypes.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par \tab --> sc
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file WibbleConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 8558ad1480df91f23591e34589b7082e5ec658f7 and 48a9bd9e98631d1f2fb419a37c49ecc76cf5cb2a:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 8558ad1480df91f23591e34589b7082e5ec658f7
\par 
\par Added Bully.java to ./config-magic/ repository source files.
\par Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added Coercer.java to ./config-magic/ repository source files.
\par Added Coercible.java to ./config-magic/ repository source files.
\par Added CommonsConfigSource.java to ./config-magic/ repository source files.
\par Added Config.java to ./config-magic/ repository source files.
\par Added ConfigReplacements.java to ./config-magic/ repository source files.
\par Added ConfigSource.java to ./config-magic/ repository source files.
\par Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added DataAmount.java to ./config-magic/ repository source files.
\par Added DataAmountUnit.java to ./config-magic/ repository source files.
\par Added Default.java to ./config-magic/ repository source files.
\par Added DefaultCoercibles.java to ./config-magic/ repository source files.
\par Added DefaultNull.java to ./config-magic/ repository source files.
\par Added Description.java to ./config-magic/ repository source files.
\par Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
\par Added Param.java to ./config-magic/ repository source files.
\par Added Separator.java to ./config-magic/ repository source files.
\par Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
\par Added TimeSpan.java to ./config-magic/ repository source files.
\par Added BadConfig.java to ./config-magic/ repository source files.
\par Added CoercionConfig.java to ./config-magic/ repository source files.
\par Added Config1.java to ./config-magic/ repository source files.
\par Added Config2.java to ./config-magic/ repository source files.
\par Added Config3.java to ./config-magic/ repository source files.
\par Added Config4.java to ./config-magic/ repository source files.
\par Added Config5.java to ./config-magic/ repository source files.
\par Added ConfigEnum.java to ./config-magic/ repository source files.
\par Added EnumeratedConfig1.java to ./config-magic/ repository source files.
\par Added MultiConfig.java to ./config-magic/ repository source files.
\par Added Props.java to ./config-magic/ repository source files.
\par Added ReplacementConfig1.java to ./config-magic/ repository source files.
\par Added TestArrays.java to ./config-magic/ repository source files.
\par Added TestBadConfig.java to ./config-magic/ repository source files.
\par Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added TestClasses.java to ./config-magic/ repository source files.
\par Added TestCoercion.java to ./config-magic/ repository source files.
\par Added TestCollections.java to ./config-magic/ repository source files.
\par Added TestCommonsConfig.java to ./config-magic/ repository source files.
\par Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added TestCustomCoercion.java to ./config-magic/ repository source files.
\par Added TestDataAmount.java to ./config-magic/ repository source files.
\par Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
\par Added TestDefaultNull.java to ./config-magic/ repository source files.
\par Added TestDefaultsPresent.java to ./config-magic/ repository source files.
\par Added TestEmptyValue.java to ./config-magic/ repository source files.
\par Added TestEnums.java to ./config-magic/ repository source files.
\par Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
\par Added TestFile.java to ./config-magic/ repository source files.
\par Added TestMultiConfig.java to ./config-magic/ repository source files.
\par Added TestNoFinal.java to ./config-magic/ repository source files.
\par Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added TestTimeSpan.java to ./config-magic/ repository source files.
\par Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
\par Added Wibble.java to ./config-magic/ repository source files.
\par Added WibbleConfig.java to ./config-magic/ repository source files.
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bully.java************
\par 
\par Null checks:
\par args != null?if (args[0] instanceof Class<?>) \{
\par                         return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
\par                     \}
\par                     else if (args[0] instanceof WildcardType) \{
\par                         return coerceClass(type, (WildcardType)args[0], value);
\par                     \}
\par value == null?return null;
\par separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
\par ctor != null?result = (Collection)ctor.newInstance();
\par result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
\par coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
\par coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
\par typeCoercer == null?for (Coercible<?> coercible : coercibles) \{
\par                 final Coercer<?> coercer = coercible.accept(type);
\par                 if (coercer != null) \{
\par                     mappings.put(type, coercer);
\par                     typeCoercer = coercer;
\par                     break;
\par                 \}
\par             \}
\par coercer != null?mappings.put(type, coercer);
\par 
\par Null fields: 
\par \tab --> TYPE_COERCIBLES
\par 
\par Null variables: 
\par In method coerceCollection found:
\par \tab --> result
\par In method coerceArray found:
\par \tab --> tokens
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercer.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CommonsConfigSource.java************
\par 
\par Null checks:
\par strings == null?return null;
\par 
\par Null fields: 
\par \tab --> config
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigurationObjectFactory.java************
\par 
\par Null checks:
\par toStringMethod != null?slots.put(toStringMethod, count++);
\par mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
\par annotation != null?propertyNames = annotation.value();
\par propertyNames == null?throw new IllegalArgumentException("Method " +
\par                                                    method.toGenericString() +
\par                                                    " declares config annotation but no field name!");
\par mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
\par value != null?assignedFrom = "property: '" + propertyName + "'";
\par mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
\par value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
\par value == null?if (hasDefault) \{
\par                 value = method.getAnnotation(Default.class).value();
\par                 assignedFrom = "annotation: @Default";
\par 
\par                 logger.info("Assigning default value [\{\}] for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ value, propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par             \}
\par             else if (hasDefaultNull) \{
\par                 logger.info("Assigning null default value for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 assignedFrom = "annotation: @DefaultNull";
\par             \}
\par             else \{
\par                 // Final try: Is the method is actually callable?
\par                 if (!Modifier.isAbstract(method.getModifiers())) \{
\par                     useMethod = true;
\par                     assignedFrom = "method: '" + method.getName() + "()'";
\par                     logger.info("Using method itself for \{\} on [\{\}#\{\}()]",
\par                                 new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 \}
\par                 else \{
\par                     throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
\par                             prettyPrint(propertyNames, mappedReplacements),
\par                             method.toGenericString()));
\par                 \}
\par             \}
\par annotationValues == null?throw new IllegalArgumentException("Method " +
\par                                                method.toGenericString() +
\par                                                " declares config annotation but no field name!");
\par values == null?return "";
\par mappedReplacements != null?sb.append(" translated to [");
\par toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
\par finalValue != null?sb.append(finalValue.toString());
\par toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
\par value != null?logger.info("Assigning value [\{\}] for [\{\}] on [\{\}#\{\}()]",
\par                                     new Object[] \{ value, property, method.getDeclaringClass().getName(), method.getName() \});
\par toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
\par toStringValue == null?final StringBuilder sb = new StringBuilder();
\par 
\par Null fields: 
\par \tab --> method
\par \tab --> slots
\par \tab --> handler
\par \tab --> paramTokenList
\par \tab --> config
\par \tab --> bully
\par \tab --> properties
\par \tab --> defaultValue
\par \tab --> callbacks
\par \tab --> assignedFrom
\par \tab --> finalValue
\par 
\par Null variables: 
\par In method buildSimple found:
\par \tab --> assignedFrom
\par \tab --> value
\par In method internalBuild found:
\par \tab --> fixedMap
\par In method buildParameterized found:
\par \tab --> defaultValue
\par Null assignments: 
\par In method buildSimple found: 
\par \tab --> value
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmountUnit.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> symbol
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultCoercibles.java************
\par 
\par Null checks:
\par candidate != null?final Method valueOfMethod = candidate;
\par value == null?return value == null ? null : valueOfMethod.invoke(null, value);
\par value == null?return value == null ? null : ctor.newInstance(value);
\par value != null?return value != null ? Boolean.valueOf(value) : null;
\par value != null?return value != null ? Byte.valueOf(value) : null;
\par value != null?return value != null ? Short.valueOf(value) : null;
\par value != null?return value != null ? Integer.valueOf(value) : null;
\par value != null?return value != null ? Long.valueOf(value) : null;
\par value != null?return value != null ? Float.valueOf(value) : null;
\par value != null?return value != null ? Double.valueOf(value) : null;
\par value != null?return value != null ? URI.create(value) : null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method accept found:
\par \tab --> coercer
\par Null assignments: 
\par In method accept found: 
\par \tab --> candidate
\par \tab --> coercer
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Description.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Param.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> filterConfig
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeSpan.java************
\par 
\par Null checks:
\par unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> millis
\par \tab --> unit
\par \tab --> period
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CoercionConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config2.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config4.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigEnum.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ReplacementConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestBadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestClasses.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCollections.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestConfigurationObjectFactory.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDataAmount.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEmptyValue.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestExposeMappedReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestMultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestVariousPropertyTypes.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par \tab --> sc
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file WibbleConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of daea67a25d0053dd5fedcddfa87d9dbc46a6d5a0 and 8558ad1480df91f23591e34589b7082e5ec658f7:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit daea67a25d0053dd5fedcddfa87d9dbc46a6d5a0
\par 
\par Added Bully.java to ./config-magic/ repository source files.
\par Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added Coercer.java to ./config-magic/ repository source files.
\par Added Coercible.java to ./config-magic/ repository source files.
\par Added CommonsConfigSource.java to ./config-magic/ repository source files.
\par Added Config.java to ./config-magic/ repository source files.
\par Added ConfigReplacements.java to ./config-magic/ repository source files.
\par Added ConfigSource.java to ./config-magic/ repository source files.
\par Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added DataAmount.java to ./config-magic/ repository source files.
\par Added DataAmountUnit.java to ./config-magic/ repository source files.
\par Added Default.java to ./config-magic/ repository source files.
\par Added DefaultCoercibles.java to ./config-magic/ repository source files.
\par Added DefaultNull.java to ./config-magic/ repository source files.
\par Added Description.java to ./config-magic/ repository source files.
\par Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
\par Added Param.java to ./config-magic/ repository source files.
\par Added Separator.java to ./config-magic/ repository source files.
\par Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
\par Added TimeSpan.java to ./config-magic/ repository source files.
\par Added BadConfig.java to ./config-magic/ repository source files.
\par Added CoercionConfig.java to ./config-magic/ repository source files.
\par Added Config1.java to ./config-magic/ repository source files.
\par Added Config2.java to ./config-magic/ repository source files.
\par Added Config3.java to ./config-magic/ repository source files.
\par Added Config4.java to ./config-magic/ repository source files.
\par Added Config5.java to ./config-magic/ repository source files.
\par Added ConfigEnum.java to ./config-magic/ repository source files.
\par Added EnumeratedConfig1.java to ./config-magic/ repository source files.
\par Added MultiConfig.java to ./config-magic/ repository source files.
\par Added Props.java to ./config-magic/ repository source files.
\par Added ReplacementConfig1.java to ./config-magic/ repository source files.
\par Added TestArrays.java to ./config-magic/ repository source files.
\par Added TestBadConfig.java to ./config-magic/ repository source files.
\par Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added TestClasses.java to ./config-magic/ repository source files.
\par Added TestCoercion.java to ./config-magic/ repository source files.
\par Added TestCollections.java to ./config-magic/ repository source files.
\par Added TestCommonsConfig.java to ./config-magic/ repository source files.
\par Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added TestCustomCoercion.java to ./config-magic/ repository source files.
\par Added TestDataAmount.java to ./config-magic/ repository source files.
\par Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
\par Added TestDefaultNull.java to ./config-magic/ repository source files.
\par Added TestDefaultsPresent.java to ./config-magic/ repository source files.
\par Added TestEmptyValue.java to ./config-magic/ repository source files.
\par Added TestEnums.java to ./config-magic/ repository source files.
\par Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
\par Added TestFile.java to ./config-magic/ repository source files.
\par Added TestMultiConfig.java to ./config-magic/ repository source files.
\par Added TestNoFinal.java to ./config-magic/ repository source files.
\par Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added TestTimeSpan.java to ./config-magic/ repository source files.
\par Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
\par Added Wibble.java to ./config-magic/ repository source files.
\par Added WibbleConfig.java to ./config-magic/ repository source files.
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bully.java************
\par 
\par Null checks:
\par args != null?if (args[0] instanceof Class<?>) \{
\par                         return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
\par                     \}
\par                     else if (args[0] instanceof WildcardType) \{
\par                         return coerceClass(type, (WildcardType)args[0], value);
\par                     \}
\par value == null?return null;
\par separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
\par ctor != null?result = (Collection)ctor.newInstance();
\par result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
\par coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
\par coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
\par typeCoercer == null?for (Coercible<?> coercible : coercibles) \{
\par                 final Coercer<?> coercer = coercible.accept(type);
\par                 if (coercer != null) \{
\par                     mappings.put(type, coercer);
\par                     typeCoercer = coercer;
\par                     break;
\par                 \}
\par             \}
\par coercer != null?mappings.put(type, coercer);
\par 
\par Null fields: 
\par \tab --> TYPE_COERCIBLES
\par 
\par Null variables: 
\par In method coerceCollection found:
\par \tab --> result
\par In method coerceArray found:
\par \tab --> tokens
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercer.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CommonsConfigSource.java************
\par 
\par Null checks:
\par strings == null?return null;
\par 
\par Null fields: 
\par \tab --> config
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was added at revision daea67a25d0053dd5fedcddfa87d9dbc46a6d5a0
\par ************ For file ConfigurationObjectFactory.java************
\par 
\par Null checks:
\par toStringMethod != null?slots.put(toStringMethod, count++);
\par mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
\par annotation != null?propertyNames = annotation.value();
\par propertyNames == null?throw new IllegalArgumentException("Method " +
\par                                                    method.toGenericString() +
\par                                                    " declares config annotation but no field name!");
\par mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
\par value != null?assignedFrom = "property: '" + propertyName + "'";
\par mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
\par value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
\par value == null?if (hasDefault) \{
\par                 value = method.getAnnotation(Default.class).value();
\par                 assignedFrom = "annotation: @Default";
\par 
\par                 logger.info("Assigning default value [\{\}] for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ value, propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par             \}
\par             else if (hasDefaultNull) \{
\par                 logger.info("Assigning null default value for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 assignedFrom = "annotation: @DefaultNull";
\par             \}
\par             else \{
\par                 // Final try: Is the method is actually callable?
\par                 if (!Modifier.isAbstract(method.getModifiers())) \{
\par                     useMethod = true;
\par                     assignedFrom = "method: '" + method.getName() + "()'";
\par                     logger.info("Using method itself for \{\} on [\{\}#\{\}()]",
\par                                 new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 \}
\par                 else \{
\par                     throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
\par                             prettyPrint(propertyNames, mappedReplacements),
\par                             method.toGenericString()));
\par                 \}
\par             \}
\par annotationValues == null?throw new IllegalArgumentException("Method " +
\par                                                method.toGenericString() +
\par                                                " declares config annotation but no field name!");
\par values == null?return "";
\par mappedReplacements != null?sb.append(" translated to [");
\par toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
\par finalValue != null?sb.append(finalValue.toString());
\par toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
\par value != null?logger.info("Assigning value [\{\}] for [\{\}] on [\{\}#\{\}()]",
\par                                     new Object[] \{ value, property, method.getDeclaringClass().getName(), method.getName() \});
\par toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
\par toStringValue == null?final StringBuilder sb = new StringBuilder();
\par 
\par Null fields: 
\par \tab --> slots
\par \tab --> handler
\par \tab --> paramTokenList
\par \tab --> config
\par \tab --> bully
\par \tab --> properties
\par \tab --> defaultValue
\par \tab --> callbacks
\par \tab --> finalValue
\par 
\par Null variables: 
\par In method buildSimple found:
\par \tab --> assignedFrom
\par In method internalBuild found:
\par \tab --> fixedMap
\par In method buildParameterized found:
\par \tab --> defaultValue
\par Null assignments: 
\par In method buildSimple found: 
\par \tab --> value
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmountUnit.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> symbol
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultCoercibles.java************
\par 
\par Null checks:
\par candidate != null?final Method valueOfMethod = candidate;
\par value == null?return value == null ? null : valueOfMethod.invoke(null, value);
\par value == null?return value == null ? null : ctor.newInstance(value);
\par value != null?return value != null ? Boolean.valueOf(value) : null;
\par value != null?return value != null ? Byte.valueOf(value) : null;
\par value != null?return value != null ? Short.valueOf(value) : null;
\par value != null?return value != null ? Integer.valueOf(value) : null;
\par value != null?return value != null ? Long.valueOf(value) : null;
\par value != null?return value != null ? Float.valueOf(value) : null;
\par value != null?return value != null ? Double.valueOf(value) : null;
\par value != null?return value != null ? URI.create(value) : null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method accept found:
\par \tab --> coercer
\par Null assignments: 
\par In method accept found: 
\par \tab --> candidate
\par \tab --> coercer
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Description.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Param.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> filterConfig
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeSpan.java************
\par 
\par Null checks:
\par unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> millis
\par \tab --> unit
\par \tab --> period
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CoercionConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config2.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config4.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigEnum.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ReplacementConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestBadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestClasses.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCollections.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestConfigurationObjectFactory.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDataAmount.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEmptyValue.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestExposeMappedReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestMultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestVariousPropertyTypes.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par \tab --> sc
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file WibbleConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of d847a64f44435ac3163e57b1a0b02a55a9f90cfe and daea67a25d0053dd5fedcddfa87d9dbc46a6d5a0:
\par \tab --> Added null checks = 3
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 3
\par 
\par Reverted to commit d847a64f44435ac3163e57b1a0b02a55a9f90cfe
\par 
\par Added Bully.java to ./config-magic/ repository source files.
\par Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added Coercer.java to ./config-magic/ repository source files.
\par Added Coercible.java to ./config-magic/ repository source files.
\par Added CommonsConfigSource.java to ./config-magic/ repository source files.
\par Added Config.java to ./config-magic/ repository source files.
\par Added ConfigReplacements.java to ./config-magic/ repository source files.
\par Added ConfigSource.java to ./config-magic/ repository source files.
\par Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added DataAmount.java to ./config-magic/ repository source files.
\par Added DataAmountUnit.java to ./config-magic/ repository source files.
\par Added Default.java to ./config-magic/ repository source files.
\par Added DefaultCoercibles.java to ./config-magic/ repository source files.
\par Added DefaultNull.java to ./config-magic/ repository source files.
\par Added Description.java to ./config-magic/ repository source files.
\par Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
\par Added Param.java to ./config-magic/ repository source files.
\par Added Separator.java to ./config-magic/ repository source files.
\par Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
\par Added TimeSpan.java to ./config-magic/ repository source files.
\par Added BadConfig.java to ./config-magic/ repository source files.
\par Added CoercionConfig.java to ./config-magic/ repository source files.
\par Added Config1.java to ./config-magic/ repository source files.
\par Added Config2.java to ./config-magic/ repository source files.
\par Added Config3.java to ./config-magic/ repository source files.
\par Added Config4.java to ./config-magic/ repository source files.
\par Added Config5.java to ./config-magic/ repository source files.
\par Added ConfigEnum.java to ./config-magic/ repository source files.
\par Added EnumeratedConfig1.java to ./config-magic/ repository source files.
\par Added MultiConfig.java to ./config-magic/ repository source files.
\par Added Props.java to ./config-magic/ repository source files.
\par Added ReplacementConfig1.java to ./config-magic/ repository source files.
\par Added TestArrays.java to ./config-magic/ repository source files.
\par Added TestBadConfig.java to ./config-magic/ repository source files.
\par Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added TestClasses.java to ./config-magic/ repository source files.
\par Added TestCoercion.java to ./config-magic/ repository source files.
\par Added TestCollections.java to ./config-magic/ repository source files.
\par Added TestCommonsConfig.java to ./config-magic/ repository source files.
\par Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added TestCustomCoercion.java to ./config-magic/ repository source files.
\par Added TestDataAmount.java to ./config-magic/ repository source files.
\par Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
\par Added TestDefaultNull.java to ./config-magic/ repository source files.
\par Added TestDefaultsPresent.java to ./config-magic/ repository source files.
\par Added TestEmptyValue.java to ./config-magic/ repository source files.
\par Added TestEnums.java to ./config-magic/ repository source files.
\par Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
\par Added TestFile.java to ./config-magic/ repository source files.
\par Added TestMultiConfig.java to ./config-magic/ repository source files.
\par Added TestNoFinal.java to ./config-magic/ repository source files.
\par Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added TestTimeSpan.java to ./config-magic/ repository source files.
\par Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
\par Added Wibble.java to ./config-magic/ repository source files.
\par Added WibbleConfig.java to ./config-magic/ repository source files.
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bully.java************
\par 
\par Null checks:
\par args != null?if (args[0] instanceof Class<?>) \{
\par                         return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
\par                     \}
\par                     else if (args[0] instanceof WildcardType) \{
\par                         return coerceClass(type, (WildcardType)args[0], value);
\par                     \}
\par value == null?return null;
\par separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
\par ctor != null?result = (Collection)ctor.newInstance();
\par result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
\par coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
\par coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
\par typeCoercer == null?for (Coercible<?> coercible : coercibles) \{
\par                 final Coercer<?> coercer = coercible.accept(type);
\par                 if (coercer != null) \{
\par                     mappings.put(type, coercer);
\par                     typeCoercer = coercer;
\par                     break;
\par                 \}
\par             \}
\par coercer != null?mappings.put(type, coercer);
\par 
\par Null fields: 
\par \tab --> TYPE_COERCIBLES
\par 
\par Null variables: 
\par In method coerceCollection found:
\par \tab --> result
\par In method coerceArray found:
\par \tab --> tokens
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercer.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CommonsConfigSource.java************
\par 
\par Null checks:
\par strings == null?return null;
\par 
\par Null fields: 
\par \tab --> config
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigurationObjectFactory.java************
\par 
\par Null checks:
\par toStringMethod != null?slots.put(toStringMethod, count++);
\par mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
\par annotation != null?propertyNames = annotation.value();
\par propertyNames == null?throw new IllegalArgumentException("Method " +
\par                                                    method.toGenericString() +
\par                                                    " declares config annotation but no field name!");
\par mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
\par value != null?assignedFrom = "property: '" + propertyName + "'";
\par mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
\par value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
\par value == null?if (hasDefault) \{
\par                 value = method.getAnnotation(Default.class).value();
\par                 assignedFrom = "annotation: @Default";
\par 
\par                 logger.info("Assigning default value [\{\}] for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ value, propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par             \}
\par             else if (hasDefaultNull) \{
\par                 logger.info("Assigning null default value for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 assignedFrom = "annotation: @DefaultNull";
\par             \}
\par             else \{
\par                 // Final try: Is the method is actually callable?
\par                 if (!Modifier.isAbstract(method.getModifiers())) \{
\par                     useMethod = true;
\par                     assignedFrom = "method: '" + method.getName() + "()'";
\par                     logger.info("Using method itself for \{\} on [\{\}#\{\}()]",
\par                                 new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 \}
\par                 else \{
\par                     throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
\par                             prettyPrint(propertyNames, mappedReplacements),
\par                             method.toGenericString()));
\par                 \}
\par             \}
\par annotationValues == null?throw new IllegalArgumentException("Method " +
\par                                                method.toGenericString() +
\par                                                " declares config annotation but no field name!");
\par values == null?return "";
\par mappedReplacements != null?sb.append(" translated to [");
\par toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
\par finalValue != null?sb.append(finalValue.toString());
\par toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
\par value != null?logger.info("Assigning value [\{\}] for [\{\}] on [\{\}#\{\}()]",
\par                                     new Object[] \{ value, property, method.getDeclaringClass().getName(), method.getName() \});
\par toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
\par toStringValue == null?final StringBuilder sb = new StringBuilder();
\par 
\par Null fields: 
\par \tab --> method
\par \tab --> slots
\par \tab --> handler
\par \tab --> paramTokenList
\par \tab --> config
\par \tab --> bully
\par \tab --> properties
\par \tab --> defaultValue
\par \tab --> callbacks
\par \tab --> assignedFrom
\par \tab --> finalValue
\par 
\par Null variables: 
\par In method buildSimple found:
\par \tab --> assignedFrom
\par \tab --> value
\par In method internalBuild found:
\par \tab --> fixedMap
\par In method buildParameterized found:
\par \tab --> defaultValue
\par Null assignments: 
\par In method buildSimple found: 
\par \tab --> value
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmountUnit.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> symbol
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultCoercibles.java************
\par 
\par Null checks:
\par candidate != null?final Method valueOfMethod = candidate;
\par value == null?return value == null ? null : valueOfMethod.invoke(null, value);
\par value == null?return value == null ? null : ctor.newInstance(value);
\par value != null?return value != null ? Boolean.valueOf(value) : null;
\par value != null?return value != null ? Byte.valueOf(value) : null;
\par value != null?return value != null ? Short.valueOf(value) : null;
\par value != null?return value != null ? Integer.valueOf(value) : null;
\par value != null?return value != null ? Long.valueOf(value) : null;
\par value != null?return value != null ? Float.valueOf(value) : null;
\par value != null?return value != null ? Double.valueOf(value) : null;
\par value != null?return value != null ? URI.create(value) : null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method accept found:
\par \tab --> coercer
\par Null assignments: 
\par In method accept found: 
\par \tab --> candidate
\par \tab --> coercer
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Description.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Param.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> filterConfig
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeSpan.java************
\par 
\par Null checks:
\par unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> millis
\par \tab --> unit
\par \tab --> period
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CoercionConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config2.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config4.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigEnum.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ReplacementConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestBadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestClasses.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCollections.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestConfigurationObjectFactory.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDataAmount.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEmptyValue.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestExposeMappedReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestMultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestVariousPropertyTypes.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par \tab --> sc
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file WibbleConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of a1d4fa74b71e0a88516754d738d173db6417cdab and d847a64f44435ac3163e57b1a0b02a55a9f90cfe:
\par \tab --> Added null checks = 3
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 3
\par 
\par Reverted to commit a1d4fa74b71e0a88516754d738d173db6417cdab
\par 
\par Added Bully.java to ./config-magic/ repository source files.
\par Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added Coercer.java to ./config-magic/ repository source files.
\par Added Coercible.java to ./config-magic/ repository source files.
\par Added CommonsConfigSource.java to ./config-magic/ repository source files.
\par Added Config.java to ./config-magic/ repository source files.
\par Added ConfigReplacements.java to ./config-magic/ repository source files.
\par Added ConfigSource.java to ./config-magic/ repository source files.
\par Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added DataAmount.java to ./config-magic/ repository source files.
\par Added DataAmountUnit.java to ./config-magic/ repository source files.
\par Added Default.java to ./config-magic/ repository source files.
\par Added DefaultCoercibles.java to ./config-magic/ repository source files.
\par Added DefaultNull.java to ./config-magic/ repository source files.
\par Added Description.java to ./config-magic/ repository source files.
\par Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
\par Added Param.java to ./config-magic/ repository source files.
\par Added Separator.java to ./config-magic/ repository source files.
\par Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
\par Added TimeSpan.java to ./config-magic/ repository source files.
\par Added BadConfig.java to ./config-magic/ repository source files.
\par Added CoercionConfig.java to ./config-magic/ repository source files.
\par Added Config1.java to ./config-magic/ repository source files.
\par Added Config2.java to ./config-magic/ repository source files.
\par Added Config3.java to ./config-magic/ repository source files.
\par Added Config4.java to ./config-magic/ repository source files.
\par Added Config5.java to ./config-magic/ repository source files.
\par Added ConfigEnum.java to ./config-magic/ repository source files.
\par Added EnumeratedConfig1.java to ./config-magic/ repository source files.
\par Added MultiConfig.java to ./config-magic/ repository source files.
\par Added Props.java to ./config-magic/ repository source files.
\par Added ReplacementConfig1.java to ./config-magic/ repository source files.
\par Added TestArrays.java to ./config-magic/ repository source files.
\par Added TestBadConfig.java to ./config-magic/ repository source files.
\par Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added TestClasses.java to ./config-magic/ repository source files.
\par Added TestCoercion.java to ./config-magic/ repository source files.
\par Added TestCollections.java to ./config-magic/ repository source files.
\par Added TestCommonsConfig.java to ./config-magic/ repository source files.
\par Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added TestCustomCoercion.java to ./config-magic/ repository source files.
\par Added TestDataAmount.java to ./config-magic/ repository source files.
\par Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
\par Added TestDefaultNull.java to ./config-magic/ repository source files.
\par Added TestDefaultsPresent.java to ./config-magic/ repository source files.
\par Added TestEmptyValue.java to ./config-magic/ repository source files.
\par Added TestEnums.java to ./config-magic/ repository source files.
\par Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
\par Added TestFile.java to ./config-magic/ repository source files.
\par Added TestMultiConfig.java to ./config-magic/ repository source files.
\par Added TestNoFinal.java to ./config-magic/ repository source files.
\par Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added TestTimeSpan.java to ./config-magic/ repository source files.
\par Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
\par Added Wibble.java to ./config-magic/ repository source files.
\par Added WibbleConfig.java to ./config-magic/ repository source files.
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bully.java************
\par 
\par Null checks:
\par args != null?if (args[0] instanceof Class<?>) \{
\par                         return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
\par                     \}
\par                     else if (args[0] instanceof WildcardType) \{
\par                         return coerceClass(type, (WildcardType)args[0], value);
\par                     \}
\par value == null?return null;
\par separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
\par ctor != null?result = (Collection)ctor.newInstance();
\par result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
\par coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
\par coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
\par typeCoercer == null?for (Coercible<?> coercible : coercibles) \{
\par                 final Coercer<?> coercer = coercible.accept(type);
\par                 if (coercer != null) \{
\par                     mappings.put(type, coercer);
\par                     typeCoercer = coercer;
\par                     break;
\par                 \}
\par             \}
\par coercer != null?mappings.put(type, coercer);
\par 
\par Null fields: 
\par \tab --> TYPE_COERCIBLES
\par 
\par Null variables: 
\par In method coerceCollection found:
\par \tab --> result
\par In method coerceArray found:
\par \tab --> tokens
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercer.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CommonsConfigSource.java************
\par 
\par Null checks:
\par strings == null?return null;
\par 
\par Null fields: 
\par \tab --> config
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigurationObjectFactory.java************
\par 
\par Null checks:
\par toStringMethod != null?slots.put(toStringMethod, count++);
\par mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
\par annotation != null?propertyNames = annotation.value();
\par propertyNames == null?throw new IllegalArgumentException("Method " +
\par                                                    method.toGenericString() +
\par                                                    " declares config annotation but no field name!");
\par mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
\par value != null?assignedFrom = "property: '" + propertyName + "'";
\par mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
\par value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
\par value == null?if (hasDefault) \{
\par                 value = method.getAnnotation(Default.class).value();
\par                 assignedFrom = "annotation: @Default";
\par 
\par                 logger.info("Assigning default value [\{\}] for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ value, propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par             \}
\par             else if (hasDefaultNull) \{
\par                 logger.info("Assigning null default value for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 assignedFrom = "annotation: @DefaultNull";
\par             \}
\par             else \{
\par                 // Final try: Is the method is actually callable?
\par                 if (!Modifier.isAbstract(method.getModifiers())) \{
\par                     useMethod = true;
\par                     assignedFrom = "method: '" + method.getName() + "()'";
\par                     logger.info("Using method itself for \{\} on [\{\}#\{\}()]",
\par                                 new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 \}
\par                 else \{
\par                     throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
\par                             prettyPrint(propertyNames, mappedReplacements),
\par                             method.toGenericString()));
\par                 \}
\par             \}
\par annotationValues == null?throw new IllegalArgumentException("Method " +
\par                                                method.toGenericString() +
\par                                                " declares config annotation but no field name!");
\par values == null?return "";
\par mappedReplacements != null?sb.append(" translated to [");
\par toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
\par finalValue != null?sb.append(finalValue.toString());
\par toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
\par value != null?logger.info("Assigning value [\{\}] for [\{\}] on [\{\}#\{\}()]",
\par                                     new Object[] \{ value, property, method.getDeclaringClass().getName(), method.getName() \});
\par toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
\par toStringValue == null?final StringBuilder sb = new StringBuilder();
\par 
\par Null fields: 
\par \tab --> method
\par \tab --> slots
\par \tab --> handler
\par \tab --> paramTokenList
\par \tab --> config
\par \tab --> bully
\par \tab --> properties
\par \tab --> defaultValue
\par \tab --> callbacks
\par \tab --> assignedFrom
\par \tab --> finalValue
\par 
\par Null variables: 
\par In method buildSimple found:
\par \tab --> assignedFrom
\par \tab --> value
\par In method internalBuild found:
\par \tab --> fixedMap
\par In method buildParameterized found:
\par \tab --> defaultValue
\par Null assignments: 
\par In method buildSimple found: 
\par \tab --> value
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmountUnit.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> symbol
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultCoercibles.java************
\par 
\par Null checks:
\par candidate != null?final Method valueOfMethod = candidate;
\par value == null?return value == null ? null : valueOfMethod.invoke(null, value);
\par value == null?return value == null ? null : ctor.newInstance(value);
\par value != null?return value != null ? Boolean.valueOf(value) : null;
\par value != null?return value != null ? Byte.valueOf(value) : null;
\par value != null?return value != null ? Short.valueOf(value) : null;
\par value != null?return value != null ? Integer.valueOf(value) : null;
\par value != null?return value != null ? Long.valueOf(value) : null;
\par value != null?return value != null ? Float.valueOf(value) : null;
\par value != null?return value != null ? Double.valueOf(value) : null;
\par value != null?return value != null ? URI.create(value) : null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method accept found:
\par \tab --> coercer
\par Null assignments: 
\par In method accept found: 
\par \tab --> candidate
\par \tab --> coercer
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Description.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Param.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> filterConfig
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeSpan.java************
\par 
\par Null checks:
\par unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> millis
\par \tab --> unit
\par \tab --> period
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CoercionConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config2.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config4.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigEnum.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ReplacementConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestBadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestClasses.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCollections.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestConfigurationObjectFactory.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDataAmount.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEmptyValue.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestExposeMappedReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestMultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestVariousPropertyTypes.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par \tab --> sc
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file WibbleConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 78a4f463e6054d06f0bdca9b2f143f89b1edf13f and a1d4fa74b71e0a88516754d738d173db6417cdab:
\par \tab --> Added null checks = 3
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 3
\par 
\par Reverted to commit 78a4f463e6054d06f0bdca9b2f143f89b1edf13f
\par 
\par Added Bully.java to ./config-magic/ repository source files.
\par Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added Coercer.java to ./config-magic/ repository source files.
\par Added Coercible.java to ./config-magic/ repository source files.
\par Added CommonsConfigSource.java to ./config-magic/ repository source files.
\par Added Config.java to ./config-magic/ repository source files.
\par Added ConfigReplacements.java to ./config-magic/ repository source files.
\par Added ConfigSource.java to ./config-magic/ repository source files.
\par Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added DataAmount.java to ./config-magic/ repository source files.
\par Added DataAmountUnit.java to ./config-magic/ repository source files.
\par Added Default.java to ./config-magic/ repository source files.
\par Added DefaultCoercibles.java to ./config-magic/ repository source files.
\par Added DefaultNull.java to ./config-magic/ repository source files.
\par Added Description.java to ./config-magic/ repository source files.
\par Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
\par Added Param.java to ./config-magic/ repository source files.
\par Added Separator.java to ./config-magic/ repository source files.
\par Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
\par Added TimeSpan.java to ./config-magic/ repository source files.
\par Added BadConfig.java to ./config-magic/ repository source files.
\par Added CoercionConfig.java to ./config-magic/ repository source files.
\par Added Config1.java to ./config-magic/ repository source files.
\par Added Config2.java to ./config-magic/ repository source files.
\par Added Config3.java to ./config-magic/ repository source files.
\par Added Config4.java to ./config-magic/ repository source files.
\par Added Config5.java to ./config-magic/ repository source files.
\par Added ConfigEnum.java to ./config-magic/ repository source files.
\par Added EnumeratedConfig1.java to ./config-magic/ repository source files.
\par Added MultiConfig.java to ./config-magic/ repository source files.
\par Added Props.java to ./config-magic/ repository source files.
\par Added ReplacementConfig1.java to ./config-magic/ repository source files.
\par Added TestArrays.java to ./config-magic/ repository source files.
\par Added TestBadConfig.java to ./config-magic/ repository source files.
\par Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added TestClasses.java to ./config-magic/ repository source files.
\par Added TestCoercion.java to ./config-magic/ repository source files.
\par Added TestCollections.java to ./config-magic/ repository source files.
\par Added TestCommonsConfig.java to ./config-magic/ repository source files.
\par Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added TestCustomCoercion.java to ./config-magic/ repository source files.
\par Added TestDataAmount.java to ./config-magic/ repository source files.
\par Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
\par Added TestDefaultNull.java to ./config-magic/ repository source files.
\par Added TestDefaultsPresent.java to ./config-magic/ repository source files.
\par Added TestEmptyValue.java to ./config-magic/ repository source files.
\par Added TestEnums.java to ./config-magic/ repository source files.
\par Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
\par Added TestFile.java to ./config-magic/ repository source files.
\par Added TestMultiConfig.java to ./config-magic/ repository source files.
\par Added TestNoFinal.java to ./config-magic/ repository source files.
\par Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added TestTimeSpan.java to ./config-magic/ repository source files.
\par Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
\par Added Wibble.java to ./config-magic/ repository source files.
\par Added WibbleConfig.java to ./config-magic/ repository source files.
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bully.java************
\par 
\par Null checks:
\par args != null?if (args[0] instanceof Class<?>) \{
\par                         return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
\par                     \}
\par                     else if (args[0] instanceof WildcardType) \{
\par                         return coerceClass(type, (WildcardType)args[0], value);
\par                     \}
\par value == null?return null;
\par separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
\par ctor != null?result = (Collection)ctor.newInstance();
\par result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
\par coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
\par coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
\par typeCoercer == null?for (Coercible<?> coercible : coercibles) \{
\par                 final Coercer<?> coercer = coercible.accept(type);
\par                 if (coercer != null) \{
\par                     mappings.put(type, coercer);
\par                     typeCoercer = coercer;
\par                     break;
\par                 \}
\par             \}
\par coercer != null?mappings.put(type, coercer);
\par 
\par Null fields: 
\par \tab --> TYPE_COERCIBLES
\par 
\par Null variables: 
\par In method coerceCollection found:
\par \tab --> result
\par In method coerceArray found:
\par \tab --> tokens
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercer.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CommonsConfigSource.java************
\par 
\par Null checks:
\par strings == null?return null;
\par 
\par Null fields: 
\par \tab --> config
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigurationObjectFactory.java************
\par 
\par Null checks:
\par toStringMethod != null?slots.put(toStringMethod, count++);
\par mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
\par annotation != null?propertyNames = annotation.value();
\par propertyNames == null?throw new IllegalArgumentException("Method " +
\par                                                    method.toGenericString() +
\par                                                    " declares config annotation but no field name!");
\par mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
\par value != null?assignedFrom = "property: '" + propertyName + "'";
\par mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
\par value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
\par value == null?if (hasDefault) \{
\par                 value = method.getAnnotation(Default.class).value();
\par                 assignedFrom = "annotation: @Default";
\par 
\par                 logger.info("Assigning default value [\{\}] for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ value, propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par             \}
\par             else if (hasDefaultNull) \{
\par                 logger.info("Assigning null default value for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 assignedFrom = "annotation: @DefaultNull";
\par             \}
\par             else \{
\par                 // Final try: Is the method is actually callable?
\par                 if (!Modifier.isAbstract(method.getModifiers())) \{
\par                     useMethod = true;
\par                     assignedFrom = "method: '" + method.getName() + "()'";
\par                     logger.info("Using method itself for \{\} on [\{\}#\{\}()]",
\par                                 new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 \}
\par                 else \{
\par                     throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
\par                             prettyPrint(propertyNames, mappedReplacements),
\par                             method.toGenericString()));
\par                 \}
\par             \}
\par annotationValues == null?throw new IllegalArgumentException("Method " +
\par                                                method.toGenericString() +
\par                                                " declares config annotation but no field name!");
\par values == null?return "";
\par mappedReplacements != null?sb.append(" translated to [");
\par toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
\par finalValue != null?sb.append(finalValue.toString());
\par toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
\par value != null?logger.info("Assigning value [\{\}] for [\{\}] on [\{\}#\{\}()]",
\par                                     new Object[] \{ value, property, method.getDeclaringClass().getName(), method.getName() \});
\par toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
\par toStringValue == null?final StringBuilder sb = new StringBuilder();
\par 
\par Null fields: 
\par \tab --> method
\par \tab --> slots
\par \tab --> handler
\par \tab --> paramTokenList
\par \tab --> config
\par \tab --> bully
\par \tab --> properties
\par \tab --> defaultValue
\par \tab --> callbacks
\par \tab --> assignedFrom
\par \tab --> finalValue
\par 
\par Null variables: 
\par In method buildSimple found:
\par \tab --> assignedFrom
\par \tab --> value
\par In method internalBuild found:
\par \tab --> fixedMap
\par In method buildParameterized found:
\par \tab --> defaultValue
\par Null assignments: 
\par In method buildSimple found: 
\par \tab --> value
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmountUnit.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> symbol
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultCoercibles.java************
\par 
\par Null checks:
\par candidate != null?final Method valueOfMethod = candidate;
\par value == null?return value == null ? null : valueOfMethod.invoke(null, value);
\par value == null?return value == null ? null : ctor.newInstance(value);
\par value != null?return value != null ? Boolean.valueOf(value) : null;
\par value != null?return value != null ? Byte.valueOf(value) : null;
\par value != null?return value != null ? Short.valueOf(value) : null;
\par value != null?return value != null ? Integer.valueOf(value) : null;
\par value != null?return value != null ? Long.valueOf(value) : null;
\par value != null?return value != null ? Float.valueOf(value) : null;
\par value != null?return value != null ? Double.valueOf(value) : null;
\par value != null?return value != null ? URI.create(value) : null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method accept found:
\par \tab --> coercer
\par Null assignments: 
\par In method accept found: 
\par \tab --> candidate
\par \tab --> coercer
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Description.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Param.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> filterConfig
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeSpan.java************
\par 
\par Null checks:
\par unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> millis
\par \tab --> unit
\par \tab --> period
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CoercionConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config2.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config4.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigEnum.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ReplacementConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestBadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestClasses.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCollections.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestConfigurationObjectFactory.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDataAmount.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEmptyValue.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestExposeMappedReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestMultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestVariousPropertyTypes.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par \tab --> sc
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file WibbleConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of b6ea406693ce801f8f6420ef406ba782f4b75f88 and 78a4f463e6054d06f0bdca9b2f143f89b1edf13f:
\par \tab --> Added null checks = 3
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 3
\par 
\par Reverted to commit b6ea406693ce801f8f6420ef406ba782f4b75f88
\par 
\par Added Bully.java to ./config-magic/ repository source files.
\par Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added Coercer.java to ./config-magic/ repository source files.
\par Added Coercible.java to ./config-magic/ repository source files.
\par Added CommonsConfigSource.java to ./config-magic/ repository source files.
\par Added Config.java to ./config-magic/ repository source files.
\par Added ConfigReplacements.java to ./config-magic/ repository source files.
\par Added ConfigSource.java to ./config-magic/ repository source files.
\par Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added DataAmount.java to ./config-magic/ repository source files.
\par Added DataAmountUnit.java to ./config-magic/ repository source files.
\par Added Default.java to ./config-magic/ repository source files.
\par Added DefaultCoercibles.java to ./config-magic/ repository source files.
\par Added DefaultNull.java to ./config-magic/ repository source files.
\par Added Description.java to ./config-magic/ repository source files.
\par Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
\par Added Param.java to ./config-magic/ repository source files.
\par Added Separator.java to ./config-magic/ repository source files.
\par Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
\par Added TimeSpan.java to ./config-magic/ repository source files.
\par Added BadConfig.java to ./config-magic/ repository source files.
\par Added CoercionConfig.java to ./config-magic/ repository source files.
\par Added Config1.java to ./config-magic/ repository source files.
\par Added Config2.java to ./config-magic/ repository source files.
\par Added Config3.java to ./config-magic/ repository source files.
\par Added Config4.java to ./config-magic/ repository source files.
\par Added Config5.java to ./config-magic/ repository source files.
\par Added ConfigEnum.java to ./config-magic/ repository source files.
\par Added EnumeratedConfig1.java to ./config-magic/ repository source files.
\par Added MultiConfig.java to ./config-magic/ repository source files.
\par Added Props.java to ./config-magic/ repository source files.
\par Added ReplacementConfig1.java to ./config-magic/ repository source files.
\par Added TestArrays.java to ./config-magic/ repository source files.
\par Added TestBadConfig.java to ./config-magic/ repository source files.
\par Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added TestClasses.java to ./config-magic/ repository source files.
\par Added TestCoercion.java to ./config-magic/ repository source files.
\par Added TestCollections.java to ./config-magic/ repository source files.
\par Added TestCommonsConfig.java to ./config-magic/ repository source files.
\par Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added TestCustomCoercion.java to ./config-magic/ repository source files.
\par Added TestDataAmount.java to ./config-magic/ repository source files.
\par Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
\par Added TestDefaultNull.java to ./config-magic/ repository source files.
\par Added TestDefaultsPresent.java to ./config-magic/ repository source files.
\par Added TestEmptyValue.java to ./config-magic/ repository source files.
\par Added TestEnums.java to ./config-magic/ repository source files.
\par Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
\par Added TestFile.java to ./config-magic/ repository source files.
\par Added TestMultiConfig.java to ./config-magic/ repository source files.
\par Added TestNoFinal.java to ./config-magic/ repository source files.
\par Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added TestTimeSpan.java to ./config-magic/ repository source files.
\par Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
\par Added Wibble.java to ./config-magic/ repository source files.
\par Added WibbleConfig.java to ./config-magic/ repository source files.
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bully.java************
\par 
\par Null checks:
\par args != null?if (args[0] instanceof Class<?>) \{
\par                         return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
\par                     \}
\par                     else if (args[0] instanceof WildcardType) \{
\par                         return coerceClass(type, (WildcardType)args[0], value);
\par                     \}
\par value == null?return null;
\par separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
\par ctor != null?result = (Collection)ctor.newInstance();
\par result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
\par coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
\par coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
\par typeCoercer == null?for (Coercible<?> coercible : coercibles) \{
\par                 final Coercer<?> coercer = coercible.accept(type);
\par                 if (coercer != null) \{
\par                     mappings.put(type, coercer);
\par                     typeCoercer = coercer;
\par                     break;
\par                 \}
\par             \}
\par coercer != null?mappings.put(type, coercer);
\par 
\par Null fields: 
\par \tab --> TYPE_COERCIBLES
\par 
\par Null variables: 
\par In method coerceCollection found:
\par \tab --> result
\par In method coerceArray found:
\par \tab --> tokens
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercer.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CommonsConfigSource.java************
\par 
\par Null checks:
\par strings == null?return null;
\par 
\par Null fields: 
\par \tab --> config
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigurationObjectFactory.java************
\par 
\par Null checks:
\par toStringMethod != null?slots.put(toStringMethod, count++);
\par mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
\par annotation != null?propertyNames = annotation.value();
\par propertyNames == null?throw new IllegalArgumentException("Method " +
\par                                                    method.toGenericString() +
\par                                                    " declares config annotation but no field name!");
\par mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
\par value != null?assignedFrom = "property: '" + propertyName + "'";
\par mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
\par value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
\par value == null?if (hasDefault) \{
\par                 value = method.getAnnotation(Default.class).value();
\par                 assignedFrom = "annotation: @Default";
\par 
\par                 logger.info("Assigning default value [\{\}] for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ value, propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par             \}
\par             else if (hasDefaultNull) \{
\par                 logger.info("Assigning null default value for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 assignedFrom = "annotation: @DefaultNull";
\par             \}
\par             else \{
\par                 // Final try: Is the method is actually callable?
\par                 if (!Modifier.isAbstract(method.getModifiers())) \{
\par                     useMethod = true;
\par                     assignedFrom = "method: '" + method.getName() + "()'";
\par                     logger.info("Using method itself for \{\} on [\{\}#\{\}()]",
\par                                 new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 \}
\par                 else \{
\par                     throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
\par                             prettyPrint(propertyNames, mappedReplacements),
\par                             method.toGenericString()));
\par                 \}
\par             \}
\par annotationValues == null?throw new IllegalArgumentException("Method " +
\par                                                method.toGenericString() +
\par                                                " declares config annotation but no field name!");
\par values == null?return "";
\par mappedReplacements != null?sb.append(" translated to [");
\par toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
\par finalValue != null?sb.append(finalValue.toString());
\par toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
\par value != null?logger.info("Assigning value [\{\}] for [\{\}] on [\{\}#\{\}()]",
\par                                     new Object[] \{ value, property, method.getDeclaringClass().getName(), method.getName() \});
\par toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
\par toStringValue == null?final StringBuilder sb = new StringBuilder();
\par 
\par Null fields: 
\par \tab --> method
\par \tab --> slots
\par \tab --> handler
\par \tab --> paramTokenList
\par \tab --> config
\par \tab --> bully
\par \tab --> properties
\par \tab --> defaultValue
\par \tab --> callbacks
\par \tab --> assignedFrom
\par \tab --> finalValue
\par 
\par Null variables: 
\par In method buildSimple found:
\par \tab --> assignedFrom
\par \tab --> value
\par In method internalBuild found:
\par \tab --> fixedMap
\par In method buildParameterized found:
\par \tab --> defaultValue
\par Null assignments: 
\par In method buildSimple found: 
\par \tab --> value
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmountUnit.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> symbol
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultCoercibles.java************
\par 
\par Null checks:
\par candidate != null?final Method valueOfMethod = candidate;
\par value == null?return value == null ? null : valueOfMethod.invoke(null, value);
\par value == null?return value == null ? null : ctor.newInstance(value);
\par value != null?return value != null ? Boolean.valueOf(value) : null;
\par value != null?return value != null ? Byte.valueOf(value) : null;
\par value != null?return value != null ? Short.valueOf(value) : null;
\par value != null?return value != null ? Integer.valueOf(value) : null;
\par value != null?return value != null ? Long.valueOf(value) : null;
\par value != null?return value != null ? Float.valueOf(value) : null;
\par value != null?return value != null ? Double.valueOf(value) : null;
\par value != null?return value != null ? URI.create(value) : null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method accept found:
\par \tab --> coercer
\par Null assignments: 
\par In method accept found: 
\par \tab --> candidate
\par \tab --> coercer
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Description.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Param.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> filterConfig
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeSpan.java************
\par 
\par Null checks:
\par unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> millis
\par \tab --> unit
\par \tab --> period
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CoercionConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config2.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config4.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigEnum.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ReplacementConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestBadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestClasses.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCollections.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestConfigurationObjectFactory.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDataAmount.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEmptyValue.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestExposeMappedReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestMultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestVariousPropertyTypes.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par \tab --> sc
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file WibbleConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of ec18cb80004e0d773474fa0bd4aeca53d35c180f and b6ea406693ce801f8f6420ef406ba782f4b75f88:
\par \tab --> Added null checks = 3
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 3
\par 
\par Reverted to commit ec18cb80004e0d773474fa0bd4aeca53d35c180f
\par 
\par Added Bully.java to ./config-magic/ repository source files.
\par Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added Coercer.java to ./config-magic/ repository source files.
\par Added Coercible.java to ./config-magic/ repository source files.
\par Added CommonsConfigSource.java to ./config-magic/ repository source files.
\par Added Config.java to ./config-magic/ repository source files.
\par Added ConfigReplacements.java to ./config-magic/ repository source files.
\par Added ConfigSource.java to ./config-magic/ repository source files.
\par Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added DataAmount.java to ./config-magic/ repository source files.
\par Added DataAmountUnit.java to ./config-magic/ repository source files.
\par Added Default.java to ./config-magic/ repository source files.
\par Added DefaultCoercibles.java to ./config-magic/ repository source files.
\par Added DefaultNull.java to ./config-magic/ repository source files.
\par Added Description.java to ./config-magic/ repository source files.
\par Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
\par Added Param.java to ./config-magic/ repository source files.
\par Added Separator.java to ./config-magic/ repository source files.
\par Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
\par Added TimeSpan.java to ./config-magic/ repository source files.
\par Added BadConfig.java to ./config-magic/ repository source files.
\par Added CoercionConfig.java to ./config-magic/ repository source files.
\par Added Config1.java to ./config-magic/ repository source files.
\par Added Config2.java to ./config-magic/ repository source files.
\par Added Config3.java to ./config-magic/ repository source files.
\par Added Config4.java to ./config-magic/ repository source files.
\par Added Config5.java to ./config-magic/ repository source files.
\par Added ConfigEnum.java to ./config-magic/ repository source files.
\par Added EnumeratedConfig1.java to ./config-magic/ repository source files.
\par Added MultiConfig.java to ./config-magic/ repository source files.
\par Added Props.java to ./config-magic/ repository source files.
\par Added ReplacementConfig1.java to ./config-magic/ repository source files.
\par Added TestArrays.java to ./config-magic/ repository source files.
\par Added TestBadConfig.java to ./config-magic/ repository source files.
\par Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added TestClasses.java to ./config-magic/ repository source files.
\par Added TestCoercion.java to ./config-magic/ repository source files.
\par Added TestCollections.java to ./config-magic/ repository source files.
\par Added TestCommonsConfig.java to ./config-magic/ repository source files.
\par Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added TestCustomCoercion.java to ./config-magic/ repository source files.
\par Added TestDataAmount.java to ./config-magic/ repository source files.
\par Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
\par Added TestDefaultNull.java to ./config-magic/ repository source files.
\par Added TestDefaultsPresent.java to ./config-magic/ repository source files.
\par Added TestEmptyValue.java to ./config-magic/ repository source files.
\par Added TestEnums.java to ./config-magic/ repository source files.
\par Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
\par Added TestFile.java to ./config-magic/ repository source files.
\par Added TestMultiConfig.java to ./config-magic/ repository source files.
\par Added TestNoFinal.java to ./config-magic/ repository source files.
\par Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added TestTimeSpan.java to ./config-magic/ repository source files.
\par Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
\par Added Wibble.java to ./config-magic/ repository source files.
\par Added WibbleConfig.java to ./config-magic/ repository source files.
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bully.java************
\par 
\par Null checks:
\par args != null?if (args[0] instanceof Class<?>) \{
\par                         return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
\par                     \}
\par                     else if (args[0] instanceof WildcardType) \{
\par                         return coerceClass(type, (WildcardType)args[0], value);
\par                     \}
\par value == null?return null;
\par separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
\par ctor != null?result = (Collection)ctor.newInstance();
\par result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
\par coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
\par coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
\par typeCoercer == null?for (Coercible<?> coercible : coercibles) \{
\par                 final Coercer<?> coercer = coercible.accept(type);
\par                 if (coercer != null) \{
\par                     mappings.put(type, coercer);
\par                     typeCoercer = coercer;
\par                     break;
\par                 \}
\par             \}
\par coercer != null?mappings.put(type, coercer);
\par 
\par Null fields: 
\par \tab --> TYPE_COERCIBLES
\par 
\par Null variables: 
\par In method coerceCollection found:
\par \tab --> result
\par In method coerceArray found:
\par \tab --> tokens
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercer.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CommonsConfigSource.java************
\par 
\par Null checks:
\par strings == null?return null;
\par 
\par Null fields: 
\par \tab --> config
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigurationObjectFactory.java************
\par 
\par Null checks:
\par toStringMethod != null?slots.put(toStringMethod, count++);
\par mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
\par annotation != null?propertyNames = annotation.value();
\par propertyNames == null?throw new IllegalArgumentException("Method " +
\par                                                    method.toGenericString() +
\par                                                    " declares config annotation but no field name!");
\par mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
\par value != null?assignedFrom = "property: '" + propertyName + "'";
\par mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
\par value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
\par value == null?if (hasDefault) \{
\par                 value = method.getAnnotation(Default.class).value();
\par                 assignedFrom = "annotation: @Default";
\par 
\par                 logger.info("Assigning default value [\{\}] for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ value, propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par             \}
\par             else if (hasDefaultNull) \{
\par                 logger.info("Assigning null default value for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 assignedFrom = "annotation: @DefaultNull";
\par             \}
\par             else \{
\par                 // Final try: Is the method is actually callable?
\par                 if (!Modifier.isAbstract(method.getModifiers())) \{
\par                     useMethod = true;
\par                     assignedFrom = "method: '" + method.getName() + "()'";
\par                     logger.info("Using method itself for \{\} on [\{\}#\{\}()]",
\par                                 new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 \}
\par                 else \{
\par                     throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
\par                             prettyPrint(propertyNames, mappedReplacements),
\par                             method.toGenericString()));
\par                 \}
\par             \}
\par annotationValues == null?throw new IllegalArgumentException("Method " +
\par                                                method.toGenericString() +
\par                                                " declares config annotation but no field name!");
\par values == null?return "";
\par mappedReplacements != null?sb.append(" translated to [");
\par toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
\par finalValue != null?sb.append(finalValue.toString());
\par toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
\par value != null?logger.info("Assigning value [\{\}] for [\{\}] on [\{\}#\{\}()]",
\par                                     new Object[] \{ value, property, method.getDeclaringClass().getName(), method.getName() \});
\par toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
\par toStringValue == null?final StringBuilder sb = new StringBuilder();
\par 
\par Null fields: 
\par \tab --> method
\par \tab --> slots
\par \tab --> handler
\par \tab --> paramTokenList
\par \tab --> config
\par \tab --> bully
\par \tab --> properties
\par \tab --> defaultValue
\par \tab --> callbacks
\par \tab --> assignedFrom
\par \tab --> finalValue
\par 
\par Null variables: 
\par In method buildSimple found:
\par \tab --> assignedFrom
\par \tab --> value
\par In method internalBuild found:
\par \tab --> fixedMap
\par In method buildParameterized found:
\par \tab --> defaultValue
\par Null assignments: 
\par In method buildSimple found: 
\par \tab --> value
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmountUnit.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> symbol
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultCoercibles.java************
\par 
\par Null checks:
\par candidate != null?final Method valueOfMethod = candidate;
\par value == null?return value == null ? null : valueOfMethod.invoke(null, value);
\par value == null?return value == null ? null : ctor.newInstance(value);
\par value != null?return value != null ? Boolean.valueOf(value) : null;
\par value != null?return value != null ? Byte.valueOf(value) : null;
\par value != null?return value != null ? Short.valueOf(value) : null;
\par value != null?return value != null ? Integer.valueOf(value) : null;
\par value != null?return value != null ? Long.valueOf(value) : null;
\par value != null?return value != null ? Float.valueOf(value) : null;
\par value != null?return value != null ? Double.valueOf(value) : null;
\par value != null?return value != null ? URI.create(value) : null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method accept found:
\par \tab --> coercer
\par Null assignments: 
\par In method accept found: 
\par \tab --> candidate
\par \tab --> coercer
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Description.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Param.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> filterConfig
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeSpan.java************
\par 
\par Null checks:
\par unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> millis
\par \tab --> unit
\par \tab --> period
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CoercionConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config2.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config4.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigEnum.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ReplacementConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestBadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestClasses.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCollections.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestConfigurationObjectFactory.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDataAmount.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEmptyValue.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestExposeMappedReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestMultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestVariousPropertyTypes.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par \tab --> sc
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file WibbleConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 2a4acf1a4061ea0b56070d57ea073bce3e3c8b08 and ec18cb80004e0d773474fa0bd4aeca53d35c180f:
\par \tab --> Added null checks = 3
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 3
\par 
\par Reverted to commit 2a4acf1a4061ea0b56070d57ea073bce3e3c8b08
\par 
\par Added Bully.java to ./config-magic/ repository source files.
\par Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added Coercer.java to ./config-magic/ repository source files.
\par Added Coercible.java to ./config-magic/ repository source files.
\par Added CommonsConfigSource.java to ./config-magic/ repository source files.
\par Added Config.java to ./config-magic/ repository source files.
\par Added ConfigReplacements.java to ./config-magic/ repository source files.
\par Added ConfigSource.java to ./config-magic/ repository source files.
\par Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added DataAmount.java to ./config-magic/ repository source files.
\par Added DataAmountUnit.java to ./config-magic/ repository source files.
\par Added Default.java to ./config-magic/ repository source files.
\par Added DefaultCoercibles.java to ./config-magic/ repository source files.
\par Added DefaultNull.java to ./config-magic/ repository source files.
\par Added Description.java to ./config-magic/ repository source files.
\par Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
\par Added Param.java to ./config-magic/ repository source files.
\par Added Separator.java to ./config-magic/ repository source files.
\par Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
\par Added TimeSpan.java to ./config-magic/ repository source files.
\par Added BadConfig.java to ./config-magic/ repository source files.
\par Added CoercionConfig.java to ./config-magic/ repository source files.
\par Added Config1.java to ./config-magic/ repository source files.
\par Added Config2.java to ./config-magic/ repository source files.
\par Added Config3.java to ./config-magic/ repository source files.
\par Added Config4.java to ./config-magic/ repository source files.
\par Added Config5.java to ./config-magic/ repository source files.
\par Added ConfigEnum.java to ./config-magic/ repository source files.
\par Added EnumeratedConfig1.java to ./config-magic/ repository source files.
\par Added MultiConfig.java to ./config-magic/ repository source files.
\par Added Props.java to ./config-magic/ repository source files.
\par Added ReplacementConfig1.java to ./config-magic/ repository source files.
\par Added TestArrays.java to ./config-magic/ repository source files.
\par Added TestBadConfig.java to ./config-magic/ repository source files.
\par Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added TestClasses.java to ./config-magic/ repository source files.
\par Added TestCoercion.java to ./config-magic/ repository source files.
\par Added TestCollections.java to ./config-magic/ repository source files.
\par Added TestCommonsConfig.java to ./config-magic/ repository source files.
\par Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added TestCustomCoercion.java to ./config-magic/ repository source files.
\par Added TestDataAmount.java to ./config-magic/ repository source files.
\par Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
\par Added TestDefaultNull.java to ./config-magic/ repository source files.
\par Added TestDefaultsPresent.java to ./config-magic/ repository source files.
\par Added TestEmptyValue.java to ./config-magic/ repository source files.
\par Added TestEnums.java to ./config-magic/ repository source files.
\par Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
\par Added TestFile.java to ./config-magic/ repository source files.
\par Added TestMultiConfig.java to ./config-magic/ repository source files.
\par Added TestNoFinal.java to ./config-magic/ repository source files.
\par Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added TestTimeSpan.java to ./config-magic/ repository source files.
\par Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
\par Added Wibble.java to ./config-magic/ repository source files.
\par Added WibbleConfig.java to ./config-magic/ repository source files.
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bully.java************
\par 
\par Null checks:
\par args != null?if (args[0] instanceof Class<?>) \{
\par                         return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
\par                     \}
\par                     else if (args[0] instanceof WildcardType) \{
\par                         return coerceClass(type, (WildcardType)args[0], value);
\par                     \}
\par value == null?return null;
\par separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
\par ctor != null?result = (Collection)ctor.newInstance();
\par result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
\par coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
\par coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
\par typeCoercer == null?for (Coercible<?> coercible : coercibles) \{
\par                 final Coercer<?> coercer = coercible.accept(type);
\par                 if (coercer != null) \{
\par                     mappings.put(type, coercer);
\par                     typeCoercer = coercer;
\par                     break;
\par                 \}
\par             \}
\par coercer != null?mappings.put(type, coercer);
\par 
\par Null fields: 
\par \tab --> TYPE_COERCIBLES
\par 
\par Null variables: 
\par In method coerceCollection found:
\par \tab --> result
\par In method coerceArray found:
\par \tab --> tokens
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercer.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CommonsConfigSource.java************
\par 
\par Null checks:
\par strings == null?return null;
\par 
\par Null fields: 
\par \tab --> config
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigurationObjectFactory.java************
\par 
\par Null checks:
\par toStringMethod != null?slots.put(toStringMethod, count++);
\par mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
\par annotation != null?propertyNames = annotation.value();
\par propertyNames == null?throw new IllegalArgumentException("Method " +
\par                                                    method.toGenericString() +
\par                                                    " declares config annotation but no field name!");
\par mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
\par value != null?assignedFrom = "property: '" + propertyName + "'";
\par mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
\par value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
\par value == null?if (hasDefault) \{
\par                 value = method.getAnnotation(Default.class).value();
\par                 assignedFrom = "annotation: @Default";
\par 
\par                 logger.info("Assigning default value [\{\}] for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ value, propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par             \}
\par             else if (hasDefaultNull) \{
\par                 logger.info("Assigning null default value for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 assignedFrom = "annotation: @DefaultNull";
\par             \}
\par             else \{
\par                 // Final try: Is the method is actually callable?
\par                 if (!Modifier.isAbstract(method.getModifiers())) \{
\par                     useMethod = true;
\par                     assignedFrom = "method: '" + method.getName() + "()'";
\par                     logger.info("Using method itself for \{\} on [\{\}#\{\}()]",
\par                                 new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 \}
\par                 else \{
\par                     throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
\par                             prettyPrint(propertyNames, mappedReplacements),
\par                             method.toGenericString()));
\par                 \}
\par             \}
\par annotationValues == null?throw new IllegalArgumentException("Method " +
\par                                                method.toGenericString() +
\par                                                " declares config annotation but no field name!");
\par values == null?return "";
\par mappedReplacements != null?sb.append(" translated to [");
\par toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
\par finalValue != null?sb.append(finalValue.toString());
\par toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
\par value != null?logger.info("Assigning value [\{\}] for [\{\}] on [\{\}#\{\}()]",
\par                                     new Object[] \{ value, property, method.getDeclaringClass().getName(), method.getName() \});
\par toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
\par toStringValue == null?final StringBuilder sb = new StringBuilder();
\par 
\par Null fields: 
\par \tab --> method
\par \tab --> slots
\par \tab --> handler
\par \tab --> paramTokenList
\par \tab --> config
\par \tab --> bully
\par \tab --> properties
\par \tab --> defaultValue
\par \tab --> callbacks
\par \tab --> assignedFrom
\par \tab --> finalValue
\par 
\par Null variables: 
\par In method buildSimple found:
\par \tab --> assignedFrom
\par \tab --> value
\par In method internalBuild found:
\par \tab --> fixedMap
\par In method buildParameterized found:
\par \tab --> defaultValue
\par Null assignments: 
\par In method buildSimple found: 
\par \tab --> value
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmountUnit.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> symbol
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultCoercibles.java************
\par 
\par Null checks:
\par candidate != null?final Method valueOfMethod = candidate;
\par value == null?return value == null ? null : valueOfMethod.invoke(null, value);
\par value == null?return value == null ? null : ctor.newInstance(value);
\par value != null?return value != null ? Boolean.valueOf(value) : null;
\par value != null?return value != null ? Byte.valueOf(value) : null;
\par value != null?return value != null ? Short.valueOf(value) : null;
\par value != null?return value != null ? Integer.valueOf(value) : null;
\par value != null?return value != null ? Long.valueOf(value) : null;
\par value != null?return value != null ? Float.valueOf(value) : null;
\par value != null?return value != null ? Double.valueOf(value) : null;
\par value != null?return value != null ? URI.create(value) : null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method accept found:
\par \tab --> coercer
\par Null assignments: 
\par In method accept found: 
\par \tab --> candidate
\par \tab --> coercer
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Description.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Param.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> filterConfig
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeSpan.java************
\par 
\par Null checks:
\par unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> millis
\par \tab --> unit
\par \tab --> period
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CoercionConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config2.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config4.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigEnum.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ReplacementConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestBadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestClasses.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCollections.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestConfigurationObjectFactory.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDataAmount.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEmptyValue.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestExposeMappedReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestMultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestVariousPropertyTypes.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par \tab --> sc
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file WibbleConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of e1cc8b0981dbd7738505e8e68bdfd13310c69b2f and 2a4acf1a4061ea0b56070d57ea073bce3e3c8b08:
\par \tab --> Added null checks = 3
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 3
\par 
\par Reverted to commit e1cc8b0981dbd7738505e8e68bdfd13310c69b2f
\par 
\par Added Bully.java to ./config-magic/ repository source files.
\par Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added Coercer.java to ./config-magic/ repository source files.
\par Added Coercible.java to ./config-magic/ repository source files.
\par Added CommonsConfigSource.java to ./config-magic/ repository source files.
\par Added Config.java to ./config-magic/ repository source files.
\par Added ConfigReplacements.java to ./config-magic/ repository source files.
\par Added ConfigSource.java to ./config-magic/ repository source files.
\par Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added DataAmount.java to ./config-magic/ repository source files.
\par Added DataAmountUnit.java to ./config-magic/ repository source files.
\par Added Default.java to ./config-magic/ repository source files.
\par Added DefaultCoercibles.java to ./config-magic/ repository source files.
\par Added DefaultNull.java to ./config-magic/ repository source files.
\par Added Description.java to ./config-magic/ repository source files.
\par Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
\par Added Param.java to ./config-magic/ repository source files.
\par Added Separator.java to ./config-magic/ repository source files.
\par Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
\par Added TimeSpan.java to ./config-magic/ repository source files.
\par Added BadConfig.java to ./config-magic/ repository source files.
\par Added CoercionConfig.java to ./config-magic/ repository source files.
\par Added Config1.java to ./config-magic/ repository source files.
\par Added Config2.java to ./config-magic/ repository source files.
\par Added Config3.java to ./config-magic/ repository source files.
\par Added Config4.java to ./config-magic/ repository source files.
\par Added Config5.java to ./config-magic/ repository source files.
\par Added ConfigEnum.java to ./config-magic/ repository source files.
\par Added EnumeratedConfig1.java to ./config-magic/ repository source files.
\par Added MultiConfig.java to ./config-magic/ repository source files.
\par Added Props.java to ./config-magic/ repository source files.
\par Added ReplacementConfig1.java to ./config-magic/ repository source files.
\par Added TestArrays.java to ./config-magic/ repository source files.
\par Added TestBadConfig.java to ./config-magic/ repository source files.
\par Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added TestClasses.java to ./config-magic/ repository source files.
\par Added TestCoercion.java to ./config-magic/ repository source files.
\par Added TestCollections.java to ./config-magic/ repository source files.
\par Added TestCommonsConfig.java to ./config-magic/ repository source files.
\par Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added TestCustomCoercion.java to ./config-magic/ repository source files.
\par Added TestDataAmount.java to ./config-magic/ repository source files.
\par Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
\par Added TestDefaultNull.java to ./config-magic/ repository source files.
\par Added TestDefaultsPresent.java to ./config-magic/ repository source files.
\par Added TestEmptyValue.java to ./config-magic/ repository source files.
\par Added TestEnums.java to ./config-magic/ repository source files.
\par Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
\par Added TestFile.java to ./config-magic/ repository source files.
\par Added TestMultiConfig.java to ./config-magic/ repository source files.
\par Added TestNoFinal.java to ./config-magic/ repository source files.
\par Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added TestTimeSpan.java to ./config-magic/ repository source files.
\par Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
\par Added Wibble.java to ./config-magic/ repository source files.
\par Added WibbleConfig.java to ./config-magic/ repository source files.
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bully.java************
\par 
\par Null checks:
\par args != null?if (args[0] instanceof Class<?>) \{
\par                         return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
\par                     \}
\par                     else if (args[0] instanceof WildcardType) \{
\par                         return coerceClass(type, (WildcardType)args[0], value);
\par                     \}
\par value == null?return null;
\par separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
\par ctor != null?result = (Collection)ctor.newInstance();
\par result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
\par coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
\par coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
\par typeCoercer == null?for (Coercible<?> coercible : coercibles) \{
\par                 final Coercer<?> coercer = coercible.accept(type);
\par                 if (coercer != null) \{
\par                     mappings.put(type, coercer);
\par                     typeCoercer = coercer;
\par                     break;
\par                 \}
\par             \}
\par coercer != null?mappings.put(type, coercer);
\par 
\par Null fields: 
\par \tab --> TYPE_COERCIBLES
\par 
\par Null variables: 
\par In method coerceCollection found:
\par \tab --> result
\par In method coerceArray found:
\par \tab --> tokens
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercer.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CommonsConfigSource.java************
\par 
\par Null checks:
\par strings == null?return null;
\par 
\par Null fields: 
\par \tab --> config
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigurationObjectFactory.java************
\par 
\par Null checks:
\par toStringMethod != null?slots.put(toStringMethod, count++);
\par mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
\par annotation != null?propertyNames = annotation.value();
\par propertyNames == null?throw new IllegalArgumentException("Method " +
\par                                                    method.toGenericString() +
\par                                                    " declares config annotation but no field name!");
\par mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
\par value != null?assignedFrom = "property: '" + propertyName + "'";
\par mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
\par value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
\par value == null?if (hasDefault) \{
\par                 value = method.getAnnotation(Default.class).value();
\par                 assignedFrom = "annotation: @Default";
\par 
\par                 logger.info("Assigning default value [\{\}] for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ value, propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par             \}
\par             else if (hasDefaultNull) \{
\par                 logger.info("Assigning null default value for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 assignedFrom = "annotation: @DefaultNull";
\par             \}
\par             else \{
\par                 // Final try: Is the method is actually callable?
\par                 if (!Modifier.isAbstract(method.getModifiers())) \{
\par                     useMethod = true;
\par                     assignedFrom = "method: '" + method.getName() + "()'";
\par                     logger.info("Using method itself for \{\} on [\{\}#\{\}()]",
\par                                 new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 \}
\par                 else \{
\par                     throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
\par                             prettyPrint(propertyNames, mappedReplacements),
\par                             method.toGenericString()));
\par                 \}
\par             \}
\par annotationValues == null?throw new IllegalArgumentException("Method " +
\par                                                method.toGenericString() +
\par                                                " declares config annotation but no field name!");
\par values == null?return "";
\par mappedReplacements != null?sb.append(" translated to [");
\par toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
\par finalValue != null?sb.append(finalValue.toString());
\par toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
\par value != null?logger.info("Assigning value [\{\}] for [\{\}] on [\{\}#\{\}()]",
\par                                     new Object[] \{ value, property, method.getDeclaringClass().getName(), method.getName() \});
\par toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
\par toStringValue == null?final StringBuilder sb = new StringBuilder();
\par 
\par Null fields: 
\par \tab --> method
\par \tab --> slots
\par \tab --> handler
\par \tab --> paramTokenList
\par \tab --> config
\par \tab --> bully
\par \tab --> properties
\par \tab --> defaultValue
\par \tab --> callbacks
\par \tab --> assignedFrom
\par \tab --> finalValue
\par 
\par Null variables: 
\par In method buildSimple found:
\par \tab --> assignedFrom
\par \tab --> value
\par In method internalBuild found:
\par \tab --> fixedMap
\par In method buildParameterized found:
\par \tab --> defaultValue
\par Null assignments: 
\par In method buildSimple found: 
\par \tab --> value
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmountUnit.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> symbol
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultCoercibles.java************
\par 
\par Null checks:
\par candidate != null?final Method valueOfMethod = candidate;
\par value == null?return value == null ? null : valueOfMethod.invoke(null, value);
\par value == null?return value == null ? null : ctor.newInstance(value);
\par value != null?return value != null ? Boolean.valueOf(value) : null;
\par value != null?return value != null ? Byte.valueOf(value) : null;
\par value != null?return value != null ? Short.valueOf(value) : null;
\par value != null?return value != null ? Integer.valueOf(value) : null;
\par value != null?return value != null ? Long.valueOf(value) : null;
\par value != null?return value != null ? Float.valueOf(value) : null;
\par value != null?return value != null ? Double.valueOf(value) : null;
\par value != null?return value != null ? URI.create(value) : null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method accept found:
\par \tab --> coercer
\par Null assignments: 
\par In method accept found: 
\par \tab --> candidate
\par \tab --> coercer
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Description.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Param.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> filterConfig
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeSpan.java************
\par 
\par Null checks:
\par unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> millis
\par \tab --> unit
\par \tab --> period
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CoercionConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config2.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config4.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigEnum.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ReplacementConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestBadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestClasses.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCollections.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestConfigurationObjectFactory.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDataAmount.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEmptyValue.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestExposeMappedReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestMultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestVariousPropertyTypes.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par \tab --> sc
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file WibbleConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 8fa41f6cc24567a8d415b9225f83a9fcc9afaafd and e1cc8b0981dbd7738505e8e68bdfd13310c69b2f:
\par \tab --> Added null checks = 3
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 3
\par 
\par Reverted to commit 8fa41f6cc24567a8d415b9225f83a9fcc9afaafd
\par 
\par Added Bully.java to ./config-magic/ repository source files.
\par Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added Coercer.java to ./config-magic/ repository source files.
\par Added Coercible.java to ./config-magic/ repository source files.
\par Added CommonsConfigSource.java to ./config-magic/ repository source files.
\par Added Config.java to ./config-magic/ repository source files.
\par Added ConfigReplacements.java to ./config-magic/ repository source files.
\par Added ConfigSource.java to ./config-magic/ repository source files.
\par Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added DataAmount.java to ./config-magic/ repository source files.
\par Added DataAmountUnit.java to ./config-magic/ repository source files.
\par Added Default.java to ./config-magic/ repository source files.
\par Added DefaultCoercibles.java to ./config-magic/ repository source files.
\par Added DefaultNull.java to ./config-magic/ repository source files.
\par Added Description.java to ./config-magic/ repository source files.
\par Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
\par Added Param.java to ./config-magic/ repository source files.
\par Added Separator.java to ./config-magic/ repository source files.
\par Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
\par Added TimeSpan.java to ./config-magic/ repository source files.
\par Added BadConfig.java to ./config-magic/ repository source files.
\par Added CoercionConfig.java to ./config-magic/ repository source files.
\par Added Config1.java to ./config-magic/ repository source files.
\par Added Config2.java to ./config-magic/ repository source files.
\par Added Config3.java to ./config-magic/ repository source files.
\par Added Config4.java to ./config-magic/ repository source files.
\par Added Config5.java to ./config-magic/ repository source files.
\par Added ConfigEnum.java to ./config-magic/ repository source files.
\par Added EnumeratedConfig1.java to ./config-magic/ repository source files.
\par Added MultiConfig.java to ./config-magic/ repository source files.
\par Added Props.java to ./config-magic/ repository source files.
\par Added ReplacementConfig1.java to ./config-magic/ repository source files.
\par Added TestArrays.java to ./config-magic/ repository source files.
\par Added TestBadConfig.java to ./config-magic/ repository source files.
\par Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added TestClasses.java to ./config-magic/ repository source files.
\par Added TestCoercion.java to ./config-magic/ repository source files.
\par Added TestCollections.java to ./config-magic/ repository source files.
\par Added TestCommonsConfig.java to ./config-magic/ repository source files.
\par Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added TestCustomCoercion.java to ./config-magic/ repository source files.
\par Added TestDataAmount.java to ./config-magic/ repository source files.
\par Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
\par Added TestDefaultNull.java to ./config-magic/ repository source files.
\par Added TestDefaultsPresent.java to ./config-magic/ repository source files.
\par Added TestEmptyValue.java to ./config-magic/ repository source files.
\par Added TestEnums.java to ./config-magic/ repository source files.
\par Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
\par Added TestFile.java to ./config-magic/ repository source files.
\par Added TestMultiConfig.java to ./config-magic/ repository source files.
\par Added TestNoFinal.java to ./config-magic/ repository source files.
\par Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added TestTimeSpan.java to ./config-magic/ repository source files.
\par Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
\par Added Wibble.java to ./config-magic/ repository source files.
\par Added WibbleConfig.java to ./config-magic/ repository source files.
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bully.java************
\par 
\par Null checks:
\par args != null?if (args[0] instanceof Class<?>) \{
\par                         return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
\par                     \}
\par                     else if (args[0] instanceof WildcardType) \{
\par                         return coerceClass(type, (WildcardType)args[0], value);
\par                     \}
\par value == null?return null;
\par separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
\par ctor != null?result = (Collection)ctor.newInstance();
\par result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
\par coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
\par coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
\par typeCoercer == null?for (Coercible<?> coercible : coercibles) \{
\par                 final Coercer<?> coercer = coercible.accept(type);
\par                 if (coercer != null) \{
\par                     mappings.put(type, coercer);
\par                     typeCoercer = coercer;
\par                     break;
\par                 \}
\par             \}
\par coercer != null?mappings.put(type, coercer);
\par 
\par Null fields: 
\par \tab --> TYPE_COERCIBLES
\par 
\par Null variables: 
\par In method coerceCollection found:
\par \tab --> result
\par In method coerceArray found:
\par \tab --> tokens
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercer.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CommonsConfigSource.java************
\par 
\par Null checks:
\par strings == null?return null;
\par 
\par Null fields: 
\par \tab --> config
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigurationObjectFactory.java************
\par 
\par Null checks:
\par toStringMethod != null?slots.put(toStringMethod, count++);
\par mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
\par annotation != null?propertyNames = annotation.value();
\par propertyNames == null?throw new IllegalArgumentException("Method " +
\par                                                    method.toGenericString() +
\par                                                    " declares config annotation but no field name!");
\par mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
\par value != null?assignedFrom = "property: '" + propertyName + "'";
\par mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
\par value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
\par value == null?if (hasDefault) \{
\par                 value = method.getAnnotation(Default.class).value();
\par                 assignedFrom = "annotation: @Default";
\par 
\par                 logger.info("Assigning default value [\{\}] for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ value, propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par             \}
\par             else if (hasDefaultNull) \{
\par                 logger.info("Assigning null default value for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 assignedFrom = "annotation: @DefaultNull";
\par             \}
\par             else \{
\par                 // Final try: Is the method is actually callable?
\par                 if (!Modifier.isAbstract(method.getModifiers())) \{
\par                     useMethod = true;
\par                     assignedFrom = "method: '" + method.getName() + "()'";
\par                     logger.info("Using method itself for \{\} on [\{\}#\{\}()]",
\par                                 new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 \}
\par                 else \{
\par                     throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
\par                             prettyPrint(propertyNames, mappedReplacements),
\par                             method.toGenericString()));
\par                 \}
\par             \}
\par annotationValues == null?throw new IllegalArgumentException("Method " +
\par                                                method.toGenericString() +
\par                                                " declares config annotation but no field name!");
\par values == null?return "";
\par mappedReplacements != null?sb.append(" translated to [");
\par toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
\par finalValue != null?sb.append(finalValue.toString());
\par toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
\par value != null?logger.info("Assigning value [\{\}] for [\{\}] on [\{\}#\{\}()]",
\par                                     new Object[] \{ value, property, method.getDeclaringClass().getName(), method.getName() \});
\par toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
\par toStringValue == null?final StringBuilder sb = new StringBuilder();
\par 
\par Null fields: 
\par \tab --> method
\par \tab --> slots
\par \tab --> handler
\par \tab --> paramTokenList
\par \tab --> config
\par \tab --> bully
\par \tab --> properties
\par \tab --> defaultValue
\par \tab --> callbacks
\par \tab --> assignedFrom
\par \tab --> finalValue
\par 
\par Null variables: 
\par In method buildSimple found:
\par \tab --> assignedFrom
\par \tab --> value
\par In method internalBuild found:
\par \tab --> fixedMap
\par In method buildParameterized found:
\par \tab --> defaultValue
\par Null assignments: 
\par In method buildSimple found: 
\par \tab --> value
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmountUnit.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> symbol
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultCoercibles.java************
\par 
\par Null checks:
\par candidate != null?final Method valueOfMethod = candidate;
\par value == null?return value == null ? null : valueOfMethod.invoke(null, value);
\par value == null?return value == null ? null : ctor.newInstance(value);
\par value != null?return value != null ? Boolean.valueOf(value) : null;
\par value != null?return value != null ? Byte.valueOf(value) : null;
\par value != null?return value != null ? Short.valueOf(value) : null;
\par value != null?return value != null ? Integer.valueOf(value) : null;
\par value != null?return value != null ? Long.valueOf(value) : null;
\par value != null?return value != null ? Float.valueOf(value) : null;
\par value != null?return value != null ? Double.valueOf(value) : null;
\par value != null?return value != null ? URI.create(value) : null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method accept found:
\par \tab --> coercer
\par Null assignments: 
\par In method accept found: 
\par \tab --> candidate
\par \tab --> coercer
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Description.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Param.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> filterConfig
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeSpan.java************
\par 
\par Null checks:
\par unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> millis
\par \tab --> unit
\par \tab --> period
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CoercionConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config2.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config4.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigEnum.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ReplacementConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestBadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestClasses.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCollections.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestConfigurationObjectFactory.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDataAmount.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEmptyValue.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestExposeMappedReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestMultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestVariousPropertyTypes.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par \tab --> sc
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file WibbleConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 6bcf64aacb6abb8f40de992d059ee4c000edf6e0 and 8fa41f6cc24567a8d415b9225f83a9fcc9afaafd:
\par \tab --> Added null checks = 3
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 3
\par 
\par Reverted to commit 6bcf64aacb6abb8f40de992d059ee4c000edf6e0
\par 
\par Added Bully.java to ./config-magic/ repository source files.
\par Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added Coercer.java to ./config-magic/ repository source files.
\par Added Coercible.java to ./config-magic/ repository source files.
\par Added CommonsConfigSource.java to ./config-magic/ repository source files.
\par Added Config.java to ./config-magic/ repository source files.
\par Added ConfigReplacements.java to ./config-magic/ repository source files.
\par Added ConfigSource.java to ./config-magic/ repository source files.
\par Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added DataAmount.java to ./config-magic/ repository source files.
\par Added DataAmountUnit.java to ./config-magic/ repository source files.
\par Added Default.java to ./config-magic/ repository source files.
\par Added DefaultCoercibles.java to ./config-magic/ repository source files.
\par Added DefaultNull.java to ./config-magic/ repository source files.
\par Added Description.java to ./config-magic/ repository source files.
\par Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
\par Added Param.java to ./config-magic/ repository source files.
\par Added Separator.java to ./config-magic/ repository source files.
\par Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
\par Added TimeSpan.java to ./config-magic/ repository source files.
\par Added BadConfig.java to ./config-magic/ repository source files.
\par Added CoercionConfig.java to ./config-magic/ repository source files.
\par Added Config1.java to ./config-magic/ repository source files.
\par Added Config2.java to ./config-magic/ repository source files.
\par Added Config3.java to ./config-magic/ repository source files.
\par Added Config4.java to ./config-magic/ repository source files.
\par Added Config5.java to ./config-magic/ repository source files.
\par Added ConfigEnum.java to ./config-magic/ repository source files.
\par Added EnumeratedConfig1.java to ./config-magic/ repository source files.
\par Added MultiConfig.java to ./config-magic/ repository source files.
\par Added Props.java to ./config-magic/ repository source files.
\par Added ReplacementConfig1.java to ./config-magic/ repository source files.
\par Added TestArrays.java to ./config-magic/ repository source files.
\par Added TestBadConfig.java to ./config-magic/ repository source files.
\par Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added TestClasses.java to ./config-magic/ repository source files.
\par Added TestCoercion.java to ./config-magic/ repository source files.
\par Added TestCollections.java to ./config-magic/ repository source files.
\par Added TestCommonsConfig.java to ./config-magic/ repository source files.
\par Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added TestCustomCoercion.java to ./config-magic/ repository source files.
\par Added TestDataAmount.java to ./config-magic/ repository source files.
\par Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
\par Added TestDefaultNull.java to ./config-magic/ repository source files.
\par Added TestDefaultsPresent.java to ./config-magic/ repository source files.
\par Added TestEmptyValue.java to ./config-magic/ repository source files.
\par Added TestEnums.java to ./config-magic/ repository source files.
\par Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
\par Added TestFile.java to ./config-magic/ repository source files.
\par Added TestMultiConfig.java to ./config-magic/ repository source files.
\par Added TestNoFinal.java to ./config-magic/ repository source files.
\par Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added TestTimeSpan.java to ./config-magic/ repository source files.
\par Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
\par Added Wibble.java to ./config-magic/ repository source files.
\par Added WibbleConfig.java to ./config-magic/ repository source files.
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bully.java************
\par 
\par Null checks:
\par args != null?if (args[0] instanceof Class<?>) \{
\par                         return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
\par                     \}
\par                     else if (args[0] instanceof WildcardType) \{
\par                         return coerceClass(type, (WildcardType)args[0], value);
\par                     \}
\par value == null?return null;
\par separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
\par ctor != null?result = (Collection)ctor.newInstance();
\par result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
\par coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
\par coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
\par typeCoercer == null?for (Coercible<?> coercible : coercibles) \{
\par                 final Coercer<?> coercer = coercible.accept(type);
\par                 if (coercer != null) \{
\par                     mappings.put(type, coercer);
\par                     typeCoercer = coercer;
\par                     break;
\par                 \}
\par             \}
\par coercer != null?mappings.put(type, coercer);
\par 
\par Null fields: 
\par \tab --> TYPE_COERCIBLES
\par 
\par Null variables: 
\par In method coerceCollection found:
\par \tab --> result
\par In method coerceArray found:
\par \tab --> tokens
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercer.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CommonsConfigSource.java************
\par 
\par Null checks:
\par strings == null?return null;
\par 
\par Null fields: 
\par \tab --> config
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigurationObjectFactory.java************
\par 
\par Null checks:
\par toStringMethod != null?slots.put(toStringMethod, count++);
\par mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
\par annotation != null?propertyNames = annotation.value();
\par propertyNames == null?throw new IllegalArgumentException("Method " +
\par                                                    method.toGenericString() +
\par                                                    " declares config annotation but no field name!");
\par mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
\par value != null?assignedFrom = "property: '" + propertyName + "'";
\par mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
\par value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
\par value == null?if (hasDefault) \{
\par                 value = method.getAnnotation(Default.class).value();
\par                 assignedFrom = "annotation: @Default";
\par 
\par                 logger.info("Assigning default value [\{\}] for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ value, propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par             \}
\par             else if (hasDefaultNull) \{
\par                 logger.info("Assigning null default value for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 assignedFrom = "annotation: @DefaultNull";
\par             \}
\par             else \{
\par                 // Final try: Is the method is actually callable?
\par                 if (!Modifier.isAbstract(method.getModifiers())) \{
\par                     useMethod = true;
\par                     assignedFrom = "method: '" + method.getName() + "()'";
\par                     logger.info("Using method itself for \{\} on [\{\}#\{\}()]",
\par                                 new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 \}
\par                 else \{
\par                     throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
\par                             prettyPrint(propertyNames, mappedReplacements),
\par                             method.toGenericString()));
\par                 \}
\par             \}
\par annotationValues == null?throw new IllegalArgumentException("Method " +
\par                                                method.toGenericString() +
\par                                                " declares config annotation but no field name!");
\par values == null?return "";
\par mappedReplacements != null?sb.append(" translated to [");
\par toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
\par finalValue != null?sb.append(finalValue.toString());
\par toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
\par value != null?logger.info("Assigning value [\{\}] for [\{\}] on [\{\}#\{\}()]",
\par                                     new Object[] \{ value, property, method.getDeclaringClass().getName(), method.getName() \});
\par toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
\par toStringValue == null?final StringBuilder sb = new StringBuilder();
\par 
\par Null fields: 
\par \tab --> method
\par \tab --> slots
\par \tab --> handler
\par \tab --> paramTokenList
\par \tab --> config
\par \tab --> bully
\par \tab --> properties
\par \tab --> defaultValue
\par \tab --> callbacks
\par \tab --> assignedFrom
\par \tab --> finalValue
\par 
\par Null variables: 
\par In method buildSimple found:
\par \tab --> assignedFrom
\par \tab --> value
\par In method internalBuild found:
\par \tab --> fixedMap
\par In method buildParameterized found:
\par \tab --> defaultValue
\par Null assignments: 
\par In method buildSimple found: 
\par \tab --> value
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmountUnit.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> symbol
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultCoercibles.java************
\par 
\par Null checks:
\par candidate != null?final Method valueOfMethod = candidate;
\par value == null?return value == null ? null : valueOfMethod.invoke(null, value);
\par value == null?return value == null ? null : ctor.newInstance(value);
\par value != null?return value != null ? Boolean.valueOf(value) : null;
\par value != null?return value != null ? Byte.valueOf(value) : null;
\par value != null?return value != null ? Short.valueOf(value) : null;
\par value != null?return value != null ? Integer.valueOf(value) : null;
\par value != null?return value != null ? Long.valueOf(value) : null;
\par value != null?return value != null ? Float.valueOf(value) : null;
\par value != null?return value != null ? Double.valueOf(value) : null;
\par value != null?return value != null ? URI.create(value) : null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method accept found:
\par \tab --> coercer
\par Null assignments: 
\par In method accept found: 
\par \tab --> candidate
\par \tab --> coercer
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Description.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Param.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> filterConfig
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeSpan.java************
\par 
\par Null checks:
\par unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> millis
\par \tab --> unit
\par \tab --> period
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CoercionConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config2.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config4.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigEnum.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ReplacementConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestBadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestClasses.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCollections.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestConfigurationObjectFactory.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDataAmount.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEmptyValue.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestExposeMappedReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestMultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestVariousPropertyTypes.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par \tab --> sc
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file WibbleConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 2ecc736bbdc1e98bd88dc9c83c60047bab259108 and 6bcf64aacb6abb8f40de992d059ee4c000edf6e0:
\par \tab --> Added null checks = 3
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 3
\par 
\par Reverted to commit 2ecc736bbdc1e98bd88dc9c83c60047bab259108
\par 
\par Added Bully.java to ./config-magic/ repository source files.
\par Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added Coercer.java to ./config-magic/ repository source files.
\par Added Coercible.java to ./config-magic/ repository source files.
\par Added CommonsConfigSource.java to ./config-magic/ repository source files.
\par Added Config.java to ./config-magic/ repository source files.
\par Added ConfigReplacements.java to ./config-magic/ repository source files.
\par Added ConfigSource.java to ./config-magic/ repository source files.
\par Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added DataAmount.java to ./config-magic/ repository source files.
\par Added DataAmountUnit.java to ./config-magic/ repository source files.
\par Added Default.java to ./config-magic/ repository source files.
\par Added DefaultCoercibles.java to ./config-magic/ repository source files.
\par Added DefaultNull.java to ./config-magic/ repository source files.
\par Added Description.java to ./config-magic/ repository source files.
\par Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
\par Added Param.java to ./config-magic/ repository source files.
\par Added Separator.java to ./config-magic/ repository source files.
\par Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
\par Added TimeSpan.java to ./config-magic/ repository source files.
\par Added BadConfig.java to ./config-magic/ repository source files.
\par Added CoercionConfig.java to ./config-magic/ repository source files.
\par Added Config1.java to ./config-magic/ repository source files.
\par Added Config2.java to ./config-magic/ repository source files.
\par Added Config3.java to ./config-magic/ repository source files.
\par Added Config4.java to ./config-magic/ repository source files.
\par Added Config5.java to ./config-magic/ repository source files.
\par Added ConfigEnum.java to ./config-magic/ repository source files.
\par Added EnumeratedConfig1.java to ./config-magic/ repository source files.
\par Added MultiConfig.java to ./config-magic/ repository source files.
\par Added Props.java to ./config-magic/ repository source files.
\par Added ReplacementConfig1.java to ./config-magic/ repository source files.
\par Added TestArrays.java to ./config-magic/ repository source files.
\par Added TestBadConfig.java to ./config-magic/ repository source files.
\par Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added TestClasses.java to ./config-magic/ repository source files.
\par Added TestCoercion.java to ./config-magic/ repository source files.
\par Added TestCollections.java to ./config-magic/ repository source files.
\par Added TestCommonsConfig.java to ./config-magic/ repository source files.
\par Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added TestCustomCoercion.java to ./config-magic/ repository source files.
\par Added TestDataAmount.java to ./config-magic/ repository source files.
\par Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
\par Added TestDefaultNull.java to ./config-magic/ repository source files.
\par Added TestDefaultsPresent.java to ./config-magic/ repository source files.
\par Added TestEmptyValue.java to ./config-magic/ repository source files.
\par Added TestEnums.java to ./config-magic/ repository source files.
\par Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
\par Added TestFile.java to ./config-magic/ repository source files.
\par Added TestMultiConfig.java to ./config-magic/ repository source files.
\par Added TestNoFinal.java to ./config-magic/ repository source files.
\par Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added TestTimeSpan.java to ./config-magic/ repository source files.
\par Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
\par Added Wibble.java to ./config-magic/ repository source files.
\par Added WibbleConfig.java to ./config-magic/ repository source files.
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bully.java************
\par 
\par Null checks:
\par args != null?if (args[0] instanceof Class<?>) \{
\par                         return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
\par                     \}
\par                     else if (args[0] instanceof WildcardType) \{
\par                         return coerceClass(type, (WildcardType)args[0], value);
\par                     \}
\par value == null?return null;
\par separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
\par ctor != null?result = (Collection)ctor.newInstance();
\par result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
\par coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
\par coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
\par typeCoercer == null?for (Coercible<?> coercible : coercibles) \{
\par                 final Coercer<?> coercer = coercible.accept(type);
\par                 if (coercer != null) \{
\par                     mappings.put(type, coercer);
\par                     typeCoercer = coercer;
\par                     break;
\par                 \}
\par             \}
\par coercer != null?mappings.put(type, coercer);
\par 
\par Null fields: 
\par \tab --> TYPE_COERCIBLES
\par 
\par Null variables: 
\par In method coerceCollection found:
\par \tab --> result
\par In method coerceArray found:
\par \tab --> tokens
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercer.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CommonsConfigSource.java************
\par 
\par Null checks:
\par strings == null?return null;
\par 
\par Null fields: 
\par \tab --> config
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigurationObjectFactory.java************
\par 
\par Null checks:
\par toStringMethod != null?slots.put(toStringMethod, count++);
\par mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
\par annotation != null?propertyNames = annotation.value();
\par propertyNames == null?throw new IllegalArgumentException("Method " +
\par                                                    method.toGenericString() +
\par                                                    " declares config annotation but no field name!");
\par mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
\par value != null?assignedFrom = "property: '" + propertyName + "'";
\par mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
\par value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
\par value == null?if (hasDefault) \{
\par                 value = method.getAnnotation(Default.class).value();
\par                 assignedFrom = "annotation: @Default";
\par 
\par                 logger.info("Assigning default value [\{\}] for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ value, propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par             \}
\par             else if (hasDefaultNull) \{
\par                 logger.info("Assigning null default value for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 assignedFrom = "annotation: @DefaultNull";
\par             \}
\par             else \{
\par                 // Final try: Is the method is actually callable?
\par                 if (!Modifier.isAbstract(method.getModifiers())) \{
\par                     useMethod = true;
\par                     assignedFrom = "method: '" + method.getName() + "()'";
\par                     logger.info("Using method itself for \{\} on [\{\}#\{\}()]",
\par                                 new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 \}
\par                 else \{
\par                     throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
\par                             prettyPrint(propertyNames, mappedReplacements),
\par                             method.toGenericString()));
\par                 \}
\par             \}
\par annotationValues == null?throw new IllegalArgumentException("Method " +
\par                                                method.toGenericString() +
\par                                                " declares config annotation but no field name!");
\par values == null?return "";
\par mappedReplacements != null?sb.append(" translated to [");
\par toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
\par finalValue != null?sb.append(finalValue.toString());
\par toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
\par value != null?logger.info("Assigning value [\{\}] for [\{\}] on [\{\}#\{\}()]",
\par                                     new Object[] \{ value, property, method.getDeclaringClass().getName(), method.getName() \});
\par toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
\par toStringValue == null?final StringBuilder sb = new StringBuilder();
\par 
\par Null fields: 
\par \tab --> method
\par \tab --> slots
\par \tab --> handler
\par \tab --> paramTokenList
\par \tab --> config
\par \tab --> bully
\par \tab --> properties
\par \tab --> defaultValue
\par \tab --> callbacks
\par \tab --> assignedFrom
\par \tab --> finalValue
\par 
\par Null variables: 
\par In method buildSimple found:
\par \tab --> assignedFrom
\par \tab --> value
\par In method internalBuild found:
\par \tab --> fixedMap
\par In method buildParameterized found:
\par \tab --> defaultValue
\par Null assignments: 
\par In method buildSimple found: 
\par \tab --> value
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmountUnit.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> symbol
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultCoercibles.java************
\par 
\par Null checks:
\par candidate != null?final Method valueOfMethod = candidate;
\par value == null?return value == null ? null : valueOfMethod.invoke(null, value);
\par value == null?return value == null ? null : ctor.newInstance(value);
\par value != null?return value != null ? Boolean.valueOf(value) : null;
\par value != null?return value != null ? Byte.valueOf(value) : null;
\par value != null?return value != null ? Short.valueOf(value) : null;
\par value != null?return value != null ? Integer.valueOf(value) : null;
\par value != null?return value != null ? Long.valueOf(value) : null;
\par value != null?return value != null ? Float.valueOf(value) : null;
\par value != null?return value != null ? Double.valueOf(value) : null;
\par value != null?return value != null ? URI.create(value) : null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method accept found:
\par \tab --> coercer
\par Null assignments: 
\par In method accept found: 
\par \tab --> candidate
\par \tab --> coercer
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Description.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Param.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> filterConfig
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeSpan.java************
\par 
\par Null checks:
\par unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> millis
\par \tab --> unit
\par \tab --> period
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CoercionConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config2.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config4.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigEnum.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ReplacementConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestBadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestClasses.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCollections.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestConfigurationObjectFactory.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDataAmount.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEmptyValue.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestExposeMappedReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestMultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestVariousPropertyTypes.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par \tab --> sc
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file WibbleConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 6be5ed7d668998c7663cdf54813a51d32cec8956 and 2ecc736bbdc1e98bd88dc9c83c60047bab259108:
\par \tab --> Added null checks = 3
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 3
\par 
\par Reverted to commit 6be5ed7d668998c7663cdf54813a51d32cec8956
\par 
\par Added Bully.java to ./config-magic/ repository source files.
\par Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added Coercer.java to ./config-magic/ repository source files.
\par Added Coercible.java to ./config-magic/ repository source files.
\par Added CommonsConfigSource.java to ./config-magic/ repository source files.
\par Added Config.java to ./config-magic/ repository source files.
\par Added ConfigReplacements.java to ./config-magic/ repository source files.
\par Added ConfigSource.java to ./config-magic/ repository source files.
\par Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added DataAmount.java to ./config-magic/ repository source files.
\par Added DataAmountUnit.java to ./config-magic/ repository source files.
\par Added Default.java to ./config-magic/ repository source files.
\par Added DefaultCoercibles.java to ./config-magic/ repository source files.
\par Added DefaultNull.java to ./config-magic/ repository source files.
\par Added Description.java to ./config-magic/ repository source files.
\par Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
\par Added Param.java to ./config-magic/ repository source files.
\par Added Separator.java to ./config-magic/ repository source files.
\par Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
\par Added TimeSpan.java to ./config-magic/ repository source files.
\par Added BadConfig.java to ./config-magic/ repository source files.
\par Added CoercionConfig.java to ./config-magic/ repository source files.
\par Added Config1.java to ./config-magic/ repository source files.
\par Added Config2.java to ./config-magic/ repository source files.
\par Added Config3.java to ./config-magic/ repository source files.
\par Added Config4.java to ./config-magic/ repository source files.
\par Added Config5.java to ./config-magic/ repository source files.
\par Added ConfigEnum.java to ./config-magic/ repository source files.
\par Added EnumeratedConfig1.java to ./config-magic/ repository source files.
\par Added MultiConfig.java to ./config-magic/ repository source files.
\par Added Props.java to ./config-magic/ repository source files.
\par Added ReplacementConfig1.java to ./config-magic/ repository source files.
\par Added TestArrays.java to ./config-magic/ repository source files.
\par Added TestBadConfig.java to ./config-magic/ repository source files.
\par Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added TestClasses.java to ./config-magic/ repository source files.
\par Added TestCoercion.java to ./config-magic/ repository source files.
\par Added TestCollections.java to ./config-magic/ repository source files.
\par Added TestCommonsConfig.java to ./config-magic/ repository source files.
\par Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added TestCustomCoercion.java to ./config-magic/ repository source files.
\par Added TestDataAmount.java to ./config-magic/ repository source files.
\par Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
\par Added TestDefaultNull.java to ./config-magic/ repository source files.
\par Added TestDefaultsPresent.java to ./config-magic/ repository source files.
\par Added TestEmptyValue.java to ./config-magic/ repository source files.
\par Added TestEnums.java to ./config-magic/ repository source files.
\par Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
\par Added TestFile.java to ./config-magic/ repository source files.
\par Added TestMultiConfig.java to ./config-magic/ repository source files.
\par Added TestNoFinal.java to ./config-magic/ repository source files.
\par Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added TestTimeSpan.java to ./config-magic/ repository source files.
\par Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
\par Added Wibble.java to ./config-magic/ repository source files.
\par Added WibbleConfig.java to ./config-magic/ repository source files.
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bully.java************
\par 
\par Null checks:
\par args != null?if (args[0] instanceof Class<?>) \{
\par                         return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
\par                     \}
\par                     else if (args[0] instanceof WildcardType) \{
\par                         return coerceClass(type, (WildcardType)args[0], value);
\par                     \}
\par value == null?return null;
\par separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
\par ctor != null?result = (Collection)ctor.newInstance();
\par result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
\par coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
\par coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
\par typeCoercer == null?for (Coercible<?> coercible : coercibles) \{
\par                 final Coercer<?> coercer = coercible.accept(type);
\par                 if (coercer != null) \{
\par                     mappings.put(type, coercer);
\par                     typeCoercer = coercer;
\par                     break;
\par                 \}
\par             \}
\par coercer != null?mappings.put(type, coercer);
\par 
\par Null fields: 
\par \tab --> TYPE_COERCIBLES
\par 
\par Null variables: 
\par In method coerceCollection found:
\par \tab --> result
\par In method coerceArray found:
\par \tab --> tokens
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercer.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CommonsConfigSource.java************
\par 
\par Null checks:
\par strings == null?return null;
\par 
\par Null fields: 
\par \tab --> config
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigurationObjectFactory.java************
\par 
\par Null checks:
\par toStringMethod != null?slots.put(toStringMethod, count++);
\par mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
\par annotation != null?propertyNames = annotation.value();
\par propertyNames == null?throw new IllegalArgumentException("Method " +
\par                                                    method.toGenericString() +
\par                                                    " declares config annotation but no field name!");
\par mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
\par value != null?assignedFrom = "property: '" + propertyName + "'";
\par mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
\par value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
\par value == null?if (hasDefault) \{
\par                 value = method.getAnnotation(Default.class).value();
\par                 assignedFrom = "annotation: @Default";
\par 
\par                 logger.info("Assigning default value [\{\}] for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ value, propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par             \}
\par             else if (hasDefaultNull) \{
\par                 logger.info("Assigning null default value for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 assignedFrom = "annotation: @DefaultNull";
\par             \}
\par             else \{
\par                 // Final try: Is the method is actually callable?
\par                 if (!Modifier.isAbstract(method.getModifiers())) \{
\par                     useMethod = true;
\par                     assignedFrom = "method: '" + method.getName() + "()'";
\par                     logger.info("Using method itself for \{\} on [\{\}#\{\}()]",
\par                                 new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 \}
\par                 else \{
\par                     throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
\par                             prettyPrint(propertyNames, mappedReplacements),
\par                             method.toGenericString()));
\par                 \}
\par             \}
\par annotationValues == null?throw new IllegalArgumentException("Method " +
\par                                                method.toGenericString() +
\par                                                " declares config annotation but no field name!");
\par values == null?return "";
\par mappedReplacements != null?sb.append(" translated to [");
\par toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
\par finalValue != null?sb.append(finalValue.toString());
\par toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
\par value != null?logger.info("Assigning value [\{\}] for [\{\}] on [\{\}#\{\}()]",
\par                                     new Object[] \{ value, property, method.getDeclaringClass().getName(), method.getName() \});
\par toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
\par toStringValue == null?final StringBuilder sb = new StringBuilder();
\par 
\par Null fields: 
\par \tab --> method
\par \tab --> slots
\par \tab --> handler
\par \tab --> paramTokenList
\par \tab --> config
\par \tab --> bully
\par \tab --> properties
\par \tab --> defaultValue
\par \tab --> callbacks
\par \tab --> assignedFrom
\par \tab --> finalValue
\par 
\par Null variables: 
\par In method buildSimple found:
\par \tab --> assignedFrom
\par \tab --> value
\par In method internalBuild found:
\par \tab --> fixedMap
\par In method buildParameterized found:
\par \tab --> defaultValue
\par Null assignments: 
\par In method buildSimple found: 
\par \tab --> value
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmountUnit.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> symbol
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultCoercibles.java************
\par 
\par Null checks:
\par candidate != null?final Method valueOfMethod = candidate;
\par value == null?return value == null ? null : valueOfMethod.invoke(null, value);
\par value == null?return value == null ? null : ctor.newInstance(value);
\par value != null?return value != null ? Boolean.valueOf(value) : null;
\par value != null?return value != null ? Byte.valueOf(value) : null;
\par value != null?return value != null ? Short.valueOf(value) : null;
\par value != null?return value != null ? Integer.valueOf(value) : null;
\par value != null?return value != null ? Long.valueOf(value) : null;
\par value != null?return value != null ? Float.valueOf(value) : null;
\par value != null?return value != null ? Double.valueOf(value) : null;
\par value != null?return value != null ? URI.create(value) : null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method accept found:
\par \tab --> coercer
\par Null assignments: 
\par In method accept found: 
\par \tab --> candidate
\par \tab --> coercer
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Description.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Param.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> filterConfig
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeSpan.java************
\par 
\par Null checks:
\par unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> millis
\par \tab --> unit
\par \tab --> period
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CoercionConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config2.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config4.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigEnum.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ReplacementConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestBadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestClasses.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCollections.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestConfigurationObjectFactory.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDataAmount.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEmptyValue.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestExposeMappedReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestMultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestVariousPropertyTypes.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par \tab --> sc
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file WibbleConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of a7a5228d2bd47c50578cf1336548315b08f0f22f and 6be5ed7d668998c7663cdf54813a51d32cec8956:
\par \tab --> Added null checks = 3
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 3
\par 
\par Reverted to commit a7a5228d2bd47c50578cf1336548315b08f0f22f
\par 
\par Added Bully.java to ./config-magic/ repository source files.
\par Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added Coercer.java to ./config-magic/ repository source files.
\par Added Coercible.java to ./config-magic/ repository source files.
\par Added CommonsConfigSource.java to ./config-magic/ repository source files.
\par Added Config.java to ./config-magic/ repository source files.
\par Added ConfigReplacements.java to ./config-magic/ repository source files.
\par Added ConfigSource.java to ./config-magic/ repository source files.
\par Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added DataAmount.java to ./config-magic/ repository source files.
\par Added DataAmountUnit.java to ./config-magic/ repository source files.
\par Added Default.java to ./config-magic/ repository source files.
\par Added DefaultCoercibles.java to ./config-magic/ repository source files.
\par Added DefaultNull.java to ./config-magic/ repository source files.
\par Added Description.java to ./config-magic/ repository source files.
\par Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
\par Added Param.java to ./config-magic/ repository source files.
\par Added Separator.java to ./config-magic/ repository source files.
\par Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
\par Added TimeSpan.java to ./config-magic/ repository source files.
\par Added BadConfig.java to ./config-magic/ repository source files.
\par Added CoercionConfig.java to ./config-magic/ repository source files.
\par Added Config1.java to ./config-magic/ repository source files.
\par Added Config2.java to ./config-magic/ repository source files.
\par Added Config3.java to ./config-magic/ repository source files.
\par Added Config4.java to ./config-magic/ repository source files.
\par Added Config5.java to ./config-magic/ repository source files.
\par Added ConfigEnum.java to ./config-magic/ repository source files.
\par Added EnumeratedConfig1.java to ./config-magic/ repository source files.
\par Added MultiConfig.java to ./config-magic/ repository source files.
\par Added Props.java to ./config-magic/ repository source files.
\par Added ReplacementConfig1.java to ./config-magic/ repository source files.
\par Added TestArrays.java to ./config-magic/ repository source files.
\par Added TestBadConfig.java to ./config-magic/ repository source files.
\par Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added TestClasses.java to ./config-magic/ repository source files.
\par Added TestCoercion.java to ./config-magic/ repository source files.
\par Added TestCollections.java to ./config-magic/ repository source files.
\par Added TestCommonsConfig.java to ./config-magic/ repository source files.
\par Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added TestCustomCoercion.java to ./config-magic/ repository source files.
\par Added TestDataAmount.java to ./config-magic/ repository source files.
\par Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
\par Added TestDefaultNull.java to ./config-magic/ repository source files.
\par Added TestDefaultsPresent.java to ./config-magic/ repository source files.
\par Added TestEmptyValue.java to ./config-magic/ repository source files.
\par Added TestEnums.java to ./config-magic/ repository source files.
\par Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
\par Added TestFile.java to ./config-magic/ repository source files.
\par Added TestMultiConfig.java to ./config-magic/ repository source files.
\par Added TestNoFinal.java to ./config-magic/ repository source files.
\par Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added TestTimeSpan.java to ./config-magic/ repository source files.
\par Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
\par Added Wibble.java to ./config-magic/ repository source files.
\par Added WibbleConfig.java to ./config-magic/ repository source files.
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bully.java************
\par 
\par Null checks:
\par args != null?if (args[0] instanceof Class<?>) \{
\par                         return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
\par                     \}
\par                     else if (args[0] instanceof WildcardType) \{
\par                         return coerceClass(type, (WildcardType)args[0], value);
\par                     \}
\par value == null?return null;
\par separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
\par ctor != null?result = (Collection)ctor.newInstance();
\par result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
\par coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
\par coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
\par typeCoercer == null?for (Coercible<?> coercible : coercibles) \{
\par                 final Coercer<?> coercer = coercible.accept(type);
\par                 if (coercer != null) \{
\par                     mappings.put(type, coercer);
\par                     typeCoercer = coercer;
\par                     break;
\par                 \}
\par             \}
\par coercer != null?mappings.put(type, coercer);
\par 
\par Null fields: 
\par \tab --> TYPE_COERCIBLES
\par 
\par Null variables: 
\par In method coerceCollection found:
\par \tab --> result
\par In method coerceArray found:
\par \tab --> tokens
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercer.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CommonsConfigSource.java************
\par 
\par Null checks:
\par strings == null?return null;
\par 
\par Null fields: 
\par \tab --> config
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigurationObjectFactory.java************
\par 
\par Null checks:
\par toStringMethod != null?slots.put(toStringMethod, count++);
\par mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
\par annotation != null?propertyNames = annotation.value();
\par propertyNames == null?throw new IllegalArgumentException("Method " +
\par                                                    method.toGenericString() +
\par                                                    " declares config annotation but no field name!");
\par mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
\par value != null?assignedFrom = "property: '" + propertyName + "'";
\par mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
\par value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
\par value == null?if (hasDefault) \{
\par                 value = method.getAnnotation(Default.class).value();
\par                 assignedFrom = "annotation: @Default";
\par 
\par                 logger.info("Assigning default value [\{\}] for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ value, propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par             \}
\par             else if (hasDefaultNull) \{
\par                 logger.info("Assigning null default value for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 assignedFrom = "annotation: @DefaultNull";
\par             \}
\par             else \{
\par                 // Final try: Is the method is actually callable?
\par                 if (!Modifier.isAbstract(method.getModifiers())) \{
\par                     useMethod = true;
\par                     assignedFrom = "method: '" + method.getName() + "()'";
\par                     logger.info("Using method itself for \{\} on [\{\}#\{\}()]",
\par                                 new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 \}
\par                 else \{
\par                     throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
\par                             prettyPrint(propertyNames, mappedReplacements),
\par                             method.toGenericString()));
\par                 \}
\par             \}
\par annotationValues == null?throw new IllegalArgumentException("Method " +
\par                                                method.toGenericString() +
\par                                                " declares config annotation but no field name!");
\par values == null?return "";
\par mappedReplacements != null?sb.append(" translated to [");
\par toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
\par finalValue != null?sb.append(finalValue.toString());
\par toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
\par value != null?logger.info("Assigning value [\{\}] for [\{\}] on [\{\}#\{\}()]",
\par                                     new Object[] \{ value, property, method.getDeclaringClass().getName(), method.getName() \});
\par toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
\par toStringValue == null?final StringBuilder sb = new StringBuilder();
\par 
\par Null fields: 
\par \tab --> method
\par \tab --> slots
\par \tab --> handler
\par \tab --> paramTokenList
\par \tab --> config
\par \tab --> bully
\par \tab --> properties
\par \tab --> defaultValue
\par \tab --> callbacks
\par \tab --> assignedFrom
\par \tab --> finalValue
\par 
\par Null variables: 
\par In method buildSimple found:
\par \tab --> assignedFrom
\par \tab --> value
\par In method internalBuild found:
\par \tab --> fixedMap
\par In method buildParameterized found:
\par \tab --> defaultValue
\par Null assignments: 
\par In method buildSimple found: 
\par \tab --> value
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmountUnit.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> symbol
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultCoercibles.java************
\par 
\par Null checks:
\par candidate != null?final Method valueOfMethod = candidate;
\par value == null?return value == null ? null : valueOfMethod.invoke(null, value);
\par value == null?return value == null ? null : ctor.newInstance(value);
\par value != null?return value != null ? Boolean.valueOf(value) : null;
\par value != null?return value != null ? Byte.valueOf(value) : null;
\par value != null?return value != null ? Short.valueOf(value) : null;
\par value != null?return value != null ? Integer.valueOf(value) : null;
\par value != null?return value != null ? Long.valueOf(value) : null;
\par value != null?return value != null ? Float.valueOf(value) : null;
\par value != null?return value != null ? Double.valueOf(value) : null;
\par value != null?return value != null ? URI.create(value) : null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method accept found:
\par \tab --> coercer
\par Null assignments: 
\par In method accept found: 
\par \tab --> candidate
\par \tab --> coercer
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Description.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Param.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> filterConfig
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeSpan.java************
\par 
\par Null checks:
\par unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> millis
\par \tab --> unit
\par \tab --> period
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CoercionConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config2.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config4.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigEnum.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ReplacementConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestBadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestClasses.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCollections.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestConfigurationObjectFactory.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDataAmount.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEmptyValue.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestExposeMappedReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestMultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestVariousPropertyTypes.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par \tab --> sc
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file WibbleConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of d5b968845affc533433502444d4f537f2689f8ea and a7a5228d2bd47c50578cf1336548315b08f0f22f:
\par \tab --> Added null checks = 3
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 3
\par 
\par Reverted to commit d5b968845affc533433502444d4f537f2689f8ea
\par 
\par Added Bully.java to ./config-magic/ repository source files.
\par Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added Coercer.java to ./config-magic/ repository source files.
\par Added Coercible.java to ./config-magic/ repository source files.
\par Added CommonsConfigSource.java to ./config-magic/ repository source files.
\par Added Config.java to ./config-magic/ repository source files.
\par Added ConfigReplacements.java to ./config-magic/ repository source files.
\par Added ConfigSource.java to ./config-magic/ repository source files.
\par Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added DataAmount.java to ./config-magic/ repository source files.
\par Added DataAmountUnit.java to ./config-magic/ repository source files.
\par Added Default.java to ./config-magic/ repository source files.
\par Added DefaultCoercibles.java to ./config-magic/ repository source files.
\par Added DefaultNull.java to ./config-magic/ repository source files.
\par Added Description.java to ./config-magic/ repository source files.
\par Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
\par Added Param.java to ./config-magic/ repository source files.
\par Added Separator.java to ./config-magic/ repository source files.
\par Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
\par Added TimeSpan.java to ./config-magic/ repository source files.
\par Added BadConfig.java to ./config-magic/ repository source files.
\par Added CoercionConfig.java to ./config-magic/ repository source files.
\par Added Config1.java to ./config-magic/ repository source files.
\par Added Config2.java to ./config-magic/ repository source files.
\par Added Config3.java to ./config-magic/ repository source files.
\par Added Config4.java to ./config-magic/ repository source files.
\par Added Config5.java to ./config-magic/ repository source files.
\par Added ConfigEnum.java to ./config-magic/ repository source files.
\par Added EnumeratedConfig1.java to ./config-magic/ repository source files.
\par Added MultiConfig.java to ./config-magic/ repository source files.
\par Added Props.java to ./config-magic/ repository source files.
\par Added ReplacementConfig1.java to ./config-magic/ repository source files.
\par Added TestArrays.java to ./config-magic/ repository source files.
\par Added TestBadConfig.java to ./config-magic/ repository source files.
\par Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added TestClasses.java to ./config-magic/ repository source files.
\par Added TestCoercion.java to ./config-magic/ repository source files.
\par Added TestCollections.java to ./config-magic/ repository source files.
\par Added TestCommonsConfig.java to ./config-magic/ repository source files.
\par Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added TestCustomCoercion.java to ./config-magic/ repository source files.
\par Added TestDataAmount.java to ./config-magic/ repository source files.
\par Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
\par Added TestDefaultNull.java to ./config-magic/ repository source files.
\par Added TestDefaultsPresent.java to ./config-magic/ repository source files.
\par Added TestEmptyValue.java to ./config-magic/ repository source files.
\par Added TestEnums.java to ./config-magic/ repository source files.
\par Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
\par Added TestFile.java to ./config-magic/ repository source files.
\par Added TestMultiConfig.java to ./config-magic/ repository source files.
\par Added TestNoFinal.java to ./config-magic/ repository source files.
\par Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added TestTimeSpan.java to ./config-magic/ repository source files.
\par Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
\par Added Wibble.java to ./config-magic/ repository source files.
\par Added WibbleConfig.java to ./config-magic/ repository source files.
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bully.java************
\par 
\par Null checks:
\par args != null?if (args[0] instanceof Class<?>) \{
\par                         return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
\par                     \}
\par                     else if (args[0] instanceof WildcardType) \{
\par                         return coerceClass(type, (WildcardType)args[0], value);
\par                     \}
\par value == null?return null;
\par separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
\par ctor != null?result = (Collection)ctor.newInstance();
\par result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
\par coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
\par coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
\par typeCoercer == null?for (Coercible<?> coercible : coercibles) \{
\par                 final Coercer<?> coercer = coercible.accept(type);
\par                 if (coercer != null) \{
\par                     mappings.put(type, coercer);
\par                     typeCoercer = coercer;
\par                     break;
\par                 \}
\par             \}
\par coercer != null?mappings.put(type, coercer);
\par 
\par Null fields: 
\par \tab --> TYPE_COERCIBLES
\par 
\par Null variables: 
\par In method coerceCollection found:
\par \tab --> result
\par In method coerceArray found:
\par \tab --> tokens
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercer.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CommonsConfigSource.java************
\par 
\par Null checks:
\par strings == null?return null;
\par 
\par Null fields: 
\par \tab --> config
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigurationObjectFactory.java************
\par 
\par Null checks:
\par toStringMethod != null?slots.put(toStringMethod, count++);
\par mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
\par annotation != null?propertyNames = annotation.value();
\par propertyNames == null?throw new IllegalArgumentException("Method " +
\par                                                    method.toGenericString() +
\par                                                    " declares config annotation but no field name!");
\par mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
\par value != null?assignedFrom = "property: '" + propertyName + "'";
\par mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
\par value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
\par value == null?if (hasDefault) \{
\par                 value = method.getAnnotation(Default.class).value();
\par                 assignedFrom = "annotation: @Default";
\par 
\par                 logger.info("Assigning default value [\{\}] for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ value, propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par             \}
\par             else if (hasDefaultNull) \{
\par                 logger.info("Assigning null default value for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 assignedFrom = "annotation: @DefaultNull";
\par             \}
\par             else \{
\par                 // Final try: Is the method is actually callable?
\par                 if (!Modifier.isAbstract(method.getModifiers())) \{
\par                     useMethod = true;
\par                     assignedFrom = "method: '" + method.getName() + "()'";
\par                     logger.info("Using method itself for \{\} on [\{\}#\{\}()]",
\par                                 new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 \}
\par                 else \{
\par                     throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
\par                             prettyPrint(propertyNames, mappedReplacements),
\par                             method.toGenericString()));
\par                 \}
\par             \}
\par annotationValues == null?throw new IllegalArgumentException("Method " +
\par                                                method.toGenericString() +
\par                                                " declares config annotation but no field name!");
\par values == null?return "";
\par mappedReplacements != null?sb.append(" translated to [");
\par toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
\par finalValue != null?sb.append(finalValue.toString());
\par toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
\par value != null?logger.info("Assigning value [\{\}] for [\{\}] on [\{\}#\{\}()]",
\par                                     new Object[] \{ value, property, method.getDeclaringClass().getName(), method.getName() \});
\par toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
\par toStringValue == null?final StringBuilder sb = new StringBuilder();
\par 
\par Null fields: 
\par \tab --> method
\par \tab --> slots
\par \tab --> handler
\par \tab --> paramTokenList
\par \tab --> config
\par \tab --> bully
\par \tab --> properties
\par \tab --> defaultValue
\par \tab --> callbacks
\par \tab --> assignedFrom
\par \tab --> finalValue
\par 
\par Null variables: 
\par In method buildSimple found:
\par \tab --> assignedFrom
\par \tab --> value
\par In method internalBuild found:
\par \tab --> fixedMap
\par In method buildParameterized found:
\par \tab --> defaultValue
\par Null assignments: 
\par In method buildSimple found: 
\par \tab --> value
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmountUnit.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> symbol
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultCoercibles.java************
\par 
\par Null checks:
\par candidate != null?final Method valueOfMethod = candidate;
\par value == null?return value == null ? null : valueOfMethod.invoke(null, value);
\par value == null?return value == null ? null : ctor.newInstance(value);
\par value != null?return value != null ? Boolean.valueOf(value) : null;
\par value != null?return value != null ? Byte.valueOf(value) : null;
\par value != null?return value != null ? Short.valueOf(value) : null;
\par value != null?return value != null ? Integer.valueOf(value) : null;
\par value != null?return value != null ? Long.valueOf(value) : null;
\par value != null?return value != null ? Float.valueOf(value) : null;
\par value != null?return value != null ? Double.valueOf(value) : null;
\par value != null?return value != null ? URI.create(value) : null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method accept found:
\par \tab --> coercer
\par Null assignments: 
\par In method accept found: 
\par \tab --> candidate
\par \tab --> coercer
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Description.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Param.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> filterConfig
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeSpan.java************
\par 
\par Null checks:
\par unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> millis
\par \tab --> unit
\par \tab --> period
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CoercionConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config2.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config4.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigEnum.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ReplacementConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestBadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestClasses.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCollections.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestConfigurationObjectFactory.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDataAmount.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEmptyValue.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestExposeMappedReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestMultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestVariousPropertyTypes.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par \tab --> sc
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file WibbleConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 2355601dd732cc19d1f99bcc671fcd2ce73db616 and d5b968845affc533433502444d4f537f2689f8ea:
\par \tab --> Added null checks = 3
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 3
\par 
\par Reverted to commit 2355601dd732cc19d1f99bcc671fcd2ce73db616
\par 
\par Added Bully.java to ./config-magic/ repository source files.
\par Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added Coercer.java to ./config-magic/ repository source files.
\par Added Coercible.java to ./config-magic/ repository source files.
\par Added CommonsConfigSource.java to ./config-magic/ repository source files.
\par Added Config.java to ./config-magic/ repository source files.
\par Added ConfigReplacements.java to ./config-magic/ repository source files.
\par Added ConfigSource.java to ./config-magic/ repository source files.
\par Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added DataAmount.java to ./config-magic/ repository source files.
\par Added DataAmountUnit.java to ./config-magic/ repository source files.
\par Added Default.java to ./config-magic/ repository source files.
\par Added DefaultCoercibles.java to ./config-magic/ repository source files.
\par Added DefaultNull.java to ./config-magic/ repository source files.
\par Added Description.java to ./config-magic/ repository source files.
\par Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
\par Added Param.java to ./config-magic/ repository source files.
\par Added Separator.java to ./config-magic/ repository source files.
\par Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
\par Added TimeSpan.java to ./config-magic/ repository source files.
\par Added BadConfig.java to ./config-magic/ repository source files.
\par Added CoercionConfig.java to ./config-magic/ repository source files.
\par Added Config1.java to ./config-magic/ repository source files.
\par Added Config2.java to ./config-magic/ repository source files.
\par Added Config3.java to ./config-magic/ repository source files.
\par Added Config4.java to ./config-magic/ repository source files.
\par Added Config5.java to ./config-magic/ repository source files.
\par Added ConfigEnum.java to ./config-magic/ repository source files.
\par Added EnumeratedConfig1.java to ./config-magic/ repository source files.
\par Added MultiConfig.java to ./config-magic/ repository source files.
\par Added Props.java to ./config-magic/ repository source files.
\par Added ReplacementConfig1.java to ./config-magic/ repository source files.
\par Added TestArrays.java to ./config-magic/ repository source files.
\par Added TestBadConfig.java to ./config-magic/ repository source files.
\par Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added TestClasses.java to ./config-magic/ repository source files.
\par Added TestCoercion.java to ./config-magic/ repository source files.
\par Added TestCollections.java to ./config-magic/ repository source files.
\par Added TestCommonsConfig.java to ./config-magic/ repository source files.
\par Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added TestCustomCoercion.java to ./config-magic/ repository source files.
\par Added TestDataAmount.java to ./config-magic/ repository source files.
\par Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
\par Added TestDefaultNull.java to ./config-magic/ repository source files.
\par Added TestDefaultsPresent.java to ./config-magic/ repository source files.
\par Added TestEmptyValue.java to ./config-magic/ repository source files.
\par Added TestEnums.java to ./config-magic/ repository source files.
\par Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
\par Added TestFile.java to ./config-magic/ repository source files.
\par Added TestMultiConfig.java to ./config-magic/ repository source files.
\par Added TestNoFinal.java to ./config-magic/ repository source files.
\par Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added TestTimeSpan.java to ./config-magic/ repository source files.
\par Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
\par Added Wibble.java to ./config-magic/ repository source files.
\par Added WibbleConfig.java to ./config-magic/ repository source files.
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bully.java************
\par 
\par Null checks:
\par args != null?if (args[0] instanceof Class<?>) \{
\par                         return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
\par                     \}
\par                     else if (args[0] instanceof WildcardType) \{
\par                         return coerceClass(type, (WildcardType)args[0], value);
\par                     \}
\par value == null?return null;
\par separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
\par ctor != null?result = (Collection)ctor.newInstance();
\par result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
\par coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
\par coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
\par typeCoercer == null?for (Coercible<?> coercible : coercibles) \{
\par                 final Coercer<?> coercer = coercible.accept(type);
\par                 if (coercer != null) \{
\par                     mappings.put(type, coercer);
\par                     typeCoercer = coercer;
\par                     break;
\par                 \}
\par             \}
\par coercer != null?mappings.put(type, coercer);
\par 
\par Null fields: 
\par \tab --> TYPE_COERCIBLES
\par 
\par Null variables: 
\par In method coerceCollection found:
\par \tab --> result
\par In method coerceArray found:
\par \tab --> tokens
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercer.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CommonsConfigSource.java************
\par 
\par Null checks:
\par strings == null?return null;
\par 
\par Null fields: 
\par \tab --> config
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigurationObjectFactory.java************
\par 
\par Null checks:
\par toStringMethod != null?slots.put(toStringMethod, count++);
\par mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
\par annotation != null?propertyNames = annotation.value();
\par propertyNames == null?throw new IllegalArgumentException("Method " +
\par                                                    method.toGenericString() +
\par                                                    " declares config annotation but no field name!");
\par mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
\par value != null?assignedFrom = "property: '" + propertyName + "'";
\par mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
\par value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
\par value == null?if (hasDefault) \{
\par                 value = method.getAnnotation(Default.class).value();
\par                 assignedFrom = "annotation: @Default";
\par 
\par                 logger.info("Assigning default value [\{\}] for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ value, propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par             \}
\par             else if (hasDefaultNull) \{
\par                 logger.info("Assigning null default value for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 assignedFrom = "annotation: @DefaultNull";
\par             \}
\par             else \{
\par                 // Final try: Is the method is actually callable?
\par                 if (!Modifier.isAbstract(method.getModifiers())) \{
\par                     useMethod = true;
\par                     assignedFrom = "method: '" + method.getName() + "()'";
\par                     logger.info("Using method itself for \{\} on [\{\}#\{\}()]",
\par                                 new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 \}
\par                 else \{
\par                     throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
\par                             prettyPrint(propertyNames, mappedReplacements),
\par                             method.toGenericString()));
\par                 \}
\par             \}
\par annotationValues == null?throw new IllegalArgumentException("Method " +
\par                                                method.toGenericString() +
\par                                                " declares config annotation but no field name!");
\par values == null?return "";
\par mappedReplacements != null?sb.append(" translated to [");
\par toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
\par finalValue != null?sb.append(finalValue.toString());
\par toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
\par value != null?logger.info("Assigning value [\{\}] for [\{\}] on [\{\}#\{\}()]",
\par                                     new Object[] \{ value, property, method.getDeclaringClass().getName(), method.getName() \});
\par toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
\par toStringValue == null?final StringBuilder sb = new StringBuilder();
\par 
\par Null fields: 
\par \tab --> method
\par \tab --> slots
\par \tab --> handler
\par \tab --> paramTokenList
\par \tab --> config
\par \tab --> bully
\par \tab --> properties
\par \tab --> defaultValue
\par \tab --> callbacks
\par \tab --> assignedFrom
\par \tab --> finalValue
\par 
\par Null variables: 
\par In method buildSimple found:
\par \tab --> assignedFrom
\par \tab --> value
\par In method internalBuild found:
\par \tab --> fixedMap
\par In method buildParameterized found:
\par \tab --> defaultValue
\par Null assignments: 
\par In method buildSimple found: 
\par \tab --> value
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmountUnit.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> symbol
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultCoercibles.java************
\par 
\par Null checks:
\par candidate != null?final Method valueOfMethod = candidate;
\par value == null?return value == null ? null : valueOfMethod.invoke(null, value);
\par value == null?return value == null ? null : ctor.newInstance(value);
\par value != null?return value != null ? Boolean.valueOf(value) : null;
\par value != null?return value != null ? Byte.valueOf(value) : null;
\par value != null?return value != null ? Short.valueOf(value) : null;
\par value != null?return value != null ? Integer.valueOf(value) : null;
\par value != null?return value != null ? Long.valueOf(value) : null;
\par value != null?return value != null ? Float.valueOf(value) : null;
\par value != null?return value != null ? Double.valueOf(value) : null;
\par value != null?return value != null ? URI.create(value) : null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method accept found:
\par \tab --> coercer
\par Null assignments: 
\par In method accept found: 
\par \tab --> candidate
\par \tab --> coercer
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Description.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Param.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> filterConfig
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeSpan.java************
\par 
\par Null checks:
\par unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> millis
\par \tab --> unit
\par \tab --> period
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CoercionConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config2.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config4.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigEnum.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ReplacementConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestBadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestClasses.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCollections.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestConfigurationObjectFactory.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDataAmount.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEmptyValue.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestExposeMappedReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestMultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestVariousPropertyTypes.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par \tab --> sc
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file WibbleConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 75f5d515ad61a3ff03cc7a88c7076a99c4a75855 and 2355601dd732cc19d1f99bcc671fcd2ce73db616:
\par \tab --> Added null checks = 3
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 3
\par 
\par Reverted to commit 75f5d515ad61a3ff03cc7a88c7076a99c4a75855
\par 
\par Added Bully.java to ./config-magic/ repository source files.
\par Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added Coercer.java to ./config-magic/ repository source files.
\par Added Coercible.java to ./config-magic/ repository source files.
\par Added CommonsConfigSource.java to ./config-magic/ repository source files.
\par Added Config.java to ./config-magic/ repository source files.
\par Added ConfigReplacements.java to ./config-magic/ repository source files.
\par Added ConfigSource.java to ./config-magic/ repository source files.
\par Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added DataAmount.java to ./config-magic/ repository source files.
\par Added DataAmountUnit.java to ./config-magic/ repository source files.
\par Added Default.java to ./config-magic/ repository source files.
\par Added DefaultCoercibles.java to ./config-magic/ repository source files.
\par Added DefaultNull.java to ./config-magic/ repository source files.
\par Added Description.java to ./config-magic/ repository source files.
\par Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
\par Added Param.java to ./config-magic/ repository source files.
\par Added Separator.java to ./config-magic/ repository source files.
\par Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
\par Added TimeSpan.java to ./config-magic/ repository source files.
\par Added BadConfig.java to ./config-magic/ repository source files.
\par Added CoercionConfig.java to ./config-magic/ repository source files.
\par Added Config1.java to ./config-magic/ repository source files.
\par Added Config2.java to ./config-magic/ repository source files.
\par Added Config3.java to ./config-magic/ repository source files.
\par Added Config4.java to ./config-magic/ repository source files.
\par Added Config5.java to ./config-magic/ repository source files.
\par Added ConfigEnum.java to ./config-magic/ repository source files.
\par Added EnumeratedConfig1.java to ./config-magic/ repository source files.
\par Added MultiConfig.java to ./config-magic/ repository source files.
\par Added Props.java to ./config-magic/ repository source files.
\par Added ReplacementConfig1.java to ./config-magic/ repository source files.
\par Added TestArrays.java to ./config-magic/ repository source files.
\par Added TestBadConfig.java to ./config-magic/ repository source files.
\par Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added TestClasses.java to ./config-magic/ repository source files.
\par Added TestCoercion.java to ./config-magic/ repository source files.
\par Added TestCollections.java to ./config-magic/ repository source files.
\par Added TestCommonsConfig.java to ./config-magic/ repository source files.
\par Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added TestCustomCoercion.java to ./config-magic/ repository source files.
\par Added TestDataAmount.java to ./config-magic/ repository source files.
\par Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
\par Added TestDefaultNull.java to ./config-magic/ repository source files.
\par Added TestDefaultsPresent.java to ./config-magic/ repository source files.
\par Added TestEmptyValue.java to ./config-magic/ repository source files.
\par Added TestEnums.java to ./config-magic/ repository source files.
\par Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
\par Added TestFile.java to ./config-magic/ repository source files.
\par Added TestMultiConfig.java to ./config-magic/ repository source files.
\par Added TestNoFinal.java to ./config-magic/ repository source files.
\par Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added TestTimeSpan.java to ./config-magic/ repository source files.
\par Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
\par Added Wibble.java to ./config-magic/ repository source files.
\par Added WibbleConfig.java to ./config-magic/ repository source files.
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bully.java************
\par 
\par Null checks:
\par args != null?if (args[0] instanceof Class<?>) \{
\par                         return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
\par                     \}
\par                     else if (args[0] instanceof WildcardType) \{
\par                         return coerceClass(type, (WildcardType)args[0], value);
\par                     \}
\par value == null?return null;
\par separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
\par ctor != null?result = (Collection)ctor.newInstance();
\par result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
\par coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
\par coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
\par typeCoercer == null?for (Coercible<?> coercible : coercibles) \{
\par                 final Coercer<?> coercer = coercible.accept(type);
\par                 if (coercer != null) \{
\par                     mappings.put(type, coercer);
\par                     typeCoercer = coercer;
\par                     break;
\par                 \}
\par             \}
\par coercer != null?mappings.put(type, coercer);
\par 
\par Null fields: 
\par \tab --> TYPE_COERCIBLES
\par 
\par Null variables: 
\par In method coerceCollection found:
\par \tab --> result
\par In method coerceArray found:
\par \tab --> tokens
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercer.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CommonsConfigSource.java************
\par 
\par Null checks:
\par strings == null?return null;
\par 
\par Null fields: 
\par \tab --> config
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigurationObjectFactory.java************
\par 
\par Null checks:
\par toStringMethod != null?slots.put(toStringMethod, count++);
\par mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
\par annotation != null?propertyNames = annotation.value();
\par propertyNames == null?throw new IllegalArgumentException("Method " +
\par                                                    method.toGenericString() +
\par                                                    " declares config annotation but no field name!");
\par mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
\par value != null?assignedFrom = "property: '" + propertyName + "'";
\par mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
\par value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
\par value == null?if (hasDefault) \{
\par                 value = method.getAnnotation(Default.class).value();
\par                 assignedFrom = "annotation: @Default";
\par 
\par                 logger.info("Assigning default value [\{\}] for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ value, propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par             \}
\par             else if (hasDefaultNull) \{
\par                 logger.info("Assigning null default value for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 assignedFrom = "annotation: @DefaultNull";
\par             \}
\par             else \{
\par                 // Final try: Is the method is actually callable?
\par                 if (!Modifier.isAbstract(method.getModifiers())) \{
\par                     useMethod = true;
\par                     assignedFrom = "method: '" + method.getName() + "()'";
\par                     logger.info("Using method itself for \{\} on [\{\}#\{\}()]",
\par                                 new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 \}
\par                 else \{
\par                     throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
\par                             prettyPrint(propertyNames, mappedReplacements),
\par                             method.toGenericString()));
\par                 \}
\par             \}
\par annotationValues == null?throw new IllegalArgumentException("Method " +
\par                                                method.toGenericString() +
\par                                                " declares config annotation but no field name!");
\par values == null?return "";
\par mappedReplacements != null?sb.append(" translated to [");
\par toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
\par finalValue != null?sb.append(finalValue.toString());
\par toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
\par value != null?logger.info("Assigning value [\{\}] for [\{\}] on [\{\}#\{\}()]",
\par                                     new Object[] \{ value, property, method.getDeclaringClass().getName(), method.getName() \});
\par toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
\par toStringValue == null?final StringBuilder sb = new StringBuilder();
\par 
\par Null fields: 
\par \tab --> method
\par \tab --> slots
\par \tab --> handler
\par \tab --> paramTokenList
\par \tab --> config
\par \tab --> bully
\par \tab --> properties
\par \tab --> defaultValue
\par \tab --> callbacks
\par \tab --> assignedFrom
\par \tab --> finalValue
\par 
\par Null variables: 
\par In method buildSimple found:
\par \tab --> assignedFrom
\par \tab --> value
\par In method internalBuild found:
\par \tab --> fixedMap
\par In method buildParameterized found:
\par \tab --> defaultValue
\par Null assignments: 
\par In method buildSimple found: 
\par \tab --> value
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmountUnit.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> symbol
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultCoercibles.java************
\par 
\par Null checks:
\par candidate != null?final Method valueOfMethod = candidate;
\par value == null?return value == null ? null : valueOfMethod.invoke(null, value);
\par value == null?return value == null ? null : ctor.newInstance(value);
\par value != null?return value != null ? Boolean.valueOf(value) : null;
\par value != null?return value != null ? Byte.valueOf(value) : null;
\par value != null?return value != null ? Short.valueOf(value) : null;
\par value != null?return value != null ? Integer.valueOf(value) : null;
\par value != null?return value != null ? Long.valueOf(value) : null;
\par value != null?return value != null ? Float.valueOf(value) : null;
\par value != null?return value != null ? Double.valueOf(value) : null;
\par value != null?return value != null ? URI.create(value) : null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method accept found:
\par \tab --> coercer
\par Null assignments: 
\par In method accept found: 
\par \tab --> candidate
\par \tab --> coercer
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Description.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Param.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> filterConfig
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeSpan.java************
\par 
\par Null checks:
\par unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> millis
\par \tab --> unit
\par \tab --> period
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CoercionConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config2.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config4.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigEnum.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ReplacementConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestBadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestClasses.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCollections.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestConfigurationObjectFactory.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDataAmount.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEmptyValue.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestExposeMappedReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestMultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestVariousPropertyTypes.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par \tab --> sc
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file WibbleConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 984ff7284441b0921f120dadb02903c7c623cb09 and 75f5d515ad61a3ff03cc7a88c7076a99c4a75855:
\par \tab --> Added null checks = 3
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 3
\par 
\par Reverted to commit 984ff7284441b0921f120dadb02903c7c623cb09
\par 
\par Added Bully.java to ./config-magic/ repository source files.
\par Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added Coercer.java to ./config-magic/ repository source files.
\par Added Coercible.java to ./config-magic/ repository source files.
\par Added CommonsConfigSource.java to ./config-magic/ repository source files.
\par Added Config.java to ./config-magic/ repository source files.
\par Added ConfigReplacements.java to ./config-magic/ repository source files.
\par Added ConfigSource.java to ./config-magic/ repository source files.
\par Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added DataAmount.java to ./config-magic/ repository source files.
\par Added DataAmountUnit.java to ./config-magic/ repository source files.
\par Added Default.java to ./config-magic/ repository source files.
\par Added DefaultCoercibles.java to ./config-magic/ repository source files.
\par Added DefaultNull.java to ./config-magic/ repository source files.
\par Added Description.java to ./config-magic/ repository source files.
\par Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
\par Added Param.java to ./config-magic/ repository source files.
\par Added Separator.java to ./config-magic/ repository source files.
\par Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
\par Added TimeSpan.java to ./config-magic/ repository source files.
\par Added BadConfig.java to ./config-magic/ repository source files.
\par Added CoercionConfig.java to ./config-magic/ repository source files.
\par Added Config1.java to ./config-magic/ repository source files.
\par Added Config2.java to ./config-magic/ repository source files.
\par Added Config3.java to ./config-magic/ repository source files.
\par Added Config4.java to ./config-magic/ repository source files.
\par Added Config5.java to ./config-magic/ repository source files.
\par Added ConfigEnum.java to ./config-magic/ repository source files.
\par Added EnumeratedConfig1.java to ./config-magic/ repository source files.
\par Added MultiConfig.java to ./config-magic/ repository source files.
\par Added Props.java to ./config-magic/ repository source files.
\par Added ReplacementConfig1.java to ./config-magic/ repository source files.
\par Added TestArrays.java to ./config-magic/ repository source files.
\par Added TestBadConfig.java to ./config-magic/ repository source files.
\par Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added TestClasses.java to ./config-magic/ repository source files.
\par Added TestCoercion.java to ./config-magic/ repository source files.
\par Added TestCollections.java to ./config-magic/ repository source files.
\par Added TestCommonsConfig.java to ./config-magic/ repository source files.
\par Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added TestCustomCoercion.java to ./config-magic/ repository source files.
\par Added TestDataAmount.java to ./config-magic/ repository source files.
\par Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
\par Added TestDefaultNull.java to ./config-magic/ repository source files.
\par Added TestDefaultsPresent.java to ./config-magic/ repository source files.
\par Added TestEmptyValue.java to ./config-magic/ repository source files.
\par Added TestEnums.java to ./config-magic/ repository source files.
\par Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
\par Added TestFile.java to ./config-magic/ repository source files.
\par Added TestMultiConfig.java to ./config-magic/ repository source files.
\par Added TestNoFinal.java to ./config-magic/ repository source files.
\par Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added TestTimeSpan.java to ./config-magic/ repository source files.
\par Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
\par Added Wibble.java to ./config-magic/ repository source files.
\par Added WibbleConfig.java to ./config-magic/ repository source files.
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bully.java************
\par 
\par Null checks:
\par args != null?if (args[0] instanceof Class<?>) \{
\par                         return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
\par                     \}
\par                     else if (args[0] instanceof WildcardType) \{
\par                         return coerceClass(type, (WildcardType)args[0], value);
\par                     \}
\par value == null?return null;
\par separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
\par ctor != null?result = (Collection)ctor.newInstance();
\par result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
\par coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
\par coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
\par typeCoercer == null?for (Coercible<?> coercible : coercibles) \{
\par                 final Coercer<?> coercer = coercible.accept(type);
\par                 if (coercer != null) \{
\par                     mappings.put(type, coercer);
\par                     typeCoercer = coercer;
\par                     break;
\par                 \}
\par             \}
\par coercer != null?mappings.put(type, coercer);
\par 
\par Null fields: 
\par \tab --> TYPE_COERCIBLES
\par 
\par Null variables: 
\par In method coerceCollection found:
\par \tab --> result
\par In method coerceArray found:
\par \tab --> tokens
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercer.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CommonsConfigSource.java************
\par 
\par Null checks:
\par strings == null?return null;
\par 
\par Null fields: 
\par \tab --> config
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigurationObjectFactory.java************
\par 
\par Null checks:
\par toStringMethod != null?slots.put(toStringMethod, count++);
\par mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
\par annotation != null?propertyNames = annotation.value();
\par propertyNames == null?throw new IllegalArgumentException("Method " +
\par                                                    method.toGenericString() +
\par                                                    " declares config annotation but no field name!");
\par mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
\par value != null?assignedFrom = "property: '" + propertyName + "'";
\par mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
\par value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
\par value == null?if (hasDefault) \{
\par                 value = method.getAnnotation(Default.class).value();
\par                 assignedFrom = "annotation: @Default";
\par 
\par                 logger.info("Assigning default value [\{\}] for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ value, propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par             \}
\par             else if (hasDefaultNull) \{
\par                 logger.info("Assigning null default value for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 assignedFrom = "annotation: @DefaultNull";
\par             \}
\par             else \{
\par                 // Final try: Is the method is actually callable?
\par                 if (!Modifier.isAbstract(method.getModifiers())) \{
\par                     useMethod = true;
\par                     assignedFrom = "method: '" + method.getName() + "()'";
\par                     logger.info("Using method itself for \{\} on [\{\}#\{\}()]",
\par                                 new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 \}
\par                 else \{
\par                     throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
\par                             prettyPrint(propertyNames, mappedReplacements),
\par                             method.toGenericString()));
\par                 \}
\par             \}
\par annotationValues == null?throw new IllegalArgumentException("Method " +
\par                                                method.toGenericString() +
\par                                                " declares config annotation but no field name!");
\par values == null?return "";
\par mappedReplacements != null?sb.append(" translated to [");
\par toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
\par finalValue != null?sb.append(finalValue.toString());
\par toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
\par value != null?logger.info("Assigning value [\{\}] for [\{\}] on [\{\}#\{\}()]",
\par                                     new Object[] \{ value, property, method.getDeclaringClass().getName(), method.getName() \});
\par toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
\par toStringValue == null?final StringBuilder sb = new StringBuilder();
\par 
\par Null fields: 
\par \tab --> method
\par \tab --> slots
\par \tab --> handler
\par \tab --> paramTokenList
\par \tab --> config
\par \tab --> bully
\par \tab --> properties
\par \tab --> defaultValue
\par \tab --> callbacks
\par \tab --> assignedFrom
\par \tab --> finalValue
\par 
\par Null variables: 
\par In method buildSimple found:
\par \tab --> assignedFrom
\par \tab --> value
\par In method internalBuild found:
\par \tab --> fixedMap
\par In method buildParameterized found:
\par \tab --> defaultValue
\par Null assignments: 
\par In method buildSimple found: 
\par \tab --> value
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmountUnit.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> symbol
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultCoercibles.java************
\par 
\par Null checks:
\par candidate != null?final Method valueOfMethod = candidate;
\par value == null?return value == null ? null : valueOfMethod.invoke(null, value);
\par value == null?return value == null ? null : ctor.newInstance(value);
\par value != null?return value != null ? Boolean.valueOf(value) : null;
\par value != null?return value != null ? Byte.valueOf(value) : null;
\par value != null?return value != null ? Short.valueOf(value) : null;
\par value != null?return value != null ? Integer.valueOf(value) : null;
\par value != null?return value != null ? Long.valueOf(value) : null;
\par value != null?return value != null ? Float.valueOf(value) : null;
\par value != null?return value != null ? Double.valueOf(value) : null;
\par value != null?return value != null ? URI.create(value) : null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method accept found:
\par \tab --> coercer
\par Null assignments: 
\par In method accept found: 
\par \tab --> candidate
\par \tab --> coercer
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Description.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Param.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> filterConfig
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeSpan.java************
\par 
\par Null checks:
\par unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> millis
\par \tab --> unit
\par \tab --> period
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CoercionConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config2.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config4.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigEnum.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ReplacementConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestBadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestClasses.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCollections.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestConfigurationObjectFactory.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDataAmount.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEmptyValue.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestExposeMappedReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestMultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestVariousPropertyTypes.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par \tab --> sc
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file WibbleConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of c6319c55b3b8f99f346a096c661546636235cffb and 984ff7284441b0921f120dadb02903c7c623cb09:
\par \tab --> Added null checks = 3
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 3
\par 
\par Reverted to commit c6319c55b3b8f99f346a096c661546636235cffb
\par 
\par Added Bully.java to ./config-magic/ repository source files.
\par Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added Coercer.java to ./config-magic/ repository source files.
\par Added Coercible.java to ./config-magic/ repository source files.
\par Added CommonsConfigSource.java to ./config-magic/ repository source files.
\par Added Config.java to ./config-magic/ repository source files.
\par Added ConfigReplacements.java to ./config-magic/ repository source files.
\par Added ConfigSource.java to ./config-magic/ repository source files.
\par Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added DataAmount.java to ./config-magic/ repository source files.
\par Added DataAmountUnit.java to ./config-magic/ repository source files.
\par Added Default.java to ./config-magic/ repository source files.
\par Added DefaultCoercibles.java to ./config-magic/ repository source files.
\par Added DefaultNull.java to ./config-magic/ repository source files.
\par Added Description.java to ./config-magic/ repository source files.
\par Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
\par Added Param.java to ./config-magic/ repository source files.
\par Added Separator.java to ./config-magic/ repository source files.
\par Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
\par Added TimeSpan.java to ./config-magic/ repository source files.
\par Added BadConfig.java to ./config-magic/ repository source files.
\par Added CoercionConfig.java to ./config-magic/ repository source files.
\par Added Config1.java to ./config-magic/ repository source files.
\par Added Config2.java to ./config-magic/ repository source files.
\par Added Config3.java to ./config-magic/ repository source files.
\par Added Config4.java to ./config-magic/ repository source files.
\par Added Config5.java to ./config-magic/ repository source files.
\par Added ConfigEnum.java to ./config-magic/ repository source files.
\par Added EnumeratedConfig1.java to ./config-magic/ repository source files.
\par Added MultiConfig.java to ./config-magic/ repository source files.
\par Added Props.java to ./config-magic/ repository source files.
\par Added ReplacementConfig1.java to ./config-magic/ repository source files.
\par Added TestArrays.java to ./config-magic/ repository source files.
\par Added TestBadConfig.java to ./config-magic/ repository source files.
\par Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added TestClasses.java to ./config-magic/ repository source files.
\par Added TestCoercion.java to ./config-magic/ repository source files.
\par Added TestCollections.java to ./config-magic/ repository source files.
\par Added TestCommonsConfig.java to ./config-magic/ repository source files.
\par Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added TestCustomCoercion.java to ./config-magic/ repository source files.
\par Added TestDataAmount.java to ./config-magic/ repository source files.
\par Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
\par Added TestDefaultNull.java to ./config-magic/ repository source files.
\par Added TestDefaultsPresent.java to ./config-magic/ repository source files.
\par Added TestEmptyValue.java to ./config-magic/ repository source files.
\par Added TestEnums.java to ./config-magic/ repository source files.
\par Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
\par Added TestFile.java to ./config-magic/ repository source files.
\par Added TestMultiConfig.java to ./config-magic/ repository source files.
\par Added TestNoFinal.java to ./config-magic/ repository source files.
\par Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added TestTimeSpan.java to ./config-magic/ repository source files.
\par Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
\par Added Wibble.java to ./config-magic/ repository source files.
\par Added WibbleConfig.java to ./config-magic/ repository source files.
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bully.java************
\par 
\par Null checks:
\par args != null?if (args[0] instanceof Class<?>) \{
\par                         return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
\par                     \}
\par                     else if (args[0] instanceof WildcardType) \{
\par                         return coerceClass(type, (WildcardType)args[0], value);
\par                     \}
\par value == null?return null;
\par separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
\par ctor != null?result = (Collection)ctor.newInstance();
\par result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
\par coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
\par coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
\par typeCoercer == null?for (Coercible<?> coercible : coercibles) \{
\par                 final Coercer<?> coercer = coercible.accept(type);
\par                 if (coercer != null) \{
\par                     mappings.put(type, coercer);
\par                     typeCoercer = coercer;
\par                     break;
\par                 \}
\par             \}
\par coercer != null?mappings.put(type, coercer);
\par 
\par Null fields: 
\par \tab --> TYPE_COERCIBLES
\par 
\par Null variables: 
\par In method coerceCollection found:
\par \tab --> result
\par In method coerceArray found:
\par \tab --> tokens
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercer.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CommonsConfigSource.java************
\par 
\par Null checks:
\par strings == null?return null;
\par 
\par Null fields: 
\par \tab --> config
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigurationObjectFactory.java************
\par 
\par Null checks:
\par toStringMethod != null?slots.put(toStringMethod, count++);
\par mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
\par annotation != null?propertyNames = annotation.value();
\par propertyNames == null?throw new IllegalArgumentException("Method " +
\par                                                    method.toGenericString() +
\par                                                    " declares config annotation but no field name!");
\par mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
\par value != null?assignedFrom = "property: '" + propertyName + "'";
\par mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
\par value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
\par value == null?if (hasDefault) \{
\par                 value = method.getAnnotation(Default.class).value();
\par                 assignedFrom = "annotation: @Default";
\par 
\par                 logger.info("Assigning default value [\{\}] for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ value, propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par             \}
\par             else if (hasDefaultNull) \{
\par                 logger.info("Assigning null default value for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 assignedFrom = "annotation: @DefaultNull";
\par             \}
\par             else \{
\par                 // Final try: Is the method is actually callable?
\par                 if (!Modifier.isAbstract(method.getModifiers())) \{
\par                     useMethod = true;
\par                     assignedFrom = "method: '" + method.getName() + "()'";
\par                     logger.info("Using method itself for \{\} on [\{\}#\{\}()]",
\par                                 new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 \}
\par                 else \{
\par                     throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
\par                             prettyPrint(propertyNames, mappedReplacements),
\par                             method.toGenericString()));
\par                 \}
\par             \}
\par annotationValues == null?throw new IllegalArgumentException("Method " +
\par                                                method.toGenericString() +
\par                                                " declares config annotation but no field name!");
\par values == null?return "";
\par mappedReplacements != null?sb.append(" translated to [");
\par toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
\par finalValue != null?sb.append(finalValue.toString());
\par toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
\par value != null?logger.info("Assigning value [\{\}] for [\{\}] on [\{\}#\{\}()]",
\par                                     new Object[] \{ value, property, method.getDeclaringClass().getName(), method.getName() \});
\par toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
\par toStringValue == null?final StringBuilder sb = new StringBuilder();
\par 
\par Null fields: 
\par \tab --> method
\par \tab --> slots
\par \tab --> handler
\par \tab --> paramTokenList
\par \tab --> config
\par \tab --> bully
\par \tab --> properties
\par \tab --> defaultValue
\par \tab --> callbacks
\par \tab --> assignedFrom
\par \tab --> finalValue
\par 
\par Null variables: 
\par In method buildSimple found:
\par \tab --> assignedFrom
\par \tab --> value
\par In method internalBuild found:
\par \tab --> fixedMap
\par In method buildParameterized found:
\par \tab --> defaultValue
\par Null assignments: 
\par In method buildSimple found: 
\par \tab --> value
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmountUnit.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> symbol
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultCoercibles.java************
\par 
\par Null checks:
\par candidate != null?final Method valueOfMethod = candidate;
\par value == null?return value == null ? null : valueOfMethod.invoke(null, value);
\par value == null?return value == null ? null : ctor.newInstance(value);
\par value != null?return value != null ? Boolean.valueOf(value) : null;
\par value != null?return value != null ? Byte.valueOf(value) : null;
\par value != null?return value != null ? Short.valueOf(value) : null;
\par value != null?return value != null ? Integer.valueOf(value) : null;
\par value != null?return value != null ? Long.valueOf(value) : null;
\par value != null?return value != null ? Float.valueOf(value) : null;
\par value != null?return value != null ? Double.valueOf(value) : null;
\par value != null?return value != null ? URI.create(value) : null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method accept found:
\par \tab --> coercer
\par Null assignments: 
\par In method accept found: 
\par \tab --> candidate
\par \tab --> coercer
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Description.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Param.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> filterConfig
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeSpan.java************
\par 
\par Null checks:
\par unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> millis
\par \tab --> unit
\par \tab --> period
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CoercionConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config2.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config4.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigEnum.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ReplacementConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestBadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestClasses.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCollections.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestConfigurationObjectFactory.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDataAmount.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEmptyValue.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestExposeMappedReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestMultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestVariousPropertyTypes.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par \tab --> sc
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file WibbleConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 768eaa4eba0e50886f50d0371f9945dadd34aec5 and c6319c55b3b8f99f346a096c661546636235cffb:
\par \tab --> Added null checks = 3
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 3
\par 
\par Reverted to commit 768eaa4eba0e50886f50d0371f9945dadd34aec5
\par 
\par Added Bully.java to ./config-magic/ repository source files.
\par Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added Coercer.java to ./config-magic/ repository source files.
\par Added Coercible.java to ./config-magic/ repository source files.
\par Added CommonsConfigSource.java to ./config-magic/ repository source files.
\par Added Config.java to ./config-magic/ repository source files.
\par Added ConfigReplacements.java to ./config-magic/ repository source files.
\par Added ConfigSource.java to ./config-magic/ repository source files.
\par Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added DataAmount.java to ./config-magic/ repository source files.
\par Added DataAmountUnit.java to ./config-magic/ repository source files.
\par Added Default.java to ./config-magic/ repository source files.
\par Added DefaultCoercibles.java to ./config-magic/ repository source files.
\par Added DefaultNull.java to ./config-magic/ repository source files.
\par Added Description.java to ./config-magic/ repository source files.
\par Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
\par Added Param.java to ./config-magic/ repository source files.
\par Added Separator.java to ./config-magic/ repository source files.
\par Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
\par Added TimeSpan.java to ./config-magic/ repository source files.
\par Added BadConfig.java to ./config-magic/ repository source files.
\par Added CoercionConfig.java to ./config-magic/ repository source files.
\par Added Config1.java to ./config-magic/ repository source files.
\par Added Config2.java to ./config-magic/ repository source files.
\par Added Config3.java to ./config-magic/ repository source files.
\par Added Config4.java to ./config-magic/ repository source files.
\par Added Config5.java to ./config-magic/ repository source files.
\par Added ConfigEnum.java to ./config-magic/ repository source files.
\par Added EnumeratedConfig1.java to ./config-magic/ repository source files.
\par Added MultiConfig.java to ./config-magic/ repository source files.
\par Added Props.java to ./config-magic/ repository source files.
\par Added ReplacementConfig1.java to ./config-magic/ repository source files.
\par Added TestArrays.java to ./config-magic/ repository source files.
\par Added TestBadConfig.java to ./config-magic/ repository source files.
\par Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added TestClasses.java to ./config-magic/ repository source files.
\par Added TestCoercion.java to ./config-magic/ repository source files.
\par Added TestCollections.java to ./config-magic/ repository source files.
\par Added TestCommonsConfig.java to ./config-magic/ repository source files.
\par Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added TestCustomCoercion.java to ./config-magic/ repository source files.
\par Added TestDataAmount.java to ./config-magic/ repository source files.
\par Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
\par Added TestDefaultNull.java to ./config-magic/ repository source files.
\par Added TestDefaultsPresent.java to ./config-magic/ repository source files.
\par Added TestEmptyValue.java to ./config-magic/ repository source files.
\par Added TestEnums.java to ./config-magic/ repository source files.
\par Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
\par Added TestFile.java to ./config-magic/ repository source files.
\par Added TestMultiConfig.java to ./config-magic/ repository source files.
\par Added TestNoFinal.java to ./config-magic/ repository source files.
\par Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added TestTimeSpan.java to ./config-magic/ repository source files.
\par Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
\par Added Wibble.java to ./config-magic/ repository source files.
\par Added WibbleConfig.java to ./config-magic/ repository source files.
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bully.java************
\par 
\par Null checks:
\par args != null?if (args[0] instanceof Class<?>) \{
\par                         return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
\par                     \}
\par                     else if (args[0] instanceof WildcardType) \{
\par                         return coerceClass(type, (WildcardType)args[0], value);
\par                     \}
\par value == null?return null;
\par separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
\par ctor != null?result = (Collection)ctor.newInstance();
\par result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
\par coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
\par coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
\par typeCoercer == null?for (Coercible<?> coercible : coercibles) \{
\par                 final Coercer<?> coercer = coercible.accept(type);
\par                 if (coercer != null) \{
\par                     mappings.put(type, coercer);
\par                     typeCoercer = coercer;
\par                     break;
\par                 \}
\par             \}
\par coercer != null?mappings.put(type, coercer);
\par 
\par Null fields: 
\par \tab --> TYPE_COERCIBLES
\par 
\par Null variables: 
\par In method coerceCollection found:
\par \tab --> result
\par In method coerceArray found:
\par \tab --> tokens
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercer.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CommonsConfigSource.java************
\par 
\par Null checks:
\par strings == null?return null;
\par 
\par Null fields: 
\par \tab --> config
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigurationObjectFactory.java************
\par 
\par Null checks:
\par toStringMethod != null?slots.put(toStringMethod, count++);
\par mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
\par annotation != null?propertyNames = annotation.value();
\par propertyNames == null?throw new IllegalArgumentException("Method " +
\par                                                    method.toGenericString() +
\par                                                    " declares config annotation but no field name!");
\par mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
\par value != null?assignedFrom = "property: '" + propertyName + "'";
\par mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
\par value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
\par value == null?if (hasDefault) \{
\par                 value = method.getAnnotation(Default.class).value();
\par                 assignedFrom = "annotation: @Default";
\par 
\par                 logger.info("Assigning default value [\{\}] for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ value, propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par             \}
\par             else if (hasDefaultNull) \{
\par                 logger.info("Assigning null default value for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 assignedFrom = "annotation: @DefaultNull";
\par             \}
\par             else \{
\par                 // Final try: Is the method is actually callable?
\par                 if (!Modifier.isAbstract(method.getModifiers())) \{
\par                     useMethod = true;
\par                     assignedFrom = "method: '" + method.getName() + "()'";
\par                     logger.info("Using method itself for \{\} on [\{\}#\{\}()]",
\par                                 new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 \}
\par                 else \{
\par                     throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
\par                             prettyPrint(propertyNames, mappedReplacements),
\par                             method.toGenericString()));
\par                 \}
\par             \}
\par annotationValues == null?throw new IllegalArgumentException("Method " +
\par                                                method.toGenericString() +
\par                                                " declares config annotation but no field name!");
\par values == null?return "";
\par mappedReplacements != null?sb.append(" translated to [");
\par toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
\par finalValue != null?sb.append(finalValue.toString());
\par toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
\par value != null?logger.info("Assigning value [\{\}] for [\{\}] on [\{\}#\{\}()]",
\par                                     new Object[] \{ value, property, method.getDeclaringClass().getName(), method.getName() \});
\par toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
\par toStringValue == null?final StringBuilder sb = new StringBuilder();
\par 
\par Null fields: 
\par \tab --> method
\par \tab --> slots
\par \tab --> handler
\par \tab --> paramTokenList
\par \tab --> config
\par \tab --> bully
\par \tab --> properties
\par \tab --> defaultValue
\par \tab --> callbacks
\par \tab --> assignedFrom
\par \tab --> finalValue
\par 
\par Null variables: 
\par In method buildSimple found:
\par \tab --> assignedFrom
\par \tab --> value
\par In method internalBuild found:
\par \tab --> fixedMap
\par In method buildParameterized found:
\par \tab --> defaultValue
\par Null assignments: 
\par In method buildSimple found: 
\par \tab --> value
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmountUnit.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> symbol
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultCoercibles.java************
\par 
\par Null checks:
\par candidate != null?final Method valueOfMethod = candidate;
\par value == null?return value == null ? null : valueOfMethod.invoke(null, value);
\par value == null?return value == null ? null : ctor.newInstance(value);
\par value != null?return value != null ? Boolean.valueOf(value) : null;
\par value != null?return value != null ? Byte.valueOf(value) : null;
\par value != null?return value != null ? Short.valueOf(value) : null;
\par value != null?return value != null ? Integer.valueOf(value) : null;
\par value != null?return value != null ? Long.valueOf(value) : null;
\par value != null?return value != null ? Float.valueOf(value) : null;
\par value != null?return value != null ? Double.valueOf(value) : null;
\par value != null?return value != null ? URI.create(value) : null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method accept found:
\par \tab --> coercer
\par Null assignments: 
\par In method accept found: 
\par \tab --> candidate
\par \tab --> coercer
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Description.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Param.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> filterConfig
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeSpan.java************
\par 
\par Null checks:
\par unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> millis
\par \tab --> unit
\par \tab --> period
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CoercionConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config2.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config4.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigEnum.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ReplacementConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestBadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestClasses.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCollections.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestConfigurationObjectFactory.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDataAmount.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEmptyValue.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestExposeMappedReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestMultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestVariousPropertyTypes.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par \tab --> sc
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file WibbleConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of c41fd8b0e607ba7e66c6a7eca7500cc9cfd13161 and 768eaa4eba0e50886f50d0371f9945dadd34aec5:
\par \tab --> Added null checks = 3
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 3
\par 
\par Reverted to commit c41fd8b0e607ba7e66c6a7eca7500cc9cfd13161
\par 
\par Added Bully.java to ./config-magic/ repository source files.
\par Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added Coercer.java to ./config-magic/ repository source files.
\par Added Coercible.java to ./config-magic/ repository source files.
\par Added CommonsConfigSource.java to ./config-magic/ repository source files.
\par Added Config.java to ./config-magic/ repository source files.
\par Added ConfigReplacements.java to ./config-magic/ repository source files.
\par Added ConfigSource.java to ./config-magic/ repository source files.
\par Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added DataAmount.java to ./config-magic/ repository source files.
\par Added DataAmountUnit.java to ./config-magic/ repository source files.
\par Added Default.java to ./config-magic/ repository source files.
\par Added DefaultCoercibles.java to ./config-magic/ repository source files.
\par Added DefaultNull.java to ./config-magic/ repository source files.
\par Added Description.java to ./config-magic/ repository source files.
\par Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
\par Added Param.java to ./config-magic/ repository source files.
\par Added Separator.java to ./config-magic/ repository source files.
\par Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
\par Added TimeSpan.java to ./config-magic/ repository source files.
\par Added BadConfig.java to ./config-magic/ repository source files.
\par Added CoercionConfig.java to ./config-magic/ repository source files.
\par Added Config1.java to ./config-magic/ repository source files.
\par Added Config2.java to ./config-magic/ repository source files.
\par Added Config3.java to ./config-magic/ repository source files.
\par Added Config4.java to ./config-magic/ repository source files.
\par Added Config5.java to ./config-magic/ repository source files.
\par Added ConfigEnum.java to ./config-magic/ repository source files.
\par Added EnumeratedConfig1.java to ./config-magic/ repository source files.
\par Added MultiConfig.java to ./config-magic/ repository source files.
\par Added Props.java to ./config-magic/ repository source files.
\par Added ReplacementConfig1.java to ./config-magic/ repository source files.
\par Added TestArrays.java to ./config-magic/ repository source files.
\par Added TestBadConfig.java to ./config-magic/ repository source files.
\par Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
\par Added TestClasses.java to ./config-magic/ repository source files.
\par Added TestCoercion.java to ./config-magic/ repository source files.
\par Added TestCollections.java to ./config-magic/ repository source files.
\par Added TestCommonsConfig.java to ./config-magic/ repository source files.
\par Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
\par Added TestCustomCoercion.java to ./config-magic/ repository source files.
\par Added TestDataAmount.java to ./config-magic/ repository source files.
\par Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
\par Added TestDefaultNull.java to ./config-magic/ repository source files.
\par Added TestDefaultsPresent.java to ./config-magic/ repository source files.
\par Added TestEmptyValue.java to ./config-magic/ repository source files.
\par Added TestEnums.java to ./config-magic/ repository source files.
\par Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
\par Added TestFile.java to ./config-magic/ repository source files.
\par Added TestMultiConfig.java to ./config-magic/ repository source files.
\par Added TestNoFinal.java to ./config-magic/ repository source files.
\par Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
\par Added TestTimeSpan.java to ./config-magic/ repository source files.
\par Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
\par Added Wibble.java to ./config-magic/ repository source files.
\par Added WibbleConfig.java to ./config-magic/ repository source files.
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bully.java************
\par 
\par Null checks:
\par args != null?if (args[0] instanceof Class<?>) \{
\par                         return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
\par                     \}
\par                     else if (args[0] instanceof WildcardType) \{
\par                         return coerceClass(type, (WildcardType)args[0], value);
\par                     \}
\par value == null?return null;
\par separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
\par ctor != null?result = (Collection)ctor.newInstance();
\par result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
\par coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
\par coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
\par typeCoercer == null?for (Coercible<?> coercible : coercibles) \{
\par                 final Coercer<?> coercer = coercible.accept(type);
\par                 if (coercer != null) \{
\par                     mappings.put(type, coercer);
\par                     typeCoercer = coercer;
\par                     break;
\par                 \}
\par             \}
\par coercer != null?mappings.put(type, coercer);
\par 
\par Null fields: 
\par \tab --> TYPE_COERCIBLES
\par 
\par Null variables: 
\par In method coerceCollection found:
\par \tab --> result
\par In method coerceArray found:
\par \tab --> tokens
\par Null assignments: 
\par ************ For file CaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par In method accept found: 
\par \tab --> values
\par ************ For file Coercer.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Coercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CommonsConfigSource.java************
\par 
\par Null checks:
\par strings == null?return null;
\par 
\par Null fields: 
\par \tab --> config
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigurationObjectFactory.java************
\par 
\par Null checks:
\par toStringMethod != null?slots.put(toStringMethod, count++);
\par mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
\par annotation != null?propertyNames = annotation.value();
\par propertyNames == null?throw new IllegalArgumentException("Method " +
\par                                                    method.toGenericString() +
\par                                                    " declares config annotation but no field name!");
\par mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
\par value != null?assignedFrom = "property: '" + propertyName + "'";
\par mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
\par value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
\par value == null?if (hasDefault) \{
\par                 value = method.getAnnotation(Default.class).value();
\par                 assignedFrom = "annotation: @Default";
\par 
\par                 logger.info("Assigning default value [\{\}] for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ value, propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par             \}
\par             else if (hasDefaultNull) \{
\par                 logger.info("Assigning null default value for \{\} on [\{\}#\{\}()]",
\par                             new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 assignedFrom = "annotation: @DefaultNull";
\par             \}
\par             else \{
\par                 // Final try: Is the method is actually callable?
\par                 if (!Modifier.isAbstract(method.getModifiers())) \{
\par                     useMethod = true;
\par                     assignedFrom = "method: '" + method.getName() + "()'";
\par                     logger.info("Using method itself for \{\} on [\{\}#\{\}()]",
\par                                 new Object[] \{ propertyNames, method.getDeclaringClass().getName(), method.getName() \});
\par                 \}
\par                 else \{
\par                     throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
\par                             prettyPrint(propertyNames, mappedReplacements),
\par                             method.toGenericString()));
\par                 \}
\par             \}
\par annotationValues == null?throw new IllegalArgumentException("Method " +
\par                                                method.toGenericString() +
\par                                                " declares config annotation but no field name!");
\par values == null?return "";
\par mappedReplacements != null?sb.append(" translated to [");
\par toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
\par finalValue != null?sb.append(finalValue.toString());
\par toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
\par value != null?logger.info("Assigning value [\{\}] for [\{\}] on [\{\}#\{\}()]",
\par                                     new Object[] \{ value, property, method.getDeclaringClass().getName(), method.getName() \});
\par toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
\par toStringValue == null?final StringBuilder sb = new StringBuilder();
\par 
\par Null fields: 
\par \tab --> method
\par \tab --> slots
\par \tab --> handler
\par \tab --> paramTokenList
\par \tab --> config
\par \tab --> bully
\par \tab --> properties
\par \tab --> defaultValue
\par \tab --> callbacks
\par \tab --> assignedFrom
\par \tab --> finalValue
\par 
\par Null variables: 
\par In method buildSimple found:
\par \tab --> assignedFrom
\par \tab --> value
\par In method internalBuild found:
\par \tab --> fixedMap
\par In method buildParameterized found:
\par \tab --> defaultValue
\par Null assignments: 
\par In method buildSimple found: 
\par \tab --> value
\par ************ For file DataAmount.java************
\par 
\par Null checks:
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> unit
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DataAmountUnit.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> symbol
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Default.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DefaultCoercibles.java************
\par 
\par Null checks:
\par candidate != null?final Method valueOfMethod = candidate;
\par value == null?return value == null ? null : valueOfMethod.invoke(null, value);
\par value == null?return value == null ? null : ctor.newInstance(value);
\par value != null?return value != null ? Boolean.valueOf(value) : null;
\par value != null?return value != null ? Byte.valueOf(value) : null;
\par value != null?return value != null ? Short.valueOf(value) : null;
\par value != null?return value != null ? Integer.valueOf(value) : null;
\par value != null?return value != null ? Long.valueOf(value) : null;
\par value != null?return value != null ? Float.valueOf(value) : null;
\par value != null?return value != null ? Double.valueOf(value) : null;
\par value != null?return value != null ? URI.create(value) : null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method accept found:
\par \tab --> coercer
\par Null assignments: 
\par In method accept found: 
\par \tab --> candidate
\par \tab --> coercer
\par ************ For file DefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Description.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ExactMatchEnumCoercible.java************
\par 
\par Null checks:
\par value == null?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Param.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Separator.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> filterConfig
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimplePropertyConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> props
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeSpan.java************
\par 
\par Null checks:
\par unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
\par obj == null?return false;
\par 
\par Null fields: 
\par \tab --> millis
\par \tab --> unit
\par \tab --> period
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CoercionConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config2.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config3.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config4.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Config5.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ConfigEnum.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EnumeratedConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Props.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ReplacementConfig1.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestArrays.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestBadConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCaseInsensitiveEnumCoercible.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestClasses.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestCollections.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestCommonsConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestConfigurationObjectFactory.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestCustomCoercion.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDataAmount.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultCoercibles.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestDefaultNull.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestDefaultsPresent.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEmptyValue.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestEnums.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestExposeMappedReplacements.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestFile.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestMultiConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> this.c
\par ************ For file TestNoFinal.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestServletFilterConfigSource.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TestTimeSpan.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cof
\par 
\par Null variables: 
\par Null assignments: 
\par In method tearDown found: 
\par \tab --> cof
\par ************ For file TestVariousPropertyTypes.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> c
\par \tab --> sc
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Wibble.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file WibbleConfig.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 9dc3ffba50458263f343660dccc6956c089f2cca and c41fd8b0e607ba7e66c6a7eca7500cc9cfd13161:
\par \tab --> Added null checks = 3
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 3
\par Null checks found in initial commit -- added at creation of the repository.
\par ****Analysis complete for first commit****
\par Brian McCallister added null count = 3 in repository config-magic
\par Brian McCallister removed null count = 0 in repository config-magic
\par Brian McCallister deref count = 3 in repository config-magic
\par GitAPIException thrown!
\par Cannot revert commit '9dc3ffba50458263f343660dccc6956c089f2cca' because it has 0 parents, only commits with exactly one parent are supported}{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid3429338 
\par }\pard\plain \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid3562586 
\par }{\*\themedata 504b030414000600080000002100e9de0fbfff0000001c020000130000005b436f6e74656e745f54797065735d2e786d6cac91cb4ec3301045f748fc83e52d4a
9cb2400825e982c78ec7a27cc0c8992416c9d8b2a755fbf74cd25442a820166c2cd933f79e3be372bd1f07b5c3989ca74aaff2422b24eb1b475da5df374fd9ad
5689811a183c61a50f98f4babebc2837878049899a52a57be670674cb23d8e90721f90a4d2fa3802cb35762680fd800ecd7551dc18eb899138e3c943d7e503b6
b01d583deee5f99824e290b4ba3f364eac4a430883b3c092d4eca8f946c916422ecab927f52ea42b89a1cd59c254f919b0e85e6535d135a8de20f20b8c12c3b0
0c895fcf6720192de6bf3b9e89ecdbd6596cbcdd8eb28e7c365ecc4ec1ff1460f53fe813d3cc7f5b7f020000ffff0300504b030414000600080000002100a5d6
a7e7c0000000360100000b0000005f72656c732f2e72656c73848fcf6ac3300c87ef85bd83d17d51d2c31825762fa590432fa37d00e1287f68221bdb1bebdb4f
c7060abb0884a4eff7a93dfeae8bf9e194e720169aaa06c3e2433fcb68e1763dbf7f82c985a4a725085b787086a37bdbb55fbc50d1a33ccd311ba548b6309512
0f88d94fbc52ae4264d1c910d24a45db3462247fa791715fd71f989e19e0364cd3f51652d73760ae8fa8c9ffb3c330cc9e4fc17faf2ce545046e37944c69e462
a1a82fe353bd90a865aad41ed0b5b8f9d6fd010000ffff0300504b0304140006000800000021006b799616830000008a0000001c0000007468656d652f746865
6d652f7468656d654d616e616765722e786d6c0ccc4d0ac3201040e17da17790d93763bb284562b2cbaebbf600439c1a41c7a0d29fdbd7e5e38337cedf14d59b
4b0d592c9c070d8a65cd2e88b7f07c2ca71ba8da481cc52c6ce1c715e6e97818c9b48d13df49c873517d23d59085adb5dd20d6b52bd521ef2cdd5eb9246a3d8b
4757e8d3f729e245eb2b260a0238fd010000ffff0300504b03041400060008000000210030dd4329a8060000a41b0000160000007468656d652f7468656d652f
7468656d65312e786d6cec594f6fdb3614bf0fd87720746f6327761a07758ad8b19b2d4d1bc46e871e698996d850a240d2497d1bdae38001c3ba618715d86d87
615b8116d8a5fb34d93a6c1dd0afb0475292c5585e9236d88aad3e2412f9e3fbff1e1fa9abd7eec70c1d1221294fda5efd72cd4324f1794093b0eddd1ef62fad
79482a9c0498f184b4bd2991deb58df7dfbb8ad755446282607d22d771db8b944ad79796a40fc3585ee62949606ecc458c15bc8a702910f808e8c66c69b9565b
5d8a314d3c94e018c8de1a8fa94fd05093f43672e23d06af89927ac06762a049136785c10607758d9053d965021d62d6f6804fc08f86e4bef210c352c144dbab
999fb7b4717509af678b985ab0b6b4ae6f7ed9ba6c4170b06c788a705430adf71bad2b5b057d03606a1ed7ebf5babd7a41cf00b0ef83a6569632cd467faddec9
699640f6719e76b7d6ac355c7c89feca9cccad4ea7d36c65b258a206641f1b73f8b5da6a6373d9c11b90c537e7f08dce66b7bbeae00dc8e257e7f0fd2badd586
8b37a088d1e4600ead1ddaef67d40bc898b3ed4af81ac0d76a197c86826828a24bb318f3442d8ab518dfe3a20f000d6458d104a9694ac6d88728eee2782428d6
0cf03ac1a5193be4cbb921cd0b495fd054b5bd0f530c1931a3f7eaf9f7af9e3f45c70f9e1d3ff8e9f8e1c3e3073f5a42ceaa6d9c84e5552fbffdeccfc71fa33f
9e7ef3f2d117d57859c6fffac327bffcfc793510d26726ce8b2f9ffcf6ecc98baf3efdfdbb4715f04d814765f890c644a29be408edf3181433567125272371be
15c308d3f28acd249438c19a4b05fd9e8a1cf4cd296699771c393ac4b5e01d01e5a30a787d72cf1178108989a2159c77a2d801ee72ce3a5c545a6147f32a9979
3849c26ae66252c6ed637c58c5bb8b13c7bfbd490a75330f4b47f16e441c31f7184e140e494214d273fc80900aedee52ead87597fa824b3e56e82e451d4c2b4d
32a423279a668bb6690c7e9956e90cfe766cb37b077538abd27a8b1cba48c80acc2a841f12e698f13a9e281c57911ce298950d7e03aba84ac8c154f8655c4f2a
f074481847bd804859b5e696007d4b4edfc150b12addbecba6b18b148a1e54d1bc81392f23b7f84137c2715a851dd0242a633f900710a218ed715505dfe56e86
e877f0034e16bafb0e258ebb4faf06b769e888340b103d331115bebc4eb813bf83291b63624a0d1475a756c734f9bbc2cd28546ecbe1e20a3794ca175f3fae90
fb6d2dd99bb07b55e5ccf68942bd0877b23c77b908e8db5f9db7f024d9239010f35bd4bbe2fcae387bfff9e2bc289f2fbe24cfaa301468dd8bd846dbb4ddf1c2
ae7b4c191ba8292337a469bc25ec3d411f06f53a73e224c5292c8de0516732307070a1c0660d125c7d44553488700a4d7bddd3444299910e254ab984c3a219ae
a4adf1d0f82b7bd46cea4388ad1c12ab5d1ed8e1153d9c9f350a3246aad01c6873462b9ac05999ad5cc988826eafc3acae853a33b7ba11cd1445875ba1b236b1
399483c90bd560b0b0263435085a21b0f22a9cf9356b38ec6046026d77eba3dc2dc60b17e92219e180643ed27acffba86e9c94c7ca9c225a0f1b0cfae0788ad5
4adc5a9aec1b703b8b93caec1a0bd8e5de7b132fe5113cf312503b998e2c2927274bd051db6b35979b1ef271daf6c6704e86c73805af4bdd476216c26593af84
0dfb5393d964f9cc9bad5c313709ea70f561ed3ea7b053075221d51696910d0d339585004b34272bff7213cc7a510a5454a3b349b1b206c1f0af490176745d4b
c663e2abb2b34b23da76f6352ba57ca2881844c1111ab189d8c7e07e1daaa04f40255c77988aa05fe06e4e5bdb4cb9c5394bbaf28d98c1d971ccd20867e556a7
689ec9166e0a522183792b8907ba55ca6e943bbf2a26e52f48957218ffcf54d1fb09dc3eac04da033e5c0d0b8c74a6b43d2e54c4a10aa511f5fb021a07533b20
5ae07e17a621a8e082dafc17e450ffb739676998b48643a4daa7211214f623150942f6a02c99e83b85583ddbbb2c4996113211551257a656ec1139246ca86be0
aadedb3d1441a89b6a929501833b197fee7b9641a3503739e57c732a59b1f7da1cf8a73b1f9bcca0945b874d4393dbbf10b1680f66bbaa5d6f96e77b6f59113d
316bb31a795600b3d256d0cad2fe354538e7566b2bd69cc6cbcd5c38f0e2bcc63058344429dc2121fd07f63f2a7c66bf76e80d75c8f7a1b622f878a18941d840
545fb28d07d205d20e8ea071b283369834296bdaac75d256cb37eb0bee740bbe278cad253b8bbfcf69eca23973d939b97891c6ce2cecd8da8e2d343578f6648a
c2d0383fc818c798cf64e52f597c740f1cbd05df0c264c49134cf09d4a60e8a107260f20f92d47b374e32f000000ffff0300504b030414000600080000002100
0dd1909fb60000001b010000270000007468656d652f7468656d652f5f72656c732f7468656d654d616e616765722e786d6c2e72656c73848f4d0ac2301484f7
8277086f6fd3ba109126dd88d0add40384e4350d363f2451eced0dae2c082e8761be9969bb979dc9136332de3168aa1a083ae995719ac16db8ec8e4052164e89
d93b64b060828e6f37ed1567914b284d262452282e3198720e274a939cd08a54f980ae38a38f56e422a3a641c8bbd048f7757da0f19b017cc524bd62107bd500
1996509affb3fd381a89672f1f165dfe514173d9850528a2c6cce0239baa4c04ca5bbabac4df000000ffff0300504b01022d0014000600080000002100e9de0f
bfff0000001c0200001300000000000000000000000000000000005b436f6e74656e745f54797065735d2e786d6c504b01022d0014000600080000002100a5d6
a7e7c0000000360100000b00000000000000000000000000300100005f72656c732f2e72656c73504b01022d00140006000800000021006b799616830000008a
0000001c00000000000000000000000000190200007468656d652f7468656d652f7468656d654d616e616765722e786d6c504b01022d00140006000800000021
0030dd4329a8060000a41b00001600000000000000000000000000d60200007468656d652f7468656d652f7468656d65312e786d6c504b01022d001400060008
00000021000dd1909fb60000001b0100002700000000000000000000000000b20900007468656d652f7468656d652f5f72656c732f7468656d654d616e616765722e786d6c2e72656c73504b050600000000050005005d010000ad0a00000000}
{\*\colorschememapping 3c3f786d6c2076657273696f6e3d22312e302220656e636f64696e673d225554462d3822207374616e64616c6f6e653d22796573223f3e0d0a3c613a636c724d
617020786d6c6e733a613d22687474703a2f2f736368656d61732e6f70656e786d6c666f726d6174732e6f72672f64726177696e676d6c2f323030362f6d6169
6e22206267313d226c743122207478313d22646b3122206267323d226c743222207478323d22646b322220616363656e74313d22616363656e74312220616363
656e74323d22616363656e74322220616363656e74333d22616363656e74332220616363656e74343d22616363656e74342220616363656e74353d22616363656e74352220616363656e74363d22616363656e74362220686c696e6b3d22686c696e6b2220666f6c486c696e6b3d22666f6c486c696e6b222f3e}
{\*\latentstyles\lsdstimax267\lsdlockeddef0\lsdsemihiddendef1\lsdunhideuseddef1\lsdqformatdef0\lsdprioritydef99{\lsdlockedexcept \lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority0 \lsdlocked0 Normal;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 1;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 2;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 3;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 4;
\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 5;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 6;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 7;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 8;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 9;
\lsdpriority39 \lsdlocked0 toc 1;\lsdpriority39 \lsdlocked0 toc 2;\lsdpriority39 \lsdlocked0 toc 3;\lsdpriority39 \lsdlocked0 toc 4;\lsdpriority39 \lsdlocked0 toc 5;\lsdpriority39 \lsdlocked0 toc 6;\lsdpriority39 \lsdlocked0 toc 7;
\lsdpriority39 \lsdlocked0 toc 8;\lsdpriority39 \lsdlocked0 toc 9;\lsdqformat1 \lsdpriority35 \lsdlocked0 caption;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority10 \lsdlocked0 Title;\lsdpriority1 \lsdlocked0 Default Paragraph Font;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority11 \lsdlocked0 Subtitle;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority22 \lsdlocked0 Strong;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority20 \lsdlocked0 Emphasis;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority59 \lsdlocked0 Table Grid;\lsdunhideused0 \lsdlocked0 Placeholder Text;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority1 \lsdlocked0 No Spacing;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 1;\lsdunhideused0 \lsdlocked0 Revision;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority34 \lsdlocked0 List Paragraph;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority29 \lsdlocked0 Quote;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority30 \lsdlocked0 Intense Quote;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority19 \lsdlocked0 Subtle Emphasis;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority21 \lsdlocked0 Intense Emphasis;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority31 \lsdlocked0 Subtle Reference;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority32 \lsdlocked0 Intense Reference;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority33 \lsdlocked0 Book Title;\lsdpriority37 \lsdlocked0 Bibliography;\lsdqformat1 \lsdpriority39 \lsdlocked0 TOC Heading;}}{\*\datastore 010500000200000018000000
4d73786d6c322e534158584d4c5265616465722e362e3000000000000000000000060000
d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff090006000000000000000000000001000000010000000000000000100000feffffff00000000feffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffdfffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffff52006f006f007400200045006e00740072007900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000500ffffffffffffffffffffffff0c6ad98892f1d411a65f0040963251e50000000000000000000000005058
11a50f29d001feffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000105000000000000}}