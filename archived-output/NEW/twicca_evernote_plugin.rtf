{\rtf1\adeflang1025\ansi\ansicpg1252\uc1\adeff31507\deff0\stshfdbch31506\stshfloch31506\stshfhich31506\stshfbi31507\deflang1033\deflangfe1033\themelang1033\themelangfe0\themelangcs0{\fonttbl{\f0\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fbidi \fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fbidi \fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f3\fbidi \froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}{\f4\fbidi \fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Helvetica;}
{\f5\fbidi \fmodern\fcharset0\fprq1{\*\panose 02070409020205020404}Courier;}{\f6\fbidi \froman\fcharset0\fprq2{\*\panose 02020603040505020304}Tms Rmn;}{\f7\fbidi \fswiss\fcharset0\fprq2{\*\panose 020b0604020202030204}Helv;}
{\f8\fbidi \froman\fcharset0\fprq2{\*\panose 02040503060506020304}New York;}{\f9\fbidi \fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}System;}{\f10\fbidi \fnil\fcharset2\fprq2{\*\panose 05000000000000000000}Wingdings;}
{\f11\fbidi \fmodern\fcharset128\fprq1{\*\panose 02020609040205080304}MS Mincho{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}{\f12\fbidi \fnil\fcharset129\fprq1{\*\panose 02030600000101010101}Batang{\*\falt \'b9\'d9\'c5\'c1};}
{\f13\fbidi \fnil\fcharset134\fprq2{\*\panose 02010600030101010101}SimSun{\*\falt \'cb\'ce\'cc\'e5};}{\f14\fbidi \fnil\fcharset136\fprq2{\*\panose 02020500000000000000}PMingLiU{\*\falt \'b7\'73\'b2\'d3\'a9\'fa\'c5\'e9};}
{\f15\fbidi \fmodern\fcharset128\fprq1{\*\panose 020b0609070205080204}MS Gothic{\*\falt \'82\'6c\'82\'72 \'83\'53\'83\'56\'83\'62\'83\'4e};}{\f16\fbidi \fmodern\fcharset129\fprq1{\*\panose 020b0600000101010101}Dotum{\*\falt \'b5\'b8\'bf\'f2};}
{\f17\fbidi \fmodern\fcharset134\fprq1{\*\panose 02010609060101010101}SimHei{\*\falt \'ba\'da\'cc\'e5};}{\f18\fbidi \fmodern\fcharset136\fprq1{\*\panose 02020509000000000000}MingLiU{\*\falt \'b2\'d3\'a9\'fa\'c5\'e9};}
{\f19\fbidi \froman\fcharset128\fprq1{\*\panose 02020609040305080305}Mincho{\*\falt \'96\'be\'92\'a9};}{\f20\fbidi \froman\fcharset129\fprq1{\*\panose 020b0600000101010101}Gulim{\*\falt \'b1\'bc\'b8\'b2};}
{\f21\fbidi \froman\fcharset0\fprq2{\*\panose 02040604050505020304}Century;}{\f22\fbidi \froman\fcharset222\fprq2{\*\panose 02020603050405020304}Angsana New;}{\f23\fbidi \froman\fcharset222\fprq2{\*\panose 020b0304020202020204}Cordia New;}
{\f24\fbidi \froman\fcharset1\fprq2{\*\panose 02040503050203030202}Mangal;}{\f25\fbidi \froman\fcharset1\fprq2{\*\panose 020b0604020202020204}Latha;}{\f26\fbidi \froman\fcharset0\fprq2{\*\panose 010a0502050306030303}Sylfaen;}
{\f27\fbidi \froman\fcharset1\fprq2{\*\panose 020b0502040204020203}Vrinda;}{\f28\fbidi \froman\fcharset1\fprq2{\*\panose 020b0502040204020203}Raavi;}{\f29\fbidi \froman\fcharset1\fprq2{\*\panose 020b0502040204020203}Shruti;}
{\f30\fbidi \froman\fcharset1\fprq2{\*\panose 00000400000000000000}Sendnya;}{\f31\fbidi \froman\fcharset1\fprq2{\*\panose 020b0502040204020203}Gautami;}{\f32\fbidi \froman\fcharset1\fprq2{\*\panose 020b0502040204020203}Tunga;}
{\f33\fbidi \froman\fcharset1\fprq2{\*\panose 03080600000000000000}Estrangelo Edessa;}{\f34\fbidi \froman\fcharset1\fprq2{\*\panose 02040503050406030204}Cambria Math;}{\f35\fbidi \froman\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial Unicode MS;}
{\f36\fbidi \froman\fcharset0\fprq2{\*\panose 02040503050406030204}Cambria;}{\f37\fbidi \fswiss\fcharset0\fprq2{\*\panose 020f0502020204030204}Calibri;}{\f38\fbidi \fswiss\fcharset0\fprq2{\*\panose 020b0604030504040204}Tahoma;}
{\f39\fbidi \fmodern\fcharset0\fprq1{\*\panose 020b0609020204030204}Consolas;}{\flomajor\f31500\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\fdbmajor\f31501\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fhimajor\f31502\fbidi \froman\fcharset0\fprq2{\*\panose 02040503050406030204}Cambria;}
{\fbimajor\f31503\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\flominor\f31504\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\fdbminor\f31505\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fhiminor\f31506\fbidi \fswiss\fcharset0\fprq2{\*\panose 020f0502020204030204}Calibri;}
{\fbiminor\f31507\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f40\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\f41\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\f43\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\f44\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\f45\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f46\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\f47\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\f48\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\f50\fbidi \fswiss\fcharset238\fprq2 Arial CE;}{\f51\fbidi \fswiss\fcharset204\fprq2 Arial Cyr;}
{\f53\fbidi \fswiss\fcharset161\fprq2 Arial Greek;}{\f54\fbidi \fswiss\fcharset162\fprq2 Arial Tur;}{\f55\fbidi \fswiss\fcharset177\fprq2 Arial (Hebrew);}{\f56\fbidi \fswiss\fcharset178\fprq2 Arial (Arabic);}
{\f57\fbidi \fswiss\fcharset186\fprq2 Arial Baltic;}{\f58\fbidi \fswiss\fcharset163\fprq2 Arial (Vietnamese);}{\f60\fbidi \fmodern\fcharset238\fprq1 Courier New CE;}{\f61\fbidi \fmodern\fcharset204\fprq1 Courier New Cyr;}
{\f63\fbidi \fmodern\fcharset161\fprq1 Courier New Greek;}{\f64\fbidi \fmodern\fcharset162\fprq1 Courier New Tur;}{\f65\fbidi \fmodern\fcharset177\fprq1 Courier New (Hebrew);}{\f66\fbidi \fmodern\fcharset178\fprq1 Courier New (Arabic);}
{\f67\fbidi \fmodern\fcharset186\fprq1 Courier New Baltic;}{\f68\fbidi \fmodern\fcharset163\fprq1 Courier New (Vietnamese);}{\f152\fbidi \fmodern\fcharset0\fprq1 MS Mincho Western{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}
{\f150\fbidi \fmodern\fcharset238\fprq1 MS Mincho CE{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}{\f151\fbidi \fmodern\fcharset204\fprq1 MS Mincho Cyr{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}
{\f153\fbidi \fmodern\fcharset161\fprq1 MS Mincho Greek{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}{\f154\fbidi \fmodern\fcharset162\fprq1 MS Mincho Tur{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}
{\f157\fbidi \fmodern\fcharset186\fprq1 MS Mincho Baltic{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}{\f301\fbidi \froman\fcharset204\fprq2 Sylfaen Cyr;}{\f303\fbidi \froman\fcharset161\fprq2 Sylfaen Greek;}
{\f400\fbidi \froman\fcharset238\fprq2 Cambria CE;}{\f401\fbidi \froman\fcharset204\fprq2 Cambria Cyr;}{\f403\fbidi \froman\fcharset161\fprq2 Cambria Greek;}{\f404\fbidi \froman\fcharset162\fprq2 Cambria Tur;}
{\f407\fbidi \froman\fcharset186\fprq2 Cambria Baltic;}{\f408\fbidi \froman\fcharset163\fprq2 Cambria (Vietnamese);}{\f410\fbidi \fswiss\fcharset238\fprq2 Calibri CE;}{\f411\fbidi \fswiss\fcharset204\fprq2 Calibri Cyr;}
{\f413\fbidi \fswiss\fcharset161\fprq2 Calibri Greek;}{\f414\fbidi \fswiss\fcharset162\fprq2 Calibri Tur;}{\f417\fbidi \fswiss\fcharset186\fprq2 Calibri Baltic;}{\f418\fbidi \fswiss\fcharset163\fprq2 Calibri (Vietnamese);}
{\f430\fbidi \fmodern\fcharset238\fprq1 Consolas CE;}{\f431\fbidi \fmodern\fcharset204\fprq1 Consolas Cyr;}{\f433\fbidi \fmodern\fcharset161\fprq1 Consolas Greek;}{\f434\fbidi \fmodern\fcharset162\fprq1 Consolas Tur;}
{\f437\fbidi \fmodern\fcharset186\fprq1 Consolas Baltic;}{\f438\fbidi \fmodern\fcharset163\fprq1 Consolas (Vietnamese);}{\flomajor\f31508\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\flomajor\f31509\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\flomajor\f31511\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\flomajor\f31512\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\flomajor\f31513\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\flomajor\f31514\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\flomajor\f31515\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\flomajor\f31516\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fdbmajor\f31518\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fdbmajor\f31519\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\fdbmajor\f31521\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fdbmajor\f31522\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fdbmajor\f31523\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\fdbmajor\f31524\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fdbmajor\f31525\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fdbmajor\f31526\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\fhimajor\f31528\fbidi \froman\fcharset238\fprq2 Cambria CE;}{\fhimajor\f31529\fbidi \froman\fcharset204\fprq2 Cambria Cyr;}{\fhimajor\f31531\fbidi \froman\fcharset161\fprq2 Cambria Greek;}{\fhimajor\f31532\fbidi \froman\fcharset162\fprq2 Cambria Tur;}
{\fhimajor\f31535\fbidi \froman\fcharset186\fprq2 Cambria Baltic;}{\fhimajor\f31536\fbidi \froman\fcharset163\fprq2 Cambria (Vietnamese);}{\fbimajor\f31538\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\fbimajor\f31539\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fbimajor\f31541\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fbimajor\f31542\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\fbimajor\f31543\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fbimajor\f31544\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fbimajor\f31545\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\fbimajor\f31546\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\flominor\f31548\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\flominor\f31549\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\flominor\f31551\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\flominor\f31552\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\flominor\f31553\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\flominor\f31554\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\flominor\f31555\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\flominor\f31556\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\fdbminor\f31558\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fdbminor\f31559\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fdbminor\f31561\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}
{\fdbminor\f31562\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fdbminor\f31563\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fdbminor\f31564\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\fdbminor\f31565\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fdbminor\f31566\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fhiminor\f31568\fbidi \fswiss\fcharset238\fprq2 Calibri CE;}
{\fhiminor\f31569\fbidi \fswiss\fcharset204\fprq2 Calibri Cyr;}{\fhiminor\f31571\fbidi \fswiss\fcharset161\fprq2 Calibri Greek;}{\fhiminor\f31572\fbidi \fswiss\fcharset162\fprq2 Calibri Tur;}
{\fhiminor\f31575\fbidi \fswiss\fcharset186\fprq2 Calibri Baltic;}{\fhiminor\f31576\fbidi \fswiss\fcharset163\fprq2 Calibri (Vietnamese);}{\fbiminor\f31578\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\fbiminor\f31579\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fbiminor\f31581\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fbiminor\f31582\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\fbiminor\f31583\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fbiminor\f31584\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fbiminor\f31585\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\fbiminor\f31586\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;
\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\*\defchp \f31506\fs22 }{\*\defpap 
\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 }\noqfpromote {\stylesheet{\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 
\af31507\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext0 \sqformat \spriority0 \styrsid5506299 Normal;}{\*\cs10 \additive \ssemihidden \sunhideused \spriority1 Default Paragraph Font;}{\*
\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tblind0\tblindtype3\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv \ql \li0\ri0\sa200\sl276\slmult1
\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af31507\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext11 \ssemihidden \sunhideused Normal Table;}{
\s15\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af31507\afs21\alang1025 \ltrch\fcs0 \f39\fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 
\sbasedon0 \snext15 \slink16 \sunhideused \styrsid5506299 Plain Text;}{\*\cs16 \additive \rtlch\fcs1 \af0\afs21 \ltrch\fcs0 \f39\fs21 \sbasedon10 \slink15 \slocked \styrsid5506299 Plain Text Char;}}{\*\revtbl {Unknown;}}{\*\rsidtbl \rsid1461392\rsid5267074\rsid5506299}
{\mmathPr\mmathFont34\mbrkBin0\mbrkBinSub0\msmallFrac0\mdispDef1\mlMargin0\mrMargin0\mdefJc1\mwrapIndent1440\mintLim0\mnaryLim1}{\info{\author BrittJ}{\operator BrittJ}{\creatim\yr2015\mo1\dy12\hr12\min57}{\revtim\yr2015\mo1\dy12\hr13}{\version1}
{\edmins3}{\nofpages766}{\nofwords156363}{\nofchars891274}{\*\company Microsoft}{\nofcharsws1045546}{\vern49167}}{\*\xmlnstbl {\xmlns1 http://schemas.microsoft.com/office/word/2003/wordml}}
\paperw12240\paperh15840\margl1501\margr1502\margt1440\margb1440\gutter0\ltrsect 
\widowctrl\ftnbj\aenddoc\trackmoves0\trackformatting1\donotembedsysfont1\relyonvml0\donotembedlingdata0\grfdocevents0\validatexml1\showplaceholdtext0\ignoremixedcontent0\saveinvalidxml0\showxmlerrors1\noxlattoyen
\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\formshade\horzdoc\dgmargin\dghspace180\dgvspace180\dghorigin1501\dgvorigin1440\dghshow1\dgvshow1
\jexpand\viewkind1\viewscale100\pgbrdrhead\pgbrdrfoot\splytwnine\ftnlytwnine\htmautsp\nolnhtadjtbl\useltbaln\alntblind\lytcalctblwd\lyttblrtgr\lnbrkrule\nobrkwrptbl\snaptogridincell\allowfieldendsel\wrppunct
\asianbrkrule\rsidroot5506299\newtblstyruls\nogrowautofit\usenormstyforlist\noindnmbrts\felnbrelev\nocxsptable\indrlsweleven\noafcnsttbl\afelev\utinl\hwelev\spltpgpar\notcvasp\notbrkcnstfrctbl\notvatxbx\krnprsnet\cachedcolbal \nouicompat \fet0
{\*\wgrffmtfilter 2450}\nofeaturethrottle1\ilfomacatclnup0\ltrpar \sectd \ltrsect\linex0\endnhere\sectlinegrid360\sectdefaultcl\sectrsid13859528\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2
\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6
\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang 
{\pntxtb (}{\pntxta )}}\pard\plain \ltrpar\s15\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid5506299 \rtlch\fcs1 \af31507\afs21\alang1025 \ltrch\fcs0 
\f39\fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid5506299\charrsid13859528 0
\par Takuo Kitame is responsible for commit 70ec4e663402ef2f7fd1b4c0639b4e6cf0647046
\par Takuo Kitame is responsible for commit 711b0db0d9600fa779488cfa802e444c132c780b
\par Takuo Kitame is responsible for commit 7b34550b2c322638912b5e5bec8c02433d4ab576
\par Takuo Kitame is responsible for commit 63199b2ad618941dfe41ac9abf3652ef3d8ecdf0
\par Takuo Kitame is responsible for commit fd8a719facac7b436acf8afc9a08adc04e0510d7
\par Takuo Kitame is responsible for commit cd75dd3bc43a43a9a5ee563fd40852ab1ffae0d7
\par Takuo Kitame is responsible for commit 6fe5c33ba114672f68d8749ad3ea83dd52f0c221
\par Takuo Kitame is responsible for commit 10ad77d542845c34cee913cc23b9c44d559fa09a
\par Takuo Kitame is responsible for commit f7d8d4de4f103f51afd954a0f9a2eaa92ed61989
\par Takuo Kitame is responsible for commit b0292c83b699066339f7109f0d418034481e2f09
\par Takuo Kitame is responsible for commit 40dd22dab05ac49d06319504eaf8526b7b9d765b
\par Takuo Kitame is responsible for commit 8423b796f496d92028314c49d57348546b94f510
\par Takuo Kitame is responsible for commit 775d80688e322aa8dbf52dab6f4d503b61dc7436
\par Takuo Kitame is responsible for commit e5591eb9df268f8b8131b92b52944d86d881ae41
\par Takuo Kitame is responsible for commit 05bd5896ad6b568eec37f97fdc37d4acf6aee1f0
\par Takuo Kitame is responsible for commit 53fa6a0bebd093c1b43a0e2ef7e008b9ebdf05c4
\par Takuo Kitame is responsible for commit 3f135f43413d3353367565ad566ac0b5346f4833
\par Takuo Kitame is responsible for commit 88a02f165575f4e8f7cdd719da455d96d9d1f9a5
\par Takuo Kitame is responsible for commit c62a452962e55bca197812903a427ec12cb162c5
\par Takuo Kitame is responsible for commit c2466fe310951a2223e86f71268952524123545c
\par Takuo Kitame is responsible for commit 6c2adf66bcb107331b262bfaaa5cf3acde5c1ebd
\par Takuo Kitame is responsible for commit d2ad26d6ac90e7c547791304acfc1db58018df98
\par Takuo Kitame is responsible for commit 831195d63a713069d14a833834fb6f555a808a3e
\par Takuo Kitame is responsible for commit 2f47f93b2535fde8cb6533e6415546db55866eee
\par Takuo Kitame is responsible for commit 0a7ce278f0dcdb81b48d965effb42e9c2e8852ae
\par Takuo Kitame is responsible for commit 60f9195a089bb6010e0acb74cfcd3c31ce5d0238
\par Takuo Kitame is responsible for commit f33d6fb8bfb8e614916d478ad5cd92ff6f68242b
\par Takuo Kitame is responsible for commit cbf706fbcc5f4c35da6219009bf18a7f51cba932
\par Takuo Kitame is responsible for commit 0668574688f11c4e883950fdb0cdb060bad5542d
\par Takuo Kitame is responsible for commit 797c961aa001ef343113040a0888abfcfd630b92
\par Takuo Kitame is responsible for commit 7a7a7fb460dc30691dbf71a7385116d1a8c2a588
\par Takuo Kitame is responsible for commit f867c0f0bb46f389eb030fcee0d5a64e994ee040
\par Takuo Kitame is responsible for commit 4eeb78ab5ddae577c2200d0dd40a223cb4b6bd46
\par Takuo Kitame is responsible for commit c25a62c3c5e7ac2ce05ffc58f7c1810fb79b7158
\par Takuo Kitame is responsible for commit 6e425b05f8dc3cc33ef466fd390233e06bc422ce
\par Takuo Kitame is responsible for commit d6d26fa1a685ed0e27416a5d8c85a1466bbf85b8
\par Takuo Kitame is responsible for commit fffde938d7090e245b23e7822f785dfb441fd7a7
\par Takuo Kitame is responsible for commit 3f75d5543588e6cbb138caf52c4da7c39b706986
\par Takuo Kitame is responsible for commit b55456df21e970f2cfda664ff84d651a45cf7b49
\par Takuo Kitame is responsible for commit 3a9c5d3c3eb7e3a3ab70f625cb2c80d778dc51fb
\par Takuo Kitame is responsible for commit 4e58d3468cc21c85256890403e8b4a3cffd4e8b2
\par Takuo Kitame is responsible for commit 413bcf586d9bdbef2675f35336fda7d715d778c4
\par Takuo Kitame is responsible for commit c38c4af0cb5a0a8a8a852e2e5583e6a41bd75870
\par Takuo Kitame is responsible for commit 3ea883186ff846a917bf52f3bbef260d48b17d41
\par Takuo Kitame is responsible for commit fde93faa3400d3d5348b9966551b68d5f2b2db3f
\par Takuo Kitame is responsible for commit 088f07af4432cb0dfa9ff377ecbc0320c82bac38
\par Takuo Kitame is responsible for commit 1b98e4d44845c21dde2336ecf1c84f5888ab5d6e
\par Takuo Kitame is responsible for commit 58b37338ea7e3e02070018d1d701d211b7b8be2b
\par Takuo Kitame is responsible for commit 995bdf7621d392ccd4b69221463d17f324e6fc46
\par Takuo Kitame is responsible for commit 8ef53445ae9073149a5f3600af6bf2cf74c57d8a
\par Takuo Kitame is responsible for commit d63eee9670fd4eaf5d995561650a00f2909fb92a
\par Takuo Kitame is responsible for commit 9f5f2b4958de4dda229d0a58e0f996b8c08ebfe0
\par Takuo Kitame is responsible for commit c59c624cf55282fb8d866e3c73bb6ea025472607
\par Takuo Kitame is responsible for commit 87a9fdb3b58d14be73385d3df4a11feedf8d2439
\par Takuo Kitame is responsible for commit 2f15d1eb1172c908c8b5808c07a2b9325d9ca4bc
\par Takuo Kitame is responsible for commit f596cc60dd3f6cf634a88476d9f4ba0f33024083
\par Takuo Kitame is responsible for commit bdfaf73ae8e99fd905c9f03747d5ebe3584dacf7
\par Takuo Kitame is responsible for commit 80cbe192517b2a9448e732622ba4acc4c011da3d
\par Takuo Kitame is responsible for commit a4ebd9f28cc47a1f1f16f45cb2b865dd29a3f7aa
\par Takuo Kitame is responsible for commit f905bb1f1b76757625bf8e1df34ccdab14f07644
\par Takuo Kitame is responsible for commit 1c49c438ef71a789cf64d4e53182ab29cc47426d
\par Takuo Kitame is responsible for commit a57618f56d58a9ad249a39b50cf6b014ef291fd2
\par Takuo Kitame is responsible for commit 6be2cc01c5d15b2dd3829e5c0cb20ce0133163e0
\par Takuo Kitame is responsible for commit ade73087d4ba7a1f0e1f2111f605b6b825a364cd
\par Takuo Kitame is responsible for commit a2971c0c3ed77cac82ee13f858ba565652c88123
\par Takuo Kitame is responsible for commit 7edd0e335d1bd7b2b87477506cf0a5a41eaa60db
\par Takuo Kitame is responsible for commit ea02a655666d6be8cd8303d354c88facf4838ad6
\par Takuo Kitame is responsible for commit 259d75b23e6c6d6b8e5e1c90c7c7eed7049eb980
\par Takuo Kitame is responsible for commit c2a46e653478594721128c80c0e7ac2eacafcaf8
\par Takuo Kitame is responsible for commit cfa0a400e408d83b9d3128278f58fd8f28a41700
\par Takuo Kitame is responsible for commit 92986b6f92e54d5b13782c45a4515b77c93acc36
\par Takuo Kitame is responsible for commit 6886f0d3d18700254a9dbecc41f57454cf20e8d6
\par Takuo Kitame is responsible for commit 8e97483270e69df4e35ef43e0ed1e1a814b909ce
\par Takuo Kitame is responsible for commit 05c67257a622c92d3daf49055235a8616ceb1741
\par Takuo Kitame is responsible for commit db2229f074a5ff4fc8e3158ac698651318a01611
\par Takuo Kitame is responsible for commit 082df9098fff4bcfe33f4bd868af8f96573cf0af
\par Takuo Kitame is responsible for commit 3dd38bd2db98b1d6cb86dd6156ae12215fe93c4c
\par Takuo Kitame is responsible for commit b5008b5d2abb508aa07cba4a6b6fb89aab12a3dc
\par Takuo Kitame is responsible for commit 06e423c034ee8d4eb4709a15fd5a10026cac9c73
\par Takuo Kitame is responsible for commit c84ffb28eca9b16dd41e883a35e354c3bcccbd18
\par Takuo Kitame is responsible for commit e87b606cad71f228a3a7830bbfead2a971a42c01
\par Takuo Kitame is responsible for commit 7ec5c2aa83d53319d36630a881920afab119334e
\par Takuo Kitame is responsible for commit 34d90562e8de42e6a581dec9ec0bb76f6144da7c
\par Takuo Kitame is responsible for commit 33954e111fb457624e8aedc9f6ea03e1f6ce6865
\par Takuo Kitame is responsible for commit 6b64c8c1df5667f919bd709561a4ec91f9dcedd6
\par Takuo Kitame is responsible for commit 0a3335c6ee54d57e6c7b08e3a4e65916db275b47
\par Takuo Kitame is responsible for commit ad3c6a5987411d1d6a0666b950f4534c051a0be9
\par Takuo Kitame is responsible for commit f81ca153213f58cc486cb4f7c7f7d23dddb8c931
\par Takuo Kitame is responsible for commit fd0cb8164640fc132fc5314d5621be868f5ba608
\par Takuo Kitame is responsible for commit eb36509601876477d5fdd8caf82986119f747027
\par Takuo Kitame is responsible for commit 461f3cff58cb92a5369aa0ca0255ed7a19b7e6c1
\par Takuo Kitame is responsible for commit 337b18a9bd91849a7bd3f8c35d9a06284a6f2a55
\par Added ApplicationInfo.java to ./twicca_evernote_plugin/ repository source files.
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TEvernoteHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added AuthenticationResult.java to ./twicca_evernote_plugin/ repository source files.
\par Added EvernoteOAuthActivity.java to ./twicca_evernote_plugin/ repository source files.
\par Added EvernoteSession.java to ./twicca_evernote_plugin/ repository source files.
\par Added EvernoteAuthToken.java to ./twicca_evernote_plugin/ repository source files.
\par Added YinxiangApi.java to ./twicca_evernote_plugin/ repository source files.
\par Added TimeUtils.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added MultiAutoCompleteEditTextPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added NotebookPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par 
\par Reverted to commit 70ec4e663402ef2f7fd1b4c0639b4e6cf0647046
\par 
\par Added ApplicationInfo.java to ./twicca_evernote_plugin/ repository source files.
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TEvernoteHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added AuthenticationResult.java to ./twicca_evernote_plugin/ repository source files.
\par Added EvernoteOAuthActivity.java to ./twicca_evernote_plugin/ repository source files.
\par Added EvernoteSession.java to ./twicca_evernote_plugin/ repository source files.
\par Added EvernoteAuthToken.java to ./twicca_evernote_plugin/ repository source files.
\par Added YinxiangApi.java to ./twicca_evernote_plugin/ repository source files.
\par Added TimeUtils.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added MultiAutoCompleteEditTextPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added NotebookPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AuthenticationResult.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EvernoteSession.java************
\par 
\par Null checks:
\par authenticationResult != null?return authenticationResult.getAuthToken();
\par EvernoteOAuthActivity.authToken != null?EvernoteAuthToken token = EvernoteOAuthActivity.authToken;
\par 
\par Null fields: 
\par \tab --> applicationInfo
\par \tab --> authenticationResult
\par 
\par Null variables: 
\par Null assignments: 
\par In method logOut found: 
\par \tab --> authenticationResult
\par ************ For file YinxiangApi.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par         transport.setCustomHeader(header.getKey(), header.getValue());
\par       \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par buffer == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par param != null?ex.setParameter(param);
\par message != null?ex.setMessage(message);
\par charset == null?charset = Charset.forName(enc);
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mSession
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mContext
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par ************ For file ApplicationInfo.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TEvernoteHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file AuthenticationResult.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EvernoteOAuthActivity.java************
\par 
\par Null checks:
\par savedInstanceState != null?evernoteHost = savedInstanceState.getString("evernoteHost");
\par consumerKey == null?Intent intent = getIntent();
\par requestToken != null?OAuthService service = createService();
\par verifierString == null?Log.i(TAG, "User did not authorize access");
\par 
\par Null fields: 
\par \tab --> evernoteHost
\par \tab --> consumerKey
\par \tab --> consumerSecret
\par \tab --> requestToken
\par \tab --> requestTokenSecret
\par \tab --> startedAuthentication
\par \tab --> mWebView
\par \tab --> authToken
\par \tab --> mAuthorizationUrl
\par 
\par Null variables: 
\par In method completeAuth found:
\par \tab --> accessToken
\par Null assignments: 
\par In method onResume found: 
\par \tab --> authToken
\par In method reset found: 
\par \tab --> authToken
\par ************ For file EvernoteSession.java************
\par 
\par Null checks:
\par authenticationResult != null?return authenticationResult.getAuthToken();
\par EvernoteOAuthActivity.authToken != null?EvernoteAuthToken token = EvernoteOAuthActivity.authToken;
\par 
\par Null fields: 
\par \tab --> applicationInfo
\par \tab --> authenticationResult
\par 
\par Null variables: 
\par Null assignments: 
\par In method logOut found: 
\par \tab --> authenticationResult
\par ************ For file EvernoteAuthToken.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> noteStoreUrl
\par \tab --> webApiUrlPrefix
\par \tab --> userId
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file YinxiangApi.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeUtils.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par         transport.setCustomHeader(header.getKey(), header.getValue());
\par       \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par buffer == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par param != null?ex.setParameter(param);
\par message != null?ex.setMessage(message);
\par charset == null?charset = Charset.forName(enc);
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par mToastMessage != null?Toast.makeText(mContext, mToastMessage, Toast.LENGTH_LONG).show();
\par getAuthToken() != null?refreshAuth();
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mTweetURL
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mSession
\par \tab --> mContext
\par \tab --> mHandler
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par Null assignments: 
\par In method doUpload found: 
\par \tab --> mToastMessage
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par \tab --> mSpinner
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEditTags
\par \tab --> mSession
\par \tab --> mEvernoteTags
\par \tab --> mPrefs
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mTweetId
\par \tab --> cacheManager
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mSession
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mContext
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par 
\par Diff of 711b0db0d9600fa779488cfa802e444c132c780b and 70ec4e663402ef2f7fd1b4c0639b4e6cf0647046:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 711b0db0d9600fa779488cfa802e444c132c780b
\par 
\par Added ApplicationInfo.java to ./twicca_evernote_plugin/ repository source files.
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TEvernoteHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added AuthenticationResult.java to ./twicca_evernote_plugin/ repository source files.
\par Added EvernoteOAuthActivity.java to ./twicca_evernote_plugin/ repository source files.
\par Added EvernoteSession.java to ./twicca_evernote_plugin/ repository source files.
\par Added EvernoteAuthToken.java to ./twicca_evernote_plugin/ repository source files.
\par Added YinxiangApi.java to ./twicca_evernote_plugin/ repository source files.
\par Added TimeUtils.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added MultiAutoCompleteEditTextPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added NotebookPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EvernoteSession.java************
\par 
\par Null checks:
\par authenticationResult != null?return authenticationResult.getAuthToken();
\par EvernoteOAuthActivity.authToken != null?EvernoteAuthToken token = EvernoteOAuthActivity.authToken;
\par 
\par Null fields: 
\par \tab --> applicationInfo
\par \tab --> authenticationResult
\par 
\par Null variables: 
\par Null assignments: 
\par In method logOut found: 
\par \tab --> authenticationResult
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par         transport.setCustomHeader(header.getKey(), header.getValue());
\par       \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par buffer == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par param != null?ex.setParameter(param);
\par message != null?ex.setMessage(message);
\par charset == null?charset = Charset.forName(enc);
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file ApplicationInfo.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file TEvernoteHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file EvernoteOAuthActivity.java************
\par 
\par Null checks:
\par savedInstanceState != null?evernoteHost = savedInstanceState.getString("evernoteHost");
\par consumerKey == null?Intent intent = getIntent();
\par requestToken != null?OAuthService service = createService();
\par verifierString == null?Log.i(TAG, "User did not authorize access");
\par 
\par Null fields: 
\par \tab --> evernoteHost
\par \tab --> consumerKey
\par \tab --> consumerSecret
\par \tab --> requestToken
\par \tab --> requestTokenSecret
\par \tab --> startedAuthentication
\par \tab --> mWebView
\par \tab --> authToken
\par \tab --> mAuthorizationUrl
\par 
\par Null variables: 
\par In method completeAuth found:
\par \tab --> accessToken
\par Null assignments: 
\par In method onResume found: 
\par \tab --> authToken
\par In method reset found: 
\par \tab --> authToken
\par ************ For file EvernoteAuthToken.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> noteStoreUrl
\par \tab --> webApiUrlPrefix
\par \tab --> userId
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeUtils.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par mToastMessage != null?Toast.makeText(mContext, mToastMessage, Toast.LENGTH_LONG).show();
\par getAuthToken() != null?refreshAuth();
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mTweetURL
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mSession
\par \tab --> mContext
\par \tab --> mHandler
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par Null assignments: 
\par In method doUpload found: 
\par \tab --> mToastMessage
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par \tab --> mSpinner
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEditTags
\par \tab --> mSession
\par \tab --> mEvernoteTags
\par \tab --> mPrefs
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mTweetId
\par \tab --> cacheManager
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ApplicationInfo.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TEvernoteHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file AuthenticationResult.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EvernoteOAuthActivity.java************
\par 
\par Null checks:
\par savedInstanceState != null?evernoteHost = savedInstanceState.getString("evernoteHost");
\par consumerKey == null?Intent intent = getIntent();
\par requestToken != null?OAuthService service = createService();
\par verifierString == null?Log.i(TAG, "User did not authorize access");
\par 
\par Null fields: 
\par \tab --> evernoteHost
\par \tab --> consumerKey
\par \tab --> consumerSecret
\par \tab --> requestToken
\par \tab --> requestTokenSecret
\par \tab --> startedAuthentication
\par \tab --> mWebView
\par \tab --> authToken
\par \tab --> mAuthorizationUrl
\par 
\par Null variables: 
\par In method completeAuth found:
\par \tab --> accessToken
\par Null assignments: 
\par In method onResume found: 
\par \tab --> authToken
\par In method reset found: 
\par \tab --> authToken
\par ************ For file EvernoteSession.java************
\par 
\par Null checks:
\par authenticationResult != null?return authenticationResult.getAuthToken();
\par EvernoteOAuthActivity.authToken != null?EvernoteAuthToken token = EvernoteOAuthActivity.authToken;
\par 
\par Null fields: 
\par \tab --> applicationInfo
\par \tab --> authenticationResult
\par 
\par Null variables: 
\par Null assignments: 
\par In method logOut found: 
\par \tab --> authenticationResult
\par ************ For file EvernoteAuthToken.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> noteStoreUrl
\par \tab --> webApiUrlPrefix
\par \tab --> userId
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file YinxiangApi.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeUtils.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par         transport.setCustomHeader(header.getKey(), header.getValue());
\par       \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par buffer == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par param != null?ex.setParameter(param);
\par message != null?ex.setMessage(message);
\par charset == null?charset = Charset.forName(enc);
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par mToastMessage != null?Toast.makeText(mContext, mToastMessage, Toast.LENGTH_LONG).show();
\par getAuthToken() != null?refreshAuth();
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mTweetURL
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mSession
\par \tab --> mContext
\par \tab --> mHandler
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par Null assignments: 
\par In method doUpload found: 
\par \tab --> mToastMessage
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par \tab --> mSpinner
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEditTags
\par \tab --> mSession
\par \tab --> mEvernoteTags
\par \tab --> mPrefs
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mTweetId
\par \tab --> cacheManager
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mSession
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mContext
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par 
\par Diff of 7b34550b2c322638912b5e5bec8c02433d4ab576 and 711b0db0d9600fa779488cfa802e444c132c780b:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 7b34550b2c322638912b5e5bec8c02433d4ab576
\par 
\par Added ApplicationInfo.java to ./twicca_evernote_plugin/ repository source files.
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TEvernoteHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added AuthenticationResult.java to ./twicca_evernote_plugin/ repository source files.
\par Added EvernoteOAuthActivity.java to ./twicca_evernote_plugin/ repository source files.
\par Added EvernoteSession.java to ./twicca_evernote_plugin/ repository source files.
\par Added EvernoteAuthToken.java to ./twicca_evernote_plugin/ repository source files.
\par Added YinxiangApi.java to ./twicca_evernote_plugin/ repository source files.
\par Added TimeUtils.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added MultiAutoCompleteEditTextPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added NotebookPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file EvernoteSession.java************
\par 
\par Null checks:
\par authenticationResult != null?return authenticationResult.getAuthToken();
\par EvernoteOAuthActivity.authToken != null?EvernoteAuthToken token = EvernoteOAuthActivity.authToken;
\par 
\par Null fields: 
\par \tab --> applicationInfo
\par \tab --> authenticationResult
\par 
\par Null variables: 
\par Null assignments: 
\par In method logOut found: 
\par \tab --> authenticationResult
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file EvernoteOAuthActivity.java************
\par 
\par Null checks:
\par savedInstanceState != null?evernoteHost = savedInstanceState.getString("evernoteHost");
\par consumerKey == null?Intent intent = getIntent();
\par requestToken != null?OAuthService service = createService();
\par verifierString == null?Log.i(TAG, "User did not authorize access");
\par 
\par Null fields: 
\par \tab --> evernoteHost
\par \tab --> consumerKey
\par \tab --> consumerSecret
\par \tab --> requestToken
\par \tab --> requestTokenSecret
\par \tab --> startedAuthentication
\par \tab --> mWebView
\par \tab --> authToken
\par \tab --> mAuthorizationUrl
\par 
\par Null variables: 
\par In method completeAuth found:
\par \tab --> accessToken
\par Null assignments: 
\par In method onResume found: 
\par \tab --> authToken
\par In method reset found: 
\par \tab --> authToken
\par ************ For file TimeUtils.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file ApplicationInfo.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file TEvernoteHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file EvernoteOAuthActivity.java************
\par 
\par Null checks:
\par savedInstanceState != null?evernoteHost = savedInstanceState.getString("evernoteHost");
\par consumerKey == null?Intent intent = getIntent();
\par requestToken != null?OAuthService service = createService();
\par verifierString == null?Log.i(TAG, "User did not authorize access");
\par 
\par Null fields: 
\par \tab --> evernoteHost
\par \tab --> consumerKey
\par \tab --> consumerSecret
\par \tab --> requestToken
\par \tab --> requestTokenSecret
\par \tab --> startedAuthentication
\par \tab --> mWebView
\par \tab --> authToken
\par \tab --> mAuthorizationUrl
\par 
\par Null variables: 
\par In method completeAuth found:
\par \tab --> accessToken
\par Null assignments: 
\par In method onResume found: 
\par \tab --> authToken
\par In method reset found: 
\par \tab --> authToken
\par ************ For file EvernoteAuthToken.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> noteStoreUrl
\par \tab --> webApiUrlPrefix
\par \tab --> userId
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeUtils.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par mToastMessage != null?Toast.makeText(mContext, mToastMessage, Toast.LENGTH_LONG).show();
\par getAuthToken() != null?refreshAuth();
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mTweetURL
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mSession
\par \tab --> mContext
\par \tab --> mHandler
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par Null assignments: 
\par In method doUpload found: 
\par \tab --> mToastMessage
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par \tab --> mSpinner
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEditTags
\par \tab --> mSession
\par \tab --> mEvernoteTags
\par \tab --> mPrefs
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mTweetId
\par \tab --> cacheManager
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ApplicationInfo.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TEvernoteHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file AuthenticationResult.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EvernoteOAuthActivity.java************
\par 
\par Null checks:
\par savedInstanceState != null?evernoteHost = savedInstanceState.getString("evernoteHost");
\par consumerKey == null?Intent intent = getIntent();
\par requestToken != null?OAuthService service = createService();
\par verifierString == null?Log.i(TAG, "User did not authorize access");
\par 
\par Null fields: 
\par \tab --> evernoteHost
\par \tab --> consumerKey
\par \tab --> consumerSecret
\par \tab --> requestToken
\par \tab --> requestTokenSecret
\par \tab --> startedAuthentication
\par \tab --> mWebView
\par \tab --> authToken
\par \tab --> mAuthorizationUrl
\par 
\par Null variables: 
\par In method completeAuth found:
\par \tab --> accessToken
\par Null assignments: 
\par In method onResume found: 
\par \tab --> authToken
\par In method reset found: 
\par \tab --> authToken
\par ************ For file EvernoteSession.java************
\par 
\par Null checks:
\par authenticationResult != null?return authenticationResult.getAuthToken();
\par EvernoteOAuthActivity.authToken != null?EvernoteAuthToken token = EvernoteOAuthActivity.authToken;
\par 
\par Null fields: 
\par \tab --> applicationInfo
\par \tab --> authenticationResult
\par 
\par Null variables: 
\par Null assignments: 
\par In method logOut found: 
\par \tab --> authenticationResult
\par ************ For file EvernoteAuthToken.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> noteStoreUrl
\par \tab --> webApiUrlPrefix
\par \tab --> userId
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file YinxiangApi.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeUtils.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par         transport.setCustomHeader(header.getKey(), header.getValue());
\par       \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par buffer == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par param != null?ex.setParameter(param);
\par message != null?ex.setMessage(message);
\par charset == null?charset = Charset.forName(enc);
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par mToastMessage != null?Toast.makeText(mContext, mToastMessage, Toast.LENGTH_LONG).show();
\par getAuthToken() != null?refreshAuth();
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mTweetURL
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mSession
\par \tab --> mContext
\par \tab --> mHandler
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par Null assignments: 
\par In method doUpload found: 
\par \tab --> mToastMessage
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par \tab --> mSpinner
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEditTags
\par \tab --> mSession
\par \tab --> mEvernoteTags
\par \tab --> mPrefs
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mTweetId
\par \tab --> cacheManager
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mSession
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mContext
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par 
\par Diff of 63199b2ad618941dfe41ac9abf3652ef3d8ecdf0 and 7b34550b2c322638912b5e5bec8c02433d4ab576:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 63199b2ad618941dfe41ac9abf3652ef3d8ecdf0
\par 
\par Added ApplicationInfo.java to ./twicca_evernote_plugin/ repository source files.
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TEvernoteHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added AuthenticationResult.java to ./twicca_evernote_plugin/ repository source files.
\par Added EvernoteOAuthActivity.java to ./twicca_evernote_plugin/ repository source files.
\par Added EvernoteSession.java to ./twicca_evernote_plugin/ repository source files.
\par Added EvernoteAuthToken.java to ./twicca_evernote_plugin/ repository source files.
\par Added YinxiangApi.java to ./twicca_evernote_plugin/ repository source files.
\par Added TimeUtils.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added MultiAutoCompleteEditTextPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added NotebookPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file EvernoteOAuthActivity.java************
\par 
\par Null checks:
\par savedInstanceState != null?evernoteHost = savedInstanceState.getString("evernoteHost");
\par consumerKey == null?Intent intent = getIntent();
\par requestToken != null?OAuthService service = createService();
\par verifierString == null?Log.i(TAG, "User did not authorize access");
\par 
\par Null fields: 
\par \tab --> evernoteHost
\par \tab --> consumerKey
\par \tab --> consumerSecret
\par \tab --> requestToken
\par \tab --> requestTokenSecret
\par \tab --> startedAuthentication
\par \tab --> mWebView
\par \tab --> authToken
\par \tab --> mAuthorizationUrl
\par 
\par Null variables: 
\par In method completeAuth found:
\par \tab --> accessToken
\par Null assignments: 
\par In method onResume found: 
\par \tab --> authToken
\par In method reset found: 
\par \tab --> authToken
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file EvernoteOAuthActivity.java************
\par 
\par Null checks:
\par savedInstanceState != null?evernoteHost = savedInstanceState.getString("evernoteHost");
\par consumerKey == null?Intent intent = getIntent();
\par requestToken != null?OAuthService service = createService();
\par verifierString == null?Log.i(TAG, "User did not authorize access");
\par 
\par Null fields: 
\par \tab --> evernoteHost
\par \tab --> consumerKey
\par \tab --> consumerSecret
\par \tab --> requestToken
\par \tab --> requestTokenSecret
\par \tab --> startedAuthentication
\par \tab --> mWebView
\par \tab --> authToken
\par \tab --> mAuthorizationUrl
\par 
\par Null variables: 
\par In method completeAuth found:
\par \tab --> accessToken
\par Null assignments: 
\par In method onResume found: 
\par \tab --> authToken
\par In method reset found: 
\par \tab --> authToken
\par ************ For file TimeUtils.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file ApplicationInfo.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file TEvernoteHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file EvernoteOAuthActivity.java************
\par 
\par Null checks:
\par savedInstanceState != null?evernoteHost = savedInstanceState.getString("evernoteHost");
\par consumerKey == null?Intent intent = getIntent();
\par requestToken != null?OAuthService service = createService();
\par verifierString == null?Log.i(TAG, "User did not authorize access");
\par 
\par Null fields: 
\par \tab --> evernoteHost
\par \tab --> consumerKey
\par \tab --> consumerSecret
\par \tab --> requestToken
\par \tab --> requestTokenSecret
\par \tab --> startedAuthentication
\par \tab --> mWebView
\par \tab --> authToken
\par \tab --> mAuthorizationUrl
\par 
\par Null variables: 
\par In method completeAuth found:
\par \tab --> accessToken
\par Null assignments: 
\par In method onResume found: 
\par \tab --> authToken
\par In method reset found: 
\par \tab --> authToken
\par ************ For file EvernoteAuthToken.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> noteStoreUrl
\par \tab --> webApiUrlPrefix
\par \tab --> userId
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeUtils.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par getAuthToken() != null?refreshAuth();
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mTweetURL
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mSession
\par \tab --> mContext
\par \tab --> mHandler
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par Null assignments: 
\par In method doUpload found: 
\par \tab --> mToastMessage
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par \tab --> mSpinner
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEditTags
\par \tab --> mSession
\par \tab --> mEvernoteTags
\par \tab --> mPrefs
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mTweetId
\par \tab --> cacheManager
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ApplicationInfo.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TEvernoteHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file AuthenticationResult.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EvernoteOAuthActivity.java************
\par 
\par Null checks:
\par savedInstanceState != null?evernoteHost = savedInstanceState.getString("evernoteHost");
\par consumerKey == null?Intent intent = getIntent();
\par requestToken != null?OAuthService service = createService();
\par verifierString == null?Log.i(TAG, "User did not authorize access");
\par 
\par Null fields: 
\par \tab --> evernoteHost
\par \tab --> consumerKey
\par \tab --> consumerSecret
\par \tab --> requestToken
\par \tab --> requestTokenSecret
\par \tab --> startedAuthentication
\par \tab --> mWebView
\par \tab --> authToken
\par \tab --> mAuthorizationUrl
\par 
\par Null variables: 
\par In method completeAuth found:
\par \tab --> accessToken
\par Null assignments: 
\par In method onResume found: 
\par \tab --> authToken
\par In method reset found: 
\par \tab --> authToken
\par ************ For file EvernoteSession.java************
\par 
\par Null checks:
\par authenticationResult != null?return authenticationResult.getAuthToken();
\par EvernoteOAuthActivity.authToken != null?EvernoteAuthToken token = EvernoteOAuthActivity.authToken;
\par 
\par Null fields: 
\par \tab --> applicationInfo
\par \tab --> authenticationResult
\par 
\par Null variables: 
\par Null assignments: 
\par In method logOut found: 
\par \tab --> authenticationResult
\par ************ For file EvernoteAuthToken.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> noteStoreUrl
\par \tab --> webApiUrlPrefix
\par \tab --> userId
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file YinxiangApi.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeUtils.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par         transport.setCustomHeader(header.getKey(), header.getValue());
\par       \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par buffer == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par param != null?ex.setParameter(param);
\par message != null?ex.setMessage(message);
\par charset == null?charset = Charset.forName(enc);
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par getAuthToken() != null?refreshAuth();
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mTweetURL
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mSession
\par \tab --> mContext
\par \tab --> mHandler
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par \tab --> mSpinner
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEditTags
\par \tab --> mSession
\par \tab --> mEvernoteTags
\par \tab --> mPrefs
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mTweetId
\par \tab --> cacheManager
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mSession
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mContext
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par 
\par Diff of fd8a719facac7b436acf8afc9a08adc04e0510d7 and 63199b2ad618941dfe41ac9abf3652ef3d8ecdf0:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit fd8a719facac7b436acf8afc9a08adc04e0510d7
\par 
\par Added ApplicationInfo.java to ./twicca_evernote_plugin/ repository source files.
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TEvernoteHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added AuthenticationResult.java to ./twicca_evernote_plugin/ repository source files.
\par Added EvernoteOAuthActivity.java to ./twicca_evernote_plugin/ repository source files.
\par Added EvernoteSession.java to ./twicca_evernote_plugin/ repository source files.
\par Added EvernoteAuthToken.java to ./twicca_evernote_plugin/ repository source files.
\par Added YinxiangApi.java to ./twicca_evernote_plugin/ repository source files.
\par Added TimeUtils.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added MultiAutoCompleteEditTextPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added NotebookPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file EvernoteOAuthActivity.java************
\par 
\par Null checks:
\par savedInstanceState != null?evernoteHost = savedInstanceState.getString("evernoteHost");
\par consumerKey == null?Intent intent = getIntent();
\par requestToken != null?OAuthService service = createService();
\par verifierString == null?Log.i(TAG, "User did not authorize access");
\par 
\par Null fields: 
\par \tab --> evernoteHost
\par \tab --> consumerKey
\par \tab --> consumerSecret
\par \tab --> requestToken
\par \tab --> requestTokenSecret
\par \tab --> startedAuthentication
\par \tab --> mWebView
\par \tab --> authToken
\par \tab --> mAuthorizationUrl
\par 
\par Null variables: 
\par In method completeAuth found:
\par \tab --> accessToken
\par Null assignments: 
\par In method onResume found: 
\par \tab --> authToken
\par In method reset found: 
\par \tab --> authToken
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file TimeUtils.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ApplicationInfo.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TEvernoteHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file EvernoteAuthToken.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> noteStoreUrl
\par \tab --> webApiUrlPrefix
\par \tab --> userId
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par getAuthToken() != null?refreshAuth();
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mTweetURL
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mSession
\par \tab --> mContext
\par \tab --> mHandler
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par Null assignments: 
\par In method doUpload found: 
\par \tab --> mToastMessage
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par \tab --> mSpinner
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEditTags
\par \tab --> mSession
\par \tab --> mEvernoteTags
\par \tab --> mPrefs
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mTweetId
\par \tab --> cacheManager
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AuthenticationResult.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EvernoteSession.java************
\par 
\par Null checks:
\par authenticationResult != null?return authenticationResult.getAuthToken();
\par EvernoteOAuthActivity.authToken != null?EvernoteAuthToken token = EvernoteOAuthActivity.authToken;
\par 
\par Null fields: 
\par \tab --> applicationInfo
\par \tab --> authenticationResult
\par 
\par Null variables: 
\par Null assignments: 
\par In method logOut found: 
\par \tab --> authenticationResult
\par ************ For file YinxiangApi.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par         transport.setCustomHeader(header.getKey(), header.getValue());
\par       \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par buffer == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par param != null?ex.setParameter(param);
\par message != null?ex.setMessage(message);
\par charset == null?charset = Charset.forName(enc);
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mSession
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mContext
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par ************ For file ApplicationInfo.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TEvernoteHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file AuthenticationResult.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EvernoteOAuthActivity.java************
\par 
\par Null checks:
\par savedInstanceState != null?evernoteHost = savedInstanceState.getString("evernoteHost");
\par consumerKey == null?Intent intent = getIntent();
\par requestToken != null?OAuthService service = createService();
\par verifierString == null?Log.i(TAG, "User did not authorize access");
\par 
\par Null fields: 
\par \tab --> evernoteHost
\par \tab --> consumerKey
\par \tab --> consumerSecret
\par \tab --> requestToken
\par \tab --> requestTokenSecret
\par \tab --> startedAuthentication
\par \tab --> mWebView
\par \tab --> authToken
\par \tab --> mAuthorizationUrl
\par 
\par Null variables: 
\par In method completeAuth found:
\par \tab --> accessToken
\par Null assignments: 
\par In method onResume found: 
\par \tab --> authToken
\par In method reset found: 
\par \tab --> authToken
\par ************ For file EvernoteSession.java************
\par 
\par Null checks:
\par authenticationResult != null?return authenticationResult.getAuthToken();
\par EvernoteOAuthActivity.authToken != null?EvernoteAuthToken token = EvernoteOAuthActivity.authToken;
\par 
\par Null fields: 
\par \tab --> applicationInfo
\par \tab --> authenticationResult
\par 
\par Null variables: 
\par Null assignments: 
\par In method logOut found: 
\par \tab --> authenticationResult
\par ************ For file EvernoteAuthToken.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> noteStoreUrl
\par \tab --> webApiUrlPrefix
\par \tab --> userId
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file YinxiangApi.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeUtils.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par         transport.setCustomHeader(header.getKey(), header.getValue());
\par       \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par buffer == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par param != null?ex.setParameter(param);
\par message != null?ex.setMessage(message);
\par charset == null?charset = Charset.forName(enc);
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par getAuthToken() != null?refreshAuth();
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mTweetURL
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mSession
\par \tab --> mContext
\par \tab --> mHandler
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par \tab --> mSpinner
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEditTags
\par \tab --> mSession
\par \tab --> mEvernoteTags
\par \tab --> mPrefs
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mTweetId
\par \tab --> cacheManager
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mSession
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mContext
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par 
\par Diff of cd75dd3bc43a43a9a5ee563fd40852ab1ffae0d7 and fd8a719facac7b436acf8afc9a08adc04e0510d7:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit cd75dd3bc43a43a9a5ee563fd40852ab1ffae0d7
\par 
\par Added ApplicationInfo.java to ./twicca_evernote_plugin/ repository source files.
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TEvernoteHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added AuthenticationResult.java to ./twicca_evernote_plugin/ repository source files.
\par Added EvernoteOAuthActivity.java to ./twicca_evernote_plugin/ repository source files.
\par Added EvernoteSession.java to ./twicca_evernote_plugin/ repository source files.
\par Added EvernoteAuthToken.java to ./twicca_evernote_plugin/ repository source files.
\par Added YinxiangApi.java to ./twicca_evernote_plugin/ repository source files.
\par Added TimeUtils.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added MultiAutoCompleteEditTextPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added NotebookPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file ApplicationInfo.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EvernoteAuthToken.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> noteStoreUrl
\par \tab --> webApiUrlPrefix
\par \tab --> userId
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par \tab --> mSpinner
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEditTags
\par \tab --> mSession
\par \tab --> mEvernoteTags
\par \tab --> mPrefs
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mTweetId
\par \tab --> cacheManager
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EvernoteSession.java************
\par 
\par Null checks:
\par authenticationResult != null?return authenticationResult.getAuthToken();
\par EvernoteOAuthActivity.authToken != null?EvernoteAuthToken token = EvernoteOAuthActivity.authToken;
\par 
\par Null fields: 
\par \tab --> applicationInfo
\par \tab --> authenticationResult
\par 
\par Null variables: 
\par Null assignments: 
\par In method logOut found: 
\par \tab --> authenticationResult
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par         transport.setCustomHeader(header.getKey(), header.getValue());
\par       \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par buffer == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par param != null?ex.setParameter(param);
\par message != null?ex.setMessage(message);
\par charset == null?charset = Charset.forName(enc);
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file ApplicationInfo.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file TEvernoteHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file EvernoteOAuthActivity.java************
\par 
\par Null checks:
\par savedInstanceState != null?evernoteHost = savedInstanceState.getString("evernoteHost");
\par consumerKey == null?Intent intent = getIntent();
\par requestToken != null?OAuthService service = createService();
\par verifierString == null?Log.i(TAG, "User did not authorize access");
\par 
\par Null fields: 
\par \tab --> evernoteHost
\par \tab --> consumerKey
\par \tab --> consumerSecret
\par \tab --> requestToken
\par \tab --> requestTokenSecret
\par \tab --> startedAuthentication
\par \tab --> mWebView
\par \tab --> authToken
\par \tab --> mAuthorizationUrl
\par 
\par Null variables: 
\par In method completeAuth found:
\par \tab --> accessToken
\par Null assignments: 
\par In method onResume found: 
\par \tab --> authToken
\par In method reset found: 
\par \tab --> authToken
\par ************ For file EvernoteAuthToken.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> noteStoreUrl
\par \tab --> webApiUrlPrefix
\par \tab --> userId
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeUtils.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par getAuthToken() != null?refreshAuth();
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mTweetURL
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mSession
\par \tab --> mContext
\par \tab --> mHandler
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par \tab --> mSpinner
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEditTags
\par \tab --> mSession
\par \tab --> mEvernoteTags
\par \tab --> mPrefs
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mTweetId
\par \tab --> cacheManager
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ApplicationInfo.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TEvernoteHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file AuthenticationResult.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EvernoteOAuthActivity.java************
\par 
\par Null checks:
\par savedInstanceState != null?evernoteHost = savedInstanceState.getString("evernoteHost");
\par consumerKey == null?Intent intent = getIntent();
\par requestToken != null?OAuthService service = createService();
\par verifierString == null?Log.i(TAG, "User did not authorize access");
\par 
\par Null fields: 
\par \tab --> evernoteHost
\par \tab --> consumerKey
\par \tab --> consumerSecret
\par \tab --> requestToken
\par \tab --> requestTokenSecret
\par \tab --> startedAuthentication
\par \tab --> mWebView
\par \tab --> authToken
\par \tab --> mAuthorizationUrl
\par 
\par Null variables: 
\par In method completeAuth found:
\par \tab --> accessToken
\par Null assignments: 
\par In method onResume found: 
\par \tab --> authToken
\par In method reset found: 
\par \tab --> authToken
\par ************ For file EvernoteSession.java************
\par 
\par Null checks:
\par authenticationResult != null?return authenticationResult.getAuthToken();
\par EvernoteOAuthActivity.authToken != null?EvernoteAuthToken token = EvernoteOAuthActivity.authToken;
\par 
\par Null fields: 
\par \tab --> applicationInfo
\par \tab --> authenticationResult
\par 
\par Null variables: 
\par Null assignments: 
\par In method logOut found: 
\par \tab --> authenticationResult
\par ************ For file EvernoteAuthToken.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> noteStoreUrl
\par \tab --> webApiUrlPrefix
\par \tab --> userId
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file YinxiangApi.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeUtils.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par         transport.setCustomHeader(header.getKey(), header.getValue());
\par       \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par buffer == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par param != null?ex.setParameter(param);
\par message != null?ex.setMessage(message);
\par charset == null?charset = Charset.forName(enc);
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par getAuthToken() != null?refreshAuth();
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mTweetURL
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mSession
\par \tab --> mContext
\par \tab --> mHandler
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par \tab --> mSpinner
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEditTags
\par \tab --> mSession
\par \tab --> mEvernoteTags
\par \tab --> mPrefs
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mTweetId
\par \tab --> cacheManager
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mSession
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mContext
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par 
\par Diff of 6fe5c33ba114672f68d8749ad3ea83dd52f0c221 and cd75dd3bc43a43a9a5ee563fd40852ab1ffae0d7:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 6fe5c33ba114672f68d8749ad3ea83dd52f0c221
\par 
\par Added ApplicationInfo.java to ./twicca_evernote_plugin/ repository source files.
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TEvernoteHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added AuthenticationResult.java to ./twicca_evernote_plugin/ repository source files.
\par Added EvernoteOAuthActivity.java to ./twicca_evernote_plugin/ repository source files.
\par Added EvernoteSession.java to ./twicca_evernote_plugin/ repository source files.
\par Added EvernoteAuthToken.java to ./twicca_evernote_plugin/ repository source files.
\par Added YinxiangApi.java to ./twicca_evernote_plugin/ repository source files.
\par Added TimeUtils.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added MultiAutoCompleteEditTextPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added NotebookPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file ApplicationInfo.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par \tab --> mSpinner
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEditTags
\par \tab --> mSession
\par \tab --> mEvernoteTags
\par \tab --> mPrefs
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mTweetId
\par \tab --> cacheManager
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EvernoteSession.java************
\par 
\par Null checks:
\par authenticationResult != null?return authenticationResult.getAuthToken();
\par EvernoteOAuthActivity.authToken != null?EvernoteAuthToken token = EvernoteOAuthActivity.authToken;
\par 
\par Null fields: 
\par \tab --> applicationInfo
\par \tab --> authenticationResult
\par 
\par Null variables: 
\par Null assignments: 
\par In method logOut found: 
\par \tab --> authenticationResult
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file EvernoteOAuthActivity.java************
\par 
\par Null checks:
\par savedInstanceState != null?evernoteHost = savedInstanceState.getString("evernoteHost");
\par consumerKey == null?Intent intent = getIntent();
\par requestToken != null?OAuthService service = createService();
\par verifierString == null?Log.i(TAG, "User did not authorize access");
\par 
\par Null fields: 
\par \tab --> evernoteHost
\par \tab --> consumerKey
\par \tab --> consumerSecret
\par \tab --> requestToken
\par \tab --> requestTokenSecret
\par \tab --> startedAuthentication
\par \tab --> mWebView
\par \tab --> authToken
\par \tab --> mAuthorizationUrl
\par 
\par Null variables: 
\par In method completeAuth found:
\par \tab --> accessToken
\par Null assignments: 
\par In method onResume found: 
\par \tab --> authToken
\par In method reset found: 
\par \tab --> authToken
\par ************ For file TimeUtils.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file ApplicationInfo.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file TEvernoteHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file EvernoteOAuthActivity.java************
\par 
\par Null checks:
\par savedInstanceState != null?evernoteHost = savedInstanceState.getString("evernoteHost");
\par consumerKey == null?Intent intent = getIntent();
\par requestToken != null?OAuthService service = createService();
\par verifierString == null?Log.i(TAG, "User did not authorize access");
\par 
\par Null fields: 
\par \tab --> evernoteHost
\par \tab --> consumerKey
\par \tab --> consumerSecret
\par \tab --> requestToken
\par \tab --> requestTokenSecret
\par \tab --> startedAuthentication
\par \tab --> mWebView
\par \tab --> authToken
\par \tab --> mAuthorizationUrl
\par 
\par Null variables: 
\par In method completeAuth found:
\par \tab --> accessToken
\par Null assignments: 
\par In method onResume found: 
\par \tab --> authToken
\par In method reset found: 
\par \tab --> authToken
\par ************ For file EvernoteAuthToken.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> noteStoreUrl
\par \tab --> webApiUrlPrefix
\par \tab --> userId
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeUtils.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par getAuthToken() != null?refreshAuth();
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mTweetURL
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mSession
\par \tab --> mContext
\par \tab --> mHandler
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par \tab --> mSpinner
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEditTags
\par \tab --> mSession
\par \tab --> mEvernoteTags
\par \tab --> mPrefs
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mTweetId
\par \tab --> cacheManager
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ApplicationInfo.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TEvernoteHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file AuthenticationResult.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EvernoteOAuthActivity.java************
\par 
\par Null checks:
\par savedInstanceState != null?evernoteHost = savedInstanceState.getString("evernoteHost");
\par consumerKey == null?Intent intent = getIntent();
\par requestToken != null?OAuthService service = createService();
\par verifierString == null?Log.i(TAG, "User did not authorize access");
\par 
\par Null fields: 
\par \tab --> evernoteHost
\par \tab --> consumerKey
\par \tab --> consumerSecret
\par \tab --> requestToken
\par \tab --> requestTokenSecret
\par \tab --> startedAuthentication
\par \tab --> mWebView
\par \tab --> authToken
\par \tab --> mAuthorizationUrl
\par 
\par Null variables: 
\par In method completeAuth found:
\par \tab --> accessToken
\par Null assignments: 
\par In method onResume found: 
\par \tab --> authToken
\par In method reset found: 
\par \tab --> authToken
\par ************ For file EvernoteSession.java************
\par 
\par Null checks:
\par authenticationResult != null?return authenticationResult.getAuthToken();
\par EvernoteOAuthActivity.authToken != null?EvernoteAuthToken token = EvernoteOAuthActivity.authToken;
\par 
\par Null fields: 
\par \tab --> applicationInfo
\par \tab --> authenticationResult
\par 
\par Null variables: 
\par Null assignments: 
\par In method logOut found: 
\par \tab --> authenticationResult
\par ************ For file EvernoteAuthToken.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> noteStoreUrl
\par \tab --> webApiUrlPrefix
\par \tab --> userId
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file YinxiangApi.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeUtils.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par         transport.setCustomHeader(header.getKey(), header.getValue());
\par       \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par buffer == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par param != null?ex.setParameter(param);
\par message != null?ex.setMessage(message);
\par charset == null?charset = Charset.forName(enc);
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par getAuthToken() != null?refreshAuth();
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mTweetURL
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mSession
\par \tab --> mContext
\par \tab --> mHandler
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par \tab --> mSpinner
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEditTags
\par \tab --> mSession
\par \tab --> mEvernoteTags
\par \tab --> mPrefs
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mTweetId
\par \tab --> cacheManager
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mSession
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mContext
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par 
\par Diff of 10ad77d542845c34cee913cc23b9c44d559fa09a and 6fe5c33ba114672f68d8749ad3ea83dd52f0c221:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 10ad77d542845c34cee913cc23b9c44d559fa09a
\par 
\par Added ApplicationInfo.java to ./twicca_evernote_plugin/ repository source files.
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TEvernoteHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added AuthenticationResult.java to ./twicca_evernote_plugin/ repository source files.
\par Added EvernoteOAuthActivity.java to ./twicca_evernote_plugin/ repository source files.
\par Added EvernoteSession.java to ./twicca_evernote_plugin/ repository source files.
\par Added EvernoteAuthToken.java to ./twicca_evernote_plugin/ repository source files.
\par Added YinxiangApi.java to ./twicca_evernote_plugin/ repository source files.
\par Added TimeUtils.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added MultiAutoCompleteEditTextPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added NotebookPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par \tab --> mSpinner
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEditTags
\par \tab --> mSession
\par \tab --> mEvernoteTags
\par \tab --> mPrefs
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mTweetId
\par \tab --> cacheManager
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file EvernoteOAuthActivity.java************
\par 
\par Null checks:
\par savedInstanceState != null?evernoteHost = savedInstanceState.getString("evernoteHost");
\par consumerKey == null?Intent intent = getIntent();
\par requestToken != null?OAuthService service = createService();
\par verifierString == null?Log.i(TAG, "User did not authorize access");
\par 
\par Null fields: 
\par \tab --> evernoteHost
\par \tab --> consumerKey
\par \tab --> consumerSecret
\par \tab --> requestToken
\par \tab --> requestTokenSecret
\par \tab --> startedAuthentication
\par \tab --> mWebView
\par \tab --> authToken
\par \tab --> mAuthorizationUrl
\par 
\par Null variables: 
\par In method completeAuth found:
\par \tab --> accessToken
\par Null assignments: 
\par In method onResume found: 
\par \tab --> authToken
\par In method reset found: 
\par \tab --> authToken
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file EvernoteOAuthActivity.java************
\par 
\par Null checks:
\par savedInstanceState != null?evernoteHost = savedInstanceState.getString("evernoteHost");
\par consumerKey == null?Intent intent = getIntent();
\par requestToken != null?OAuthService service = createService();
\par verifierString == null?Log.i(TAG, "User did not authorize access");
\par 
\par Null fields: 
\par \tab --> evernoteHost
\par \tab --> consumerKey
\par \tab --> consumerSecret
\par \tab --> requestToken
\par \tab --> requestTokenSecret
\par \tab --> startedAuthentication
\par \tab --> mWebView
\par \tab --> authToken
\par \tab --> mAuthorizationUrl
\par 
\par Null variables: 
\par In method completeAuth found:
\par \tab --> accessToken
\par Null assignments: 
\par In method onResume found: 
\par \tab --> authToken
\par In method reset found: 
\par \tab --> authToken
\par ************ For file TimeUtils.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file ApplicationInfo.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file TEvernoteHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file EvernoteOAuthActivity.java************
\par 
\par Null checks:
\par savedInstanceState != null?evernoteHost = savedInstanceState.getString("evernoteHost");
\par consumerKey == null?Intent intent = getIntent();
\par requestToken != null?OAuthService service = createService();
\par verifierString == null?Log.i(TAG, "User did not authorize access");
\par 
\par Null fields: 
\par \tab --> evernoteHost
\par \tab --> consumerKey
\par \tab --> consumerSecret
\par \tab --> requestToken
\par \tab --> requestTokenSecret
\par \tab --> startedAuthentication
\par \tab --> mWebView
\par \tab --> authToken
\par \tab --> mAuthorizationUrl
\par 
\par Null variables: 
\par In method completeAuth found:
\par \tab --> accessToken
\par Null assignments: 
\par In method onResume found: 
\par \tab --> authToken
\par In method reset found: 
\par \tab --> authToken
\par ************ For file EvernoteAuthToken.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> noteStoreUrl
\par \tab --> webApiUrlPrefix
\par \tab --> userId
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeUtils.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par getAuthToken() != null?refreshAuth();
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mTweetURL
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mSession
\par \tab --> mContext
\par \tab --> mHandler
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par \tab --> mSpinner
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEditTags
\par \tab --> mSession
\par \tab --> mEvernoteTags
\par \tab --> mPrefs
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mTweetId
\par \tab --> cacheManager
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ApplicationInfo.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TEvernoteHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file AuthenticationResult.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EvernoteOAuthActivity.java************
\par 
\par Null checks:
\par savedInstanceState != null?evernoteHost = savedInstanceState.getString("evernoteHost");
\par consumerKey == null?Intent intent = getIntent();
\par requestToken != null?OAuthService service = createService();
\par verifierString == null?Log.i(TAG, "User did not authorize access");
\par 
\par Null fields: 
\par \tab --> evernoteHost
\par \tab --> consumerKey
\par \tab --> consumerSecret
\par \tab --> requestToken
\par \tab --> requestTokenSecret
\par \tab --> startedAuthentication
\par \tab --> mWebView
\par \tab --> authToken
\par \tab --> mAuthorizationUrl
\par 
\par Null variables: 
\par In method completeAuth found:
\par \tab --> accessToken
\par Null assignments: 
\par In method onResume found: 
\par \tab --> authToken
\par In method reset found: 
\par \tab --> authToken
\par ************ For file EvernoteSession.java************
\par 
\par Null checks:
\par authenticationResult != null?return authenticationResult.getAuthToken();
\par EvernoteOAuthActivity.authToken != null?EvernoteAuthToken token = EvernoteOAuthActivity.authToken;
\par 
\par Null fields: 
\par \tab --> applicationInfo
\par \tab --> authenticationResult
\par 
\par Null variables: 
\par Null assignments: 
\par In method logOut found: 
\par \tab --> authenticationResult
\par ************ For file EvernoteAuthToken.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> noteStoreUrl
\par \tab --> webApiUrlPrefix
\par \tab --> userId
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file YinxiangApi.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeUtils.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par         transport.setCustomHeader(header.getKey(), header.getValue());
\par       \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par buffer == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par param != null?ex.setParameter(param);
\par message != null?ex.setMessage(message);
\par charset == null?charset = Charset.forName(enc);
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par getAuthToken() != null?refreshAuth();
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mTweetURL
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mSession
\par \tab --> mContext
\par \tab --> mHandler
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par \tab --> mSpinner
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEditTags
\par \tab --> mSession
\par \tab --> mEvernoteTags
\par \tab --> mPrefs
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mTweetId
\par \tab --> cacheManager
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mSession
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mContext
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par 
\par Diff of f7d8d4de4f103f51afd954a0f9a2eaa92ed61989 and 10ad77d542845c34cee913cc23b9c44d559fa09a:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit f7d8d4de4f103f51afd954a0f9a2eaa92ed61989
\par 
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added MultiAutoCompleteEditTextPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added NotebookPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file EvernoteOAuthActivity.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> evernoteHost
\par \tab --> consumerKey
\par \tab --> consumerSecret
\par \tab --> requestToken
\par \tab --> requestTokenSecret
\par \tab --> startedAuthentication
\par \tab --> mWebView
\par \tab --> authToken
\par \tab --> mAuthorizationUrl
\par 
\par Null variables: 
\par In method completeAuth found:
\par \tab --> accessToken
\par Null assignments: 
\par In method onResume found: 
\par \tab --> authToken
\par In method reset found: 
\par \tab --> authToken
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file EvernoteOAuthActivity.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> evernoteHost
\par \tab --> consumerKey
\par \tab --> consumerSecret
\par \tab --> requestToken
\par \tab --> requestTokenSecret
\par \tab --> startedAuthentication
\par \tab --> mWebView
\par \tab --> authToken
\par \tab --> mAuthorizationUrl
\par 
\par Null variables: 
\par In method completeAuth found:
\par \tab --> accessToken
\par Null assignments: 
\par In method onResume found: 
\par \tab --> authToken
\par In method reset found: 
\par \tab --> authToken
\par ************ For file TimeUtils.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file ApplicationInfo.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file TEvernoteHttpClient.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file EvernoteOAuthActivity.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> evernoteHost
\par \tab --> consumerKey
\par \tab --> consumerSecret
\par \tab --> requestToken
\par \tab --> requestTokenSecret
\par \tab --> startedAuthentication
\par \tab --> mWebView
\par \tab --> authToken
\par \tab --> mAuthorizationUrl
\par 
\par Null variables: 
\par In method completeAuth found:
\par \tab --> accessToken
\par Null assignments: 
\par In method onResume found: 
\par \tab --> authToken
\par In method reset found: 
\par \tab --> authToken
\par ************ For file EvernoteAuthToken.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> noteStoreUrl
\par \tab --> webApiUrlPrefix
\par \tab --> userId
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TimeUtils.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par getAuthToken() != null?refreshAuth();
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mTweetURL
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mSession
\par \tab --> mContext
\par \tab --> mHandler
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par \tab --> mSpinner
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEditTags
\par \tab --> mSession
\par \tab --> mEvernoteTags
\par \tab --> mPrefs
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mTweetId
\par \tab --> cacheManager
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par getAuthToken() != null?refreshAuth();
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mTweetURL
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mSession
\par \tab --> mContext
\par \tab --> mHandler
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par \tab --> mSpinner
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEditTags
\par \tab --> mSession
\par \tab --> mEvernoteTags
\par \tab --> mPrefs
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mTweetId
\par \tab --> cacheManager
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mSession
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mContext
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par 
\par Diff of b0292c83b699066339f7109f0d418034481e2f09 and f7d8d4de4f103f51afd954a0f9a2eaa92ed61989:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit b0292c83b699066339f7109f0d418034481e2f09
\par 
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added MultiAutoCompleteEditTextPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added NotebookPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file EvernoteOAuthActivity.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> evernoteHost
\par \tab --> consumerKey
\par \tab --> consumerSecret
\par \tab --> requestToken
\par \tab --> requestTokenSecret
\par \tab --> startedAuthentication
\par \tab --> mWebView
\par \tab --> authToken
\par \tab --> mAuthorizationUrl
\par 
\par Null variables: 
\par In method completeAuth found:
\par \tab --> accessToken
\par Null assignments: 
\par In method onResume found: 
\par \tab --> authToken
\par In method reset found: 
\par \tab --> authToken
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file EvernoteOAuthActivity.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> evernoteHost
\par \tab --> consumerKey
\par \tab --> consumerSecret
\par \tab --> requestToken
\par \tab --> requestTokenSecret
\par \tab --> startedAuthentication
\par \tab --> mWebView
\par \tab --> authToken
\par \tab --> mAuthorizationUrl
\par 
\par Null variables: 
\par In method completeAuth found:
\par \tab --> accessToken
\par Null assignments: 
\par In method onResume found: 
\par \tab --> authToken
\par In method reset found: 
\par \tab --> authToken
\par ************ For file TimeUtils.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par getAuthToken() != null?refreshAuth();
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mTweetURL
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mSession
\par \tab --> mContext
\par \tab --> mHandler
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par \tab --> mSpinner
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEditTags
\par \tab --> mSession
\par \tab --> mEvernoteTags
\par \tab --> mPrefs
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mTweetId
\par \tab --> cacheManager
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par getAuthToken() != null?refreshAuth();
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mTweetURL
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mSession
\par \tab --> mContext
\par \tab --> mHandler
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par \tab --> mSpinner
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEditTags
\par \tab --> mSession
\par \tab --> mEvernoteTags
\par \tab --> mPrefs
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mTweetId
\par \tab --> cacheManager
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mSession
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mContext
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par 
\par Diff of 40dd22dab05ac49d06319504eaf8526b7b9d765b and b0292c83b699066339f7109f0d418034481e2f09:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 40dd22dab05ac49d06319504eaf8526b7b9d765b
\par 
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added MultiAutoCompleteEditTextPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added NotebookPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file EvernoteOAuthActivity.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> evernoteHost
\par \tab --> consumerKey
\par \tab --> consumerSecret
\par \tab --> requestToken
\par \tab --> requestTokenSecret
\par \tab --> startedAuthentication
\par \tab --> mWebView
\par \tab --> authToken
\par \tab --> mAuthorizationUrl
\par 
\par Null variables: 
\par In method completeAuth found:
\par \tab --> accessToken
\par Null assignments: 
\par In method onResume found: 
\par \tab --> authToken
\par In method reset found: 
\par \tab --> authToken
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par getAuthToken() != null?refreshAuth();
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mTweetURL
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mSession
\par \tab --> mContext
\par \tab --> mHandler
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par \tab --> mSpinner
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEditTags
\par \tab --> mSession
\par \tab --> mEvernoteTags
\par \tab --> mPrefs
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mTweetId
\par \tab --> cacheManager
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par getAuthToken() != null?refreshAuth();
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mTweetURL
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mSession
\par \tab --> mContext
\par \tab --> mHandler
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par \tab --> mSpinner
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEditTags
\par \tab --> mSession
\par \tab --> mEvernoteTags
\par \tab --> mPrefs
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mTweetId
\par \tab --> cacheManager
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mSession
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mContext
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par 
\par Diff of 8423b796f496d92028314c49d57348546b94f510 and 40dd22dab05ac49d06319504eaf8526b7b9d765b:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 8423b796f496d92028314c49d57348546b94f510
\par 
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added MultiAutoCompleteEditTextPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added NotebookPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par getAuthToken() != null?refreshAuth();
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mTweetURL
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mSession
\par \tab --> mContext
\par \tab --> mHandler
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par \tab --> mSpinner
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEditTags
\par \tab --> mSession
\par \tab --> mEvernoteTags
\par \tab --> mPrefs
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mTweetId
\par \tab --> cacheManager
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mSession
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mContext
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par getAuthToken() != null?refreshAuth();
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mTweetURL
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mSession
\par \tab --> mContext
\par \tab --> mHandler
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par \tab --> mSpinner
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEditTags
\par \tab --> mSession
\par \tab --> mEvernoteTags
\par \tab --> mPrefs
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mTweetId
\par \tab --> cacheManager
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mSession
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mContext
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par 
\par Diff of 775d80688e322aa8dbf52dab6f4d503b61dc7436 and 8423b796f496d92028314c49d57348546b94f510:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 775d80688e322aa8dbf52dab6f4d503b61dc7436
\par 
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added MultiAutoCompleteEditTextPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added NotebookPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par \tab --> mSpinner
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEditTags
\par \tab --> mSession
\par \tab --> mEvernoteTags
\par \tab --> mPrefs
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mTweetId
\par \tab --> cacheManager
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par getAuthToken() != null?refreshAuth();
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mTweetURL
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mSession
\par \tab --> mContext
\par \tab --> mHandler
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par \tab --> mSpinner
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEditTags
\par \tab --> mSession
\par \tab --> mEvernoteTags
\par \tab --> mPrefs
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mTweetId
\par \tab --> cacheManager
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par getAuthToken() != null?refreshAuth();
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mTweetURL
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mSession
\par \tab --> mContext
\par \tab --> mHandler
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par \tab --> mSpinner
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEditTags
\par \tab --> mSession
\par \tab --> mEvernoteTags
\par \tab --> mPrefs
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mTweetId
\par \tab --> cacheManager
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mSession
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mContext
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par 
\par Diff of e5591eb9df268f8b8131b92b52944d86d881ae41 and 775d80688e322aa8dbf52dab6f4d503b61dc7436:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit e5591eb9df268f8b8131b92b52944d86d881ae41
\par 
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added MultiAutoCompleteEditTextPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added NotebookPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par \tab --> mSpinner
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEditTags
\par \tab --> mSession
\par \tab --> mEvernoteTags
\par \tab --> mPrefs
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mTweetId
\par \tab --> cacheManager
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par getAuthToken() != null?refreshAuth();
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mTweetURL
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mSession
\par \tab --> mContext
\par \tab --> mHandler
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par \tab --> mSpinner
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEditTags
\par \tab --> mSession
\par \tab --> mEvernoteTags
\par \tab --> mPrefs
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mTweetId
\par \tab --> cacheManager
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mSession
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mContext
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par getAuthToken() != null?refreshAuth();
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mTweetURL
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mSession
\par \tab --> mContext
\par \tab --> mHandler
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par \tab --> mSpinner
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEditTags
\par \tab --> mSession
\par \tab --> mEvernoteTags
\par \tab --> mPrefs
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mTweetId
\par \tab --> cacheManager
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mSession
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mContext
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par 
\par Diff of 05bd5896ad6b568eec37f97fdc37d4acf6aee1f0 and e5591eb9df268f8b8131b92b52944d86d881ae41:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 05bd5896ad6b568eec37f97fdc37d4acf6aee1f0
\par 
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added MultiAutoCompleteEditTextPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added NotebookPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par getAuthToken() != null?refreshAuth();
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mTweetURL
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mSession
\par \tab --> mContext
\par \tab --> mHandler
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mSession
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mContext
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mSession
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mContext
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par getAuthToken() != null?refreshAuth();
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mTweetURL
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mSession
\par \tab --> mContext
\par \tab --> mHandler
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par \tab --> mSpinner
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEditTags
\par \tab --> mSession
\par \tab --> mEvernoteTags
\par \tab --> mPrefs
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mTweetId
\par \tab --> cacheManager
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mSession
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par 
\par Diff of 53fa6a0bebd093c1b43a0e2ef7e008b9ebdf05c4 and 05bd5896ad6b568eec37f97fdc37d4acf6aee1f0:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 53fa6a0bebd093c1b43a0e2ef7e008b9ebdf05c4
\par 
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added MultiAutoCompleteEditTextPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added NotebookPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mSession
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mContext
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mSession
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par getAuthToken() != null?refreshAuth();
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mTweetURL
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mSession
\par \tab --> mContext
\par \tab --> mHandler
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par \tab --> mSpinner
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEditTags
\par \tab --> mSession
\par \tab --> mEvernoteTags
\par \tab --> mPrefs
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mTweetId
\par \tab --> cacheManager
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mSession
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par 
\par Diff of 3f135f43413d3353367565ad566ac0b5346f4833 and 53fa6a0bebd093c1b43a0e2ef7e008b9ebdf05c4:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 3f135f43413d3353367565ad566ac0b5346f4833
\par 
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added MultiAutoCompleteEditTextPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added NotebookPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mSession
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mSession
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par getAuthToken() != null?refreshAuth();
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mTweetURL
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mSession
\par \tab --> mContext
\par \tab --> mHandler
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par \tab --> mSpinner
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEditTags
\par \tab --> mSession
\par \tab --> mEvernoteTags
\par \tab --> mPrefs
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mTweetId
\par \tab --> cacheManager
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mSession
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par 
\par Diff of 88a02f165575f4e8f7cdd719da455d96d9d1f9a5 and 3f135f43413d3353367565ad566ac0b5346f4833:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 88a02f165575f4e8f7cdd719da455d96d9d1f9a5
\par 
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added MultiAutoCompleteEditTextPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added NotebookPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mSession
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mSession
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par getAuthToken() != null?refreshAuth();
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mTweetURL
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mSession
\par \tab --> mContext
\par \tab --> mHandler
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par Null assignments: 
\par In method setupSession found: 
\par \tab --> mSession
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par Null check was removed at revision 88a02f165575f4e8f7cdd719da455d96d9d1f9a5
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mPrefs
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mTweetId
\par \tab --> mContext
\par \tab --> cacheManager
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mSession
\par \tab --> cacheManager
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par \tab --> mToastMessage
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par 
\par Diff of c62a452962e55bca197812903a427ec12cb162c5 and 88a02f165575f4e8f7cdd719da455d96d9d1f9a5:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 1
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit c62a452962e55bca197812903a427ec12cb162c5
\par 
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added MultiAutoCompleteEditTextPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added NotebookPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mSession
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mPrefs
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mTweetId
\par \tab --> mContext
\par \tab --> cacheManager
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par getAuthToken() != null?refreshAuth();
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mTweetURL
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mSession
\par \tab --> mContext
\par \tab --> mHandler
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par Null assignments: 
\par In method setupSession found: 
\par \tab --> mSession
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mPrefs
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mTweetId
\par \tab --> mContext
\par \tab --> cacheManager
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mSession
\par \tab --> cacheManager
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par \tab --> mToastMessage
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par 
\par Diff of c2466fe310951a2223e86f71268952524123545c and c62a452962e55bca197812903a427ec12cb162c5:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 1
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit c2466fe310951a2223e86f71268952524123545c
\par 
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added MultiAutoCompleteEditTextPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added NotebookPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mPrefs
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mTweetId
\par \tab --> mContext
\par \tab --> cacheManager
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mPrefs
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mTweetId
\par \tab --> mContext
\par \tab --> cacheManager
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par getAuthToken() != null?refreshAuth();
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mTweetURL
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mSession
\par \tab --> mContext
\par \tab --> mHandler
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par Null assignments: 
\par In method setupSession found: 
\par \tab --> mSession
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mPrefs
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mTweetId
\par \tab --> mContext
\par \tab --> cacheManager
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mSession
\par \tab --> cacheManager
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par \tab --> mToastMessage
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par 
\par Diff of 6c2adf66bcb107331b262bfaaa5cf3acde5c1ebd and c2466fe310951a2223e86f71268952524123545c:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 1
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 6c2adf66bcb107331b262bfaaa5cf3acde5c1ebd
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added MultiAutoCompleteEditTextPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added NotebookPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mPrefs
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mTweetId
\par \tab --> mContext
\par \tab --> cacheManager
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mPrefs
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mTweetId
\par \tab --> mContext
\par \tab --> cacheManager
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was removed at revision 6c2adf66bcb107331b262bfaaa5cf3acde5c1ebd
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par Null check was removed at revision 6c2adf66bcb107331b262bfaaa5cf3acde5c1ebd
\par Null check was removed at revision 6c2adf66bcb107331b262bfaaa5cf3acde5c1ebd
\par Null check was removed at revision 6c2adf66bcb107331b262bfaaa5cf3acde5c1ebd
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was removed at revision 6c2adf66bcb107331b262bfaaa5cf3acde5c1ebd
\par Null check was removed at revision 6c2adf66bcb107331b262bfaaa5cf3acde5c1ebd
\par Null check was removed at revision 6c2adf66bcb107331b262bfaaa5cf3acde5c1ebd
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was removed at revision 6c2adf66bcb107331b262bfaaa5cf3acde5c1ebd
\par Null check was removed at revision 6c2adf66bcb107331b262bfaaa5cf3acde5c1ebd
\par Null check was removed at revision 6c2adf66bcb107331b262bfaaa5cf3acde5c1ebd
\par Null check was removed at revision 6c2adf66bcb107331b262bfaaa5cf3acde5c1ebd
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par Null check was removed at revision 6c2adf66bcb107331b262bfaaa5cf3acde5c1ebd
\par Null check was removed at revision 6c2adf66bcb107331b262bfaaa5cf3acde5c1ebd
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was removed at revision 6c2adf66bcb107331b262bfaaa5cf3acde5c1ebd
\par Null check was removed at revision 6c2adf66bcb107331b262bfaaa5cf3acde5c1ebd
\par Null check was removed at revision 6c2adf66bcb107331b262bfaaa5cf3acde5c1ebd
\par Null check was removed at revision 6c2adf66bcb107331b262bfaaa5cf3acde5c1ebd
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par getAuthToken() != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mTweetURL
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mTweetId
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mUser
\par \tab --> cacheManager
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par \tab --> mToastMessage
\par \tab --> mUserStore
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par 
\par Diff of d2ad26d6ac90e7c547791304acfc1db58018df98 and 6c2adf66bcb107331b262bfaaa5cf3acde5c1ebd:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 18
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit d2ad26d6ac90e7c547791304acfc1db58018df98
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added MultiAutoCompleteEditTextPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added NotebookPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mPrefs
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mTweetId
\par \tab --> mContext
\par \tab --> cacheManager
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mTweetId
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par getAuthToken() != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mTweetURL
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mTweetId
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mUser
\par \tab --> cacheManager
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par \tab --> mToastMessage
\par \tab --> mUserStore
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par 
\par Diff of 831195d63a713069d14a833834fb6f555a808a3e and d2ad26d6ac90e7c547791304acfc1db58018df98:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 18
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 831195d63a713069d14a833834fb6f555a808a3e
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added MultiAutoCompleteEditTextPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added NotebookPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par getAuthToken() != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mTweetURL
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mUser
\par \tab --> cacheManager
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par \tab --> mToastMessage
\par \tab --> mUserStore
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par getAuthToken() != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mTweetURL
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mTweetId
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mUser
\par \tab --> cacheManager
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par \tab --> mToastMessage
\par \tab --> mUserStore
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par 
\par Diff of 2f47f93b2535fde8cb6533e6415546db55866eee and 831195d63a713069d14a833834fb6f555a808a3e:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 18
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 2f47f93b2535fde8cb6533e6415546db55866eee
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added MultiAutoCompleteEditTextPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added NotebookPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par getAuthToken() != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mTweetURL
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par getAuthToken() != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mTweetURL
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mUser
\par \tab --> cacheManager
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par \tab --> mToastMessage
\par \tab --> mUserStore
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par getAuthToken() != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mTweetURL
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mTweetId
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mUser
\par \tab --> cacheManager
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par \tab --> mToastMessage
\par \tab --> mUserStore
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par 
\par Diff of 0a7ce278f0dcdb81b48d965effb42e9c2e8852ae and 2f47f93b2535fde8cb6533e6415546db55866eee:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 18
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 0a7ce278f0dcdb81b48d965effb42e9c2e8852ae
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added MultiAutoCompleteEditTextPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added NotebookPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par getAuthToken() != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mTweetURL
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mUser
\par \tab --> cacheManager
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par \tab --> mToastMessage
\par \tab --> mUserStore
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mTweetId
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par getAuthToken() != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mTweetURL
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mTweetId
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mUser
\par \tab --> cacheManager
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par \tab --> mToastMessage
\par \tab --> mUserStore
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par 
\par Diff of 60f9195a089bb6010e0acb74cfcd3c31ce5d0238 and 0a7ce278f0dcdb81b48d965effb42e9c2e8852ae:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 18
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 60f9195a089bb6010e0acb74cfcd3c31ce5d0238
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added MultiAutoCompleteEditTextPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added NotebookPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par getAuthToken() != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mTweetURL
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mUser
\par \tab --> cacheManager
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par \tab --> mToastMessage
\par \tab --> mUserStore
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mTweetId
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mTweetId
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par getAuthToken() != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mTweetURL
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mTweetId
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mUser
\par \tab --> cacheManager
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par \tab --> mToastMessage
\par \tab --> mUserStore
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par 
\par Diff of f33d6fb8bfb8e614916d478ad5cd92ff6f68242b and 60f9195a089bb6010e0acb74cfcd3c31ce5d0238:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 18
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit f33d6fb8bfb8e614916d478ad5cd92ff6f68242b
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added MultiAutoCompleteEditTextPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added NotebookPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mTweetId
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mTweetId
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mTweetId
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par getAuthToken() != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mTweetURL
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mTweetId
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mUser
\par \tab --> cacheManager
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par \tab --> mToastMessage
\par \tab --> mUserStore
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par 
\par Diff of cbf706fbcc5f4c35da6219009bf18a7f51cba932 and f33d6fb8bfb8e614916d478ad5cd92ff6f68242b:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 18
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit cbf706fbcc5f4c35da6219009bf18a7f51cba932
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added MultiAutoCompleteEditTextPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added NotebookPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mTweetId
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mTweetId
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mTweetId
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par getAuthToken() != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mTweetURL
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mTweetId
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mUser
\par \tab --> cacheManager
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par \tab --> mToastMessage
\par \tab --> mUserStore
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par 
\par Diff of 0668574688f11c4e883950fdb0cdb060bad5542d and cbf706fbcc5f4c35da6219009bf18a7f51cba932:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 18
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 0668574688f11c4e883950fdb0cdb060bad5542d
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added MultiAutoCompleteEditTextPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added NotebookPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mTweetId
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mTweetId
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mTweetId
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par getAuthToken() != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mUser
\par \tab --> cacheManager
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par \tab --> mToastMessage
\par \tab --> mUserStore
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par 
\par Diff of 797c961aa001ef343113040a0888abfcfd630b92 and 0668574688f11c4e883950fdb0cdb060bad5542d:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 18
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 797c961aa001ef343113040a0888abfcfd630b92
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added MultiAutoCompleteEditTextPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added NotebookPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mTweetId
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mTweetId
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par getAuthToken() != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mUser
\par \tab --> cacheManager
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par \tab --> mToastMessage
\par \tab --> mUserStore
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par 
\par Diff of 7a7a7fb460dc30691dbf71a7385116d1a8c2a588 and 797c961aa001ef343113040a0888abfcfd630b92:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 18
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 7a7a7fb460dc30691dbf71a7385116d1a8c2a588
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added MultiAutoCompleteEditTextPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added NotebookPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mTweetId
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par getAuthToken() != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mUser
\par \tab --> cacheManager
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par \tab --> mToastMessage
\par \tab --> mUserStore
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par 
\par Diff of f867c0f0bb46f389eb030fcee0d5a64e994ee040 and 7a7a7fb460dc30691dbf71a7385116d1a8c2a588:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 18
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit f867c0f0bb46f389eb030fcee0d5a64e994ee040
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added MultiAutoCompleteEditTextPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added NotebookPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par getAuthToken() != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mText != null?return mText != null ? mText : "";
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mUser
\par \tab --> cacheManager
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par \tab --> mToastMessage
\par \tab --> mUserStore
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par 
\par Diff of 4eeb78ab5ddae577c2200d0dd40a223cb4b6bd46 and f867c0f0bb46f389eb030fcee0d5a64e994ee040:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 18
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 4eeb78ab5ddae577c2200d0dd40a223cb4b6bd46
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added MultiAutoCompleteEditTextPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added NotebookPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par getAuthToken() != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mUser
\par \tab --> cacheManager
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par \tab --> mToastMessage
\par \tab --> mUserStore
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par 
\par Diff of c25a62c3c5e7ac2ce05ffc58f7c1810fb79b7158 and 4eeb78ab5ddae577c2200d0dd40a223cb4b6bd46:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 18
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit c25a62c3c5e7ac2ce05ffc58f7c1810fb79b7158
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added MultiAutoCompleteEditTextPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added NotebookPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par getAuthToken() != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mUser
\par \tab --> cacheManager
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par \tab --> mToastMessage
\par \tab --> mUserStore
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par 
\par Diff of 6e425b05f8dc3cc33ef466fd390233e06bc422ce and c25a62c3c5e7ac2ce05ffc58f7c1810fb79b7158:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 18
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 6e425b05f8dc3cc33ef466fd390233e06bc422ce
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added MultiAutoCompleteEditTextPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added NotebookPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par getAuthToken() != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mUser
\par \tab --> cacheManager
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par \tab --> mToastMessage
\par \tab --> mUserStore
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par 
\par Diff of d6d26fa1a685ed0e27416a5d8c85a1466bbf85b8 and 6e425b05f8dc3cc33ef466fd390233e06bc422ce:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 18
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit d6d26fa1a685ed0e27416a5d8c85a1466bbf85b8
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added MultiAutoCompleteEditTextPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added NotebookPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par getAuthToken() != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(getApplicationContext(), mToastMessage, Toast.LENGTH_LONG).show();
\par 
\par Null fields: 
\par \tab --> mProgressDialog
\par \tab --> mUser
\par \tab --> cacheManager
\par \tab --> mNoteStore
\par \tab --> mAuthToken
\par \tab --> mToastMessage
\par \tab --> mUserStore
\par 
\par Null variables: 
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par In method doNoteStore found: 
\par \tab --> mToastMessage
\par 
\par Diff of fffde938d7090e245b23e7822f785dfb441fd7a7 and d6d26fa1a685ed0e27416a5d8c85a1466bbf85b8:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 18
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit fffde938d7090e245b23e7822f785dfb441fd7a7
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added MultiAutoCompleteEditTextPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added NotebookPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par getAuthToken() != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cacheManager
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 3f75d5543588e6cbb138caf52c4da7c39b706986 and fffde938d7090e245b23e7822f785dfb441fd7a7:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 18
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 3f75d5543588e6cbb138caf52c4da7c39b706986
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added MultiAutoCompleteEditTextPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added NotebookPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par getAuthToken() != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cacheManager
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of b55456df21e970f2cfda664ff84d651a45cf7b49 and 3f75d5543588e6cbb138caf52c4da7c39b706986:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 18
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit b55456df21e970f2cfda664ff84d651a45cf7b49
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added MultiAutoCompleteEditTextPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added NotebookPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par getAuthToken() != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cacheManager
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 3a9c5d3c3eb7e3a3ab70f625cb2c80d778dc51fb and b55456df21e970f2cfda664ff84d651a45cf7b49:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 18
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 3a9c5d3c3eb7e3a3ab70f625cb2c80d778dc51fb
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added MultiAutoCompleteEditTextPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added NotebookPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par getAuthToken() != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> cacheManager
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 4e58d3468cc21c85256890403e8b4a3cffd4e8b2 and 3a9c5d3c3eb7e3a3ab70f625cb2c80d778dc51fb:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 18
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 4e58d3468cc21c85256890403e8b4a3cffd4e8b2
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added MultiAutoCompleteEditTextPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added NotebookPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par getAuthToken() != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MultiAutoCompleteEditTextPreference.java************
\par 
\par Null checks:
\par oldParent != null?((ViewGroup) oldParent).removeView(textView);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> text
\par \tab --> mEditText
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par mNotebooks == null?return 0;
\par oldParent != null?((ViewGroup) oldParent).removeView(spinner);
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par container != null?container.addView(spinner, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par container != null?container.addView(textView, ViewGroup.LayoutParams.MATCH_PARENT,
\par                     ViewGroup.LayoutParams.WRAP_CONTENT);
\par state == null?super.onRestoreInstanceState(state);
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 413bcf586d9bdbef2675f35336fda7d715d778c4 and 4e58d3468cc21c85256890403e8b4a3cffd4e8b2:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 18
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 413bcf586d9bdbef2675f35336fda7d715d778c4
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NotebookPreference.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mSpinner
\par \tab --> mEditText
\par \tab --> text
\par \tab --> mNotebooks
\par \tab --> mText
\par 
\par Null variables: 
\par In method onCreateDialogView found:
\par \tab --> view
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par getAuthToken() != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of c38c4af0cb5a0a8a8a852e2e5583e6a41bd75870 and 413bcf586d9bdbef2675f35336fda7d715d778c4:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 18
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit c38c4af0cb5a0a8a8a852e2e5583e6a41bd75870
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par getAuthToken() != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 3ea883186ff846a917bf52f3bbef260d48b17d41 and c38c4af0cb5a0a8a8a852e2e5583e6a41bd75870:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 18
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 3ea883186ff846a917bf52f3bbef260d48b17d41
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par getAuthToken() != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par getAuthToken() != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of fde93faa3400d3d5348b9966551b68d5f2b2db3f and 3ea883186ff846a917bf52f3bbef260d48b17d41:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 18
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit fde93faa3400d3d5348b9966551b68d5f2b2db3f
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par getAuthToken() != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par getAuthToken() != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 088f07af4432cb0dfa9ff377ecbc0320c82bac38 and fde93faa3400d3d5348b9966551b68d5f2b2db3f:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 18
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 088f07af4432cb0dfa9ff377ecbc0320c82bac38
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par getAuthToken() != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par getAuthToken() != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 1b98e4d44845c21dde2336ecf1c84f5888ab5d6e and 088f07af4432cb0dfa9ff377ecbc0320c82bac38:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 18
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 1b98e4d44845c21dde2336ecf1c84f5888ab5d6e
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par getAuthToken() != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par getAuthToken() != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 58b37338ea7e3e02070018d1d701d211b7b8be2b and 1b98e4d44845c21dde2336ecf1c84f5888ab5d6e:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 18
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 58b37338ea7e3e02070018d1d701d211b7b8be2b
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par getAuthToken() != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par getAuthToken() != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mEditNotebook
\par \tab --> mEvernoteNotebook
\par \tab --> mSpinner
\par \tab --> mEditTags
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 995bdf7621d392ccd4b69221463d17f324e6fc46 and 58b37338ea7e3e02070018d1d701d211b7b8be2b:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 18
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 995bdf7621d392ccd4b69221463d17f324e6fc46
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par getAuthToken() != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par getAuthToken() != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mContext
\par \tab --> mEditTags
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 8ef53445ae9073149a5f3600af6bf2cf74c57d8a and 995bdf7621d392ccd4b69221463d17f324e6fc46:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 18
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 8ef53445ae9073149a5f3600af6bf2cf74c57d8a
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par getAuthToken() != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par getAuthToken() != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par notebook == null?Log.d(LOG_TAG, "Retrieve notebook list...");
\par getNoteStore() == null?return;
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mContext
\par \tab --> mEditTags
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of d63eee9670fd4eaf5d995561650a00f2909fb92a and 8ef53445ae9073149a5f3600af6bf2cf74c57d8a:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 18
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit d63eee9670fd4eaf5d995561650a00f2909fb92a
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par Null check was removed at revision d63eee9670fd4eaf5d995561650a00f2909fb92a
\par Null check was added at revision d63eee9670fd4eaf5d995561650a00f2909fb92a
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par token != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par getNoteStore() == null?return;
\par notebook == null?Log.d(LOG_TAG, "Retreive notebook list...");
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method doUpload found: 
\par \tab --> notebook
\par In method createNotebook found: 
\par \tab --> notebook
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was removed at revision d63eee9670fd4eaf5d995561650a00f2909fb92a
\par Null check was added at revision d63eee9670fd4eaf5d995561650a00f2909fb92a
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par token != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par getNoteStore() == null?return;
\par notebook == null?Log.d(LOG_TAG, "Retreive notebook list...");
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mToastMessage
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method doUpload found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mContext
\par \tab --> mEditTags
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 9f5f2b4958de4dda229d0a58e0f996b8c08ebfe0 and d63eee9670fd4eaf5d995561650a00f2909fb92a:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 20
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 9f5f2b4958de4dda229d0a58e0f996b8c08ebfe0
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par token != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par getNoteStore() == null?return;
\par notebook == null?Log.d(LOG_TAG, "Retreive notebook list...");
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mToastMessage
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method doUpload found: 
\par \tab --> notebook
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par token != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par getNoteStore() == null?return;
\par notebook == null?Log.d(LOG_TAG, "Retreive notebook list...");
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mToastMessage
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method doUpload found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mContext
\par \tab --> mEditTags
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of c59c624cf55282fb8d866e3c73bb6ea025472607 and 9f5f2b4958de4dda229d0a58e0f996b8c08ebfe0:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 20
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit c59c624cf55282fb8d866e3c73bb6ea025472607
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par token != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par getNoteStore() == null?return;
\par notebook == null?Log.d(LOG_TAG, "Retreive notebook list...");
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mToastMessage
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method doUpload found: 
\par \tab --> notebook
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par token != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par getNoteStore() == null?return;
\par notebook == null?Log.d(LOG_TAG, "Retreive notebook list...");
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mToastMessage
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method doUpload found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mContext
\par \tab --> mEditTags
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 87a9fdb3b58d14be73385d3df4a11feedf8d2439 and c59c624cf55282fb8d866e3c73bb6ea025472607:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 20
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 87a9fdb3b58d14be73385d3df4a11feedf8d2439
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par token != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par getNoteStore() == null?return;
\par notebook == null?Log.d(LOG_TAG, "Retreive notebook list...");
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mToastMessage
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method doUpload found: 
\par \tab --> notebook
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par token != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par getNoteStore() == null?return;
\par notebook == null?Log.d(LOG_TAG, "Retreive notebook list...");
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mToastMessage
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method doUpload found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mContext
\par \tab --> mEditTags
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 2f15d1eb1172c908c8b5808c07a2b9325d9ca4bc and 87a9fdb3b58d14be73385d3df4a11feedf8d2439:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 20
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 2f15d1eb1172c908c8b5808c07a2b9325d9ca4bc
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par token != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par getNoteStore() == null?return;
\par notebook == null?Log.d(LOG_TAG, "Retreive notebook list...");
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mToastMessage
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method doUpload found: 
\par \tab --> notebook
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par token != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par getNoteStore() == null?return;
\par notebook == null?Log.d(LOG_TAG, "Retreive notebook list...");
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mToastMessage
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method doUpload found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> cacheManager
\par \tab --> mContext
\par \tab --> mEditTags
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of f596cc60dd3f6cf634a88476d9f4ba0f33024083 and 2f15d1eb1172c908c8b5808c07a2b9325d9ca4bc:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 20
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit f596cc60dd3f6cf634a88476d9f4ba0f33024083
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par token != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par getNoteStore() == null?return;
\par notebook == null?Log.d(LOG_TAG, "Retreive notebook list...");
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mToastMessage
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method doUpload found: 
\par \tab --> notebook
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mNotebooks == null?mNotebooks = getNoteStore().listNotebooks(getAuthToken());
\par token != null?setAuthToken(token);
\par getAuthToken() != null?doEvernoteApi();
\par token != null?refreshAuth();
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par getNoteStore() == null?return;
\par notebook == null?Log.d(LOG_TAG, "Retreive notebook list...");
\par notebook != null?guid = notebook.getGuid();
\par guid != null?note.setNotebookGuid(guid);
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mToastMessage
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method doUpload found: 
\par \tab --> notebook
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> mContext
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mEditTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of bdfaf73ae8e99fd905c9f03747d5ebe3584dacf7 and f596cc60dd3f6cf634a88476d9f4ba0f33024083:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 20
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit bdfaf73ae8e99fd905c9f03747d5ebe3584dacf7
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par Null check was removed at revision bdfaf73ae8e99fd905c9f03747d5ebe3584dacf7
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par getNoteStore() != null?Notebook notebook = null;
\par notebook == null?Log.d(LOG_TAG, "Create new notebook: '" + mNotebookName + "'");
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTable
\par \tab --> mToastMessage
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> cacheManager
\par \tab --> mNotebooks
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> guid
\par \tab --> notebook
\par In method onHandleIntent found:
\par \tab --> token
\par Null assignments: 
\par In method doUpload found: 
\par \tab --> notebook
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was removed at revision bdfaf73ae8e99fd905c9f03747d5ebe3584dacf7
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par getNoteStore() != null?Notebook notebook = null;
\par notebook == null?Log.d(LOG_TAG, "Create new notebook: '" + mNotebookName + "'");
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> notebook
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> mContext
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mEditTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 80cbe192517b2a9448e732622ba4acc4c011da3d and bdfaf73ae8e99fd905c9f03747d5ebe3584dacf7:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 22
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 80cbe192517b2a9448e732622ba4acc4c011da3d
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par getNoteStore() != null?Notebook notebook = null;
\par notebook == null?Log.d(LOG_TAG, "Create new notebook: '" + mNotebookName + "'");
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> notebook
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par getNoteStore() != null?Notebook notebook = null;
\par notebook == null?Log.d(LOG_TAG, "Create new notebook: '" + mNotebookName + "'");
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> notebook
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> mContext
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mEditTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of a4ebd9f28cc47a1f1f16f45cb2b865dd29a3f7aa and 80cbe192517b2a9448e732622ba4acc4c011da3d:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 22
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit a4ebd9f28cc47a1f1f16f45cb2b865dd29a3f7aa
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added ECacheManager.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par getNoteStore() != null?Notebook notebook = null;
\par notebook == null?Log.d(LOG_TAG, "Create new notebook: '" + mNotebookName + "'");
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> notebook
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par getNoteStore() != null?Notebook notebook = null;
\par notebook == null?Log.d(LOG_TAG, "Create new notebook: '" + mNotebookName + "'");
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> notebook
\par Null assignments: 
\par ************ For file ECacheManager.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> mContext
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mEditTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of f905bb1f1b76757625bf8e1df34ccdab14f07644 and a4ebd9f28cc47a1f1f16f45cb2b865dd29a3f7aa:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 22
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit f905bb1f1b76757625bf8e1df34ccdab14f07644
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par getNoteStore() != null?Notebook notebook = null;
\par notebook == null?Log.d(LOG_TAG, "Create new notebook: '" + mNotebookName + "'");
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> notebook
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par getNoteStore() != null?Notebook notebook = null;
\par notebook == null?Log.d(LOG_TAG, "Create new notebook: '" + mNotebookName + "'");
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> notebook
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> mContext
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mEditTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 1c49c438ef71a789cf64d4e53182ab29cc47426d and f905bb1f1b76757625bf8e1df34ccdab14f07644:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 22
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 1c49c438ef71a789cf64d4e53182ab29cc47426d
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par getNoteStore() != null?Notebook notebook = null;
\par notebook == null?Log.d(LOG_TAG, "Create new notebook: '" + mNotebookName + "'");
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> notebook
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> mContext
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mEditTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par getNoteStore() != null?Notebook notebook = null;
\par notebook == null?Log.d(LOG_TAG, "Create new notebook: '" + mNotebookName + "'");
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> notebook
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> mContext
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mEditTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of a57618f56d58a9ad249a39b50cf6b014ef291fd2 and 1c49c438ef71a789cf64d4e53182ab29cc47426d:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 22
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit a57618f56d58a9ad249a39b50cf6b014ef291fd2
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> mContext
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mEditTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par getUserStore() == null?return false;
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par getNoteStore() != null?Notebook notebook = null;
\par notebook == null?Log.d(LOG_TAG, "Create new notebook: '" + mNotebookName + "'");
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> notebook
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> mContext
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mEditTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 6be2cc01c5d15b2dd3829e5c0cb20ce0133163e0 and a57618f56d58a9ad249a39b50cf6b014ef291fd2:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 22
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 6be2cc01c5d15b2dd3829e5c0cb20ce0133163e0
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par getNoteStore() != null?Notebook notebook = null;
\par notebook == null?Log.d(LOG_TAG, "Create new notebook: '" + mNotebookName + "'");
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mToastMessage
\par \tab --> mNotebookName
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> notebook
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> mContext
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mEditTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of ade73087d4ba7a1f0e1f2111f605b6b825a364cd and 6be2cc01c5d15b2dd3829e5c0cb20ce0133163e0:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 22
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit ade73087d4ba7a1f0e1f2111f605b6b825a364cd
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par getNoteStore() != null?Notebook notebook = null;
\par notebook == null?Log.d(LOG_TAG, "Create new notebook: '" + mNotebookName + "'");
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mToastMessage
\par \tab --> mNotebookName
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> notebook
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> mContext
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mEditTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of a2971c0c3ed77cac82ee13f858ba565652c88123 and ade73087d4ba7a1f0e1f2111f605b6b825a364cd:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 22
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit a2971c0c3ed77cac82ee13f858ba565652c88123
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par getNoteStore() != null?Notebook notebook = null;
\par notebook == null?Log.d(LOG_TAG, "Create new notebook: '" + mNotebookName + "'");
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mToastMessage
\par \tab --> mNotebookName
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> notebook
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> mContext
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mEditTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 7edd0e335d1bd7b2b87477506cf0a5a41eaa60db and a2971c0c3ed77cac82ee13f858ba565652c88123:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 22
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 7edd0e335d1bd7b2b87477506cf0a5a41eaa60db
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClippingService.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClippingService.java************
\par 
\par Null checks:
\par mUser == null?mUser = getUserStore().getUser(getAuthToken());
\par getNoteStore() != null?Notebook notebook = null;
\par notebook == null?Log.d(LOG_TAG, "Create new notebook: '" + mNotebookName + "'");
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mToastMessage
\par \tab --> mNotebookName
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mUser
\par \tab --> mContext
\par \tab --> mHandler
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> notebook
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> mContext
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mEditTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of ea02a655666d6be8cd8303d354c88facf4838ad6 and 7edd0e335d1bd7b2b87477506cf0a5a41eaa60db:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 22
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit ea02a655666d6be8cd8303d354c88facf4838ad6
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClipUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was removed at revision ea02a655666d6be8cd8303d354c88facf4838ad6
\par Null check was removed at revision ea02a655666d6be8cd8303d354c88facf4838ad6
\par ************ For file ClipUploader.java************
\par 
\par Null checks:
\par getNoteStore() != null?Notebook notebook = null;
\par notebook == null?Log.d(LOG_TAG, "Create new notebook: '" + mNotebookName + "'");
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mContext
\par \tab --> mHandler
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> notebook
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> mContext
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mEditTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 259d75b23e6c6d6b8e5e1c90c7c7eed7049eb980 and ea02a655666d6be8cd8303d354c88facf4838ad6:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 24
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 259d75b23e6c6d6b8e5e1c90c7c7eed7049eb980
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClipUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> url_
\par \tab --> request
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> userAgent
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClipUploader.java************
\par 
\par Null checks:
\par getNoteStore() != null?Notebook notebook = null;
\par notebook == null?Log.d(LOG_TAG, "Create new notebook: '" + mNotebookName + "'");
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mHandler
\par \tab --> mContext
\par \tab --> mText
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> notebook
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> mContext
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mEditTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of c2a46e653478594721128c80c0e7ac2eacafcaf8 and 259d75b23e6c6d6b8e5e1c90c7c7eed7049eb980:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 24
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit c2a46e653478594721128c80c0e7ac2eacafcaf8
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClipUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> userAgent
\par \tab --> request
\par \tab --> url_
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClipUploader.java************
\par 
\par Null checks:
\par getNoteStore() != null?Notebook notebook = null;
\par notebook == null?Log.d(LOG_TAG, "Create new notebook: '" + mNotebookName + "'");
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mHandler
\par \tab --> mContext
\par \tab --> mText
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> notebook
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> mContext
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mEditTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of cfa0a400e408d83b9d3128278f58fd8f28a41700 and c2a46e653478594721128c80c0e7ac2eacafcaf8:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 24
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit cfa0a400e408d83b9d3128278f58fd8f28a41700
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClipUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> userAgent
\par \tab --> request
\par \tab --> url_
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClipUploader.java************
\par 
\par Null checks:
\par getNoteStore() != null?Notebook notebook = null;
\par notebook == null?Log.d(LOG_TAG, "Create new notebook: '" + mNotebookName + "'");
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mHandler
\par \tab --> mContext
\par \tab --> mText
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> notebook
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> mContext
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mEditTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 92986b6f92e54d5b13782c45a4515b77c93acc36 and cfa0a400e408d83b9d3128278f58fd8f28a41700:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 24
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 92986b6f92e54d5b13782c45a4515b77c93acc36
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClipUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> userAgent
\par \tab --> request
\par \tab --> url_
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClipUploader.java************
\par 
\par Null checks:
\par getNoteStore() != null?Notebook notebook = null;
\par notebook == null?Log.d(LOG_TAG, "Create new notebook: '" + mNotebookName + "'");
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mHandler
\par \tab --> mContext
\par \tab --> mText
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> notebook
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> mContext
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mEditTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 6886f0d3d18700254a9dbecc41f57454cf20e8d6 and 92986b6f92e54d5b13782c45a4515b77c93acc36:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 24
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 6886f0d3d18700254a9dbecc41f57454cf20e8d6
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added ClipUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> userAgent
\par \tab --> request
\par \tab --> url_
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ClipUploader.java************
\par 
\par Null checks:
\par getNoteStore() != null?Notebook notebook = null;
\par notebook == null?Log.d(LOG_TAG, "Create new notebook: '" + mNotebookName + "'");
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mNotebookName
\par \tab --> mNoteTitle
\par \tab --> mTags
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> mUserStore
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mHandler
\par \tab --> mContext
\par \tab --> mText
\par 
\par Null variables: 
\par In method doUpload found:
\par \tab --> notebook
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> mContext
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mEditTags
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 8e97483270e69df4e35ef43e0ed1e1a814b909ce and 6886f0d3d18700254a9dbecc41f57454cf20e8d6:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 24
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 8e97483270e69df4e35ef43e0ed1e1a814b909ce
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> userAgent
\par \tab --> request
\par \tab --> url_
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was removed at revision 8e97483270e69df4e35ef43e0ed1e1a814b909ce
\par Null check was removed at revision 8e97483270e69df4e35ef43e0ed1e1a814b909ce
\par Null check was removed at revision 8e97483270e69df4e35ef43e0ed1e1a814b909ce
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(mContext, mToastMessage, Toast.LENGTH_LONG).show();
\par getNoteStore() != null?Notebook notebook = null;
\par notebook == null?Log.d(LOG_TAG, "Create new notebook: '" + mEvernoteNotebook + "'");
\par notebook != null?publishProgress(getString(R.string.dialog_message)+ "\\n" +
\par                             getString(R.string.notebook)+ " " + (notebook != null ? notebook.getName() : "(default)") + "\\n" +
\par                             getString(R.string.tags) + " " + mEvernoteTags)
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> mContext
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mEditTags
\par \tab --> mProgressDialog
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> mEvernotePassword
\par \tab --> mEvernoteUsername
\par \tab --> mUserStore
\par 
\par Null variables: 
\par In method doInBackground found:
\par \tab --> notebook
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 05c67257a622c92d3daf49055235a8616ceb1741 and 8e97483270e69df4e35ef43e0ed1e1a814b909ce:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 27
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 05c67257a622c92d3daf49055235a8616ceb1741
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(mContext, mToastMessage, Toast.LENGTH_LONG).show();
\par getNoteStore() != null?Notebook notebook = null;
\par notebook == null?Log.d(LOG_TAG, "Create new notebook: '" + mEvernoteNotebook + "'");
\par notebook != null?publishProgress(getString(R.string.dialog_message)+ "\\n" +
\par                             getString(R.string.notebook)+ " " + (notebook != null ? notebook.getName() : "(default)") + "\\n" +
\par                             getString(R.string.tags) + " " + mEvernoteTags)
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> mContext
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mEditTags
\par \tab --> mProgressDialog
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> mEvernotePassword
\par \tab --> mEvernoteUsername
\par \tab --> mUserStore
\par 
\par Null variables: 
\par In method doInBackground found:
\par \tab --> notebook
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> userAgent
\par \tab --> request
\par \tab --> url_
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(mContext, mToastMessage, Toast.LENGTH_LONG).show();
\par getNoteStore() != null?Notebook notebook = null;
\par notebook == null?Log.d(LOG_TAG, "Create new notebook: '" + mEvernoteNotebook + "'");
\par notebook != null?publishProgress(getString(R.string.dialog_message)+ "\\n" +
\par                             getString(R.string.notebook)+ " " + (notebook != null ? notebook.getName() : "(default)") + "\\n" +
\par                             getString(R.string.tags) + " " + mEvernoteTags)
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> mContext
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mEditTags
\par \tab --> mProgressDialog
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> mEvernotePassword
\par \tab --> mEvernoteUsername
\par \tab --> mUserStore
\par 
\par Null variables: 
\par In method doInBackground found:
\par \tab --> notebook
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of db2229f074a5ff4fc8e3158ac698651318a01611 and 05c67257a622c92d3daf49055235a8616ceb1741:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 27
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit db2229f074a5ff4fc8e3158ac698651318a01611
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> userAgent
\par \tab --> request
\par \tab --> url_
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> userAgent
\par \tab --> request
\par \tab --> url_
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(mContext, mToastMessage, Toast.LENGTH_LONG).show();
\par getNoteStore() != null?Notebook notebook = null;
\par notebook == null?Log.d(LOG_TAG, "Create new notebook: '" + mEvernoteNotebook + "'");
\par notebook != null?publishProgress(getString(R.string.dialog_message)+ "\\n" +
\par                             getString(R.string.notebook)+ " " + (notebook != null ? notebook.getName() : "(default)") + "\\n" +
\par                             getString(R.string.tags) + " " + mEvernoteTags)
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> mContext
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mEditTags
\par \tab --> mProgressDialog
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> mEvernotePassword
\par \tab --> mEvernoteUsername
\par \tab --> mUserStore
\par 
\par Null variables: 
\par In method doInBackground found:
\par \tab --> notebook
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 082df9098fff4bcfe33f4bd868af8f96573cf0af and db2229f074a5ff4fc8e3158ac698651318a01611:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 27
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 082df9098fff4bcfe33f4bd868af8f96573cf0af
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> userAgent
\par \tab --> request
\par \tab --> url_
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> userAgent
\par \tab --> request
\par \tab --> url_
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(mContext, mToastMessage, Toast.LENGTH_LONG).show();
\par getNoteStore() != null?Notebook notebook = null;
\par notebook == null?Log.d(LOG_TAG, "Create new notebook: '" + mEvernoteNotebook + "'");
\par notebook != null?publishProgress(getString(R.string.dialog_message)+ "\\n" +
\par                             getString(R.string.notebook)+ " " + (notebook != null ? notebook.getName() : "(default)") + "\\n" +
\par                             getString(R.string.tags) + " " + mEvernoteTags)
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> mContext
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mEditTags
\par \tab --> mProgressDialog
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> mEvernotePassword
\par \tab --> mEvernoteUsername
\par \tab --> mUserStore
\par 
\par Null variables: 
\par In method doInBackground found:
\par \tab --> notebook
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 3dd38bd2db98b1d6cb86dd6156ae12215fe93c4c and 082df9098fff4bcfe33f4bd868af8f96573cf0af:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 27
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 3dd38bd2db98b1d6cb86dd6156ae12215fe93c4c
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> userAgent
\par \tab --> request
\par \tab --> url_
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> userAgent
\par \tab --> request
\par \tab --> url_
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(mContext, mToastMessage, Toast.LENGTH_LONG).show();
\par getNoteStore() != null?Notebook notebook = null;
\par notebook == null?Log.d(LOG_TAG, "Create new notebook: '" + mEvernoteNotebook + "'");
\par notebook != null?publishProgress(getString(R.string.dialog_message)+ "\\n" +
\par                             getString(R.string.notebook)+ " " + (notebook != null ? notebook.getName() : "(default)") + "\\n" +
\par                             getString(R.string.tags) + " " + mEvernoteTags)
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> mContext
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mEditTags
\par \tab --> mProgressDialog
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> mEvernotePassword
\par \tab --> mEvernoteUsername
\par \tab --> mUserStore
\par 
\par Null variables: 
\par In method doInBackground found:
\par \tab --> notebook
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of b5008b5d2abb508aa07cba4a6b6fb89aab12a3dc and 3dd38bd2db98b1d6cb86dd6156ae12215fe93c4c:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 27
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit b5008b5d2abb508aa07cba4a6b6fb89aab12a3dc
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> userAgent
\par \tab --> request
\par \tab --> url_
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> userAgent
\par \tab --> request
\par \tab --> url_
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(mContext, mToastMessage, Toast.LENGTH_LONG).show();
\par getNoteStore() != null?Notebook notebook = null;
\par notebook == null?Log.d(LOG_TAG, "Create new notebook: '" + mEvernoteNotebook + "'");
\par notebook != null?publishProgress(getString(R.string.dialog_message)+ "\\n" +
\par                             getString(R.string.notebook)+ " " + (notebook != null ? notebook.getName() : "(default)") + "\\n" +
\par                             getString(R.string.tags) + " " + mEvernoteTags)
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> mContext
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mEditTags
\par \tab --> mProgressDialog
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> mEvernotePassword
\par \tab --> mEvernoteUsername
\par \tab --> mUserStore
\par 
\par Null variables: 
\par In method doInBackground found:
\par \tab --> notebook
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 06e423c034ee8d4eb4709a15fd5a10026cac9c73 and b5008b5d2abb508aa07cba4a6b6fb89aab12a3dc:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 27
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 06e423c034ee8d4eb4709a15fd5a10026cac9c73
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added CryptEditTextPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added SimpleCrypt.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> userAgent
\par \tab --> request
\par \tab --> url_
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> userAgent
\par \tab --> request
\par \tab --> url_
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was removed at revision 06e423c034ee8d4eb4709a15fd5a10026cac9c73
\par ************ For file CryptEditTextPreference.java************
\par 
\par Null checks:
\par TwiccaEvernoteUploader.SEED != null?try \{
\par                 value = SimpleCrypt.decrypt(TwiccaEvernoteUploader.SEED, value);
\par             \} catch (Exception e) \{
\par                 Log.d("CryptEditTextPreference", "could not decrypt value: " + value);
\par             \}
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par buf == null?return "";
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(mContext, mToastMessage, Toast.LENGTH_LONG).show();
\par getNoteStore() != null?Notebook notebook = null;
\par notebook == null?Log.d(LOG_TAG, "Create new notebook: '" + mEvernoteNotebook + "'");
\par notebook != null?publishProgress(getString(R.string.dialog_message)+ "\\n" +
\par                             getString(R.string.notebook)+ " " + (notebook != null ? notebook.getName() : "(default)") + "\\n" +
\par                             getString(R.string.tags) + " " + mEvernoteTags)
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> mContext
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mEditTags
\par \tab --> mProgressDialog
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> mEvernotePassword
\par \tab --> mEvernoteUsername
\par \tab --> mUserStore
\par 
\par Null variables: 
\par In method doInBackground found:
\par \tab --> notebook
\par In method setupApi found:
\par \tab --> authResult
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of c84ffb28eca9b16dd41e883a35e354c3bcccbd18 and 06e423c034ee8d4eb4709a15fd5a10026cac9c73:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 28
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit c84ffb28eca9b16dd41e883a35e354c3bcccbd18
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added CryptEditTextPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> userAgent
\par \tab --> request
\par \tab --> url_
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file CryptEditTextPreference.java************
\par 
\par Null checks:
\par TwiccaEvernoteUploader.SEED != null?try \{
\par                 value = SimpleCrypt.decrypt(TwiccaEvernoteUploader.SEED, value);
\par             \} catch (Exception e) \{
\par                 Log.d("CryptEditTextPreference", "could not decrypt value: " + value);
\par             \}
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(mContext, mToastMessage, Toast.LENGTH_LONG).show();
\par getNoteStore() != null?Notebook notebook = null;
\par notebook == null?Log.d(LOG_TAG, "Create new notebook: '" + mEvernoteNotebook + "'");
\par notebook != null?publishProgress(getString(R.string.dialog_message)+ "\\n" +
\par                             getString(R.string.notebook)+ " " + (notebook != null ? notebook.getName() : "(default)") + "\\n" +
\par                             getString(R.string.tags) + " " + mEvernoteTags)
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> mContext
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mEditTags
\par \tab --> mProgressDialog
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> mEvernotePassword
\par \tab --> mEvernoteUsername
\par \tab --> mUserStore
\par 
\par Null variables: 
\par In method doInBackground found:
\par \tab --> notebook
\par In method setupApi found:
\par \tab --> authResult
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> userAgent
\par \tab --> request
\par \tab --> url_
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CryptEditTextPreference.java************
\par 
\par Null checks:
\par TwiccaEvernoteUploader.SEED != null?try \{
\par                 value = SimpleCrypt.decrypt(TwiccaEvernoteUploader.SEED, value);
\par             \} catch (Exception e) \{
\par                 Log.d("CryptEditTextPreference", "could not decrypt value: " + value);
\par             \}
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(mContext, mToastMessage, Toast.LENGTH_LONG).show();
\par getNoteStore() != null?Notebook notebook = null;
\par notebook == null?Log.d(LOG_TAG, "Create new notebook: '" + mEvernoteNotebook + "'");
\par notebook != null?publishProgress(getString(R.string.dialog_message)+ "\\n" +
\par                             getString(R.string.notebook)+ " " + (notebook != null ? notebook.getName() : "(default)") + "\\n" +
\par                             getString(R.string.tags) + " " + mEvernoteTags)
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> mContext
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mEditTags
\par \tab --> mProgressDialog
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> mEvernotePassword
\par \tab --> mEvernoteUsername
\par \tab --> mUserStore
\par 
\par Null variables: 
\par In method doInBackground found:
\par \tab --> notebook
\par In method setupApi found:
\par \tab --> authResult
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of e87b606cad71f228a3a7830bbfead2a971a42c01 and c84ffb28eca9b16dd41e883a35e354c3bcccbd18:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 28
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit e87b606cad71f228a3a7830bbfead2a971a42c01
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added CryptEditTextPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file CryptEditTextPreference.java************
\par 
\par Null checks:
\par TwiccaEvernoteUploader.SEED != null?try \{
\par                 value = SimpleCrypt.decrypt(TwiccaEvernoteUploader.SEED, value);
\par             \} catch (Exception e) \{
\par                 Log.d("CryptEditTextPreference", "could not decrypt value: " + value);
\par             \}
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> userAgent
\par \tab --> request
\par \tab --> url_
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file CryptEditTextPreference.java************
\par 
\par Null checks:
\par TwiccaEvernoteUploader.SEED != null?try \{
\par                 value = SimpleCrypt.decrypt(TwiccaEvernoteUploader.SEED, value);
\par             \} catch (Exception e) \{
\par                 Log.d("CryptEditTextPreference", "could not decrypt value: " + value);
\par             \}
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> userAgent
\par \tab --> request
\par \tab --> url_
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CryptEditTextPreference.java************
\par 
\par Null checks:
\par TwiccaEvernoteUploader.SEED != null?try \{
\par                 value = SimpleCrypt.decrypt(TwiccaEvernoteUploader.SEED, value);
\par             \} catch (Exception e) \{
\par                 Log.d("CryptEditTextPreference", "could not decrypt value: " + value);
\par             \}
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(mContext, mToastMessage, Toast.LENGTH_LONG).show();
\par getNoteStore() != null?Notebook notebook = null;
\par notebook == null?notebook = new Notebook();
\par notebook != null?publishProgress(getString(R.string.dialog_message)+ "\\n" +
\par                             getString(R.string.notebook)+ " " + (notebook != null ? notebook.getName() : "(default)") + "\\n" +
\par                             getString(R.string.tags) + " " + mEvernoteTags)
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> mContext
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mEditTags
\par \tab --> mProgressDialog
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> mEvernotePassword
\par \tab --> mEvernoteUsername
\par \tab --> mUserStore
\par 
\par Null variables: 
\par In method doInBackground found:
\par \tab --> notebook
\par In method setupApi found:
\par \tab --> authResult
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 7ec5c2aa83d53319d36630a881920afab119334e and e87b606cad71f228a3a7830bbfead2a971a42c01:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 28
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 7ec5c2aa83d53319d36630a881920afab119334e
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added CryptEditTextPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file SimpleCrypt.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CryptEditTextPreference.java************
\par 
\par Null checks:
\par TwiccaEvernoteUploader.SEED != null?try \{
\par                 value = SimpleCrypt.decrypt(TwiccaEvernoteUploader.SEED, value);
\par             \} catch (Exception e) \{
\par                 Log.d("CryptEditTextPreference", "could not decrypt value: " + value);
\par             \}
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file CryptEditTextPreference.java************
\par 
\par Null checks:
\par TwiccaEvernoteUploader.SEED != null?try \{
\par                 value = SimpleCrypt.decrypt(TwiccaEvernoteUploader.SEED, value);
\par             \} catch (Exception e) \{
\par                 Log.d("CryptEditTextPreference", "could not decrypt value: " + value);
\par             \}
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> userAgent
\par \tab --> request
\par \tab --> url_
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file CryptEditTextPreference.java************
\par 
\par Null checks:
\par TwiccaEvernoteUploader.SEED != null?try \{
\par                 value = SimpleCrypt.decrypt(TwiccaEvernoteUploader.SEED, value);
\par             \} catch (Exception e) \{
\par                 Log.d("CryptEditTextPreference", "could not decrypt value: " + value);
\par             \}
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> userAgent
\par \tab --> request
\par \tab --> url_
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CryptEditTextPreference.java************
\par 
\par Null checks:
\par TwiccaEvernoteUploader.SEED != null?try \{
\par                 value = SimpleCrypt.decrypt(TwiccaEvernoteUploader.SEED, value);
\par             \} catch (Exception e) \{
\par                 Log.d("CryptEditTextPreference", "could not decrypt value: " + value);
\par             \}
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(mContext, mToastMessage, Toast.LENGTH_LONG).show();
\par getNoteStore() != null?Notebook notebook = null;
\par notebook == null?notebook = new Notebook();
\par notebook != null?publishProgress(getString(R.string.dialog_message)+ "\\n" +
\par                             getString(R.string.notebook)+ " " + (notebook != null ? notebook.getName() : "(default)") + "\\n" +
\par                             getString(R.string.tags) + " " + mEvernoteTags)
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> mContext
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mEditTags
\par \tab --> mProgressDialog
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> mEvernotePassword
\par \tab --> mEvernoteUsername
\par \tab --> mUserStore
\par 
\par Null variables: 
\par In method doInBackground found:
\par \tab --> notebook
\par In method setupApi found:
\par \tab --> authResult
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 34d90562e8de42e6a581dec9ec0bb76f6144da7c and 7ec5c2aa83d53319d36630a881920afab119334e:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 28
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 34d90562e8de42e6a581dec9ec0bb76f6144da7c
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added CryptEditTextPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file CryptEditTextPreference.java************
\par 
\par Null checks:
\par TwiccaEvernoteUploader.SEED != null?try \{
\par                 value = SimpleCrypt.decrypt(TwiccaEvernoteUploader.SEED, value);
\par             \} catch (Exception e) \{
\par                 Log.d("CryptEditTextPreference", "could not decrypt value: " + value);
\par             \}
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CryptEditTextPreference.java************
\par 
\par Null checks:
\par TwiccaEvernoteUploader.SEED != null?try \{
\par                 value = SimpleCrypt.decrypt(TwiccaEvernoteUploader.SEED, value);
\par             \} catch (Exception e) \{
\par                 Log.d("CryptEditTextPreference", "could not decrypt value: " + value);
\par             \}
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file CryptEditTextPreference.java************
\par 
\par Null checks:
\par TwiccaEvernoteUploader.SEED != null?try \{
\par                 value = SimpleCrypt.decrypt(TwiccaEvernoteUploader.SEED, value);
\par             \} catch (Exception e) \{
\par                 Log.d("CryptEditTextPreference", "could not decrypt value: " + value);
\par             \}
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> userAgent
\par \tab --> request
\par \tab --> url_
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file CryptEditTextPreference.java************
\par 
\par Null checks:
\par TwiccaEvernoteUploader.SEED != null?try \{
\par                 value = SimpleCrypt.decrypt(TwiccaEvernoteUploader.SEED, value);
\par             \} catch (Exception e) \{
\par                 Log.d("CryptEditTextPreference", "could not decrypt value: " + value);
\par             \}
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> userAgent
\par \tab --> request
\par \tab --> url_
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CryptEditTextPreference.java************
\par 
\par Null checks:
\par TwiccaEvernoteUploader.SEED != null?try \{
\par                 value = SimpleCrypt.decrypt(TwiccaEvernoteUploader.SEED, value);
\par             \} catch (Exception e) \{
\par                 Log.d("CryptEditTextPreference", "could not decrypt value: " + value);
\par             \}
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(mContext, mToastMessage, Toast.LENGTH_LONG).show();
\par getNoteStore() != null?Notebook notebook = null;
\par notebook == null?notebook = new Notebook();
\par notebook != null?publishProgress(getString(R.string.dialog_message)+ "\\n" +
\par                             getString(R.string.notebook)+ " " + (notebook != null ? notebook.getName() : "(default)") + "\\n" +
\par                             getString(R.string.tags) + " " + mEvernoteTags)
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> mContext
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mEditTags
\par \tab --> mProgressDialog
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> mEvernotePassword
\par \tab --> mEvernoteUsername
\par \tab --> mUserStore
\par 
\par Null variables: 
\par In method doInBackground found:
\par \tab --> notebook
\par In method setupApi found:
\par \tab --> authResult
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 33954e111fb457624e8aedc9f6ea03e1f6ce6865 and 34d90562e8de42e6a581dec9ec0bb76f6144da7c:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 28
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 33954e111fb457624e8aedc9f6ea03e1f6ce6865
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added CryptEditTextPreference.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file CryptEditTextPreference.java************
\par 
\par Null checks:
\par TwiccaEvernoteUploader.SEED != null?try \{
\par                 value = SimpleCrypt.decrypt(TwiccaEvernoteUploader.SEED, value);
\par             \} catch (Exception e) \{
\par                 Log.d("CryptEditTextPreference", "could not decrypt value: " + value);
\par             \}
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CryptEditTextPreference.java************
\par 
\par Null checks:
\par TwiccaEvernoteUploader.SEED != null?try \{
\par                 value = SimpleCrypt.decrypt(TwiccaEvernoteUploader.SEED, value);
\par             \} catch (Exception e) \{
\par                 Log.d("CryptEditTextPreference", "could not decrypt value: " + value);
\par             \}
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file CryptEditTextPreference.java************
\par 
\par Null checks:
\par TwiccaEvernoteUploader.SEED != null?try \{
\par                 value = SimpleCrypt.decrypt(TwiccaEvernoteUploader.SEED, value);
\par             \} catch (Exception e) \{
\par                 Log.d("CryptEditTextPreference", "could not decrypt value: " + value);
\par             \}
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> userAgent
\par \tab --> request
\par \tab --> url_
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file CryptEditTextPreference.java************
\par 
\par Null checks:
\par TwiccaEvernoteUploader.SEED != null?try \{
\par                 value = SimpleCrypt.decrypt(TwiccaEvernoteUploader.SEED, value);
\par             \} catch (Exception e) \{
\par                 Log.d("CryptEditTextPreference", "could not decrypt value: " + value);
\par             \}
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> userAgent
\par \tab --> request
\par \tab --> url_
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CryptEditTextPreference.java************
\par 
\par Null checks:
\par TwiccaEvernoteUploader.SEED != null?try \{
\par                 value = SimpleCrypt.decrypt(TwiccaEvernoteUploader.SEED, value);
\par             \} catch (Exception e) \{
\par                 Log.d("CryptEditTextPreference", "could not decrypt value: " + value);
\par             \}
\par oldParent != null?((ViewGroup) oldParent).removeView(editText);
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(mContext, mToastMessage, Toast.LENGTH_LONG).show();
\par getNoteStore() != null?Notebook notebook = null;
\par notebook == null?notebook = new Notebook();
\par notebook != null?publishProgress(getString(R.string.dialog_message)+ "\\n" +
\par                             getString(R.string.notebook)+ " " + (notebook != null ? notebook.getName() : "(default)") + "\\n" +
\par                             getString(R.string.tags) + " " + mEvernoteTags)
\par notebook != null?note.setNotebookGuid(notebook.getGuid());
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> mContext
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mEditTags
\par \tab --> mProgressDialog
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> mEvernotePassword
\par \tab --> mEvernoteUsername
\par \tab --> mUserStore
\par 
\par Null variables: 
\par In method doInBackground found:
\par \tab --> notebook
\par In method setupApi found:
\par \tab --> authResult
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 6b64c8c1df5667f919bd709561a4ec91f9dcedd6 and 33954e111fb457624e8aedc9f6ea03e1f6ce6865:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 28
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 6b64c8c1df5667f919bd709561a4ec91f9dcedd6
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file CryptEditTextPreference.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CryptEditTextPreference.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file CryptEditTextPreference.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> userAgent
\par \tab --> request
\par \tab --> url_
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file CryptEditTextPreference.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> userAgent
\par \tab --> request
\par \tab --> url_
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(mContext, mToastMessage, Toast.LENGTH_LONG).show();
\par getNoteStore() != null?Notebook notebook = null;
\par notebook == null?notebook = new Notebook();
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> mContext
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mEditTags
\par \tab --> mProgressDialog
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mUserStore
\par 
\par Null variables: 
\par In method doInBackground found:
\par \tab --> notebook
\par In method setupApi found:
\par \tab --> authResult
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 0a3335c6ee54d57e6c7b08e3a4e65916db275b47 and 6b64c8c1df5667f919bd709561a4ec91f9dcedd6:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 28
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 0a3335c6ee54d57e6c7b08e3a4e65916db275b47
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file CryptEditTextPreference.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CryptEditTextPreference.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file CryptEditTextPreference.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> userAgent
\par \tab --> request
\par \tab --> url_
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(mContext, mToastMessage, Toast.LENGTH_LONG).show();
\par getNoteStore() != null?Notebook notebook = null;
\par notebook == null?notebook = new Notebook();
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> mContext
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mEditTags
\par \tab --> mProgressDialog
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mUserStore
\par 
\par Null variables: 
\par In method doInBackground found:
\par \tab --> notebook
\par In method setupApi found:
\par \tab --> authResult
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> userAgent
\par \tab --> request
\par \tab --> url_
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(mContext, mToastMessage, Toast.LENGTH_LONG).show();
\par getNoteStore() != null?Notebook notebook = null;
\par notebook == null?notebook = new Notebook();
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> mContext
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mEditTags
\par \tab --> mProgressDialog
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mUserStore
\par 
\par Null variables: 
\par In method doInBackground found:
\par \tab --> notebook
\par In method setupApi found:
\par \tab --> authResult
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of ad3c6a5987411d1d6a0666b950f4534c051a0be9 and 0a3335c6ee54d57e6c7b08e3a4e65916db275b47:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 28
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit ad3c6a5987411d1d6a0666b950f4534c051a0be9
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file CryptEditTextPreference.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CryptEditTextPreference.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(mContext, mToastMessage, Toast.LENGTH_LONG).show();
\par getNoteStore() != null?Notebook notebook = null;
\par notebook == null?notebook = new Notebook();
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> mContext
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mEditTags
\par \tab --> mProgressDialog
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mUserStore
\par 
\par Null variables: 
\par In method doInBackground found:
\par \tab --> notebook
\par In method setupApi found:
\par \tab --> authResult
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> userAgent
\par \tab --> request
\par \tab --> url_
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(mContext, mToastMessage, Toast.LENGTH_LONG).show();
\par getNoteStore() != null?Notebook notebook = null;
\par notebook == null?notebook = new Notebook();
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> mContext
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mEditTags
\par \tab --> mProgressDialog
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mUserStore
\par 
\par Null variables: 
\par In method doInBackground found:
\par \tab --> notebook
\par In method setupApi found:
\par \tab --> authResult
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of f81ca153213f58cc486cb4f7c7f7d23dddb8c931 and ad3c6a5987411d1d6a0666b950f4534c051a0be9:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 28
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit f81ca153213f58cc486cb4f7c7f7d23dddb8c931
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file CryptEditTextPreference.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(mContext, mToastMessage, Toast.LENGTH_LONG).show();
\par getNoteStore() != null?Notebook notebook = null;
\par notebook == null?notebook = new Notebook();
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> mContext
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mEditTags
\par \tab --> mProgressDialog
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mUserStore
\par 
\par Null variables: 
\par In method doInBackground found:
\par \tab --> notebook
\par In method setupApi found:
\par \tab --> authResult
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> userAgent
\par \tab --> request
\par \tab --> url_
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(mContext, mToastMessage, Toast.LENGTH_LONG).show();
\par getNoteStore() != null?Notebook notebook = null;
\par notebook == null?notebook = new Notebook();
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> mContext
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mEditTags
\par \tab --> mProgressDialog
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mUserStore
\par 
\par Null variables: 
\par In method doInBackground found:
\par \tab --> notebook
\par In method setupApi found:
\par \tab --> authResult
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of fd0cb8164640fc132fc5314d5621be868f5ba608 and f81ca153213f58cc486cb4f7c7f7d23dddb8c931:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 28
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit fd0cb8164640fc132fc5314d5621be868f5ba608
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(mContext, mToastMessage, Toast.LENGTH_LONG).show();
\par getNoteStore() != null?Notebook notebook = null;
\par notebook == null?notebook = new Notebook();
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> mContext
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mEditTags
\par \tab --> mProgressDialog
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mUserStore
\par 
\par Null variables: 
\par In method doInBackground found:
\par \tab --> notebook
\par In method setupApi found:
\par \tab --> authResult
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> userAgent
\par \tab --> request
\par \tab --> url_
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(mContext, mToastMessage, Toast.LENGTH_LONG).show();
\par getNoteStore() != null?Notebook notebook = null;
\par notebook == null?notebook = new Notebook();
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> mContext
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mEditTags
\par \tab --> mProgressDialog
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mUserStore
\par 
\par Null variables: 
\par In method doInBackground found:
\par \tab --> notebook
\par In method setupApi found:
\par \tab --> authResult
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of eb36509601876477d5fdd8caf82986119f747027 and fd0cb8164640fc132fc5314d5621be868f5ba608:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 28
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit eb36509601876477d5fdd8caf82986119f747027
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> userAgent
\par \tab --> request
\par \tab --> url_
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(mContext, mToastMessage, Toast.LENGTH_LONG).show();
\par getNoteStore() != null?Notebook notebook = null;
\par notebook == null?notebook = new Notebook();
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> mContext
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mEditTags
\par \tab --> mProgressDialog
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mUserStore
\par 
\par Null variables: 
\par In method doInBackground found:
\par \tab --> notebook
\par In method setupApi found:
\par \tab --> authResult
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 461f3cff58cb92a5369aa0ca0255ed7a19b7e6c1 and eb36509601876477d5fdd8caf82986119f747027:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 28
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 461f3cff58cb92a5369aa0ca0255ed7a19b7e6c1
\par 
\par Added DiskBackedByteStore.java to ./twicca_evernote_plugin/ repository source files.
\par Added EDAMUtil.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileData.java to ./twicca_evernote_plugin/ repository source files.
\par Added FileDataException.java to ./twicca_evernote_plugin/ repository source files.
\par Added TAndroidHttpClient.java to ./twicca_evernote_plugin/ repository source files.
\par Added UriData.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaEvernoteUploader.java to ./twicca_evernote_plugin/ repository source files.
\par Added TwiccaPluginSettings.java to ./twicca_evernote_plugin/ repository source files.
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file DiskBackedByteStore.java************
\par 
\par Null checks:
\par current == null?current = byteArray = new ByteArrayOutputStream();
\par fileInputStream != null?try \{
\par         fileInputStream.close();
\par       \} catch (IOException e) \{
\par       \}
\par byteArray != null?return new ByteArrayInputStream(byteArray.toByteArray());
\par 
\par Null fields: 
\par \tab --> file
\par \tab --> fileInputStream
\par \tab --> current
\par \tab --> byteArray
\par \tab --> fileoutputStream
\par 
\par Null variables: 
\par Null assignments: 
\par In method clear found: 
\par \tab --> byteArray
\par \tab --> current
\par \tab --> fileInputStream
\par In method reset found: 
\par \tab --> exception
\par In method swapToDisk found: 
\par \tab --> byteArray
\par ************ For file EDAMUtil.java************
\par 
\par Null checks:
\par customHeaders != null?for (Entry<String, String> header : customHeaders.entrySet()) \{
\par \tab     \tab \tab transport.setCustomHeader(header.getKey(), header.getValue());
\par \tab     \tab \}
\par userAgent != null?transport.setCustomHeader("User-Agent", userAgent);
\par string == null?return null;
\par bytes == null?return null;
\par null == d.getBody()?return null;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file FileData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(ByteBuffer.wrap(this.getBodyHash()));
\par         oprot.writeFieldEnd();
\par       \}
\par this.mBodyFile != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par s != null?s.close();
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mBodyFile
\par 
\par Null variables: 
\par In method write found:
\par \tab --> s
\par Null assignments: 
\par ************ For file FileDataException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TAndroidHttpClient.java************
\par 
\par Null checks:
\par customHeaders_ == null?customHeaders_ = new HashMap<String, String>();
\par null != inputStream_?try \{
\par         inputStream_.close();
\par       \} catch (IOException ioe) \{
\par         ;
\par       \}
\par mConnectionManager != null?mConnectionManager.shutdown();
\par inputStream_ == null?throw new TTransportException("Response buffer is empty, no request.");
\par mConnectionManager != null?mConnectionManager.closeExpiredConnections();
\par customHeaders_ != null?for (Map.Entry<String, String> header : customHeaders_.entrySet()) \{
\par           request.addHeader(header.getKey(), header.getValue());
\par         \}
\par userAgent == null?request.addHeader("User-Agent", userAgent == null ? "Java/THttpClient"
\par           : userAgent)
\par httpEntity != null?httpEntity.consumeContent();
\par this.request != null?this.request.abort();
\par 
\par Null fields: 
\par \tab --> userAgent
\par \tab --> request
\par \tab --> url_
\par \tab --> customHeaders_
\par \tab --> requestBuffer_
\par \tab --> mConnectionManager
\par \tab --> inputStream_
\par 
\par Null variables: 
\par In method flush found:
\par \tab --> httpEntity
\par Null assignments: 
\par In method flush found: 
\par \tab --> this.request
\par In method close found: 
\par \tab --> inputStream_
\par \tab --> mConnectionManager
\par ************ For file UriData.java************
\par 
\par Null checks:
\par this.getBodyHash() != null?if (isSetBodyHash()) \{
\par         oprot.writeFieldBegin(BODY_HASH_FIELD_DESC);
\par         oprot.writeBinary(this.getBodyHash());
\par         oprot.writeFieldEnd();
\par       \}
\par mUri != null?oprot.writeFieldBegin(BODY_FIELD_DESC);
\par getBodyHash() == null?throw new TProtocolException("Invalid null field: bodyHash");
\par 
\par Null fields: 
\par \tab --> mUri
\par \tab --> mContext
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TwiccaEvernoteUploader.java************
\par 
\par Null checks:
\par mProgressDialog != null?mProgressDialog.dismiss();
\par mToastMessage != null?Toast.makeText(mContext, mToastMessage, Toast.LENGTH_LONG).show();
\par getNoteStore() != null?Notebook notebook = null;
\par notebook == null?notebook = new Notebook();
\par 
\par Null fields: 
\par \tab --> mPrefs
\par \tab --> mContext
\par \tab --> mEvernoteNotebook
\par \tab --> mEditNotebook
\par \tab --> mEvernoteTags
\par \tab --> mEditTags
\par \tab --> mProgressDialog
\par \tab --> mScreenName
\par \tab --> mUsername
\par \tab --> mCreatedAt
\par \tab --> mBodyText
\par \tab --> mToastMessage
\par \tab --> mEvernoteUsername
\par \tab --> mEvernotePassword
\par \tab --> mUserStore
\par 
\par Null variables: 
\par In method doInBackground found:
\par \tab --> notebook
\par In method setupApi found:
\par \tab --> authResult
\par Null assignments: 
\par In method onPreExecute found: 
\par \tab --> mToastMessage
\par In method onPostExecute found: 
\par \tab --> mProgressDialog
\par ************ For file TwiccaPluginSettings.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 337b18a9bd91849a7bd3f8c35d9a06284a6f2a55 and 461f3cff58cb92a5369aa0ca0255ed7a19b7e6c1:
\par \tab --> Added null checks = 2
\par \tab --> Removed null checks = 28
\par \tab --> Null dereferences checked for null = 0
\par Null checks found in initial commit -- added at creation of the repository.
\par ****Analysis complete for first commit****
\par Takuo Kitame added null count = 2 in repository twicca_evernote_plugin
\par Takuo Kitame removed null count = 28 in repository twicca_evernote_plugin
\par Takuo Kitame deref count = 0 in repository twicca_evernote_plugin
\par GitAPIException thrown!
\par Cannot revert commit '337b18a9bd91849a7bd3f8c35d9a06284a6f2a55' because it has 0 parents, only commits with exactly one parent are supported}{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid5506299 
\par }\pard\plain \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af31507\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 
\af31507 \ltrch\fcs0 \insrsid3562586 
\par }{\*\themedata 504b030414000600080000002100e9de0fbfff0000001c020000130000005b436f6e74656e745f54797065735d2e786d6cac91cb4ec3301045f748fc83e52d4a
9cb2400825e982c78ec7a27cc0c8992416c9d8b2a755fbf74cd25442a820166c2cd933f79e3be372bd1f07b5c3989ca74aaff2422b24eb1b475da5df374fd9ad
5689811a183c61a50f98f4babebc2837878049899a52a57be670674cb23d8e90721f90a4d2fa3802cb35762680fd800ecd7551dc18eb899138e3c943d7e503b6
b01d583deee5f99824e290b4ba3f364eac4a430883b3c092d4eca8f946c916422ecab927f52ea42b89a1cd59c254f919b0e85e6535d135a8de20f20b8c12c3b0
0c895fcf6720192de6bf3b9e89ecdbd6596cbcdd8eb28e7c365ecc4ec1ff1460f53fe813d3cc7f5b7f020000ffff0300504b030414000600080000002100a5d6
a7e7c0000000360100000b0000005f72656c732f2e72656c73848fcf6ac3300c87ef85bd83d17d51d2c31825762fa590432fa37d00e1287f68221bdb1bebdb4f
c7060abb0884a4eff7a93dfeae8bf9e194e720169aaa06c3e2433fcb68e1763dbf7f82c985a4a725085b787086a37bdbb55fbc50d1a33ccd311ba548b6309512
0f88d94fbc52ae4264d1c910d24a45db3462247fa791715fd71f989e19e0364cd3f51652d73760ae8fa8c9ffb3c330cc9e4fc17faf2ce545046e37944c69e462
a1a82fe353bd90a865aad41ed0b5b8f9d6fd010000ffff0300504b0304140006000800000021006b799616830000008a0000001c0000007468656d652f746865
6d652f7468656d654d616e616765722e786d6c0ccc4d0ac3201040e17da17790d93763bb284562b2cbaebbf600439c1a41c7a0d29fdbd7e5e38337cedf14d59b
4b0d592c9c070d8a65cd2e88b7f07c2ca71ba8da481cc52c6ce1c715e6e97818c9b48d13df49c873517d23d59085adb5dd20d6b52bd521ef2cdd5eb9246a3d8b
4757e8d3f729e245eb2b260a0238fd010000ffff0300504b03041400060008000000210030dd4329a8060000a41b0000160000007468656d652f7468656d652f
7468656d65312e786d6cec594f6fdb3614bf0fd87720746f6327761a07758ad8b19b2d4d1bc46e871e698996d850a240d2497d1bdae38001c3ba618715d86d87
615b8116d8a5fb34d93a6c1dd0afb0475292c5585e9236d88aad3e2412f9e3fbff1e1fa9abd7eec70c1d1221294fda5efd72cd4324f1794093b0eddd1ef62fad
79482a9c0498f184b4bd2991deb58df7dfbb8ad755446282607d22d771db8b944ad79796a40fc3585ee62949606ecc458c15bc8a702910f808e8c66c69b9565b
5d8a314d3c94e018c8de1a8fa94fd05093f43672e23d06af89927ac06762a049136785c10607758d9053d965021d62d6f6804fc08f86e4bef210c352c144dbab
999fb7b4717509af678b985ab0b6b4ae6f7ed9ba6c4170b06c788a705430adf71bad2b5b057d03606a1ed7ebf5babd7a41cf00b0ef83a6569632cd467faddec9
699640f6719e76b7d6ac355c7c89feca9cccad4ea7d36c65b258a206641f1b73f8b5da6a6373d9c11b90c537e7f08dce66b7bbeae00dc8e257e7f0fd2badd586
8b37a088d1e4600ead1ddaef67d40bc898b3ed4af81ac0d76a197c86826828a24bb318f3442d8ab518dfe3a20f000d6458d104a9694ac6d88728eee2782428d6
0cf03ac1a5193be4cbb921cd0b495fd054b5bd0f530c1931a3f7eaf9f7af9e3f45c70f9e1d3ff8e9f8e1c3e3073f5a42ceaa6d9c84e5552fbffdeccfc71fa33f
9e7ef3f2d117d57859c6fffac327bffcfc793510d26726ce8b2f9ffcf6ecc98baf3efdfdbb4715f04d814765f890c644a29be408edf3181433567125272371be
15c308d3f28acd249438c19a4b05fd9e8a1cf4cd296699771c393ac4b5e01d01e5a30a787d72cf1178108989a2159c77a2d801ee72ce3a5c545a6147f32a9979
3849c26ae66252c6ed637c58c5bb8b13c7bfbd490a75330f4b47f16e441c31f7184e140e494214d273fc80900aedee52ead87597fa824b3e56e82e451d4c2b4d
32a423279a668bb6690c7e9956e90cfe766cb37b077538abd27a8b1cba48c80acc2a841f12e698f13a9e281c57911ce298950d7e03aba84ac8c154f8655c4f2a
f074481847bd804859b5e696007d4b4edfc150b12addbecba6b18b148a1e54d1bc81392f23b7f84137c2715a851dd0242a633f900710a218ed715505dfe56e86
e877f0034e16bafb0e258ebb4faf06b769e888340b103d331115bebc4eb813bf83291b63624a0d1475a756c734f9bbc2cd28546ecbe1e20a3794ca175f3fae90
fb6d2dd99bb07b55e5ccf68942bd0877b23c77b908e8db5f9db7f024d9239010f35bd4bbe2fcae387bfff9e2bc289f2fbe24cfaa301468dd8bd846dbb4ddf1c2
ae7b4c191ba8292337a469bc25ec3d411f06f53a73e224c5292c8de0516732307070a1c0660d125c7d44553488700a4d7bddd3444299910e254ab984c3a219ae
a4adf1d0f82b7bd46cea4388ad1c12ab5d1ed8e1153d9c9f350a3246aad01c6873462b9ac05999ad5cc988826eafc3acae853a33b7ba11cd1445875ba1b236b1
399483c90bd560b0b0263435085a21b0f22a9cf9356b38ec6046026d77eba3dc2dc60b17e92219e180643ed27acffba86e9c94c7ca9c225a0f1b0cfae0788ad5
4adc5a9aec1b703b8b93caec1a0bd8e5de7b132fe5113cf312503b998e2c2927274bd051db6b35979b1ef271daf6c6704e86c73805af4bdd476216c26593af84
0dfb5393d964f9cc9bad5c313709ea70f561ed3ea7b053075221d51696910d0d339585004b34272bff7213cc7a510a5454a3b349b1b206c1f0af490176745d4b
c663e2abb2b34b23da76f6352ba57ca2881844c1111ab189d8c7e07e1daaa04f40255c77988aa05fe06e4e5bdb4cb9c5394bbaf28d98c1d971ccd20867e556a7
689ec9166e0a522183792b8907ba55ca6e943bbf2a26e52f48957218ffcf54d1fb09dc3eac04da033e5c0d0b8c74a6b43d2e54c4a10aa511f5fb021a07533b20
5ae07e17a621a8e082dafc17e450ffb739676998b48643a4daa7211214f623150942f6a02c99e83b85583ddbbb2c4996113211551257a656ec1139246ca86be0
aadedb3d1441a89b6a929501833b197fee7b9641a3503739e57c732a59b1f7da1cf8a73b1f9bcca0945b874d4393dbbf10b1680f66bbaa5d6f96e77b6f59113d
316bb31a795600b3d256d0cad2fe354538e7566b2bd69cc6cbcd5c38f0e2bcc63058344429dc2121fd07f63f2a7c66bf76e80d75c8f7a1b622f878a18941d840
545fb28d07d205d20e8ea071b283369834296bdaac75d256cb37eb0bee740bbe278cad253b8bbfcf69eca23973d939b97891c6ce2cecd8da8e2d343578f6648a
c2d0383fc818c798cf64e52f597c740f1cbd05df0c264c49134cf09d4a60e8a107260f20f92d47b374e32f000000ffff0300504b030414000600080000002100
0dd1909fb60000001b010000270000007468656d652f7468656d652f5f72656c732f7468656d654d616e616765722e786d6c2e72656c73848f4d0ac2301484f7
8277086f6fd3ba109126dd88d0add40384e4350d363f2451eced0dae2c082e8761be9969bb979dc9136332de3168aa1a083ae995719ac16db8ec8e4052164e89
d93b64b060828e6f37ed1567914b284d262452282e3198720e274a939cd08a54f980ae38a38f56e422a3a641c8bbd048f7757da0f19b017cc524bd62107bd500
1996509affb3fd381a89672f1f165dfe514173d9850528a2c6cce0239baa4c04ca5bbabac4df000000ffff0300504b01022d0014000600080000002100e9de0f
bfff0000001c0200001300000000000000000000000000000000005b436f6e74656e745f54797065735d2e786d6c504b01022d0014000600080000002100a5d6
a7e7c0000000360100000b00000000000000000000000000300100005f72656c732f2e72656c73504b01022d00140006000800000021006b799616830000008a
0000001c00000000000000000000000000190200007468656d652f7468656d652f7468656d654d616e616765722e786d6c504b01022d00140006000800000021
0030dd4329a8060000a41b00001600000000000000000000000000d60200007468656d652f7468656d652f7468656d65312e786d6c504b01022d001400060008
00000021000dd1909fb60000001b0100002700000000000000000000000000b20900007468656d652f7468656d652f5f72656c732f7468656d654d616e616765722e786d6c2e72656c73504b050600000000050005005d010000ad0a00000000}
{\*\colorschememapping 3c3f786d6c2076657273696f6e3d22312e302220656e636f64696e673d225554462d3822207374616e64616c6f6e653d22796573223f3e0d0a3c613a636c724d
617020786d6c6e733a613d22687474703a2f2f736368656d61732e6f70656e786d6c666f726d6174732e6f72672f64726177696e676d6c2f323030362f6d6169
6e22206267313d226c743122207478313d22646b3122206267323d226c743222207478323d22646b322220616363656e74313d22616363656e74312220616363
656e74323d22616363656e74322220616363656e74333d22616363656e74332220616363656e74343d22616363656e74342220616363656e74353d22616363656e74352220616363656e74363d22616363656e74362220686c696e6b3d22686c696e6b2220666f6c486c696e6b3d22666f6c486c696e6b222f3e}
{\*\latentstyles\lsdstimax267\lsdlockeddef0\lsdsemihiddendef1\lsdunhideuseddef1\lsdqformatdef0\lsdprioritydef99{\lsdlockedexcept \lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority0 \lsdlocked0 Normal;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 1;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 2;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 3;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 4;
\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 5;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 6;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 7;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 8;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 9;
\lsdpriority39 \lsdlocked0 toc 1;\lsdpriority39 \lsdlocked0 toc 2;\lsdpriority39 \lsdlocked0 toc 3;\lsdpriority39 \lsdlocked0 toc 4;\lsdpriority39 \lsdlocked0 toc 5;\lsdpriority39 \lsdlocked0 toc 6;\lsdpriority39 \lsdlocked0 toc 7;
\lsdpriority39 \lsdlocked0 toc 8;\lsdpriority39 \lsdlocked0 toc 9;\lsdqformat1 \lsdpriority35 \lsdlocked0 caption;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority10 \lsdlocked0 Title;\lsdpriority1 \lsdlocked0 Default Paragraph Font;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority11 \lsdlocked0 Subtitle;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority22 \lsdlocked0 Strong;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority20 \lsdlocked0 Emphasis;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority59 \lsdlocked0 Table Grid;\lsdunhideused0 \lsdlocked0 Placeholder Text;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority1 \lsdlocked0 No Spacing;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 1;\lsdunhideused0 \lsdlocked0 Revision;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority34 \lsdlocked0 List Paragraph;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority29 \lsdlocked0 Quote;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority30 \lsdlocked0 Intense Quote;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority19 \lsdlocked0 Subtle Emphasis;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority21 \lsdlocked0 Intense Emphasis;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority31 \lsdlocked0 Subtle Reference;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority32 \lsdlocked0 Intense Reference;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority33 \lsdlocked0 Book Title;\lsdpriority37 \lsdlocked0 Bibliography;\lsdqformat1 \lsdpriority39 \lsdlocked0 TOC Heading;}}{\*\datastore 010500000200000018000000
4d73786d6c322e534158584d4c5265616465722e362e3000000000000000000000060000
d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff090006000000000000000000000001000000010000000000000000100000feffffff00000000feffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffdfffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffff52006f006f007400200045006e00740072007900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000500ffffffffffffffffffffffff0c6ad98892f1d411a65f0040963251e500000000000000000000000040ef
d699912ed001feffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000105000000000000}}