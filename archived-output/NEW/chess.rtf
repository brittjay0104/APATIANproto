{\rtf1\adeflang1025\ansi\ansicpg1252\uc1\adeff31507\deff0\stshfdbch31506\stshfloch31506\stshfhich31506\stshfbi31507\deflang1033\deflangfe1033\themelang1033\themelangfe0\themelangcs0{\fonttbl{\f0\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fbidi \fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fbidi \fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f3\fbidi \froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}{\f4\fbidi \fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Helvetica;}
{\f5\fbidi \fmodern\fcharset0\fprq1{\*\panose 02070409020205020404}Courier;}{\f6\fbidi \froman\fcharset0\fprq2{\*\panose 02020603040505020304}Tms Rmn;}{\f7\fbidi \fswiss\fcharset0\fprq2{\*\panose 020b0604020202030204}Helv;}
{\f8\fbidi \froman\fcharset0\fprq2{\*\panose 02040503060506020304}New York;}{\f9\fbidi \fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}System;}{\f10\fbidi \fnil\fcharset2\fprq2{\*\panose 05000000000000000000}Wingdings;}
{\f11\fbidi \fmodern\fcharset128\fprq1{\*\panose 02020609040205080304}MS Mincho{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}{\f12\fbidi \fnil\fcharset129\fprq1{\*\panose 02030600000101010101}Batang{\*\falt \'b9\'d9\'c5\'c1};}
{\f13\fbidi \fnil\fcharset134\fprq2{\*\panose 02010600030101010101}SimSun{\*\falt \'cb\'ce\'cc\'e5};}{\f14\fbidi \fnil\fcharset136\fprq2{\*\panose 02020500000000000000}PMingLiU{\*\falt \'b7\'73\'b2\'d3\'a9\'fa\'c5\'e9};}
{\f15\fbidi \fmodern\fcharset128\fprq1{\*\panose 020b0609070205080204}MS Gothic{\*\falt \'82\'6c\'82\'72 \'83\'53\'83\'56\'83\'62\'83\'4e};}{\f16\fbidi \fmodern\fcharset129\fprq1{\*\panose 020b0600000101010101}Dotum{\*\falt \'b5\'b8\'bf\'f2};}
{\f17\fbidi \fmodern\fcharset134\fprq1{\*\panose 02010609060101010101}SimHei{\*\falt \'ba\'da\'cc\'e5};}{\f18\fbidi \fmodern\fcharset136\fprq1{\*\panose 02020509000000000000}MingLiU{\*\falt \'b2\'d3\'a9\'fa\'c5\'e9};}
{\f19\fbidi \froman\fcharset128\fprq1{\*\panose 02020609040305080305}Mincho{\*\falt \'96\'be\'92\'a9};}{\f20\fbidi \froman\fcharset129\fprq1{\*\panose 020b0600000101010101}Gulim{\*\falt \'b1\'bc\'b8\'b2};}
{\f21\fbidi \froman\fcharset0\fprq2{\*\panose 02040604050505020304}Century;}{\f22\fbidi \froman\fcharset222\fprq2{\*\panose 02020603050405020304}Angsana New;}{\f23\fbidi \froman\fcharset222\fprq2{\*\panose 020b0304020202020204}Cordia New;}
{\f24\fbidi \froman\fcharset1\fprq2{\*\panose 02040503050203030202}Mangal;}{\f25\fbidi \froman\fcharset1\fprq2{\*\panose 020b0604020202020204}Latha;}{\f26\fbidi \froman\fcharset0\fprq2{\*\panose 010a0502050306030303}Sylfaen;}
{\f27\fbidi \froman\fcharset1\fprq2{\*\panose 020b0502040204020203}Vrinda;}{\f28\fbidi \froman\fcharset1\fprq2{\*\panose 020b0502040204020203}Raavi;}{\f29\fbidi \froman\fcharset1\fprq2{\*\panose 020b0502040204020203}Shruti;}
{\f30\fbidi \froman\fcharset1\fprq2{\*\panose 00000400000000000000}Sendnya;}{\f31\fbidi \froman\fcharset1\fprq2{\*\panose 020b0502040204020203}Gautami;}{\f32\fbidi \froman\fcharset1\fprq2{\*\panose 020b0502040204020203}Tunga;}
{\f33\fbidi \froman\fcharset1\fprq2{\*\panose 03080600000000000000}Estrangelo Edessa;}{\f34\fbidi \froman\fcharset1\fprq2{\*\panose 02040503050406030204}Cambria Math;}{\f35\fbidi \froman\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial Unicode MS;}
{\f36\fbidi \froman\fcharset0\fprq2{\*\panose 02040503050406030204}Cambria;}{\f37\fbidi \fswiss\fcharset0\fprq2{\*\panose 020f0502020204030204}Calibri;}{\f38\fbidi \fswiss\fcharset0\fprq2{\*\panose 020b0604030504040204}Tahoma;}
{\f39\fbidi \fmodern\fcharset0\fprq1{\*\panose 020b0609020204030204}Consolas;}{\flomajor\f31500\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\fdbmajor\f31501\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fhimajor\f31502\fbidi \froman\fcharset0\fprq2{\*\panose 02040503050406030204}Cambria;}
{\fbimajor\f31503\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\flominor\f31504\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\fdbminor\f31505\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fhiminor\f31506\fbidi \fswiss\fcharset0\fprq2{\*\panose 020f0502020204030204}Calibri;}
{\fbiminor\f31507\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f40\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\f41\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\f43\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\f44\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\f45\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f46\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\f47\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\f48\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\f50\fbidi \fswiss\fcharset238\fprq2 Arial CE;}{\f51\fbidi \fswiss\fcharset204\fprq2 Arial Cyr;}
{\f53\fbidi \fswiss\fcharset161\fprq2 Arial Greek;}{\f54\fbidi \fswiss\fcharset162\fprq2 Arial Tur;}{\f55\fbidi \fswiss\fcharset177\fprq2 Arial (Hebrew);}{\f56\fbidi \fswiss\fcharset178\fprq2 Arial (Arabic);}
{\f57\fbidi \fswiss\fcharset186\fprq2 Arial Baltic;}{\f58\fbidi \fswiss\fcharset163\fprq2 Arial (Vietnamese);}{\f60\fbidi \fmodern\fcharset238\fprq1 Courier New CE;}{\f61\fbidi \fmodern\fcharset204\fprq1 Courier New Cyr;}
{\f63\fbidi \fmodern\fcharset161\fprq1 Courier New Greek;}{\f64\fbidi \fmodern\fcharset162\fprq1 Courier New Tur;}{\f65\fbidi \fmodern\fcharset177\fprq1 Courier New (Hebrew);}{\f66\fbidi \fmodern\fcharset178\fprq1 Courier New (Arabic);}
{\f67\fbidi \fmodern\fcharset186\fprq1 Courier New Baltic;}{\f68\fbidi \fmodern\fcharset163\fprq1 Courier New (Vietnamese);}{\f152\fbidi \fmodern\fcharset0\fprq1 MS Mincho Western{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}
{\f150\fbidi \fmodern\fcharset238\fprq1 MS Mincho CE{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}{\f151\fbidi \fmodern\fcharset204\fprq1 MS Mincho Cyr{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}
{\f153\fbidi \fmodern\fcharset161\fprq1 MS Mincho Greek{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}{\f154\fbidi \fmodern\fcharset162\fprq1 MS Mincho Tur{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}
{\f157\fbidi \fmodern\fcharset186\fprq1 MS Mincho Baltic{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}{\f301\fbidi \froman\fcharset204\fprq2 Sylfaen Cyr;}{\f303\fbidi \froman\fcharset161\fprq2 Sylfaen Greek;}
{\f400\fbidi \froman\fcharset238\fprq2 Cambria CE;}{\f401\fbidi \froman\fcharset204\fprq2 Cambria Cyr;}{\f403\fbidi \froman\fcharset161\fprq2 Cambria Greek;}{\f404\fbidi \froman\fcharset162\fprq2 Cambria Tur;}
{\f407\fbidi \froman\fcharset186\fprq2 Cambria Baltic;}{\f408\fbidi \froman\fcharset163\fprq2 Cambria (Vietnamese);}{\f410\fbidi \fswiss\fcharset238\fprq2 Calibri CE;}{\f411\fbidi \fswiss\fcharset204\fprq2 Calibri Cyr;}
{\f413\fbidi \fswiss\fcharset161\fprq2 Calibri Greek;}{\f414\fbidi \fswiss\fcharset162\fprq2 Calibri Tur;}{\f417\fbidi \fswiss\fcharset186\fprq2 Calibri Baltic;}{\f418\fbidi \fswiss\fcharset163\fprq2 Calibri (Vietnamese);}
{\f430\fbidi \fmodern\fcharset238\fprq1 Consolas CE;}{\f431\fbidi \fmodern\fcharset204\fprq1 Consolas Cyr;}{\f433\fbidi \fmodern\fcharset161\fprq1 Consolas Greek;}{\f434\fbidi \fmodern\fcharset162\fprq1 Consolas Tur;}
{\f437\fbidi \fmodern\fcharset186\fprq1 Consolas Baltic;}{\f438\fbidi \fmodern\fcharset163\fprq1 Consolas (Vietnamese);}{\flomajor\f31508\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\flomajor\f31509\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\flomajor\f31511\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\flomajor\f31512\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\flomajor\f31513\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\flomajor\f31514\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\flomajor\f31515\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\flomajor\f31516\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fdbmajor\f31518\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fdbmajor\f31519\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\fdbmajor\f31521\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fdbmajor\f31522\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fdbmajor\f31523\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\fdbmajor\f31524\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fdbmajor\f31525\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fdbmajor\f31526\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\fhimajor\f31528\fbidi \froman\fcharset238\fprq2 Cambria CE;}{\fhimajor\f31529\fbidi \froman\fcharset204\fprq2 Cambria Cyr;}{\fhimajor\f31531\fbidi \froman\fcharset161\fprq2 Cambria Greek;}{\fhimajor\f31532\fbidi \froman\fcharset162\fprq2 Cambria Tur;}
{\fhimajor\f31535\fbidi \froman\fcharset186\fprq2 Cambria Baltic;}{\fhimajor\f31536\fbidi \froman\fcharset163\fprq2 Cambria (Vietnamese);}{\fbimajor\f31538\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\fbimajor\f31539\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fbimajor\f31541\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fbimajor\f31542\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\fbimajor\f31543\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fbimajor\f31544\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fbimajor\f31545\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\fbimajor\f31546\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\flominor\f31548\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\flominor\f31549\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\flominor\f31551\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\flominor\f31552\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\flominor\f31553\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\flominor\f31554\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\flominor\f31555\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\flominor\f31556\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\fdbminor\f31558\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fdbminor\f31559\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fdbminor\f31561\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}
{\fdbminor\f31562\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fdbminor\f31563\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fdbminor\f31564\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\fdbminor\f31565\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fdbminor\f31566\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fhiminor\f31568\fbidi \fswiss\fcharset238\fprq2 Calibri CE;}
{\fhiminor\f31569\fbidi \fswiss\fcharset204\fprq2 Calibri Cyr;}{\fhiminor\f31571\fbidi \fswiss\fcharset161\fprq2 Calibri Greek;}{\fhiminor\f31572\fbidi \fswiss\fcharset162\fprq2 Calibri Tur;}
{\fhiminor\f31575\fbidi \fswiss\fcharset186\fprq2 Calibri Baltic;}{\fhiminor\f31576\fbidi \fswiss\fcharset163\fprq2 Calibri (Vietnamese);}{\fbiminor\f31578\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\fbiminor\f31579\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fbiminor\f31581\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fbiminor\f31582\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\fbiminor\f31583\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fbiminor\f31584\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fbiminor\f31585\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\fbiminor\f31586\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;
\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\*\defchp \f31506\fs22 }{\*\defpap 
\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 }\noqfpromote {\stylesheet{\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 
\af31507\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext0 \sqformat \spriority0 \styrsid14821358 Normal;}{\*\cs10 \additive \ssemihidden \sunhideused \spriority1 Default Paragraph Font;}{\*
\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tblind0\tblindtype3\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv \ql \li0\ri0\sa200\sl276\slmult1
\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af31507\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext11 \ssemihidden \sunhideused Normal Table;}{
\s15\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af31507\afs21\alang1025 \ltrch\fcs0 \f39\fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 
\sbasedon0 \snext15 \slink16 \sunhideused \styrsid14821358 Plain Text;}{\*\cs16 \additive \rtlch\fcs1 \af0\afs21 \ltrch\fcs0 \f39\fs21 \sbasedon10 \slink15 \slocked \styrsid14821358 Plain Text Char;}}{\*\revtbl {Unknown;}}{\*\rsidtbl \rsid1461392\rsid5267074\rsid14821358}
{\mmathPr\mmathFont34\mbrkBin0\mbrkBinSub0\msmallFrac0\mdispDef1\mlMargin0\mrMargin0\mdefJc1\mwrapIndent1440\mintLim0\mnaryLim1}{\info{\author BrittJ}{\operator BrittJ}{\creatim\yr2015\mo1\dy13\hr11\min47}{\revtim\yr2015\mo1\dy13\hr11\min52}{\version1}
{\edmins5}{\nofpages1374}{\nofwords258184}{\nofchars1471652}{\*\company Microsoft}{\nofcharsws1726384}{\vern49167}}{\*\xmlnstbl {\xmlns1 http://schemas.microsoft.com/office/word/2003/wordml}}
\paperw12240\paperh15840\margl1501\margr1502\margt1440\margb1440\gutter0\ltrsect 
\widowctrl\ftnbj\aenddoc\trackmoves0\trackformatting1\donotembedsysfont1\relyonvml0\donotembedlingdata0\grfdocevents0\validatexml1\showplaceholdtext0\ignoremixedcontent0\saveinvalidxml0\showxmlerrors1\noxlattoyen
\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\formshade\horzdoc\dgmargin\dghspace180\dgvspace180\dghorigin1501\dgvorigin1440\dghshow1\dgvshow1
\jexpand\viewkind1\viewscale100\pgbrdrhead\pgbrdrfoot\splytwnine\ftnlytwnine\htmautsp\nolnhtadjtbl\useltbaln\alntblind\lytcalctblwd\lyttblrtgr\lnbrkrule\nobrkwrptbl\snaptogridincell\allowfieldendsel\wrppunct
\asianbrkrule\rsidroot14821358\newtblstyruls\nogrowautofit\usenormstyforlist\noindnmbrts\felnbrelev\nocxsptable\indrlsweleven\noafcnsttbl\afelev\utinl\hwelev\spltpgpar\notcvasp\notbrkcnstfrctbl\notvatxbx\krnprsnet\cachedcolbal \nouicompat \fet0
{\*\wgrffmtfilter 2450}\nofeaturethrottle1\ilfomacatclnup0\ltrpar \sectd \ltrsect\linex0\endnhere\sectlinegrid360\sectdefaultcl\sectrsid10903958\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2
\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6
\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang 
{\pntxtb (}{\pntxta )}}\pard\plain \ltrpar\s15\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid14821358 \rtlch\fcs1 \af31507\afs21\alang1025 \ltrch\fcs0 
\f39\fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid14821358\charrsid10903958 0
\par William Speirs is responsible for commit a6c1cb6b2fe5c0553251808be7d41cfe9a625174
\par William Speirs is responsible for commit 4f483c3a199f8b4cb6d8880df5560a9afc5e8f59
\par William Speirs is responsible for commit 76ad5753b5cee6a6eacb4defc67aebe36753e3b8
\par William Speirs is responsible for commit 835c9397dced970240f4d4c1f076d0cc3ec3f5d4
\par William Speirs is responsible for commit a32b6de898010f17e3468a42c24779e99c5ca187
\par William Speirs is responsible for commit d9494d65adffbaf4646264e9a92fc179e73a2db3
\par William Speirs is responsible for commit 15cd44c7fb169262efc06c4075aab3d3216a80e8
\par William Speirs is responsible for commit 57f31d87e56deb6106760736cc232fbfde4075e1
\par William Speirs is responsible for commit 62d9eee021cc9c7e09cc91a480acdb2ad7a37039
\par William Speirs is responsible for commit 8daab33eb05629fabd81bbba3bfd34518f76c61a
\par William Speirs is responsible for commit b0023daa308570d61070665a69a55140e0cb0867
\par William Speirs is responsible for commit 8a960192e07399b0c757d6e685bc152b21619f09
\par William Speirs is responsible for commit 3851cee79ac4c87f0ae9dad1ed12e430107b8bd6
\par William Speirs is responsible for commit a498f094c8476a7f40550a6184efd65d12a59157
\par William Speirs is responsible for commit 33a0e6ea6ca15b91c3ec2fa056b1a2ad865a32dd
\par William Speirs is responsible for commit 1b2c7b98190ae06fb1a79a397fa6b6fcf970cde3
\par William Speirs is responsible for commit 5eb1373c79de3d8acb6a90ba767d1c6943dfb585
\par William Speirs is responsible for commit c68cc1196ad10bfa06f637169d938c4726cd3112
\par William Speirs is responsible for commit b9c0ef21a701f02adb06aab9b167118e4664f413
\par William Speirs is responsible for commit cce390ea46cdf5f464928994097f49f8088a86e6
\par William Speirs is responsible for commit a9da154e2dbde9d8af1e8b79ecc3c0a8ad6fa71d
\par William Speirs is responsible for commit a0c1c32a8c2c2eac28cde066c37d3fb8576637df
\par William Speirs is responsible for commit c7be096e77e09a4c5b02aa5091f497499afc5726
\par William Speirs is responsible for commit 37cf028af5911b98d2997a3a29827da9f658d3d4
\par William Speirs is responsible for commit 2d806074deb0bdc4e46e0bf1cb9e2d5585d9a0ea
\par William Speirs is responsible for commit ec5160606837a30edc6004667eb4d7cf3a2200eb
\par William Speirs is responsible for commit 0e42a0e3f2810c7490738c9c52b7e61124b757f1
\par William Speirs is responsible for commit ce88437916d27a3205cf12da3fa3d0d95ced0cca
\par William Speirs is responsible for commit 7796ca9fc4eadc875eb7c52b654c038cf1ef3406
\par William Speirs is responsible for commit b377ca2c7ec5d0736004417e22554e941f679862
\par William Speirs is responsible for commit a75ed8825fb75a9d423d7627c88a0e0d6362a8a0
\par William Speirs is responsible for commit ceceba9343d49df13973566e482655b9fc278241
\par William Speirs is responsible for commit b04800314d59ea53cbaf1bbb6e0718bcfc5f6534
\par William Speirs is responsible for commit 7012715d17fbd8b21808e95b3e4b10a170c8a98c
\par William Speirs is responsible for commit 0664571652e42c4735dd8f998d27abd898d5f7bf
\par William Speirs is responsible for commit 74499211d5e749847f4d6cd2d6d169733dfed35a
\par William Speirs is responsible for commit 4be5b277bcb65ee3b8e197f4d4420729f1eb7ef4
\par William Speirs is responsible for commit 45901e285d8560e4e6420ff80a153a17eb6f3e9e
\par William Speirs is responsible for commit 1597d4b248bfc9df1f4e3c2999d7ffe3f584a06a
\par William Speirs is responsible for commit 330775add96f6e7256e6801bdd61cc37961e75b7
\par William Speirs is responsible for commit e31ceb0b3de63de6c96e8d5183728f6ffe3300db
\par William Speirs is responsible for commit 819f81c266edcfb10a176edc3be6417d83199c01
\par William Speirs is responsible for commit 6f0d261f1846a0039f81e4029b56d3616b03eb72
\par William Speirs is responsible for commit 76b3cec9e9c44a7afb637666aeaef0e0eef6e87a
\par William Speirs is responsible for commit 3352244c630ab9a8dfb9b99c30b5e9ac809e2871
\par William Speirs is responsible for commit bf0574d135b2bac3ca85576a21ba8f0a69277dd8
\par William Speirs is responsible for commit 161e0991827bef36b0a5bc9183be895f25b57b01
\par William Speirs is responsible for commit 69cd4c48a07356fb3f2cb1b055d6e12525b8132a
\par William Speirs is responsible for commit 782b116608d4edae7712c6a2a02e166e1d09f144
\par William Speirs is responsible for commit e1160180a12f3a0849eb2258894feda354b6ed2f
\par William Speirs is responsible for commit b0b1d0ce0ebcf00b7e893ee6e23db5f56feacab4
\par William Speirs is responsible for commit 16623a142f5d4c97437946dced7d0feba3cd3bfd
\par William Speirs is responsible for commit 8b22ccf6322eedc46016b06d11f08e23b8d8dc6d
\par William Speirs is responsible for commit ce7aedac00ad175562dd4fc96d5294f3ef165391
\par William Speirs is responsible for commit c429797a95b7c92bd9029824fbecaf611f3de689
\par William Speirs is responsible for commit 26cb36408fa0bb788ca5b640c71c2fd22d4f055d
\par William Speirs is responsible for commit 65041594905b9a2e531d43ab408a38a0aebd1bd4
\par William Speirs is responsible for commit 93837e3ae5773e5a48ad5852fdb526eae12dc634
\par William Speirs is responsible for commit 7d78da8667896c1c65c27fcdf71c9f8415775295
\par William Speirs is responsible for commit 41cd9709bbbec993a064fbe5867ad2a9ce33b6b1
\par William Speirs is responsible for commit f7de4b7b7dc2889d9e8733647cfada1a8796f9be
\par William Speirs is responsible for commit a53cd8a42da7832d152aac5a3b5d6cecfc82e0a3
\par William Speirs is responsible for commit b977415e4a80870ab79fa0677fa76296b9c59f0a
\par William Speirs is responsible for commit d7636fb09a9264d867e0041a8c22e2a36e77b10a
\par William Speirs is responsible for commit aaad89a478cc07232ad478a975878f7a4795c922
\par William Speirs is responsible for commit e6dd36348524a64003e4495304d0cbdbaff3efd9
\par William Speirs is responsible for commit 0159ccb50c872cf0d28e1c3a54452140b1e79504
\par William Speirs is responsible for commit 13fcf3f3135e92ab2250085134f98f2904f265ea
\par William Speirs is responsible for commit 13685cb54532a0c0916d05916575a5c0b8600187
\par William Speirs is responsible for commit e04030e208a7eee68041c1dc851e03d7020e4fe9
\par William Speirs is responsible for commit 58c8660adea9f618f21cd5690791c54d7d4d193b
\par William Speirs is responsible for commit da80a3b496c1a5d63f4efc9bc4b9c0934b1367a3
\par William Speirs is responsible for commit 9ca002d73db7695fb7dd16e5d3337f414930bc91
\par William Speirs is responsible for commit adc7fbda86fc72e3149d8c182309207e59049ea4
\par William Speirs is responsible for commit c32af037500f59608b253dd579b85400a91db00b
\par William Speirs is responsible for commit f76e932183cce8f7846309afa8deae9a76d86fdf
\par William Speirs is responsible for commit 26e788e9ae03939b8586ac7ea44e7cc5e098f4a7
\par William Speirs is responsible for commit 4c8cbaff75964dbde7f6ebe28231408358d6022a
\par William Speirs is responsible for commit b553ca59b08846fc3ac3a0e93f9146f2cfcf22a4
\par William Speirs is responsible for commit f7dbab1c5ad66169005b13a2ba20400e7fca7bb5
\par William Speirs is responsible for commit ae9b2a9886126fd5e4cf7950827691a6a0ff4351
\par William Speirs is responsible for commit 243ac8b83ce0c83336694562eb9b16e0d0b025d5
\par William Speirs is responsible for commit cbdd04aeb61a8c314f6c57ae34167ca83a8903bb
\par William Speirs is responsible for commit ade64eaa4215b01efa8a268a33abbba4333b2c7d
\par William Speirs is responsible for commit af6d2f850f9c67b2a9395f26dab12fd262dc2bd2
\par William Speirs is responsible for commit 2e8252d937e86ac24019e31be0952a09d47182e6
\par William Speirs is responsible for commit b92dd068577cc1d6abcbdbc5f8d35b9e9e3e47df
\par William Speirs is responsible for commit 492d0ee0ff22f136fe796545cad7f342c93e5d57
\par William Speirs is responsible for commit 36432c9dd6e24f4e102cbc851729c1328442e00b
\par William Speirs is responsible for commit eee6a98a259f18c9f09e2189e85c0e025ff6f733
\par William Speirs is responsible for commit 23f5fc7639429d46f90737074e70dd526368d6c5
\par William Speirs is responsible for commit 22094c104b3388a7d0e8deed41f9a1a7ceec4953
\par William Speirs is responsible for commit 286f752caef997b3472baec00b71ddad9fa9a19e
\par William Speirs is responsible for commit 9a68b14bb98a13d3ea96fda763fc4f8444910208
\par William Speirs is responsible for commit 56251054b391dcdea97be3b407b02da26dd15bc0
\par William Speirs is responsible for commit 00b754a630b12a1f8071560c2bb7ae1178e867c5
\par William Speirs is responsible for commit 2e01cd025aae609c18355c48f2495567eb04c86f
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added NegaScoutSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaScoutSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par 
\par Reverted to commit a6c1cb6b2fe5c0553251808be7d41cfe9a625174
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added NegaScoutSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaScoutSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaScoutSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaScoutSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaScoutSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negaScout
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 4f483c3a199f8b4cb6d8880df5560a9afc5e8f59 and a6c1cb6b2fe5c0553251808be7d41cfe9a625174:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 4f483c3a199f8b4cb6d8880df5560a9afc5e8f59
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added NegaScoutSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaScoutSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaScoutSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negaScout
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaScoutSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaScoutSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negaScout
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 76ad5753b5cee6a6eacb4defc67aebe36753e3b8 and 4f483c3a199f8b4cb6d8880df5560a9afc5e8f59:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 76ad5753b5cee6a6eacb4defc67aebe36753e3b8
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added NegaScoutSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaScoutSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaScoutSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaScoutSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaScoutSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negaScout
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 835c9397dced970240f4d4c1f076d0cc3ec3f5d4 and 76ad5753b5cee6a6eacb4defc67aebe36753e3b8:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit 835c9397dced970240f4d4c1f076d0cc3ec3f5d4
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaScoutSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negaScout
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of a32b6de898010f17e3468a42c24779e99c5ca187 and 835c9397dced970240f4d4c1f076d0cc3ec3f5d4:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 0
\par 
\par Reverted to commit a32b6de898010f17e3468a42c24779e99c5ca187
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaScoutSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negaScout
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of d9494d65adffbaf4646264e9a92fc179e73a2db3 and a32b6de898010f17e3468a42c24779e99c5ca187:
\par \tab --> Added null checks = 0
\par \tab --> Removed null checks = 0
\par \tab --> Null dereferences checked for null = 0
\par GitAPIException thrown!
\par Cannot revert commit 'd9494d65adffbaf4646264e9a92fc179e73a2db3' because it has 2 parents, only commits with exactly one parent are supported
\par 
\par Reverted to commit 15cd44c7fb169262efc06c4075aab3d3216a80e8
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaScoutSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negaScout
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was added at revision 15cd44c7fb169262efc06c4075aab3d3216a80e8
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par Null check was removed at revision 15cd44c7fb169262efc06c4075aab3d3216a80e8
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was added at revision 15cd44c7fb169262efc06c4075aab3d3216a80e8
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par Null check was removed at revision 15cd44c7fb169262efc06c4075aab3d3216a80e8
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was added at revision 15cd44c7fb169262efc06c4075aab3d3216a80e8
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was removed at revision 15cd44c7fb169262efc06c4075aab3d3216a80e8
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 57f31d87e56deb6106760736cc232fbfde4075e1 and 15cd44c7fb169262efc06c4075aab3d3216a80e8:
\par \tab --> Added null checks = 3
\par \tab --> Removed null checks = 3
\par \tab --> Null dereferences checked for null = 3
\par 
\par Reverted to commit 57f31d87e56deb6106760736cc232fbfde4075e1
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaScoutSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negaScout
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par Null check was added at revision 57f31d87e56deb6106760736cc232fbfde4075e1
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par Null check was added at revision 57f31d87e56deb6106760736cc232fbfde4075e1
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was added at revision 57f31d87e56deb6106760736cc232fbfde4075e1
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 62d9eee021cc9c7e09cc91a480acdb2ad7a37039 and 57f31d87e56deb6106760736cc232fbfde4075e1:
\par \tab --> Added null checks = 6
\par \tab --> Removed null checks = 3
\par \tab --> Null dereferences checked for null = 3
\par 
\par Reverted to commit 62d9eee021cc9c7e09cc91a480acdb2ad7a37039
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaScoutSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negaScout
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 8daab33eb05629fabd81bbba3bfd34518f76c61a and 62d9eee021cc9c7e09cc91a480acdb2ad7a37039:
\par \tab --> Added null checks = 6
\par \tab --> Removed null checks = 3
\par \tab --> Null dereferences checked for null = 3
\par 
\par Reverted to commit 8daab33eb05629fabd81bbba3bfd34518f76c61a
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file NegaScoutSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negaScout
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of b0023daa308570d61070665a69a55140e0cb0867 and 8daab33eb05629fabd81bbba3bfd34518f76c61a:
\par \tab --> Added null checks = 6
\par \tab --> Removed null checks = 3
\par \tab --> Null dereferences checked for null = 3
\par 
\par Reverted to commit b0023daa308570d61070665a69a55140e0cb0867
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 8a960192e07399b0c757d6e685bc152b21619f09 and b0023daa308570d61070665a69a55140e0cb0867:
\par \tab --> Added null checks = 6
\par \tab --> Removed null checks = 3
\par \tab --> Null dereferences checked for null = 3
\par 
\par Reverted to commit 8a960192e07399b0c757d6e685bc152b21619f09
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 3851cee79ac4c87f0ae9dad1ed12e430107b8bd6 and 8a960192e07399b0c757d6e685bc152b21619f09:
\par \tab --> Added null checks = 6
\par \tab --> Removed null checks = 3
\par \tab --> Null dereferences checked for null = 3
\par 
\par Reverted to commit 3851cee79ac4c87f0ae9dad1ed12e430107b8bd6
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of a498f094c8476a7f40550a6184efd65d12a59157 and 3851cee79ac4c87f0ae9dad1ed12e430107b8bd6:
\par \tab --> Added null checks = 6
\par \tab --> Removed null checks = 3
\par \tab --> Null dereferences checked for null = 3
\par GitAPIException thrown!
\par Cannot revert commit 'a498f094c8476a7f40550a6184efd65d12a59157' because it has 2 parents, only commits with exactly one parent are supported
\par 
\par Reverted to commit 33a0e6ea6ca15b91c3ec2fa056b1a2ad865a32dd
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was removed at revision 33a0e6ea6ca15b91c3ec2fa056b1a2ad865a32dd
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was added at revision 33a0e6ea6ca15b91c3ec2fa056b1a2ad865a32dd
\par Null check was added at revision 33a0e6ea6ca15b91c3ec2fa056b1a2ad865a32dd
\par Null check was added at revision 33a0e6ea6ca15b91c3ec2fa056b1a2ad865a32dd
\par Null check was removed at revision 33a0e6ea6ca15b91c3ec2fa056b1a2ad865a32dd
\par Null check was removed at revision 33a0e6ea6ca15b91c3ec2fa056b1a2ad865a32dd
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was removed at revision 33a0e6ea6ca15b91c3ec2fa056b1a2ad865a32dd
\par Null check was removed at revision 33a0e6ea6ca15b91c3ec2fa056b1a2ad865a32dd
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par Null check was added at revision 33a0e6ea6ca15b91c3ec2fa056b1a2ad865a32dd
\par Null check was added at revision 33a0e6ea6ca15b91c3ec2fa056b1a2ad865a32dd
\par Null check was added at revision 33a0e6ea6ca15b91c3ec2fa056b1a2ad865a32dd
\par Null check was removed at revision 33a0e6ea6ca15b91c3ec2fa056b1a2ad865a32dd
\par Null check was removed at revision 33a0e6ea6ca15b91c3ec2fa056b1a2ad865a32dd
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was removed at revision 33a0e6ea6ca15b91c3ec2fa056b1a2ad865a32dd
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was removed at revision 33a0e6ea6ca15b91c3ec2fa056b1a2ad865a32dd
\par Null check was removed at revision 33a0e6ea6ca15b91c3ec2fa056b1a2ad865a32dd
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was added at revision 33a0e6ea6ca15b91c3ec2fa056b1a2ad865a32dd
\par Null check was added at revision 33a0e6ea6ca15b91c3ec2fa056b1a2ad865a32dd
\par Null check was added at revision 33a0e6ea6ca15b91c3ec2fa056b1a2ad865a32dd
\par Null check was removed at revision 33a0e6ea6ca15b91c3ec2fa056b1a2ad865a32dd
\par Null check was removed at revision 33a0e6ea6ca15b91c3ec2fa056b1a2ad865a32dd
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 1b2c7b98190ae06fb1a79a397fa6b6fcf970cde3 and 33a0e6ea6ca15b91c3ec2fa056b1a2ad865a32dd:
\par \tab --> Added null checks = 15
\par \tab --> Removed null checks = 15
\par \tab --> Null dereferences checked for null = 6
\par 
\par Reverted to commit 1b2c7b98190ae06fb1a79a397fa6b6fcf970cde3
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was removed at revision 1b2c7b98190ae06fb1a79a397fa6b6fcf970cde3
\par Null check was removed at revision 1b2c7b98190ae06fb1a79a397fa6b6fcf970cde3
\par Null check was added at revision 1b2c7b98190ae06fb1a79a397fa6b6fcf970cde3
\par Null check was added at revision 1b2c7b98190ae06fb1a79a397fa6b6fcf970cde3
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was added at revision 1b2c7b98190ae06fb1a79a397fa6b6fcf970cde3
\par Null check was added at revision 1b2c7b98190ae06fb1a79a397fa6b6fcf970cde3
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par Null check was removed at revision 1b2c7b98190ae06fb1a79a397fa6b6fcf970cde3
\par Null check was removed at revision 1b2c7b98190ae06fb1a79a397fa6b6fcf970cde3
\par Null check was added at revision 1b2c7b98190ae06fb1a79a397fa6b6fcf970cde3
\par Null check was added at revision 1b2c7b98190ae06fb1a79a397fa6b6fcf970cde3
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was added at revision 1b2c7b98190ae06fb1a79a397fa6b6fcf970cde3
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was added at revision 1b2c7b98190ae06fb1a79a397fa6b6fcf970cde3
\par Null check was added at revision 1b2c7b98190ae06fb1a79a397fa6b6fcf970cde3
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was removed at revision 1b2c7b98190ae06fb1a79a397fa6b6fcf970cde3
\par Null check was removed at revision 1b2c7b98190ae06fb1a79a397fa6b6fcf970cde3
\par Null check was added at revision 1b2c7b98190ae06fb1a79a397fa6b6fcf970cde3
\par Null check was added at revision 1b2c7b98190ae06fb1a79a397fa6b6fcf970cde3
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 5eb1373c79de3d8acb6a90ba767d1c6943dfb585 and 1b2c7b98190ae06fb1a79a397fa6b6fcf970cde3:
\par \tab --> Added null checks = 26
\par \tab --> Removed null checks = 21
\par \tab --> Null dereferences checked for null = 9
\par 
\par Reverted to commit 5eb1373c79de3d8acb6a90ba767d1c6943dfb585
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of c68cc1196ad10bfa06f637169d938c4726cd3112 and 5eb1373c79de3d8acb6a90ba767d1c6943dfb585:
\par \tab --> Added null checks = 26
\par \tab --> Removed null checks = 21
\par \tab --> Null dereferences checked for null = 9
\par GitAPIException thrown!
\par Cannot revert commit 'c68cc1196ad10bfa06f637169d938c4726cd3112' because it has 2 parents, only commits with exactly one parent are supported
\par 
\par Reverted to commit b9c0ef21a701f02adb06aab9b167118e4664f413
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of cce390ea46cdf5f464928994097f49f8088a86e6 and b9c0ef21a701f02adb06aab9b167118e4664f413:
\par \tab --> Added null checks = 26
\par \tab --> Removed null checks = 21
\par \tab --> Null dereferences checked for null = 9
\par 
\par Reverted to commit cce390ea46cdf5f464928994097f49f8088a86e6
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was added at revision cce390ea46cdf5f464928994097f49f8088a86e6
\par Null check was added at revision cce390ea46cdf5f464928994097f49f8088a86e6
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of a9da154e2dbde9d8af1e8b79ecc3c0a8ad6fa71d and cce390ea46cdf5f464928994097f49f8088a86e6:
\par \tab --> Added null checks = 28
\par \tab --> Removed null checks = 21
\par \tab --> Null dereferences checked for null = 9
\par GitAPIException thrown!
\par Cannot revert commit 'a9da154e2dbde9d8af1e8b79ecc3c0a8ad6fa71d' because it has 2 parents, only commits with exactly one parent are supported
\par 
\par Reverted to commit a0c1c32a8c2c2eac28cde066c37d3fb8576637df
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was added at revision a0c1c32a8c2c2eac28cde066c37d3fb8576637df
\par Null check was added at revision a0c1c32a8c2c2eac28cde066c37d3fb8576637df
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of c7be096e77e09a4c5b02aa5091f497499afc5726 and a0c1c32a8c2c2eac28cde066c37d3fb8576637df:
\par \tab --> Added null checks = 30
\par \tab --> Removed null checks = 21
\par \tab --> Null dereferences checked for null = 9
\par 
\par Reverted to commit c7be096e77e09a4c5b02aa5091f497499afc5726
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was added at revision c7be096e77e09a4c5b02aa5091f497499afc5726
\par Null check was added at revision c7be096e77e09a4c5b02aa5091f497499afc5726
\par Null check was added at revision c7be096e77e09a4c5b02aa5091f497499afc5726
\par Null check was added at revision c7be096e77e09a4c5b02aa5091f497499afc5726
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 37cf028af5911b98d2997a3a29827da9f658d3d4 and c7be096e77e09a4c5b02aa5091f497499afc5726:
\par \tab --> Added null checks = 34
\par \tab --> Removed null checks = 21
\par \tab --> Null dereferences checked for null = 9
\par 
\par Reverted to commit 37cf028af5911b98d2997a3a29827da9f658d3d4
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 2d806074deb0bdc4e46e0bf1cb9e2d5585d9a0ea and 37cf028af5911b98d2997a3a29827da9f658d3d4:
\par \tab --> Added null checks = 34
\par \tab --> Removed null checks = 21
\par \tab --> Null dereferences checked for null = 9
\par 
\par Reverted to commit 2d806074deb0bdc4e46e0bf1cb9e2d5585d9a0ea
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was added at revision 2d806074deb0bdc4e46e0bf1cb9e2d5585d9a0ea
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was added at revision 2d806074deb0bdc4e46e0bf1cb9e2d5585d9a0ea
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was added at revision 2d806074deb0bdc4e46e0bf1cb9e2d5585d9a0ea
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of ec5160606837a30edc6004667eb4d7cf3a2200eb and 2d806074deb0bdc4e46e0bf1cb9e2d5585d9a0ea:
\par \tab --> Added null checks = 37
\par \tab --> Removed null checks = 21
\par \tab --> Null dereferences checked for null = 11
\par 
\par Reverted to commit ec5160606837a30edc6004667eb4d7cf3a2200eb
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was removed at revision ec5160606837a30edc6004667eb4d7cf3a2200eb
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 0e42a0e3f2810c7490738c9c52b7e61124b757f1 and ec5160606837a30edc6004667eb4d7cf3a2200eb:
\par \tab --> Added null checks = 37
\par \tab --> Removed null checks = 22
\par \tab --> Null dereferences checked for null = 11
\par 
\par Reverted to commit 0e42a0e3f2810c7490738c9c52b7e61124b757f1
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of ce88437916d27a3205cf12da3fa3d0d95ced0cca and 0e42a0e3f2810c7490738c9c52b7e61124b757f1:
\par \tab --> Added null checks = 37
\par \tab --> Removed null checks = 22
\par \tab --> Null dereferences checked for null = 11
\par GitAPIException thrown!
\par Cannot revert commit 'ce88437916d27a3205cf12da3fa3d0d95ced0cca' because it has 2 parents, only commits with exactly one parent are supported
\par 
\par Reverted to commit 7796ca9fc4eadc875eb7c52b654c038cf1ef3406
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of b377ca2c7ec5d0736004417e22554e941f679862 and 7796ca9fc4eadc875eb7c52b654c038cf1ef3406:
\par \tab --> Added null checks = 37
\par \tab --> Removed null checks = 22
\par \tab --> Null dereferences checked for null = 11
\par 
\par Reverted to commit b377ca2c7ec5d0736004417e22554e941f679862
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of a75ed8825fb75a9d423d7627c88a0e0d6362a8a0 and b377ca2c7ec5d0736004417e22554e941f679862:
\par \tab --> Added null checks = 37
\par \tab --> Removed null checks = 22
\par \tab --> Null dereferences checked for null = 11
\par 
\par Reverted to commit a75ed8825fb75a9d423d7627c88a0e0d6362a8a0
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of ceceba9343d49df13973566e482655b9fc278241 and a75ed8825fb75a9d423d7627c88a0e0d6362a8a0:
\par \tab --> Added null checks = 37
\par \tab --> Removed null checks = 22
\par \tab --> Null dereferences checked for null = 11
\par GitAPIException thrown!
\par Cannot revert commit 'ceceba9343d49df13973566e482655b9fc278241' because it has 2 parents, only commits with exactly one parent are supported
\par 
\par Reverted to commit b04800314d59ea53cbaf1bbb6e0718bcfc5f6534
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was added at revision b04800314d59ea53cbaf1bbb6e0718bcfc5f6534
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 7012715d17fbd8b21808e95b3e4b10a170c8a98c and b04800314d59ea53cbaf1bbb6e0718bcfc5f6534:
\par \tab --> Added null checks = 38
\par \tab --> Removed null checks = 22
\par \tab --> Null dereferences checked for null = 11
\par 
\par Reverted to commit 7012715d17fbd8b21808e95b3e4b10a170c8a98c
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 0664571652e42c4735dd8f998d27abd898d5f7bf and 7012715d17fbd8b21808e95b3e4b10a170c8a98c:
\par \tab --> Added null checks = 38
\par \tab --> Removed null checks = 22
\par \tab --> Null dereferences checked for null = 11
\par 
\par Reverted to commit 0664571652e42c4735dd8f998d27abd898d5f7bf
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 74499211d5e749847f4d6cd2d6d169733dfed35a and 0664571652e42c4735dd8f998d27abd898d5f7bf:
\par \tab --> Added null checks = 38
\par \tab --> Removed null checks = 22
\par \tab --> Null dereferences checked for null = 11
\par 
\par Reverted to commit 74499211d5e749847f4d6cd2d6d169733dfed35a
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 4be5b277bcb65ee3b8e197f4d4420729f1eb7ef4 and 74499211d5e749847f4d6cd2d6d169733dfed35a:
\par \tab --> Added null checks = 38
\par \tab --> Removed null checks = 22
\par \tab --> Null dereferences checked for null = 11
\par 
\par Reverted to commit 4be5b277bcb65ee3b8e197f4d4420729f1eb7ef4
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was removed at revision 4be5b277bcb65ee3b8e197f4d4420729f1eb7ef4
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 45901e285d8560e4e6420ff80a153a17eb6f3e9e and 4be5b277bcb65ee3b8e197f4d4420729f1eb7ef4:
\par \tab --> Added null checks = 38
\par \tab --> Removed null checks = 23
\par \tab --> Null dereferences checked for null = 11
\par 
\par Reverted to commit 45901e285d8560e4e6420ff80a153a17eb6f3e9e
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 1597d4b248bfc9df1f4e3c2999d7ffe3f584a06a and 45901e285d8560e4e6420ff80a153a17eb6f3e9e:
\par \tab --> Added null checks = 38
\par \tab --> Removed null checks = 23
\par \tab --> Null dereferences checked for null = 11
\par 
\par Reverted to commit 1597d4b248bfc9df1f4e3c2999d7ffe3f584a06a
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 330775add96f6e7256e6801bdd61cc37961e75b7 and 1597d4b248bfc9df1f4e3c2999d7ffe3f584a06a:
\par \tab --> Added null checks = 38
\par \tab --> Removed null checks = 23
\par \tab --> Null dereferences checked for null = 11
\par 
\par Reverted to commit 330775add96f6e7256e6801bdd61cc37961e75b7
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of e31ceb0b3de63de6c96e8d5183728f6ffe3300db and 330775add96f6e7256e6801bdd61cc37961e75b7:
\par \tab --> Added null checks = 38
\par \tab --> Removed null checks = 23
\par \tab --> Null dereferences checked for null = 11
\par 
\par Reverted to commit e31ceb0b3de63de6c96e8d5183728f6ffe3300db
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 819f81c266edcfb10a176edc3be6417d83199c01 and e31ceb0b3de63de6c96e8d5183728f6ffe3300db:
\par \tab --> Added null checks = 38
\par \tab --> Removed null checks = 23
\par \tab --> Null dereferences checked for null = 11
\par 
\par Reverted to commit 819f81c266edcfb10a176edc3be6417d83199c01
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 6f0d261f1846a0039f81e4029b56d3616b03eb72 and 819f81c266edcfb10a176edc3be6417d83199c01:
\par \tab --> Added null checks = 38
\par \tab --> Removed null checks = 23
\par \tab --> Null dereferences checked for null = 11
\par 
\par Reverted to commit 6f0d261f1846a0039f81e4029b56d3616b03eb72
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 76b3cec9e9c44a7afb637666aeaef0e0eef6e87a and 6f0d261f1846a0039f81e4029b56d3616b03eb72:
\par \tab --> Added null checks = 38
\par \tab --> Removed null checks = 23
\par \tab --> Null dereferences checked for null = 11
\par 
\par Reverted to commit 76b3cec9e9c44a7afb637666aeaef0e0eef6e87a
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 3352244c630ab9a8dfb9b99c30b5e9ac809e2871 and 76b3cec9e9c44a7afb637666aeaef0e0eef6e87a:
\par \tab --> Added null checks = 38
\par \tab --> Removed null checks = 23
\par \tab --> Null dereferences checked for null = 11
\par 
\par Reverted to commit 3352244c630ab9a8dfb9b99c30b5e9ac809e2871
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was added at revision 3352244c630ab9a8dfb9b99c30b5e9ac809e2871
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was added at revision 3352244c630ab9a8dfb9b99c30b5e9ac809e2871
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was added at revision 3352244c630ab9a8dfb9b99c30b5e9ac809e2871
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of bf0574d135b2bac3ca85576a21ba8f0a69277dd8 and 3352244c630ab9a8dfb9b99c30b5e9ac809e2871:
\par \tab --> Added null checks = 41
\par \tab --> Removed null checks = 23
\par \tab --> Null dereferences checked for null = 14
\par 
\par Reverted to commit bf0574d135b2bac3ca85576a21ba8f0a69277dd8
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 161e0991827bef36b0a5bc9183be895f25b57b01 and bf0574d135b2bac3ca85576a21ba8f0a69277dd8:
\par \tab --> Added null checks = 41
\par \tab --> Removed null checks = 23
\par \tab --> Null dereferences checked for null = 14
\par 
\par Reverted to commit 161e0991827bef36b0a5bc9183be895f25b57b01
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 69cd4c48a07356fb3f2cb1b055d6e12525b8132a and 161e0991827bef36b0a5bc9183be895f25b57b01:
\par \tab --> Added null checks = 41
\par \tab --> Removed null checks = 23
\par \tab --> Null dereferences checked for null = 14
\par 
\par Reverted to commit 69cd4c48a07356fb3f2cb1b055d6e12525b8132a
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 782b116608d4edae7712c6a2a02e166e1d09f144 and 69cd4c48a07356fb3f2cb1b055d6e12525b8132a:
\par \tab --> Added null checks = 41
\par \tab --> Removed null checks = 23
\par \tab --> Null dereferences checked for null = 14
\par 
\par Reverted to commit 782b116608d4edae7712c6a2a02e166e1d09f144
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was added at revision 782b116608d4edae7712c6a2a02e166e1d09f144
\par Null check was added at revision 782b116608d4edae7712c6a2a02e166e1d09f144
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of e1160180a12f3a0849eb2258894feda354b6ed2f and 782b116608d4edae7712c6a2a02e166e1d09f144:
\par \tab --> Added null checks = 43
\par \tab --> Removed null checks = 23
\par \tab --> Null dereferences checked for null = 15
\par 
\par Reverted to commit e1160180a12f3a0849eb2258894feda354b6ed2f
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of b0b1d0ce0ebcf00b7e893ee6e23db5f56feacab4 and e1160180a12f3a0849eb2258894feda354b6ed2f:
\par \tab --> Added null checks = 43
\par \tab --> Removed null checks = 23
\par \tab --> Null dereferences checked for null = 15
\par 
\par Reverted to commit b0b1d0ce0ebcf00b7e893ee6e23db5f56feacab4
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 16623a142f5d4c97437946dced7d0feba3cd3bfd and b0b1d0ce0ebcf00b7e893ee6e23db5f56feacab4:
\par \tab --> Added null checks = 43
\par \tab --> Removed null checks = 23
\par \tab --> Null dereferences checked for null = 15
\par 
\par Reverted to commit 16623a142f5d4c97437946dced7d0feba3cd3bfd
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 8b22ccf6322eedc46016b06d11f08e23b8d8dc6d and 16623a142f5d4c97437946dced7d0feba3cd3bfd:
\par \tab --> Added null checks = 43
\par \tab --> Removed null checks = 23
\par \tab --> Null dereferences checked for null = 15
\par 
\par Reverted to commit 8b22ccf6322eedc46016b06d11f08e23b8d8dc6d
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of ce7aedac00ad175562dd4fc96d5294f3ef165391 and 8b22ccf6322eedc46016b06d11f08e23b8d8dc6d:
\par \tab --> Added null checks = 43
\par \tab --> Removed null checks = 23
\par \tab --> Null dereferences checked for null = 15
\par 
\par Reverted to commit ce7aedac00ad175562dd4fc96d5294f3ef165391
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of c429797a95b7c92bd9029824fbecaf611f3de689 and ce7aedac00ad175562dd4fc96d5294f3ef165391:
\par \tab --> Added null checks = 43
\par \tab --> Removed null checks = 23
\par \tab --> Null dereferences checked for null = 15
\par 
\par Reverted to commit c429797a95b7c92bd9029824fbecaf611f3de689
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 26cb36408fa0bb788ca5b640c71c2fd22d4f055d and c429797a95b7c92bd9029824fbecaf611f3de689:
\par \tab --> Added null checks = 43
\par \tab --> Removed null checks = 23
\par \tab --> Null dereferences checked for null = 15
\par 
\par Reverted to commit 26cb36408fa0bb788ca5b640c71c2fd22d4f055d
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 65041594905b9a2e531d43ab408a38a0aebd1bd4 and 26cb36408fa0bb788ca5b640c71c2fd22d4f055d:
\par \tab --> Added null checks = 43
\par \tab --> Removed null checks = 23
\par \tab --> Null dereferences checked for null = 15
\par 
\par Reverted to commit 65041594905b9a2e531d43ab408a38a0aebd1bd4
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was added at revision 65041594905b9a2e531d43ab408a38a0aebd1bd4
\par Null check was added at revision 65041594905b9a2e531d43ab408a38a0aebd1bd4
\par Null check was added at revision 65041594905b9a2e531d43ab408a38a0aebd1bd4
\par Null check was added at revision 65041594905b9a2e531d43ab408a38a0aebd1bd4
\par Null check was added at revision 65041594905b9a2e531d43ab408a38a0aebd1bd4
\par Null check was added at revision 65041594905b9a2e531d43ab408a38a0aebd1bd4
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 93837e3ae5773e5a48ad5852fdb526eae12dc634 and 65041594905b9a2e531d43ab408a38a0aebd1bd4:
\par \tab --> Added null checks = 49
\par \tab --> Removed null checks = 23
\par \tab --> Null dereferences checked for null = 19
\par 
\par Reverted to commit 93837e3ae5773e5a48ad5852fdb526eae12dc634
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was added at revision 93837e3ae5773e5a48ad5852fdb526eae12dc634
\par Null check was added at revision 93837e3ae5773e5a48ad5852fdb526eae12dc634
\par Null check was added at revision 93837e3ae5773e5a48ad5852fdb526eae12dc634
\par Null check was added at revision 93837e3ae5773e5a48ad5852fdb526eae12dc634
\par Null check was added at revision 93837e3ae5773e5a48ad5852fdb526eae12dc634
\par Null check was added at revision 93837e3ae5773e5a48ad5852fdb526eae12dc634
\par Null check was added at revision 93837e3ae5773e5a48ad5852fdb526eae12dc634
\par Null check was added at revision 93837e3ae5773e5a48ad5852fdb526eae12dc634
\par Null check was added at revision 93837e3ae5773e5a48ad5852fdb526eae12dc634
\par Null check was added at revision 93837e3ae5773e5a48ad5852fdb526eae12dc634
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> blackKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 7d78da8667896c1c65c27fcdf71c9f8415775295 and 93837e3ae5773e5a48ad5852fdb526eae12dc634:
\par \tab --> Added null checks = 59
\par \tab --> Removed null checks = 23
\par \tab --> Null dereferences checked for null = 21
\par GitAPIException thrown!
\par Cannot revert commit '7d78da8667896c1c65c27fcdf71c9f8415775295' because it has 2 parents, only commits with exactly one parent are supported
\par GitAPIException thrown!
\par Cannot revert commit '41cd9709bbbec993a064fbe5867ad2a9ce33b6b1' because it has 2 parents, only commits with exactly one parent are supported
\par 
\par Reverted to commit f7de4b7b7dc2889d9e8733647cfada1a8796f9be
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was added at revision f7de4b7b7dc2889d9e8733647cfada1a8796f9be
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was added at revision f7de4b7b7dc2889d9e8733647cfada1a8796f9be
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of a53cd8a42da7832d152aac5a3b5d6cecfc82e0a3 and f7de4b7b7dc2889d9e8733647cfada1a8796f9be:
\par \tab --> Added null checks = 61
\par \tab --> Removed null checks = 23
\par \tab --> Null dereferences checked for null = 23
\par 
\par Reverted to commit a53cd8a42da7832d152aac5a3b5d6cecfc82e0a3
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of b977415e4a80870ab79fa0677fa76296b9c59f0a and a53cd8a42da7832d152aac5a3b5d6cecfc82e0a3:
\par \tab --> Added null checks = 61
\par \tab --> Removed null checks = 23
\par \tab --> Null dereferences checked for null = 23
\par 
\par Reverted to commit b977415e4a80870ab79fa0677fa76296b9c59f0a
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of d7636fb09a9264d867e0041a8c22e2a36e77b10a and b977415e4a80870ab79fa0677fa76296b9c59f0a:
\par \tab --> Added null checks = 61
\par \tab --> Removed null checks = 23
\par \tab --> Null dereferences checked for null = 23
\par 
\par Reverted to commit d7636fb09a9264d867e0041a8c22e2a36e77b10a
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of aaad89a478cc07232ad478a975878f7a4795c922 and d7636fb09a9264d867e0041a8c22e2a36e77b10a:
\par \tab --> Added null checks = 61
\par \tab --> Removed null checks = 23
\par \tab --> Null dereferences checked for null = 23
\par 
\par Reverted to commit aaad89a478cc07232ad478a975878f7a4795c922
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of e6dd36348524a64003e4495304d0cbdbaff3efd9 and aaad89a478cc07232ad478a975878f7a4795c922:
\par \tab --> Added null checks = 61
\par \tab --> Removed null checks = 23
\par \tab --> Null dereferences checked for null = 23
\par 
\par Reverted to commit e6dd36348524a64003e4495304d0cbdbaff3efd9
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 0159ccb50c872cf0d28e1c3a54452140b1e79504 and e6dd36348524a64003e4495304d0cbdbaff3efd9:
\par \tab --> Added null checks = 61
\par \tab --> Removed null checks = 23
\par \tab --> Null dereferences checked for null = 23
\par 
\par Reverted to commit 0159ccb50c872cf0d28e1c3a54452140b1e79504
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 13fcf3f3135e92ab2250085134f98f2904f265ea and 0159ccb50c872cf0d28e1c3a54452140b1e79504:
\par \tab --> Added null checks = 61
\par \tab --> Removed null checks = 23
\par \tab --> Null dereferences checked for null = 23
\par 
\par Reverted to commit 13fcf3f3135e92ab2250085134f98f2904f265ea
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 13685cb54532a0c0916d05916575a5c0b8600187 and 13fcf3f3135e92ab2250085134f98f2904f265ea:
\par \tab --> Added null checks = 61
\par \tab --> Removed null checks = 23
\par \tab --> Null dereferences checked for null = 23
\par 
\par Reverted to commit 13685cb54532a0c0916d05916575a5c0b8600187
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of e04030e208a7eee68041c1dc851e03d7020e4fe9 and 13685cb54532a0c0916d05916575a5c0b8600187:
\par \tab --> Added null checks = 61
\par \tab --> Removed null checks = 23
\par \tab --> Null dereferences checked for null = 23
\par 
\par Reverted to commit e04030e208a7eee68041c1dc851e03d7020e4fe9
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was added at revision e04030e208a7eee68041c1dc851e03d7020e4fe9
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par Null check was added at revision e04030e208a7eee68041c1dc851e03d7020e4fe9
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was added at revision e04030e208a7eee68041c1dc851e03d7020e4fe9
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 58c8660adea9f618f21cd5690791c54d7d4d193b and e04030e208a7eee68041c1dc851e03d7020e4fe9:
\par \tab --> Added null checks = 64
\par \tab --> Removed null checks = 23
\par \tab --> Null dereferences checked for null = 23
\par 
\par Reverted to commit 58c8660adea9f618f21cd5690791c54d7d4d193b
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of da80a3b496c1a5d63f4efc9bc4b9c0934b1367a3 and 58c8660adea9f618f21cd5690791c54d7d4d193b:
\par \tab --> Added null checks = 64
\par \tab --> Removed null checks = 23
\par \tab --> Null dereferences checked for null = 23
\par 
\par Reverted to commit da80a3b496c1a5d63f4efc9bc4b9c0934b1367a3
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 9ca002d73db7695fb7dd16e5d3337f414930bc91 and da80a3b496c1a5d63f4efc9bc4b9c0934b1367a3:
\par \tab --> Added null checks = 64
\par \tab --> Removed null checks = 23
\par \tab --> Null dereferences checked for null = 23
\par 
\par Reverted to commit 9ca002d73db7695fb7dd16e5d3337f414930bc91
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was added at revision 9ca002d73db7695fb7dd16e5d3337f414930bc91
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par Null check was added at revision 9ca002d73db7695fb7dd16e5d3337f414930bc91
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of adc7fbda86fc72e3149d8c182309207e59049ea4 and 9ca002d73db7695fb7dd16e5d3337f414930bc91:
\par \tab --> Added null checks = 66
\par \tab --> Removed null checks = 23
\par \tab --> Null dereferences checked for null = 27
\par 
\par Reverted to commit adc7fbda86fc72e3149d8c182309207e59049ea4
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of c32af037500f59608b253dd579b85400a91db00b and adc7fbda86fc72e3149d8c182309207e59049ea4:
\par \tab --> Added null checks = 66
\par \tab --> Removed null checks = 23
\par \tab --> Null dereferences checked for null = 27
\par 
\par Reverted to commit c32af037500f59608b253dd579b85400a91db00b
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was added at revision c32af037500f59608b253dd579b85400a91db00b
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par Null check was added at revision c32af037500f59608b253dd579b85400a91db00b
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was added at revision c32af037500f59608b253dd579b85400a91db00b
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of f76e932183cce8f7846309afa8deae9a76d86fdf and c32af037500f59608b253dd579b85400a91db00b:
\par \tab --> Added null checks = 69
\par \tab --> Removed null checks = 23
\par \tab --> Null dereferences checked for null = 27
\par 
\par Reverted to commit f76e932183cce8f7846309afa8deae9a76d86fdf
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 26e788e9ae03939b8586ac7ea44e7cc5e098f4a7 and f76e932183cce8f7846309afa8deae9a76d86fdf:
\par \tab --> Added null checks = 69
\par \tab --> Removed null checks = 23
\par \tab --> Null dereferences checked for null = 27
\par GitAPIException thrown!
\par Cannot revert commit '26e788e9ae03939b8586ac7ea44e7cc5e098f4a7' because it has 2 parents, only commits with exactly one parent are supported
\par 
\par Reverted to commit 4c8cbaff75964dbde7f6ebe28231408358d6022a
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of b553ca59b08846fc3ac3a0e93f9146f2cfcf22a4 and 4c8cbaff75964dbde7f6ebe28231408358d6022a:
\par \tab --> Added null checks = 69
\par \tab --> Removed null checks = 23
\par \tab --> Null dereferences checked for null = 27
\par GitAPIException thrown!
\par Cannot revert commit 'b553ca59b08846fc3ac3a0e93f9146f2cfcf22a4' because it has 2 parents, only commits with exactly one parent are supported
\par 
\par Reverted to commit f7dbab1c5ad66169005b13a2ba20400e7fca7bb5
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of ae9b2a9886126fd5e4cf7950827691a6a0ff4351 and f7dbab1c5ad66169005b13a2ba20400e7fca7bb5:
\par \tab --> Added null checks = 69
\par \tab --> Removed null checks = 23
\par \tab --> Null dereferences checked for null = 27
\par 
\par Reverted to commit ae9b2a9886126fd5e4cf7950827691a6a0ff4351
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was added at revision ae9b2a9886126fd5e4cf7950827691a6a0ff4351
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par Null check was removed at revision ae9b2a9886126fd5e4cf7950827691a6a0ff4351
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 243ac8b83ce0c83336694562eb9b16e0d0b025d5 and ae9b2a9886126fd5e4cf7950827691a6a0ff4351:
\par \tab --> Added null checks = 70
\par \tab --> Removed null checks = 24
\par \tab --> Null dereferences checked for null = 27
\par 
\par Reverted to commit 243ac8b83ce0c83336694562eb9b16e0d0b025d5
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par Null check was removed at revision 243ac8b83ce0c83336694562eb9b16e0d0b025d5
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of cbdd04aeb61a8c314f6c57ae34167ca83a8903bb and 243ac8b83ce0c83336694562eb9b16e0d0b025d5:
\par \tab --> Added null checks = 70
\par \tab --> Removed null checks = 25
\par \tab --> Null dereferences checked for null = 27
\par 
\par Reverted to commit cbdd04aeb61a8c314f6c57ae34167ca83a8903bb
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of ade64eaa4215b01efa8a268a33abbba4333b2c7d and cbdd04aeb61a8c314f6c57ae34167ca83a8903bb:
\par \tab --> Added null checks = 70
\par \tab --> Removed null checks = 25
\par \tab --> Null dereferences checked for null = 27
\par 
\par Reverted to commit ade64eaa4215b01efa8a268a33abbba4333b2c7d
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of af6d2f850f9c67b2a9395f26dab12fd262dc2bd2 and ade64eaa4215b01efa8a268a33abbba4333b2c7d:
\par \tab --> Added null checks = 70
\par \tab --> Removed null checks = 25
\par \tab --> Null dereferences checked for null = 27
\par 
\par Reverted to commit af6d2f850f9c67b2a9395f26dab12fd262dc2bd2
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was added at revision af6d2f850f9c67b2a9395f26dab12fd262dc2bd2
\par Null check was added at revision af6d2f850f9c67b2a9395f26dab12fd262dc2bd2
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was added at revision af6d2f850f9c67b2a9395f26dab12fd262dc2bd2
\par Null check was added at revision af6d2f850f9c67b2a9395f26dab12fd262dc2bd2
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was added at revision af6d2f850f9c67b2a9395f26dab12fd262dc2bd2
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par Null check was added at revision af6d2f850f9c67b2a9395f26dab12fd262dc2bd2
\par Null check was added at revision af6d2f850f9c67b2a9395f26dab12fd262dc2bd2
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 2e8252d937e86ac24019e31be0952a09d47182e6 and af6d2f850f9c67b2a9395f26dab12fd262dc2bd2:
\par \tab --> Added null checks = 77
\par \tab --> Removed null checks = 25
\par \tab --> Null dereferences checked for null = 29
\par 
\par Reverted to commit 2e8252d937e86ac24019e31be0952a09d47182e6
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of b92dd068577cc1d6abcbdbc5f8d35b9e9e3e47df and 2e8252d937e86ac24019e31be0952a09d47182e6:
\par \tab --> Added null checks = 77
\par \tab --> Removed null checks = 25
\par \tab --> Null dereferences checked for null = 29
\par 
\par Reverted to commit b92dd068577cc1d6abcbdbc5f8d35b9e9e3e47df
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 492d0ee0ff22f136fe796545cad7f342c93e5d57 and b92dd068577cc1d6abcbdbc5f8d35b9e9e3e47df:
\par \tab --> Added null checks = 77
\par \tab --> Removed null checks = 25
\par \tab --> Null dereferences checked for null = 29
\par 
\par Reverted to commit 492d0ee0ff22f136fe796545cad7f342c93e5d57
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 36432c9dd6e24f4e102cbc851729c1328442e00b and 492d0ee0ff22f136fe796545cad7f342c93e5d57:
\par \tab --> Added null checks = 77
\par \tab --> Removed null checks = 25
\par \tab --> Null dereferences checked for null = 29
\par 
\par Reverted to commit 36432c9dd6e24f4e102cbc851729c1328442e00b
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of eee6a98a259f18c9f09e2189e85c0e025ff6f733 and 36432c9dd6e24f4e102cbc851729c1328442e00b:
\par \tab --> Added null checks = 77
\par \tab --> Removed null checks = 25
\par \tab --> Null dereferences checked for null = 29
\par 
\par Reverted to commit eee6a98a259f18c9f09e2189e85c0e025ff6f733
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 23f5fc7639429d46f90737074e70dd526368d6c5 and eee6a98a259f18c9f09e2189e85c0e025ff6f733:
\par \tab --> Added null checks = 77
\par \tab --> Removed null checks = 25
\par \tab --> Null dereferences checked for null = 29
\par 
\par Reverted to commit 23f5fc7639429d46f90737074e70dd526368d6c5
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 22094c104b3388a7d0e8deed41f9a1a7ceec4953 and 23f5fc7639429d46f90737074e70dd526368d6c5:
\par \tab --> Added null checks = 77
\par \tab --> Removed null checks = 25
\par \tab --> Null dereferences checked for null = 29
\par 
\par Reverted to commit 22094c104b3388a7d0e8deed41f9a1a7ceec4953
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 286f752caef997b3472baec00b71ddad9fa9a19e and 22094c104b3388a7d0e8deed41f9a1a7ceec4953:
\par \tab --> Added null checks = 77
\par \tab --> Removed null checks = 25
\par \tab --> Null dereferences checked for null = 29
\par 
\par Reverted to commit 286f752caef997b3472baec00b71ddad9fa9a19e
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 9a68b14bb98a13d3ea96fda763fc4f8444910208 and 286f752caef997b3472baec00b71ddad9fa9a19e:
\par \tab --> Added null checks = 77
\par \tab --> Removed null checks = 25
\par \tab --> Null dereferences checked for null = 29
\par 
\par Reverted to commit 9a68b14bb98a13d3ea96fda763fc4f8444910208
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 56251054b391dcdea97be3b407b02da26dd15bc0 and 9a68b14bb98a13d3ea96fda763fc4f8444910208:
\par \tab --> Added null checks = 77
\par \tab --> Removed null checks = 25
\par \tab --> Null dereferences checked for null = 29
\par 
\par Reverted to commit 56251054b391dcdea97be3b407b02da26dd15bc0
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 00b754a630b12a1f8071560c2bb7ae1178e867c5 and 56251054b391dcdea97be3b407b02da26dd15bc0:
\par \tab --> Added null checks = 77
\par \tab --> Removed null checks = 25
\par \tab --> Null dereferences checked for null = 29
\par 
\par Reverted to commit 00b754a630b12a1f8071560c2bb7ae1178e867c5
\par 
\par Added AbstractEvaluate.java to ./chess/ repository source files.
\par Added IEvaluate.java to ./chess/ repository source files.
\par Added PieceOnlyEvaluate.java to ./chess/ repository source files.
\par Added PositionOnlyEvaluate.java to ./chess/ repository source files.
\par Added SimpleEvaluate.java to ./chess/ repository source files.
\par Added MoveNode.java to ./chess/ repository source files.
\par Added AbstractSearch.java to ./chess/ repository source files.
\par Added AlphaBetaAI.java to ./chess/ repository source files.
\par Added MiniMaxSearch.java to ./chess/ repository source files.
\par Added NegaMaxSearch.java to ./chess/ repository source files.
\par Added TranspositionTable.java to ./chess/ repository source files.
\par Added ArraySet.java to ./chess/ repository source files.
\par Added Board.java to ./chess/ repository source files.
\par Added CmdConfiguration.java to ./chess/ repository source files.
\par Added GuiEngine.java to ./chess/ repository source files.
\par Added UciEngine.java to ./chess/ repository source files.
\par Added IllegalMoveException.java to ./chess/ repository source files.
\par Added Main.java to ./chess/ repository source files.
\par Added PgnUtils.java to ./chess/ repository source files.
\par Added AbstractPiece.java to ./chess/ repository source files.
\par Added Bishop.java to ./chess/ repository source files.
\par Added King.java to ./chess/ repository source files.
\par Added Knight.java to ./chess/ repository source files.
\par Added Pawn.java to ./chess/ repository source files.
\par Added Piece.java to ./chess/ repository source files.
\par Added Queen.java to ./chess/ repository source files.
\par Added Rook.java to ./chess/ repository source files.
\par Added MoveNodeTest.java to ./chess/ repository source files.
\par Added MiniMaxSearchTest.java to ./chess/ repository source files.
\par Added NegaMaxSearchTest.java to ./chess/ repository source files.
\par Added AlphaBetaAITest.java to ./chess/ repository source files.
\par Added ArrayUtilsTest.java to ./chess/ repository source files.
\par Added BoardTest.java to ./chess/ repository source files.
\par Added MoveGeneratorTest.java to ./chess/ repository source files.
\par Added PgnUtilsTest.java to ./chess/ repository source files.
\par Added BasePieceTest.java to ./chess/ repository source files.
\par Added PositionScoreTest.java to ./chess/ repository source files.
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PieceOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionOnlyEvaluate.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file SimpleEvaluate.java************
\par 
\par Null checks:
\par targetPiece == null?continue;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNode.java************
\par 
\par Null checks:
\par parent == null?return parent == null ? null : parent.get();
\par this.parent == null?return;
\par parentNode == null?return;
\par 
\par Null fields: 
\par \tab --> parent
\par \tab --> depth
\par \tab --> move
\par \tab --> increasing
\par \tab --> score
\par 
\par Null variables: 
\par Null assignments: 
\par In method MoveNode found: 
\par \tab --> this.parent
\par \tab --> this.colorMoving
\par ************ For file AbstractSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAI.java************
\par 
\par Null checks:
\par child != null?int score = alphabeta(child, depth - 1, alpha, beta, color.inverse());
\par childNode == null?childNode = node.addChild(move);
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> board
\par \tab --> depth
\par \tab --> colorPlaying
\par 
\par Null variables: 
\par Null assignments: 
\par In method AlphaBetaAI found: 
\par \tab --> this.configuration
\par ************ For file MiniMaxSearch.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearch.java************
\par 
\par Null checks:
\par tableNode != null?final int score = tableNode.getScore();
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file TranspositionTable.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArraySet.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Board.java************
\par 
\par Null checks:
\par p != null?if (p.getColor().equals(Color.WHITE)) \{
\par                     whitePieces[w++] = i;
\par                 \} else \{
\par                     blackPieces[b++] = i;
\par                 \}
\par genericPiece != null?int file = Arrays.asList(GenericFile.values()).indexOf(position.file);
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.KINGSIDE) != null?whiteKingCastle = true;
\par genericBoard.getCastling(GenericColor.WHITE, GenericCastling.QUEENSIDE) != null?whiteQueenCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.KINGSIDE) != null?blackKingCastle = true;
\par genericBoard.getCastling(GenericColor.BLACK, GenericCastling.QUEENSIDE) != null?blackQueenCastle = true;
\par ep != null?int file = Arrays.asList(GenericFile.values()).indexOf(ep.file);
\par fromPiece == null?sb.append(fromPiece == null ? "?" : fromPiece.toString())
\par toPiece == null?sb.append(toPiece == null ? "-" : "*")
\par board[0x05] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x06] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x75] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x76] == null?return whiteKingCastle && board[0x05] == null && board[0x06] == null && (!isSquareAttacked(Color.WHITE, 0x05));
\par board[0x01] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x02] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x03] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x71] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x72] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par board[0x73] == null?return whiteQueenCastle && board[0x01] == null && board[0x02] == null && board[0x03] == null && (!isSquareAttacked(Color.WHITE, 0x02)) && (!isSquareAttacked(Color.WHITE, 0x03));
\par p == null?sb.append(p == null ? "-" : p.toString())
\par p == null?++blankCount;
\par fromPiece == null?LOG.error("There is no piece on square: 0x\{\}", Integer.toHexString(fromSquare));
\par toPiece != null?boardState.setCapturedPiece(toPiece);
\par toPiece == null?String from = Integer.toHexString(fromSquare);
\par capturedPiece != null?ArraySet.addNumber(blackPieces, toSquare);
\par capturedPiece != null?ArraySet.addNumber(whitePieces, toSquare);
\par board[p] == null?System.out.println("BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[p] == null?System.out.println("BLACK BOARD PIECE IS NULL: 0x" + Integer.toHexString(p));
\par board[i] == null?continue;
\par piece == null?continue;
\par piece != null?return true;
\par 
\par Null fields: 
\par \tab --> whitePieces
\par \tab --> blackPieces
\par \tab --> board
\par \tab --> blackKing
\par \tab --> whiteKing
\par 
\par Null variables: 
\par Null assignments: 
\par In method makeMove found: 
\par \tab --> board[toSquare]
\par \tab --> board[toSquare + 0x10]
\par \tab --> board[toSquare - 0x10]
\par \tab --> board[fromSquare]
\par In method unmakeMove found: 
\par \tab --> board[0x06]
\par \tab --> board[0x05]
\par \tab --> board[0x76]
\par \tab --> board[0x75]
\par \tab --> board[0x02]
\par \tab --> board[0x03]
\par \tab --> board[0x72]
\par \tab --> board[0x73]
\par \tab --> board[toSquare]
\par In method makeKingCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare + 3]
\par In method makeQueenCastle found: 
\par \tab --> board[fromSquare]
\par \tab --> board[fromSquare - 4]
\par ************ For file CmdConfiguration.java************
\par 
\par Null checks:
\par keys == null?Option[] opts = commandLine.getOptions();
\par 
\par Null fields: 
\par \tab --> options
\par \tab --> keys
\par \tab --> commandLine
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file GuiEngine.java************
\par 
\par Null checks:
\par rootNode == null?LOG.info("COULDN'T FIND USER MOVE \{\} -> \{\}", Integer.toHexString(userMove[0]), Integer.toHexString(userMove[1]));
\par 
\par Null fields: 
\par \tab --> config
\par \tab --> board
\par \tab --> utils
\par \tab --> ai
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file UciEngine.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> protocol
\par \tab --> board
\par \tab --> currentNode
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file IllegalMoveException.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Main.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par In method main found:
\par \tab --> engine
\par Null assignments: 
\par ************ For file PgnUtils.java************
\par 
\par Null checks:
\par board.getPiece(toSquare) != null?ret += 'x';
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AbstractPiece.java************
\par 
\par Null checks:
\par p == null?positions[curIndex] = position;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Bishop.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file King.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Knight.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Pawn.java************
\par 
\par Null checks:
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x20) == null?ret[retIndex++] = curPos - 0x20;
\par board.getPiece(curPos - 0x10) == null?ret[retIndex++] = curPos - 0x10;
\par p != null?ret[retIndex++] = move;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x20) == null?ret[retIndex++] = curPos + 0x20;
\par board.getPiece(curPos + 0x10) == null?ret[retIndex++] = curPos + 0x10;
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Piece.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Queen.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file Rook.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveNodeTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MiniMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> minimax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file NegaMaxSearchTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par \tab --> configuration
\par \tab --> negamax
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file AlphaBetaAITest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file ArrayUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BoardTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file MoveGeneratorTest.java************
\par 
\par Null checks:
\par board.getPiece(Board.getToSquare(allMoves[i])) == null?System.out.println("Never made move");
\par 
\par Null fields: 
\par \tab --> board
\par 
\par Null variables: 
\par In method testPerft found:
\par \tab --> genericBoard
\par In method miniMax found:
\par \tab --> boardState
\par Null assignments: 
\par ************ For file PgnUtilsTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file BasePieceTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par ************ For file PositionScoreTest.java************
\par 
\par Null checks:
\par 
\par Null fields: 
\par 
\par Null variables: 
\par Null assignments: 
\par 
\par Diff of 2e01cd025aae609c18355c48f2495567eb04c86f and 00b754a630b12a1f8071560c2bb7ae1178e867c5:
\par \tab --> Added null checks = 77
\par \tab --> Removed null checks = 25
\par \tab --> Null dereferences checked for null = 29
\par Null checks found in initial commit -- added at creation of the repository.
\par ****Analysis complete for first commit****
\par William Speirs added null count = 77 in repository chess
\par William Speirs removed null count = 25 in repository chess
\par William Speirs deref count = 29 in repository chess
\par GitAPIException thrown!
\par Cannot revert commit '2e01cd025aae609c18355c48f2495567eb04c86f' because it has 0 parents, only commits with exactly one parent are supported}{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid14821358 
\par }\pard\plain \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af31507\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 
\af31507 \ltrch\fcs0 \insrsid3562586 
\par }{\*\themedata 504b030414000600080000002100e9de0fbfff0000001c020000130000005b436f6e74656e745f54797065735d2e786d6cac91cb4ec3301045f748fc83e52d4a
9cb2400825e982c78ec7a27cc0c8992416c9d8b2a755fbf74cd25442a820166c2cd933f79e3be372bd1f07b5c3989ca74aaff2422b24eb1b475da5df374fd9ad
5689811a183c61a50f98f4babebc2837878049899a52a57be670674cb23d8e90721f90a4d2fa3802cb35762680fd800ecd7551dc18eb899138e3c943d7e503b6
b01d583deee5f99824e290b4ba3f364eac4a430883b3c092d4eca8f946c916422ecab927f52ea42b89a1cd59c254f919b0e85e6535d135a8de20f20b8c12c3b0
0c895fcf6720192de6bf3b9e89ecdbd6596cbcdd8eb28e7c365ecc4ec1ff1460f53fe813d3cc7f5b7f020000ffff0300504b030414000600080000002100a5d6
a7e7c0000000360100000b0000005f72656c732f2e72656c73848fcf6ac3300c87ef85bd83d17d51d2c31825762fa590432fa37d00e1287f68221bdb1bebdb4f
c7060abb0884a4eff7a93dfeae8bf9e194e720169aaa06c3e2433fcb68e1763dbf7f82c985a4a725085b787086a37bdbb55fbc50d1a33ccd311ba548b6309512
0f88d94fbc52ae4264d1c910d24a45db3462247fa791715fd71f989e19e0364cd3f51652d73760ae8fa8c9ffb3c330cc9e4fc17faf2ce545046e37944c69e462
a1a82fe353bd90a865aad41ed0b5b8f9d6fd010000ffff0300504b0304140006000800000021006b799616830000008a0000001c0000007468656d652f746865
6d652f7468656d654d616e616765722e786d6c0ccc4d0ac3201040e17da17790d93763bb284562b2cbaebbf600439c1a41c7a0d29fdbd7e5e38337cedf14d59b
4b0d592c9c070d8a65cd2e88b7f07c2ca71ba8da481cc52c6ce1c715e6e97818c9b48d13df49c873517d23d59085adb5dd20d6b52bd521ef2cdd5eb9246a3d8b
4757e8d3f729e245eb2b260a0238fd010000ffff0300504b03041400060008000000210030dd4329a8060000a41b0000160000007468656d652f7468656d652f
7468656d65312e786d6cec594f6fdb3614bf0fd87720746f6327761a07758ad8b19b2d4d1bc46e871e698996d850a240d2497d1bdae38001c3ba618715d86d87
615b8116d8a5fb34d93a6c1dd0afb0475292c5585e9236d88aad3e2412f9e3fbff1e1fa9abd7eec70c1d1221294fda5efd72cd4324f1794093b0eddd1ef62fad
79482a9c0498f184b4bd2991deb58df7dfbb8ad755446282607d22d771db8b944ad79796a40fc3585ee62949606ecc458c15bc8a702910f808e8c66c69b9565b
5d8a314d3c94e018c8de1a8fa94fd05093f43672e23d06af89927ac06762a049136785c10607758d9053d965021d62d6f6804fc08f86e4bef210c352c144dbab
999fb7b4717509af678b985ab0b6b4ae6f7ed9ba6c4170b06c788a705430adf71bad2b5b057d03606a1ed7ebf5babd7a41cf00b0ef83a6569632cd467faddec9
699640f6719e76b7d6ac355c7c89feca9cccad4ea7d36c65b258a206641f1b73f8b5da6a6373d9c11b90c537e7f08dce66b7bbeae00dc8e257e7f0fd2badd586
8b37a088d1e4600ead1ddaef67d40bc898b3ed4af81ac0d76a197c86826828a24bb318f3442d8ab518dfe3a20f000d6458d104a9694ac6d88728eee2782428d6
0cf03ac1a5193be4cbb921cd0b495fd054b5bd0f530c1931a3f7eaf9f7af9e3f45c70f9e1d3ff8e9f8e1c3e3073f5a42ceaa6d9c84e5552fbffdeccfc71fa33f
9e7ef3f2d117d57859c6fffac327bffcfc793510d26726ce8b2f9ffcf6ecc98baf3efdfdbb4715f04d814765f890c644a29be408edf3181433567125272371be
15c308d3f28acd249438c19a4b05fd9e8a1cf4cd296699771c393ac4b5e01d01e5a30a787d72cf1178108989a2159c77a2d801ee72ce3a5c545a6147f32a9979
3849c26ae66252c6ed637c58c5bb8b13c7bfbd490a75330f4b47f16e441c31f7184e140e494214d273fc80900aedee52ead87597fa824b3e56e82e451d4c2b4d
32a423279a668bb6690c7e9956e90cfe766cb37b077538abd27a8b1cba48c80acc2a841f12e698f13a9e281c57911ce298950d7e03aba84ac8c154f8655c4f2a
f074481847bd804859b5e696007d4b4edfc150b12addbecba6b18b148a1e54d1bc81392f23b7f84137c2715a851dd0242a633f900710a218ed715505dfe56e86
e877f0034e16bafb0e258ebb4faf06b769e888340b103d331115bebc4eb813bf83291b63624a0d1475a756c734f9bbc2cd28546ecbe1e20a3794ca175f3fae90
fb6d2dd99bb07b55e5ccf68942bd0877b23c77b908e8db5f9db7f024d9239010f35bd4bbe2fcae387bfff9e2bc289f2fbe24cfaa301468dd8bd846dbb4ddf1c2
ae7b4c191ba8292337a469bc25ec3d411f06f53a73e224c5292c8de0516732307070a1c0660d125c7d44553488700a4d7bddd3444299910e254ab984c3a219ae
a4adf1d0f82b7bd46cea4388ad1c12ab5d1ed8e1153d9c9f350a3246aad01c6873462b9ac05999ad5cc988826eafc3acae853a33b7ba11cd1445875ba1b236b1
399483c90bd560b0b0263435085a21b0f22a9cf9356b38ec6046026d77eba3dc2dc60b17e92219e180643ed27acffba86e9c94c7ca9c225a0f1b0cfae0788ad5
4adc5a9aec1b703b8b93caec1a0bd8e5de7b132fe5113cf312503b998e2c2927274bd051db6b35979b1ef271daf6c6704e86c73805af4bdd476216c26593af84
0dfb5393d964f9cc9bad5c313709ea70f561ed3ea7b053075221d51696910d0d339585004b34272bff7213cc7a510a5454a3b349b1b206c1f0af490176745d4b
c663e2abb2b34b23da76f6352ba57ca2881844c1111ab189d8c7e07e1daaa04f40255c77988aa05fe06e4e5bdb4cb9c5394bbaf28d98c1d971ccd20867e556a7
689ec9166e0a522183792b8907ba55ca6e943bbf2a26e52f48957218ffcf54d1fb09dc3eac04da033e5c0d0b8c74a6b43d2e54c4a10aa511f5fb021a07533b20
5ae07e17a621a8e082dafc17e450ffb739676998b48643a4daa7211214f623150942f6a02c99e83b85583ddbbb2c4996113211551257a656ec1139246ca86be0
aadedb3d1441a89b6a929501833b197fee7b9641a3503739e57c732a59b1f7da1cf8a73b1f9bcca0945b874d4393dbbf10b1680f66bbaa5d6f96e77b6f59113d
316bb31a795600b3d256d0cad2fe354538e7566b2bd69cc6cbcd5c38f0e2bcc63058344429dc2121fd07f63f2a7c66bf76e80d75c8f7a1b622f878a18941d840
545fb28d07d205d20e8ea071b283369834296bdaac75d256cb37eb0bee740bbe278cad253b8bbfcf69eca23973d939b97891c6ce2cecd8da8e2d343578f6648a
c2d0383fc818c798cf64e52f597c740f1cbd05df0c264c49134cf09d4a60e8a107260f20f92d47b374e32f000000ffff0300504b030414000600080000002100
0dd1909fb60000001b010000270000007468656d652f7468656d652f5f72656c732f7468656d654d616e616765722e786d6c2e72656c73848f4d0ac2301484f7
8277086f6fd3ba109126dd88d0add40384e4350d363f2451eced0dae2c082e8761be9969bb979dc9136332de3168aa1a083ae995719ac16db8ec8e4052164e89
d93b64b060828e6f37ed1567914b284d262452282e3198720e274a939cd08a54f980ae38a38f56e422a3a641c8bbd048f7757da0f19b017cc524bd62107bd500
1996509affb3fd381a89672f1f165dfe514173d9850528a2c6cce0239baa4c04ca5bbabac4df000000ffff0300504b01022d0014000600080000002100e9de0f
bfff0000001c0200001300000000000000000000000000000000005b436f6e74656e745f54797065735d2e786d6c504b01022d0014000600080000002100a5d6
a7e7c0000000360100000b00000000000000000000000000300100005f72656c732f2e72656c73504b01022d00140006000800000021006b799616830000008a
0000001c00000000000000000000000000190200007468656d652f7468656d652f7468656d654d616e616765722e786d6c504b01022d00140006000800000021
0030dd4329a8060000a41b00001600000000000000000000000000d60200007468656d652f7468656d652f7468656d65312e786d6c504b01022d001400060008
00000021000dd1909fb60000001b0100002700000000000000000000000000b20900007468656d652f7468656d652f5f72656c732f7468656d654d616e616765722e786d6c2e72656c73504b050600000000050005005d010000ad0a00000000}
{\*\colorschememapping 3c3f786d6c2076657273696f6e3d22312e302220656e636f64696e673d225554462d3822207374616e64616c6f6e653d22796573223f3e0d0a3c613a636c724d
617020786d6c6e733a613d22687474703a2f2f736368656d61732e6f70656e786d6c666f726d6174732e6f72672f64726177696e676d6c2f323030362f6d6169
6e22206267313d226c743122207478313d22646b3122206267323d226c743222207478323d22646b322220616363656e74313d22616363656e74312220616363
656e74323d22616363656e74322220616363656e74333d22616363656e74332220616363656e74343d22616363656e74342220616363656e74353d22616363656e74352220616363656e74363d22616363656e74362220686c696e6b3d22686c696e6b2220666f6c486c696e6b3d22666f6c486c696e6b222f3e}
{\*\latentstyles\lsdstimax267\lsdlockeddef0\lsdsemihiddendef1\lsdunhideuseddef1\lsdqformatdef0\lsdprioritydef99{\lsdlockedexcept \lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority0 \lsdlocked0 Normal;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 1;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 2;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 3;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 4;
\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 5;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 6;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 7;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 8;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 9;
\lsdpriority39 \lsdlocked0 toc 1;\lsdpriority39 \lsdlocked0 toc 2;\lsdpriority39 \lsdlocked0 toc 3;\lsdpriority39 \lsdlocked0 toc 4;\lsdpriority39 \lsdlocked0 toc 5;\lsdpriority39 \lsdlocked0 toc 6;\lsdpriority39 \lsdlocked0 toc 7;
\lsdpriority39 \lsdlocked0 toc 8;\lsdpriority39 \lsdlocked0 toc 9;\lsdqformat1 \lsdpriority35 \lsdlocked0 caption;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority10 \lsdlocked0 Title;\lsdpriority1 \lsdlocked0 Default Paragraph Font;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority11 \lsdlocked0 Subtitle;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority22 \lsdlocked0 Strong;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority20 \lsdlocked0 Emphasis;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority59 \lsdlocked0 Table Grid;\lsdunhideused0 \lsdlocked0 Placeholder Text;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority1 \lsdlocked0 No Spacing;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 1;\lsdunhideused0 \lsdlocked0 Revision;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority34 \lsdlocked0 List Paragraph;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority29 \lsdlocked0 Quote;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority30 \lsdlocked0 Intense Quote;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority19 \lsdlocked0 Subtle Emphasis;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority21 \lsdlocked0 Intense Emphasis;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority31 \lsdlocked0 Subtle Reference;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority32 \lsdlocked0 Intense Reference;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority33 \lsdlocked0 Book Title;\lsdpriority37 \lsdlocked0 Bibliography;\lsdqformat1 \lsdpriority39 \lsdlocked0 TOC Heading;}}{\*\datastore 010500000200000018000000
4d73786d6c322e534158584d4c5265616465722e362e3000000000000000000000060000
d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff090006000000000000000000000001000000010000000000000000100000feffffff00000000feffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffdfffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffff52006f006f007400200045006e00740072007900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000500ffffffffffffffffffffffff0c6ad98892f1d411a65f0040963251e5000000000000000000000000001e
9d47512fd001feffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000105000000000000}}